### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  id: AmqpReceive
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps
  children:
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.close()
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.onFeedbackReceived(java.lang.String)
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.open()
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.receive(long)
  langs:
  - java
  name: AmqpReceive
  nameWithType: AmqpReceive
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  type: Class
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Instance of the QPID-Proton-J BaseHandler class overriding the events what are needed to handle high level open, close methods and feedback received event.
  syntax:
    content: public class AmqpReceive implements AmqpFeedbackReceivedEvent
  inheritance:
  - java.lang.Object
  implements:
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpFeedbackReceivedEvent
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  id: AmqpReceive(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  langs:
  - java
  name: AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  nameWithType: AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Constructor to set up connection parameters
  syntax:
    content: public AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
    parameters:
    - id: hostName
      type: java.lang.String
      description: 'The address string of the service (example: AAA.BBB.CCC)'
    - id: userName
      type: java.lang.String
      description: 'The username string to use SASL authentication (example: user@sas.service)'
    - id: sasToken
      type: java.lang.String
      description: The SAS token string
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: protocol to use
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  id: AmqpReceive(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  langs:
  - java
  name: AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  nameWithType: AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Constructor to set up connection parameters
  syntax:
    content: public AmqpReceive(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
    parameters:
    - id: hostName
      type: java.lang.String
      description: 'The address string of the service (example: AAA.BBB.CCC)'
    - id: userName
      type: java.lang.String
      description: 'The username string to use SASL authentication (example: user@sas.service)'
    - id: sasToken
      type: java.lang.String
      description: The SAS token string
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: protocol to use
    - id: proxyOptions
      type: com.microsoft.azure.sdk.iot.service.ProxyOptions
      description: the proxy options to tunnel through, if a proxy should be used.
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.close()
  id: close()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  langs:
  - java
  name: close()
  nameWithType: AmqpReceive.close()
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.close()
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.close*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Invalidate AmqpsReceiveHandler member variable
  syntax:
    content: public void close()
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.onFeedbackReceived(java.lang.String)
  id: onFeedbackReceived(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  langs:
  - java
  name: onFeedbackReceived(String feedbackJson)
  nameWithType: AmqpReceive.onFeedbackReceived(String feedbackJson)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.onFeedbackReceived(String feedbackJson)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.onFeedbackReceived*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Handle on feedback received Proton event Parse received json and save result to a member variable Release semaphore for wait function
  syntax:
    content: public void onFeedbackReceived(String feedbackJson)
    parameters:
    - id: feedbackJson
      type: java.lang.String
      description: Received Json string to process
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.open()
  id: open()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  langs:
  - java
  name: open()
  nameWithType: AmqpReceive.open()
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.open()
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.open*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Create AmqpsReceiveHandler and store it in a member variable
  syntax:
    content: public void open()
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.receive(long)
  id: receive(long)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive
  langs:
  - java
  name: receive(long timeoutMs)
  nameWithType: AmqpReceive.receive(long timeoutMs)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.receive(long timeoutMs)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.receive*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Synchronized call to receive feedback batch Hide the event based receiving mechanism from the user API
  syntax:
    content: public synchronized FeedbackBatch receive(long timeoutMs)
    parameters:
    - id: timeoutMs
      type: long
      description: The timeout in milliseconds to wait for the feedback
    return:
      type: com.microsoft.azure.sdk.iot.service.FeedbackBatch
      description: The received feedback batch
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the input AmqpReceive object is null
  - type: java.lang.InterruptedException
    description: This exception is thrown if the input AmqpReceive object is null
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
  name: IotHubServiceClientProtocol
  nameWithType: IotHubServiceClientProtocol
  fullName: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive*
  name: AmqpReceive
  nameWithType: AmqpReceive.AmqpReceive
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.AmqpReceive
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.ProxyOptions
  name: ProxyOptions
  nameWithType: ProxyOptions
  fullName: com.microsoft.azure.sdk.iot.service.ProxyOptions
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.open*
  name: open
  nameWithType: AmqpReceive.open
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.open
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.close*
  name: close
  nameWithType: AmqpReceive.close
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.close
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.InterruptedException
  spec.java:
  - uid: java.lang.InterruptedException
    name: InterruptedException
    fullName: java.lang.InterruptedException
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.microsoft.azure.sdk.iot.service.FeedbackBatch
  name: FeedbackBatch
  nameWithType: FeedbackBatch
  fullName: com.microsoft.azure.sdk.iot.service.FeedbackBatch
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.receive*
  name: receive
  nameWithType: AmqpReceive.receive
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.receive
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.onFeedbackReceived*
  name: onFeedbackReceived
  nameWithType: AmqpReceive.onFeedbackReceived
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpReceive.onFeedbackReceived
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpFeedbackReceivedEvent
  name: AmqpFeedbackReceivedEvent
  nameWithType: AmqpFeedbackReceivedEvent
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpFeedbackReceivedEvent
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
