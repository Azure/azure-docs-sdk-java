### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator*"
fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator"
name: "lexicographicalComparator"
nameWithType: "Doubles.lexicographicalComparator"
members:
- uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator()"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.lexicographicalComparator()"
  name: "lexicographicalComparator()"
  nameWithType: "Doubles.lexicographicalComparator()"
  summary: "Returns a comparator that compares two `double` arrays [lexicographically][]. That is, it compares, using <xref uid=\"com.azure.cosmos.implementation.guava25.primitives.Doubles.compare(double,double)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#compare(double, double)\"></xref>), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, `[] < [1.0] < [1.0, 2.0] < [2.0]`.\n\nThe returned comparator is inconsistent with <xref uid=\"java.lang.Object.equals(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals(Object)\"></xref> (since arrays support only identity equality), but it is consistent with <xref uid=\"Arrays#equals(double[],\n double[])\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Arrays#equals(double[],\n double[])\"></xref>.\n\n\n[lexicographically]: http://en.wikipedia.org/wiki/Lexicographical_order"
  syntax: "public static Comparator<double[]> lexicographicalComparator()"
  returns:
    type: "<xref href=\"java.util.Comparator?alt=java.util.Comparator&text=Comparator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"double?alt=double&text=double\" data-throw-if-not-resolved=\"False\" />[]&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.primitives"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
