### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  id: EventHubConsumer
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventHubConsumer.close()
  - com.azure.messaging.eventhubs.EventHubConsumer.receive()
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  langs:
  - java
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubConsumer.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubConsumer.java
    startLine: 50
  package: com.azure.messaging.eventhubs
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax: &o1
    content: public class EventHubConsumer
  inheritance:
  - java.lang.Object
  - Closeable
- uid: com.azure.messaging.eventhubs.EventHubConsumer.close()
  id: close()
  parent: com.azure.messaging.eventhubs.EventHubConsumer
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  langs:
  - java
  name: close()
  nameWithType: EventHubConsumer.close()
  fullName: com.azure.messaging.eventhubs.EventHubConsumer.close()
  overload: com.azure.messaging.eventhubs.EventHubConsumer.close*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubConsumer.java
    startLine: 122
  package: com.azure.messaging.eventhubs
  summary: "<p>Disposes of the consumer by closing the underlying connection to the service.</p>\r\n<p></p>"
  syntax:
    content: public void close()
  exceptions:
  - type: cbf33bbe
    description: <p>if the underlying transport and its resources could not be disposed. </p>
- uid: com.azure.messaging.eventhubs.EventHubConsumer.receive()
  id: receive()
  parent: com.azure.messaging.eventhubs.EventHubConsumer
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  langs:
  - java
  name: receive()
  nameWithType: EventHubConsumer.receive()
  fullName: com.azure.messaging.eventhubs.EventHubConsumer.receive()
  overload: com.azure.messaging.eventhubs.EventHubConsumer.receive*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubConsumer.java
    startLine: 141
  package: com.azure.messaging.eventhubs
  summary: "<p>Begin consuming events until there are no longer any subscribers, or the parent <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient.close()\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient.close()</xref> is called.</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p></p>"
  syntax:
    content: public Flux<EventData> receive()
    return:
      type: f5e9f800com.azure.messaging.eventhubs.EventDataa08ddfce
      description: <p>A stream of events for this consumer. </p>
references:
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: com.azure.messaging.eventhubs.EventHubConsumer.close*
  name: close
  nameWithType: EventHubConsumer.close
  fullName: com.azure.messaging.eventhubs.EventHubConsumer.close
  package: com.azure.messaging.eventhubs
- uid: f5e9f800com.azure.messaging.eventhubs.EventDataa08ddfce
  spec.java:
  - name: Flux<
    fullName: Flux<
  - uid: com.azure.messaging.eventhubs.EventData
    name: EventData
    fullName: com.azure.messaging.eventhubs.EventData
    href: com.azure.messaging.eventhubs.EventData.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.eventhubs.EventHubConsumer.receive*
  name: receive
  nameWithType: EventHubConsumer.receive
  fullName: com.azure.messaging.eventhubs.EventHubConsumer.receive
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax: *o1
- uid: com.azure.messaging.eventhubs.implementation.AmqpReceiveLink
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.AmqpReceiveLink.yml
  name: AmqpReceiveLink
  nameWithType: AmqpReceiveLink
  fullName: com.azure.messaging.eventhubs.implementation.AmqpReceiveLink
  type: Interface
  summary: "<p>A unidirectional link from the client to the message broker that listens for messages.</p>\r\n<p></p>"
  syntax:
    content: public interface AmqpReceiveLink extends AmqpLink
- uid: com.azure.core.util.logging.ClientLogger
  parent: com.azure.core.util.logging
  href: com.azure.core.util.logging.ClientLogger.yml
  name: ClientLogger
  nameWithType: ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger
  type: Class
  summary: "<p>This is a fluent logger helper class that wraps a plug-able <xref uid=\"\" data-throw-if-not-resolved=\"false\">Logger</xref>.</p>\r\n<p>This logger logs formattable messages that use<code>{}Â \r\n    </code> as the placeholder. When a throwable is the last argument of the format varargs and the logger is enabled for <xref uid=\"\" data-throw-if-not-resolved=\"false\">verbose</xref> logging the stack trace for the throwable will be included in the log message.</p>\r\n<p>A minimum logging level threshold is determined by the <xref uid=\"com.azure.core.util.configuration.BaseConfigurations.AZURE_LOG_LEVEL\" data-throw-if-not-resolved=\"false\">AZURE_LOG_LEVEL</xref> environment configuration, by default logging is disabled.</p>\r\n<p>\r\n  <b>Log level hierarchy</b>\r\n</p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Error</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Warning</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Info</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Verbose</xref>\r\n      </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p></p>"
  syntax:
    content: public class ClientLogger
- uid: com.azure.messaging.eventhubs.EventData
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventData.yml
  name: EventData
  nameWithType: EventData
  fullName: com.azure.messaging.eventhubs.EventData
  type: Class
  summary: "<p>The data structure encapsulating the event being sent-to and received-from Event Hubs. Each Event Hub partition can be visualized as a stream of <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>.</p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. For reference, the specification can be found here: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">AMQP 1.0 specification</a></p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.properties()\" data-throw-if-not-resolved=\"false\">properties()</xref> - AMQPMessage.ApplicationProperties section </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.body()\" data-throw-if-not-resolved=\"false\">body()</xref> - if AMQPMessage.Body has Data section </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p>Serializing a received <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive Java types) and Data section is not supported. </p>\r\n<p></p>"
  syntax:
    content: public class EventData
- uid: com.azure.messaging.eventhubs.models.EventHubConsumerOptions
  parent: com.azure.messaging.eventhubs.models
  href: com.azure.messaging.eventhubs.models.EventHubConsumerOptions.yml
  name: EventHubConsumerOptions
  nameWithType: EventHubConsumerOptions
  fullName: com.azure.messaging.eventhubs.models.EventHubConsumerOptions
  type: Class
  summary: "<p>The baseline set of options that can be specified when creating a <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> to configure its behavior.</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumerOptions
- uid: com.azure.messaging.eventhubs.EventHubAsyncClient.close()
  parent: com.azure.messaging.eventhubs.EventHubAsyncClient
  href: com.azure.messaging.eventhubs.EventHubAsyncClient.yml
  name: close()
  nameWithType: EventHubAsyncClient.close()
  fullName: com.azure.messaging.eventhubs.EventHubAsyncClient.close()
  type: Method
  summary: "<p>Closes and disposes of connection to service. Any <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumers</xref> and <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducers</xref> created with this instance will have their connections closed. </p>"
  syntax:
    content: public void close()
- uid: com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()
  parent: com.azure.messaging.eventhubs.models.EventHubConsumerOptions
  href: com.azure.messaging.eventhubs.models.EventHubConsumerOptions.yml
  name: ownerLevel()
  nameWithType: EventHubConsumerOptions.ownerLevel()
  fullName: com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()
  type: Method
  summary: "<p>Gets the owner level for this consumer. If <xref uid=\"\" data-throw-if-not-resolved=\"false\">Optional#isPresent()</xref> is<code>falseÂ \r\n    </code> , then this is not an exclusive consumer. Otherwise, it is an exclusive consumer, and there can only be one active consumer for each partition and consumer group combination.</p>\r\n<p></p>"
  syntax:
    content: public Long ownerLevel()
    return:
      type: 34f09483
      description: <p>An optional owner level for this consumer. </p>
