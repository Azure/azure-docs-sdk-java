### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.SerializerProvider
  id: SerializerProvider
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.CACHE_UNKNOWN_MAPPINGS
  - com.fasterxml.jackson.databind.SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER
  - com.fasterxml.jackson.databind.SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER
  - com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider()
  - com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  - com.fasterxml.jackson.databind.SerializerProvider._attributes
  - com.fasterxml.jackson.databind.SerializerProvider._config
  - com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider._dateFormat
  - com.fasterxml.jackson.databind.SerializerProvider._dateFormat()
  - com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.SerializerProvider._keySerializer
  - com.fasterxml.jackson.databind.SerializerProvider._knownSerializers
  - com.fasterxml.jackson.databind.SerializerProvider._nullKeySerializer
  - com.fasterxml.jackson.databind.SerializerProvider._nullValueSerializer
  - com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider._serializationView
  - com.fasterxml.jackson.databind.SerializerProvider._serializerCache
  - com.fasterxml.jackson.databind.SerializerProvider._serializerFactory
  - com.fasterxml.jackson.databind.SerializerProvider._stdNullValueSerializer
  - com.fasterxml.jackson.databind.SerializerProvider._unknownTypeSerializer
  - com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()
  - com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class<?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.getActiveView()
  - com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()
  - com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.getConfig()
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()
  - com.fasterxml.jackson.databind.SerializerProvider.getGenerator()
  - com.fasterxml.jackson.databind.SerializerProvider.getLocale()
  - com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()
  - com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()
  - com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()
  - com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)
  - com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  - com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  langs:
  - java
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
  type: Class
  package: com.fasterxml.jackson.databind
  summary: >-
    Class that defines API used by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> and <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">JsonSerializer</xref>s to obtain serializers capable of serializing instances of specific types; as well as the default implementation of the functionality.


    Provider handles caching aspects of serializer handling; all construction details are delegated to <xref uid="com.fasterxml.jackson.databind.ser.SerializerFactory" data-throw-if-not-resolved="false">SerializerFactory</xref> instance.


    Object life-cycle is such that an initial instance ("blueprint") is created and referenced by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> intances; but for actual usage, a configured instance is created by using a create method in sub-class <xref uid="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.DefaultSerializerProvider</xref>. Only this instance can be used for actual serialization calls; blueprint object is only to be used for creating instances.
  syntax:
    content: public abstract class SerializerProvider extends DatabindContext
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.DatabindContext
  inheritedMembers:
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()
  - com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.DatabindContext.getActiveView()
  - com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()
  - com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)
  - com.fasterxml.jackson.databind.DatabindContext.getConfig()
  - com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.DatabindContext.getLocale()
  - com.fasterxml.jackson.databind.DatabindContext.getTimeZone()
  - com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()
  - com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  - com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  - com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object,java.lang.Object)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  id: <T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: <T>reportBadDefinition(JavaType type, String msg)
  nameWithType: SerializerProvider.<T>reportBadDefinition(JavaType type, String msg)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(JavaType type, String msg)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate a generic problem that stems from type definition(s), not input data, or input/output state; typically this means throwing a <xref uid="com.fasterxml.jackson.databind.exc.InvalidDefinitionException" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.exc.InvalidDefinitionException</xref>.
  syntax:
    content: public T <T>reportBadDefinition(JavaType type, String msg)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: msg
      type: java.lang.String
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
  id: <T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: <T>reportBadDefinition(JavaType type, String msg, Throwable cause)
  nameWithType: SerializerProvider.<T>reportBadDefinition(JavaType type, String msg, Throwable cause)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(JavaType type, String msg, Throwable cause)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>reportBadDefinition(JavaType type, String msg, Throwable cause)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: msg
      type: java.lang.String
    - id: cause
      type: java.lang.Throwable
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String,java.lang.Throwable)
  id: <T>reportBadDefinition(java.lang.Class<?>,java.lang.String,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: <T>reportBadDefinition(Class<?> raw, String msg, Throwable cause)
  nameWithType: SerializerProvider.<T>reportBadDefinition(Class<?> raw, String msg, Throwable cause)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(Class<?> raw, String msg, Throwable cause)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T <T>reportBadDefinition(Class<?> raw, String msg, Throwable cause)
    parameters:
    - id: raw
      type: java.lang.Class<?>
    - id: msg
      type: java.lang.String
    - id: cause
      type: java.lang.Throwable
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  id: <T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: <T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String message, Object[] msgArgs)
  nameWithType: SerializerProvider.<T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String message, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String message, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportBadPropertyDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific property (of a type), unrelated to actual JSON content to map. Default behavior is to construct and throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>.
  syntax:
    content: public T <T>reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String message, Object[] msgArgs)
    parameters:
    - id: bean
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: prop
      type: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
    - id: message
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  id: <T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: <T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
  nameWithType: SerializerProvider.<T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportBadTypeDefinition*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific Java type, unrelated to actual JSON content to map. Default behavior is to construct and throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>.
  syntax:
    content: public T <T>reportBadTypeDefinition(BeanDescription bean, String msg, Object[] msgArgs)
    parameters:
    - id: bean
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: msg
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.CACHE_UNKNOWN_MAPPINGS
  id: CACHE_UNKNOWN_MAPPINGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: CACHE_UNKNOWN_MAPPINGS
  nameWithType: SerializerProvider.CACHE_UNKNOWN_MAPPINGS
  fullName: com.fasterxml.jackson.databind.SerializerProvider.CACHE_UNKNOWN_MAPPINGS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Setting for determining whether mappings for "unknown classes" should be cached for faster resolution. Usually this isn't needed, but maybe it is in some cases?
  syntax:
    content: protected static final boolean CACHE_UNKNOWN_MAPPINGS
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER
  id: DEFAULT_NULL_KEY_SERIALIZER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: DEFAULT_NULL_KEY_SERIALIZER
  nameWithType: SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER
  fullName: com.fasterxml.jackson.databind.SerializerProvider.DEFAULT_NULL_KEY_SERIALIZER
  type: Field
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static final JsonSerializer<Object> DEFAULT_NULL_KEY_SERIALIZER
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER
  id: DEFAULT_UNKNOWN_SERIALIZER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: DEFAULT_UNKNOWN_SERIALIZER
  nameWithType: SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER
  fullName: com.fasterxml.jackson.databind.SerializerProvider.DEFAULT_UNKNOWN_SERIALIZER
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Placeholder serializer used when `java.lang.Object` typed property is marked to be serialized.

    NOTE: starting with 2.6, this instance is NOT used for any other types, and separate instances are constructed for "empty" Beans.


    NOTE: changed to `protected` for 2.3; no need to be publicly available.
  syntax:
    content: protected static final JsonSerializer<Object> DEFAULT_UNKNOWN_SERIALIZER
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider()
  id: SerializerProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: SerializerProvider()
  nameWithType: SerializerProvider.SerializerProvider()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider()
  overload: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Constructor for creating master (or "blue-print") provider object, which is only used as the template for constructing per-binding instances.
  syntax:
    content: public SerializerProvider()
- uid: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider)
  id: SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: SerializerProvider(SerializerProvider src)
  nameWithType: SerializerProvider.SerializerProvider(SerializerProvider src)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(SerializerProvider src)
  overload: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: Copy-constructor used when making a copy of a blueprint instance.
  syntax:
    content: protected SerializerProvider(SerializerProvider src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  id: SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
  nameWithType: SerializerProvider.SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
  overload: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind
  summary: "\"Copy-constructor\", used by sub-classes when creating actual non-blueprint instances to use."
  syntax:
    content: protected SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: Blueprint object used as the baseline for this instance
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: f
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.SerializerProvider._attributes
  id: _attributes
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _attributes
  nameWithType: SerializerProvider._attributes
  fullName: com.fasterxml.jackson.databind.SerializerProvider._attributes
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Lazily-constructed holder for per-call attributes. Only set for non-blueprint instances.
  syntax:
    content: protected transient ContextAttributes _attributes
    return:
      type: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.SerializerProvider._config
  id: _config
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _config
  nameWithType: SerializerProvider._config
  fullName: com.fasterxml.jackson.databind.SerializerProvider._config
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Serialization configuration to use for serialization processing.
  syntax:
    content: protected final SerializationConfig _config
    return:
      type: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  id: _createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _createAndCacheUntypedSerializer(JavaType type)
  nameWithType: SerializerProvider._createAndCacheUntypedSerializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(JavaType type)
  overload: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected JsonSerializer<Object> _createAndCacheUntypedSerializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class<?>)
  id: _createAndCacheUntypedSerializer(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _createAndCacheUntypedSerializer(Class<?> rawType)
  nameWithType: SerializerProvider._createAndCacheUntypedSerializer(Class<?> rawType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(Class<?> rawType)
  overload: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will try to construct a value serializer; and if one is successfully created, cache it for reuse.
  syntax:
    content: protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> rawType)
    parameters:
    - id: rawType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  id: _createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _createUntypedSerializer(JavaType type)
  nameWithType: SerializerProvider._createUntypedSerializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(JavaType type)
  overload: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected JsonSerializer<Object> _createUntypedSerializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider._dateFormat
  id: _dateFormat
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _dateFormat
  nameWithType: SerializerProvider._dateFormat
  fullName: com.fasterxml.jackson.databind.SerializerProvider._dateFormat
  type: Field
  package: com.fasterxml.jackson.databind
  summary: 'Lazily acquired and instantiated formatter object: initialized first time it is needed, reused afterwards. Used via instances (not blueprints), so that access need not be thread-safe.'
  syntax:
    content: protected DateFormat _dateFormat
    return:
      type: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.SerializerProvider._dateFormat()
  id: _dateFormat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _dateFormat()
  nameWithType: SerializerProvider._dateFormat()
  fullName: com.fasterxml.jackson.databind.SerializerProvider._dateFormat()
  overload: com.fasterxml.jackson.databind.SerializerProvider._dateFormat*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected final DateFormat _dateFormat()
    return:
      type: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class<?>)
  id: _findExplicitUntypedSerializer(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _findExplicitUntypedSerializer(Class<?> runtimeType)
  nameWithType: SerializerProvider._findExplicitUntypedSerializer(Class<?> runtimeType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(Class<?> runtimeType)
  overload: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will try to find a serializer, either from cache or by constructing one; but will not return an "unknown" serializer if this cannot be done but rather returns null.
  syntax:
    content: protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType)
    parameters:
    - id: runtimeType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
      description: Serializer if one can be found, null if not.
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: _handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property)
  nameWithType: SerializerProvider._handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to resolve and contextualize given serializer, if and as necessary.
  syntax:
    content: protected JsonSerializer<Object> _handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property)
    parameters:
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: _handleResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _handleResolvable(JsonSerializer<?> ser)
  nameWithType: SerializerProvider._handleResolvable(JsonSerializer<?> ser)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(JsonSerializer<?> ser)
  overload: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected JsonSerializer<Object> _handleResolvable(JsonSerializer<?> ser)
    parameters:
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider._keySerializer
  id: _keySerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _keySerializer
  nameWithType: SerializerProvider._keySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._keySerializer
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Serializer used to output non-null keys of Maps (which will get output as JSON Objects), if not null; if null, us the standard default key serializer.
  syntax:
    content: protected JsonSerializer<Object> _keySerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider._knownSerializers
  id: _knownSerializers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _knownSerializers
  nameWithType: SerializerProvider._knownSerializers
  fullName: com.fasterxml.jackson.databind.SerializerProvider._knownSerializers
  type: Field
  package: com.fasterxml.jackson.databind
  summary: For fast lookups, we will have a local non-shared read-only map that contains serializers previously fetched.
  syntax:
    content: protected final ReadOnlyClassToSerializerMap _knownSerializers
    return:
      type: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap
- uid: com.fasterxml.jackson.databind.SerializerProvider._nullKeySerializer
  id: _nullKeySerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _nullKeySerializer
  nameWithType: SerializerProvider._nullKeySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._nullKeySerializer
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Serializer used to (try to) output a null key, due to an entry of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> having null key. The default implementation will throw an exception if this happens; alternative implementation (like one that would write an Empty String) can be defined.
  syntax:
    content: protected JsonSerializer<Object> _nullKeySerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider._nullValueSerializer
  id: _nullValueSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _nullValueSerializer
  nameWithType: SerializerProvider._nullValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._nullValueSerializer
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Serializer used to output a null value. Default implementation writes nulls using <xref uid="com.fasterxml.jackson.core.JsonGenerator.writeNull*" data-throw-if-not-resolved="false">JsonGenerator#writeNull</xref>.
  syntax:
    content: protected JsonSerializer<Object> _nullValueSerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  id: _reportIncompatibleRootType(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _reportIncompatibleRootType(Object value, JavaType rootType)
  nameWithType: SerializerProvider._reportIncompatibleRootType(Object value, JavaType rootType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(Object value, JavaType rootType)
  overload: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected void _reportIncompatibleRootType(Object value, JavaType rootType)
    parameters:
    - id: value
      type: java.lang.Object
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider._serializationView
  id: _serializationView
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _serializationView
  nameWithType: SerializerProvider._serializationView
  fullName: com.fasterxml.jackson.databind.SerializerProvider._serializationView
  type: Field
  package: com.fasterxml.jackson.databind
  summary: View used for currently active serialization, if any. Only set for non-blueprint instances.
  syntax:
    content: protected final Class<?> _serializationView
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.SerializerProvider._serializerCache
  id: _serializerCache
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _serializerCache
  nameWithType: SerializerProvider._serializerCache
  fullName: com.fasterxml.jackson.databind.SerializerProvider._serializerCache
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Cache for doing type-to-value-serializer lookups.
  syntax:
    content: protected final SerializerCache _serializerCache
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerCache
- uid: com.fasterxml.jackson.databind.SerializerProvider._serializerFactory
  id: _serializerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _serializerFactory
  nameWithType: SerializerProvider._serializerFactory
  fullName: com.fasterxml.jackson.databind.SerializerProvider._serializerFactory
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Factory used for constructing actual serializer instances. Only set for non-blueprint instances.
  syntax:
    content: protected final SerializerFactory _serializerFactory
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.SerializerProvider._stdNullValueSerializer
  id: _stdNullValueSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _stdNullValueSerializer
  nameWithType: SerializerProvider._stdNullValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._stdNullValueSerializer
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Flag set to indicate that we are using vanilla null value serialization
  syntax:
    content: protected final boolean _stdNullValueSerializer
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider._unknownTypeSerializer
  id: _unknownTypeSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: _unknownTypeSerializer
  nameWithType: SerializerProvider._unknownTypeSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._unknownTypeSerializer
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Serializer that gets called for values of types for which no serializers can be constructed.


    The default serializer will simply thrown an exception.
  syntax:
    content: protected JsonSerializer<Object> _unknownTypeSerializer
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()
  id: canOverrideAccessModifiers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: canOverrideAccessModifiers()
  nameWithType: SerializerProvider.canOverrideAccessModifiers()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()
  overload: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for accessing serialization view in use (if any); equivalent to:


    ```java

    getConfig().canOverrideAccessModifiers();

    ```
  syntax:
    content: public final boolean canOverrideAccessModifiers()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: constructSpecializedType(JavaType baseType, Class<?> subclass)
  nameWithType: SerializerProvider.constructSpecializedType(JavaType baseType, Class<?> subclass)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(JavaType baseType, Class<?> subclass)
  overload: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for constructing subtypes, retaining generic type parameter (if any).


    Note: since 2.11 handling has varied a bit across serialization, deserialization.
  syntax:
    content: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: subclass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeDateKey(Date date, JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeDateKey(Date date, JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(Date date, JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will handle serialization of Dates used as <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys, based on <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS" data-throw-if-not-resolved="false">SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS</xref> value (and if using textual representation, configured date format)
  syntax:
    content: public void defaultSerializeDateKey(Date date, JsonGenerator gen)
    parameters:
    - id: date
      type: java.util.Date
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeDateKey(long timestamp, JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeDateKey(long timestamp, JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long timestamp, JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will handle serialization of Dates used as <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys, based on <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS" data-throw-if-not-resolved="false">SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS</xref> value (and if using textual representation, configured date format)
  syntax:
    content: public void defaultSerializeDateKey(long timestamp, JsonGenerator gen)
    parameters:
    - id: timestamp
      type: long
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeDateValue(Date date, JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeDateValue(Date date, JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(Date date, JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method that will handle serialization of Date(-like) values, using <xref uid="com.fasterxml.jackson.databind.SerializationConfig" data-throw-if-not-resolved="false">SerializationConfig</xref> settings to determine expected serialization behavior. Note: date here means "full" date, that is, date AND time, as per Java convention (and not date-only values like in SQL)'
  syntax:
    content: public final void defaultSerializeDateValue(Date date, JsonGenerator gen)
    parameters:
    - id: date
      type: java.util.Date
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long,com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeDateValue(long,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeDateValue(long timestamp, JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeDateValue(long timestamp, JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long timestamp, JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method that will handle serialization of Date(-like) values, using <xref uid="com.fasterxml.jackson.databind.SerializationConfig" data-throw-if-not-resolved="false">SerializationConfig</xref> settings to determine expected serialization behavior. Note: date here means "full" date, that is, date AND time, as per Java convention (and not date-only values like in SQL)'
  syntax:
    content: public final void defaultSerializeDateValue(long timestamp, JsonGenerator gen)
    parameters:
    - id: timestamp
      type: long
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeField(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeField(String fieldName, Object value, JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeField(String fieldName, Object value, JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(String fieldName, Object value, JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method that will serialize given field with specified value. Value may be null. Serializer is done using the usual null) using standard serializer locating functionality.
  syntax:
    content: public final void defaultSerializeField(String fieldName, Object value, JsonGenerator gen)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: value
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeNull(JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeNull(JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final void defaultSerializeNull(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  id: defaultSerializeValue(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: defaultSerializeValue(Object value, JsonGenerator gen)
  nameWithType: SerializerProvider.defaultSerializeValue(Object value, JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(Object value, JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method that will serialize given value (which can be null) using standard serializer locating functionality. It can be called for all values including field and Map values, but usually field values are best handled calling <xref uid="com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField*" data-throw-if-not-resolved="false">#defaultSerializeField</xref> instead.
  syntax:
    content: public final void defaultSerializeValue(Object value, JsonGenerator gen)
    parameters:
    - id: value
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findContentValueSerializer(JavaType valueType, BeanProperty property)
  nameWithType: SerializerProvider.findContentValueSerializer(JavaType valueType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(JavaType valueType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Alternative to <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)" data-throw-if-not-resolved="false">#findPrimaryPropertySerializer(JavaType, BeanProperty)</xref> called not for primary value, but "content" of such primary serializer: element of an array or <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>, value of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> entry and so on. This means that `property` passed (if any) does NOT represent value for which serializer is requested but its secondary type (or secondary type of that type, recursively).


    Serializer returned SHOULD NOT handle type information; caller will (have to) add suitable wrapping if necessary.


    Note: this call will also contextualize serializer (call `createContextual()` before returning it, if applicable (implements `ContextualSerializer`)
  syntax:
    content: public JsonSerializer<Object> findContentValueSerializer(JavaType valueType, BeanProperty property)
    parameters:
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
      description: Type of values to serialize
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        Property that indirectly refers to value being serialized (optional,
            may be <code>null</code> for root level serializers)
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: findContentValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findContentValueSerializer(Class<?> valueType, BeanProperty property)
  nameWithType: SerializerProvider.findContentValueSerializer(Class<?> valueType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(Class<?> valueType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: See <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)" data-throw-if-not-resolved="false">#findContentValueSerializer(JavaType, BeanProperty)</xref>.
  syntax:
    content: public JsonSerializer<Object> findContentValueSerializer(Class<?> valueType, BeanProperty property)
    parameters:
    - id: valueType
      type: java.lang.Class<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findKeySerializer(JavaType keyType, BeanProperty property)
  nameWithType: SerializerProvider.findKeySerializer(JavaType keyType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(JavaType keyType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to get the serializer to use for serializing non-null Map keys. Separation from regular <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*" data-throw-if-not-resolved="false">#findValueSerializer</xref> method is because actual write method must be different (@link JsonGenerator\#writeFieldName\}; but also since behavior for some key types may differ.


    Note that the serializer itself can be called with instances of any Java object, but not nulls.
  syntax:
    content: public JsonSerializer<Object> findKeySerializer(JavaType keyType, BeanProperty property)
    parameters:
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: findKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findKeySerializer(Class<?> rawKeyType, BeanProperty property)
  nameWithType: SerializerProvider.findKeySerializer(Class<?> rawKeyType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(Class<?> rawKeyType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonSerializer<Object> findKeySerializer(Class<?> rawKeyType, BeanProperty property)
    parameters:
    - id: rawKeyType
      type: java.lang.Class<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findNullKeySerializer(JavaType serializationType, BeanProperty property)
  nameWithType: SerializerProvider.findNullKeySerializer(JavaType serializationType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(JavaType serializationType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to find a serializer to use for null values for given declared type. Note that type is completely based on declared type, since nulls in Java have no type and thus runtime type cannot be determined.
  syntax:
    content: public JsonSerializer<Object> findNullKeySerializer(JavaType serializationType, BeanProperty property)
    parameters:
    - id: serializationType
      type: com.fasterxml.jackson.databind.JavaType
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)
  id: findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findNullValueSerializer(BeanProperty property)
  nameWithType: SerializerProvider.findNullValueSerializer(BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to get the serializer to use for serializing null values for specified property.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()" data-throw-if-not-resolved="false">#getDefaultNullValueSerializer()</xref>; can be overridden to add custom null serialization for properties of certain type or name. This gives method full granularity to basically override null handling for any specific property or class of properties.
  syntax:
    content: public JsonSerializer<Object> findNullValueSerializer(BeanProperty property)
    parameters:
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  id: findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
  nameWithType: SerializerProvider.findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findObjectId*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to find the Object Id for given POJO, if one has been generated. Will always return a non-null Object; contents vary depending on whether an Object Id already exists or not.
  syntax:
    content: public abstract WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
    parameters:
    - id: forPojo
      type: java.lang.Object
    - id: generatorType
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
    return:
      type: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
- uid: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findPrimaryPropertySerializer(JavaType valueType, BeanProperty property)
  nameWithType: SerializerProvider.findPrimaryPropertySerializer(JavaType valueType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(JavaType valueType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Similar to <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)" data-throw-if-not-resolved="false">#findValueSerializer(JavaType, BeanProperty)</xref>, but used when finding "primary" property value serializer (one directly handling value of the property). Difference has to do with contextual resolution, and method(s) called: this method should only be called when caller is certain that this is the primary property value serializer.'
  syntax:
    content: public JsonSerializer<Object> findPrimaryPropertySerializer(JavaType valueType, BeanProperty property)
    parameters:
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
      description: Type of values to serialize
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        Property that is being handled; will never be null, and its
            type has to match <code>valueType</code> parameter.
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: findPrimaryPropertySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findPrimaryPropertySerializer(Class<?> valueType, BeanProperty property)
  nameWithType: SerializerProvider.findPrimaryPropertySerializer(Class<?> valueType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(Class<?> valueType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: See <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)" data-throw-if-not-resolved="false">#findPrimaryPropertySerializer(JavaType, BeanProperty)</xref>
  syntax:
    content: public JsonSerializer<Object> findPrimaryPropertySerializer(Class<?> valueType, BeanProperty property)
    parameters:
    - id: valueType
      type: java.lang.Class<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)
  id: findTypeSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findTypeSerializer(JavaType javaType)
  nameWithType: SerializerProvider.findTypeSerializer(JavaType javaType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(JavaType javaType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to get the <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">TypeSerializer</xref> to use for including Type Id necessary for serializing for the given Java class. Useful for schema generators.
  syntax:
    content: public TypeSerializer findTypeSerializer(JavaType javaType)
    parameters:
    - id: javaType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)
  id: findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findTypedValueSerializer(JavaType valueType, boolean cache, BeanProperty property)
  nameWithType: SerializerProvider.findTypedValueSerializer(JavaType valueType, boolean cache, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(JavaType valueType, boolean cache, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to locate regular serializer, matching type serializer, and if both found, wrap them in a serializer that calls both in correct sequence. This method is currently only used for root-level serializer handling to allow for simpler caching. A call can always be replaced by equivalent calls to access serializer and type serializer separately.
  syntax:
    content: public JsonSerializer<Object> findTypedValueSerializer(JavaType valueType, boolean cache, BeanProperty property)
    parameters:
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Declared type of value being serialized (which may not
            be actual runtime type); used for finding both value serializer and
            type serializer to use for adding polymorphic type (if any)
    - id: cache
      type: boolean
      description: >-
        Whether resulting value serializer should be cached or not; this is just
            a hint
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        When creating secondary serializers, property for which
           serializer is needed: annotations of the property (or bean that contains it)
           may be checked to create contextual serializers.
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class<?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
  id: findTypedValueSerializer(java.lang.Class<?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property)
  nameWithType: SerializerProvider.findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to locate regular serializer, matching type serializer, and if both found, wrap them in a serializer that calls both in correct sequence. This method is currently only used for root-level serializer handling to allow for simpler caching. A call can always be replaced by equivalent calls to access serializer and type serializer separately.
  syntax:
    content: public JsonSerializer<Object> findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property)
    parameters:
    - id: valueType
      type: java.lang.Class<?>
      description: >-
        Type for purpose of locating a serializer; usually dynamic
           runtime type, but can also be static declared type, depending on configuration
    - id: cache
      type: boolean
      description: >-
        Whether resulting value serializer should be cached or not; this is just
            a hint
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        When creating secondary serializers, property for which
           serializer is needed: annotations of the property (or bean that contains it)
           may be checked to create contextual serializers.
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)
  id: findValueSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findValueSerializer(JavaType valueType)
  nameWithType: SerializerProvider.findValueSerializer(JavaType valueType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(JavaType valueType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops
  syntax:
    content: public JsonSerializer<Object> findValueSerializer(JavaType valueType)
    parameters:
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  id: findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findValueSerializer(JavaType valueType, BeanProperty property)
  nameWithType: SerializerProvider.findValueSerializer(JavaType valueType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(JavaType valueType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Similar to <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class&lt;?&gt;,com.fasterxml.jackson.databind.BeanProperty)" data-throw-if-not-resolved="false">#findValueSerializer(Class,BeanProperty)</xref>, but takes full generics-aware type instead of raw class. This is necessary for accurate handling of external type information, to handle polymorphic types.


    Note: this call will also contextualize serializer before returning it.
  syntax:
    content: public JsonSerializer<Object> findValueSerializer(JavaType valueType, BeanProperty property)
    parameters:
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        When creating secondary serializers, property for which
           serializer is needed: annotations of the property (or bean that contains it)
           may be checked to create contextual serializers.
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>)
  id: findValueSerializer(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findValueSerializer(Class<?> valueType)
  nameWithType: SerializerProvider.findValueSerializer(Class<?> valueType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(Class<?> valueType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops
  syntax:
    content: public JsonSerializer<Object> findValueSerializer(Class<?> valueType)
    parameters:
    - id: valueType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: findValueSerializer(Class<?> valueType, BeanProperty property)
  nameWithType: SerializerProvider.findValueSerializer(Class<?> valueType, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(Class<?> valueType, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to get hold of a serializer for a value of given type; or if no such serializer can be found, a default handler (which may do a best-effort generic serialization or just simply throw an exception when invoked).


    Note: this method is only called for non-null values; not for keys or null values. For these, check out other accessor methods.


    Note that serializers produced should NOT handle polymorphic serialization aspects; separate <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">TypeSerializer</xref> is to be constructed by caller if and as necessary.
  syntax:
    content: public JsonSerializer<Object> findValueSerializer(Class<?> valueType, BeanProperty property)
    parameters:
    - id: valueType
      type: java.lang.Class<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
    description: >-
      if there are fatal problems with
         accessing suitable serializer; including that of not
         finding any serializer
- uid: com.fasterxml.jackson.databind.SerializerProvider.getActiveView()
  id: getActiveView()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getActiveView()
  nameWithType: SerializerProvider.getActiveView()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getActiveView()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getActiveView*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for locating currently active view, if any; returns null if no view has been set.
  syntax:
    content: public final Class<?> getActiveView()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()
  id: getAnnotationIntrospector()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getAnnotationIntrospector()
  nameWithType: SerializerProvider.getAnnotationIntrospector()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for accessing serialization view in use (if any); equivalent to:


    ```java

    getConfig().getAnnotationIntrospector();

    ```
  syntax:
    content: public final AnnotationIntrospector getAnnotationIntrospector()
    return:
      type: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)
  id: getAttribute(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getAttribute(Object key)
  nameWithType: SerializerProvider.getAttribute(Object key)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getAttribute(Object key)
  overload: com.fasterxml.jackson.databind.SerializerProvider.getAttribute*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing attributes available in this context. Per-call attributes have highest precedence; attributes set via <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> or <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> have lower precedence.
  syntax:
    content: public Object getAttribute(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.SerializerProvider.getConfig()
  id: getConfig()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getConfig()
  nameWithType: SerializerProvider.getConfig()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getConfig()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getConfig*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing configuration for the serialization processing.
  syntax:
    content: public final SerializationConfig getConfig()
    return:
      type: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()
  id: getDefaultNullKeySerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getDefaultNullKeySerializer()
  nameWithType: SerializerProvider.getDefaultNullKeySerializer()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonSerializer<Object> getDefaultNullKeySerializer()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()
  id: getDefaultNullValueSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getDefaultNullValueSerializer()
  nameWithType: SerializerProvider.getDefaultNullValueSerializer()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonSerializer<Object> getDefaultNullValueSerializer()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class<?>)
  id: getDefaultPropertyFormat(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getDefaultPropertyFormat(Class<?> baseType)
  nameWithType: SerializerProvider.getDefaultPropertyFormat(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class<?>)
  id: getDefaultPropertyInclusion(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getDefaultPropertyInclusion(Class<?> baseType)
  nameWithType: SerializerProvider.getDefaultPropertyInclusion(Class<?> baseType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(Class<?> baseType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)
    parameters:
    - id: baseType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()
  id: getFilterProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getFilterProvider()
  nameWithType: SerializerProvider.getFilterProvider()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for accessing provider to find serialization filters used, equivalent to calling:


    ```java

    getConfig().getFilterProvider();

    ```
  syntax:
    content: public final FilterProvider getFilterProvider()
    return:
      type: com.fasterxml.jackson.databind.ser.FilterProvider
- uid: com.fasterxml.jackson.databind.SerializerProvider.getGenerator()
  id: getGenerator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getGenerator()
  nameWithType: SerializerProvider.getGenerator()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getGenerator()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getGenerator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'NOTE: current implementation simply returns \`null\` as generator is not yet assigned to this provider.'
  syntax:
    content: public JsonGenerator getGenerator()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider.getLocale()
  id: getLocale()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getLocale()
  nameWithType: SerializerProvider.getLocale()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getLocale()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getLocale*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing default Locale to use: convenience method for


    ```java

    getConfig().getLocale();

    ```
  syntax:
    content: public Locale getLocale()
    return:
      type: java.util.Locale
- uid: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()
  id: getSerializationView()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getSerializationView()
  nameWithType: SerializerProvider.getSerializationView()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final Class<?> getSerializationView()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()
  id: getTimeZone()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getTimeZone()
  nameWithType: SerializerProvider.getTimeZone()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing default TimeZone to use: convenience method for


    ```java

    getConfig().getTimeZone();

    ```
  syntax:
    content: public TimeZone getTimeZone()
    return:
      type: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()
  id: getTypeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getTypeFactory()
  nameWithType: SerializerProvider.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()
  overload: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final TypeFactory getTypeFactory()
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class<?>)
  id: getUnknownTypeSerializer(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: getUnknownTypeSerializer(Class<?> unknownType)
  nameWithType: SerializerProvider.getUnknownTypeSerializer(Class<?> unknownType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(Class<?> unknownType)
  overload: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to get the serializer to use if provider cannot determine an actual type-specific serializer to use; typically when none of <xref uid="com.fasterxml.jackson.databind.ser.SerializerFactory" data-throw-if-not-resolved="false">SerializerFactory</xref> instances are able to construct a serializer.


    Typically, returned serializer will throw an exception, although alternatively <xref uid="com.fasterxml.jackson.databind.ser.std.ToStringSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.std.ToStringSerializer</xref> could be returned as well.
  syntax:
    content: public JsonSerializer<Object> getUnknownTypeSerializer(Class<?> unknownType)
    parameters:
    - id: unknownType
      type: java.lang.Class<?>
      description: Type for which no serializer is found
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: handlePrimaryContextualization(JsonSerializer<?> ser, BeanProperty property)
  nameWithType: SerializerProvider.handlePrimaryContextualization(JsonSerializer<?> ser, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(JsonSerializer<?> ser, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called for primary property serializers (ones directly created to serialize values of a POJO property), to handle details of resolving <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">ContextualSerializer</xref> with given property context.
  syntax:
    content: public JsonSerializer<?> handlePrimaryContextualization(JsonSerializer<?> ser, BeanProperty property)
    parameters:
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: Property for which the given primary serializer is used; never null.
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  id: handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property)
  nameWithType: SerializerProvider.handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property)
  overload: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called for secondary property serializers (ones NOT directly created to serialize values of a POJO property but instead created as a dependant serializer -- such as value serializers for structured types, or serializers for root values) to handle details of resolving <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">ContextualDeserializer</xref> with given property context. Given that these serializers are not directly related to given property (or, in case of root value property, to any property), annotations accessible may or may not be relevant.
  syntax:
    content: public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property)
    parameters:
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
      description: >-
        Property for which serializer is used, if any; null
            when deserializing root values
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)
  id: hasSerializationFeatures(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: hasSerializationFeatures(int featureMask)
  nameWithType: SerializerProvider.hasSerializationFeatures(int featureMask)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int featureMask)
  overload: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: "\"Bulk\" access method for checking that all features specified by mask are enabled."
  syntax:
    content: public final boolean hasSerializationFeatures(int featureMask)
    parameters:
    - id: featureMask
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  id: includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
  nameWithType: SerializerProvider.includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
  overload: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to construct and configure <xref uid="com.fasterxml.jackson.annotation.JsonInclude" data-throw-if-not-resolved="false">JsonInclude</xref> filter instance, given a <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> to instantiate (with default constructor, by default).
  syntax:
    content: public abstract Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
    parameters:
    - id: forProperty
      type: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
      description: >-
        (optional) If filter is created for a property, that property;
            `null` if filter created via defaulting, global or per-type.
    - id: filterClass
      type: java.lang.Class<?>
    return:
      type: java.lang.Object
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)
  id: includeFilterSuppressNulls(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: includeFilterSuppressNulls(Object filter)
  nameWithType: SerializerProvider.includeFilterSuppressNulls(Object filter)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(Object filter)
  overload: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Follow-up method that may be called after calling <xref uid="com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance*" data-throw-if-not-resolved="false">#includeFilterInstance</xref>, to check handling of \`null\` values by the filter.
  syntax:
    content: public abstract boolean includeFilterSuppressNulls(Object filter)
    parameters:
    - id: filter
      type: java.lang.Object
    return:
      type: boolean
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  id: invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
  nameWithType: SerializerProvider.invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
  overload: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Helper method for constructing exception to indicate that given type id could not be resolved to a valid subtype of specified base type. Most commonly called during polymorphic deserialization.


    Note that most of the time this method should NOT be called directly: instead, method `handleUnknownTypeId()` should be called which will call this method if necessary.
  syntax:
    content: public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId, String extraDesc)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: typeId
      type: java.lang.String
    - id: extraDesc
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  id: isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: isEnabled(MapperFeature feature)
  nameWithType: SerializerProvider.isEnabled(MapperFeature feature)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(MapperFeature feature)
  overload: com.fasterxml.jackson.databind.SerializerProvider.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for:


    ```java

    getConfig().isEnabled(feature);

    ```
  syntax:
    content: public final boolean isEnabled(MapperFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.MapperFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  id: isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: isEnabled(SerializationFeature feature)
  nameWithType: SerializerProvider.isEnabled(SerializationFeature feature)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(SerializationFeature feature)
  overload: com.fasterxml.jackson.databind.SerializerProvider.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for:


    ```java

    getConfig().isEnabled(feature);

    ```
  syntax:
    content: public final boolean isEnabled(SerializationFeature feature)
    parameters:
    - id: feature
      type: com.fasterxml.jackson.databind.SerializationFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: isUnknownTypeSerializer(JsonSerializer<?> ser)
  nameWithType: SerializerProvider.isUnknownTypeSerializer(JsonSerializer<?> ser)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(JsonSerializer<?> ser)
  overload: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to see if given serializer is considered to be something returned by <xref uid="com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer*" data-throw-if-not-resolved="false">#getUnknownTypeSerializer</xref>, that is, something for which no regular serializer was found or constructed.
  syntax:
    content: public boolean isUnknownTypeSerializer(JsonSerializer<?> ser)
    parameters:
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String,java.lang.Object...)
  id: mappingException(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: mappingException(String message, Object[] msgArgs)
  nameWithType: SerializerProvider.mappingException(String message, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.mappingException(String message, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.SerializerProvider.mappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>; usually only indirectly used by calling <xref uid="com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem*" data-throw-if-not-resolved="false">#reportMappingProblem(String, Object...)</xref>.
  syntax:
    content: public JsonMappingException mappingException(String message, Object[] msgArgs)
    parameters:
    - id: message
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable,java.lang.String,java.lang.Object...)
  id: mappingException(java.lang.Throwable,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: mappingException(Throwable t, String message, Object[] msgArgs)
  nameWithType: SerializerProvider.mappingException(Throwable t, String message, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.mappingException(Throwable t, String message, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.SerializerProvider.mappingException*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Factory method for constructing a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>; usually only indirectly used by calling <xref uid="com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem*" data-throw-if-not-resolved="false">#reportMappingProblem(Throwable, String, Object...)</xref>
  syntax:
    content: protected JsonMappingException mappingException(Throwable t, String message, Object[] msgArgs)
    parameters:
    - id: t
      type: java.lang.Throwable
    - id: message
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
    return:
      type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String,java.lang.Object...)
  id: reportMappingProblem(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: reportMappingProblem(String message, Object[] args)
  nameWithType: SerializerProvider.reportMappingProblem(String message, Object[] args)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(String message, Object[] args)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate problem; default behavior is to construct and throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>, but in future may collect more than one and only throw after certain number, or at the end of serialization.
  syntax:
    content: public void reportMappingProblem(String message, Object[] args)
    parameters:
    - id: message
      type: java.lang.String
    - id: args
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object...)
  id: reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: reportMappingProblem(Throwable t, String message, Object[] msgArgs)
  nameWithType: SerializerProvider.reportMappingProblem(Throwable t, String message, Object[] msgArgs)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(Throwable t, String message, Object[] msgArgs)
  overload: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method called to indicate problem; default behavior is to construct and throw a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>, but in future may collect more than one and only throw after certain number, or at the end of serialization.
  syntax:
    content: public void reportMappingProblem(Throwable t, String message, Object[] msgArgs)
    parameters:
    - id: t
      type: java.lang.Throwable
    - id: message
      type: java.lang.String
    - id: msgArgs
      type: java.lang.Object[]
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  id: serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: serializerInstance(Annotated annotated, Object serDef)
  nameWithType: SerializerProvider.serializerInstance(Annotated annotated, Object serDef)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(Annotated annotated, Object serDef)
  overload: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to construct and configure serializer instance, either given a <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> to instantiate (with default constructor), or an uninitialized serializer instance. Either way, serialize will be properly resolved (via <xref uid="com.fasterxml.jackson.databind.ser.ResolvableSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ResolvableSerializer</xref>) and/or contextualized (via <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ContextualSerializer</xref>) as necessary.
  syntax:
    content: public abstract JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef)
    parameters:
    - id: annotated
      type: com.fasterxml.jackson.databind.introspect.Annotated
      description: Annotated entity that contained definition
    - id: serDef
      type: java.lang.Object
      description: 'Serializer definition: either an instance or class'
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object,java.lang.Object)
  id: setAttribute(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: setAttribute(Object key, Object value)
  nameWithType: SerializerProvider.setAttribute(Object key, Object value)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setAttribute(Object key, Object value)
  overload: com.fasterxml.jackson.databind.SerializerProvider.setAttribute*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for setting per-call value of given attribute. This will override any previously defined value for the attribute within this context.
  syntax:
    content: public SerializerProvider setAttribute(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: setDefaultKeySerializer(JsonSerializer<Object> ks)
  nameWithType: SerializerProvider.setDefaultKeySerializer(JsonSerializer<Object> ks)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(JsonSerializer<Object> ks)
  overload: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to specify serializer that will be used to write JSON property names matching null keys for Java Maps (which will throw an exception if try write such property name)
  syntax:
    content: public void setDefaultKeySerializer(JsonSerializer<Object> ks)
    parameters:
    - id: ks
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: setNullKeySerializer(JsonSerializer<Object> nks)
  nameWithType: SerializerProvider.setNullKeySerializer(JsonSerializer<Object> nks)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(JsonSerializer<Object> nks)
  overload: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to specify serializer to use for serializing all non-null JSON property names, unless more specific key serializer is found (i.e. if not custom key serializer has been registered for Java type).


    Note that key serializer registration are different from value serializer registrations.
  syntax:
    content: public void setNullKeySerializer(JsonSerializer<Object> nks)
    parameters:
    - id: nks
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializerProvider
  langs:
  - java
  name: setNullValueSerializer(JsonSerializer<Object> nvs)
  nameWithType: SerializerProvider.setNullValueSerializer(JsonSerializer<Object> nvs)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(JsonSerializer<Object> nvs)
  overload: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to specify serializer that will be used to write JSON values matching Java null values instead of default one (which simply writes JSON null).


    Note that you can get finer control over serializer to use by overriding <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer*" data-throw-if-not-resolved="false">#findNullValueSerializer</xref>, which gets called once per each property.
  syntax:
    content: public void setNullValueSerializer(JsonSerializer<Object> nvs)
    parameters:
    - id: nvs
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
references:
- uid: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider*
  name: SerializerProvider
  nameWithType: SerializerProvider.SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializationConfig
  name: SerializationConfig
  nameWithType: SerializationConfig
  fullName: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory
  name: SerializerFactory
  nameWithType: SerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer*
  name: setDefaultKeySerializer
  nameWithType: SerializerProvider.setDefaultKeySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer*
  name: setNullValueSerializer
  nameWithType: SerializerProvider.setNullValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer*
  name: setNullKeySerializer
  nameWithType: SerializerProvider.setNullKeySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.getConfig*
  name: getConfig
  nameWithType: SerializerProvider.getConfig
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getConfig
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.AnnotationIntrospector
  name: AnnotationIntrospector
  nameWithType: AnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.AnnotationIntrospector
- uid: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector*
  name: getAnnotationIntrospector
  nameWithType: SerializerProvider.getAnnotationIntrospector
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.type.TypeFactory
  name: TypeFactory
  nameWithType: TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory*
  name: getTypeFactory
  nameWithType: SerializerProvider.getTypeFactory
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory
  package: com.fasterxml.jackson.databind
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType*
  name: constructSpecializedType
  nameWithType: SerializerProvider.constructSpecializedType
  fullName: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.getActiveView*
  name: getActiveView
  nameWithType: SerializerProvider.getActiveView
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getActiveView
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView*
  name: getSerializationView
  nameWithType: SerializerProvider.getSerializationView
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView
  package: com.fasterxml.jackson.databind
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers*
  name: canOverrideAccessModifiers
  nameWithType: SerializerProvider.canOverrideAccessModifiers
  fullName: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.MapperFeature
  name: MapperFeature
  nameWithType: MapperFeature
  fullName: com.fasterxml.jackson.databind.MapperFeature
- uid: com.fasterxml.jackson.databind.SerializerProvider.isEnabled*
  name: isEnabled
  nameWithType: SerializerProvider.isEnabled
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isEnabled
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonFormat.Value
  name: JsonFormat.Value
  nameWithType: JsonFormat.Value
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat*
  name: getDefaultPropertyFormat
  nameWithType: SerializerProvider.getDefaultPropertyFormat
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.JsonInclude.Value
  name: JsonInclude.Value
  nameWithType: JsonInclude.Value
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion*
  name: getDefaultPropertyInclusion
  nameWithType: SerializerProvider.getDefaultPropertyInclusion
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion
  package: com.fasterxml.jackson.databind
- uid: java.util.Locale
  spec.java:
  - uid: java.util.Locale
    name: Locale
    fullName: java.util.Locale
- uid: com.fasterxml.jackson.databind.SerializerProvider.getLocale*
  name: getLocale
  nameWithType: SerializerProvider.getLocale
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getLocale
  package: com.fasterxml.jackson.databind
- uid: java.util.TimeZone
  spec.java:
  - uid: java.util.TimeZone
    name: TimeZone
    fullName: java.util.TimeZone
- uid: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone*
  name: getTimeZone
  nameWithType: SerializerProvider.getTimeZone
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.SerializerProvider.getAttribute*
  name: getAttribute
  nameWithType: SerializerProvider.getAttribute
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getAttribute
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.setAttribute*
  name: setAttribute
  nameWithType: SerializerProvider.setAttribute
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setAttribute
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializationFeature
  name: SerializationFeature
  nameWithType: SerializationFeature
  fullName: com.fasterxml.jackson.databind.SerializationFeature
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures*
  name: hasSerializationFeatures
  nameWithType: SerializerProvider.hasSerializationFeatures
  fullName: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ser.FilterProvider
  name: FilterProvider
  nameWithType: FilterProvider
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider
- uid: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider*
  name: getFilterProvider
  nameWithType: SerializerProvider.getFilterProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider.getGenerator*
  name: getGenerator
  nameWithType: SerializerProvider.getGenerator
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getGenerator
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
  spec.java:
  - uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
    name: ObjectIdGenerator
    fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
  name: WritableObjectId
  nameWithType: WritableObjectId
  fullName: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
- uid: com.fasterxml.jackson.databind.SerializerProvider.findObjectId*
  name: findObjectId
  nameWithType: SerializerProvider.findObjectId
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findObjectId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*
  name: findValueSerializer
  nameWithType: SerializerProvider.findValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer*
  name: findPrimaryPropertySerializer
  nameWithType: SerializerProvider.findPrimaryPropertySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer*
  name: findContentValueSerializer
  nameWithType: SerializerProvider.findContentValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer*
  name: findTypedValueSerializer
  nameWithType: SerializerProvider.findTypedValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer*
  name: findTypeSerializer
  nameWithType: SerializerProvider.findTypeSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer*
  name: findKeySerializer
  nameWithType: SerializerProvider.findKeySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer*
  name: getDefaultNullKeySerializer
  nameWithType: SerializerProvider.getDefaultNullKeySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer*
  name: getDefaultNullValueSerializer
  nameWithType: SerializerProvider.getDefaultNullValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer*
  name: findNullKeySerializer
  nameWithType: SerializerProvider.findNullKeySerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer*
  name: findNullValueSerializer
  nameWithType: SerializerProvider.findNullValueSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer*
  name: getUnknownTypeSerializer
  nameWithType: SerializerProvider.getUnknownTypeSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer*
  name: isUnknownTypeSerializer
  nameWithType: SerializerProvider.isUnknownTypeSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.introspect.Annotated
  name: Annotated
  nameWithType: Annotated
  fullName: com.fasterxml.jackson.databind.introspect.Annotated
- uid: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance*
  name: serializerInstance
  nameWithType: SerializerProvider.serializerInstance
  fullName: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
  name: BeanPropertyDefinition
  nameWithType: BeanPropertyDefinition
  fullName: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance*
  name: includeFilterInstance
  nameWithType: SerializerProvider.includeFilterInstance
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls*
  name: includeFilterSuppressNulls
  nameWithType: SerializerProvider.includeFilterSuppressNulls
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization*
  name: handlePrimaryContextualization
  nameWithType: SerializerProvider.handlePrimaryContextualization
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization*
  name: handleSecondaryContextualization
  nameWithType: SerializerProvider.handleSecondaryContextualization
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization
  package: com.fasterxml.jackson.databind
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue*
  name: defaultSerializeValue
  nameWithType: SerializerProvider.defaultSerializeValue
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField*
  name: defaultSerializeField
  nameWithType: SerializerProvider.defaultSerializeField
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField
  package: com.fasterxml.jackson.databind
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue*
  name: defaultSerializeDateValue
  nameWithType: SerializerProvider.defaultSerializeDateValue
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue
  package: com.fasterxml.jackson.databind
- uid: java.util.Date
  spec.java:
  - uid: java.util.Date
    name: Date
    fullName: java.util.Date
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey*
  name: defaultSerializeDateKey
  nameWithType: SerializerProvider.defaultSerializeDateKey
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull*
  name: defaultSerializeNull
  nameWithType: SerializerProvider.defaultSerializeNull
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem*
  name: reportMappingProblem
  nameWithType: SerializerProvider.reportMappingProblem
  fullName: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportBadTypeDefinition*
  name: <T>reportBadTypeDefinition
  nameWithType: SerializerProvider.<T>reportBadTypeDefinition
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportBadPropertyDefinition*
  name: <T>reportBadPropertyDefinition
  nameWithType: SerializerProvider.<T>reportBadPropertyDefinition
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition*
  name: <T>reportBadDefinition
  nameWithType: SerializerProvider.<T>reportBadDefinition
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition
  package: com.fasterxml.jackson.databind
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException*
  name: invalidTypeIdException
  nameWithType: SerializerProvider.invalidTypeIdException
  fullName: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider.mappingException*
  name: mappingException
  nameWithType: SerializerProvider.mappingException
  fullName: com.fasterxml.jackson.databind.SerializerProvider.mappingException
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType*
  name: _reportIncompatibleRootType
  nameWithType: SerializerProvider._reportIncompatibleRootType
  fullName: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer*
  name: _findExplicitUntypedSerializer
  nameWithType: SerializerProvider._findExplicitUntypedSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer*
  name: _createAndCacheUntypedSerializer
  nameWithType: SerializerProvider._createAndCacheUntypedSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer*
  name: _createUntypedSerializer
  nameWithType: SerializerProvider._createUntypedSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable*
  name: _handleContextualResolvable
  nameWithType: SerializerProvider._handleContextualResolvable
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable*
  name: _handleResolvable
  nameWithType: SerializerProvider._handleResolvable
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable
  package: com.fasterxml.jackson.databind
- uid: java.text.DateFormat
  spec.java:
  - uid: java.text.DateFormat
    name: DateFormat
    fullName: java.text.DateFormat
- uid: com.fasterxml.jackson.databind.SerializerProvider._dateFormat*
  name: _dateFormat
  nameWithType: SerializerProvider._dateFormat
  fullName: com.fasterxml.jackson.databind.SerializerProvider._dateFormat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.ser.SerializerCache
  name: SerializerCache
  nameWithType: SerializerCache
  fullName: com.fasterxml.jackson.databind.ser.SerializerCache
- uid: com.fasterxml.jackson.databind.cfg.ContextAttributes
  name: ContextAttributes
  nameWithType: ContextAttributes
  fullName: com.fasterxml.jackson.databind.cfg.ContextAttributes
- uid: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap
  name: ReadOnlyClassToSerializerMap
  nameWithType: ReadOnlyClassToSerializerMap
  fullName: com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap
- uid: com.fasterxml.jackson.databind.DatabindContext
  name: DatabindContext
  nameWithType: DatabindContext
  fullName: com.fasterxml.jackson.databind.DatabindContext
- uid: com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  name: DatabindContext.invalidTypeIdException(JavaType,String,String)
  nameWithType: DatabindContext.invalidTypeIdException(JavaType,String,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.<T>_throwNotASubtype(JavaType,String)
  nameWithType: DatabindContext.<T>_throwNotASubtype(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.<T>reportBadDefinition(JavaType,String)
  nameWithType: DatabindContext.<T>reportBadDefinition(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
  name: DatabindContext._desc(String)
  nameWithType: DatabindContext._desc(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  name: DatabindContext.objectIdResolverInstance(Annotated,ObjectIdInfo)
  nameWithType: DatabindContext.objectIdResolverInstance(Annotated,ObjectIdInfo)
  fullName: com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
- uid: com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()
  name: DatabindContext.getTypeFactory()
  nameWithType: DatabindContext.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.<T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.<T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
  name: DatabindContext._format(String,Object)
  nameWithType: DatabindContext._format(String,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
  name: DatabindContext.constructType(Type)
  nameWithType: DatabindContext.constructType(Type)
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.DatabindContext.getTimeZone()
  name: DatabindContext.getTimeZone()
  nameWithType: DatabindContext.getTimeZone()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getTimeZone()
- uid: com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.resolveAndValidateSubType(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.resolveAndValidateSubType(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
  name: DatabindContext._truncate(String)
  nameWithType: DatabindContext._truncate(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
  name: DatabindContext._colonConcat(String,String)
  nameWithType: DatabindContext._colonConcat(String,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.resolveSubType(JavaType,String)
  nameWithType: DatabindContext.resolveSubType(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
  name: DatabindContext.<T>reportBadDefinition(Class<?>,String)
  nameWithType: DatabindContext.<T>reportBadDefinition(Class<?>,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  name: DatabindContext.objectIdGeneratorInstance(Annotated,ObjectIdInfo)
  nameWithType: DatabindContext.objectIdGeneratorInstance(Annotated,ObjectIdInfo)
  fullName: com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()
  name: DatabindContext.getAnnotationIntrospector()
  nameWithType: DatabindContext.getAnnotationIntrospector()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class<?>)
  name: DatabindContext.getDefaultPropertyFormat(Class<?>)
  nameWithType: DatabindContext.getDefaultPropertyFormat(Class<?>)
  fullName: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  name: DatabindContext.constructSpecializedType(JavaType,Class<?>)
  nameWithType: DatabindContext.constructSpecializedType(JavaType,Class<?>)
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.DatabindContext.getLocale()
  name: DatabindContext.getLocale()
  nameWithType: DatabindContext.getLocale()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getLocale()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
  name: DatabindContext._quotedString(String)
  nameWithType: DatabindContext._quotedString(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  name: DatabindContext.isEnabled(MapperFeature)
  nameWithType: DatabindContext.isEnabled(MapperFeature)
  fullName: com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
- uid: com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()
  name: DatabindContext.canOverrideAccessModifiers()
  nameWithType: DatabindContext.canOverrideAccessModifiers()
  fullName: com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()
- uid: com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object,java.lang.Object)
  name: DatabindContext.setAttribute(Object,Object)
  nameWithType: DatabindContext.setAttribute(Object,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext.getActiveView()
  name: DatabindContext.getActiveView()
  nameWithType: DatabindContext.getActiveView()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getActiveView()
- uid: com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  name: DatabindContext.converterInstance(Annotated,Object)
  nameWithType: DatabindContext.converterInstance(Annotated,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)
  name: DatabindContext.getAttribute(Object)
  nameWithType: DatabindContext.getAttribute(Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.<T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.<T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.DatabindContext.getConfig()
  name: DatabindContext.getConfig()
  nameWithType: DatabindContext.getConfig()
  fullName: com.fasterxml.jackson.databind.DatabindContext.getConfig()
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
  name: ObjectIdGenerator
  nameWithType: ObjectIdGenerator
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
- uid: T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: T>_throwNotASubtype(JavaType,String)
  nameWithType: T>_throwNotASubtype(JavaType,String)
  fullName: T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.
  name: DatabindContext.
  nameWithType: DatabindContext.
  fullName: com.fasterxml.jackson.databind.DatabindContext.
- uid: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: T>reportBadDefinition(JavaType,String)
  nameWithType: T>reportBadDefinition(JavaType,String)
  fullName: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: ?>,java.lang.String)
  name: ?>,String)
  nameWithType: ?>,String)
  fullName: ?>,java.lang.String)
- uid: T>reportBadDefinition(java.lang.Class
  name: T>reportBadDefinition(Class
  nameWithType: T>reportBadDefinition(Class
  fullName: T>reportBadDefinition(java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class
  name: DatabindContext.getDefaultPropertyFormat(Class
  nameWithType: DatabindContext.getDefaultPropertyFormat(Class
  fullName: com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class
- uid: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class
  name: DatabindContext.constructSpecializedType(JavaType,Class
  nameWithType: DatabindContext.constructSpecializedType(JavaType,Class
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class
- uid: T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
