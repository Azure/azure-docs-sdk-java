### YamlMime:JavaType
uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient"
fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient"
name: "ScenesAsyncClient"
nameWithType: "ScenesAsyncClient"
summary: "Initializes a new instance of the asynchronous Farm<wbr>Beats<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ScenesAsyncClient**"
methods:
- uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.beginCreateSatelliteDataIngestionJob(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.beginCreateSatelliteDataIngestionJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  name: "beginCreateSatelliteDataIngestionJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  nameWithType: "ScenesAsyncClient.beginCreateSatelliteDataIngestionJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  summary: "Create a satellite data ingestion job."
  parameters:
  - description: "JobId provided by user."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Job parameters supplied by user."
    name: "job"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginCreateSatelliteDataIngestionJob(String jobId, BinaryData job, RequestOptions requestOptions)"
  desc: "Create a satellite data ingestion job.\n\n**Request Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     endDateTime: OffsetDateTime (Required)\n     provider: String(Microsoft) (Optional)\n     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     data (Optional): {\n         imageNames (Optional): [\n             String (Optional)\n         ]\n         imageFormats (Optional): [\n             String (Optional)\n         ]\n         imageResolutions (Optional): [\n             double (Optional)\n         ]\n     }\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     endDateTime: OffsetDateTime (Required)\n     provider: String(Microsoft) (Optional)\n     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     data (Optional): {\n         imageNames (Optional): [\n             String (Optional)\n         ]\n         imageFormats (Optional): [\n             String (Optional)\n         ]\n         imageResolutions (Optional): [\n             double (Optional)\n         ]\n     }\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> for polling of schema of satellite data ingestion job."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.downloadWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.downloadWithResponse(String filePath, RequestOptions requestOptions)"
  name: "downloadWithResponse(String filePath, RequestOptions requestOptions)"
  nameWithType: "ScenesAsyncClient.downloadWithResponse(String filePath, RequestOptions requestOptions)"
  summary: "Downloads and returns file Stream as response for the given input file<wbr>Path."
  parameters:
  - description: "cloud storage path of scene file."
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> downloadWithResponse(String filePath, RequestOptions requestOptions)"
  desc: "Downloads and returns file Stream as response for the given input filePath.\n\n**Response Body Schema**\n\n```java\nBinaryData\n```"
  returns:
    description: "the response body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.getSatelliteDataIngestionJobDetailsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.getSatelliteDataIngestionJobDetailsWithResponse(String jobId, RequestOptions requestOptions)"
  name: "getSatelliteDataIngestionJobDetailsWithResponse(String jobId, RequestOptions requestOptions)"
  nameWithType: "ScenesAsyncClient.getSatelliteDataIngestionJobDetailsWithResponse(String jobId, RequestOptions requestOptions)"
  summary: "Get a satellite data ingestion job."
  parameters:
  - description: "Id of the job."
    name: "jobId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getSatelliteDataIngestionJobDetailsWithResponse(String jobId, RequestOptions requestOptions)"
  desc: "Get a satellite data ingestion job.\n\n**Response Body Schema**\n\n```java\n{\n     partyId: String (Required)\n     boundaryId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     endDateTime: OffsetDateTime (Required)\n     provider: String(Microsoft) (Optional)\n     source: String(Sentinel_2_L2A/Sentinel_2_L1C) (Required)\n     data (Optional): {\n         imageNames (Optional): [\n             String (Optional)\n         ]\n         imageFormats (Optional): [\n             String (Optional)\n         ]\n         imageResolutions (Optional): [\n             double (Optional)\n         ]\n     }\n     id: String (Optional)\n     status: String (Optional)\n     durationInSeconds: Double (Optional)\n     message: String (Optional)\n     errorCode: String (Optional)\n     createdDateTime: OffsetDateTime (Optional)\n     lastActionDateTime: OffsetDateTime (Optional)\n     startTime: OffsetDateTime (Optional)\n     endTime: OffsetDateTime (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     createdBy: String (Optional)\n     modifiedBy: String (Optional)\n     properties (Optional): {\n         String: Object (Optional)\n     }\n }\n```"
  returns:
    description: "a satellite data ingestion job along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.getStacFeatureWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.getStacFeatureWithResponse(String collectionId, String featureId, RequestOptions requestOptions)"
  name: "getStacFeatureWithResponse(String collectionId, String featureId, RequestOptions requestOptions)"
  nameWithType: "ScenesAsyncClient.getStacFeatureWithResponse(String collectionId, String featureId, RequestOptions requestOptions)"
  summary: "Get a feature(Spatio<wbr>Temporal Asset Catalog (STAC) Item) for given collection and feature id."
  parameters:
  - description: "Collection Id to be fetched. Allowed values: \"Sentinel_2_L2A\", \"Sentinel_2_L1C\"."
    name: "collectionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Feature Id to be fetched."
    name: "featureId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getStacFeatureWithResponse(String collectionId, String featureId, RequestOptions requestOptions)"
  desc: "Get a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id.\n\n**Response Body Schema**\n\n```java\n{\n     stacVersion: String (Required)\n     stacExtensions (Optional): [\n         String (Optional)\n     ]\n     id: String (Required)\n     type: String (Required)\n     geometry: Object (Optional)\n     bbox (Optional): [\n         double (Optional)\n     ]\n     properties: Object (Required)\n     links (Required): [\n          (Required){\n             href: String (Required)\n             rel: String (Required)\n             type: String (Optional)\n             title: String (Optional)\n         }\n     ]\n     assets (Required): {\n         String (Required): {\n             href: String (Required)\n             title: String (Optional)\n             description: String (Optional)\n             type: String (Optional)\n             roles (Optional): [\n                 String (Optional)\n             ]\n         }\n     }\n     collection: String (Optional)\n }\n```"
  returns:
    description: "a feature(SpatioTemporal Asset Catalog (STAC) Item) for given collection and feature id along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.list(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.list(String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions)"
  name: "list(String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions)"
  nameWithType: "ScenesAsyncClient.list(String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions)"
  summary: "Returns a paginated list of scene resources."
  parameters:
  - description: "Provider name of scene data."
    name: "provider"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "PartyId."
    name: "partyId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "BoundaryId."
    name: "boundaryId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Source name of scene data, Available Values: Sentinel_2_L2A, Sentinel_2_L1C."
    name: "source"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> list(String provider, String partyId, String boundaryId, String source, RequestOptions requestOptions)"
  desc: "Returns a paginated list of scene resources.\n\n**Query Parameters**\n\n    | ------------------------------ | -------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name                           | Type           | Required | Description                                                                                                                                                                                                                                  |\n    | startDateTime                  | OffsetDateTime | No       | Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ.                                                                                                                                                                   |\n    | endDateTime                    | OffsetDateTime | No       | Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.                                                                                                                                                                      |\n    | maxCloudCoveragePercentage     | Double         | No       | Filter scenes with cloud coverage percentage less than max value. Range \\[0 to 100.0\\].                                                                                                                                                      |\n    | maxDarkPixelCoveragePercentage | Double         | No       | Filter scenes with dark pixel coverage percentage less than max value. Range \\[0 to 100.0\\].                                                                                                                                                 |\n    | imageNames                     | List<String>   | No       | List of image names to be filtered. Call <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref> to add string to array.                 |\n    | imageResolutions               | List<Double>   | No       | List of image resolutions in meters to be filtered. Call <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref> to add string to array. |\n    | imageFormats                   | List<String>   | No       | List of image formats to be filtered. Call <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref> to add string to array.               |\n    | maxPageSize                    | Integer        | No       | Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default value = 50.                                                                                                                                                |\n    | skipToken                      | String         | No       | Skip token for getting next set of results.                                                                                                                                                                                                  |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     sceneDateTime: OffsetDateTime (Optional)\n     provider: String (Optional)\n     source: String (Optional)\n     imageFiles (Optional): [\n          (Optional){\n             fileLink: String (Optional)\n             name: String (Required)\n             imageFormat: String(TIF) (Optional)\n             resolution: Double (Optional)\n         }\n     ]\n     imageFormat: String(TIF) (Optional)\n     cloudCoverPercentage: Double (Optional)\n     darkPixelPercentage: Double (Optional)\n     ndviMedianValue: Double (Optional)\n     boundaryId: String (Optional)\n     partyId: String (Optional)\n     id: String (Optional)\n     eTag: String (Optional)\n }\n```"
  returns:
    description: "paged response contains list of requested objects and a URL link to get the next set of results as\n     paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.searchFeaturesWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesAsyncClient.searchFeaturesWithResponse(String collectionId, BinaryData searchFeaturesQuery, RequestOptions requestOptions)"
  name: "searchFeaturesWithResponse(String collectionId, BinaryData searchFeaturesQuery, RequestOptions requestOptions)"
  nameWithType: "ScenesAsyncClient.searchFeaturesWithResponse(String collectionId, BinaryData searchFeaturesQuery, RequestOptions requestOptions)"
  summary: "Search for STAC features by collection id, bbox, intersecting geometry, start and end datetime."
  parameters:
  - description: "Collection Id to be searched. Allowed values: \"Sentinel_2_L2A\", \"Sentinel_2_L1C\"."
    name: "collectionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Query filters."
    name: "searchFeaturesQuery"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> searchFeaturesWithResponse(String collectionId, BinaryData searchFeaturesQuery, RequestOptions requestOptions)"
  desc: "Search for STAC features by collection id, bbox, intersecting geometry, start and end datetime.\n\n**Query Parameters**\n\n    | ----------- | ------- | -------- | ---------------------------------------------------------------------------------------------- |\n    | Name        | Type    | Required | Description                                                                                    |\n    | maxpagesize | Integer | No       | Maximum number of features needed (inclusive). Minimum = 1, Maximum = 100, Default value = 10. |\n    | skip        | Integer | No       | Skip token for getting next set of results.                                                    |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     startDateTime: OffsetDateTime (Required)\n     endDateTime: OffsetDateTime (Required)\n     intersects (Optional): {\n     }\n     bbox (Optional): [\n         double (Optional)\n     ]\n     featureIds (Optional): [\n         String (Optional)\n     ]\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     features (Required): [\n          (Required){\n             stacVersion: String (Required)\n             stacExtensions (Optional): [\n                 String (Optional)\n             ]\n             id: String (Required)\n             type: String (Required)\n             geometry: Object (Optional)\n             bbox (Optional): [\n                 double (Optional)\n             ]\n             properties: Object (Required)\n             links (Required): [\n                  (Required){\n                     href: String (Required)\n                     rel: String (Required)\n                     type: String (Optional)\n                     title: String (Optional)\n                 }\n             ]\n             assets (Required): {\n                 String (Required): {\n                     href: String (Required)\n                     title: String (Optional)\n                     description: String (Optional)\n                     type: String (Optional)\n                     roles (Optional): [\n                         String (Optional)\n                     ]\n                 }\n             }\n             collection: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "paged response contains list of features and next property to get the next set of results along with\n     <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous FarmBeatsClient type."
metadata: {}
package: "com.azure.verticals.agrifood.farming"
artifact: com.azure:azure-verticals-agrifood-farming:1.0.0-beta.3
