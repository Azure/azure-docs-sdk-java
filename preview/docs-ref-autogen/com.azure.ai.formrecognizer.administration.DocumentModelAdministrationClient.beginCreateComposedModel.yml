### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationClient.beginCreateComposedModel*"
fullName: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationClient.beginCreateComposedModel"
name: "beginCreateComposedModel"
nameWithType: "DocumentModelAdministrationClient.beginCreateComposedModel"
members:
- uid: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationClient.beginCreateComposedModel(java.util.List<java.lang.String>,java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationClient.beginCreateComposedModel(List<String> modelIDs, String modelId)"
  name: "beginCreateComposedModel(List<String> modelIDs, String modelId)"
  nameWithType: "DocumentModelAdministrationClient.beginCreateComposedModel(List<String> modelIDs, String modelId)"
  summary: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate IDs.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString modelId1 = \"{model_Id_1}\";\n String modelId2 = \"{model_Id_2}\";\n String modelId = \"my-composed-model\";\n final DocumentModel documentModel\n     = documentModelAdministrationClient.beginCreateComposedModel(Arrays.asList(modelId1, modelId2), modelId)\n     .getFinalResult();\n\n System.out.printf(\"Model ID: %s%n\", documentModel.getModelId());\n System.out.printf(\"Model Description: %s%n\", documentModel.getDescription());\n System.out.printf(\"Model Created on: %s%n\", documentModel.getCreatedOn());\n documentModel.getDocTypes().forEach((key, docTypeInfo) -> {\n     docTypeInfo.getFieldSchema().forEach((field, documentFieldSchema) -> {\n         System.out.printf(\"Field: %s\", field);\n         System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n         System.out.printf(\"Field confidence: %.2f\", docTypeInfo.getFieldConfidence().get(field));\n     });\n });\n```"
  parameters:
  - description: "The list of models IDs to form the composed model."
    name: "modelIDs"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A unique ID for your composed model. If not specified, a model ID will be created for you."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<DocumentOperationResult,DocumentModel> beginCreateComposedModel(List<String> modelIDs, String modelId)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the <xref uid=\"com.azure.ai.formrecognizer.administration.models.DocumentModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.administration.models.DocumentModel?alt=com.azure.ai.formrecognizer.administration.models.DocumentModel&text=DocumentModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationClient.beginCreateComposedModel(java.util.List<java.lang.String>,java.lang.String,com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationClient.beginCreateComposedModel(List<String> modelIDs, String modelId, CreateComposedModelOptions createComposedModelOptions, Context context)"
  name: "beginCreateComposedModel(List<String> modelIDs, String modelId, CreateComposedModelOptions createComposedModelOptions, Context context)"
  nameWithType: "DocumentModelAdministrationClient.beginCreateComposedModel(List<String> modelIDs, String modelId, CreateComposedModelOptions createComposedModelOptions, Context context)"
  summary: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate IDs.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString modelId1 = \"{model_Id_1}\";\n String modelId2 = \"{model_Id_2}\";\n String modelId = \"my-composed-model\";\n\n final DocumentModel documentModel =\n     documentModelAdministrationClient.beginCreateComposedModel(Arrays.asList(modelId1, modelId2), modelId,\n             new CreateComposedModelOptions()\n                 .setDescription(\"my composed model name\"),\n             Context.NONE)\n         .setPollInterval(Duration.ofSeconds(5))\n         .getFinalResult();\n\n System.out.printf(\"Model ID: %s%n\", documentModel.getModelId());\n System.out.printf(\"Model Description: %s%n\", documentModel.getDescription());\n System.out.printf(\"Model Created on: %s%n\", documentModel.getCreatedOn());\n documentModel.getDocTypes().forEach((key, docTypeInfo) -> {\n     docTypeInfo.getFieldSchema().forEach((field, documentFieldSchema) -> {\n         System.out.printf(\"Field: %s\", field);\n         System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n         System.out.printf(\"Field confidence: %.2f\", docTypeInfo.getFieldConfidence().get(field));\n     });\n });\n```"
  parameters:
  - description: "The list of models IDs to form the composed model."
    name: "modelIDs"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A unique ID for your composed model. If not specified, a model ID will be created for you."
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The configurable <xref uid=\"com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass when\n creating a composed model."
    name: "createComposedModelOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions?alt=com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions&text=CreateComposedModelOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<DocumentOperationResult,DocumentModel> beginCreateComposedModel(List<String> modelIDs, String modelId, CreateComposedModelOptions createComposedModelOptions, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the <xref uid=\"com.azure.ai.formrecognizer.administration.models.DocumentModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.administration.models.DocumentModel?alt=com.azure.ai.formrecognizer.administration.models.DocumentModel&text=DocumentModel\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer.administration"
artifact: com.azure:azure-ai-formrecognizer:4.0.0-beta.3
