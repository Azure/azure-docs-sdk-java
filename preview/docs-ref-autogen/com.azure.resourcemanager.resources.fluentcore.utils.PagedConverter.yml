### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter
  id: PagedConverter
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.utils
  children:
  - com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T,S>flatMapPage(com.azure.core.http.rest.PagedFlux<T>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends S>>)
  - com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T>convertListToPagedFlux(reactor.core.publisher.Mono<java.util.List<T>>)
  langs:
  - java
  name: PagedConverter
  nameWithType: PagedConverter
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter
  type: Class
  package: com.azure.resourcemanager.resources.fluentcore.utils
  summary: Utility class for conversion of PagedResponse.
  syntax:
    content: public final class PagedConverter
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T,S>flatMapPage(com.azure.core.http.rest.PagedFlux<T>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends S>>)
  id: <T,S>flatMapPage(com.azure.core.http.rest.PagedFlux<T>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends S>>)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter
  langs:
  - java
  name: <T,S>flatMapPage(PagedFlux<T> pagedFlux, Function<? super T,? extends Publisher<? extends S>> mapper)
  nameWithType: PagedConverter.<T,S>flatMapPage(PagedFlux<T> pagedFlux, Function<? super T,? extends Publisher<? extends S>> mapper)
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T,S>flatMapPage(PagedFlux<T> pagedFlux, Function<? super T,? extends Publisher<? extends S>> mapper)
  overload: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.flatMapPage*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.utils
  summary: Applies flatMap transform to elements of PagedFlux.
  syntax:
    content: public static PagedFlux<S> <T,S>flatMapPage(PagedFlux<T> pagedFlux, Function<? super T,? extends Publisher<? extends S>> mapper)
    parameters:
    - id: pagedFlux
      type: com.azure.core.http.rest.PagedFlux<T>
      description: input
    - id: mapper
      type: java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends S>>
      description: the flatMap transform of element T to Publisher of S.
    return:
      type: com.azure.core.http.rest.PagedFlux<S>
      description: the PagedFlux.
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T>convertListToPagedFlux(reactor.core.publisher.Mono<java.util.List<T>>)
  id: <T>convertListToPagedFlux(reactor.core.publisher.Mono<java.util.List<T>>)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter
  langs:
  - java
  name: <T>convertListToPagedFlux(Mono<List<T>> list)
  nameWithType: PagedConverter.<T>convertListToPagedFlux(Mono<List<T>> list)
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T>convertListToPagedFlux(Mono<List<T>> list)
  overload: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.convertListToPagedFlux*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.utils
  summary: Converts list to PagedFlux.
  syntax:
    content: public static PagedFlux<T> <T>convertListToPagedFlux(Mono<List<T>> list)
    parameters:
    - id: list
      type: reactor.core.publisher.Mono<java.util.List<T>>
      description: the list to convert.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: the PagedFlux.
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.PagedConverter()
  id: PagedConverter()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter
  langs:
  - java
  name: PagedConverter()
  nameWithType: PagedConverter.PagedConverter()
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.PagedConverter()
  overload: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.PagedConverter*
  type: Constructor
  package: com.azure.resourcemanager.resources.fluentcore.utils
  syntax:
    content: private PagedConverter()
references:
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.PagedConverter*
  name: PagedConverter
  nameWithType: PagedConverter.PagedConverter
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.PagedConverter
  package: com.azure.resourcemanager.resources.fluentcore.utils
- uid: com.azure.core.http.rest.PagedFlux<T>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends S>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends org.reactivestreams.Publisher'
    name: Publisher
    fullName: '? extends org.reactivestreams.Publisher'
  - name: <
    fullName: <
  - uid: '? extends S'
    name: '? extends S'
    fullName: '? extends S'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.PagedFlux<S>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: S
    name: S
    fullName: S
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.flatMapPage*
  name: <T,S>flatMapPage
  nameWithType: PagedConverter.<T,S>flatMapPage
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T,S>flatMapPage
  package: com.azure.resourcemanager.resources.fluentcore.utils
- uid: reactor.core.publisher.Mono<java.util.List<T>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.convertListToPagedFlux*
  name: <T>convertListToPagedFlux
  nameWithType: PagedConverter.<T>convertListToPagedFlux
  fullName: com.azure.resourcemanager.resources.fluentcore.utils.PagedConverter.<T>convertListToPagedFlux
  package: com.azure.resourcemanager.resources.fluentcore.utils
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: '? extends S'
  name: '? extends S'
  nameWithType: '? extends S'
  fullName: '? extends S'
- uid: '? super T,? extends org.reactivestreams.Publisher'
  name: '? super T,? extends Publisher'
  nameWithType: '? super T,? extends Publisher'
  fullName: '? super T,? extends org.reactivestreams.Publisher'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: S
  name: S
  nameWithType: S
  fullName: S
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
