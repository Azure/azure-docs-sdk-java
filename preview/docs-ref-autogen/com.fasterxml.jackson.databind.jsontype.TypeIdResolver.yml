### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  id: TypeIdResolver
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype
  children:
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getDescForKnownTypeIds()
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getMechanism()
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromBaseType()
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValue(java.lang.Object)
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValueAndType(java.lang.Object,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.init(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.jsontype.TypeIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)
  langs:
  - java
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  type: Interface
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Interface that defines standard API for converting types to type identifiers and vice versa. Used by type resolvers (<xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.TypeSerializer</xref>, <xref uid="com.fasterxml.jackson.databind.jsontype.TypeDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.TypeDeserializer</xref>) for converting between type and matching id; id is stored in JSON and needed for creating instances of proper subtypes when deserializing values.


    NOTE: it is **strongly** recommended that developers always extend abstract base class <xref uid="com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase</xref> instead of directly implementing this interface; this helps prevent breakage in case new methds need to be added in this interface (something we try to avoid doing; but which may be necessary in some cases).
  syntax:
    content: public interface TypeIdResolver
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getDescForKnownTypeIds()
  id: getDescForKnownTypeIds()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: getDescForKnownTypeIds()
  nameWithType: TypeIdResolver.getDescForKnownTypeIds()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getDescForKnownTypeIds()
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getDescForKnownTypeIds*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called for error-reporting and diagnostics purposes.
  syntax:
    content: public abstract String getDescForKnownTypeIds()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getMechanism()
  id: getMechanism()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: getMechanism()
  nameWithType: TypeIdResolver.getMechanism()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getMechanism()
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getMechanism*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for mechanism that this resolver uses for determining type id from type. Mostly informational; not required to be called or used.
  syntax:
    content: public abstract JsonTypeInfo.Id getMechanism()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromBaseType()
  id: idFromBaseType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: idFromBaseType()
  nameWithType: TypeIdResolver.idFromBaseType()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromBaseType()
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method that can be called to figure out type id to use for instances of base type (declared type of property). This is usually only used for fallback handling, for cases where real type information is not available for some reason.
  syntax:
    content: public abstract String idFromBaseType()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValue(java.lang.Object)
  id: idFromValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: idFromValue(Object value)
  nameWithType: TypeIdResolver.idFromValue(Object value)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValue(Object value)
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValue*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to serialize type of the type of given value as a String to include in serialized JSON content.
  syntax:
    content: public abstract String idFromValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValueAndType(java.lang.Object,java.lang.Class<?>)
  id: idFromValueAndType(java.lang.Object,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: idFromValueAndType(Object value, Class<?> suggestedType)
  nameWithType: TypeIdResolver.idFromValueAndType(Object value, Class<?> suggestedType)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValueAndType(Object value, Class<?> suggestedType)
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValueAndType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Alternative method used for determining type from combination of value and type, using suggested type (that serializer provides) and possibly value of that type. Most common implementation will use suggested type as is.
  syntax:
    content: public abstract String idFromValueAndType(Object value, Class<?> suggestedType)
    parameters:
    - id: value
      type: java.lang.Object
    - id: suggestedType
      type: java.lang.Class<?>
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.init(com.fasterxml.jackson.databind.JavaType)
  id: init(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: init(JavaType baseType)
  nameWithType: TypeIdResolver.init(JavaType baseType)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.init(JavaType baseType)
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.init*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method that will be called once before any type resolution calls; used to initialize instance with configuration. This is necessary since instances may be created via reflection, without ability to call specific constructor to pass in configuration settings.
  syntax:
    content: public abstract void init(JavaType baseType)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Base type for which this id resolver instance is
           used
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)
  id: typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  langs:
  - java
  name: typeFromId(DatabindContext context, String id)
  nameWithType: TypeIdResolver.typeFromId(DatabindContext context, String id)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.typeFromId(DatabindContext context, String id)
  overload: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.typeFromId*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to resolve type from given type identifier.
  syntax:
    content: public abstract JavaType typeFromId(DatabindContext context, String id)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.DatabindContext
    - id: id
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.init*
  name: init
  nameWithType: TypeIdResolver.init
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.init
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValue*
  name: idFromValue
  nameWithType: TypeIdResolver.idFromValue
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValue
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValueAndType*
  name: idFromValueAndType
  nameWithType: TypeIdResolver.idFromValueAndType
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromValueAndType
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromBaseType*
  name: idFromBaseType
  nameWithType: TypeIdResolver.idFromBaseType
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.idFromBaseType
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.DatabindContext
  name: DatabindContext
  nameWithType: DatabindContext
  fullName: com.fasterxml.jackson.databind.DatabindContext
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.typeFromId*
  name: typeFromId
  nameWithType: TypeIdResolver.typeFromId
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.typeFromId
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getDescForKnownTypeIds*
  name: getDescForKnownTypeIds
  nameWithType: TypeIdResolver.getDescForKnownTypeIds
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getDescForKnownTypeIds
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  name: JsonTypeInfo.Id
  nameWithType: JsonTypeInfo.Id
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getMechanism*
  name: getMechanism
  nameWithType: TypeIdResolver.getMechanism
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver.getMechanism
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
