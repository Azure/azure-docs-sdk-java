### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.updateValue*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue"
name: "<T>updateValue"
nameWithType: "ObjectMapper.<T>updateValue"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue(T,java.lang.Object)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>updateValue(T valueToUpdate, Object overrides)"
  name: "<T>updateValue(T valueToUpdate, Object overrides)"
  nameWithType: "ObjectMapper.<T>updateValue(T valueToUpdate, Object overrides)"
  summary: "Convenience method similar to <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;convertValue(java.lang.Object,com.fasterxml.jackson.databind.JavaType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#convertValue(Object, JavaType)\"></xref> but one in which\n\nImplementation is approximately as follows:\n\n1.  Serialize \\`updateWithValue\\` into <xref uid=\"com.fasterxml.jackson.databind.util.TokenBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenBuffer\"></xref>\n2.  Construct <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref> with \\`valueToUpdate\\` (using <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readerForUpdating(Object)\"></xref>)\n3.  Construct <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> (using <xref uid=\"com.fasterxml.jackson.databind.util.TokenBuffer.asParser()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenBuffer#asParser()\"></xref>)\n4.  Update using <xref uid=\"com.fasterxml.jackson.databind.ObjectReader.&lt;T&gt;readValue(com.fasterxml.jackson.core.JsonParser)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader#readValue(JsonParser)\"></xref>.\n5.  Return \\`valueToUpdate\\`\n\nNote that update is \"shallow\" in that only first level of properties (or, immediate contents of container to update) are modified, unless properties themselves indicate that merging should be applied for contents. Such merging can be specified using annotations (see `JsonMerge`) as well as using \"config overrides\" (see <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class&lt;?&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#configOverride(Class)\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(java.lang.Boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#setDefaultMergeable(Boolean)\"></xref>)."
  parameters:
  - description: "Object to update"
    name: "valueToUpdate"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "Object to conceptually serialize and merge into value to\n     update; can be thought of as a provider for overrides to apply."
    name: "overrides"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>updateValue(T valueToUpdate, Object overrides)"
  exceptions:
  - description: "if there are structural incompatibilities that prevent update."
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Either the first argument (`valueToUpdate`), if it is mutable; or a result of\n     creating new instance that is result of \"merging\" values (for example, \"updating\" a\n     Java array will create a new array)"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
