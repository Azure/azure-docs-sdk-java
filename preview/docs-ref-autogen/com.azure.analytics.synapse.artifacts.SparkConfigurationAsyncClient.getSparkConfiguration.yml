### YamlMime:JavaMember
uid: "com.azure.analytics.synapse.artifacts.SparkConfigurationAsyncClient.getSparkConfiguration*"
fullName: "com.azure.analytics.synapse.artifacts.SparkConfigurationAsyncClient.getSparkConfiguration"
name: "getSparkConfiguration"
nameWithType: "SparkConfigurationAsyncClient.getSparkConfiguration"
members:
- uid: "com.azure.analytics.synapse.artifacts.SparkConfigurationAsyncClient.getSparkConfiguration(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.SparkConfigurationAsyncClient.getSparkConfiguration(String sparkConfigurationName)"
  name: "getSparkConfiguration(String sparkConfigurationName)"
  nameWithType: "SparkConfigurationAsyncClient.getSparkConfiguration(String sparkConfigurationName)"
  summary: "Gets a sparkConfiguration."
  parameters:
  - description: "The spark Configuration name."
    name: "sparkConfigurationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SparkConfigurationResource> getSparkConfiguration(String sparkConfigurationName)"
  returns:
    description: "a sparkConfiguration on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.SparkConfigurationResource?alt=com.azure.analytics.synapse.artifacts.models.SparkConfigurationResource&text=SparkConfigurationResource\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.artifacts.SparkConfigurationAsyncClient.getSparkConfiguration(java.lang.String,java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.SparkConfigurationAsyncClient.getSparkConfiguration(String sparkConfigurationName, String ifNoneMatch)"
  name: "getSparkConfiguration(String sparkConfigurationName, String ifNoneMatch)"
  nameWithType: "SparkConfigurationAsyncClient.getSparkConfiguration(String sparkConfigurationName, String ifNoneMatch)"
  summary: "Gets a sparkConfiguration."
  parameters:
  - description: "The spark Configuration name."
    name: "sparkConfigurationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "ETag of the sparkConfiguration entity. Should only be specified for get. If the ETag matches\n     the existing entity tag, or if * was provided, then no content will be returned."
    name: "ifNoneMatch"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SparkConfigurationResource> getSparkConfiguration(String sparkConfigurationName, String ifNoneMatch)"
  returns:
    description: "a sparkConfiguration on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.SparkConfigurationResource?alt=com.azure.analytics.synapse.artifacts.models.SparkConfigurationResource&text=SparkConfigurationResource\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.analytics.synapse.artifacts"
artifact: com.azure:azure-analytics-synapse-artifacts:1.0.0-beta.9
