### YamlMime:JavaType
uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule"
fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule"
name: "NfsAccessRule"
nameWithType: "NfsAccessRule"
summary: "Rule to place restrictions on portions of the cache namespace being presented to clients."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class NfsAccessRule"
constructors:
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.NfsAccessRule()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.NfsAccessRule()"
  name: "NfsAccessRule()"
  nameWithType: "NfsAccessRule.NfsAccessRule()"
  syntax: "public NfsAccessRule()"
methods:
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.access()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.access()"
  name: "access()"
  nameWithType: "NfsAccessRule.access()"
  summary: "Get the access property: Access allowed by this rule."
  syntax: "public NfsAccessRuleAccess access()"
  desc: "Get the access property: Access allowed by this rule."
  returns:
    description: "the access value."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess&text=NfsAccessRuleAccess\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.anonymousGid()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.anonymousGid()"
  name: "anonymousGid()"
  nameWithType: "NfsAccessRule.anonymousGid()"
  summary: "Get the anonymous<wbr>Gid property: GID value that replaces 0 when root<wbr>Squash is true."
  syntax: "public String anonymousGid()"
  desc: "Get the anonymousGid property: GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided."
  returns:
    description: "the anonymousGid value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.anonymousUid()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.anonymousUid()"
  name: "anonymousUid()"
  nameWithType: "NfsAccessRule.anonymousUid()"
  summary: "Get the anonymous<wbr>Uid property: UID value that replaces 0 when root<wbr>Squash is true."
  syntax: "public String anonymousUid()"
  desc: "Get the anonymousUid property: UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided."
  returns:
    description: "the anonymousUid value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.filter()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.filter()"
  name: "filter()"
  nameWithType: "NfsAccessRule.filter()"
  summary: "Get the filter property: Filter applied to the scope for this rule."
  syntax: "public String filter()"
  desc: "Get the filter property: Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied."
  returns:
    description: "the filter value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.rootSquash()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.rootSquash()"
  name: "rootSquash()"
  nameWithType: "NfsAccessRule.rootSquash()"
  summary: "Get the root<wbr>Squash property: Map root accesses to anonymousUID and anonymousGID."
  syntax: "public Boolean rootSquash()"
  desc: "Get the rootSquash property: Map root accesses to anonymousUID and anonymousGID."
  returns:
    description: "the rootSquash value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.scope()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.scope()"
  name: "scope()"
  nameWithType: "NfsAccessRule.scope()"
  summary: "Get the scope property: Scope for this rule."
  syntax: "public NfsAccessRuleScope scope()"
  desc: "Get the scope property: Scope for this rule. The scope and filter determine which clients match the rule."
  returns:
    description: "the scope value."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope&text=NfsAccessRuleScope\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.submountAccess()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.submountAccess()"
  name: "submountAccess()"
  nameWithType: "NfsAccessRule.submountAccess()"
  summary: "Get the submount<wbr>Access property: For the default policy, allow access to subdirectories under the root export."
  syntax: "public Boolean submountAccess()"
  desc: "Get the submountAccess property: For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'."
  returns:
    description: "the submountAccess value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.suid()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.suid()"
  name: "suid()"
  nameWithType: "NfsAccessRule.suid()"
  summary: "Get the suid property: Allow SUID semantics."
  syntax: "public Boolean suid()"
  desc: "Get the suid property: Allow SUID semantics."
  returns:
    description: "the suid value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.validate()"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.validate()"
  name: "validate()"
  nameWithType: "NfsAccessRule.validate()"
  summary: "Validates the instance."
  syntax: "public void validate()"
  desc: "Validates the instance."
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withAccess(com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withAccess(NfsAccessRuleAccess access)"
  name: "withAccess(NfsAccessRuleAccess access)"
  nameWithType: "NfsAccessRule.withAccess(NfsAccessRuleAccess access)"
  summary: "Set the access property: Access allowed by this rule."
  parameters:
  - description: "the access value to set."
    name: "access"
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRuleAccess&text=NfsAccessRuleAccess\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withAccess(NfsAccessRuleAccess access)"
  desc: "Set the access property: Access allowed by this rule."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withAnonymousGid(java.lang.String)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withAnonymousGid(String anonymousGid)"
  name: "withAnonymousGid(String anonymousGid)"
  nameWithType: "NfsAccessRule.withAnonymousGid(String anonymousGid)"
  summary: "Set the anonymous<wbr>Gid property: GID value that replaces 0 when root<wbr>Squash is true."
  parameters:
  - description: "the anonymousGid value to set."
    name: "anonymousGid"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withAnonymousGid(String anonymousGid)"
  desc: "Set the anonymousGid property: GID value that replaces 0 when rootSquash is true. This will use the value of anonymousUID if not provided."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withAnonymousUid(java.lang.String)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withAnonymousUid(String anonymousUid)"
  name: "withAnonymousUid(String anonymousUid)"
  nameWithType: "NfsAccessRule.withAnonymousUid(String anonymousUid)"
  summary: "Set the anonymous<wbr>Uid property: UID value that replaces 0 when root<wbr>Squash is true."
  parameters:
  - description: "the anonymousUid value to set."
    name: "anonymousUid"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withAnonymousUid(String anonymousUid)"
  desc: "Set the anonymousUid property: UID value that replaces 0 when rootSquash is true. 65534 will be used if not provided."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withFilter(java.lang.String)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withFilter(String filter)"
  name: "withFilter(String filter)"
  nameWithType: "NfsAccessRule.withFilter(String filter)"
  summary: "Set the filter property: Filter applied to the scope for this rule."
  parameters:
  - description: "the filter value to set."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withFilter(String filter)"
  desc: "Set the filter property: Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withRootSquash(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withRootSquash(Boolean rootSquash)"
  name: "withRootSquash(Boolean rootSquash)"
  nameWithType: "NfsAccessRule.withRootSquash(Boolean rootSquash)"
  summary: "Set the root<wbr>Squash property: Map root accesses to anonymousUID and anonymousGID."
  parameters:
  - description: "the rootSquash value to set."
    name: "rootSquash"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withRootSquash(Boolean rootSquash)"
  desc: "Set the rootSquash property: Map root accesses to anonymousUID and anonymousGID."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withScope(com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withScope(NfsAccessRuleScope scope)"
  name: "withScope(NfsAccessRuleScope scope)"
  nameWithType: "NfsAccessRule.withScope(NfsAccessRuleScope scope)"
  summary: "Set the scope property: Scope for this rule."
  parameters:
  - description: "the scope value to set."
    name: "scope"
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRuleScope&text=NfsAccessRuleScope\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withScope(NfsAccessRuleScope scope)"
  desc: "Set the scope property: Scope for this rule. The scope and filter determine which clients match the rule."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withSubmountAccess(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withSubmountAccess(Boolean submountAccess)"
  name: "withSubmountAccess(Boolean submountAccess)"
  nameWithType: "NfsAccessRule.withSubmountAccess(Boolean submountAccess)"
  summary: "Set the submount<wbr>Access property: For the default policy, allow access to subdirectories under the root export."
  parameters:
  - description: "the submountAccess value to set."
    name: "submountAccess"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withSubmountAccess(Boolean submountAccess)"
  desc: "Set the submountAccess property: For the default policy, allow access to subdirectories under the root export. If this is set to no, clients can only mount the path '/'. If set to yes, clients can mount a deeper path, like '/a/b'."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withSuid(java.lang.Boolean)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withSuid(Boolean suid)"
  name: "withSuid(Boolean suid)"
  nameWithType: "NfsAccessRule.withSuid(Boolean suid)"
  summary: "Set the suid property: Allow SUID semantics."
  parameters:
  - description: "the suid value to set."
    name: "suid"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withSuid(Boolean suid)"
  desc: "Set the suid property: Allow SUID semantics."
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Rule to place restrictions on portions of the cache namespace being presented to clients."
metadata: {}
package: "com.azure.resourcemanager.storagecache.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-storagecache:1.0.0-beta.6
