### YamlMime:JavaMember
uid: "com.azure.resourcemanager.peering.implementation.PeeringRegisteredPrefixImpl.withExistingPeering*"
fullName: "com.azure.resourcemanager.peering.implementation.PeeringRegisteredPrefixImpl.withExistingPeering"
name: "withExistingPeering"
nameWithType: "PeeringRegisteredPrefixImpl.withExistingPeering"
members:
- uid: "com.azure.resourcemanager.peering.implementation.PeeringRegisteredPrefixImpl.withExistingPeering(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.peering.implementation.PeeringRegisteredPrefixImpl.withExistingPeering(String resourceGroupName, String peeringName)"
  name: "withExistingPeering(String resourceGroupName, String peeringName)"
  nameWithType: "PeeringRegisteredPrefixImpl.withExistingPeering(String resourceGroupName, String peeringName)"
  summary: "Specifies resourceGroupName, peeringName."
  parameters:
  - name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "peeringName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PeeringRegisteredPrefixImpl withExistingPeering(String resourceGroupName, String peeringName)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.peering.implementation.PeeringRegisteredPrefixImpl?alt=com.azure.resourcemanager.peering.implementation.PeeringRegisteredPrefixImpl&text=PeeringRegisteredPrefixImpl\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.peering.implementation"
artifact: com.azure.resourcemanager:azure-resourcemanager-peering:1.0.0-beta.1
