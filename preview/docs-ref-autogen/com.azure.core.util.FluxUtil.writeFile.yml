### YamlMime:JavaMember
uid: "com.azure.core.util.FluxUtil.writeFile*"
fullName: "com.azure.core.util.FluxUtil.writeFile"
name: "writeFile"
nameWithType: "FluxUtil.writeFile"
members:
- uid: "com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel)"
  fullName: "com.azure.core.util.FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  name: "writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  nameWithType: "FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  summary: "Writes the <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref> emitted by a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> to an <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref>.\n\nThe `outFile` is not closed by this call, closing of the `outFile` is managed by the caller.\n\nThe response <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will emit an error if `content` or `outFile` are null. Additionally, an error will be emitted if the `outFile` wasn't opened with the proper open options, such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardOpenOption#WRITE\"></xref>."
  parameters:
  - description: "The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> content."
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref>."
    name: "outFile"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<Void> writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> which emits a completion status once the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> has been written to the <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel,long)"
  fullName: "com.azure.core.util.FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  name: "writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  nameWithType: "FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  summary: "Writes the <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffers\"></xref> emitted by a <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> to an <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref> starting at the given `position` in the file.\n\nThe `outFile` is not closed by this call, closing of the `outFile` is managed by the caller.\n\nThe response <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> will emit an error if `content` or `outFile` are null or `position` is less than 0. Additionally, an error will be emitted if the `outFile` wasn't opened with the proper open options, such as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardOpenOption#WRITE\"></xref>."
  parameters:
  - description: "The <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> content."
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref>."
    name: "outFile"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  - description: "The position in the file to begin writing the <code>content</code>."
    name: "position"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<Void> writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> which emits a completion status once the <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> has been written to the <xref uid=\"java.nio.channels.AsynchronousFileChannel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AsynchronousFileChannel\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.22.0-beta.1
