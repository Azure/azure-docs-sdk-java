### YamlMime:JavaMember
uid: "com.azure.core.util.FluxUtil.writeFile*"
fullName: "com.azure.core.util.FluxUtil.writeFile"
name: "writeFile"
nameWithType: "FluxUtil.writeFile"
members:
- uid: "com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel)"
  fullName: "com.azure.core.util.FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  name: "writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  nameWithType: "FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  summary: "Writes the bytes emitted by a Flux to an AsynchronousFileChannel."
  parameters:
  - description: "the Flux content"
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the file channel"
    name: "outFile"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<Void> writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)"
  returns:
    description: "a Mono which performs the write operation when subscribed"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel,long)"
  fullName: "com.azure.core.util.FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  name: "writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  nameWithType: "FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  summary: "Writes the bytes emitted by a Flux to an AsynchronousFileChannel starting at the given position in the file."
  parameters:
  - description: "the Flux content"
    name: "content"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the file channel"
    name: "outFile"
    type: "<xref href=\"java.nio.channels.AsynchronousFileChannel?alt=java.nio.channels.AsynchronousFileChannel&text=AsynchronousFileChannel\" data-throw-if-not-resolved=\"False\" />"
  - description: "the position in the file to begin writing"
    name: "position"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Mono<Void> writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)"
  returns:
    description: "a Mono which performs the write operation when subscribed"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.util"
artifact: com.azure:azure-core:1.3.0-beta.1
