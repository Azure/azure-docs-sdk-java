### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.readValue*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue"
name: "<T>readValue"
nameWithType: "ObjectMapper.<T>readValue"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(byte[] src, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(byte[] src, TypeReference<T> valueTypeRef)"
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(byte[] src, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, JavaType valueType)"
  name: "<T>readValue(byte[] src, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(byte[] src, JavaType valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(byte[] src, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)"
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(byte[] src, int offset, int len, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, int offset, int len, JavaType valueType)"
  name: "<T>readValue(byte[] src, int offset, int len, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(byte[] src, int offset, int len, JavaType valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(byte[] src, int offset, int len, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],int,int,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, int offset, int len, Class<T> valueType)"
  name: "<T>readValue(byte[] src, int offset, int len, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(byte[] src, int offset, int len, Class<T> valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "offset"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(byte[] src, int offset, int len, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[],java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(byte[] src, Class<T> valueType)"
  name: "<T>readValue(byte[] src, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(byte[] src, Class<T> valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(byte[] src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, ResolvedType valueType)"
  name: "<T>readValue(JsonParser p, ResolvedType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(JsonParser p, ResolvedType valueType)"
  summary: "Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using Jackson specific type; instance of which can be constructed using <xref uid=\"com.fasterxml.jackson.databind.type.TypeFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeFactory\"></xref>."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.core.type.ResolvedType?alt=com.fasterxml.jackson.core.type.ResolvedType&text=ResolvedType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public final T <T>readValue(JsonParser p, ResolvedType valueType)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  summary: "Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called \"super type token\" (see ) and specifically needs to be used if the root type is a parameterized (generic) container type."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, JavaType valueType)"
  name: "<T>readValue(JsonParser p, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(JsonParser p, JavaType valueType)"
  summary: "Type-safe overloaded method, basically alias for <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(JsonParser, Class)\"></xref>."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(JsonParser p, JavaType valueType)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(JsonParser p, Class<T> valueType)"
  name: "<T>readValue(JsonParser p, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(JsonParser p, Class<T> valueType)"
  summary: "Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like <xref uid=\"java.lang.Boolean\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Boolean\"></xref>).\n\nNote: this method should NOT be used if the result type is a container (<xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> or <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>. The reason is that due to type erasure, key and value types cannot be introspected when using this method."
  overridden: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(JsonParser p, Class<T> valueType)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.DataInput,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(DataInput src, JavaType valueType)"
  name: "<T>readValue(DataInput src, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(DataInput src, JavaType valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(DataInput src, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.DataInput,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(DataInput src, Class<T> valueType)"
  name: "<T>readValue(DataInput src, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(DataInput src, Class<T> valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.DataInput?alt=java.io.DataInput&text=DataInput\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(DataInput src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(File src, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(File src, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(File src, TypeReference<T> valueTypeRef)"
  summary: "Method to deserialize JSON content from given file into given Java type."
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(File src, TypeReference<T> valueTypeRef)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(File src, JavaType valueType)"
  name: "<T>readValue(File src, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(File src, JavaType valueType)"
  summary: "Method to deserialize JSON content from given file into given Java type."
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(File src, JavaType valueType)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.File,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(File src, Class<T> valueType)"
  name: "<T>readValue(File src, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(File src, Class<T> valueType)"
  summary: "Method to deserialize JSON content from given file into given Java type."
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(File src, Class<T> valueType)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(InputStream src, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(InputStream src, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(InputStream src, TypeReference<T> valueTypeRef)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(InputStream src, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(InputStream src, JavaType valueType)"
  name: "<T>readValue(InputStream src, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(InputStream src, JavaType valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(InputStream src, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.InputStream,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(InputStream src, Class<T> valueType)"
  name: "<T>readValue(InputStream src, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(InputStream src, Class<T> valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.InputStream?alt=java.io.InputStream&text=InputStream\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(InputStream src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(Reader src, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(Reader src, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(Reader src, TypeReference<T> valueTypeRef)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(Reader src, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(Reader src, JavaType valueType)"
  name: "<T>readValue(Reader src, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(Reader src, JavaType valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(Reader src, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.io.Reader,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(Reader src, Class<T> valueType)"
  name: "<T>readValue(Reader src, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(Reader src, Class<T> valueType)"
  parameters:
  - name: "src"
    type: "<xref href=\"java.io.Reader?alt=java.io.Reader&text=Reader\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(Reader src, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(String content, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(String content, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(String content, TypeReference<T> valueTypeRef)"
  summary: "Method to deserialize JSON content from given JSON content String."
  parameters:
  - name: "content"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(String content, TypeReference<T> valueTypeRef)"
  exceptions:
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(String content, JavaType valueType)"
  name: "<T>readValue(String content, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(String content, JavaType valueType)"
  summary: "Method to deserialize JSON content from given JSON content String."
  parameters:
  - name: "content"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(String content, JavaType valueType)"
  exceptions:
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.lang.String,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(String content, Class<T> valueType)"
  name: "<T>readValue(String content, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(String content, Class<T> valueType)"
  summary: "Method to deserialize JSON content from given JSON content String."
  parameters:
  - name: "content"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(String content, Class<T> valueType)"
  exceptions:
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonProcessingException?alt=com.fasterxml.jackson.core.JsonProcessingException&text=JsonProcessingException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if underlying input contains invalid content\n    of type <xref uid=\"JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> supports (JSON for default case)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(URL src, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(URL src, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectMapper.<T>readValue(URL src, TypeReference<T> valueTypeRef)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(java.net.URL, Class)\"></xref> except that target specified by <xref uid=\"com.fasterxml.jackson.core.type.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>."
  parameters:
  - name: "src"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(URL src, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(URL src, JavaType valueType)"
  name: "<T>readValue(URL src, JavaType valueType)"
  nameWithType: "ObjectMapper.<T>readValue(URL src, JavaType valueType)"
  summary: "Same as <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.readValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readValue(java.net.URL, Class)\"></xref> except that target specified by <xref uid=\"com.fasterxml.jackson.databind.JavaType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JavaType\"></xref>."
  parameters:
  - name: "src"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>readValue(URL src, JavaType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(java.net.URL,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>readValue(URL src, Class<T> valueType)"
  name: "<T>readValue(URL src, Class<T> valueType)"
  nameWithType: "ObjectMapper.<T>readValue(URL src, Class<T> valueType)"
  summary: "Method to deserialize JSON content from given resource into given Java type.\n\nNOTE: handling of <xref uid=\"java.net.URL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL\"></xref> is delegated to <xref uid=\"com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory#createParser(java.net.URL)\"></xref> and usually simply calls <xref uid=\"java.net.URL.openStream*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.net.URL#openStream()\"></xref>, meaning no special handling is done. If different HTTP connection options are needed you will need to create <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.InputStream\"></xref> separately."
  parameters:
  - name: "src"
    type: "<xref href=\"java.net.URL?alt=java.net.URL&text=URL\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValue(URL src, Class<T> valueType)"
  exceptions:
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParseException?alt=com.fasterxml.jackson.core.JsonParseException&text=JsonParseException\" data-throw-if-not-resolved=\"False\" />"
  - description: "if a low-level I/O problem (unexpected end-of-input,\n   network error) occurs (passed through as-is without additional wrapping -- note\n   that this is one case where <xref uid=\"DeserializationFeature#WRAP_EXCEPTIONS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#WRAP_EXCEPTIONS\"></xref>\n   does NOT result in wrapping of exception even if enabled)"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
