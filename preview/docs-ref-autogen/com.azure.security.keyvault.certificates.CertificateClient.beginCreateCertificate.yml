### YamlMime:JavaMember
uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate*"
fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate"
name: "beginCreateCertificate"
nameWithType: "CertificateClient.beginCreateCertificate"
members:
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  nameWithType: "CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\nCreate certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n```java\nCertificatePolicy certPolicy = new CertificatePolicy(\"Self\",\n     \"CN=SelfSignedJavaPkcs12\");\n SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certPoller = certificateClient\n     .beginCreateCertificate(\"certificateName\", certPolicy);\n certPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\n KeyVaultCertificate cert = certPoller.getFinalResult();\n System.out.printf(\"Certificate created with name %s\", cert.getName());\n```"
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  nameWithType: "CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\nCreate certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n```java\nCertificatePolicy certificatePolicyPkcsSelf = new CertificatePolicy(\"Self\",\n     \"CN=SelfSignedJavaPkcs12\");\n SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certificateSyncPoller = certificateClient\n     .beginCreateCertificate(\"certificateName\", certificatePolicyPkcsSelf, true, new HashMap<>());\n certificateSyncPoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\n KeyVaultCertificate createdCertificate = certificateSyncPoller.getFinalResult();\n System.out.printf(\"Certificate created with name %s\", createdCertificate.getName());\n```"
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "The enabled status of the certificate."
    name: "isEnabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application specific metadata to set."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>,java.time.Duration)"
  fullName: "com.azure.security.keyvault.certificates.CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags, Duration pollingInterval)"
  name: "beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags, Duration pollingInterval)"
  nameWithType: "CertificateClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags, Duration pollingInterval)"
  summary: "Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.\n\nCreate certificate is a long running operation. It indefinitely waits for the create certificate operation to complete on service side.\n\n**Code Samples**\n\nCreate certificate is a long running operation. The createCertificate indefinitely waits for the operation to complete and returns its last status. The details of the last certificate operation status are printed when a response is received\n\n```java\nCertificatePolicy certificatePolicy = new CertificatePolicy(\"Self\",\n     \"CN=SelfSignedJavaPkcs12\");\n SyncPoller<CertificateOperation, KeyVaultCertificateWithPolicy> certificatePoller =\n     certificateClient.beginCreateCertificate(\"certificateName\", certificatePolicy, true, new HashMap<>(),\n         Duration.ofSeconds(1));\n certificatePoller.waitUntil(LongRunningOperationStatus.SUCCESSFULLY_COMPLETED);\n KeyVaultCertificate certificate = certificatePoller.getFinalResult();\n System.out.printf(\"Certificate created with name %s\", certificate.getName());\n```"
  parameters:
  - description: "The name of the certificate to be created."
    name: "certificateName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The policy of the certificate to be created."
    name: "policy"
    type: "<xref href=\"com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "The enabled status of the certificate."
    name: "isEnabled"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "The application specific metadata to set."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The interval at which the operation status will be polled."
    name: "pollingInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags, Duration pollingInterval)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the create certificate operation status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.certificates.models.CertificateOperation?alt=com.azure.security.keyvault.certificates.models.CertificateOperation&text=CertificateOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy?alt=com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy&text=KeyVaultCertificateWithPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.certificates"
artifact: com.azure:azure-security-keyvault-certificates:4.2.0-beta.2
