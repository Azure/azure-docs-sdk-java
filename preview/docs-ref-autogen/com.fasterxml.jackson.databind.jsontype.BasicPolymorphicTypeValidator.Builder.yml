### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  id: Builder
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype
  children:
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.Builder()
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendBaseMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._baseTypeMatchers
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._invalidBaseTypes
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._subTypeClassMatchers
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._subTypeNameMatchers
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.util.regex.Pattern)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.util.regex.Pattern)
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.build()
  - com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.denyForExactBaseType(java.lang.Class<?>)
  langs:
  - java
  name: BasicPolymorphicTypeValidator.Builder
  nameWithType: BasicPolymorphicTypeValidator.Builder
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  type: Class
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'Builder class for configuring and constructing immutable <xref uid="com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator" data-throw-if-not-resolved="false">BasicPolymorphicTypeValidator</xref> instances. Criteria for allowing polymorphic subtypes is specified by adding rules in priority order, starting with the rules to evaluate first: when a matching rule is found, its status (<xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity.ALLOWED" data-throw-if-not-resolved="false">PolymorphicTypeValidator.Validity#ALLOWED</xref> or <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity.DENIED" data-throw-if-not-resolved="false">PolymorphicTypeValidator.Validity#DENIED</xref>) is used and no further rules are checked.'
  syntax:
    content: public static class BasicPolymorphicTypeValidator.Builder
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.Builder()
  id: Builder()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: Builder()
  nameWithType: BasicPolymorphicTypeValidator.Builder.Builder()
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.Builder()
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.Builder*
  type: Constructor
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: protected Builder()
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendBaseMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  id: _appendBaseMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _appendBaseMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  nameWithType: BasicPolymorphicTypeValidator.Builder._appendBaseMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendBaseMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendBaseMatcher*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: protected BasicPolymorphicTypeValidator.Builder _appendBaseMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
    parameters:
    - id: matcher
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  id: _appendSubClassMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _appendSubClassMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  nameWithType: BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: protected BasicPolymorphicTypeValidator.Builder _appendSubClassMatcher(BasicPolymorphicTypeValidator.TypeMatcher matcher)
    parameters:
    - id: matcher
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher)
  id: _appendSubNameMatcher(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _appendSubNameMatcher(BasicPolymorphicTypeValidator.NameMatcher matcher)
  nameWithType: BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher(BasicPolymorphicTypeValidator.NameMatcher matcher)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher(BasicPolymorphicTypeValidator.NameMatcher matcher)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: protected BasicPolymorphicTypeValidator.Builder _appendSubNameMatcher(BasicPolymorphicTypeValidator.NameMatcher matcher)
    parameters:
    - id: matcher
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._baseTypeMatchers
  id: _baseTypeMatchers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _baseTypeMatchers
  nameWithType: BasicPolymorphicTypeValidator.Builder._baseTypeMatchers
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._baseTypeMatchers
  type: Field
  package: com.fasterxml.jackson.databind.jsontype
  summary: Collected matchers for base types to allow.
  syntax:
    content: protected List<BasicPolymorphicTypeValidator.TypeMatcher> _baseTypeMatchers
    return:
      type: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher>
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._invalidBaseTypes
  id: _invalidBaseTypes
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _invalidBaseTypes
  nameWithType: BasicPolymorphicTypeValidator.Builder._invalidBaseTypes
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._invalidBaseTypes
  type: Field
  package: com.fasterxml.jackson.databind.jsontype
  summary: Optional set of base types (exact match) that are NOT accepted as base types for polymorphic properties. May be used to prevent "unsafe" base types like <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref> or <xref uid="java.io.Serializable" data-throw-if-not-resolved="false">java.io.Serializable</xref>.
  syntax:
    content: protected Set<Class<?>> _invalidBaseTypes
    return:
      type: java.util.Set<java.lang.Class<?>>
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._subTypeClassMatchers
  id: _subTypeClassMatchers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _subTypeClassMatchers
  nameWithType: BasicPolymorphicTypeValidator.Builder._subTypeClassMatchers
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._subTypeClassMatchers
  type: Field
  package: com.fasterxml.jackson.databind.jsontype
  summary: Collected Class-based matchers for sub types to allow.
  syntax:
    content: protected List<BasicPolymorphicTypeValidator.TypeMatcher> _subTypeClassMatchers
    return:
      type: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher>
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._subTypeNameMatchers
  id: _subTypeNameMatchers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: _subTypeNameMatchers
  nameWithType: BasicPolymorphicTypeValidator.Builder._subTypeNameMatchers
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._subTypeNameMatchers
  type: Field
  package: com.fasterxml.jackson.databind.jsontype
  summary: Collected name-based matchers for sub types to allow.
  syntax:
    content: protected List<BasicPolymorphicTypeValidator.NameMatcher> _subTypeNameMatchers
    return:
      type: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher>
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  id: allowIfBaseType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'Method for appending custom matcher called with base type: if matcher returns `true`, all possible subtypes will be accepted; if `false`, other matchers are applied.'
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfBaseType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
    parameters:
    - id: matcher
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
      description: Custom matcher to apply to base type
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
      description: This Builder to allow call chaining
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.lang.Class<?>)
  id: allowIfBaseType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfBaseType(Class<?> baseOfBase)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Class<?> baseOfBase)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Class<?> baseOfBase)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow all subtypes in cases where nominal base type is specified class, or one of its subtypes. For example, call to


    ```java

    builder.allowIfBaseType(MyBaseType.class)

    ```


    would indicate that any polymorphic properties where declared base type is `MyBaseType` (or subclass thereof) would allow all legal (assignment-compatible) subtypes.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfBaseType(Class<?> baseOfBase)
    parameters:
    - id: baseOfBase
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.lang.String)
  id: allowIfBaseType(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfBaseType(String prefixForBase)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfBaseType(String prefixForBase)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(String prefixForBase)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow all subtypes in cases where nominal base type's class name starts with specific prefix. For example, call to


    ```java

    builder.allowIfBaseType("com.mycompany.")

    ```


    would indicate that any polymorphic properties where declared base type is in package `com.mycompany` would allow all legal (assignment-compatible) subtypes.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfBaseType(String prefixForBase)
    parameters:
    - id: prefixForBase
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(java.util.regex.Pattern)
  id: allowIfBaseType(java.util.regex.Pattern)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfBaseType(Pattern patternForBase)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Pattern patternForBase)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType(Pattern patternForBase)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow all subtypes in cases where nominal base type's class name matches given <xref uid="java.util.regex.Pattern" data-throw-if-not-resolved="false">Pattern</xref> For example, call to


    ```java

    builder.allowIfBaseType(Pattern.compile("com\\.mycompany\\..*")

    ```


    would indicate that any polymorphic properties where declared base type is in package `com.mycompany` would allow all legal (assignment-compatible) subtypes.


    NOTE! <xref uid="java.util.regex.Pattern" data-throw-if-not-resolved="false">Pattern</xref> match is applied using `if (patternForBase.matcher(typeId).matches()) { }` that is, it must match the whole class name, not just part.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfBaseType(Pattern patternForBase)
    parameters:
    - id: patternForBase
      type: java.util.regex.Pattern
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  id: allowIfSubType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'Method for appending custom matcher called with resolved subtype: if matcher returns `true`, type will be accepted; if `false`, other matchers are applied.'
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)
    parameters:
    - id: matcher
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
      description: Custom matcher to apply to resolved subtype
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
      description: This Builder to allow call chaining
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.lang.Class<?>)
  id: allowIfSubType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfSubType(Class<?> subTypeBase)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubType(Class<?> subTypeBase)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(Class<?> subTypeBase)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow specific subtype (regardless of declared base type) if it is `subTypeBase` or its subtype. For example, call to


    ```java

    builder.allowIfSubType(MyImplType.class)

    ```


    would indicate that any polymorphic values with type of is `MyImplType` (or subclass thereof) would be allowed.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfSubType(Class<?> subTypeBase)
    parameters:
    - id: subTypeBase
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.lang.String)
  id: allowIfSubType(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfSubType(String prefixForSubType)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubType(String prefixForSubType)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(String prefixForSubType)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow specific subtype (regardless of declared base type) in cases where subclass name starts with specified prefix For example, call to


    ```java

    builder.allowIfSubType("com.mycompany.")

    ```


    would indicate that any polymorphic values in package `com.mycompany` would be allowed.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfSubType(String prefixForSubType)
    parameters:
    - id: prefixForSubType
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.util.regex.Pattern)
  id: allowIfSubType(java.util.regex.Pattern)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfSubType(Pattern patternForSubType)
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubType(Pattern patternForSubType)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(Pattern patternForSubType)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow specific subtype (regardless of declared base type) in cases where subclass name matches given <xref uid="java.util.regex.Pattern" data-throw-if-not-resolved="false">Pattern</xref>. For example, call to


    ```java

    builder.allowIfSubType(Pattern.compile("com\\.mycompany\\.")

    ```


    would indicate that any polymorphic values in package `com.mycompany` would be allowed.


    NOTE! <xref uid="java.util.regex.Pattern" data-throw-if-not-resolved="false">Pattern</xref> match is applied using `if (patternForSubType.matcher(typeId).matches()) { }` that is, it must match the whole class name, not just part.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfSubType(Pattern patternForSubType)
    parameters:
    - id: patternForSubType
      type: java.util.regex.Pattern
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()
  id: allowIfSubTypeIsArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: allowIfSubTypeIsArray()
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will allow all subtypes that are Java arrays (regardless of element type). Note that this does NOT validate element type itself as long as Polymorphic Type handling is enabled for element type: this is the case with all standard "Default Typing" inclusion criteria as well as for annotation (`@JsonTypeInfo`) use case (since annotation only applies to element types, not container).


    NOTE: not used with other Java collection types (<xref uid="java.util.List" data-throw-if-not-resolved="false">java.util.List</xref>s, <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s), mostly since use of generic types as polymorphic values is not (well) supported.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder allowIfSubTypeIsArray()
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.build()
  id: build()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: build()
  nameWithType: BasicPolymorphicTypeValidator.Builder.build()
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.build()
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.build*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public BasicPolymorphicTypeValidator build()
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.denyForExactBaseType(java.lang.Class<?>)
  id: denyForExactBaseType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
  langs:
  - java
  name: denyForExactBaseType(Class<?> baseTypeToDeny)
  nameWithType: BasicPolymorphicTypeValidator.Builder.denyForExactBaseType(Class<?> baseTypeToDeny)
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.denyForExactBaseType(Class<?> baseTypeToDeny)
  overload: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.denyForExactBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for appending matcher that will mark any polymorphic properties with exact specific class to be invalid. For example, call to


    ```java

    builder.denyforExactBaseType(Object.class)

    ```


    would indicate that any polymorphic properties where declared base type is `java.lang.Object` would be deemed invalid, and attempt to deserialize values of such types should result in an exception.
  syntax:
    content: public BasicPolymorphicTypeValidator.Builder denyForExactBaseType(Class<?> baseTypeToDeny)
    parameters:
    - id: baseTypeToDeny
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder
references:
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.Builder*
  name: Builder
  nameWithType: BasicPolymorphicTypeValidator.Builder.Builder
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.Builder
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType*
  name: allowIfBaseType
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfBaseType
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfBaseType
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.util.regex.Pattern
  spec.java:
  - uid: java.util.regex.Pattern
    name: Pattern
    fullName: java.util.regex.Pattern
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
  name: BasicPolymorphicTypeValidator.TypeMatcher
  nameWithType: BasicPolymorphicTypeValidator.TypeMatcher
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.denyForExactBaseType*
  name: denyForExactBaseType
  nameWithType: BasicPolymorphicTypeValidator.Builder.denyForExactBaseType
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.denyForExactBaseType
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType*
  name: allowIfSubType
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubType
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray*
  name: allowIfSubTypeIsArray
  nameWithType: BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator
  name: BasicPolymorphicTypeValidator
  nameWithType: BasicPolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.build*
  name: build
  nameWithType: BasicPolymorphicTypeValidator.Builder.build
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.build
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendBaseMatcher*
  name: _appendBaseMatcher
  nameWithType: BasicPolymorphicTypeValidator.Builder._appendBaseMatcher
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendBaseMatcher
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher
  name: BasicPolymorphicTypeValidator.NameMatcher
  nameWithType: BasicPolymorphicTypeValidator.NameMatcher
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher*
  name: _appendSubNameMatcher
  nameWithType: BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubNameMatcher
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher*
  name: _appendSubClassMatcher
  nameWithType: BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher
  fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder._appendSubClassMatcher
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.util.Set<java.lang.Class<?>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
    name: TypeMatcher
    fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher
  - name: '>'
    fullName: '>'
- uid: java.util.List<com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher
    name: NameMatcher
    fullName: com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.NameMatcher
  - name: '>'
    fullName: '>'
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
