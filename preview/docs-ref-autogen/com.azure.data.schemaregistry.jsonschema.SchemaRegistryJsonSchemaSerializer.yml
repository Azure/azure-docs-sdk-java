### YamlMime:JavaType
uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer"
fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer"
name: "SchemaRegistryJsonSchemaSerializer"
nameWithType: "SchemaRegistryJsonSchemaSerializer"
summary: "Class that serializes and deserializes objects using [JSON schema][].\n\n\n[JSON schema]: https://json-schema.org/"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **SchemaRegistryJsonSchemaSerializer**"
methods:
- uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.<T>deserialize(com.azure.core.models.MessageContent,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.deserialize(MessageContent message, TypeReference<T> typeReference)"
  name: "deserialize(MessageContent message, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryJsonSchemaSerializer.deserialize(MessageContent message, TypeReference<T> typeReference)"
  summary: "Deserializes a message into its object."
  parameters:
  - description: "Message to deserialize."
    name: "message"
    type: "<xref href=\"com.azure.core.models.MessageContent?alt=com.azure.core.models.MessageContent&text=MessageContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type reference of object."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>deserialize(MessageContent message, TypeReference<T> typeReference)"
  desc: "Deserializes a message into its object. If there is a schema defined in <xref uid=\"com.azure.core.models.MessageContent.getContentType*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageContent#getContentType()\"></xref>, it will fetch the schema and validate."
  returns:
    description: "The message deserialized into its object.  If the schema definition is defined but does not exist or the\n     object does not match the existing schema definition, an exception is thrown."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.<T>deserializeAsync(com.azure.core.models.MessageContent,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  name: "deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryJsonSchemaSerializer.deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  summary: "Deserializes a message into its object."
  parameters:
  - description: "Message to deserialize."
    name: "message"
    type: "<xref href=\"com.azure.core.models.MessageContent?alt=com.azure.core.models.MessageContent&text=MessageContent\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type reference of object."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>deserializeAsync(MessageContent message, TypeReference<T> typeReference)"
  desc: "Deserializes a message into its object. If there is a schema defined in <xref uid=\"com.azure.core.models.MessageContent.getContentType*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MessageContent#getContentType()\"></xref>, it will fetch the schema and validate."
  returns:
    description: "Mono that completes when the message deserialized into its object.  If the schema definition is defined\n     but does not exist or the object does not match the existing schema definition, an exception is thrown."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.<T>serialize(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.serialize(Object object, TypeReference<T> typeReference)"
  name: "serialize(Object object, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryJsonSchemaSerializer.serialize(Object object, TypeReference<T> typeReference)"
  summary: "Serializes the object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "Type reference of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>serialize(Object object, TypeReference<T> typeReference)"
  desc: "Serializes the object into a message. Tries to infer the schema definition based on the object. If no schema cannot be inferred, no validation is performed."
  returns:
    description: "The object serialized into a message content.  If the inferred schema definition does not exist or the\n     object does not match the existing schema definition, an exception is thrown."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.<T>serialize(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)"
  fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  name: "serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  nameWithType: "SchemaRegistryJsonSchemaSerializer.serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  summary: "Serializes an object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "Type of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Factory to create an instance given the serialized Avro."
    name: "messageFactory"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\">Function</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>serialize(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  desc: "Serializes an object into a message."
  returns:
    description: "The message encoded or <code>null</code> if the message could not be serialized."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.<T>serializeAsync(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>)"
  fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.serializeAsync(Object object, TypeReference<T> typeReference)"
  name: "serializeAsync(Object object, TypeReference<T> typeReference)"
  nameWithType: "SchemaRegistryJsonSchemaSerializer.serializeAsync(Object object, TypeReference<T> typeReference)"
  summary: "Serializes the object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "Type reference of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>serializeAsync(Object object, TypeReference<T> typeReference)"
  desc: "Serializes the object into a message. Tries to infer the schema definition based on the object. If no schema cannot be inferred, no validation is performed."
  returns:
    description: "The object serialized into a message content.  If the inferred schema definition does not exist or the\n     object does not match the existing schema definition, an exception is thrown."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.<T>serializeAsync(java.lang.Object,com.azure.core.util.serializer.TypeReference<T>,java.util.function.Function<com.azure.core.util.BinaryData,T>)"
  fullName: "com.azure.data.schemaregistry.jsonschema.SchemaRegistryJsonSchemaSerializer.serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  name: "serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  nameWithType: "SchemaRegistryJsonSchemaSerializer.serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  summary: "Serializes an object into a message."
  parameters:
  - description: "Object to serialize."
    name: "object"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  - description: "Type of message to create."
    name: "typeReference"
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Factory to create an instance given the serialized Avro. If null is passed in, then the\n     no argument constructor will be used."
    name: "messageFactory"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html\">Function</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<T> <T>serializeAsync(Object object, TypeReference<T> typeReference, Function<BinaryData,T> messageFactory)"
  desc: "Serializes an object into a message."
  returns:
    description: "A Mono that completes with the serialized message."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Class that serializes and deserializes objects using [JSON schema][].\n\n\n[JSON schema]: https://json-schema.org/"
metadata: {}
package: "com.azure.data.schemaregistry.jsonschema"
artifact: com.azure:azure-data-schemaregistry-jsonschema:1.0.0-beta.1
