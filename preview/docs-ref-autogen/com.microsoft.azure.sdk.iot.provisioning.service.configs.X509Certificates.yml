### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  id: X509Certificates
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs
  children:
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates)
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  - com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  langs:
  - java
  name: X509Certificates
  nameWithType: X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  type: Class
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    Representation of a single Device Provisioning Service X509 Primary and Secondary Certificate.


    this class creates a representation of an X509 certificate. It can receive primary and secondary certificate, but only the primary is mandatory.


    Users must provide the certificate as a `String`, from a **.pem** files. This class will encapsulate both in a single <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Attestation" data-throw-if-not-resolved="false">X509Attestation</xref>. The following JSON is an example of the result of this class.


    ```java

    {
          "primary": {
              "certificate": "-----BEGIN CERTIFICATE-----\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "-----END CERTIFICATE-----\n"
          },
          "secondary": {
              "certificate": "-----BEGIN CERTIFICATE-----\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
                             "-----END CERTIFICATE-----\n"
          }
      }
    ```


    After send an X509 certificate with success, the provisioning service will return the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateInfo" data-throw-if-not-resolved="false">X509CertificateInfo</xref> for both primary and secondary certificate. User can get these info from this class, and once again, only the primary info is mandatory. The following JSON is an example what info the provisioning service will return for X509.


    ```java

    {
          "primary": {
              "info": {
                   "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",
                   "sha1Thumbprint": "0000000000000000000000000000000000",
                   "sha256Thumbprint": "validEnrollmentGroupId",
                   "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",
                   "notBeforeUtc": "2017-11-14T12:34:18Z",
                   "notAfterUtc": "2017-11-20T12:34:18Z",
                   "serialNumber": "000000000000000000",
                   "version": 3
               }
          },
          "secondary": {
              "info": {
                   "subjectName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",
                   "sha1Thumbprint": "0000000000000000000000000000000000",
                   "sha256Thumbprint": "validEnrollmentGroupId",
                   "issuerName": "CN=ROOT_00000000-0000-0000-0000-000000000000, OU=Azure IoT, O=MSFT, C=US",
                   "notBeforeUtc": "2017-11-14T12:34:18Z",
                   "notAfterUtc": "2017-11-20T12:34:18Z",
                   "serialNumber": "000000000000000000",
                   "version": 3
               }
          }
      }
    ```
  syntax:
    content: public class X509Certificates
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates()
  id: X509Certificates()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: X509Certificates()
  nameWithType: X509Certificates.X509Certificates()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    Empty constructor


    Used only by the tools that will deserialize this class.
  syntax:
    content: " X509Certificates()"
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates)
  id: X509Certificates(com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates)
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: X509Certificates(X509Certificates x509Certificates)
  nameWithType: X509Certificates.X509Certificates(X509Certificates x509Certificates)
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(X509Certificates x509Certificates)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    Constructor \[COPY\]


    Creates a new instance of the x509Certificates copping the content of the provided one.
  syntax:
    content: public X509Certificates(X509Certificates x509Certificates)
    parameters:
    - id: x509Certificates
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
      description: the original <code>X509Certificates</code> to copy.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(java.lang.String,java.lang.String)
  id: X509Certificates(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: X509Certificates(String primary, String secondary)
  nameWithType: X509Certificates.X509Certificates(String primary, String secondary)
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates(String primary, String secondary)
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: >-
    CONSTRUCTOR


    Creates a new instance of the X509 certificates using the provided certificates.


    The certificate is a `String`, normally stored in a **.pem** or **.cert** file, and should looks like the following example:


    ```java

    "-----BEGIN CERTIFICATE-----\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n" +
     "-----END CERTIFICATE-----\n"
    ```
  syntax:
    content: " X509Certificates(String primary, String secondary)"
    parameters:
    - id: primary
      type: java.lang.String
      description: the <code>String</code> with the primary certificate.
    - id: secondary
      type: java.lang.String
      description: the <code>String</code> with the secondary certificate.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  id: getPrimary()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: getPrimary()
  nameWithType: X509Certificates.getPrimary()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Getter for the primary.
  syntax:
    content: public X509CertificateWithInfo getPrimary()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false">X509CertificateWithInfo</xref> with the stored primary. It cannot be <code>null</code>.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  id: getPrimaryFinal()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: getPrimaryFinal()
  nameWithType: X509Certificates.getPrimaryFinal()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Getter for the primary.
  syntax:
    content: public final X509CertificateWithInfo getPrimaryFinal()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false">X509CertificateWithInfo</xref> with the stored primary. It cannot be <code>null</code>.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  id: getSecondary()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: getSecondary()
  nameWithType: X509Certificates.getSecondary()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Getter for the secondary.
  syntax:
    content: public X509CertificateWithInfo getSecondary()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false">X509CertificateWithInfo</xref> with the stored secondary. It can be <code>null</code>.
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  id: getSecondaryFinal()
  artifact: com.microsoft.azure.sdk.iot.provisioning:provisioning-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates
  langs:
  - java
  name: getSecondaryFinal()
  nameWithType: X509Certificates.getSecondaryFinal()
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal()
  overload: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal*
  type: Method
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
  summary: Getter for the secondary.
  syntax:
    content: public final X509CertificateWithInfo getSecondaryFinal()
    return:
      type: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
      description: the <xref uid="com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo" data-throw-if-not-resolved="false">X509CertificateWithInfo</xref> with the stored secondary. It can be <code>null</code>.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates*
  name: X509Certificates
  nameWithType: X509Certificates.X509Certificates
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.X509Certificates
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
  name: X509CertificateWithInfo
  nameWithType: X509CertificateWithInfo
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509CertificateWithInfo
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary*
  name: getPrimary
  nameWithType: X509Certificates.getPrimary
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimary
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal*
  name: getPrimaryFinal
  nameWithType: X509Certificates.getPrimaryFinal
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getPrimaryFinal
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary*
  name: getSecondary
  nameWithType: X509Certificates.getSecondary
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondary
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal*
  name: getSecondaryFinal
  nameWithType: X509Certificates.getSecondaryFinal
  fullName: com.microsoft.azure.sdk.iot.provisioning.service.configs.X509Certificates.getSecondaryFinal
  package: com.microsoft.azure.sdk.iot.provisioning.service.configs
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
