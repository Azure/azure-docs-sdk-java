### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Iterators"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators"
name: "Iterators"
nameWithType: "Iterators"
summary: "This class contains static utility methods that operate on or return objects of type <xref uid=\"? extends java.util.Iterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterator\"></xref>. Except as noted, each method has a corresponding <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>\\-based method in the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterables\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterables\"></xref> class.\n\n*Performance notes:* Unless otherwise noted, all of the iterators produced in this class are *lazy*, which means that they only advance the backing iteration when absolutely necessary.\n\nSee the Guava User Guide section on [ `Iterators`][_Iterators].\n\n\n[_Iterators]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Iterators"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<F,T>transform(java.util.Iterator<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>addAll(java.util.Collection<T>,java.util.Iterator<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>all(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>any(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>asEnumeration(java.util.Iterator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>...)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>consumingIterator(java.util.Iterator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(T...)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(java.lang.Iterable<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(java.util.Iterator<?>,java.lang.Class<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray(T...)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forEnumeration(java.util.Enumeration<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(java.util.Iterator<? extends T>,int,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(java.util.Iterator<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(java.util.Iterator<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(java.util.Iterator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getNext(java.util.Iterator<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(java.util.Iterator<? extends T>,T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(java.util.Iterator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>indexOf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>limit(java.util.Iterator<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>,java.util.Comparator<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>paddedPartition(java.util.Iterator<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>partition(java.util.Iterator<T>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(java.util.Iterator<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>removeIf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>singletonIterator(T)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>toArray(java.util.Iterator<? extends T>,java.lang.Class<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>tryFind(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(java.util.Iterator<? extends T>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.advance(java.util.Iterator<?>,int)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.contains(java.util.Iterator<?>,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual(java.util.Iterator<?>,java.util.Iterator<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.frequency(java.util.Iterator<?>,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll(java.util.Iterator<?>,java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll(java.util.Iterator<?>,java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.size(java.util.Iterator<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Iterators.toString(java.util.Iterator<?>)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
