### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators
  id: Iterators
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<F,T>transform(java.util.Iterator<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>addAll(java.util.Collection<T>,java.util.Iterator<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>all(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>any(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>asEnumeration(java.util.Iterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>...)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>consumingIterator(java.util.Iterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(T...)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(java.lang.Iterable<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(java.util.Iterator<?>,java.lang.Class<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray(T...)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forEnumeration(java.util.Enumeration<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(java.util.Iterator<? extends T>,int,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(java.util.Iterator<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(java.util.Iterator<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(java.util.Iterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getNext(java.util.Iterator<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(java.util.Iterator<? extends T>,T)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(java.util.Iterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>indexOf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>limit(java.util.Iterator<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>,java.util.Comparator<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>paddedPartition(java.util.Iterator<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>partition(java.util.Iterator<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(java.util.Iterator<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>removeIf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>singletonIterator(T)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>toArray(java.util.Iterator<? extends T>,java.lang.Class<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>tryFind(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(java.util.Iterator<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.advance(java.util.Iterator<?>,int)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.contains(java.util.Iterator<?>,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual(java.util.Iterator<?>,java.util.Iterator<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.frequency(java.util.Iterator<?>,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll(java.util.Iterator<?>,java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll(java.util.Iterator<?>,java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.size(java.util.Iterator<?>)
  - com.azure.cosmos.implementation.guava25.collect.Iterators.toString(java.util.Iterator<?>)
  langs:
  - java
  name: Iterators
  nameWithType: Iterators
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This class contains static utility methods that operate on or return objects of type <xref uid="? extends java.util.Iterator" data-throw-if-not-resolved="false">Iterator</xref>. Except as noted, each method has a corresponding <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>\-based method in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables" data-throw-if-not-resolved="false">Iterables</xref> class.


    *Performance notes:* Unless otherwise noted, all of the iterators produced in this class are *lazy*, which means that they only advance the backing iteration when absolutely necessary.


    See the Guava User Guide section on [ `Iterators`][_Iterators].



    [_Iterators]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#iterables
  syntax:
    content: public final class Iterators
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<F,T>transform(java.util.Iterator<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  id: <F,T>transform(java.util.Iterator<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <F,T>transform(Iterator<F> fromIterator, Function<? super F,? extends T> function)
  nameWithType: Iterators.<F,T>transform(Iterator<F> fromIterator, Function<? super F,? extends T> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<F,T>transform(Iterator<F> fromIterator, Function<? super F,? extends T> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.transform*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view containing the result of applying `function` to each element of `fromIterator`.


    The returned iterator supports `remove()` if `fromIterator` does. After a successful `remove()` call, `fromIterator` no longer contains the corresponding element.
  syntax:
    content: public static Iterator<T> <F,T>transform(Iterator<F> fromIterator, Function<? super F,? extends T> function)
    parameters:
    - id: fromIterator
      type: java.util.Iterator<F>
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>addAll(java.util.Collection<T>,java.util.Iterator<? extends T>)
  id: <T>addAll(java.util.Collection<T>,java.util.Iterator<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>addAll(Collection<T> addTo, Iterator<? extends T> iterator)
  nameWithType: Iterators.<T>addAll(Collection<T> addTo, Iterator<? extends T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>addAll(Collection<T> addTo, Iterator<? extends T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Adds all elements in `iterator` to `collection`. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static boolean <T>addAll(Collection<T> addTo, Iterator<? extends T> iterator)
    parameters:
    - id: addTo
      type: java.util.Collection<T>
    - id: iterator
      type: java.util.Iterator<? extends T>
    return:
      type: boolean
      description: <code>true</code> if <code>collection</code> was modified as a result of this operation
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>all(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>all(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>all(Iterator<T> iterator, Predicate<? super T> predicate)
  nameWithType: Iterators.<T>all(Iterator<T> iterator, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>all(Iterator<T> iterator, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.all*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if every element returned by `iterator` satisfies the given predicate. If `iterator` is empty, `true` is returned.
  syntax:
    content: public static boolean <T>all(Iterator<T> iterator, Predicate<? super T> predicate)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>any(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>any(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>any(Iterator<T> iterator, Predicate<? super T> predicate)
  nameWithType: Iterators.<T>any(Iterator<T> iterator, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>any(Iterator<T> iterator, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.any*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if one or more elements returned by `iterator` satisfy the given predicate.
  syntax:
    content: public static boolean <T>any(Iterator<T> iterator, Predicate<? super T> predicate)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>asEnumeration(java.util.Iterator<T>)
  id: <T>asEnumeration(java.util.Iterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>asEnumeration(Iterator<T> iterator)
  nameWithType: Iterators.<T>asEnumeration(Iterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>asEnumeration(Iterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.asEnumeration*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adapts an `Iterator` to the `Enumeration` interface.


    The `Iterable` equivalent of this method is either <xref uid="" data-throw-if-not-resolved="false">Collections#enumeration</xref> (if you have a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>), or `Iterators.asEnumeration(collection.iterator())`.
  syntax:
    content: public static Enumeration<T> <T>asEnumeration(Iterator<T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    return:
      type: java.util.Enumeration<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  id: <T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>concat(Iterator<? extends T> a, Iterator<? extends T> b)
  nameWithType: Iterators.<T>concat(Iterator<? extends T> a, Iterator<? extends T> b)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(Iterator<? extends T> a, Iterator<? extends T> b)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines two iterators into a single iterator. The returned iterator iterates across the elements in `a`, followed by the elements in `b`. The source iterators are not polled until necessary.


    The returned iterator supports `remove()` when the corresponding input iterator supports it.
  syntax:
    content: public static Iterator<T> <T>concat(Iterator<? extends T> a, Iterator<? extends T> b)
    parameters:
    - id: a
      type: java.util.Iterator<? extends T>
    - id: b
      type: java.util.Iterator<? extends T>
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  id: <T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)
  nameWithType: Iterators.<T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines three iterators into a single iterator. The returned iterator iterates across the elements in `a`, followed by the elements in `b`, followed by the elements in `c`. The source iterators are not polled until necessary.


    The returned iterator supports `remove()` when the corresponding input iterator supports it.
  syntax:
    content: public static Iterator<T> <T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c)
    parameters:
    - id: a
      type: java.util.Iterator<? extends T>
    - id: b
      type: java.util.Iterator<? extends T>
    - id: c
      type: java.util.Iterator<? extends T>
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  id: <T>concat(java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>,java.util.Iterator<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)
  nameWithType: Iterators.<T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines four iterators into a single iterator. The returned iterator iterates across the elements in `a`, followed by the elements in `b`, followed by the elements in `c`, followed by the elements in `d`. The source iterators are not polled until necessary.


    The returned iterator supports `remove()` when the corresponding input iterator supports it.
  syntax:
    content: public static Iterator<T> <T>concat(Iterator<? extends T> a, Iterator<? extends T> b, Iterator<? extends T> c, Iterator<? extends T> d)
    parameters:
    - id: a
      type: java.util.Iterator<? extends T>
    - id: b
      type: java.util.Iterator<? extends T>
    - id: c
      type: java.util.Iterator<? extends T>
    - id: d
      type: java.util.Iterator<? extends T>
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends T>...)
  id: <T>concat(java.util.Iterator<? extends T>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>concat(Iterator<? extends T>[] inputs)
  nameWithType: Iterators.<T>concat(Iterator<? extends T>[] inputs)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(Iterator<? extends T>[] inputs)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in `inputs`. The input iterators are not polled until necessary.


    The returned iterator supports `remove()` when the corresponding input iterator supports it.
  syntax:
    content: public static Iterator<T> <T>concat(Iterator<? extends T>[] inputs)
    parameters:
    - id: inputs
      type: java.util.Iterator<? extends T>[]
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)
  id: <T>concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>concat(Iterator<? extends Iterator<? extends T>> inputs)
  nameWithType: Iterators.<T>concat(Iterator<? extends Iterator<? extends T>> inputs)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat(Iterator<? extends Iterator<? extends T>> inputs)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in `inputs`. The input iterators are not polled until necessary.


    The returned iterator supports `remove()` when the corresponding input iterator supports it. The methods of the returned iterator may throw `NullPointerException` if any of the input iterators is null.
  syntax:
    content: public static Iterator<T> <T>concat(Iterator<? extends Iterator<? extends T>> inputs)
    parameters:
    - id: inputs
      type: java.util.Iterator<? extends java.util.Iterator<? extends T>>
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>consumingIterator(java.util.Iterator<T>)
  id: <T>consumingIterator(java.util.Iterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>consumingIterator(Iterator<T> iterator)
  nameWithType: Iterators.<T>consumingIterator(Iterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>consumingIterator(Iterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.consumingIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the supplied `iterator` that removes each element from the supplied `iterator` as it is returned.


    The provided iterator must support <xref uid="? extends java.util.Iterator.remove*" data-throw-if-not-resolved="false">Iterator#remove()</xref> or else the returned iterator will fail on the first call to `next`.
  syntax:
    content: public static Iterator<T> <T>consumingIterator(Iterator<T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
      description: the iterator to remove and return elements from
    return:
      type: java.util.Iterator<T>
      description: an iterator that removes and returns elements from the supplied iterator
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(T...)
  id: <T>cycle(T...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>cycle(T[] elements)
  nameWithType: Iterators.<T>cycle(T[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(T[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.cycle*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterator that cycles indefinitely over the provided elements.


    The returned iterator supports `remove()`. After `remove()` is called, subsequent cycles omit the removed element, but `elements` does not change. The iterator's `hasNext()` method returns `true` until all of the original elements have been removed.


    **Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.
  syntax:
    content: public static Iterator<T> <T>cycle(T[] elements)
    parameters:
    - id: elements
      type: T[]
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(java.lang.Iterable<T>)
  id: <T>cycle(java.lang.Iterable<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>cycle(Iterable<T> iterable)
  nameWithType: Iterators.<T>cycle(Iterable<T> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle(Iterable<T> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.cycle*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterator that cycles indefinitely over the elements of `iterable`.


    The returned iterator supports `remove()` if the provided iterator does. After `remove()` is called, subsequent cycles omit the removed element, which is no longer in `iterable`. The iterator's `hasNext()` method returns `true` until `iterable` is empty.


    **Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.
  syntax:
    content: public static Iterator<T> <T>cycle(Iterable<T> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<T>
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(java.util.Iterator<?>,java.lang.Class<T>)
  id: <T>filter(java.util.Iterator<?>,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>filter(Iterator<?> unfiltered, Class<T> desiredType)
  nameWithType: Iterators.<T>filter(Iterator<?> unfiltered, Class<T> desiredType)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(Iterator<?> unfiltered, Class<T> desiredType)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of `unfiltered` containing all elements that are of the type `desiredType`.
  syntax:
    content: public static UnmodifiableIterator<T> <T>filter(Iterator<?> unfiltered, Class<T> desiredType)
    parameters:
    - id: unfiltered
      type: java.util.Iterator<?>
    - id: desiredType
      type: java.lang.Class<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>filter(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>filter(Iterator<T> unfiltered, Predicate<? super T> retainIfTrue)
  nameWithType: Iterators.<T>filter(Iterator<T> unfiltered, Predicate<? super T> retainIfTrue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter(Iterator<T> unfiltered, Predicate<? super T> retainIfTrue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of `unfiltered` containing all elements that satisfy the input predicate `retainIfTrue`.
  syntax:
    content: public static UnmodifiableIterator<T> <T>filter(Iterator<T> unfiltered, Predicate<? super T> retainIfTrue)
    parameters:
    - id: unfiltered
      type: java.util.Iterator<T>
    - id: retainIfTrue
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)
  id: <T>find(java.util.Iterator<? extends T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)
  nameWithType: Iterators.<T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.find*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Returns the first element in `iterator` that satisfies the given predicate. If no such element is found, `defaultValue` will be returned from this method and the iterator will be left exhausted: its `hasNext()` method will return `false`. Note that this can usually be handled more naturally using `tryFind(iterator, predicate).or(defaultValue)`.'
  syntax:
    content: public static T <T>find(Iterator<? extends T> iterator, Predicate<? super T> predicate, T defaultValue)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    - id: defaultValue
      type: T
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>find(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>find(Iterator<T> iterator, Predicate<? super T> predicate)
  nameWithType: Iterators.<T>find(Iterator<T> iterator, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find(Iterator<T> iterator, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.find*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the first element in `iterator` that satisfies the given predicate; use this method only when such an element is known to exist. If no such element is found, the iterator will be left exhausted: its `hasNext()` method will return `false`. If it is possible that *no* element will match, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.tryFind" data-throw-if-not-resolved="false">#tryFind</xref> or <xref uid="#find(Iterator,
     Predicate, Object)" data-throw-if-not-resolved="false">#find(Iterator,
     Predicate, Object)</xref> instead.
  syntax:
    content: public static T <T>find(Iterator<T> iterator, Predicate<? super T> predicate)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray(T...)
  id: <T>forArray(T...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>forArray(T[] array)
  nameWithType: Iterators.<T>forArray(T[] array)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray(T[] array)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.forArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterator containing the elements of `array` in order. The returned iterator is a view of the array; subsequent changes to the array will be reflected in the iterator.


    **Note:** It is often preferable to represent your data using a collection type, for example using <xref uid="" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>, making this method unnecessary.


    The `Iterable` equivalent of this method is either <xref uid="" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*" data-throw-if-not-resolved="false">ImmutableList#copyOf(Object[])</xref>\}, or <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.of" data-throw-if-not-resolved="false">ImmutableList#of</xref>.
  syntax:
    content: public static UnmodifiableIterator<T> <T>forArray(T[] array)
    parameters:
    - id: array
      type: T[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forEnumeration(java.util.Enumeration<T>)
  id: <T>forEnumeration(java.util.Enumeration<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>forEnumeration(Enumeration<T> enumeration)
  nameWithType: Iterators.<T>forEnumeration(Enumeration<T> enumeration)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forEnumeration(Enumeration<T> enumeration)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.forEnumeration*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adapts an `Enumeration` to the `Iterator` interface.


    This method has no equivalent in <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables" data-throw-if-not-resolved="false">Iterables</xref> because viewing an `Enumeration` as an `Iterable` is impossible. However, the contents can be *copied* into a collection using <xref uid="" data-throw-if-not-resolved="false">Collections#list</xref>.
  syntax:
    content: public static UnmodifiableIterator<T> <T>forEnumeration(Enumeration<T> enumeration)
    parameters:
    - id: enumeration
      type: java.util.Enumeration<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(java.util.Iterator<? extends T>,int,T)
  id: <T>get(java.util.Iterator<? extends T>,int,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>get(Iterator<? extends T> iterator, int position, T defaultValue)
  nameWithType: Iterators.<T>get(Iterator<? extends T> iterator, int position, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(Iterator<? extends T> iterator, int position, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Advances `iterator` `position + 1` times, returning the element at the `position`th position or `defaultValue` otherwise.
  syntax:
    content: public static T <T>get(Iterator<? extends T> iterator, int position, T defaultValue)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
    - id: position
      type: int
      description: position of the element to return
    - id: defaultValue
      type: T
      description: >-
        the default value to return if the iterator is empty or if <code>position</code>
             is greater than the number of elements remaining in <code>iterator</code>
    return:
      type: T
      description: >-
        the element at the specified position in <code>iterator</code> or <code>defaultValue</code> if
             <code>iterator</code> produces fewer than <code>position + 1</code> elements.
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(java.util.Iterator<T>,int)
  id: <T>get(java.util.Iterator<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>get(Iterator<T> iterator, int position)
  nameWithType: Iterators.<T>get(Iterator<T> iterator, int position)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get(Iterator<T> iterator, int position)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Advances `iterator` `position + 1` times, returning the element at the `position`th position.
  syntax:
    content: public static T <T>get(Iterator<T> iterator, int position)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    - id: position
      type: int
      description: position of the element to return
    return:
      type: T
      description: the element at the specified position in <code>iterator</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(java.util.Iterator<? extends T>,T)
  id: <T>getLast(java.util.Iterator<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>getLast(Iterator<? extends T> iterator, T defaultValue)
  nameWithType: Iterators.<T>getLast(Iterator<? extends T> iterator, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(Iterator<? extends T> iterator, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.getLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Advances `iterator` to the end, returning the last element or `defaultValue` if the iterator is empty.
  syntax:
    content: public static T <T>getLast(Iterator<? extends T> iterator, T defaultValue)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
    - id: defaultValue
      type: T
      description: the default value to return if the iterator is empty
    return:
      type: T
      description: the last element of <code>iterator</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(java.util.Iterator<T>)
  id: <T>getLast(java.util.Iterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>getLast(Iterator<T> iterator)
  nameWithType: Iterators.<T>getLast(Iterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast(Iterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.getLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Advances `iterator` to the end, returning the last element.
  syntax:
    content: public static T <T>getLast(Iterator<T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    return:
      type: T
      description: the last element of <code>iterator</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getNext(java.util.Iterator<? extends T>,T)
  id: <T>getNext(java.util.Iterator<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>getNext(Iterator<? extends T> iterator, T defaultValue)
  nameWithType: Iterators.<T>getNext(Iterator<? extends T> iterator, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getNext(Iterator<? extends T> iterator, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.getNext*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the next element in `iterator` or `defaultValue` if the iterator is empty. The <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables" data-throw-if-not-resolved="false">Iterables</xref> analog to this method is <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.getFirst" data-throw-if-not-resolved="false">Iterables#getFirst</xref>.
  syntax:
    content: public static T <T>getNext(Iterator<? extends T> iterator, T defaultValue)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
    - id: defaultValue
      type: T
      description: the default value to return if the iterator is empty
    return:
      type: T
      description: the next element of <code>iterator</code> or the default value
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(java.util.Iterator<? extends T>,T)
  id: <T>getOnlyElement(java.util.Iterator<? extends T>,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>getOnlyElement(Iterator<? extends T> iterator, T defaultValue)
  nameWithType: Iterators.<T>getOnlyElement(Iterator<? extends T> iterator, T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(Iterator<? extends T> iterator, T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.getOnlyElement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the single element contained in `iterator`, or `defaultValue` if the iterator is empty.
  syntax:
    content: public static T <T>getOnlyElement(Iterator<? extends T> iterator, T defaultValue)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
    - id: defaultValue
      type: T
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(java.util.Iterator<T>)
  id: <T>getOnlyElement(java.util.Iterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>getOnlyElement(Iterator<T> iterator)
  nameWithType: Iterators.<T>getOnlyElement(Iterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement(Iterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.getOnlyElement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the single element contained in `iterator`.
  syntax:
    content: public static T <T>getOnlyElement(Iterator<T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>indexOf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>indexOf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>indexOf(Iterator<T> iterator, Predicate<? super T> predicate)
  nameWithType: Iterators.<T>indexOf(Iterator<T> iterator, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>indexOf(Iterator<T> iterator, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the index in `iterator` of the first element that satisfies the provided `predicate`, or `-1` if the Iterator has no such elements.


    More formally, returns the lowest index `i` such that `predicate.apply(Iterators.get(iterator, i))` returns `true`, or `-1` if there is no such index.


    If -1 is returned, the iterator will be left exhausted: its `hasNext()` method will return `false`. Otherwise, the iterator will be set to the element which satisfies the `predicate`.
  syntax:
    content: public static int <T>indexOf(Iterator<T> iterator, Predicate<? super T> predicate)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>limit(java.util.Iterator<T>,int)
  id: <T>limit(java.util.Iterator<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>limit(Iterator<T> iterator, int limitSize)
  nameWithType: Iterators.<T>limit(Iterator<T> iterator, int limitSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>limit(Iterator<T> iterator, int limitSize)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.limit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view containing the first `limitSize` elements of `iterator`. If `iterator` contains fewer than `limitSize` elements, the returned view contains all of its elements. The returned iterator supports `remove()` if `iterator` does.
  syntax:
    content: public static Iterator<T> <T>limit(Iterator<T> iterator, int limitSize)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
      description: the iterator to limit
    - id: limitSize
      type: int
      description: the maximum number of elements in the returned iterator
    return:
      type: java.util.Iterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>,java.util.Comparator<? super T>)
  id: <T>mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>,java.util.Comparator<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>mergeSorted(Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator)
  nameWithType: Iterators.<T>mergeSorted(Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>mergeSorted(Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.mergeSorted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterator over the merged contents of all given `iterators`, traversing every element of the input iterators. Equivalent entries will not be de-duplicated.


    Callers must ensure that the source `iterators` are in non-descending order as this method does not sort its input.


    For any equivalent elements across all `iterators`, it is undefined which element is returned first.
  syntax:
    content: public static UnmodifiableIterator<T> <T>mergeSorted(Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator)
    parameters:
    - id: iterators
      type: java.lang.Iterable<? extends java.util.Iterator<? extends T>>
    - id: comparator
      type: java.util.Comparator<? super T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>paddedPartition(java.util.Iterator<T>,int)
  id: <T>paddedPartition(java.util.Iterator<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>paddedPartition(Iterator<T> iterator, int size)
  nameWithType: Iterators.<T>paddedPartition(Iterator<T> iterator, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>paddedPartition(Iterator<T> iterator, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.paddedPartition*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Divides an iterator into unmodifiable sublists of the given size, padding the final iterator with null values if necessary. For example, partitioning an iterator containing `[a, b, c, d, e]` with a partition size of 3 yields `[[a, b, c], [d, e, null]]` \-- an outer iterator containing two inner lists of three elements each, all in the original order.


    The returned lists implement <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">java.util.RandomAccess</xref>.
  syntax:
    content: public static UnmodifiableIterator<List<T>> <T>paddedPartition(Iterator<T> iterator, int size)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
      description: the iterator to return a partitioned view of
    - id: size
      type: int
      description: the desired size of each partition
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<java.util.List<T>>
      description: >-
        an iterator of immutable lists containing the elements of <code>iterator</code> divided into
             partitions (the final iterable may have trailing null elements)
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>partition(java.util.Iterator<T>,int)
  id: <T>partition(java.util.Iterator<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>partition(Iterator<T> iterator, int size)
  nameWithType: Iterators.<T>partition(Iterator<T> iterator, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>partition(Iterator<T> iterator, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.partition*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Divides an iterator into unmodifiable sublists of the given size (the final list may be smaller). For example, partitioning an iterator containing `[a, b, c, d, e]` with a partition size of 3 yields `[[a, b, c], [d, e]]` \-- an outer iterator containing two inner lists of three and two elements, all in the original order.


    The returned lists implement <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">java.util.RandomAccess</xref>.
  syntax:
    content: public static UnmodifiableIterator<List<T>> <T>partition(Iterator<T> iterator, int size)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
      description: the iterator to return a partitioned view of
    - id: size
      type: int
      description: the desired size of each partition (the last may be smaller)
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<java.util.List<T>>
      description: >-
        an iterator of immutable lists containing the elements of <code>iterator</code> divided into
             partitions
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>)
  id: <T>peekingIterator(com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>peekingIterator(PeekingIterator<T> iterator)
  nameWithType: Iterators.<T>peekingIterator(PeekingIterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(PeekingIterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.peekingIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Simply returns its argument.
  syntax:
    content: public static PeekingIterator<T> <T>peekingIterator(PeekingIterator<T> iterator)
    parameters:
    - id: iterator
      type: com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(java.util.Iterator<? extends T>)
  id: <T>peekingIterator(java.util.Iterator<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>peekingIterator(Iterator<? extends T> iterator)
  nameWithType: Iterators.<T>peekingIterator(Iterator<? extends T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(Iterator<? extends T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.peekingIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `PeekingIterator` backed by the given iterator.


    Calls to the `peek` method with no intervening calls to `next` do not affect the iteration, and hence return the same object each time. A subsequent call to `next` is guaranteed to return the same object again. For example:


    ```java

    PeekingIterator peekingIterator =
         Iterators.peekingIterator(Iterators.forArray("a", "b"));
     String a1 = peekingIterator.peek(); // returns "a"
     String a2 = peekingIterator.peek(); // also returns "a"
     String a3 = peekingIterator.next(); // also returns "a"
    ```


    Any structural changes to the underlying iteration (aside from those performed by the iterator's own <xref uid="com.azure.cosmos.implementation.guava25.collect.PeekingIterator.remove()" data-throw-if-not-resolved="false">PeekingIterator#remove()</xref> method) will leave the iterator in an undefined state.


    The returned iterator does not support removal after peeking, as explained by <xref uid="com.azure.cosmos.implementation.guava25.collect.PeekingIterator.remove()" data-throw-if-not-resolved="false">PeekingIterator#remove()</xref>.


    Note: If the given iterator is already a `PeekingIterator`, it *might* be returned to the caller, although this is neither guaranteed to occur nor required to be consistent. For example, this method *might* choose to pass through recognized implementations of `PeekingIterator` when the behavior of the implementation is known to meet the contract guaranteed by this method.


    There is no <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> equivalent to this method, so use this method to wrap each individual iterator as it is generated.
  syntax:
    content: public static PeekingIterator<T> <T>peekingIterator(Iterator<? extends T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
      description: >-
        the backing iterator. The <xref uid="com.azure.cosmos.implementation.guava25.collect.PeekingIterator" data-throw-if-not-resolved="false">PeekingIterator</xref> assumes ownership of this
             iterator, so users should cease making direct calls to it after calling this method.
    return:
      type: com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>
      description: a peeking iterator backed by that iterator. Apart from the additional <xref uid="com.azure.cosmos.implementation.guava25.collect.PeekingIterator.peek()" data-throw-if-not-resolved="false">PeekingIterator#peek()</xref> method, this iterator behaves exactly the same as <code>iterator</code>.
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>removeIf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>removeIf(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate)
  nameWithType: Iterators.<T>removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.removeIf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Removes every element that satisfies the provided predicate from the iterator. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static boolean <T>removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate)
    parameters:
    - id: removeFrom
      type: java.util.Iterator<T>
      description: the iterator to (potentially) remove elements from
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
      description: a predicate that determines whether an element should be removed
    return:
      type: boolean
      description: <code>true</code> if any elements were removed from the iterator
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>singletonIterator(T)
  id: <T>singletonIterator(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>singletonIterator(T value)
  nameWithType: Iterators.<T>singletonIterator(T value)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>singletonIterator(T value)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.singletonIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterator containing only `value`.


    The <xref uid="java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref> equivalent of this method is <xref uid="" data-throw-if-not-resolved="false">Collections#singleton</xref>.
  syntax:
    content: public static UnmodifiableIterator<T> <T>singletonIterator(T value)
    parameters:
    - id: value
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>toArray(java.util.Iterator<? extends T>,java.lang.Class<T>)
  id: <T>toArray(java.util.Iterator<? extends T>,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>toArray(Iterator<? extends T> iterator, Class<T> type)
  nameWithType: Iterators.<T>toArray(Iterator<? extends T> iterator, Class<T> type)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>toArray(Iterator<? extends T> iterator, Class<T> type)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: "Copies an iterator's elements into an array. The iterator will be left exhausted: its `hasNext()` method will return `false`."
  syntax:
    content: public static T[] <T>toArray(Iterator<? extends T> iterator, Class<T> type)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
      description: the iterator to copy
    - id: type
      type: java.lang.Class<T>
      description: the type of the elements
    return:
      type: T[]
      description: a newly-allocated array into which all the elements of the iterator have been copied
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>tryFind(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>tryFind(java.util.Iterator<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>tryFind(Iterator<T> iterator, Predicate<? super T> predicate)
  nameWithType: Iterators.<T>tryFind(Iterator<T> iterator, Predicate<? super T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>tryFind(Iterator<T> iterator, Predicate<? super T> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.tryFind*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="com.azure.cosmos.implementation.guava25.base.Optional" data-throw-if-not-resolved="false">Optional</xref> containing the first element in `iterator` that satisfies the given predicate, if such an element exists. If no such element is found, an empty <xref uid="com.azure.cosmos.implementation.guava25.base.Optional" data-throw-if-not-resolved="false">Optional</xref> will be returned from this method and the iterator will be left exhausted: its `hasNext()` method will return `false`.


    **Warning:** avoid using a `predicate` that matches `null`. If `null` is matched in `iterator`, a NullPointerException will be thrown.
  syntax:
    content: public static Optional<T> <T>tryFind(Iterator<T> iterator, Predicate<? super T> predicate)
    parameters:
    - id: iterator
      type: java.util.Iterator<T>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>)
  id: <T>unmodifiableIterator(com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>unmodifiableIterator(UnmodifiableIterator<T> iterator)
  nameWithType: Iterators.<T>unmodifiableIterator(UnmodifiableIterator<T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(UnmodifiableIterator<T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.unmodifiableIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Simply returns its argument.
  syntax:
    content: public static UnmodifiableIterator<T> <T>unmodifiableIterator(UnmodifiableIterator<T> iterator)
    parameters:
    - id: iterator
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(java.util.Iterator<? extends T>)
  id: <T>unmodifiableIterator(java.util.Iterator<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: <T>unmodifiableIterator(Iterator<? extends T> iterator)
  nameWithType: Iterators.<T>unmodifiableIterator(Iterator<? extends T> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator(Iterator<? extends T> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.unmodifiableIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable view of `iterator`.
  syntax:
    content: public static UnmodifiableIterator<T> <T>unmodifiableIterator(Iterator<? extends T> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.Iterators()
  id: Iterators()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: Iterators()
  nameWithType: Iterators.Iterators()
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.Iterators()
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.Iterators*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Iterators()
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.advance(java.util.Iterator<?>,int)
  id: advance(java.util.Iterator<?>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: advance(Iterator<?> iterator, int numberToAdvance)
  nameWithType: Iterators.advance(Iterator<?> iterator, int numberToAdvance)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.advance(Iterator<?> iterator, int numberToAdvance)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.advance*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Calls `next()` on `iterator`, either `numberToAdvance` times or until `hasNext()` returns `false`, whichever comes first.
  syntax:
    content: public static int advance(Iterator<?> iterator, int numberToAdvance)
    parameters:
    - id: iterator
      type: java.util.Iterator<?>
    - id: numberToAdvance
      type: int
    return:
      type: int
      description: the number of elements the iterator was advanced
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.contains(java.util.Iterator<?>,java.lang.Object)
  id: contains(java.util.Iterator<?>,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: contains(Iterator<?> iterator, Object element)
  nameWithType: Iterators.contains(Iterator<?> iterator, Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.contains(Iterator<?> iterator, Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `iterator` contains `element`.
  syntax:
    content: public static boolean contains(Iterator<?> iterator, Object element)
    parameters:
    - id: iterator
      type: java.util.Iterator<?>
    - id: element
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual(java.util.Iterator<?>,java.util.Iterator<?>)
  id: elementsEqual(java.util.Iterator<?>,java.util.Iterator<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2)
  nameWithType: Iterators.elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Determines whether two iterators contain equal elements in the same order. More specifically, this method returns `true` if `iterator1` and `iterator2` contain the same number of elements and every element of `iterator1` is equal to the corresponding element of `iterator2`.


    Note that this will modify the supplied iterators, since they will have been advanced some number of elements forward.
  syntax:
    content: public static boolean elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2)
    parameters:
    - id: iterator1
      type: java.util.Iterator<?>
    - id: iterator2
      type: java.util.Iterator<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.frequency(java.util.Iterator<?>,java.lang.Object)
  id: frequency(java.util.Iterator<?>,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: frequency(Iterator<?> iterator, Object element)
  nameWithType: Iterators.frequency(Iterator<?> iterator, Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.frequency(Iterator<?> iterator, Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.frequency*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Returns the number of elements in the specified iterator that equal the specified object. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static int frequency(Iterator<?> iterator, Object element)
    parameters:
    - id: iterator
      type: java.util.Iterator<?>
    - id: element
      type: java.lang.Object
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll(java.util.Iterator<?>,java.util.Collection<?>)
  id: removeAll(java.util.Iterator<?>,java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove)
  nameWithType: Iterators.removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Traverses an iterator and removes every element that belongs to the provided collection. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static boolean removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove)
    parameters:
    - id: removeFrom
      type: java.util.Iterator<?>
      description: the iterator to (potentially) remove elements from
    - id: elementsToRemove
      type: java.util.Collection<?>
      description: the elements to remove
    return:
      type: boolean
      description: <code>true</code> if any element was removed from <code>iterator</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll(java.util.Iterator<?>,java.util.Collection<?>)
  id: retainAll(java.util.Iterator<?>,java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain)
  nameWithType: Iterators.retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Traverses an iterator and removes every element that does not belong to the provided collection. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static boolean retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain)
    parameters:
    - id: removeFrom
      type: java.util.Iterator<?>
      description: the iterator to (potentially) remove elements from
    - id: elementsToRetain
      type: java.util.Collection<?>
      description: the elements to retain
    return:
      type: boolean
      description: <code>true</code> if any element was removed from <code>iterator</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.size(java.util.Iterator<?>)
  id: size(java.util.Iterator<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: size(Iterator<?> iterator)
  nameWithType: Iterators.size(Iterator<?> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.size(Iterator<?> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Returns the number of elements remaining in `iterator`. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static int size(Iterator<?> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<?>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.toString(java.util.Iterator<?>)
  id: toString(java.util.Iterator<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Iterators
  langs:
  - java
  name: toString(Iterator<?> iterator)
  nameWithType: Iterators.toString(Iterator<?> iterator)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.toString(Iterator<?> iterator)
  overload: com.azure.cosmos.implementation.guava25.collect.Iterators.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Returns a string representation of `iterator`, with the format `[e1, e2, ..., en]`. The iterator will be left exhausted: its `hasNext()` method will return `false`.'
  syntax:
    content: public static String toString(Iterator<?> iterator)
    parameters:
    - id: iterator
      type: java.util.Iterator<?>
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.Iterators*
  name: Iterators
  nameWithType: Iterators.Iterators
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.Iterators
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<? extends T>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.unmodifiableIterator*
  name: <T>unmodifiableIterator
  nameWithType: Iterators.<T>unmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>unmodifiableIterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<?>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.size*
  name: size
  nameWithType: Iterators.size
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.contains*
  name: contains
  nameWithType: Iterators.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll*
  name: removeAll
  nameWithType: Iterators.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<T>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.removeIf*
  name: <T>removeIf
  nameWithType: Iterators.<T>removeIf
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>removeIf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll*
  name: retainAll
  nameWithType: Iterators.retainAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.retainAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual*
  name: elementsEqual
  nameWithType: Iterators.elementsEqual
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.elementsEqual
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.toString*
  name: toString
  nameWithType: Iterators.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.getOnlyElement*
  name: <T>getOnlyElement
  nameWithType: Iterators.<T>getOnlyElement
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getOnlyElement
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T[]
  spec.java:
  - uid: T
    name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.toArray*
  name: <T>toArray
  nameWithType: Iterators.<T>toArray
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>toArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<T>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.addAll*
  name: <T>addAll
  nameWithType: Iterators.<T>addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.frequency*
  name: frequency
  nameWithType: Iterators.frequency
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.frequency
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.cycle*
  name: <T>cycle
  nameWithType: Iterators.<T>cycle
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>cycle
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.concat*
  name: <T>concat
  nameWithType: Iterators.<T>concat
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>concat
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<? extends T>[]
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: java.util.Iterator<? extends java.util.Iterator<? extends T>>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends java.util.Iterator'
    name: Iterator
    fullName: '? extends java.util.Iterator'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<java.util.List<T>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.partition*
  name: <T>partition
  nameWithType: Iterators.<T>partition
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>partition
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.paddedPartition*
  name: <T>paddedPartition
  nameWithType: Iterators.<T>paddedPartition
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>paddedPartition
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.filter*
  name: <T>filter
  nameWithType: Iterators.<T>filter
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>filter
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.any*
  name: <T>any
  nameWithType: Iterators.<T>any
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>any
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.all*
  name: <T>all
  nameWithType: Iterators.<T>all
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>all
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.find*
  name: <T>find
  nameWithType: Iterators.<T>find
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>find
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Optional<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.tryFind*
  name: <T>tryFind
  nameWithType: Iterators.<T>tryFind
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>tryFind
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.indexOf*
  name: <T>indexOf
  nameWithType: Iterators.<T>indexOf
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>indexOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<F>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super F'
    name: '? super F'
    fullName: '? super F'
  - name: ','
    fullName: ','
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.transform*
  name: <F,T>transform
  nameWithType: Iterators.<F,T>transform
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<F,T>transform
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.get*
  name: <T>get
  nameWithType: Iterators.<T>get
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.getNext*
  name: <T>getNext
  nameWithType: Iterators.<T>getNext
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getNext
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.getLast*
  name: <T>getLast
  nameWithType: Iterators.<T>getLast
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>getLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.advance*
  name: advance
  nameWithType: Iterators.advance
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.advance
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.limit*
  name: <T>limit
  nameWithType: Iterators.<T>limit
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>limit
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.consumingIterator*
  name: <T>consumingIterator
  nameWithType: Iterators.<T>consumingIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>consumingIterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.forArray*
  name: <T>forArray
  nameWithType: Iterators.<T>forArray
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.singletonIterator*
  name: <T>singletonIterator
  nameWithType: Iterators.<T>singletonIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>singletonIterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Enumeration<T>
  spec.java:
  - uid: java.util.Enumeration
    name: Enumeration
    fullName: java.util.Enumeration
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.forEnumeration*
  name: <T>forEnumeration
  nameWithType: Iterators.<T>forEnumeration
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forEnumeration
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.asEnumeration*
  name: <T>asEnumeration
  nameWithType: Iterators.<T>asEnumeration
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>asEnumeration
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.PeekingIterator
    name: PeekingIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.PeekingIterator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.peekingIterator*
  name: <T>peekingIterator
  nameWithType: Iterators.<T>peekingIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Iterator<? extends T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Iterator'
    name: Iterator
    fullName: '? extends java.util.Iterator'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.Comparator<? super T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.mergeSorted*
  name: <T>mergeSorted
  nameWithType: Iterators.<T>mergeSorted
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>mergeSorted
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? extends T>[]'
  name: '? extends T>[]'
  nameWithType: '? extends T>[]'
  fullName: '? extends T>[]'
- uid: '? extends java.util.Iterator'
  name: '? extends Iterator'
  nameWithType: '? extends Iterator'
  fullName: '? extends java.util.Iterator'
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.cosmos.implementation.guava25.base.Optional
  name: Optional
  nameWithType: Optional
  fullName: com.azure.cosmos.implementation.guava25.base.Optional
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super F,? extends T'
  name: '? super F,? extends T'
  nameWithType: '? super F,? extends T'
  fullName: '? super F,? extends T'
- uid: java.util.Enumeration
  name: Enumeration
  nameWithType: Enumeration
  fullName: java.util.Enumeration
- uid: com.azure.cosmos.implementation.guava25.collect.PeekingIterator
  name: PeekingIterator
  nameWithType: PeekingIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.PeekingIterator
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
