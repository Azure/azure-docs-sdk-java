### YamlMime:JavaType
uid: "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter"
fullName: "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter"
name: "JsonPointerBasedFilter"
nameWithType: "JsonPointerBasedFilter"
summary: "Simple <xref uid=\"com.fasterxml.jackson.core.filter.TokenFilter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenFilter\"></xref> implementation that takes a single <xref uid=\"com.fasterxml.jackson.core.JsonPointer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonPointer\"></xref> and matches a single value accordingly. Instances are immutable and fully thread-safe, shareable, and efficient to use."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.core.filter.TokenFilter\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.fasterxml.jackson.core.filter.TokenFilter._includeScalar()"
- "com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()"
- "com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()"
- "com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray()"
- "com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject()"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeBinary()"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(java.lang.Object)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNull()"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigDecimal)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigInteger)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(java.lang.String)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue()"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.lang.String)"
- "com.fasterxml.jackson.core.filter.TokenFilter.includeValue(com.fasterxml.jackson.core.JsonParser)"
- "com.fasterxml.jackson.core.filter.TokenFilter.toString()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class JsonPointerBasedFilter extends TokenFilter"
constructors:
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.JsonPointerBasedFilter(com.fasterxml.jackson.core.JsonPointer)"
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.JsonPointerBasedFilter(java.lang.String)"
fields:
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._pathToMatch"
methods:
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter._includeScalar()"
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartArray()"
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.filterStartObject()"
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeElement(int)"
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.includeProperty(java.lang.String)"
- "com.fasterxml.jackson.core.filter.JsonPointerBasedFilter.toString()"
type: "class"
metadata: {}
package: "com.fasterxml.jackson.core.filter"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
