### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.JsonNode"
fullName: "com.fasterxml.jackson.databind.JsonNode"
name: "JsonNode"
nameWithType: "JsonNode"
summary: "Base class for all JSON nodes, which form the basis of JSON Tree Model that Jackson implements. One way to think of these nodes is to consider them similar to DOM nodes in XML DOM trees.\n\nAs a general design rule, most accessors (\"getters\") are included in this base class, to allow for traversing structure without type casts. Most mutators, however, need to be accessed through specific sub-classes (such as `ObjectNode` and `ArrayNode`). This seems sensible because proper type information is generally available when building or modifying trees, but less often when reading a tree (newly built from parsed JSON content).\n\nActual concrete sub-classes can be found from package <xref uid=\"com.fasterxml.jackson.databind.node\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.node\"></xref>.\n\nNote that it is possible to \"read\" from nodes, using method <xref uid=\"com.fasterxml.jackson.core.TreeNode.traverse(com.fasterxml.jackson.core.ObjectCodec)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TreeNode#traverse(ObjectCodec)\"></xref>, which will result in a <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref> being constructed. This can be used for (relatively) efficient conversations between different representations; and it is what core databind uses for methods like <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper#treeToValue(TreeNode, Class)\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(com.fasterxml.jackson.core.TreeNode)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper#treeAsTokens(TreeNode)\"></xref>"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.databind.JsonSerializable.Base\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class JsonNode extends JsonSerializable.Base implements TreeNode, Iterable<JsonNode>"
constructors:
- "com.fasterxml.jackson.databind.JsonNode.JsonNode()"
methods:
- "com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)"
- "com.fasterxml.jackson.databind.JsonNode.<T>_this()"
- "com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()"
- "com.fasterxml.jackson.databind.JsonNode.<T>require()"
- "com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()"
- "com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode._at(com.fasterxml.jackson.core.JsonPointer)"
- "com.fasterxml.jackson.databind.JsonNode.asBoolean()"
- "com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)"
- "com.fasterxml.jackson.databind.JsonNode.asDouble()"
- "com.fasterxml.jackson.databind.JsonNode.asDouble(double)"
- "com.fasterxml.jackson.databind.JsonNode.asInt()"
- "com.fasterxml.jackson.databind.JsonNode.asInt(int)"
- "com.fasterxml.jackson.databind.JsonNode.asLong()"
- "com.fasterxml.jackson.databind.JsonNode.asLong(long)"
- "com.fasterxml.jackson.databind.JsonNode.asText()"
- "com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)"
- "com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()"
- "com.fasterxml.jackson.databind.JsonNode.binaryValue()"
- "com.fasterxml.jackson.databind.JsonNode.booleanValue()"
- "com.fasterxml.jackson.databind.JsonNode.canConvertToInt()"
- "com.fasterxml.jackson.databind.JsonNode.canConvertToLong()"
- "com.fasterxml.jackson.databind.JsonNode.decimalValue()"
- "com.fasterxml.jackson.databind.JsonNode.doubleValue()"
- "com.fasterxml.jackson.databind.JsonNode.elements()"
- "com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)"
- "com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)"
- "com.fasterxml.jackson.databind.JsonNode.fieldNames()"
- "com.fasterxml.jackson.databind.JsonNode.fields()"
- "com.fasterxml.jackson.databind.JsonNode.findParent(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)"
- "com.fasterxml.jackson.databind.JsonNode.findPath(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.findValue(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)"
- "com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)"
- "com.fasterxml.jackson.databind.JsonNode.floatValue()"
- "com.fasterxml.jackson.databind.JsonNode.get(int)"
- "com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.getNodeType()"
- "com.fasterxml.jackson.databind.JsonNode.has(int)"
- "com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.hasNonNull(int)"
- "com.fasterxml.jackson.databind.JsonNode.hasNonNull(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.intValue()"
- "com.fasterxml.jackson.databind.JsonNode.isArray()"
- "com.fasterxml.jackson.databind.JsonNode.isBigDecimal()"
- "com.fasterxml.jackson.databind.JsonNode.isBigInteger()"
- "com.fasterxml.jackson.databind.JsonNode.isBinary()"
- "com.fasterxml.jackson.databind.JsonNode.isBoolean()"
- "com.fasterxml.jackson.databind.JsonNode.isContainerNode()"
- "com.fasterxml.jackson.databind.JsonNode.isDouble()"
- "com.fasterxml.jackson.databind.JsonNode.isEmpty()"
- "com.fasterxml.jackson.databind.JsonNode.isFloat()"
- "com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()"
- "com.fasterxml.jackson.databind.JsonNode.isInt()"
- "com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()"
- "com.fasterxml.jackson.databind.JsonNode.isLong()"
- "com.fasterxml.jackson.databind.JsonNode.isMissingNode()"
- "com.fasterxml.jackson.databind.JsonNode.isNull()"
- "com.fasterxml.jackson.databind.JsonNode.isNumber()"
- "com.fasterxml.jackson.databind.JsonNode.isObject()"
- "com.fasterxml.jackson.databind.JsonNode.isPojo()"
- "com.fasterxml.jackson.databind.JsonNode.isShort()"
- "com.fasterxml.jackson.databind.JsonNode.isTextual()"
- "com.fasterxml.jackson.databind.JsonNode.isValueNode()"
- "com.fasterxml.jackson.databind.JsonNode.iterator()"
- "com.fasterxml.jackson.databind.JsonNode.longValue()"
- "com.fasterxml.jackson.databind.JsonNode.numberValue()"
- "com.fasterxml.jackson.databind.JsonNode.path(int)"
- "com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.required(int)"
- "com.fasterxml.jackson.databind.JsonNode.required(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)"
- "com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonNode.shortValue()"
- "com.fasterxml.jackson.databind.JsonNode.size()"
- "com.fasterxml.jackson.databind.JsonNode.textValue()"
- "com.fasterxml.jackson.databind.JsonNode.toPrettyString()"
- "com.fasterxml.jackson.databind.JsonNode.toString()"
type: "class"
implements:
- "<xref href=\"com.fasterxml.jackson.core.TreeNode?alt=com.fasterxml.jackson.core.TreeNode&text=TreeNode\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
