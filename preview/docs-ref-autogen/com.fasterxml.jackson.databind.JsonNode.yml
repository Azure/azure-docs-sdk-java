### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.JsonNode
  id: JsonNode
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.JsonNode.<T>_this()
  - com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()
  - com.fasterxml.jackson.databind.JsonNode.<T>require()
  - com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  - com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.JsonNode()
  - com.fasterxml.jackson.databind.JsonNode._at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.asBoolean()
  - com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
  - com.fasterxml.jackson.databind.JsonNode.asDouble()
  - com.fasterxml.jackson.databind.JsonNode.asDouble(double)
  - com.fasterxml.jackson.databind.JsonNode.asInt()
  - com.fasterxml.jackson.databind.JsonNode.asInt(int)
  - com.fasterxml.jackson.databind.JsonNode.asLong()
  - com.fasterxml.jackson.databind.JsonNode.asLong(long)
  - com.fasterxml.jackson.databind.JsonNode.asText()
  - com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()
  - com.fasterxml.jackson.databind.JsonNode.binaryValue()
  - com.fasterxml.jackson.databind.JsonNode.booleanValue()
  - com.fasterxml.jackson.databind.JsonNode.canConvertToInt()
  - com.fasterxml.jackson.databind.JsonNode.canConvertToLong()
  - com.fasterxml.jackson.databind.JsonNode.decimalValue()
  - com.fasterxml.jackson.databind.JsonNode.doubleValue()
  - com.fasterxml.jackson.databind.JsonNode.elements()
  - com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
  - com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  - com.fasterxml.jackson.databind.JsonNode.fieldNames()
  - com.fasterxml.jackson.databind.JsonNode.fields()
  - com.fasterxml.jackson.databind.JsonNode.findParent(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.JsonNode.findPath(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValue(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  - com.fasterxml.jackson.databind.JsonNode.floatValue()
  - com.fasterxml.jackson.databind.JsonNode.get(int)
  - com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.getNodeType()
  - com.fasterxml.jackson.databind.JsonNode.has(int)
  - com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.hasNonNull(int)
  - com.fasterxml.jackson.databind.JsonNode.hasNonNull(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.intValue()
  - com.fasterxml.jackson.databind.JsonNode.isArray()
  - com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  - com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  - com.fasterxml.jackson.databind.JsonNode.isBinary()
  - com.fasterxml.jackson.databind.JsonNode.isBoolean()
  - com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  - com.fasterxml.jackson.databind.JsonNode.isDouble()
  - com.fasterxml.jackson.databind.JsonNode.isEmpty()
  - com.fasterxml.jackson.databind.JsonNode.isFloat()
  - com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  - com.fasterxml.jackson.databind.JsonNode.isInt()
  - com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  - com.fasterxml.jackson.databind.JsonNode.isLong()
  - com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  - com.fasterxml.jackson.databind.JsonNode.isNull()
  - com.fasterxml.jackson.databind.JsonNode.isNumber()
  - com.fasterxml.jackson.databind.JsonNode.isObject()
  - com.fasterxml.jackson.databind.JsonNode.isPojo()
  - com.fasterxml.jackson.databind.JsonNode.isShort()
  - com.fasterxml.jackson.databind.JsonNode.isTextual()
  - com.fasterxml.jackson.databind.JsonNode.isValueNode()
  - com.fasterxml.jackson.databind.JsonNode.iterator()
  - com.fasterxml.jackson.databind.JsonNode.longValue()
  - com.fasterxml.jackson.databind.JsonNode.numberValue()
  - com.fasterxml.jackson.databind.JsonNode.path(int)
  - com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.required(int)
  - com.fasterxml.jackson.databind.JsonNode.required(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.shortValue()
  - com.fasterxml.jackson.databind.JsonNode.size()
  - com.fasterxml.jackson.databind.JsonNode.textValue()
  - com.fasterxml.jackson.databind.JsonNode.toPrettyString()
  - com.fasterxml.jackson.databind.JsonNode.toString()
  langs:
  - java
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
  type: Class
  package: com.fasterxml.jackson.databind
  summary: >-
    Base class for all JSON nodes, which form the basis of JSON Tree Model that Jackson implements. One way to think of these nodes is to consider them similar to DOM nodes in XML DOM trees.


    As a general design rule, most accessors ("getters") are included in this base class, to allow for traversing structure without type casts. Most mutators, however, need to be accessed through specific sub-classes (such as `ObjectNode` and `ArrayNode`). This seems sensible because proper type information is generally available when building or modifying trees, but less often when reading a tree (newly built from parsed JSON content).


    Actual concrete sub-classes can be found from package <xref uid="com.fasterxml.jackson.databind.node" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node</xref>.


    Note that it is possible to "read" from nodes, using method <xref uid="com.fasterxml.jackson.core.TreeNode.traverse(com.fasterxml.jackson.core.ObjectCodec)" data-throw-if-not-resolved="false">TreeNode#traverse(ObjectCodec)</xref>, which will result in a <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> being constructed. This can be used for (relatively) efficient conversations between different representations; and it is what core databind uses for methods like <xref uid="com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;treeToValue(com.fasterxml.jackson.core.TreeNode,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">ObjectMapper#treeToValue(TreeNode, Class)</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(com.fasterxml.jackson.core.TreeNode)" data-throw-if-not-resolved="false">ObjectMapper#treeAsTokens(TreeNode)</xref>
  syntax:
    content: public abstract class JsonNode extends JsonSerializable.Base implements TreeNode, Iterable<JsonNode>
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializable.Base
  implements:
  - com.fasterxml.jackson.core.TreeNode
  - java.lang.Iterable<com.fasterxml.jackson.databind.JsonNode>
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  id: <T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>_reportRequiredViolation(String msgTemplate, Object[] args)
  nameWithType: JsonNode.<T>_reportRequiredViolation(String msgTemplate, Object[] args)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(String msgTemplate, Object[] args)
  overload: com.fasterxml.jackson.databind.JsonNode._reportRequiredViolation*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Helper method that throws <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> as a result of violating "required-constraint" for this node (for <xref uid="com.fasterxml.jackson.databind.JsonNode.required*" data-throw-if-not-resolved="false">#required</xref> or related methods).
  syntax:
    content: protected T <T>_reportRequiredViolation(String msgTemplate, Object[] args)
    parameters:
    - id: msgTemplate
      type: java.lang.String
    - id: args
      type: java.lang.Object[]
    return:
      type: T
- uid: com.fasterxml.jackson.databind.JsonNode.<T>_this()
  id: <T>_this()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>_this()
  nameWithType: JsonNode.<T>_this()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_this()
  overload: com.fasterxml.jackson.databind.JsonNode._this*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected T <T>_this()
    return:
      type: T
- uid: com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()
  id: <T>deepCopy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>deepCopy()
  nameWithType: JsonNode.<T>deepCopy()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()
  overload: com.fasterxml.jackson.databind.JsonNode.deepCopy*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called to get a node that is guaranteed not to allow changing of this node through mutators on this node or any of its children. This means it can either make a copy of this node (and all mutable children and grand children nodes), or node itself if it is immutable.


    Note: return type is guaranteed to have same type as the node method is called on; which is why method is declared with local generic type.
  syntax:
    content: public abstract T <T>deepCopy()
    return:
      type: T
      description: >-
        Node that is either a copy of this node (and all non-leaf
            children); or, for immutable leaf nodes, node itself.
- uid: com.fasterxml.jackson.databind.JsonNode.<T>require()
  id: <T>require()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>require()
  nameWithType: JsonNode.<T>require()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>require()
  overload: com.fasterxml.jackson.databind.JsonNode.require*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method that may be called to verify that `this` node is NOT so-called "missing node": that is, one for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode()" data-throw-if-not-resolved="false">#isMissingNode()</xref> returns `true`. If not missing node, `this` is returned to allow chaining; otherwise <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown.'
  syntax:
    content: public T <T>require()
    return:
      type: T
      description: <code>this</code> node to allow chaining
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: if this node is "missing node"
- uid: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  id: <T>requireNonNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>requireNonNull()
  nameWithType: JsonNode.<T>requireNonNull()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  overload: com.fasterxml.jackson.databind.JsonNode.requireNonNull*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that may be called to verify that `this` node is neither so-called "missing node" (that is, one for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode()" data-throw-if-not-resolved="false">#isMissingNode()</xref> returns `true`) nor "null node" (one for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isNull()" data-throw-if-not-resolved="false">#isNull()</xref> returns `true`). If non-null non-missing node, `this` is returned to allow chaining; otherwise <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown.
  syntax:
    content: public T <T>requireNonNull()
    return:
      type: T
      description: <code>this</code> node to allow chaining
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: if this node is either "missing node" or "null node"
- uid: com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
  id: <T>with(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>with(String propertyName)
  nameWithType: JsonNode.<T>with(String propertyName)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>with(String propertyName)
  overload: com.fasterxml.jackson.databind.JsonNode.with*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called on Object nodes, to access a property that has Object value; or if no such property exists, to create, add and return such Object node. If the node method is called on is not Object node, or if property exists and has value that is not Object node, <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> is thrown


    NOTE: since 2.10 has had co-variant return type
  syntax:
    content: public T <T>with(String propertyName)
    parameters:
    - id: propertyName
      type: java.lang.String
    return:
      type: T
- uid: com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
  id: <T>withArray(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: <T>withArray(String propertyName)
  nameWithType: JsonNode.<T>withArray(String propertyName)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>withArray(String propertyName)
  overload: com.fasterxml.jackson.databind.JsonNode.withArray*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called on Object nodes, to access a property that has `Array` value; or if no such property exists, to create, add and return such Array node. If the node method is called on is not Object node, or if property exists and has value that is not Array node, <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> is thrown


    NOTE: since 2.10 has had co-variant return type
  syntax:
    content: public T <T>withArray(String propertyName)
    parameters:
    - id: propertyName
      type: java.lang.String
    return:
      type: T
- uid: com.fasterxml.jackson.databind.JsonNode.JsonNode()
  id: JsonNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: JsonNode()
  nameWithType: JsonNode.JsonNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.JsonNode()
  overload: com.fasterxml.jackson.databind.JsonNode.JsonNode*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected JsonNode()
- uid: com.fasterxml.jackson.databind.JsonNode._at(com.fasterxml.jackson.core.JsonPointer)
  id: _at(com.fasterxml.jackson.core.JsonPointer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: _at(JsonPointer ptr)
  nameWithType: JsonNode._at(JsonPointer ptr)
  fullName: com.fasterxml.jackson.databind.JsonNode._at(JsonPointer ptr)
  overload: com.fasterxml.jackson.databind.JsonNode._at*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: protected abstract JsonNode _at(JsonPointer ptr)
    parameters:
    - id: ptr
      type: com.fasterxml.jackson.core.JsonPointer
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean()
  id: asBoolean()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asBoolean()
  nameWithType: JsonNode.asBoolean()
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean()
  overload: com.fasterxml.jackson.databind.JsonNode.asBoolean*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation cannot be converted to a boolean value (including structured types like Objects and Arrays), default value of **false** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean asBoolean()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
  id: asBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asBoolean(boolean defaultValue)
  nameWithType: JsonNode.asBoolean(boolean defaultValue)
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean defaultValue)
  overload: com.fasterxml.jackson.databind.JsonNode.asBoolean*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation cannot be converted to a boolean value (including structured types like Objects and Arrays), specified **defaultValue** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean asBoolean(boolean defaultValue)
    parameters:
    - id: defaultValue
      type: boolean
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.asDouble()
  id: asDouble()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asDouble()
  nameWithType: JsonNode.asDouble()
  fullName: com.fasterxml.jackson.databind.JsonNode.asDouble()
  overload: com.fasterxml.jackson.databind.JsonNode.asDouble*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation cannot be converted to an int (including structured types like Objects and Arrays), default value of **0.0** will be returned; no exceptions are thrown.
  syntax:
    content: public double asDouble()
    return:
      type: double
- uid: com.fasterxml.jackson.databind.JsonNode.asDouble(double)
  id: asDouble(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asDouble(double defaultValue)
  nameWithType: JsonNode.asDouble(double defaultValue)
  fullName: com.fasterxml.jackson.databind.JsonNode.asDouble(double defaultValue)
  overload: com.fasterxml.jackson.databind.JsonNode.asDouble*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation cannot be converted to an int (including structured types like Objects and Arrays), specified **defaultValue** will be returned; no exceptions are thrown.
  syntax:
    content: public double asDouble(double defaultValue)
    parameters:
    - id: defaultValue
      type: double
    return:
      type: double
- uid: com.fasterxml.jackson.databind.JsonNode.asInt()
  id: asInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asInt()
  nameWithType: JsonNode.asInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.asInt()
  overload: com.fasterxml.jackson.databind.JsonNode.asInt*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation cannot be converted to an int (including structured types like Objects and Arrays), default value of **0** will be returned; no exceptions are thrown.
  syntax:
    content: public int asInt()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.JsonNode.asInt(int)
  id: asInt(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asInt(int defaultValue)
  nameWithType: JsonNode.asInt(int defaultValue)
  fullName: com.fasterxml.jackson.databind.JsonNode.asInt(int defaultValue)
  overload: com.fasterxml.jackson.databind.JsonNode.asInt*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation cannot be converted to an int (including structured types like Objects and Arrays), specified **defaultValue** will be returned; no exceptions are thrown.
  syntax:
    content: public int asInt(int defaultValue)
    parameters:
    - id: defaultValue
      type: int
    return:
      type: int
- uid: com.fasterxml.jackson.databind.JsonNode.asLong()
  id: asLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asLong()
  nameWithType: JsonNode.asLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.asLong()
  overload: com.fasterxml.jackson.databind.JsonNode.asLong*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation cannot be converted to an long (including structured types like Objects and Arrays), default value of **0** will be returned; no exceptions are thrown.
  syntax:
    content: public long asLong()
    return:
      type: long
- uid: com.fasterxml.jackson.databind.JsonNode.asLong(long)
  id: asLong(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asLong(long defaultValue)
  nameWithType: JsonNode.asLong(long defaultValue)
  fullName: com.fasterxml.jackson.databind.JsonNode.asLong(long defaultValue)
  overload: com.fasterxml.jackson.databind.JsonNode.asLong*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will try to convert value of this node to a Java **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation cannot be converted to an long (including structured types like Objects and Arrays), specified **defaultValue** will be returned; no exceptions are thrown.
  syntax:
    content: public long asLong(long defaultValue)
    parameters:
    - id: defaultValue
      type: long
    return:
      type: long
- uid: com.fasterxml.jackson.databind.JsonNode.asText()
  id: asText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asText()
  nameWithType: JsonNode.asText()
  fullName: com.fasterxml.jackson.databind.JsonNode.asText()
  overload: com.fasterxml.jackson.databind.JsonNode.asText*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will return a valid String representation of the container value, if the node is a value node (method <xref uid="com.fasterxml.jackson.databind.JsonNode.isValueNode*" data-throw-if-not-resolved="false">#isValueNode</xref> returns true), otherwise empty String.
  syntax:
    content: public abstract String asText()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
  id: asText(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: asText(String defaultValue)
  nameWithType: JsonNode.asText(String defaultValue)
  fullName: com.fasterxml.jackson.databind.JsonNode.asText(String defaultValue)
  overload: com.fasterxml.jackson.databind.JsonNode.asText*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.asText()" data-throw-if-not-resolved="false">#asText()</xref>, except that it will return `defaultValue` in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.
  syntax:
    content: public String asText(String defaultValue)
    parameters:
    - id: defaultValue
      type: java.lang.String
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
  id: at(com.fasterxml.jackson.core.JsonPointer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: at(JsonPointer ptr)
  nameWithType: JsonNode.at(JsonPointer ptr)
  fullName: com.fasterxml.jackson.databind.JsonNode.at(JsonPointer ptr)
  overload: com.fasterxml.jackson.databind.JsonNode.at*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for locating node specified by given JSON pointer instances. Method will never return null; if no matching node exists, will return a node for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode()" data-throw-if-not-resolved="false">#isMissingNode()</xref> returns true.
  syntax:
    content: public final JsonNode at(JsonPointer ptr)
    parameters:
    - id: ptr
      type: com.fasterxml.jackson.core.JsonPointer
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: >-
        Node that matches given JSON Pointer: if no match exists,
           will return a node for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode()" data-throw-if-not-resolved="false">#isMissingNode()</xref> returns true.
- uid: com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
  id: at(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: at(String jsonPtrExpr)
  nameWithType: JsonNode.at(String jsonPtrExpr)
  fullName: com.fasterxml.jackson.databind.JsonNode.at(String jsonPtrExpr)
  overload: com.fasterxml.jackson.databind.JsonNode.at*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that is functionally equivalent to:


    ```java

    return at(JsonPointer.valueOf(jsonPointerExpression));

    ```


    Note that if the same expression is used often, it is preferable to construct <xref uid="com.fasterxml.jackson.core.JsonPointer" data-throw-if-not-resolved="false">JsonPointer</xref> instance once and reuse it: this method will not perform any caching of compiled expressions.
  syntax:
    content: public final JsonNode at(String jsonPtrExpr)
    parameters:
    - id: jsonPtrExpr
      type: java.lang.String
      description: >-
        Expression to compile as a <xref uid="com.fasterxml.jackson.core.JsonPointer" data-throw-if-not-resolved="false">JsonPointer</xref>
           instance
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: >-
        Node that matches given JSON Pointer: if no match exists,
           will return a node for which <xref uid="com.fasterxml.jackson.core.TreeNode.isMissingNode()" data-throw-if-not-resolved="false">TreeNode#isMissingNode()</xref> returns true.
- uid: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()
  id: bigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: bigIntegerValue()
  nameWithType: JsonNode.bigIntegerValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()
  overload: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns integer value for this node (as <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref>), **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns `BigInteger.ZERO`.
  syntax:
    content: public BigInteger bigIntegerValue()
    return:
      type: java.math.BigInteger
      description: <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> value this node contains, if numeric node; <code>BigInteger.ZERO</code> for non-number nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.binaryValue()
  id: binaryValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: binaryValue()
  nameWithType: JsonNode.binaryValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.binaryValue()
  overload: com.fasterxml.jackson.databind.JsonNode.binaryValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to use for accessing binary content of binary nodes (nodes for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isBinary*" data-throw-if-not-resolved="false">#isBinary</xref> returns true); or for Text Nodes (ones for which <xref uid="com.fasterxml.jackson.databind.JsonNode.textValue*" data-throw-if-not-resolved="false">#textValue</xref> returns non-null value), to read decoded base64 data. For other types of nodes, returns null.
  syntax:
    content: public byte[] binaryValue()
    return:
      type: byte[]
      description: >-
        Binary data this node contains, iff it is a binary
           node; null otherwise
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.JsonNode.booleanValue()
  id: booleanValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: booleanValue()
  nameWithType: JsonNode.booleanValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.booleanValue()
  overload: com.fasterxml.jackson.databind.JsonNode.booleanValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to use for accessing JSON boolean values (value literals 'true' and 'false'). For other types, always returns false.
  syntax:
    content: public boolean booleanValue()
    return:
      type: boolean
      description: >-
        Textual value this node contains, iff it is a textual
           json node (comes from JSON String value entry)
- uid: com.fasterxml.jackson.databind.JsonNode.canConvertToInt()
  id: canConvertToInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: canConvertToInt()
  nameWithType: JsonNode.canConvertToInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.canConvertToInt()
  overload: com.fasterxml.jackson.databind.JsonNode.canConvertToInt*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to check whether this node is a numeric node (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> would return true) AND its value fits within Java's 32-bit signed integer type, `int`. Note that floating-point numbers are convertible if the integral part fits without overflow (as per standard Java coercion rules)


    NOTE: this method does not consider possible value type conversion from JSON String into Number; so even if this method returns false, it is possible that <xref uid="com.fasterxml.jackson.databind.JsonNode.asInt*" data-throw-if-not-resolved="false">#asInt</xref> could still succeed if node is a JSON String representing integral number, or boolean.
  syntax:
    content: public boolean canConvertToInt()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.canConvertToLong()
  id: canConvertToLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: canConvertToLong()
  nameWithType: JsonNode.canConvertToLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.canConvertToLong()
  overload: com.fasterxml.jackson.databind.JsonNode.canConvertToLong*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be used to check whether this node is a numeric node (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> would return true) AND its value fits within Java's 64-bit signed integer type, `long`. Note that floating-point numbers are convertible if the integral part fits without overflow (as per standard Java coercion rules)


    NOTE: this method does not consider possible value type conversion from JSON String into Number; so even if this method returns false, it is possible that <xref uid="com.fasterxml.jackson.databind.JsonNode.asLong*" data-throw-if-not-resolved="false">#asLong</xref> could still succeed if node is a JSON String representing integral number, or boolean.
  syntax:
    content: public boolean canConvertToLong()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.decimalValue()
  id: decimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: decimalValue()
  nameWithType: JsonNode.decimalValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.decimalValue()
  overload: com.fasterxml.jackson.databind.JsonNode.decimalValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns floating point value for this node (as <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref>), **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns `BigDecimal.ZERO`.
  syntax:
    content: public BigDecimal decimalValue()
    return:
      type: java.math.BigDecimal
      description: <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref> value this node contains, if numeric node; <code>BigDecimal.ZERO</code> for non-number nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.doubleValue()
  id: doubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: doubleValue()
  nameWithType: JsonNode.doubleValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.doubleValue()
  overload: com.fasterxml.jackson.databind.JsonNode.doubleValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns 64-bit floating point (double) value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0.0. For integer values, conversion is done using coercion; this may result in overflows with <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> values.
  syntax:
    content: public double doubleValue()
    return:
      type: double
      description: 64-bit double value this node contains, if any; 0.0 for non-number nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.elements()
  id: elements()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: elements()
  nameWithType: JsonNode.elements()
  fullName: com.fasterxml.jackson.databind.JsonNode.elements()
  overload: com.fasterxml.jackson.databind.JsonNode.elements*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing all value nodes of this Node, iff this node is a JSON Array or Object node. In case of Object node, field names (keys) are not included, only values. For other types of nodes, returns empty iterator.
  syntax:
    content: public Iterator<JsonNode> elements()
    return:
      type: java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: equals(Object o)
  nameWithType: JsonNode.equals(Object o)
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(Object o)
  overload: com.fasterxml.jackson.databind.JsonNode.equals*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Equality for node objects is defined as full (deep) value equality. This means that it is possible to compare complete JSON trees for equality by comparing equality of root nodes.


    Note: marked as abstract to ensure all implementation classes define it properly and not rely on definition from <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref>.
  syntax:
    content: public abstract boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  id: equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: equals(Comparator<JsonNode> comparator, JsonNode other)
  nameWithType: JsonNode.equals(Comparator<JsonNode> comparator, JsonNode other)
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(Comparator<JsonNode> comparator, JsonNode other)
  overload: com.fasterxml.jackson.databind.JsonNode.equals*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Entry method for invoking customizable comparison, using passed-in <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> object. Nodes will handle traversal of structured types (arrays, objects), but defer to comparator for scalar value comparisons. If a "natural" <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> is passed -- one that simply calls `equals()` on one of arguments, passing the other -- implementation is the same as directly calling `equals()` on node.


    Default implementation simply delegates to passed in `comparator`, with `this` as the first argument, and `other` as the second argument.
  syntax:
    content: public boolean equals(Comparator<JsonNode> comparator, JsonNode other)
    parameters:
    - id: comparator
      type: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>
      description: "Object called to compare two scalar <xref uid=\"com.fasterxml.jackson.databind.JsonNode\" data-throw-if-not-resolved=\"false\">JsonNode</xref> \n   instances, and return either 0 (are equals) or non-zero (not equal)"
    - id: other
      type: com.fasterxml.jackson.databind.JsonNode
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.fieldNames()
  id: fieldNames()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: fieldNames()
  nameWithType: JsonNode.fieldNames()
  fullName: com.fasterxml.jackson.databind.JsonNode.fieldNames()
  overload: com.fasterxml.jackson.databind.JsonNode.fieldNames*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for accessing names of all fields for this node, iff this node is an Object node. Number of field names accessible will be <xref uid="com.fasterxml.jackson.databind.JsonNode.size*" data-throw-if-not-resolved="false">#size</xref>.
  syntax:
    content: public Iterator<String> fieldNames()
    return:
      type: java.util.Iterator<java.lang.String>
- uid: com.fasterxml.jackson.databind.JsonNode.fields()
  id: fields()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: fields()
  nameWithType: JsonNode.fields()
  fullName: com.fasterxml.jackson.databind.JsonNode.fields()
  overload: com.fasterxml.jackson.databind.JsonNode.fields*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public Iterator<Map.Entry<String,JsonNode>> fields()
    return:
      type: java.util.Iterator<java.util.Map.Entry<java.lang.String,com.fasterxml.jackson.databind.JsonNode>>
      description: >-
        Iterator that can be used to traverse all key/value pairs for
           object nodes; empty iterator (no contents) for other types
- uid: com.fasterxml.jackson.databind.JsonNode.findParent(java.lang.String)
  id: findParent(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findParent(String fieldName)
  nameWithType: JsonNode.findParent(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParent(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.findParent*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for finding a JSON Object that contains specified field, within this node or its descendants. If no matching field is found in this node or its descendants, returns null.
  syntax:
    content: public abstract JsonNode findParent(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
      description: Name of field to look for
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: Value of first matching node found, if any; null if none
- uid: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
  id: findParents(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findParents(String fieldName)
  nameWithType: JsonNode.findParents(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.findParents*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for finding a JSON Object that contains specified field, within this node or its descendants. If no matching field is found in this node or its descendants, returns null.
  syntax:
    content: public final List<JsonNode> findParents(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
      description: Name of field to look for
    return:
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
      description: Value of first matching node found, if any; null if none
- uid: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  id: findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findParents(String fieldName, List<JsonNode> foundSoFar)
  nameWithType: JsonNode.findParents(String fieldName, List<JsonNode> foundSoFar)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents(String fieldName, List<JsonNode> foundSoFar)
  overload: com.fasterxml.jackson.databind.JsonNode.findParents*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public abstract List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: foundSoFar
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
    return:
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.JsonNode.findPath(java.lang.String)
  id: findPath(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findPath(String fieldName)
  nameWithType: JsonNode.findPath(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.findPath(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.findPath*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.findValue*" data-throw-if-not-resolved="false">#findValue</xref>, but that will return a "missing node" instead of null if no field is found. Missing node is a specific kind of node for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode*" data-throw-if-not-resolved="false">#isMissingNode</xref> returns true; and all value access methods return empty or missing value.
  syntax:
    content: public abstract JsonNode findPath(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
      description: Name of field to look for
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: >-
        Value of first matching node found; or if not found, a
            "missing node" (non-null instance that has no value)
- uid: com.fasterxml.jackson.databind.JsonNode.findValue(java.lang.String)
  id: findValue(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findValue(String fieldName)
  nameWithType: JsonNode.findValue(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValue(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.findValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has. If no matching field is found in this node or its descendants, returns null.
  syntax:
    content: public abstract JsonNode findValue(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
      description: Name of field to look for
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: Value of first matching node found, if any; null if none
- uid: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
  id: findValues(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findValues(String fieldName)
  nameWithType: JsonNode.findValues(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.findValues*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method for finding JSON Object fields with specified name, and returning found ones as a List. Note that sub-tree search ends if a field is found, so possible children of result nodes are **not** included. If no matching fields are found in this node or its descendants, returns an empty List.
  syntax:
    content: public final List<JsonNode> findValues(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
      description: Name of field to look for
    return:
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  id: findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findValues(String fieldName, List<JsonNode> foundSoFar)
  nameWithType: JsonNode.findValues(String fieldName, List<JsonNode> foundSoFar)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues(String fieldName, List<JsonNode> foundSoFar)
  overload: com.fasterxml.jackson.databind.JsonNode.findValues*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public abstract List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: foundSoFar
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
    return:
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
  id: findValuesAsText(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findValuesAsText(String fieldName)
  nameWithType: JsonNode.findValuesAsText(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.findValuesAsText*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.findValues*" data-throw-if-not-resolved="false">#findValues</xref>, but will additionally convert values into Strings, calling <xref uid="com.fasterxml.jackson.databind.JsonNode.asText*" data-throw-if-not-resolved="false">#asText</xref>.
  syntax:
    content: public final List<String> findValuesAsText(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: java.util.List<java.lang.String>
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  id: findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: findValuesAsText(String fieldName, List<String> foundSoFar)
  nameWithType: JsonNode.findValuesAsText(String fieldName, List<String> foundSoFar)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(String fieldName, List<String> foundSoFar)
  overload: com.fasterxml.jackson.databind.JsonNode.findValuesAsText*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public abstract List<String> findValuesAsText(String fieldName, List<String> foundSoFar)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: foundSoFar
      type: java.util.List<java.lang.String>
    return:
      type: java.util.List<java.lang.String>
- uid: com.fasterxml.jackson.databind.JsonNode.floatValue()
  id: floatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: floatValue()
  nameWithType: JsonNode.floatValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.floatValue()
  overload: com.fasterxml.jackson.databind.JsonNode.floatValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns 32-bit floating value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0.0. For integer values, conversion is done using coercion; this means that an overflow is possible for \`long\` values
  syntax:
    content: public float floatValue()
    return:
      type: float
      description: 32-bit float value this node contains, if any; 0.0 for non-number nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.get(int)
  id: get(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: get(int index)
  nameWithType: JsonNode.get(int index)
  fullName: com.fasterxml.jackson.databind.JsonNode.get(int index)
  overload: com.fasterxml.jackson.databind.JsonNode.get*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing value of the specified element of an array node. For other nodes, null is always returned.


    For array nodes, index specifies exact location within array and allows for efficient iteration over child elements (underlying storage is guaranteed to be efficiently indexable, i.e. has random-access to elements). If index is less than 0, or equal-or-greater than `node.size()`, null is returned; no exception is thrown for any index.


    NOTE: if the element value has been explicitly set as `null` (which is different from removal!), a <xref uid="com.fasterxml.jackson.databind.node.NullNode" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node.NullNode</xref> will be returned, not null.
  syntax:
    content: public abstract JsonNode get(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: >-
        Node that represent value of the specified element,
           if this node is an array and has specified element.
           Null otherwise.
- uid: com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)
  id: get(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: get(String fieldName)
  nameWithType: JsonNode.get(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.get(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.get*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing value of the specified field of an object node. If this node is not an object (or it does not have a value for specified field name), or if there is no field with such name, null is returned.


    NOTE: if the property value has been explicitly set as `null` (which is different from removal!), a <xref uid="com.fasterxml.jackson.databind.node.NullNode" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node.NullNode</xref> will be returned, not null.
  syntax:
    content: public JsonNode get(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: >-
        Node that represent value of the specified field,
           if this node is an object and has value for the specified
           field. Null otherwise.
- uid: com.fasterxml.jackson.databind.JsonNode.getNodeType()
  id: getNodeType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: getNodeType()
  nameWithType: JsonNode.getNodeType()
  fullName: com.fasterxml.jackson.databind.JsonNode.getNodeType()
  overload: com.fasterxml.jackson.databind.JsonNode.getNodeType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Return the type of this node
  syntax:
    content: public abstract JsonNodeType getNodeType()
    return:
      type: com.fasterxml.jackson.databind.node.JsonNodeType
      description: the node type as a <xref uid="com.fasterxml.jackson.databind.node.JsonNodeType" data-throw-if-not-resolved="false">JsonNodeType</xref> enum value
- uid: com.fasterxml.jackson.databind.JsonNode.has(int)
  id: has(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: has(int index)
  nameWithType: JsonNode.has(int index)
  fullName: com.fasterxml.jackson.databind.JsonNode.has(int index)
  overload: com.fasterxml.jackson.databind.JsonNode.has*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.


    Note: array element indexes are 0-based.


    This method is equivalent to:


    ```java

    node.get(index) != null

    ```


    NOTE: this method will return `true` for explicitly added null values.
  syntax:
    content: public boolean has(int index)
    parameters:
    - id: index
      type: int
      description: Index to check
    return:
      type: boolean
      description: >-
        True if this node is a JSON Object node, and has a property
           entry with specified name (with any value, including null value)
- uid: com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)
  id: has(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: has(String fieldName)
  nameWithType: JsonNode.has(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.has(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.has*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that allows checking whether this node is JSON Object node and contains value for specified property. If this is the case (including properties with explicit null values), returns true; otherwise returns false.


    This method is equivalent to:


    ```java

    node.get(fieldName) != null

    ```


    (since return value of get() is node, not value node contains)


    NOTE: when explicit `null` values are added, this method will return `true` for such properties.
  syntax:
    content: public boolean has(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
      description: Name of element to check
    return:
      type: boolean
      description: >-
        True if this node is a JSON Object node, and has a property
           entry with specified name (with any value, including null value)
- uid: com.fasterxml.jackson.databind.JsonNode.hasNonNull(int)
  id: hasNonNull(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: hasNonNull(int index)
  nameWithType: JsonNode.hasNonNull(int index)
  fullName: com.fasterxml.jackson.databind.JsonNode.hasNonNull(int index)
  overload: com.fasterxml.jackson.databind.JsonNode.hasNonNull*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that is similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.has(int)" data-throw-if-not-resolved="false">#has(int)</xref>, but that will return `false` for explicitly added nulls.


    This method is equivalent to:


    ```java

    node.get(index) != null && !node.get(index).isNull()

    ```
  syntax:
    content: public boolean hasNonNull(int index)
    parameters:
    - id: index
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.hasNonNull(java.lang.String)
  id: hasNonNull(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: hasNonNull(String fieldName)
  nameWithType: JsonNode.hasNonNull(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.hasNonNull(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.hasNonNull*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that is similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)" data-throw-if-not-resolved="false">#has(String)</xref>, but that will return `false` for explicitly added nulls.


    This method is functionally equivalent to:


    ```java

    node.get(fieldName) != null && !node.get(fieldName).isNull()

    ```
  syntax:
    content: public boolean hasNonNull(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.intValue()
  id: intValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: intValue()
  nameWithType: JsonNode.intValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.intValue()
  overload: com.fasterxml.jackson.databind.JsonNode.intValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns integer value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0. For floating-point numbers, value is truncated using default Java coercion, similar to how cast from double to int operates.
  syntax:
    content: public int intValue()
    return:
      type: int
      description: >-
        Integer value this node contains, if any; 0 for non-number
           nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.isArray()
  id: isArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isArray()
  nameWithType: JsonNode.isArray()
  fullName: com.fasterxml.jackson.databind.JsonNode.isArray()
  overload: com.fasterxml.jackson.databind.JsonNode.isArray*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that returns true if this node is an Array node, false otherwise. Note that if true is returned, <xref uid="com.fasterxml.jackson.databind.JsonNode.isContainerNode*" data-throw-if-not-resolved="false">#isContainerNode</xref> must also return true.
  syntax:
    content: public boolean isArray()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  id: isBigDecimal()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isBigDecimal()
  nameWithType: JsonNode.isBigDecimal()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  overload: com.fasterxml.jackson.databind.JsonNode.isBigDecimal*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isBigDecimal()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  id: isBigInteger()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isBigInteger()
  nameWithType: JsonNode.isBigInteger()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  overload: com.fasterxml.jackson.databind.JsonNode.isBigInteger*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isBigInteger()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isBinary()
  id: isBinary()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isBinary()
  nameWithType: JsonNode.isBinary()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBinary()
  overload: com.fasterxml.jackson.databind.JsonNode.isBinary*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check if this node represents binary data (Base64 encoded). Although this will be externally written as JSON String value, <xref uid="com.fasterxml.jackson.databind.JsonNode.isTextual*" data-throw-if-not-resolved="false">#isTextual</xref> will return false if this method returns true.
  syntax:
    content: public final boolean isBinary()
    return:
      type: boolean
      description: True if this node represents base64 encoded binary data
- uid: com.fasterxml.jackson.databind.JsonNode.isBoolean()
  id: isBoolean()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isBoolean()
  nameWithType: JsonNode.isBoolean()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBoolean()
  overload: com.fasterxml.jackson.databind.JsonNode.isBoolean*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check if this node was created from JSON boolean value (literals "true" and "false").
  syntax:
    content: public final boolean isBoolean()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  id: isContainerNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isContainerNode()
  nameWithType: JsonNode.isContainerNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  overload: com.fasterxml.jackson.databind.JsonNode.isContainerNode*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that returns true for container nodes: Arrays and Objects.


    Note: one and only one of methods <xref uid="com.fasterxml.jackson.databind.JsonNode.isValueNode*" data-throw-if-not-resolved="false">#isValueNode</xref>, <xref uid="com.fasterxml.jackson.databind.JsonNode.isContainerNode*" data-throw-if-not-resolved="false">#isContainerNode</xref> and <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode*" data-throw-if-not-resolved="false">#isMissingNode</xref> ever returns true for any given node.
  syntax:
    content: public final boolean isContainerNode()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isDouble()
  id: isDouble()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isDouble()
  nameWithType: JsonNode.isDouble()
  fullName: com.fasterxml.jackson.databind.JsonNode.isDouble()
  overload: com.fasterxml.jackson.databind.JsonNode.isDouble*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isDouble()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isEmpty()
  nameWithType: JsonNode.isEmpty()
  fullName: com.fasterxml.jackson.databind.JsonNode.isEmpty()
  overload: com.fasterxml.jackson.databind.JsonNode.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Convenience method that is functionally same as:


    ```java

    size() == 0

    ```


    for all node types.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isFloat()
  id: isFloat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isFloat()
  nameWithType: JsonNode.isFloat()
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloat()
  overload: com.fasterxml.jackson.databind.JsonNode.isFloat*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isFloat()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  id: isFloatingPointNumber()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isFloatingPointNumber()
  nameWithType: JsonNode.isFloatingPointNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  overload: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isFloatingPointNumber()
    return:
      type: boolean
      description: >-
        True if this node represents a non-integral
           numeric JSON value
- uid: com.fasterxml.jackson.databind.JsonNode.isInt()
  id: isInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isInt()
  nameWithType: JsonNode.isInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.isInt()
  overload: com.fasterxml.jackson.databind.JsonNode.isInt*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check whether contained value is a number represented as Java `int`. Note, however, that even if this method returns false, it is possible that conversion would be possible from other numeric types -- to check if this is possible, use <xref uid="com.fasterxml.jackson.databind.JsonNode.canConvertToInt()" data-throw-if-not-resolved="false">#canConvertToInt()</xref> instead.
  syntax:
    content: public boolean isInt()
    return:
      type: boolean
      description: True if the value contained by this node is stored as Java int
- uid: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  id: isIntegralNumber()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isIntegralNumber()
  nameWithType: JsonNode.isIntegralNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  overload: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public boolean isIntegralNumber()
    return:
      type: boolean
      description: >-
        True if this node represents an integral (integer)
           numeric JSON value
- uid: com.fasterxml.jackson.databind.JsonNode.isLong()
  id: isLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isLong()
  nameWithType: JsonNode.isLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.isLong()
  overload: com.fasterxml.jackson.databind.JsonNode.isLong*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check whether contained value is a number represented as Java `long`. Note, however, that even if this method returns false, it is possible that conversion would be possible from other numeric types -- to check if this is possible, use <xref uid="com.fasterxml.jackson.databind.JsonNode.canConvertToLong()" data-throw-if-not-resolved="false">#canConvertToLong()</xref> instead.
  syntax:
    content: public boolean isLong()
    return:
      type: boolean
      description: True if the value contained by this node is stored as Java <code>long</code>
- uid: com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  id: isMissingNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isMissingNode()
  nameWithType: JsonNode.isMissingNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  overload: com.fasterxml.jackson.databind.JsonNode.isMissingNode*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that returns true for "virtual" nodes which represent missing entries constructed by path accessor methods when there is no actual node matching given criteria.


    Note: one and only one of methods <xref uid="com.fasterxml.jackson.databind.JsonNode.isValueNode*" data-throw-if-not-resolved="false">#isValueNode</xref>, <xref uid="com.fasterxml.jackson.databind.JsonNode.isContainerNode*" data-throw-if-not-resolved="false">#isContainerNode</xref> and <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode*" data-throw-if-not-resolved="false">#isMissingNode</xref> ever returns true for any given node.
  syntax:
    content: public boolean isMissingNode()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isNull()
  id: isNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isNull()
  nameWithType: JsonNode.isNull()
  fullName: com.fasterxml.jackson.databind.JsonNode.isNull()
  overload: com.fasterxml.jackson.databind.JsonNode.isNull*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check if this node was created from JSON literal null value.
  syntax:
    content: public final boolean isNull()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isNumber()
  id: isNumber()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isNumber()
  nameWithType: JsonNode.isNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isNumber()
  overload: com.fasterxml.jackson.databind.JsonNode.isNumber*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public final boolean isNumber()
    return:
      type: boolean
      description: True if this node represents a numeric JSON value
- uid: com.fasterxml.jackson.databind.JsonNode.isObject()
  id: isObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isObject()
  nameWithType: JsonNode.isObject()
  fullName: com.fasterxml.jackson.databind.JsonNode.isObject()
  overload: com.fasterxml.jackson.databind.JsonNode.isObject*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that returns true if this node is an Object node, false otherwise. Note that if true is returned, <xref uid="com.fasterxml.jackson.databind.JsonNode.isContainerNode*" data-throw-if-not-resolved="false">#isContainerNode</xref> must also return true.
  syntax:
    content: public boolean isObject()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isPojo()
  id: isPojo()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isPojo()
  nameWithType: JsonNode.isPojo()
  fullName: com.fasterxml.jackson.databind.JsonNode.isPojo()
  overload: com.fasterxml.jackson.databind.JsonNode.isPojo*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check if the node is a wrapper for a POJO ("Plain Old Java Object" aka "bean". Returns true only for instances of `POJONode`.
  syntax:
    content: public final boolean isPojo()
    return:
      type: boolean
      description: True if this node wraps a POJO
- uid: com.fasterxml.jackson.databind.JsonNode.isShort()
  id: isShort()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isShort()
  nameWithType: JsonNode.isShort()
  fullName: com.fasterxml.jackson.databind.JsonNode.isShort()
  overload: com.fasterxml.jackson.databind.JsonNode.isShort*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be used to check whether contained value is a number represented as Java `short`. Note, however, that even if this method returns false, it is possible that conversion would be possible from other numeric types -- to check if this is possible, use <xref uid="com.fasterxml.jackson.databind.JsonNode.canConvertToInt()" data-throw-if-not-resolved="false">#canConvertToInt()</xref> instead.
  syntax:
    content: public boolean isShort()
    return:
      type: boolean
      description: True if the value contained by this node is stored as Java short
- uid: com.fasterxml.jackson.databind.JsonNode.isTextual()
  id: isTextual()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isTextual()
  nameWithType: JsonNode.isTextual()
  fullName: com.fasterxml.jackson.databind.JsonNode.isTextual()
  overload: com.fasterxml.jackson.databind.JsonNode.isTextual*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that checks whether this node represents basic JSON String value.
  syntax:
    content: public final boolean isTextual()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isValueNode()
  id: isValueNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: isValueNode()
  nameWithType: JsonNode.isValueNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isValueNode()
  overload: com.fasterxml.jackson.databind.JsonNode.isValueNode*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that returns true for all value nodes: ones that are not containers, and that do not represent "missing" nodes in the path. Such value nodes represent String, Number, Boolean and null values from JSON.


    Note: one and only one of methods <xref uid="com.fasterxml.jackson.databind.JsonNode.isValueNode*" data-throw-if-not-resolved="false">#isValueNode</xref>, <xref uid="com.fasterxml.jackson.databind.JsonNode.isContainerNode*" data-throw-if-not-resolved="false">#isContainerNode</xref> and <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode*" data-throw-if-not-resolved="false">#isMissingNode</xref> ever returns true for any given node.
  syntax:
    content: public final boolean isValueNode()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.iterator()
  id: iterator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: iterator()
  nameWithType: JsonNode.iterator()
  fullName: com.fasterxml.jackson.databind.JsonNode.iterator()
  overload: com.fasterxml.jackson.databind.JsonNode.iterator*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Same as calling <xref uid="com.fasterxml.jackson.databind.JsonNode.elements*" data-throw-if-not-resolved="false">#elements</xref>; implemented so that convenience "for-each" loop can be used for looping over elements of JSON Array constructs.
  syntax:
    content: public final Iterator<JsonNode> iterator()
    return:
      type: java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.JsonNode.longValue()
  id: longValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: longValue()
  nameWithType: JsonNode.longValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.longValue()
  overload: com.fasterxml.jackson.databind.JsonNode.longValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns 64-bit long value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0. For floating-point numbers, value is truncated using default Java coercion, similar to how cast from double to long operates.
  syntax:
    content: public long longValue()
    return:
      type: long
      description: >-
        Long value this node contains, if any; 0 for non-number
           nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.numberValue()
  id: numberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: numberValue()
  nameWithType: JsonNode.numberValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.numberValue()
  overload: com.fasterxml.jackson.databind.JsonNode.numberValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns numeric value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true); otherwise returns null
  syntax:
    content: public Number numberValue()
    return:
      type: java.lang.Number
      description: >-
        Number value this node contains, if any (null for non-number
           nodes).
- uid: com.fasterxml.jackson.databind.JsonNode.path(int)
  id: path(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: path(int index)
  nameWithType: JsonNode.path(int index)
  fullName: com.fasterxml.jackson.databind.JsonNode.path(int index)
  overload: com.fasterxml.jackson.databind.JsonNode.path*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: This method is similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.get(int)" data-throw-if-not-resolved="false">#get(int)</xref>, except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a "missing node" (node that returns true for <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode*" data-throw-if-not-resolved="false">#isMissingNode</xref>) will be returned. This allows for convenient and safe chained access via path calls.
  syntax:
    content: public abstract JsonNode path(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)
  id: path(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: path(String fieldName)
  nameWithType: JsonNode.path(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.path(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.path*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: This method is similar to <xref uid="com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)" data-throw-if-not-resolved="false">#get(String)</xref>, except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a "missing node" (node that returns true for <xref uid="com.fasterxml.jackson.databind.JsonNode.isMissingNode*" data-throw-if-not-resolved="false">#isMissingNode</xref>) will be returned. This allows for convenient and safe chained access via path calls.
  syntax:
    content: public abstract JsonNode path(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.JsonNode.required(int)
  id: required(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: required(int index)
  nameWithType: JsonNode.required(int index)
  fullName: com.fasterxml.jackson.databind.JsonNode.required(int index)
  overload: com.fasterxml.jackson.databind.JsonNode.required*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method is functionally equivalent to `path(index).required()` and can be used to check that this node is an `ArrayNode` (that is, represents JSON Array value) and has value for specified `index` (but note that value may be explicit JSON null value). If this node is Array Node and has value for specified index, `this` is returned to allow chaining; otherwise <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown.
  syntax:
    content: public JsonNode required(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: <code>this</code> node to allow chaining
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: >-
      if this node is not an Array node or if it does not
         have value for specified index
- uid: com.fasterxml.jackson.databind.JsonNode.required(java.lang.String)
  id: required(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: required(String fieldName)
  nameWithType: JsonNode.required(String fieldName)
  fullName: com.fasterxml.jackson.databind.JsonNode.required(String fieldName)
  overload: com.fasterxml.jackson.databind.JsonNode.required*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method is functionally equivalent to `path(fieldName).required()` and can be used to check that this node is an `ObjectNode` (that is, represents JSON Object value) and has value for specified property with key `fieldName` (but note that value may be explicit JSON null value). If this node is Object Node and has value for specified property, `this` is returned to allow chaining; otherwise <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown.
  syntax:
    content: public JsonNode required(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: <code>this</code> node to allow chaining
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: >-
      if this node is not an Object node or if it does not
         have value for specified property
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
  id: requiredAt(com.fasterxml.jackson.core.JsonPointer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: requiredAt(JsonPointer path)
  nameWithType: JsonNode.requiredAt(JsonPointer path)
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt(JsonPointer path)
  overload: com.fasterxml.jackson.databind.JsonNode.requiredAt*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method is functionally equivalent to `at(path).required()` and can be used to check that there is an actual value node at specified <xref uid="com.fasterxml.jackson.core.JsonPointer" data-throw-if-not-resolved="false">JsonPointer</xref> starting from `this` node (but note that value may be explicit JSON null value). If such value node exists `this` is returned to allow chaining; otherwise <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown.
  syntax:
    content: public final JsonNode requiredAt(JsonPointer path)
    parameters:
    - id: path
      type: com.fasterxml.jackson.core.JsonPointer
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: <code>this</code> node to allow chaining
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: if no value node exists at given <code>JSON Pointer</code> path
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
  id: requiredAt(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: requiredAt(String pathExpr)
  nameWithType: JsonNode.requiredAt(String pathExpr)
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt(String pathExpr)
  overload: com.fasterxml.jackson.databind.JsonNode.requiredAt*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method is functionally equivalent to `at(pathExpr).required()` and can be used to check that there is an actual value node at specified <xref uid="com.fasterxml.jackson.core.JsonPointer" data-throw-if-not-resolved="false">JsonPointer</xref> starting from `this` node (but note that value may be explicit JSON null value). If such value node exists `this` is returned to allow chaining; otherwise <xref uid="java.lang.IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown.
  syntax:
    content: public JsonNode requiredAt(String pathExpr)
    parameters:
    - id: pathExpr
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
      description: <code>this</code> node to allow chaining
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: if no value node exists at given <code>JSON Pointer</code> path
- uid: com.fasterxml.jackson.databind.JsonNode.shortValue()
  id: shortValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: shortValue()
  nameWithType: JsonNode.shortValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.shortValue()
  overload: com.fasterxml.jackson.databind.JsonNode.shortValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns 16-bit short value for this node, **if and only if** this node is numeric (<xref uid="com.fasterxml.jackson.databind.JsonNode.isNumber*" data-throw-if-not-resolved="false">#isNumber</xref> returns true). For other types returns 0. For floating-point numbers, value is truncated using default Java coercion, similar to how cast from double to short operates.
  syntax:
    content: public short shortValue()
    return:
      type: short
      description: >-
        Short value this node contains, if any; 0 for non-number
           nodes.
- uid: com.fasterxml.jackson.databind.JsonNode.size()
  id: size()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: size()
  nameWithType: JsonNode.size()
  fullName: com.fasterxml.jackson.databind.JsonNode.size()
  overload: com.fasterxml.jackson.databind.JsonNode.size*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: 'Method that returns number of child nodes this node contains: for Array nodes, number of child elements, for Object nodes, number of fields, and for all other nodes 0.'
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.JsonNode.textValue()
  id: textValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: textValue()
  nameWithType: JsonNode.textValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.textValue()
  overload: com.fasterxml.jackson.databind.JsonNode.textValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method to use for accessing String values. Does **NOT** do any conversions for non-String value nodes; for non-String values (ones for which <xref uid="com.fasterxml.jackson.databind.JsonNode.isTextual*" data-throw-if-not-resolved="false">#isTextual</xref> returns false) null will be returned. For String values, null is never returned (but empty Strings may be)
  syntax:
    content: public String textValue()
    return:
      type: java.lang.String
      description: >-
        Textual value this node contains, iff it is a textual
           JSON node (comes from JSON String value entry)
- uid: com.fasterxml.jackson.databind.JsonNode.toPrettyString()
  id: toPrettyString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: toPrettyString()
  nameWithType: JsonNode.toPrettyString()
  fullName: com.fasterxml.jackson.databind.JsonNode.toPrettyString()
  overload: com.fasterxml.jackson.databind.JsonNode.toPrettyString*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Alternative to <xref uid="com.fasterxml.jackson.databind.JsonNode.toString*" data-throw-if-not-resolved="false">#toString</xref> that will serialize this node using Jackson default pretty-printer.
  syntax:
    content: public String toPrettyString()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.JsonNode.toString()
  id: toString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonNode
  langs:
  - java
  name: toString()
  nameWithType: JsonNode.toString()
  fullName: com.fasterxml.jackson.databind.JsonNode.toString()
  overload: com.fasterxml.jackson.databind.JsonNode.toString*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will produce (as of Jackson 2.10) valid JSON using default settings of databind, as String. If you want other kinds of JSON output (or output formatted using one of other Jackson-supported data formats) make sure to use <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> or <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> to serialize an instance, for example:


    ```java

    String json = objectMapper.writeValueAsString(rootNode);

    ```


    Note: method defined as abstract to ensure all implementation classes explicitly implement method, instead of relying on <xref uid="java.lang.Object.toString()" data-throw-if-not-resolved="false">Object#toString()</xref> definition.
  syntax:
    content: public abstract String toString()
    return:
      type: java.lang.String
references:
- uid: com.fasterxml.jackson.databind.JsonNode.JsonNode*
  name: JsonNode
  nameWithType: JsonNode.JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode.JsonNode
  package: com.fasterxml.jackson.databind
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.JsonNode.deepCopy*
  name: <T>deepCopy
  nameWithType: JsonNode.<T>deepCopy
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>deepCopy
  package: com.fasterxml.jackson.databind
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.JsonNode.size*
  name: size
  nameWithType: JsonNode.size
  fullName: com.fasterxml.jackson.databind.JsonNode.size
  package: com.fasterxml.jackson.databind
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.JsonNode.isEmpty*
  name: isEmpty
  nameWithType: JsonNode.isEmpty
  fullName: com.fasterxml.jackson.databind.JsonNode.isEmpty
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isValueNode*
  name: isValueNode
  nameWithType: JsonNode.isValueNode
  fullName: com.fasterxml.jackson.databind.JsonNode.isValueNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isContainerNode*
  name: isContainerNode
  nameWithType: JsonNode.isContainerNode
  fullName: com.fasterxml.jackson.databind.JsonNode.isContainerNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isMissingNode*
  name: isMissingNode
  nameWithType: JsonNode.isMissingNode
  fullName: com.fasterxml.jackson.databind.JsonNode.isMissingNode
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isArray*
  name: isArray
  nameWithType: JsonNode.isArray
  fullName: com.fasterxml.jackson.databind.JsonNode.isArray
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isObject*
  name: isObject
  nameWithType: JsonNode.isObject
  fullName: com.fasterxml.jackson.databind.JsonNode.isObject
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.get*
  name: get
  nameWithType: JsonNode.get
  fullName: com.fasterxml.jackson.databind.JsonNode.get
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.JsonNode.path*
  name: path
  nameWithType: JsonNode.path
  fullName: com.fasterxml.jackson.databind.JsonNode.path
  package: com.fasterxml.jackson.databind
- uid: java.util.Iterator<java.lang.String>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonNode.fieldNames*
  name: fieldNames
  nameWithType: JsonNode.fieldNames
  fullName: com.fasterxml.jackson.databind.JsonNode.fieldNames
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.core.JsonPointer
  name: JsonPointer
  nameWithType: JsonPointer
  fullName: com.fasterxml.jackson.core.JsonPointer
- uid: com.fasterxml.jackson.databind.JsonNode.at*
  name: at
  nameWithType: JsonNode.at
  fullName: com.fasterxml.jackson.databind.JsonNode.at
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode._at*
  name: _at
  nameWithType: JsonNode._at
  fullName: com.fasterxml.jackson.databind.JsonNode._at
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.node.JsonNodeType
  name: JsonNodeType
  nameWithType: JsonNodeType
  fullName: com.fasterxml.jackson.databind.node.JsonNodeType
- uid: com.fasterxml.jackson.databind.JsonNode.getNodeType*
  name: getNodeType
  nameWithType: JsonNode.getNodeType
  fullName: com.fasterxml.jackson.databind.JsonNode.getNodeType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isPojo*
  name: isPojo
  nameWithType: JsonNode.isPojo
  fullName: com.fasterxml.jackson.databind.JsonNode.isPojo
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isNumber*
  name: isNumber
  nameWithType: JsonNode.isNumber
  fullName: com.fasterxml.jackson.databind.JsonNode.isNumber
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber*
  name: isIntegralNumber
  nameWithType: JsonNode.isIntegralNumber
  fullName: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber*
  name: isFloatingPointNumber
  nameWithType: JsonNode.isFloatingPointNumber
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isShort*
  name: isShort
  nameWithType: JsonNode.isShort
  fullName: com.fasterxml.jackson.databind.JsonNode.isShort
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isInt*
  name: isInt
  nameWithType: JsonNode.isInt
  fullName: com.fasterxml.jackson.databind.JsonNode.isInt
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isLong*
  name: isLong
  nameWithType: JsonNode.isLong
  fullName: com.fasterxml.jackson.databind.JsonNode.isLong
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isFloat*
  name: isFloat
  nameWithType: JsonNode.isFloat
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloat
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isDouble*
  name: isDouble
  nameWithType: JsonNode.isDouble
  fullName: com.fasterxml.jackson.databind.JsonNode.isDouble
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isBigDecimal*
  name: isBigDecimal
  nameWithType: JsonNode.isBigDecimal
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigDecimal
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isBigInteger*
  name: isBigInteger
  nameWithType: JsonNode.isBigInteger
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigInteger
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isTextual*
  name: isTextual
  nameWithType: JsonNode.isTextual
  fullName: com.fasterxml.jackson.databind.JsonNode.isTextual
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isBoolean*
  name: isBoolean
  nameWithType: JsonNode.isBoolean
  fullName: com.fasterxml.jackson.databind.JsonNode.isBoolean
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isNull*
  name: isNull
  nameWithType: JsonNode.isNull
  fullName: com.fasterxml.jackson.databind.JsonNode.isNull
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.isBinary*
  name: isBinary
  nameWithType: JsonNode.isBinary
  fullName: com.fasterxml.jackson.databind.JsonNode.isBinary
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.canConvertToInt*
  name: canConvertToInt
  nameWithType: JsonNode.canConvertToInt
  fullName: com.fasterxml.jackson.databind.JsonNode.canConvertToInt
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.canConvertToLong*
  name: canConvertToLong
  nameWithType: JsonNode.canConvertToLong
  fullName: com.fasterxml.jackson.databind.JsonNode.canConvertToLong
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.textValue*
  name: textValue
  nameWithType: JsonNode.textValue
  fullName: com.fasterxml.jackson.databind.JsonNode.textValue
  package: com.fasterxml.jackson.databind
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.JsonNode.binaryValue*
  name: binaryValue
  nameWithType: JsonNode.binaryValue
  fullName: com.fasterxml.jackson.databind.JsonNode.binaryValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.booleanValue*
  name: booleanValue
  nameWithType: JsonNode.booleanValue
  fullName: com.fasterxml.jackson.databind.JsonNode.booleanValue
  package: com.fasterxml.jackson.databind
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.databind.JsonNode.numberValue*
  name: numberValue
  nameWithType: JsonNode.numberValue
  fullName: com.fasterxml.jackson.databind.JsonNode.numberValue
  package: com.fasterxml.jackson.databind
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.databind.JsonNode.shortValue*
  name: shortValue
  nameWithType: JsonNode.shortValue
  fullName: com.fasterxml.jackson.databind.JsonNode.shortValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.intValue*
  name: intValue
  nameWithType: JsonNode.intValue
  fullName: com.fasterxml.jackson.databind.JsonNode.intValue
  package: com.fasterxml.jackson.databind
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.databind.JsonNode.longValue*
  name: longValue
  nameWithType: JsonNode.longValue
  fullName: com.fasterxml.jackson.databind.JsonNode.longValue
  package: com.fasterxml.jackson.databind
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.databind.JsonNode.floatValue*
  name: floatValue
  nameWithType: JsonNode.floatValue
  fullName: com.fasterxml.jackson.databind.JsonNode.floatValue
  package: com.fasterxml.jackson.databind
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.databind.JsonNode.doubleValue*
  name: doubleValue
  nameWithType: JsonNode.doubleValue
  fullName: com.fasterxml.jackson.databind.JsonNode.doubleValue
  package: com.fasterxml.jackson.databind
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.JsonNode.decimalValue*
  name: decimalValue
  nameWithType: JsonNode.decimalValue
  fullName: com.fasterxml.jackson.databind.JsonNode.decimalValue
  package: com.fasterxml.jackson.databind
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue*
  name: bigIntegerValue
  nameWithType: JsonNode.bigIntegerValue
  fullName: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.asText*
  name: asText
  nameWithType: JsonNode.asText
  fullName: com.fasterxml.jackson.databind.JsonNode.asText
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.asInt*
  name: asInt
  nameWithType: JsonNode.asInt
  fullName: com.fasterxml.jackson.databind.JsonNode.asInt
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.asLong*
  name: asLong
  nameWithType: JsonNode.asLong
  fullName: com.fasterxml.jackson.databind.JsonNode.asLong
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.asDouble*
  name: asDouble
  nameWithType: JsonNode.asDouble
  fullName: com.fasterxml.jackson.databind.JsonNode.asDouble
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean*
  name: asBoolean
  nameWithType: JsonNode.asBoolean
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean
  package: com.fasterxml.jackson.databind
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.JsonNode.require*
  name: <T>require
  nameWithType: JsonNode.<T>require
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>require
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.requireNonNull*
  name: <T>requireNonNull
  nameWithType: JsonNode.<T>requireNonNull
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.required*
  name: required
  nameWithType: JsonNode.required
  fullName: com.fasterxml.jackson.databind.JsonNode.required
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt*
  name: requiredAt
  nameWithType: JsonNode.requiredAt
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.has*
  name: has
  nameWithType: JsonNode.has
  fullName: com.fasterxml.jackson.databind.JsonNode.has
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.hasNonNull*
  name: hasNonNull
  nameWithType: JsonNode.hasNonNull
  fullName: com.fasterxml.jackson.databind.JsonNode.hasNonNull
  package: com.fasterxml.jackson.databind
- uid: java.util.Iterator<com.fasterxml.jackson.databind.JsonNode>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.JsonNode
    name: JsonNode
    fullName: com.fasterxml.jackson.databind.JsonNode
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonNode.iterator*
  name: iterator
  nameWithType: JsonNode.iterator
  fullName: com.fasterxml.jackson.databind.JsonNode.iterator
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.elements*
  name: elements
  nameWithType: JsonNode.elements
  fullName: com.fasterxml.jackson.databind.JsonNode.elements
  package: com.fasterxml.jackson.databind
- uid: java.util.Iterator<java.util.Map.Entry<java.lang.String,com.fasterxml.jackson.databind.JsonNode>>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.JsonNode
    name: JsonNode
    fullName: com.fasterxml.jackson.databind.JsonNode
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonNode.fields*
  name: fields
  nameWithType: JsonNode.fields
  fullName: com.fasterxml.jackson.databind.JsonNode.fields
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.findValue*
  name: findValue
  nameWithType: JsonNode.findValue
  fullName: com.fasterxml.jackson.databind.JsonNode.findValue
  package: com.fasterxml.jackson.databind
- uid: java.util.List<com.fasterxml.jackson.databind.JsonNode>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.JsonNode
    name: JsonNode
    fullName: com.fasterxml.jackson.databind.JsonNode
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonNode.findValues*
  name: findValues
  nameWithType: JsonNode.findValues
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues
  package: com.fasterxml.jackson.databind
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText*
  name: findValuesAsText
  nameWithType: JsonNode.findValuesAsText
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.findPath*
  name: findPath
  nameWithType: JsonNode.findPath
  fullName: com.fasterxml.jackson.databind.JsonNode.findPath
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.findParent*
  name: findParent
  nameWithType: JsonNode.findParent
  fullName: com.fasterxml.jackson.databind.JsonNode.findParent
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.findParents*
  name: findParents
  nameWithType: JsonNode.findParents
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.with*
  name: <T>with
  nameWithType: JsonNode.<T>with
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>with
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.withArray*
  name: <T>withArray
  nameWithType: JsonNode.<T>withArray
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>withArray
  package: com.fasterxml.jackson.databind
- uid: java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.JsonNode
    name: JsonNode
    fullName: com.fasterxml.jackson.databind.JsonNode
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonNode.equals*
  name: equals
  nameWithType: JsonNode.equals
  fullName: com.fasterxml.jackson.databind.JsonNode.equals
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.toString*
  name: toString
  nameWithType: JsonNode.toString
  fullName: com.fasterxml.jackson.databind.JsonNode.toString
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonNode.toPrettyString*
  name: toPrettyString
  nameWithType: JsonNode.toPrettyString
  fullName: com.fasterxml.jackson.databind.JsonNode.toPrettyString
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.JsonNode._this*
  name: <T>_this
  nameWithType: JsonNode.<T>_this
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_this
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.JsonNode._reportRequiredViolation*
  name: <T>_reportRequiredViolation
  nameWithType: JsonNode.<T>_reportRequiredViolation
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonSerializable.Base
  name: JsonSerializable.Base
  nameWithType: JsonSerializable.Base
  fullName: com.fasterxml.jackson.databind.JsonSerializable.Base
- uid: com.fasterxml.jackson.core.TreeNode
  name: TreeNode
  nameWithType: TreeNode
  fullName: com.fasterxml.jackson.core.TreeNode
- uid: java.lang.Iterable<com.fasterxml.jackson.databind.JsonNode>
  name: Iterable<JsonNode>
  nameWithType: Iterable<JsonNode>
  fullName: java.lang.Iterable<com.fasterxml.jackson.databind.JsonNode>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
  name: JsonSerializable.Base.isEmpty(SerializerProvider)
  nameWithType: JsonSerializable.Base.isEmpty(SerializerProvider)
  fullName: com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: java.lang.String,com.fasterxml.jackson.databind.JsonNode
  name: String,JsonNode
  nameWithType: String,JsonNode
  fullName: java.lang.String,com.fasterxml.jackson.databind.JsonNode
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
