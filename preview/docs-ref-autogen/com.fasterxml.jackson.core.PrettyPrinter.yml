### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.PrettyPrinter
  id: PrettyPrinter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR
  - com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_SEPARATORS
  - com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)
  - com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)
  - com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)
  langs:
  - java
  name: PrettyPrinter
  nameWithType: PrettyPrinter
  fullName: com.fasterxml.jackson.core.PrettyPrinter
  type: Interface
  package: com.fasterxml.jackson.core
  summary: >-
    Interface for objects that implement pretty printer functionality, such as indentation. Pretty printers are used to add white space in output JSON content, to make results more human readable. Usually this means things like adding linefeeds and indentation.


    Note: since Jackson 2.1, stateful implementations MUST implement <xref uid="com.fasterxml.jackson.core.util.Instantiatable" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.util.Instantiatable</xref> interface, to allow for constructing per-generation instances and avoid state corruption. Stateless implementations need not do this; but those are less common.
  syntax:
    content: public interface PrettyPrinter
- uid: com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR
  id: DEFAULT_ROOT_VALUE_SEPARATOR
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: DEFAULT_ROOT_VALUE_SEPARATOR
  nameWithType: PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR
  fullName: com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR
  type: Field
  package: com.fasterxml.jackson.core
  summary: Default String used for separating root values is single space.
  syntax:
    content: public static final SerializedString DEFAULT_ROOT_VALUE_SEPARATOR
    return:
      type: com.fasterxml.jackson.core.io.SerializedString
- uid: com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_SEPARATORS
  id: DEFAULT_SEPARATORS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: DEFAULT_SEPARATORS
  nameWithType: PrettyPrinter.DEFAULT_SEPARATORS
  fullName: com.fasterxml.jackson.core.PrettyPrinter.DEFAULT_SEPARATORS
  type: Field
  package: com.fasterxml.jackson.core
  syntax:
    content: public static final Separators DEFAULT_SEPARATORS
    return:
      type: com.fasterxml.jackson.core.util.Separators
- uid: com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)
  id: beforeArrayValues(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: beforeArrayValues(JsonGenerator gen)
  nameWithType: PrettyPrinter.beforeArrayValues(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after array start marker has been output, and right before the first value is to be output. It is **not** called for arrays with no values.


    Default handling does not output anything, but pretty-printer is free to add any white space decoration.
  syntax:
    content: public abstract void beforeArrayValues(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)
  id: beforeObjectEntries(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: beforeObjectEntries(JsonGenerator gen)
  nameWithType: PrettyPrinter.beforeObjectEntries(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after object start marker has been output, and right before the field name of the first entry is to be output. It is **not** called for objects without entries.


    Default handling does not output anything, but pretty-printer is free to add any white space decoration.
  syntax:
    content: public abstract void beforeObjectEntries(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  id: writeArrayValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeArrayValueSeparator(JsonGenerator gen)
  nameWithType: PrettyPrinter.writeArrayValueSeparator(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after an array value has been completely output, and before another value is to be output.


    Default handling (without pretty-printing) will output a single comma to separate the two. Pretty-printer is to output a comma as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeArrayValueSeparator(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)
  id: writeEndArray(com.fasterxml.jackson.core.JsonGenerator,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeEndArray(JsonGenerator gen, int nrOfValues)
  nameWithType: PrettyPrinter.writeEndArray(JsonGenerator gen, int nrOfValues)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeEndArray(JsonGenerator gen, int nrOfValues)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeEndArray*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after an Array value has been completely output (minus closing bracket).


    Default handling (without pretty-printing) will output the closing bracket. Pretty-printer is to output a bracket as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeEndArray(JsonGenerator gen, int nrOfValues)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: nrOfValues
      type: int
      description: >-
        Number of direct members of the array that
           have been output
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)
  id: writeEndObject(com.fasterxml.jackson.core.JsonGenerator,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeEndObject(JsonGenerator gen, int nrOfEntries)
  nameWithType: PrettyPrinter.writeEndObject(JsonGenerator gen, int nrOfEntries)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeEndObject(JsonGenerator gen, int nrOfEntries)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeEndObject*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after an Object value has been completely output (minus closing curly bracket).


    Default handling (without pretty-printing) will output the closing curly bracket. Pretty-printer is to output a curly bracket as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeEndObject(JsonGenerator gen, int nrOfEntries)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: nrOfEntries
      type: int
      description: >-
        Number of direct members of the array that
           have been output
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)
  id: writeObjectEntrySeparator(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeObjectEntrySeparator(JsonGenerator gen)
  nameWithType: PrettyPrinter.writeObjectEntrySeparator(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after an object entry (field:value) has been completely output, and before another value is to be output.


    Default handling (without pretty-printing) will output a single comma to separate the two. Pretty-printer is to output a comma as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeObjectEntrySeparator(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  id: writeObjectFieldValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeObjectFieldValueSeparator(JsonGenerator gen)
  nameWithType: PrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after an object field has been output, but before the value is output.


    Default handling (without pretty-printing) will output a single colon to separate the two. Pretty-printer is to output a colon as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeObjectFieldValueSeparator(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  id: writeRootValueSeparator(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeRootValueSeparator(JsonGenerator gen)
  nameWithType: PrettyPrinter.writeRootValueSeparator(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called after a root-level value has been completely output, and before another value is to be output.


    Default handling (without pretty-printing) will output a space, to allow values to be parsed correctly. Pretty-printer is to output some other suitable and nice-looking separator (tab(s), space(s), linefeed(s) or any combination thereof).
  syntax:
    content: public abstract void writeRootValueSeparator(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(com.fasterxml.jackson.core.JsonGenerator)
  id: writeStartArray(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeStartArray(JsonGenerator gen)
  nameWithType: PrettyPrinter.writeStartArray(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeStartArray(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called when an Array value is to be output, before any member/child values are output.


    Default handling (without pretty-printing) will output the opening bracket. Pretty-printer is to output a bracket as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeStartArray(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(com.fasterxml.jackson.core.JsonGenerator)
  id: writeStartObject(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.PrettyPrinter
  langs:
  - java
  name: writeStartObject(JsonGenerator gen)
  nameWithType: PrettyPrinter.writeStartObject(JsonGenerator gen)
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeStartObject(JsonGenerator gen)
  overload: com.fasterxml.jackson.core.PrettyPrinter.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method called when an Object value is to be output, before any fields are output.


    Default handling (without pretty-printing) will output the opening curly bracket. Pretty-printer is to output a curly bracket as well, but can surround that with other (white-space) decoration.
  syntax:
    content: public abstract void writeStartObject(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
references:
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator*
  name: writeRootValueSeparator
  nameWithType: PrettyPrinter.writeRootValueSeparator
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeRootValueSeparator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeStartObject*
  name: writeStartObject
  nameWithType: PrettyPrinter.writeStartObject
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeStartObject
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeEndObject*
  name: writeEndObject
  nameWithType: PrettyPrinter.writeEndObject
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeEndObject
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator*
  name: writeObjectEntrySeparator
  nameWithType: PrettyPrinter.writeObjectEntrySeparator
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeObjectEntrySeparator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator*
  name: writeObjectFieldValueSeparator
  nameWithType: PrettyPrinter.writeObjectFieldValueSeparator
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeObjectFieldValueSeparator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeStartArray*
  name: writeStartArray
  nameWithType: PrettyPrinter.writeStartArray
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeStartArray
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeEndArray*
  name: writeEndArray
  nameWithType: PrettyPrinter.writeEndArray
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeEndArray
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator*
  name: writeArrayValueSeparator
  nameWithType: PrettyPrinter.writeArrayValueSeparator
  fullName: com.fasterxml.jackson.core.PrettyPrinter.writeArrayValueSeparator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues*
  name: beforeArrayValues
  nameWithType: PrettyPrinter.beforeArrayValues
  fullName: com.fasterxml.jackson.core.PrettyPrinter.beforeArrayValues
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries*
  name: beforeObjectEntries
  nameWithType: PrettyPrinter.beforeObjectEntries
  fullName: com.fasterxml.jackson.core.PrettyPrinter.beforeObjectEntries
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.util.Separators
  name: Separators
  nameWithType: Separators
  fullName: com.fasterxml.jackson.core.util.Separators
- uid: com.fasterxml.jackson.core.io.SerializedString
  name: SerializedString
  nameWithType: SerializedString
  fullName: com.fasterxml.jackson.core.io.SerializedString
