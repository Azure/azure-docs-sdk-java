### YamlMime:JavaType
uid: "com.azure.maps.weather.WeatherClient"
fullName: "com.azure.maps.weather.WeatherClient"
name: "WeatherClient"
nameWithType: "WeatherClient"
summary: "Initializes a new instance of the synchronous Weather<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **WeatherClient**"
methods:
- uid: "com.azure.maps.weather.WeatherClient.getAirQualityDailyForecasts(com.azure.core.models.GeoPosition,java.lang.String,com.azure.maps.weather.models.DailyDuration)"
  fullName: "com.azure.maps.weather.WeatherClient.getAirQualityDailyForecasts(GeoPosition position, String language, DailyDuration duration)"
  name: "getAirQualityDailyForecasts(GeoPosition position, String language, DailyDuration duration)"
  nameWithType: "WeatherClient.getAirQualityDailyForecasts(GeoPosition position, String language, DailyDuration duration)"
  summary: "\\*\\*Get Air Quality Daily Forecasts\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies for how many days from now we would like to know about the air quality. Available\n     values are 1, 2, 3, 4, 5, 6, and 7. Default value is 1."
    name: "duration"
    type: "<xref href=\"com.azure.maps.weather.models.DailyDuration?alt=com.azure.maps.weather.models.DailyDuration&text=DailyDuration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DailyAirQualityForecastResult getAirQualityDailyForecasts(GeoPosition position, String language, DailyDuration duration)"
  desc: "\\*\\*Get Air Quality Daily Forecasts\\*\\*\n\n```java\nclient.getAirQualityDailyForecasts(\n     new GeoPosition(-122.138874, 47.632346), \"en\", DailyDuration.TWO_DAYS);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet detailed information about the concentration of pollutants and overall status of forecasted daily air quality. The service can provide forecasted daily air quality information for the upcoming 1 to 7 days. Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement summarizing risk level and suggested precautions."
  returns:
    description: "this object is returned from a successful Get Daily Air Quality Forecast call."
    type: "<xref href=\"com.azure.maps.weather.models.DailyAirQualityForecastResult?alt=com.azure.maps.weather.models.DailyAirQualityForecastResult&text=DailyAirQualityForecastResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getAirQualityDailyForecastsWithResponse(com.azure.core.models.GeoPosition,java.lang.String,com.azure.maps.weather.models.DailyDuration,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getAirQualityDailyForecastsWithResponse(GeoPosition position, String language, DailyDuration duration, Context context)"
  name: "getAirQualityDailyForecastsWithResponse(GeoPosition position, String language, DailyDuration duration, Context context)"
  nameWithType: "WeatherClient.getAirQualityDailyForecastsWithResponse(GeoPosition position, String language, DailyDuration duration, Context context)"
  summary: "\\*\\*Get Air Quality Daily Forecasts\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies for how many days from now we would like to know about the air quality. Available\n     values are 1, 2, 3, 4, 5, 6, and 7. Default value is 1."
    name: "duration"
    type: "<xref href=\"com.azure.maps.weather.models.DailyDuration?alt=com.azure.maps.weather.models.DailyDuration&text=DailyDuration\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DailyAirQualityForecastResult> getAirQualityDailyForecastsWithResponse(GeoPosition position, String language, DailyDuration duration, Context context)"
  desc: "\\*\\*Get Air Quality Daily Forecasts\\*\\*\n\n```java\nclient.getAirQualityDailyForecasts(\n     new GeoPosition(-122.138874, 47.632346), \"en\", DailyDuration.TWO_DAYS);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet detailed information about the concentration of pollutants and overall status of forecasted daily air quality. The service can provide forecasted daily air quality information for the upcoming 1 to 7 days. Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement summarizing risk level and suggested precautions."
  returns:
    description: "this object is returned from a successful Get Daily Air Quality Forecast call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.DailyAirQualityForecastResult?alt=com.azure.maps.weather.models.DailyAirQualityForecastResult&text=DailyAirQualityForecastResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getAirQualityHourlyForecasts(com.azure.core.models.GeoPosition,java.lang.String,com.azure.maps.weather.models.HourlyDuration,java.lang.Boolean)"
  fullName: "com.azure.maps.weather.WeatherClient.getAirQualityHourlyForecasts(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails)"
  name: "getAirQualityHourlyForecasts(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails)"
  nameWithType: "WeatherClient.getAirQualityHourlyForecasts(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails)"
  summary: "\\*\\*Get Air Quality Hourly Forecasts\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies for how many hours from now we would like to know about the air quality. Available\n     values are 1, 12, 24, 48, 72, 96. Default value is 1 hour."
    name: "duration"
    type: "<xref href=\"com.azure.maps.weather.models.HourlyDuration?alt=com.azure.maps.weather.models.HourlyDuration&text=HourlyDuration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Boolean value that returns detailed information about each pollutant. By default\n     is True."
    name: "includePollutantDetails"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public AirQualityResult getAirQualityHourlyForecasts(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails)"
  desc: "\\*\\*Get Air Quality Hourly Forecasts\\*\\*\n\n```java\nclient.getAirQualityHourlyForecasts(\n     new GeoPosition(-122.138874, 47.632346), \"fr\", HourlyDuration.ONE_HOUR, false);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet detailed information about the concentration of pollutants and overall status for forecasted upcoming hourly air quality. The service can provide forecasted hourly air quality information for the upcoming time spans of 1, 12, 24, 48, 72, and 96 hours. Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement summarizing risk level and suggested precautions."
  returns:
    description: "this object is returned from a successful Get Air Quality call."
    type: "<xref href=\"com.azure.maps.weather.models.AirQualityResult?alt=com.azure.maps.weather.models.AirQualityResult&text=AirQualityResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getAirQualityHourlyForecastsWithResponse(com.azure.core.models.GeoPosition,java.lang.String,com.azure.maps.weather.models.HourlyDuration,java.lang.Boolean,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getAirQualityHourlyForecastsWithResponse(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails, Context context)"
  name: "getAirQualityHourlyForecastsWithResponse(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails, Context context)"
  nameWithType: "WeatherClient.getAirQualityHourlyForecastsWithResponse(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails, Context context)"
  summary: "\\*\\*Get Air Quality Hourly Forecasts\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies for how many hours from now we would like to know about the air quality. Available\n     values are 1, 12, 24, 48, 72, 96. Default value is 1 hour."
    name: "duration"
    type: "<xref href=\"com.azure.maps.weather.models.HourlyDuration?alt=com.azure.maps.weather.models.HourlyDuration&text=HourlyDuration\" data-throw-if-not-resolved=\"False\" />"
  - description: "Boolean value that returns detailed information about each pollutant. By default\n     is True."
    name: "includePollutantDetails"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AirQualityResult> getAirQualityHourlyForecastsWithResponse(GeoPosition position, String language, HourlyDuration duration, Boolean includePollutantDetails, Context context)"
  desc: "\\*\\*Get Air Quality Hourly Forecasts\\*\\*\n\n```java\nclient.getAirQualityHourlyForecasts(\n     new GeoPosition(-122.138874, 47.632346), \"fr\", HourlyDuration.ONE_HOUR, false);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet detailed information about the concentration of pollutants and overall status for forecasted upcoming hourly air quality. The service can provide forecasted hourly air quality information for the upcoming time spans of 1, 12, 24, 48, 72, and 96 hours. Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement summarizing risk level and suggested precautions."
  returns:
    description: "this object is returned from a successful Get Air Quality call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.AirQualityResult?alt=com.azure.maps.weather.models.AirQualityResult&text=AirQualityResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getCurrentAirQuality(com.azure.core.models.GeoPosition,java.lang.String,java.lang.Boolean)"
  fullName: "com.azure.maps.weather.WeatherClient.getCurrentAirQuality(GeoPosition position, String language, Boolean includePollutantDetails)"
  name: "getCurrentAirQuality(GeoPosition position, String language, Boolean includePollutantDetails)"
  nameWithType: "WeatherClient.getCurrentAirQuality(GeoPosition position, String language, Boolean includePollutantDetails)"
  summary: "\\*\\*Get Current Air Quality\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Boolean value that returns detailed information about each pollutant. By default\n     is True."
    name: "includePollutantDetails"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public AirQualityResult getCurrentAirQuality(GeoPosition position, String language, Boolean includePollutantDetails)"
  desc: "\\*\\*Get Current Air Quality\\*\\*\n\n```java\nclient.getCurrentAirQuality(\n     new GeoPosition(-122.138874, 47.632346), \"es\", false);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet detailed information about the concentration of pollutants and overall status for current air quality. Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement summarizing risk level and suggested precautions."
  returns:
    description: "this object is returned from a successful Get Air Quality call."
    type: "<xref href=\"com.azure.maps.weather.models.AirQualityResult?alt=com.azure.maps.weather.models.AirQualityResult&text=AirQualityResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getCurrentAirQualityWithResponse(com.azure.core.models.GeoPosition,java.lang.String,java.lang.Boolean,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getCurrentAirQualityWithResponse(GeoPosition position, String language, Boolean includePollutantDetails, Context context)"
  name: "getCurrentAirQualityWithResponse(GeoPosition position, String language, Boolean includePollutantDetails, Context context)"
  nameWithType: "WeatherClient.getCurrentAirQualityWithResponse(GeoPosition position, String language, Boolean includePollutantDetails, Context context)"
  summary: "\\*\\*Get Current Air Quality\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Boolean value that returns detailed information about each pollutant. By default\n     is True."
    name: "includePollutantDetails"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AirQualityResult> getCurrentAirQualityWithResponse(GeoPosition position, String language, Boolean includePollutantDetails, Context context)"
  desc: "\\*\\*Get Current Air Quality\\*\\*\n\n```java\nclient.getCurrentAirQuality(\n     new GeoPosition(-122.138874, 47.632346), \"es\", false);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet detailed information about the concentration of pollutants and overall status for current air quality. Information includes, pollution levels, air quality index values, the dominant pollutant, and a brief statement summarizing risk level and suggested precautions."
  returns:
    description: "this object is returned from a successful Get Air Quality call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.AirQualityResult?alt=com.azure.maps.weather.models.AirQualityResult&text=AirQualityResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getCurrentConditions(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.String,java.lang.Integer,java.lang.String)"
  fullName: "com.azure.maps.weather.WeatherClient.getCurrentConditions(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language)"
  name: "getCurrentConditions(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language)"
  nameWithType: "WeatherClient.getCurrentConditions(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language)"
  summary: "\\*\\*Get Current Conditions\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Return full details for the current conditions. Available values are * `true` - Returns full\n     details. By default all details are returned. * `false` - Returns a truncated version of the current\n     condition data, which includes observation date time, weather phrase, icon code, precipitation indicator\n     flag, and temperature."
    name: "details"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Time frame of the returned weather conditions. By default, the most current weather conditions\n     will be returned. Default value is 0. Supported values are: * `0` - Return the most current weather\n     conditions. * `6` - Return weather conditions from past 6 hours. * `24` - Return weather conditions from past\n     24 hours."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public CurrentConditionsResult getCurrentConditions(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language)"
  desc: "\\*\\*Get Current Conditions\\*\\*\n\n```java\nclient.getCurrentConditions(new GeoPosition(-122.125679, 47.641268), \n     null, null, null, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Current Conditions service returns detailed current weather conditions such as precipitation, temperature and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular location can be retrieved. The basic information returned with the response include details such as observation date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and temperature. Additional details such as RealFeel\\\\u2122 Temperature and UV index are also returned."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.CurrentConditionsResult?alt=com.azure.maps.weather.models.CurrentConditionsResult&text=CurrentConditionsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getCurrentConditionsWithResponse(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getCurrentConditionsWithResponse(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language, Context context)"
  name: "getCurrentConditionsWithResponse(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language, Context context)"
  nameWithType: "WeatherClient.getCurrentConditionsWithResponse(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language, Context context)"
  summary: "\\*\\*Get Current Conditions\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Return full details for the current conditions. Available values are * `true` - Returns full\n     details. By default all details are returned. * `false` - Returns a truncated version of the current\n     condition data, which includes observation date time, weather phrase, icon code, precipitation indicator\n     flag, and temperature."
    name: "details"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Time frame of the returned weather conditions. By default, the most current weather conditions\n     will be returned. Default value is 0. Supported values are: * `0` - Return the most current weather\n     conditions. * `6` - Return weather conditions from past 6 hours. * `24` - Return weather conditions from past\n     24 hours."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<CurrentConditionsResult> getCurrentConditionsWithResponse(GeoPosition position, WeatherDataUnit unit, String details, Integer duration, String language, Context context)"
  desc: "\\*\\*Get Current Conditions\\*\\*\n\n```java\nclient.getCurrentConditions(new GeoPosition(-122.125679, 47.641268), \n     null, null, null, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Current Conditions service returns detailed current weather conditions such as precipitation, temperature and wind for a given coordinate location. Also, observations from the past 6 or 24 hours for a particular location can be retrieved. The basic information returned with the response include details such as observation date and time, brief description of the weather conditions, weather icon, precipitation indicator flags, and temperature. Additional details such as RealFeel\\\\u2122 Temperature and UV index are also returned."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.CurrentConditionsResult?alt=com.azure.maps.weather.models.CurrentConditionsResult&text=CurrentConditionsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getDailyForecast(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.Integer,java.lang.String)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  name: "getDailyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  nameWithType: "WeatherClient.getDailyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  summary: "\\*\\*Get Daily Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies for how many days the daily forecast responses are returned. Available values are * `1`\n     - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the next 5\n     days. * `10` - Return forecast data for the next 10 days. * `25` - Return forecast data for the next 25 days.\n     Only available in S1 SKU. * `45` - Return forecast data for the next 45 days. Only available in S1 SKU."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public DailyForecastResult getDailyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  desc: "\\*\\*Get Daily Forecast\\*\\*\n\n```java\nclient.getDailyForecast(new GeoPosition(30.0734812, 62.6490341), null, 5, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nThe service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15, 25, or 45 days for a given coordinate location. The response include details such as temperature, wind, precipitation, air quality, and UV index.\n\nIn S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily forecast for the next 25 days, and 45 days."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.DailyForecastResult?alt=com.azure.maps.weather.models.DailyForecastResult&text=DailyForecastResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getDailyForecastWithResponse(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  name: "getDailyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  nameWithType: "WeatherClient.getDailyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  summary: "\\*\\*Get Daily Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies for how many days the daily forecast responses are returned. Available values are * `1`\n     - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the next 5\n     days. * `10` - Return forecast data for the next 10 days. * `25` - Return forecast data for the next 25 days.\n     Only available in S1 SKU. * `45` - Return forecast data for the next 45 days. Only available in S1 SKU."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DailyForecastResult> getDailyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  desc: "\\*\\*Get Daily Forecast\\*\\*\n\n```java\nclient.getDailyForecast(new GeoPosition(30.0734812, 62.6490341), null, 5, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nThe service returns detailed weather forecast such as temperature and wind by day for the next 1, 5, 10, 15, 25, or 45 days for a given coordinate location. The response include details such as temperature, wind, precipitation, air quality, and UV index.\n\nIn S0 you can request daily forecast for the next 1, 5, 10, and 15 days. In S1 you can also request daily forecast for the next 25 days, and 45 days."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.DailyForecastResult?alt=com.azure.maps.weather.models.DailyForecastResult&text=DailyForecastResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getDailyHistoricalActuals(com.azure.core.models.GeoPosition,java.time.LocalDate,java.time.LocalDate,com.azure.maps.weather.models.WeatherDataUnit)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyHistoricalActuals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  name: "getDailyHistoricalActuals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  nameWithType: "WeatherClient.getDailyHistoricalActuals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  summary: "\\*\\*Get Daily Historical Actuals\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31\n     calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "startDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar\n     days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "endDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DailyHistoricalActualsResult getDailyHistoricalActuals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  desc: "\\*\\*Get Daily Historical Actuals\\*\\*\n\n```java\nLocalDate before = LocalDate.now().minusDays(30);\n LocalDate today = LocalDate.now();\n client.getDailyHistoricalActuals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Daily Historical Actuals service returns climatology data such as past daily actual observed temperatures, precipitation, snowfall, snow depth and cooling/heating degree day information, for the day at a given coordinate location. The data is requested for a specified date range, up to 31 days in a single API request. Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.DailyHistoricalActualsResult?alt=com.azure.maps.weather.models.DailyHistoricalActualsResult&text=DailyHistoricalActualsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getDailyHistoricalActualsWithResponse(com.azure.core.models.GeoPosition,java.time.LocalDate,java.time.LocalDate,com.azure.maps.weather.models.WeatherDataUnit,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyHistoricalActualsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  name: "getDailyHistoricalActualsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  nameWithType: "WeatherClient.getDailyHistoricalActualsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  summary: "\\*\\*Get Daily Historical Actuals\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31\n     calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "startDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar\n     days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "endDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DailyHistoricalActualsResult> getDailyHistoricalActualsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  desc: "\\*\\*Get Daily Historical Actuals\\*\\*\n\n```java\nLocalDate before = LocalDate.now().minusDays(30);\n LocalDate today = LocalDate.now();\n client.getDailyHistoricalActuals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Daily Historical Actuals service returns climatology data such as past daily actual observed temperatures, precipitation, snowfall, snow depth and cooling/heating degree day information, for the day at a given coordinate location. The data is requested for a specified date range, up to 31 days in a single API request. Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.DailyHistoricalActualsResult?alt=com.azure.maps.weather.models.DailyHistoricalActualsResult&text=DailyHistoricalActualsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getDailyHistoricalNormals(com.azure.core.models.GeoPosition,java.time.LocalDate,java.time.LocalDate,com.azure.maps.weather.models.WeatherDataUnit)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyHistoricalNormals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  name: "getDailyHistoricalNormals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  nameWithType: "WeatherClient.getDailyHistoricalNormals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  summary: "\\*\\*Get Daily Historical Normals\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31\n     calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "startDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar\n     days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "endDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DailyHistoricalNormalsResult getDailyHistoricalNormals(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  desc: "\\*\\*Get Daily Historical Normals\\*\\*\n\n```java\nLocalDate before = LocalDate.now().minusDays(30);\n LocalDate today = LocalDate.now();\n client.getDailyHistoricalNormals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Daily Historical Normals service returns climatology data such as past daily normal temperatures, precipitation and cooling/heating degree day information for the day at a given coordinate location. Normals are a 30-year average for temperatures and precipitation for a specific location. As is standard practice in climatology, the 30-year average covers years 1991-2020, this data will be used for one decade and then will reset in the year 2030. Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.DailyHistoricalNormalsResult?alt=com.azure.maps.weather.models.DailyHistoricalNormalsResult&text=DailyHistoricalNormalsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getDailyHistoricalNormalsWithResponse(com.azure.core.models.GeoPosition,java.time.LocalDate,java.time.LocalDate,com.azure.maps.weather.models.WeatherDataUnit,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyHistoricalNormalsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  name: "getDailyHistoricalNormalsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  nameWithType: "WeatherClient.getDailyHistoricalNormalsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  summary: "\\*\\*Get Daily Historical Normals\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31\n     calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "startDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar\n     days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "endDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DailyHistoricalNormalsResult> getDailyHistoricalNormalsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  desc: "\\*\\*Get Daily Historical Normals\\*\\*\n\n```java\nLocalDate before = LocalDate.now().minusDays(30);\n LocalDate today = LocalDate.now();\n client.getDailyHistoricalNormals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Daily Historical Normals service returns climatology data such as past daily normal temperatures, precipitation and cooling/heating degree day information for the day at a given coordinate location. Normals are a 30-year average for temperatures and precipitation for a specific location. As is standard practice in climatology, the 30-year average covers years 1991-2020, this data will be used for one decade and then will reset in the year 2030. Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.DailyHistoricalNormalsResult?alt=com.azure.maps.weather.models.DailyHistoricalNormalsResult&text=DailyHistoricalNormalsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getDailyHistoricalRecords(com.azure.core.models.GeoPosition,java.time.LocalDate,java.time.LocalDate,com.azure.maps.weather.models.WeatherDataUnit)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyHistoricalRecords(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  name: "getDailyHistoricalRecords(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  nameWithType: "WeatherClient.getDailyHistoricalRecords(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  summary: "\\*\\*Get Daily Historical Records\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31\n     calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "startDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar\n     days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "endDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DailyHistoricalRecordsResult getDailyHistoricalRecords(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit)"
  desc: "\\*\\*Get Daily Historical Records\\*\\*\n\n```java\nLocalDate before = LocalDate.now().minusDays(30);\n LocalDate today = LocalDate.now();\n client.getDailyHistoricalActuals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Daily Historical Records service returns climatology data such as past daily record temperatures, precipitation and snowfall at a given coordinate location. Availability of records data will vary by location. Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.DailyHistoricalRecordsResult?alt=com.azure.maps.weather.models.DailyHistoricalRecordsResult&text=DailyHistoricalRecordsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getDailyHistoricalRecordsWithResponse(com.azure.core.models.GeoPosition,java.time.LocalDate,java.time.LocalDate,com.azure.maps.weather.models.WeatherDataUnit,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyHistoricalRecordsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  name: "getDailyHistoricalRecordsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  nameWithType: "WeatherClient.getDailyHistoricalRecordsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  summary: "\\*\\*Get Daily Historical Records\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Start date in ISO 8601 format, for example, 2019-10-27. The date range supported is 1 to 31\n     calendar days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "startDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "End date in ISO 8601 format, for example, 2019-10-28. The date range supported is 1 to 31 calendar\n     days, so be sure to specify a startDate and endDate that does not exceed a maximum of 31 days (i.e.:\n     startDate=2012-01-01&amp;endDate=2012-01-31)."
    name: "endDate"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html\">LocalDate</a>"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DailyHistoricalRecordsResult> getDailyHistoricalRecordsWithResponse(GeoPosition position, LocalDate startDate, LocalDate endDate, WeatherDataUnit unit, Context context)"
  desc: "\\*\\*Get Daily Historical Records\\*\\*\n\n```java\nLocalDate before = LocalDate.now().minusDays(30);\n LocalDate today = LocalDate.now();\n client.getDailyHistoricalActuals(new GeoPosition(30.0734812, 62.6490341), before, today, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Daily Historical Records service returns climatology data such as past daily record temperatures, precipitation and snowfall at a given coordinate location. Availability of records data will vary by location. Generally, historical data may be available as far back as the last 5 to 40+ years, depending on the location."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.DailyHistoricalRecordsResult?alt=com.azure.maps.weather.models.DailyHistoricalRecordsResult&text=DailyHistoricalRecordsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getDailyIndices(com.azure.core.models.GeoPosition,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyIndices(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId)"
  name: "getDailyIndices(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId)"
  nameWithType: "WeatherClient.getDailyIndices(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId)"
  summary: "\\*\\*Get Daily Indices\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies for how many days the daily indices are returned. By default, the indices data for the\n     current day will be returned. When requesting future indices data, the current day is included in the\n     response as day 1. Available values are * `1` - Return daily index data for the current day. Default value. *\n     `5` - Return 5 days of daily index data starting from the current day. * `10` - Return 10 days of daily index\n     data starting from the current day. * `15` - Return 15 days of daily index data starting from the current\n     day."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Numeric index identifier that can be used for restricting returned results to the corresponding\n     index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service\n     Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices."
    name: "indexId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Numeric index group identifier that can be used for restricting returned results to the\n     corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather\n     Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups."
    name: "indexGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public DailyIndicesResult getDailyIndices(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId)"
  desc: "\\*\\*Get Daily Indices\\*\\*\n\n```java\nclient.getDailyIndices(new GeoPosition(-79.37849, 43.84745), null, null, null, 11);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nThere may be times when you want to know if the weather conditions are optimal for a specific activity, for example, for outdoor construction, indoor activities, running or farming including soil moisture information. Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a health mobile application can notify users that today is good weather for running or for other outdoors activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days starting from current day."
  returns:
    description: "this object is returned from a successful Get Daily Indices call."
    type: "<xref href=\"com.azure.maps.weather.models.DailyIndicesResult?alt=com.azure.maps.weather.models.DailyIndicesResult&text=DailyIndicesResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getDailyIndicesWithResponse(com.azure.core.models.GeoPosition,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getDailyIndicesWithResponse(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId, Context context)"
  name: "getDailyIndicesWithResponse(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId, Context context)"
  nameWithType: "WeatherClient.getDailyIndicesWithResponse(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId, Context context)"
  summary: "\\*\\*Get Daily Indices\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Specifies for how many days the daily indices are returned. By default, the indices data for the\n     current day will be returned. When requesting future indices data, the current day is included in the\n     response as day 1. Available values are * `1` - Return daily index data for the current day. Default value. *\n     `5` - Return 5 days of daily index data starting from the current day. * `10` - Return 10 days of daily index\n     data starting from the current day. * `15` - Return 15 days of daily index data starting from the current\n     day."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Numeric index identifier that can be used for restricting returned results to the corresponding\n     index type. Cannot be paired with `indexGroupId`. Please refer to [Weather Service\n     Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported indices."
    name: "indexId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Numeric index group identifier that can be used for restricting returned results to the\n     corresponding subset of indices (index group). Cannot be paired with `indexId`. Please refer to [Weather\n     Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index groups."
    name: "indexGroupId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DailyIndicesResult> getDailyIndicesWithResponse(GeoPosition position, String language, Integer duration, Integer indexId, Integer indexGroupId, Context context)"
  desc: "\\*\\*Get Daily Indices\\*\\*\n\n```java\nclient.getDailyIndices(new GeoPosition(-79.37849, 43.84745), null, null, null, 11);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nThere may be times when you want to know if the weather conditions are optimal for a specific activity, for example, for outdoor construction, indoor activities, running or farming including soil moisture information. Azure Maps Indices API returns index values that will guide end users to plan future activities. For example, a health mobile application can notify users that today is good weather for running or for other outdoors activities like for playing golf, and retail stores can optimize their digital marketing campaigns based on predicted index values. The service returns in daily indices values for current and next 5, 10 and 15 days starting from current day."
  returns:
    description: "this object is returned from a successful Get Daily Indices call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.DailyIndicesResult?alt=com.azure.maps.weather.models.DailyIndicesResult&text=DailyIndicesResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getHourlyForecast(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.Integer,java.lang.String)"
  fullName: "com.azure.maps.weather.WeatherClient.getHourlyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  name: "getHourlyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  nameWithType: "WeatherClient.getHourlyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  summary: "\\*\\*Get Hourly Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Time frame of the returned weather forecast. By default, the forecast data for next hour will be\n     returned. Available values are * `1` - Return forecast data for the next hour. Default value. * `12` - Return\n     hourly forecast for next 12 hours. * `24` - Return hourly forecast for next 24 hours. * `72` - Return hourly\n     forecast for next 72 hours (3 days). * `120` - Return hourly forecast for next 120 hours (5 days). Only\n     available in S1 SKU. * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public HourlyForecastResult getHourlyForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  desc: "\\*\\*Get Hourly Forecast\\*\\*\n\n```java\nclient.getHourlyForecast(new GeoPosition(-122.138874, 47.632346), null, 12, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nRequest detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature, humidity, wind, precipitation, and ultraviolet (UV) index.\n\nIn S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days)."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.HourlyForecastResult?alt=com.azure.maps.weather.models.HourlyForecastResult&text=HourlyForecastResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getHourlyForecastWithResponse(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getHourlyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  name: "getHourlyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  nameWithType: "WeatherClient.getHourlyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  summary: "\\*\\*Get Hourly Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Time frame of the returned weather forecast. By default, the forecast data for next hour will be\n     returned. Available values are * `1` - Return forecast data for the next hour. Default value. * `12` - Return\n     hourly forecast for next 12 hours. * `24` - Return hourly forecast for next 24 hours. * `72` - Return hourly\n     forecast for next 72 hours (3 days). * `120` - Return hourly forecast for next 120 hours (5 days). Only\n     available in S1 SKU. * `240` - Return hourly forecast for next 240 hours (10 days). Only available in S1 SKU."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<HourlyForecastResult> getHourlyForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  desc: "\\*\\*Get Hourly Forecast\\*\\*\n\n```java\nclient.getHourlyForecast(new GeoPosition(-122.138874, 47.632346), null, 12, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nRequest detailed weather forecast by the hour for the next 1, 12, 24 (1 day), 72 (3 days), 120 (5 days), and 240 hours (10 days) for the given the given coordinate location. The API returns details such as temperature, humidity, wind, precipitation, and ultraviolet (UV) index.\n\nIn S0 you can request hourly forecast for the next 1, 12, 24 hours (1 day), and 72 hours (3 days). In S1 you can also request hourly forecast for the next 120 (5 days) and 240 hours (10 days)."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.HourlyForecastResult?alt=com.azure.maps.weather.models.HourlyForecastResult&text=HourlyForecastResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getMinuteForecast(com.azure.core.models.GeoPosition,java.lang.Integer,java.lang.String)"
  fullName: "com.azure.maps.weather.WeatherClient.getMinuteForecast(GeoPosition position, Integer interval, String language)"
  name: "getMinuteForecast(GeoPosition position, Integer interval, String language)"
  nameWithType: "WeatherClient.getMinuteForecast(GeoPosition position, Integer interval, String language)"
  summary: "\\*\\*Get Minute Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies time interval in minutes for the returned weather forecast. Supported values are * `1`\n     - Retrieve forecast for 1-minute intervals. Returned by default. * `5` - Retrieve forecasts for 5-minute\n     intervals. * `15` - Retrieve forecasts for 15-minute intervals."
    name: "interval"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public MinuteForecastResult getMinuteForecast(GeoPosition position, Integer interval, String language)"
  desc: "\\*\\*Get Minute Forecast\\*\\*\n\n```java\nclient.getMinuteForecast(new GeoPosition(-122.138874, 47.632346), 15, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes. Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation intensity value (dBZ)."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.MinuteForecastResult?alt=com.azure.maps.weather.models.MinuteForecastResult&text=MinuteForecastResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getMinuteForecastWithResponse(com.azure.core.models.GeoPosition,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getMinuteForecastWithResponse(GeoPosition position, Integer interval, String language, Context context)"
  name: "getMinuteForecastWithResponse(GeoPosition position, Integer interval, String language, Context context)"
  nameWithType: "WeatherClient.getMinuteForecastWithResponse(GeoPosition position, Integer interval, String language, Context context)"
  summary: "\\*\\*Get Minute Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies time interval in minutes for the returned weather forecast. Supported values are * `1`\n     - Retrieve forecast for 1-minute intervals. Returned by default. * `5` - Retrieve forecasts for 5-minute\n     intervals. * `15` - Retrieve forecasts for 15-minute intervals."
    name: "interval"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<MinuteForecastResult> getMinuteForecastWithResponse(GeoPosition position, Integer interval, String language, Context context)"
  desc: "\\*\\*Get Minute Forecast\\*\\*\n\n```java\nclient.getMinuteForecast(new GeoPosition(-122.138874, 47.632346), 15, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet Minute Forecast service returns minute-by-minute forecasts for a given location for the next 120 minutes. Users can request weather forecasts in the interval of 1, 5 and 15 minutes. The response will include details such as the type of precipitation (including rain, snow, or a mixture of both), start time, and precipitation intensity value (dBZ)."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.MinuteForecastResult?alt=com.azure.maps.weather.models.MinuteForecastResult&text=MinuteForecastResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getQuarterDayForecast(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.Integer,java.lang.String)"
  fullName: "com.azure.maps.weather.WeatherClient.getQuarterDayForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  name: "getQuarterDayForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  nameWithType: "WeatherClient.getQuarterDayForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  summary: "\\*\\*Get Quarter-Day Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies for how many days the quester-day forecast responses are returned. Supported values\n     are: * `1` - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the\n     next 5 days. * `10` - Return forecast data for next 10 days. * `15` - Return forecast data for the next 15\n     days."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public QuarterDayForecastResult getQuarterDayForecast(GeoPosition position, WeatherDataUnit unit, Integer duration, String language)"
  desc: "\\*\\*Get Quarter-Day Forecast\\*\\*\n\n```java\nclient.getQuarterDayForecast(new GeoPosition(-122.138874, 47.632346), null, 1, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nService returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details such as temperature, humidity, wind, precipitation, and UV index are returned."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.maps.weather.models.QuarterDayForecastResult?alt=com.azure.maps.weather.models.QuarterDayForecastResult&text=QuarterDayForecastResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getQuarterDayForecastWithResponse(com.azure.core.models.GeoPosition,com.azure.maps.weather.models.WeatherDataUnit,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getQuarterDayForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  name: "getQuarterDayForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  nameWithType: "WeatherClient.getQuarterDayForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  summary: "\\*\\*Get Quarter-Day Forecast\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies to return the data in either metric units or imperial units. Default value is metric."
    name: "unit"
    type: "<xref href=\"com.azure.maps.weather.models.WeatherDataUnit?alt=com.azure.maps.weather.models.WeatherDataUnit&text=WeatherDataUnit\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies for how many days the quester-day forecast responses are returned. Supported values\n     are: * `1` - Return forecast data for the next day. Returned by default. * `5` - Return forecast data for the\n     next 5 days. * `10` - Return forecast data for next 10 days. * `15` - Return forecast data for the next 15\n     days."
    name: "duration"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<QuarterDayForecastResult> getQuarterDayForecastWithResponse(GeoPosition position, WeatherDataUnit unit, Integer duration, String language, Context context)"
  desc: "\\*\\*Get Quarter-Day Forecast\\*\\*\n\n```java\nclient.getQuarterDayForecast(new GeoPosition(-122.138874, 47.632346), null, 1, null);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nService returns detailed weather forecast by quarter-day for the next 1, 5, 10, or 15 days for a given location. Response data is presented by quarters of the day - morning, afternoon, evening, and overnight. Details such as temperature, humidity, wind, precipitation, and UV index are returned."
  returns:
    description: "the response."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.QuarterDayForecastResult?alt=com.azure.maps.weather.models.QuarterDayForecastResult&text=QuarterDayForecastResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getSevereWeatherAlerts(com.azure.core.models.GeoPosition,java.lang.String,java.lang.Boolean)"
  fullName: "com.azure.maps.weather.WeatherClient.getSevereWeatherAlerts(GeoPosition position, String language, Boolean includeDetails)"
  name: "getSevereWeatherAlerts(GeoPosition position, String language, Boolean includeDetails)"
  nameWithType: "WeatherClient.getSevereWeatherAlerts(GeoPosition position, String language, Boolean includeDetails)"
  summary: "\\*\\*Get Severe Weather Alerts\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Return full details for the severe weather alerts. Available values are * `true` - Returns full\n     details. By default all details are returned. * `false` - Returns a truncated version of the alerts data,\n     which excludes the area-specific full description of alert details (`alertDetails`)."
    name: "includeDetails"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SevereWeatherAlertsResult getSevereWeatherAlerts(GeoPosition position, String language, Boolean includeDetails)"
  desc: "\\*\\*Get Severe Weather Alerts\\*\\*\n\n```java\nclient.getSevereWeatherAlerts(new GeoPosition(-85.06431274043842, 30.324604968788467), null, true);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nSevere weather phenomenon can significantly impact our everyday life and business operations. For example, severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of refrigerated food products.\\\\u202f Azure Maps Severe\\\\u202fWeather\\\\u202fAlerts API returns the severe\\\\u202fweather\\\\u202falerts that are available worldwide from\\\\u202fboth\\\\u202fofficial Government Meteorological Agencies and leading global\\\\u202fto regional\\\\u202fweather\\\\u202falert providers. The service can return details such as alert type, category, level and detailed description about the active severe alerts for the requested location,\\\\u202flike hurricanes, thunderstorms, lightning, heat waves or forest fires."
  returns:
    description: "this object is returned from a successful Get Severe Weather Alerts call."
    type: "<xref href=\"com.azure.maps.weather.models.SevereWeatherAlertsResult?alt=com.azure.maps.weather.models.SevereWeatherAlertsResult&text=SevereWeatherAlertsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getSevereWeatherAlertsWithResponse(com.azure.core.models.GeoPosition,java.lang.String,java.lang.Boolean,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getSevereWeatherAlertsWithResponse(GeoPosition position, String language, Boolean includeDetails, Context context)"
  name: "getSevereWeatherAlertsWithResponse(GeoPosition position, String language, Boolean includeDetails, Context context)"
  nameWithType: "WeatherClient.getSevereWeatherAlertsWithResponse(GeoPosition position, String language, Boolean includeDetails, Context context)"
  summary: "\\*\\*Get Severe Weather Alerts\\*\\*"
  parameters:
  - description: "The applicable query specified as a comma separated string composed by longitude followed by\n     latitude e.g. \"-122.125679,47.641268\"."
    name: "position"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Return full details for the severe weather alerts. Available values are * `true` - Returns full\n     details. By default all details are returned. * `false` - Returns a truncated version of the alerts data,\n     which excludes the area-specific full description of alert details (`alertDetails`)."
    name: "includeDetails"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SevereWeatherAlertsResult> getSevereWeatherAlertsWithResponse(GeoPosition position, String language, Boolean includeDetails, Context context)"
  desc: "\\*\\*Get Severe Weather Alerts\\*\\*\n\n```java\nclient.getSevereWeatherAlerts(new GeoPosition(-85.06431274043842, 30.324604968788467), null, true);\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nSevere weather phenomenon can significantly impact our everyday life and business operations. For example, severe weather conditions such as tropical storms, high winds or flooding can close roads and force logistics companies to reroute their fleet causing delays in reaching destinations and breaking the cold chain of refrigerated food products.\\\\u202f Azure Maps Severe\\\\u202fWeather\\\\u202fAlerts API returns the severe\\\\u202fweather\\\\u202falerts that are available worldwide from\\\\u202fboth\\\\u202fofficial Government Meteorological Agencies and leading global\\\\u202fto regional\\\\u202fweather\\\\u202falert providers. The service can return details such as alert type, category, level and detailed description about the active severe alerts for the requested location,\\\\u202flike hurricanes, thunderstorms, lightning, heat waves or forest fires."
  returns:
    description: "this object is returned from a successful Get Severe Weather Alerts call."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.SevereWeatherAlertsResult?alt=com.azure.maps.weather.models.SevereWeatherAlertsResult&text=SevereWeatherAlertsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getTropicalStormActive()"
  fullName: "com.azure.maps.weather.WeatherClient.getTropicalStormActive()"
  name: "getTropicalStormActive()"
  nameWithType: "WeatherClient.getTropicalStormActive()"
  summary: "\\*\\*Get Tropical Storm Active\\*\\*"
  syntax: "public ActiveStormResult getTropicalStormActive()"
  desc: "\\*\\*Get Tropical Storm Active\\*\\*\n\n```java\nclient.getTropicalStormActive();\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet all government-issued active tropical storms. Information about the tropical storms includes, government ID, basin ID, year of origin, name and if it is subtropical."
  returns:
    description: "all government-issued active storms."
    type: "<xref href=\"com.azure.maps.weather.models.ActiveStormResult?alt=com.azure.maps.weather.models.ActiveStormResult&text=ActiveStormResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getTropicalStormActiveWithResponse(com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getTropicalStormActiveWithResponse(Context context)"
  name: "getTropicalStormActiveWithResponse(Context context)"
  nameWithType: "WeatherClient.getTropicalStormActiveWithResponse(Context context)"
  summary: "\\*\\*Get Tropical Storm Active\\*\\*"
  parameters:
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<ActiveStormResult> getTropicalStormActiveWithResponse(Context context)"
  desc: "\\*\\*Get Tropical Storm Active\\*\\*\n\n```java\nclient.getTropicalStormActive();\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet all government-issued active tropical storms. Information about the tropical storms includes, government ID, basin ID, year of origin, name and if it is subtropical."
  returns:
    description: "all government-issued active storms."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.ActiveStormResult?alt=com.azure.maps.weather.models.ActiveStormResult&text=ActiveStormResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getTropicalStormForecast(com.azure.maps.weather.models.TropicalStormForecastOptions)"
  fullName: "com.azure.maps.weather.WeatherClient.getTropicalStormForecast(TropicalStormForecastOptions options)"
  name: "getTropicalStormForecast(TropicalStormForecastOptions options)"
  nameWithType: "WeatherClient.getTropicalStormForecast(TropicalStormForecastOptions options)"
  summary: "\\*\\*Get Tropical Storm Forecasts\\*\\*"
  parameters:
  - description: "TropicalStormForecastOptions"
    name: "options"
    type: "<xref href=\"com.azure.maps.weather.models.TropicalStormForecastOptions?alt=com.azure.maps.weather.models.TropicalStormForecastOptions&text=TropicalStormForecastOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StormForecastResult getTropicalStormForecast(TropicalStormForecastOptions options)"
  desc: "\\*\\*Get Tropical Storm Forecasts\\*\\*\n\n```java\nActiveStormResult result = client.getTropicalStormActive();\n if (result.getActiveStorms().size() > 0) {\n     ActiveStorm storm = result.getActiveStorms().get(0);\n     TropicalStormForecastOptions forecastOptions = new TropicalStormForecastOptions(storm.getYear(),\n         storm.getBasinId(), storm.getGovId())\n         .setIncludeWindowGeometry(true);\n     client.getTropicalStormForecast(forecastOptions);\n }\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet individual government-issued tropical storm forecasts. Information about the forecasted tropical storms includes, location, status, date the forecast was created, window, wind speed and wind radii."
  returns:
    description: "the list of Government-issued forecasts."
    type: "<xref href=\"com.azure.maps.weather.models.StormForecastResult?alt=com.azure.maps.weather.models.StormForecastResult&text=StormForecastResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getTropicalStormForecastWithResponse(com.azure.maps.weather.models.TropicalStormForecastOptions,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getTropicalStormForecastWithResponse(TropicalStormForecastOptions options, Context context)"
  name: "getTropicalStormForecastWithResponse(TropicalStormForecastOptions options, Context context)"
  nameWithType: "WeatherClient.getTropicalStormForecastWithResponse(TropicalStormForecastOptions options, Context context)"
  summary: "\\*\\*Get Tropical Storm Forecasts\\*\\*"
  parameters:
  - description: "TropicalStormForecastOptions"
    name: "options"
    type: "<xref href=\"com.azure.maps.weather.models.TropicalStormForecastOptions?alt=com.azure.maps.weather.models.TropicalStormForecastOptions&text=TropicalStormForecastOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<StormForecastResult> getTropicalStormForecastWithResponse(TropicalStormForecastOptions options, Context context)"
  desc: "\\*\\*Get Tropical Storm Forecasts\\*\\*\n\n```java\nActiveStormResult result = client.getTropicalStormActive();\n if (result.getActiveStorms().size() > 0) {\n     ActiveStorm storm = result.getActiveStorms().get(0);\n     TropicalStormForecastOptions forecastOptions = new TropicalStormForecastOptions(storm.getYear(),\n         storm.getBasinId(), storm.getGovId())\n         .setIncludeWindowGeometry(true);\n     client.getTropicalStormForecast(forecastOptions);\n }\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet individual government-issued tropical storm forecasts. Information about the forecasted tropical storms includes, location, status, date the forecast was created, window, wind speed and wind radii."
  returns:
    description: "the list of Government-issued forecasts."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.StormForecastResult?alt=com.azure.maps.weather.models.StormForecastResult&text=StormForecastResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getTropicalStormLocations(com.azure.maps.weather.models.TropicalStormLocationOptions)"
  fullName: "com.azure.maps.weather.WeatherClient.getTropicalStormLocations(TropicalStormLocationOptions options)"
  name: "getTropicalStormLocations(TropicalStormLocationOptions options)"
  nameWithType: "WeatherClient.getTropicalStormLocations(TropicalStormLocationOptions options)"
  summary: "\\*\\*Get Tropical Storm Locations\\*\\*"
  parameters:
  - description: "TropicalStormLocationOptions"
    name: "options"
    type: "<xref href=\"com.azure.maps.weather.models.TropicalStormLocationOptions?alt=com.azure.maps.weather.models.TropicalStormLocationOptions&text=TropicalStormLocationOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public StormLocationsResult getTropicalStormLocations(TropicalStormLocationOptions options)"
  desc: "\\*\\*Get Tropical Storm Locations\\*\\*\n\n```java\nActiveStormResult result = client.getTropicalStormActive();\n if (result.getActiveStorms().size() > 0) {\n     ActiveStorm storm = result.getActiveStorms().get(0);\n     TropicalStormLocationOptions locationOptions = new TropicalStormLocationOptions(storm.getYear(),\n         storm.getBasinId(), storm.getGovId());\n     client.getTropicalStormLocations(locationOptions);\n }\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet location of individual government-issued tropical storms. Information about the tropical storms includes, location coordinates, geometry, basin ID, date, wind details and wind radii."
  returns:
    description: "locations for an individual government-issued storm."
    type: "<xref href=\"com.azure.maps.weather.models.StormLocationsResult?alt=com.azure.maps.weather.models.StormLocationsResult&text=StormLocationsResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getTropicalStormLocationsWithResponse(com.azure.maps.weather.models.TropicalStormLocationOptions,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getTropicalStormLocationsWithResponse(TropicalStormLocationOptions options, Context context)"
  name: "getTropicalStormLocationsWithResponse(TropicalStormLocationOptions options, Context context)"
  nameWithType: "WeatherClient.getTropicalStormLocationsWithResponse(TropicalStormLocationOptions options, Context context)"
  summary: "\\*\\*Get Tropical Storm Locations\\*\\*"
  parameters:
  - description: "TropicalStormLocationOptions"
    name: "options"
    type: "<xref href=\"com.azure.maps.weather.models.TropicalStormLocationOptions?alt=com.azure.maps.weather.models.TropicalStormLocationOptions&text=TropicalStormLocationOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<StormLocationsResult> getTropicalStormLocationsWithResponse(TropicalStormLocationOptions options, Context context)"
  desc: "\\*\\*Get Tropical Storm Locations\\*\\*\n\n```java\nActiveStormResult result = client.getTropicalStormActive();\n if (result.getActiveStorms().size() > 0) {\n     ActiveStorm storm = result.getActiveStorms().get(0);\n     TropicalStormLocationOptions locationOptions = new TropicalStormLocationOptions(storm.getYear(),\n         storm.getBasinId(), storm.getGovId());\n     client.getTropicalStormLocations(locationOptions);\n }\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nGet location of individual government-issued tropical storms. Information about the tropical storms includes, location coordinates, geometry, basin ID, date, wind details and wind radii."
  returns:
    description: "locations for an individual government-issued storm."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.StormLocationsResult?alt=com.azure.maps.weather.models.StormLocationsResult&text=StormLocationsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.getWeatherAlongRoute(java.util.List<com.azure.maps.weather.models.Waypoint>,java.lang.String)"
  fullName: "com.azure.maps.weather.WeatherClient.getWeatherAlongRoute(List<Waypoint> waypoints, String language)"
  name: "getWeatherAlongRoute(List<Waypoint> waypoints, String language)"
  nameWithType: "WeatherClient.getWeatherAlongRoute(List<Waypoint> waypoints, String language)"
  summary: "\\*\\*Get Weather along route\\*\\*"
  parameters:
  - description: "Coordinates through which the route is calculated, separated by colon (:) and entered in\n     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60\n     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *\n     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.\n     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the\n     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value\n     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true\n     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.\n     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.\n     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or\n     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events\n     not being captured between waypoints. Information can and should be updated along the route (especially for\n     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that\n     forecast information for content such as precipitation type and intensity is accurate as storms develop and\n     dissipate over time."
    name: "waypoints"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.weather.models.Waypoint?alt=com.azure.maps.weather.models.Waypoint&text=Waypoint\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public WeatherAlongRouteResult getWeatherAlongRoute(List<Waypoint> waypoints, String language)"
  desc: "\\*\\*Get Weather along route\\*\\*\n\n```java\nList<Waypoint> waypoints = Arrays.asList(\n     new Waypoint(new GeoPosition(-77.037, 38.907), 0.0),\n     new Waypoint(new GeoPosition(-77.009, 38.907), 10.0),\n     new Waypoint(new GeoPosition(-76.928, 38.926), 20.0),\n     new Waypoint(new GeoPosition(-76.852, 39.033), 30.0),\n     new Waypoint(new GeoPosition(-76.732, 39.168), 40.0),\n     new Waypoint(new GeoPosition(-76.634, 39.269), 50.0),\n     new Waypoint(new GeoPosition(-76.612, 39.287), 60.0)\n );\n client.getWeatherAlongRoute(waypoints, \"en\");\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nWeather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts, weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might be used to paint each portion of a route according to how safe it is for the driver. When submitting the waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or shortly after. Data is updated every five minutes.\n\nThe service supplements Azure Maps \\[Route Service\\](https://docs.microsoft.com/rest/api/maps/route) that allows you to first request a route between an origin and a destination and use that as an input for Weather Along Route endpoint.\n\nIn addition, the service supports scenarios to generate weather notifications for waypoints that experience an increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for when to display the notification for a waypoint could be based, for example, on a \\[geofence\\](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the waypoint.\n\nThe API covers all regions of the planet except latitudes above Greenland and Antarctica."
  returns:
    description: "this object is returned from a successful Weather Along Route."
    type: "<xref href=\"com.azure.maps.weather.models.WeatherAlongRouteResult?alt=com.azure.maps.weather.models.WeatherAlongRouteResult&text=WeatherAlongRouteResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.getWeatherAlongRouteWithResponse(java.util.List<com.azure.maps.weather.models.Waypoint>,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.getWeatherAlongRouteWithResponse(List<Waypoint> waypoints, String language, Context context)"
  name: "getWeatherAlongRouteWithResponse(List<Waypoint> waypoints, String language, Context context)"
  nameWithType: "WeatherClient.getWeatherAlongRouteWithResponse(List<Waypoint> waypoints, String language, Context context)"
  summary: "\\*\\*Get Weather along route\\*\\*"
  parameters:
  - description: "Coordinates through which the route is calculated, separated by colon (:) and entered in\n     chronological order. A minimum of two waypoints is required. A single API call may contain up to 60\n     waypoints. A waypoint indicates location, ETA, and optional heading: latitude,longitude,ETA,heading, where *\n     `Latitude` - Latitude coordinate in decimal degrees. * `Longitude` - Longitude coordinate in decimal degrees.\n     * `ETA (estimated time of arrival)` - The number of minutes from the present time that it will take for the\n     vehicle to reach the waypoint. Allowed range is from 0.0 to 120.0 minutes. * `Heading` - An optional value\n     indicating the vehicle heading as it passes the waypoint. Expressed in clockwise degrees relative to true\n     north. This is issued to calculate sun glare as a driving hazard. Allowed range is from 0.0 to 360.0 degrees.\n     If not provided, a heading will automatically be derived based on the position of neighboring waypoints.\n     <p>It is recommended to stay within, or close to, the distance that can be traveled within 120-mins or\n     shortly after. This way a more accurate assessment can be provided for the trip and prevent isolated events\n     not being captured between waypoints. Information can and should be updated along the route (especially for\n     trips greater than 2 hours) to continuously pull new waypoints moving forward, but also to ensure that\n     forecast information for content such as precipitation type and intensity is accurate as storms develop and\n     dissipate over time."
    name: "waypoints"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.weather.models.Waypoint?alt=com.azure.maps.weather.models.Waypoint&text=Waypoint\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, case insensitive. When data in specified language is not available for a specific field, default\n     language is used.\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<WeatherAlongRouteResult> getWeatherAlongRouteWithResponse(List<Waypoint> waypoints, String language, Context context)"
  desc: "\\*\\*Get Weather along route\\*\\*\n\n```java\nList<Waypoint> waypoints = Arrays.asList(\n     new Waypoint(new GeoPosition(-77.037, 38.907), 0.0),\n     new Waypoint(new GeoPosition(-77.009, 38.907), 10.0),\n     new Waypoint(new GeoPosition(-76.928, 38.926), 20.0),\n     new Waypoint(new GeoPosition(-76.852, 39.033), 30.0),\n     new Waypoint(new GeoPosition(-76.732, 39.168), 40.0),\n     new Waypoint(new GeoPosition(-76.634, 39.269), 50.0),\n     new Waypoint(new GeoPosition(-76.612, 39.287), 60.0)\n );\n client.getWeatherAlongRoute(waypoints, \"en\");\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nWeather along a route API returns hyper local (one kilometer or less), up-to-the-minute weather nowcasts, weather hazard assessments, and notifications along a route described as a sequence of waypoints. This includes a list of weather hazards affecting the waypoint or route, and the aggregated hazard index for each waypoint might be used to paint each portion of a route according to how safe it is for the driver. When submitting the waypoints, it is recommended to stay within, or close to, the distance that can be traveled within 120-mins or shortly after. Data is updated every five minutes.\n\nThe service supplements Azure Maps \\[Route Service\\](https://docs.microsoft.com/rest/api/maps/route) that allows you to first request a route between an origin and a destination and use that as an input for Weather Along Route endpoint.\n\nIn addition, the service supports scenarios to generate weather notifications for waypoints that experience an increase in intensity of a weather hazard. For example, if the vehicle is expected to begin experiencing heavy rain as it reaches a waypoint, a weather notification for heavy rain will be generated for that waypoint allowing the end product to display a heavy rain notification before the driver reaches that waypoint. The trigger for when to display the notification for a waypoint could be based, for example, on a \\[geofence\\](https://docs.microsoft.com/azure/azure-maps/tutorial-iot-hub-maps), or selectable distance to the waypoint.\n\nThe API covers all regions of the planet except latitudes above Greenland and Antarctica."
  returns:
    description: "this object is returned from a successful Weather Along Route."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.WeatherAlongRouteResult?alt=com.azure.maps.weather.models.WeatherAlongRouteResult&text=WeatherAlongRouteResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.weather.WeatherClient.searchTropicalStorm(java.lang.Integer,com.azure.maps.weather.models.BasinId,java.lang.Integer)"
  fullName: "com.azure.maps.weather.WeatherClient.searchTropicalStorm(Integer year, BasinId basinId, Integer governmentStormId)"
  name: "searchTropicalStorm(Integer year, BasinId basinId, Integer governmentStormId)"
  nameWithType: "WeatherClient.searchTropicalStorm(Integer year, BasinId basinId, Integer governmentStormId)"
  summary: "\\*\\*Get Tropical Storm Search\\*\\*"
  parameters:
  - description: "Year of the cyclone(s)."
    name: "year"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Basin identifier."
    name: "basinId"
    type: "<xref href=\"com.azure.maps.weather.models.BasinId?alt=com.azure.maps.weather.models.BasinId&text=BasinId\" data-throw-if-not-resolved=\"False\" />"
  - description: "Government storm Id."
    name: "governmentStormId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public StormSearchResult searchTropicalStorm(Integer year, BasinId basinId, Integer governmentStormId)"
  desc: "\\*\\*Get Tropical Storm Search\\*\\*\n\n```java\nActiveStormResult result = client.getTropicalStormActive();\n if (result.getActiveStorms().size() > 0) {\n     ActiveStorm storm = result.getActiveStorms().get(0);\n     client.searchTropicalStorm(storm.getYear(), storm.getBasinId(), storm.getGovId());\n }\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nSearch government-issued tropical storms by year, basin ID, and government ID. Information about the tropical storms includes, government ID, basin ID, status, year, name and if it is subtropical."
  returns:
    description: "search government-issued storms."
    type: "<xref href=\"com.azure.maps.weather.models.StormSearchResult?alt=com.azure.maps.weather.models.StormSearchResult&text=StormSearchResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.weather.WeatherClient.searchTropicalStormWithResponse(java.lang.Integer,com.azure.maps.weather.models.BasinId,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.maps.weather.WeatherClient.searchTropicalStormWithResponse(Integer year, BasinId basinId, Integer governmentStormId, Context context)"
  name: "searchTropicalStormWithResponse(Integer year, BasinId basinId, Integer governmentStormId, Context context)"
  nameWithType: "WeatherClient.searchTropicalStormWithResponse(Integer year, BasinId basinId, Integer governmentStormId, Context context)"
  summary: "\\*\\*Get Tropical Storm Search\\*\\*"
  parameters:
  - description: "Year of the cyclone(s)."
    name: "year"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Basin identifier."
    name: "basinId"
    type: "<xref href=\"com.azure.maps.weather.models.BasinId?alt=com.azure.maps.weather.models.BasinId&text=BasinId\" data-throw-if-not-resolved=\"False\" />"
  - description: "Government storm Id."
    name: "governmentStormId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<StormSearchResult> searchTropicalStormWithResponse(Integer year, BasinId basinId, Integer governmentStormId, Context context)"
  desc: "\\*\\*Get Tropical Storm Search\\*\\*\n\n```java\nActiveStormResult result = client.getTropicalStormActive();\n if (result.getActiveStorms().size() > 0) {\n     ActiveStorm storm = result.getActiveStorms().get(0);\n     client.searchTropicalStorm(storm.getYear(), storm.getBasinId(), storm.getGovId());\n }\n```\n\n\\*\\*Applies to\\*\\*: see pricing \\[tiers\\](https://aka.ms/AzureMapsPricingTier).\n\nSearch government-issued tropical storms by year, basin ID, and government ID. Information about the tropical storms includes, government ID, basin ID, status, year, name and if it is subtropical."
  returns:
    description: "search government-issued storms."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.weather.models.StormSearchResult?alt=com.azure.maps.weather.models.StormSearchResult&text=StormSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous WeatherClient type. <xref uid=\"com.azure.maps.weather.WeatherClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"WeatherClient\"></xref> instances are created via the <xref uid=\"com.azure.maps.weather.WeatherClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"WeatherClientBuilder\"></xref>, as shown below. Creating a sync client using a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a client\n WeatherClient client = new WeatherClientBuilder() \n     .credential(keyCredential)\n     .weatherClientId(System.getenv(\"MAPS_CLIENT_ID\"))\n     .buildClient();\n```"
metadata: {}
package: "com.azure.maps.weather"
artifact: com.azure:azure-maps-weather:1.0.0-beta.1
