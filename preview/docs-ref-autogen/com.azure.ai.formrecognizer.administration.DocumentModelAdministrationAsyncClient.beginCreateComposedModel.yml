### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.beginCreateComposedModel*"
fullName: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.beginCreateComposedModel"
name: "beginCreateComposedModel"
nameWithType: "DocumentModelAdministrationAsyncClient.beginCreateComposedModel"
members:
- uid: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.beginCreateComposedModel(java.util.List<java.lang.String>)"
  fullName: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.beginCreateComposedModel(List<String> componentModelIds)"
  name: "beginCreateComposedModel(List<String> componentModelIds)"
  nameWithType: "DocumentModelAdministrationAsyncClient.beginCreateComposedModel(List<String> componentModelIds)"
  summary: "Create a composed model from the provided list of existing models in the account."
  parameters:
  - description: "The list of component models to compose."
    name: "componentModelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<DocumentOperationResult,DocumentModel> beginCreateComposedModel(List<String> componentModelIds)"
  desc: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate IDs.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString modelId1 = \"{model_Id_1}\";\n String modelId2 = \"{model_Id_2}\";\n documentModelAdministrationAsyncClient.beginCreateComposedModel(Arrays.asList(modelId1, modelId2)\n     )\n     // if polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(documentModel -> {\n         System.out.printf(\"Model ID: %s%n\", documentModel.getModelId());\n         System.out.printf(\"Model Created on: %s%n\", documentModel.getCreatedOn());\n         documentModel.getDocTypes().forEach((key, docTypeInfo) -> {\n             docTypeInfo.getFieldSchema().forEach((field, documentFieldSchema) -> {\n                 System.out.printf(\"Field: %s\", field);\n                 System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n                 System.out.printf(\"Field confidence: %.2f\", docTypeInfo.getFieldConfidence().get(field));\n             });\n         });\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the created <xref uid=\"com.azure.ai.formrecognizer.administration.models.DocumentModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"composed model\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.administration.models.DocumentModel?alt=com.azure.ai.formrecognizer.administration.models.DocumentModel&text=DocumentModel\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.beginCreateComposedModel(java.util.List<java.lang.String>,com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions)"
  fullName: "com.azure.ai.formrecognizer.administration.DocumentModelAdministrationAsyncClient.beginCreateComposedModel(List<String> componentModelIds, CreateComposedModelOptions createComposedModelOptions)"
  name: "beginCreateComposedModel(List<String> componentModelIds, CreateComposedModelOptions createComposedModelOptions)"
  nameWithType: "DocumentModelAdministrationAsyncClient.beginCreateComposedModel(List<String> componentModelIds, CreateComposedModelOptions createComposedModelOptions)"
  summary: "Create a composed model from the provided list of existing models in the account."
  parameters:
  - description: "The list of component models to compose."
    name: "componentModelIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The configurable <xref uid=\"com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to pass when\n creating a composed model."
    name: "createComposedModelOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions?alt=com.azure.ai.formrecognizer.administration.models.CreateComposedModelOptions&text=CreateComposedModelOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<DocumentOperationResult,DocumentModel> beginCreateComposedModel(List<String> componentModelIds, CreateComposedModelOptions createComposedModelOptions)"
  desc: "Create a composed model from the provided list of existing models in the account.\n\nThis operations fails if the list consists of an invalid, non-existing model Id or duplicate IDs.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nString modelId1 = \"{model_Id_1}\";\n String modelId2 = \"{model_Id_2}\";\n String modelId = \"my-composed-model\";\n Map<String, String> attrs = new HashMap<String, String>();\n attrs.put(\"createdBy\", \"sample\");\n\n documentModelAdministrationAsyncClient.beginCreateComposedModel(Arrays.asList(modelId1, modelId2),\n         new CreateComposedModelOptions()\n             .setModelId(modelId)\n             .setDescription(\"model-desc\")\n             .setTags(attrs))\n     // if polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(documentModel -> {\n         System.out.printf(\"Model ID: %s%n\", documentModel.getModelId());\n         System.out.printf(\"Model Description: %s%n\", documentModel.getDescription());\n         System.out.printf(\"Model Created on: %s%n\", documentModel.getCreatedOn());\n         System.out.printf(\"Model assigned tags: %s%n\", documentModel.getTags());\n         documentModel.getDocTypes().forEach((key, docTypeInfo) -> {\n             docTypeInfo.getFieldSchema().forEach((field, documentFieldSchema) -> {\n                 System.out.printf(\"Field: %s\", field);\n                 System.out.printf(\"Field type: %s\", documentFieldSchema.getType());\n                 System.out.printf(\"Field confidence: %.2f\", docTypeInfo.getFieldConfidence().get(field));\n             });\n         });\n     });\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the create composed model operation until it has completed, has failed,\n or has been cancelled. The completed operation returns the copied model <xref uid=\"com.azure.ai.formrecognizer.administration.models.DocumentModel\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.ai.formrecognizer.administration.models.DocumentModel\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.administration.models.DocumentModel?alt=com.azure.ai.formrecognizer.administration.models.DocumentModel&text=DocumentModel\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer.administration"
artifact: com.azure:azure-ai-formrecognizer:4.0.0-beta.5
