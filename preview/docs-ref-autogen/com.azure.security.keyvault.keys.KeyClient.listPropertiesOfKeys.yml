### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys*"
fullName: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys"
name: "listPropertiesOfKeys"
nameWithType: "KeyClient.listPropertiesOfKeys"
members:
- uid: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()"
  name: "listPropertiesOfKeys()"
  nameWithType: "KeyClient.listPropertiesOfKeys()"
  summary: "List <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"keys\"></xref> in the key vault. Retrieves a list of the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"keys\"></xref> in the key vault as <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> structures that contain the public part of a stored <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>. The list operation is applicable to all <xref uid=\"com.azure.security.keyvault.keys.models.KeyType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key types\"></xref> and the individual <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> response in the list is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"full keys\"></xref> with key material from this information. Loop over the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyClient#getKey(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> with key material included as of its latest version.\n\n```java\nfor (KeyProperties keyProperties : keyClient.listPropertiesOfKeys()) {\n     KeyVaultKey key = keyClient.getKey(keyProperties.getName(), keyProperties.getVersion());\n\n     System.out.printf(\"Retrieved key with name: %s and type: %s%n\", key.getName(), key.getKeyType());\n }\n```\n\n**Code Samples to iterate keys by page**\n\nIt is possible to get <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"full keys\"></xref> with key material from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> by page and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyClient#getKey(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> with key material included as of its latest version.\n\n```java\nkeyClient.listPropertiesOfKeys().iterableByPage().forEach(pagedResponse -> {\n     System.out.printf(\"Got response details. Url: %s. Status code: %d.%n\",\n         pagedResponse.getRequest().getUrl(), pagedResponse.getStatusCode());\n     pagedResponse.getElements().forEach(keyProperties -> {\n         KeyVaultKey key = keyClient.getKey(keyProperties.getName(), keyProperties.getVersion());\n\n         System.out.printf(\"Retrieved key with name: %s and type: %s%n\", key.getName(),\n             key.getKeyType());\n     });\n });\n```"
  syntax: "public PagedIterable<KeyProperties> listPropertiesOfKeys()"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> of all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"keys\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(Context context)"
  name: "listPropertiesOfKeys(Context context)"
  nameWithType: "KeyClient.listPropertiesOfKeys(Context context)"
  summary: "List <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"keys\"></xref> in the key vault. Retrieves a list of the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"keys\"></xref> in the key vault as <xref uid=\"com.azure.security.keyvault.keys.models.JsonWebKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonWebKey\"></xref> structures that contain the public part of a stored <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref>. The list operation is applicable to all <xref uid=\"com.azure.security.keyvault.keys.models.KeyType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key types\"></xref> and the individual <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> response in the list is represented by <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> as only the key identifier, attributes and tags are provided in the response. The key material and individual key versions are not listed in the response. This operation requires the `keys/list` permission.\n\nIt is possible to get <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"full keys\"></xref> with key material from this information. Loop over the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyClient#getKey(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> with key material included as of its latest version.\n\n```java\nfor (KeyProperties keyProperties : keyClient.listPropertiesOfKeys(new Context(\"key1\", \"value1\"))) {\n     KeyVaultKey key = keyClient.getKey(keyProperties.getName(), keyProperties.getVersion());\n\n     System.out.printf(\"Retrieved key with name: %s and type: %s%n\", key.getName(),\n         key.getKeyType());\n }\n```\n\n**Code Samples to iterate keys by page**\n\nIt is possible to get <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"full keys\"></xref> with key material from this information. Iterate over all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyProperties\"></xref> by page and call <xref uid=\"com.azure.security.keyvault.keys.KeyClient.getKey(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyClient#getKey(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> with key material included as of its latest version.\n\n```java\nkeyClient.listPropertiesOfKeys().iterableByPage().forEach(pagedResponse -> {\n     System.out.printf(\"Got response details. Url: %s. Status code: %d.%n\",\n         pagedResponse.getRequest().getUrl(), pagedResponse.getStatusCode());\n     pagedResponse.getElements().forEach(keyProperties -> {\n         KeyVaultKey key = keyClient.getKey(keyProperties.getName(), keyProperties.getVersion());\n\n         System.out.printf(\"Retrieved key with name: %s and type: %s%n\", key.getName(),\n             key.getKeyType());\n     });\n });\n```"
  parameters:
  - description: "Additional <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> that is passed through the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> during the service\n call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<KeyProperties> listPropertiesOfKeys(Context context)"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"key\"></xref> of all the <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"keys\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys"
artifact: com.azure:azure-security-keyvault-keys:4.4.0-beta.5
