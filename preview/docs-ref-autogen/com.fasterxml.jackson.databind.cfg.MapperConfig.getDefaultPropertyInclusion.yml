### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion*"
fullName: "com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion"
name: "getDefaultPropertyInclusion"
nameWithType: "MapperConfig<T>.getDefaultPropertyInclusion"
members:
- uid: "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion()"
  name: "getDefaultPropertyInclusion()"
  nameWithType: "MapperConfig<T>.getDefaultPropertyInclusion()"
  summary: "Accessor for default property inclusion to use for serialization, used unless overridden by per-type or per-property overrides."
  syntax: "public abstract JsonInclude.Value getDefaultPropertyInclusion()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonInclude.Value?alt=com.fasterxml.jackson.annotation.JsonInclude.Value&text=Value\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType)"
  name: "getDefaultPropertyInclusion(Class<?> baseType)"
  nameWithType: "MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType)"
  summary: "Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type.\nNOTE: if no override found, defaults to value returned by <xref uid=\"com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getDefaultPropertyInclusion()\"></xref>."
  parameters:
  - name: "baseType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public abstract JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonInclude.Value?alt=com.fasterxml.jackson.annotation.JsonInclude.Value&text=Value\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonInclude.Value)"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)"
  name: "getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)"
  nameWithType: "MapperConfig<T>.getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)"
  summary: "Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type; but if none found, returning given `defaultIncl`"
  parameters:
  - name: "baseType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Inclusion setting to return if no overrides found."
    name: "defaultIncl"
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonInclude.Value?alt=com.fasterxml.jackson.annotation.JsonInclude.Value&text=Value\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType, JsonInclude.Value defaultIncl)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonInclude.Value?alt=com.fasterxml.jackson.annotation.JsonInclude.Value&text=Value\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.cfg"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
