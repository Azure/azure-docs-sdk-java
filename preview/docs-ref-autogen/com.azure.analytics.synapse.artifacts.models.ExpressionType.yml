### YamlMime:JavaType
uid: "com.azure.analytics.synapse.artifacts.models.ExpressionType"
fullName: "com.azure.analytics.synapse.artifacts.models.ExpressionType"
name: "ExpressionType"
nameWithType: "ExpressionType"
summary: "Defines values for Expression<wbr>Type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.ExpandableStringEnum?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.util.ExpandableStringEnum.<T>fromString(java.lang.String,java.lang.Class<T>)"
- "com.azure.core.util.ExpandableStringEnum.<T>values(java.lang.Class<T>)"
- "com.azure.core.util.ExpandableStringEnum.equals(java.lang.Object)"
- "com.azure.core.util.ExpandableStringEnum.hashCode()"
- "com.azure.core.util.ExpandableStringEnum.toString()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ExpressionType extends ExpandableStringEnum<ExpressionType>"
constructors:
- uid: "com.azure.analytics.synapse.artifacts.models.ExpressionType.ExpressionType()"
  fullName: "com.azure.analytics.synapse.artifacts.models.ExpressionType.ExpressionType()"
  name: "ExpressionType()"
  nameWithType: "ExpressionType.ExpressionType()"
  syntax: "public ExpressionType()"
fields:
- uid: "com.azure.analytics.synapse.artifacts.models.ExpressionType.EXPRESSION"
  fullName: "com.azure.analytics.synapse.artifacts.models.ExpressionType.EXPRESSION"
  name: "EXPRESSION"
  nameWithType: "ExpressionType.EXPRESSION"
  summary: "Static value Expression for Expression<wbr>Type."
  modifiers:
  - "static"
  - "final"
  field:
    type: "<xref href=\"com.azure.analytics.synapse.artifacts.models.ExpressionType?alt=com.azure.analytics.synapse.artifacts.models.ExpressionType&text=ExpressionType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final ExpressionType EXPRESSION"
  desc: "Static value Expression for ExpressionType."
methods:
- uid: "com.azure.analytics.synapse.artifacts.models.ExpressionType.fromString(java.lang.String)"
  fullName: "com.azure.analytics.synapse.artifacts.models.ExpressionType.fromString(String name)"
  name: "fromString(String name)"
  nameWithType: "ExpressionType.fromString(String name)"
  summary: "Creates or finds a Expression<wbr>Type from its string representation."
  modifiers:
  - "static"
  parameters:
  - description: "a name to look for."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static ExpressionType fromString(String name)"
  desc: "Creates or finds a ExpressionType from its string representation."
  returns:
    description: "the corresponding ExpressionType."
    type: "<xref href=\"com.azure.analytics.synapse.artifacts.models.ExpressionType?alt=com.azure.analytics.synapse.artifacts.models.ExpressionType&text=ExpressionType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.artifacts.models.ExpressionType.values()"
  fullName: "com.azure.analytics.synapse.artifacts.models.ExpressionType.values()"
  name: "values()"
  nameWithType: "ExpressionType.values()"
  modifiers:
  - "static"
  syntax: "public static Collection<ExpressionType> values()"
  returns:
    description: "known ExpressionType values."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.artifacts.models.ExpressionType?alt=com.azure.analytics.synapse.artifacts.models.ExpressionType&text=ExpressionType\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Defines values for ExpressionType."
metadata: {}
package: "com.azure.analytics.synapse.artifacts.models"
artifact: com.azure:azure-analytics-synapse-artifacts:1.0.0-beta.10
