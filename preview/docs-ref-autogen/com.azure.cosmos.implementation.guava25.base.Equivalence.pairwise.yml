### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Equivalence.pairwise*"
fullName: "com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<S>pairwise"
name: "<S>pairwise"
nameWithType: "Equivalence<T>.<S>pairwise"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Equivalence.<S>pairwise()"
  fullName: "com.azure.cosmos.implementation.guava25.base.Equivalence<T>.<S>pairwise()"
  name: "<S>pairwise()"
  nameWithType: "Equivalence<T>.<S>pairwise()"
  summary: "Returns an equivalence over iterables based on the equivalence of their elements. More specifically, two iterables are considered equivalent if they both contain the same number of elements, and each pair of corresponding elements is equivalent according to `this`. Null iterables are equivalent to one another.\n\nNote that this method performs a similar function for equivalences as <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Ordering.lexicographical\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.implementation.guava25.collect.Ordering#lexicographical\"></xref> does for orderings."
  syntax: "public final Equivalence<Iterable<S>> <S>pairwise()"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Equivalence?alt=com.azure.cosmos.implementation.guava25.base.Equivalence&text=Equivalence\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"S?alt=S&text=S\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
