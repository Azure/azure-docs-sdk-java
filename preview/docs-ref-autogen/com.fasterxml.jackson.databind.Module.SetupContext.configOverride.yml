### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.Module.SetupContext.configOverride*"
fullName: "com.fasterxml.jackson.databind.Module.SetupContext.configOverride"
name: "configOverride"
nameWithType: "Module.SetupContext.configOverride"
members:
- uid: "com.fasterxml.jackson.databind.Module.SetupContext.configOverride(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.Module.SetupContext.configOverride(Class<?> type)"
  name: "configOverride(Class<?> type)"
  nameWithType: "Module.SetupContext.configOverride(Class<?> type)"
  summary: "\"Mutant accessor\" for getting a mutable configuration override object for given type, needed to add or change per-type overrides applied to properties of given type. Usage is through returned object by colling \"setter\" methods, which directly modify override object and take effect directly. For example you can do\n\n```java\nmapper.configOverride(java.util.Date.class)\n       .setFormat(JsonFormat.Value.forPattern(\"yyyy-MM-dd\"));\n```\n\nto change the default format to use for properties of type <xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref> (possibly further overridden by per-property annotations)"
  parameters:
  - name: "type"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public abstract MutableConfigOverride configOverride(Class<?> type)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.cfg.MutableConfigOverride?alt=com.fasterxml.jackson.databind.cfg.MutableConfigOverride&text=MutableConfigOverride\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
