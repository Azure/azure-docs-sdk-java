### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl
  id: EventDataImpl
  parent: com.microsoft.azure.eventhubs.impl
  children:
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.compareTo(EventData)
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.equals(Object)
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(byte [])
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(byte [],final int,final int)
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(ByteBuffer)
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties()
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties()
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.hashCode()
  - com.microsoft.azure.eventhubs.impl.EventDataImpl.setSystemProperties(EventData.SystemProperties)
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: EventDataImpl
  nameWithType: EventDataImpl
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 26
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public class EventDataImpl implements EventData
  inheritance:
  - java.lang.Object
  - Serializable
  - com.microsoft.azure.eventhubs.EventData
  inheritedMembers:
  - com.microsoft.azure.eventhubs.EventData.create(final byte [])
  - com.microsoft.azure.eventhubs.EventData.create(final byte [],final int,final int)
  - com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer)
  - com.microsoft.azure.eventhubs.EventData.setSystemProperties(SystemProperties)
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.compareTo(EventData)
  id: compareTo(EventData)
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: compareTo(EventData other)
  nameWithType: EventDataImpl.compareTo(EventData other)
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.compareTo(EventData other)
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.compareTo*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 286
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public int compareTo(EventData other)
    parameters:
    - id: other
      type: com.microsoft.azure.eventhubs.EventData
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.equals(Object)
  id: equals(Object)
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: equals(Object o)
  nameWithType: EventDataImpl.equals(Object o)
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.equals(Object o)
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.equals*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 294
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public boolean equals(Object o)
    parameters:
    - id: o
      type: "79317049"
    return:
      type: 4fc6e284
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(byte [])
  id: EventDataImpl(byte [])
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: EventDataImpl(byte[] data)
  nameWithType: EventDataImpl.EventDataImpl(byte[] data)
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(byte[] data)
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl*
  type: Constructor
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 112
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public EventDataImpl(byte[] data)
    parameters:
    - id: data
      type: ccd9418d
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(byte [],final int,final int)
  id: EventDataImpl(byte [],final int,final int)
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: EventDataImpl(byte[] data, final int offset, final int length)
  nameWithType: EventDataImpl.EventDataImpl(byte[] data, final int offset, final int length)
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(byte[] data, final int offset, final int length)
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl*
  type: Constructor
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 122
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public EventDataImpl(byte[] data, final int offset, final int length)
    parameters:
    - id: data
      type: ccd9418d
    - id: offset
      type: cd225469
    - id: length
      type: cd225469
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(ByteBuffer)
  id: EventDataImpl(ByteBuffer)
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: EventDataImpl(ByteBuffer buffer)
  nameWithType: EventDataImpl.EventDataImpl(ByteBuffer buffer)
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl(ByteBuffer buffer)
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl*
  type: Constructor
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 132
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public EventDataImpl(ByteBuffer buffer)
    parameters:
    - id: buffer
      type: 85310d28
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()
  id: getBytes()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: getBytes()
  nameWithType: EventDataImpl.getBytes()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 146
  package: com.microsoft.azure.eventhubs.impl
  summary: "<p>Get Actual Payload/Data wrapped by EventData.</p>\r\n<p>\r\nnull if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid=\"com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()\" data-throw-if-not-resolved=\"false\">getObject()</xref>. </p>"
  syntax: &o1
    content: public byte [] getBytes()
    return:
      type: ccd9418d
      description: <p>byte[] of the actual data </p>
  overridden: com.microsoft.azure.eventhubs.EventData.getBytes()
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()
  id: getObject()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: getObject()
  nameWithType: EventDataImpl.getObject()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 142
  package: com.microsoft.azure.eventhubs.impl
  summary: "<p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>\r\n<p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid=\"com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> method. </p>\r\n<p>Get the value of AMQP messages' Body section on the received <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>\r\n<p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid=\"com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> method.</p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Binary</xref> if the Body is Data section </p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.List</xref> if the Body is AmqpSequence </p>\r\n<p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>"
  syntax: &o2
    content: public Object getObject()
    return:
      type: "79317049"
      description: <p>returns the Object which could represent either Data or AmqpValue or AmqpSequence. </p>
  overridden: com.microsoft.azure.eventhubs.EventData.getObject()
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties()
  id: getProperties()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: getProperties()
  nameWithType: EventDataImpl.getProperties()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties()
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 155
  package: com.microsoft.azure.eventhubs.impl
  summary: "<p>Application property bag</p>\r\n<p></p>"
  syntax:
    content: public Map<String, Object> getProperties()
    return:
      type: e7b06046
      description: <p>returns Application properties </p>
  overridden: com.microsoft.azure.eventhubs.EventData.getProperties()
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties()
  id: getSystemProperties()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: getSystemProperties()
  nameWithType: EventDataImpl.getSystemProperties()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties()
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 163
  package: com.microsoft.azure.eventhubs.impl
  summary: "<p>SystemProperties that are populated by EventHubService. </p>\r\n<p>As these are populated by Service, they are only present on a Received EventData. </p>\r\n<p>Usage:</p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public SystemProperties getSystemProperties()
    return:
      type: com.microsoft.azure.eventhubs.EventData.SystemProperties
      description: <p>an encapsulation of all SystemProperties appended by EventHubs service into EventData. <code>null</code> if the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> is not received and is created by the public constructors. </p>
  overridden: com.microsoft.azure.eventhubs.EventData.getSystemProperties()
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.hashCode()
  id: hashCode()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: hashCode()
  nameWithType: EventDataImpl.hashCode()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.hashCode()
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.hashCode*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 307
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public int hashCode()
    return:
      type: f75371fa
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.setSystemProperties(EventData.SystemProperties)
  id: SystemProperties)
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  langs:
  - java
  name: setSystemProperties(EventData.SystemProperties props)
  nameWithType: EventDataImpl.setSystemProperties(EventData.SystemProperties props)
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.setSystemProperties(EventData.SystemProperties props)
  overload: com.microsoft.azure.eventhubs.impl.EventDataImpl.setSystemProperties*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/microsoft-azure-eventhubs/src/main/java/com/microsoft/azure/eventhubs/impl/EventDataImpl.java
    startLine: 167
  package: com.microsoft.azure.eventhubs.impl
  syntax:
    content: public void setSystemProperties(EventData.SystemProperties props)
    parameters:
    - id: props
      type: 2408da87
references:
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl*
  name: EventDataImpl
  nameWithType: EventDataImpl.EventDataImpl
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.EventDataImpl
  package: com.microsoft.azure.eventhubs.impl
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: 85310d28
  spec.java:
  - name: ByteBuffer
    fullName: ByteBuffer
- uid: "79317049"
  spec.java:
  - name: Object
    fullName: Object
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject*
  name: getObject
  nameWithType: EventDataImpl.getObject
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes*
  name: getBytes
  nameWithType: EventDataImpl.getBytes
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes
  package: com.microsoft.azure.eventhubs.impl
- uid: e7b06046
  spec.java:
  - name: Map<String, Object>
    fullName: Map<String, Object>
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties*
  name: getProperties
  nameWithType: EventDataImpl.getProperties
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getProperties
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties*
  name: getSystemProperties
  nameWithType: EventDataImpl.getSystemProperties
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getSystemProperties
  package: com.microsoft.azure.eventhubs.impl
- uid: 2408da87
  spec.java:
  - name: EventData.SystemProperties
    fullName: EventData.SystemProperties
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.setSystemProperties*
  name: setSystemProperties
  nameWithType: EventDataImpl.setSystemProperties
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.setSystemProperties
  package: com.microsoft.azure.eventhubs.impl
- uid: f75371fa
  spec.java:
  - name: int
    fullName: int
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.compareTo*
  name: compareTo
  nameWithType: EventDataImpl.compareTo
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.compareTo
  package: com.microsoft.azure.eventhubs.impl
- uid: 4fc6e284
  spec.java:
  - name: boolean
    fullName: boolean
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.equals*
  name: equals
  nameWithType: EventDataImpl.equals
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.equals
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.hashCode*
  name: hashCode
  nameWithType: EventDataImpl.hashCode
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.hashCode
  package: com.microsoft.azure.eventhubs.impl
- uid: com.microsoft.azure.eventhubs.EventData.create(final byte [])
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: create(final byte[] data)
  nameWithType: EventData.create(final byte[] data)
  fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data)
  type: Method
  summary: "<p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>\r\ni.   Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.\r\nii.  If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid=\"com.microsoft.azure.eventhubs.EventData.getProperties()\" data-throw-if-not-resolved=\"false\">getProperties()</xref> for the Consumer.\r\n</pre></p>\r\n<p>Sample Code: <pre>\r\nEventData eventData = EventData.create(telemetryEventBytes);\r\neventData.getProperties().put(\"eventType\", \"com.microsoft.azure.monitoring.EtlEvent\");\r\npartitionSender.Send(eventData);\r\n</pre></p>\r\n<p></p>"
  syntax:
    content: public static EventData create(final byte[] data)
    parameters:
    - id: data
      type: f549433f
      description: <p>the actual payload of data in bytes to be Sent to EventHubs. </p>
    return:
      type: com.microsoft.azure.eventhubs.EventData
      description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
- uid: com.microsoft.azure.eventhubs.EventData.create(final byte [],final int,final int)
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: create(final byte[] data, final int offset, final int length)
  nameWithType: EventData.create(final byte[] data, final int offset, final int length)
  fullName: com.microsoft.azure.eventhubs.EventData.create(final byte[] data, final int offset, final int length)
  type: Method
  summary: "<p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>\r\ni.   Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.\r\nii.  If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid=\"com.microsoft.azure.eventhubs.EventData.getProperties()\" data-throw-if-not-resolved=\"false\">getProperties()</xref> for the Consumer.\r\n </pre></p>\r\n<p>Illustration: <pre><code>EventData eventData = EventData.create(telemetryEventBytes, offset, length);\r\n    eventData.getProperties().put(\"eventType\", \"com.microsoft.azure.monitoring.EtlEvent\");\r\n    partitionSender.Send(eventData);\r\n    </code></pre></p>\r\n<p></p>"
  syntax:
    content: public static EventData create(final byte[] data, final int offset, final int length)
    parameters:
    - id: data
      type: f549433f
      description: <p>the byte[] where the payload of the Event to be sent to EventHubs is present </p>
    - id: offset
      type: cd225469
      description: <p>Offset in the byte[] to read from ; inclusive index </p>
    - id: length
      type: cd225469
      description: <p>length of the byte[] to be read, starting from offset </p>
    return:
      type: com.microsoft.azure.eventhubs.EventData
      description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
- uid: com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer)
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: create(final ByteBuffer buffer)
  nameWithType: EventData.create(final ByteBuffer buffer)
  fullName: com.microsoft.azure.eventhubs.EventData.create(final ByteBuffer buffer)
  type: Method
  summary: "<p>Construct EventData to Send to EventHubs. Typical pattern to create a Sending EventData is: <pre>\r\ni.   Serialize the sending ApplicationEvent to be sent to EventHubs into bytes.\r\nii.  If complex serialization logic is involved (for example: multiple types of data) - add a Hint using the <xref uid=\"com.microsoft.azure.eventhubs.EventData.getProperties()\" data-throw-if-not-resolved=\"false\">getProperties()</xref> for the Consumer.\r\n </pre></p>\r\n<p>Illustration: <pre><code>EventData eventData = EventData.create(telemetryEventByteBuffer);\r\n    eventData.getProperties().put(\"eventType\", \"com.microsoft.azure.monitoring.EtlEvent\");\r\n    partitionSender.Send(eventData);\r\n    </code></pre></p>\r\n<p></p>"
  syntax:
    content: public static EventData create(final ByteBuffer buffer)
    parameters:
    - id: buffer
      type: d8b5c3b1
      description: <p>ByteBuffer which references the payload of the Event to be sent to EventHubs </p>
    return:
      type: com.microsoft.azure.eventhubs.EventData
      description: <p>EventData the created <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> to send to EventHubs. </p>
- uid: com.microsoft.azure.eventhubs.EventData.setSystemProperties(SystemProperties)
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: setSystemProperties(SystemProperties props)
  nameWithType: EventData.setSystemProperties(SystemProperties props)
  fullName: com.microsoft.azure.eventhubs.EventData.setSystemProperties(SystemProperties props)
  type: Method
  syntax:
    content: public void setSystemProperties(SystemProperties props)
    parameters:
    - id: props
      type: com.microsoft.azure.eventhubs.EventData.SystemProperties
- uid: com.microsoft.azure.eventhubs.EventData
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: EventData
  nameWithType: EventData
  fullName: com.microsoft.azure.eventhubs.EventData
  type: Interface
  summary: "<p>The data structure encapsulating the Event being sent-to and received-from EventHubs. Each EventHubs partition can be visualized as a Stream of <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>\r\n<p>Serializing a received <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive java types) and Data section is not supported. </p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. Here's the reference used for AMQP 1.0 specification: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf</a><pre>\r\ni.   <xref uid=\"com.microsoft.azure.eventhubs.EventData.getProperties()\" data-throw-if-not-resolved=\"false\">getProperties()</xref> - AMQPMessage.ApplicationProperties section\r\nii.  <xref uid=\"com.microsoft.azure.eventhubs.EventData.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> - if AMQPMessage.Body has Data section\r\niii. <xref uid=\"com.microsoft.azure.eventhubs.EventData.getObject()\" data-throw-if-not-resolved=\"false\">getObject()</xref> - if AMQPMessage.Body has AMQPValue or AMQPSequence sections\r\n</pre> While using client libraries released by Microsoft Azure EventHubs, sections (i) and (ii) alone are sufficient. Section (iii) is used for advanced scenarios, where the sending application uses third-party AMQP library to send the message to EventHubs and the receiving application uses this client library to receive <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>"
  syntax:
    content: public interface EventData
- uid: com.microsoft.azure.eventhubs.EventData.SystemProperties
  parent: com.microsoft.azure.eventhubs
  href: com.microsoft.azure.eventhubs.EventData.SystemProperties.yml
  name: EventData.SystemProperties
  nameWithType: EventData.SystemProperties
  fullName: com.microsoft.azure.eventhubs.EventData.SystemProperties
  type: Class
  syntax:
    content: public class SystemProperties
- uid: com.microsoft.azure.eventhubs.EventData.getObject()
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: getObject()
  nameWithType: EventData.getObject()
  fullName: com.microsoft.azure.eventhubs.EventData.getObject()
  type: Method
  summary: "<p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>\r\n<p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid=\"com.microsoft.azure.eventhubs.EventData.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> method. </p>\r\n<p>Get the value of AMQP messages' Body section on the received <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>\r\n<p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid=\"com.microsoft.azure.eventhubs.EventData.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> method.</p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Binary</xref> if the Body is Data section </p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.List</xref> if the Body is AmqpSequence </p>\r\n<p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>"
  syntax:
    content: public Object getObject()
    return:
      type: "79317049"
      description: <p>returns the Object which could represent either Data or AmqpValue or AmqpSequence. </p>
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  name: getBytes()
  nameWithType: EventDataImpl.getBytes()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()
  type: Method
  summary: "<p>Get Actual Payload/Data wrapped by EventData.</p>\r\n<p>\r\nnull if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid=\"com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()\" data-throw-if-not-resolved=\"false\">getObject()</xref>. </p>"
  syntax: *o1
- uid: com.microsoft.azure.eventhubs.EventData.getBytes()
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: getBytes()
  nameWithType: EventData.getBytes()
  fullName: com.microsoft.azure.eventhubs.EventData.getBytes()
  type: Method
  summary: "<p>Get Actual Payload/Data wrapped by EventData.</p>\r\n<p>\r\nnull if the body of the message has other inter-operable AMQP messages, whose body does not represent byte[]. In that case use <xref uid=\"com.microsoft.azure.eventhubs.EventData.getObject()\" data-throw-if-not-resolved=\"false\">getObject()</xref>. </p>"
  syntax:
    content: public byte [] getBytes()
    return:
      type: ccd9418d
      description: <p>byte[] of the actual data </p>
- uid: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()
  parent: com.microsoft.azure.eventhubs.impl.EventDataImpl
  href: com.microsoft.azure.eventhubs.impl.EventDataImpl.yml
  name: getObject()
  nameWithType: EventDataImpl.getObject()
  fullName: com.microsoft.azure.eventhubs.impl.EventDataImpl.getObject()
  type: Method
  summary: "<p>Use this method only if, the sender could be sending messages using third-party AMQP libraries. </p>\r\n<p>If all the senders of EventHub use client libraries released and maintained by Microsoft Azure EventHubs, use <xref uid=\"com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> method. </p>\r\n<p>Get the value of AMQP messages' Body section on the received <xref uid=\"com.microsoft.azure.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. </p>\r\n<p>If the AMQP message Body is always guaranteed to have Data section, use <xref uid=\"com.microsoft.azure.eventhubs.impl.EventDataImpl.getBytes()\" data-throw-if-not-resolved=\"false\">getBytes()</xref> method.</p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">Binary</xref> if the Body is Data section </p>\r\n<p>\r\n  <xref uid=\"\" data-throw-if-not-resolved=\"false\">java.util.List</xref> if the Body is AmqpSequence </p>\r\n<p>package org.apache.qpid.proton.amqp contains various AMQP types that could be returned. </p>"
  syntax: *o2
- uid: com.microsoft.azure.eventhubs.EventData.getProperties()
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: getProperties()
  nameWithType: EventData.getProperties()
  fullName: com.microsoft.azure.eventhubs.EventData.getProperties()
  type: Method
  summary: "<p>Application property bag</p>\r\n<p></p>"
  syntax:
    content: public Map<String, Object> getProperties()
    return:
      type: e7b06046
      description: <p>returns Application properties </p>
- uid: com.microsoft.azure.eventhubs.EventData.getSystemProperties()
  parent: com.microsoft.azure.eventhubs.EventData
  href: com.microsoft.azure.eventhubs.EventData(interface).yml
  name: getSystemProperties()
  nameWithType: EventData.getSystemProperties()
  fullName: com.microsoft.azure.eventhubs.EventData.getSystemProperties()
  type: Method
  summary: "<p>SystemProperties that are populated by EventHubService. </p>\r\n<p>As these are populated by Service, they are only present on a Received EventData. </p>\r\n<p>Usage:</p>\r\n<p></p>\r\n<p></p>"
  syntax:
    content: public SystemProperties getSystemProperties()
    return:
      type: com.microsoft.azure.eventhubs.EventData.SystemProperties
      description: <p>an encapsulation of all SystemProperties appended by EventHubs service into EventData. <code>null</code> if the <xref uid="com.microsoft.azure.eventhubs.EventData" data-throw-if-not-resolved="false">EventData</xref> is not received and is created by the public constructors. </p>
