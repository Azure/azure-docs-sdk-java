### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient"
fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient"
name: "SearchIndexAsyncClient"
nameWithType: "SearchIndexAsyncClient"
summary: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting indexes or synonym map and analyzing text in an Azure AI Search service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **SearchIndexAsyncClient**"
methods:
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  name: "analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  nameWithType: "SearchIndexAsyncClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  summary: "Shows how an analyzer breaks text into tokens."
  parameters:
  - description: "the name of the index for which to test an analyzer"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the text and analyzer or analysis components to test"
    name: "analyzeTextOptions"
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  desc: "Shows how an analyzer breaks text into tokens.\n\n**Code Sample**\n\nAnalyzer text with LexicalTokenizerName \"Classic\" in search index \"searchIndex\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.analyzeText(\"searchIndex\",\n     new AnalyzeTextOptions(\"The quick brown fox\", LexicalTokenizerName.CLASSIC))\n     .subscribe(tokenInfo ->\n         System.out.printf(\"The token emitted by the analyzer is %s.%n\", tokenInfo.getToken()));\n```"
  returns:
    description: "a response containing analyze result."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.AnalyzedTokenInfo?alt=com.azure.search.documents.indexes.models.AnalyzedTokenInfo&text=AnalyzedTokenInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields(java.lang.Class<?>,com.azure.search.documents.indexes.models.FieldBuilderOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  name: "buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  nameWithType: "SearchIndexAsyncClient.buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  summary: "Convenience method to convert a <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class's\"></xref> <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Fields\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Methods\"></xref> into <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> to help aid the creation of a <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchField\"></xref> which represents the <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The model <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> that will have <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> generated from its\n structure."
    name: "model"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;?&gt;"
  - description: "Configuration used to determine generation of the <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.indexes.models.FieldBuilderOptions?alt=com.azure.search.documents.indexes.models.FieldBuilderOptions&text=FieldBuilderOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  desc: "Convenience method to convert a <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class's\"></xref> <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Fields\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Methods\"></xref> into <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> to help aid the creation of a <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchField\"></xref> which represents the <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
  returns:
    description: "A list <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> which represent the model <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex(SearchIndex index)"
  name: "createIndex(SearchIndex index)"
  nameWithType: "SearchIndexAsyncClient.createIndex(SearchIndex index)"
  summary: "Creates a new Azure AI Search index."
  parameters:
  - description: "definition of the index to create."
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndex> createIndex(SearchIndex index)"
  desc: "Creates a new Azure AI Search index.\n\n**Code Sample**\n\nCreate search index named \"searchIndex\".\n\n```java\nList<SearchField> searchFields = Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING).setKey(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING).setSearchable(true)\n );\n SearchIndex searchIndex = new SearchIndex(\"searchIndex\", searchFields);\n SEARCH_INDEX_ASYNC_CLIENT.createIndex(searchIndex)\n     .subscribe(indexFromService ->\n         System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", indexFromService.getName(),\n         indexFromService.getETag()));\n```"
  returns:
    description: "the created Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse(SearchIndex index)"
  name: "createIndexWithResponse(SearchIndex index)"
  nameWithType: "SearchIndexAsyncClient.createIndexWithResponse(SearchIndex index)"
  summary: "Creates a new Azure AI Search index."
  parameters:
  - description: "definition of the index to create"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndex>> createIndexWithResponse(SearchIndex index)"
  desc: "Creates a new Azure AI Search index.\n\n**Code Sample**\n\nCreate search index named \"searchIndex\".\n\n```java\nList<SearchField> searchFields = Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING).setKey(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING).setSearchable(true)\n );\n SearchIndex searchIndex = new SearchIndex(\"searchIndex\", searchFields);\n\n SEARCH_INDEX_ASYNC_CLIENT.createIndexWithResponse(searchIndex)\n     .subscribe(indexFromServiceResponse ->\n         System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n         indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName()));\n```"
  returns:
    description: "a response containing the created Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex(SearchIndex index)"
  name: "createOrUpdateIndex(SearchIndex index)"
  nameWithType: "SearchIndexAsyncClient.createOrUpdateIndex(SearchIndex index)"
  summary: "Creates a new Azure AI Search index or updates an index if it already exists."
  parameters:
  - description: "the definition of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndex\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndex\"></xref> to create or update."
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndex> createOrUpdateIndex(SearchIndex index)"
  desc: "Creates a new Azure AI Search index or updates an index if it already exists.\n\n**Code Sample**\n\nCreate or update search index named \"searchIndex\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getIndex(\"searchIndex\")\n     .doOnNext(indexFromService -> indexFromService.setSuggesters(Collections.singletonList(\n         new SearchSuggester(\"sg\", Collections.singletonList(\"hotelName\")))))\n     .flatMap(SEARCH_INDEX_ASYNC_CLIENT::createOrUpdateIndex)\n     .subscribe(updatedIndex ->\n         System.out.printf(\"The index name is %s. The suggester name of index is %s.%n\",\n             updatedIndex.getName(), updatedIndex.getSuggesters().get(0).getName()));\n```"
  returns:
    description: "the index that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)"
  name: "createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexAsyncClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)"
  summary: "Creates a new Azure AI Search index or updates an index if it already exists."
  parameters:
  - description: "the definition of the index to create or update"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "allows new analyzers, tokenizers, token filters, or char filters to be added to an\n index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests\n to fail. Performance and write availability of the index can be impaired for several minutes after the index is\n updated, or longer for very large indexes"
    name: "allowIndexDowntime"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>index</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndex>> createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)"
  desc: "Creates a new Azure AI Search index or updates an index if it already exists.\n\n**Code Sample**\n\nCreate or update search index named \"searchIndex\".\n\n```java\nSearchIndex indexFromService = SEARCH_INDEX_CLIENT.getIndex(\"searchIndex\");\n indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester(\"sg\",\n     Collections.singletonList(\"hotelName\"))));\n Response<SearchIndex> updatedIndexResponse = SEARCH_INDEX_CLIENT.createOrUpdateIndexWithResponse(indexFromService, true,\n     false, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the normal response is %s.%n\"\n         + \"The index name is %s. The ETag of index is %s.%n\", updatedIndexResponse.getStatusCode(),\n     updatedIndexResponse.getValue().getName(), updatedIndexResponse.getValue().getETag());\n```"
  returns:
    description: "a response containing the index that was created or updated"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  name: "createOrUpdateSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchIndexAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  summary: "Creates a new Azure AI Search synonym map or updates a synonym map if it already exists."
  parameters:
  - description: "the definition of the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> to create or update"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SynonymMap> createOrUpdateSynonymMap(SynonymMap synonymMap)"
  desc: "Creates a new Azure AI Search synonym map or updates a synonym map if it already exists.\n\n**Code Sample**\n\nCreate or update synonym map named \"synonymMap\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getSynonymMap(\"searchIndex\")\n     .doOnNext(synonymMap -> synonymMap\n         .setSynonyms(\"United States, United States of America, USA, America\\nWashington, Wash. => WA\"))\n     .flatMap(SEARCH_INDEX_ASYNC_CLIENT::createOrUpdateSynonymMap)\n     .subscribe(updatedSynonymMap ->\n         System.out.printf(\"The synonym map name is %s. The synonyms are %s.%n\", updatedSynonymMap.getName(),\n         updatedSynonymMap.getSynonyms()));\n```"
  returns:
    description: "the synonym map that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  name: "createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  summary: "Creates a new Azure AI Search synonym map or updates a synonym map if it already exists."
  parameters:
  - description: "the definition of the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> to create or update"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>synonymMap</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SynonymMap>> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  desc: "Creates a new Azure AI Search synonym map or updates a synonym map if it already exists.\n\n**Code Sample**\n\nCreate or update synonym map named \"synonymMap\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getSynonymMap(\"searchIndex\")\n     .flatMap(synonymMap -> {\n         synonymMap.setSynonyms(\n             \"United States, United States of America, USA, America\\nWashington, Wash. => WA\");\n         return SEARCH_INDEX_ASYNC_CLIENT.createOrUpdateSynonymMapWithResponse(synonymMap, true);\n     })\n     .subscribe(updatedSynonymMap ->\n         System.out.printf(\"The status code of the normal response is %s.%n\"\n             + \"The synonym map name is %s. The synonyms are %s.%n\", updatedSynonymMap.getStatusCode(),\n         updatedSynonymMap.getValue().getName(), updatedSynonymMap.getValue().getSynonyms()));\n```"
  returns:
    description: "a response containing the synonym map that was created or updated."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap(SynonymMap synonymMap)"
  name: "createSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchIndexAsyncClient.createSynonymMap(SynonymMap synonymMap)"
  summary: "Creates a new Azure AI Search synonym map."
  parameters:
  - description: "the definition of the synonym map to create"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SynonymMap> createSynonymMap(SynonymMap synonymMap)"
  desc: "Creates a new Azure AI Search synonym map.\n\n**Code Sample**\n\nCreate synonym map named \"synonymMap\".\n\n```java\nSynonymMap synonymMap = new SynonymMap(\"synonymMap\",\n     \"United States, United States of America, USA\\nWashington, Wash. => WA\");\n SEARCH_INDEX_ASYNC_CLIENT.createSynonymMap(synonymMap)\n     .subscribe(synonymMapFromService ->\n         System.out.printf(\"The synonym map name is %s. The ETag of synonym map is %s.%n\",\n         synonymMapFromService.getName(), synonymMapFromService.getETag()));\n```"
  returns:
    description: "the created <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap)"
  name: "createSynonymMapWithResponse(SynonymMap synonymMap)"
  nameWithType: "SearchIndexAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap)"
  summary: "Creates a new Azure AI Search synonym map."
  parameters:
  - description: "the definition of the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> to create"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SynonymMap>> createSynonymMapWithResponse(SynonymMap synonymMap)"
  desc: "Creates a new Azure AI Search synonym map.\n\n**Code Sample**\n\nCreate synonym map named \"synonymMap\".\n\n```java\nSynonymMap synonymMap = new SynonymMap(\"synonymMap\",\n     \"United States, United States of America, USA\\nWashington, Wash. => WA\");\n SEARCH_INDEX_ASYNC_CLIENT.createSynonymMapWithResponse(synonymMap)\n     .subscribe(synonymMapFromService ->\n         System.out.printf(\"The status code of the response is %d.%n\"\n             + \"The synonym map name is %s. The ETag of synonym map is %s.%n\",\n             synonymMapFromService.getStatusCode(),\n         synonymMapFromService.getValue().getName(), synonymMapFromService.getValue().getETag()));\n```"
  returns:
    description: "a response containing the created SynonymMap."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex(String indexName)"
  name: "deleteIndex(String indexName)"
  nameWithType: "SearchIndexAsyncClient.deleteIndex(String indexName)"
  summary: "Deletes an Azure AI Search index and all the documents it contains."
  parameters:
  - description: "the name of the index to delete"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteIndex(String indexName)"
  desc: "Deletes an Azure AI Search index and all the documents it contains.\n\n**Code Sample**\n\nDelete search index with name \"searchIndex\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.deleteIndex(\"searchIndex\")\n     .subscribe();\n```"
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)"
  name: "deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexAsyncClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)"
  summary: "Deletes an Azure AI Search index and all the documents it contains."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndex\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndex\"></xref> to delete."
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>index</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)"
  desc: "Deletes an Azure AI Search index and all the documents it contains.\n\n**Code Sample**\n\nDelete search index with name \"searchIndex\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getIndex(\"searchIndex\")\n     .flatMap(indexFromService -> SEARCH_INDEX_ASYNC_CLIENT.deleteIndexWithResponse(indexFromService, true))\n     .subscribe(deleteResponse ->\n         System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode()));\n```"
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap(String synonymMapName)"
  name: "deleteSynonymMap(String synonymMapName)"
  nameWithType: "SearchIndexAsyncClient.deleteSynonymMap(String synonymMapName)"
  summary: "Deletes an Azure AI Search synonym map."
  parameters:
  - description: "the name of the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> to delete"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> deleteSynonymMap(String synonymMapName)"
  desc: "Deletes an Azure AI Search synonym map.\n\n**Code Sample**\n\nDelete synonym map with name \"synonymMap\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.deleteSynonymMap(\"synonymMap\")\n     .subscribe();\n```"
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  name: "deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexAsyncClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  summary: "Deletes an Azure AI Search synonym map."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> to delete."
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>synonymMap</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)"
  desc: "Deletes an Azure AI Search synonym map.\n\n**Code Sample**\n\nDelete synonym map with name \"synonymMap\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getSynonymMap(\"synonymMap\")\n     .flatMap(synonymMap -> SEARCH_INDEX_ASYNC_CLIENT.deleteSynonymMapWithResponse(synonymMap, true))\n     .subscribe(response -> System.out.println(\"The status code of the response is\" + response.getStatusCode()));\n```"
  returns:
    description: "a response signalling completion."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "SearchIndexAsyncClient.getEndpoint()"
  summary: "Gets the endpoint for the Azure AI Search service."
  syntax: "public String getEndpoint()"
  desc: "Gets the endpoint for the Azure AI Search service."
  returns:
    description: "the endpoint value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex(String indexName)"
  name: "getIndex(String indexName)"
  nameWithType: "SearchIndexAsyncClient.getIndex(String indexName)"
  summary: "Retrieves an index definition from the Azure AI Search."
  parameters:
  - description: "The name of the index to retrieve"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchIndex> getIndex(String indexName)"
  desc: "Retrieves an index definition from the Azure AI Search.\n\n**Code Sample**\n\nGet search index with name \"searchIndex\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getIndex(\"searchIndex\")\n     .subscribe(indexFromService ->\n         System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", indexFromService.getName(),\n             indexFromService.getETag()));\n```"
  returns:
    description: "the Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics(String indexName)"
  name: "getIndexStatistics(String indexName)"
  nameWithType: "SearchIndexAsyncClient.getIndexStatistics(String indexName)"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  parameters:
  - description: "the name of the index for which to retrieve statistics"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchIndexStatistics> getIndexStatistics(String indexName)"
  desc: "Returns statistics for the given index, including a document count and storage usage.\n\n**Code Sample**\n\nGet search index \"searchIndex\" statistics.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getIndexStatistics(\"searchIndex\")\n     .subscribe(statistics ->\n         System.out.printf(\"There are %d documents and storage size of %d available in 'searchIndex'.%n\",\n         statistics.getDocumentCount(), statistics.getStorageSize()));\n```"
  returns:
    description: "the index statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexStatistics?alt=com.azure.search.documents.indexes.models.SearchIndexStatistics&text=SearchIndexStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse(String indexName)"
  name: "getIndexStatisticsWithResponse(String indexName)"
  nameWithType: "SearchIndexAsyncClient.getIndexStatisticsWithResponse(String indexName)"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  parameters:
  - description: "the name of the index for which to retrieve statistics"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<SearchIndexStatistics>> getIndexStatisticsWithResponse(String indexName)"
  desc: "Returns statistics for the given index, including a document count and storage usage.\n\n**Code Sample**\n\nGet search index \"searchIndex\" statistics.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getIndexStatisticsWithResponse(\"searchIndex\")\n     .subscribe(statistics -> System.out.printf(\"The status code of the response is %s.%n\"\n             + \"There are %d documents and storage size of %d available in 'searchIndex'.%n\",\n         statistics.getStatusCode(), statistics.getValue().getDocumentCount(),\n         statistics.getValue().getStorageSize()));\n```"
  returns:
    description: "a response containing the index statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexStatistics?alt=com.azure.search.documents.indexes.models.SearchIndexStatistics&text=SearchIndexStatistics\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse(String indexName)"
  name: "getIndexWithResponse(String indexName)"
  nameWithType: "SearchIndexAsyncClient.getIndexWithResponse(String indexName)"
  summary: "Retrieves an index definition from the Azure AI Search."
  parameters:
  - description: "the name of the index to retrieve"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<SearchIndex>> getIndexWithResponse(String indexName)"
  desc: "Retrieves an index definition from the Azure AI Search.\n\n**Code Sample**\n\nGet search index with \"searchIndex.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getIndexWithResponse(\"searchIndex\")\n     .subscribe(indexFromServiceResponse ->\n         System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n             indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName()));\n```"
  returns:
    description: "a response containing the Index."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient(String indexName)"
  name: "getSearchAsyncClient(String indexName)"
  nameWithType: "SearchIndexAsyncClient.getSearchAsyncClient(String indexName)"
  summary: "Initializes a new <xref uid=\"com.azure.search.documents.SearchAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAsyncClient\"></xref> using the given Index name and the same configuration as the Search<wbr>Service<wbr>Async<wbr>Client."
  parameters:
  - description: "the name of the Index for the client"
    name: "indexName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchAsyncClient getSearchAsyncClient(String indexName)"
  desc: "Initializes a new <xref uid=\"com.azure.search.documents.SearchAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAsyncClient\"></xref> using the given Index name and the same configuration as the SearchServiceAsyncClient."
  returns:
    description: "a <xref uid=\"com.azure.search.documents.SearchAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAsyncClient\"></xref> created from the service client configuration"
    type: "<xref href=\"com.azure.search.documents.SearchAsyncClient?alt=com.azure.search.documents.SearchAsyncClient&text=SearchAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics()"
  name: "getServiceStatistics()"
  nameWithType: "SearchIndexAsyncClient.getServiceStatistics()"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  syntax: "public Mono<SearchServiceStatistics> getServiceStatistics()"
  desc: "Returns service level statistics for a search service, including service counters and limits.\n\nContains the tracking ID sent with the request to help with debugging\n\n**Code Sample**\n\nGet service statistics.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getServiceStatistics()\n     .subscribe(serviceStatistics -> System.out.printf(\"There are %s search indexes in your service.%n\",\n         serviceStatistics.getCounters().getIndexCounter()));\n```"
  returns:
    description: "the search service statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchServiceStatistics?alt=com.azure.search.documents.indexes.models.SearchServiceStatistics&text=SearchServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse()"
  name: "getServiceStatisticsWithResponse()"
  nameWithType: "SearchIndexAsyncClient.getServiceStatisticsWithResponse()"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  syntax: "public Mono<Response<SearchServiceStatistics>> getServiceStatisticsWithResponse()"
  desc: "Returns service level statistics for a search service, including service counters and limits.\n\n**Code Sample**\n\nGet service statistics.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getServiceStatisticsWithResponse()\n     .subscribe(serviceStatistics ->\n         System.out.printf(\"The status code of the response is %s.%n\"\n                 + \"There are %s search indexes in your service.%n\",\n         serviceStatistics.getStatusCode(),\n         serviceStatistics.getValue().getCounters().getIndexCounter()));\n```"
  returns:
    description: "the search service statistics result."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchServiceStatistics?alt=com.azure.search.documents.indexes.models.SearchServiceStatistics&text=SearchServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap(String synonymMapName)"
  name: "getSynonymMap(String synonymMapName)"
  nameWithType: "SearchIndexAsyncClient.getSynonymMap(String synonymMapName)"
  summary: "Retrieves a synonym map definition."
  parameters:
  - description: "name of the synonym map to retrieve"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SynonymMap> getSynonymMap(String synonymMapName)"
  desc: "Retrieves a synonym map definition.\n\n**Code Sample**\n\nGet synonym map with name \"synonymMap\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getSynonymMap(\"synonymMap\")\n     .subscribe(synonymMapFromService ->\n         System.out.printf(\"The synonym map is %s. The ETag of synonym map is %s.%n\",\n             synonymMapFromService.getName(), synonymMapFromService.getETag()));\n```"
  returns:
    description: "the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> definition"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse(String synonymMapName)"
  name: "getSynonymMapWithResponse(String synonymMapName)"
  nameWithType: "SearchIndexAsyncClient.getSynonymMapWithResponse(String synonymMapName)"
  summary: "Retrieves a synonym map definition."
  parameters:
  - description: "name of the synonym map to retrieve"
    name: "synonymMapName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<SynonymMap>> getSynonymMapWithResponse(String synonymMapName)"
  desc: "Retrieves a synonym map definition.\n\n**Code Sample**\n\nGet synonym map with name \"synonymMap\".\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.getSynonymMap(\"synonymMap\")\n     .subscribe(synonymMapFromService ->\n         System.out.printf(\"The synonym map is %s. The ETag of synonym map is %s.%n\",\n             synonymMapFromService.getName(), synonymMapFromService.getETag()));\n```"
  returns:
    description: "a response containing the SynonymMap."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames()"
  name: "listIndexNames()"
  nameWithType: "SearchIndexAsyncClient.listIndexNames()"
  summary: "Lists all indexes names for an Azure AI Search service."
  syntax: "public PagedFlux<String> listIndexNames()"
  desc: "Lists all indexes names for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexes names.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.listIndexNames()\n     .subscribe(indexName -> System.out.printf(\"The index name is %s.%n\", indexName));\n```"
  returns:
    description: "a reactive response emitting the list of index names."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes()"
  name: "listIndexes()"
  nameWithType: "SearchIndexAsyncClient.listIndexes()"
  summary: "Lists all indexes available for an Azure AI Search service."
  syntax: "public PagedFlux<SearchIndex> listIndexes()"
  desc: "Lists all indexes available for an Azure AI Search service.\n\n**Code Sample**\n\nList all search indexes.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.listIndexes()\n     .subscribe(index ->\n         System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", index.getName(),\n             index.getETag()));\n```"
  returns:
    description: "a reactive response emitting the list of indexes."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames()"
  name: "listSynonymMapNames()"
  nameWithType: "SearchIndexAsyncClient.listSynonymMapNames()"
  summary: "Lists all synonym map names for an Azure AI Search service."
  syntax: "public PagedFlux<String> listSynonymMapNames()"
  desc: "Lists all synonym map names for an Azure AI Search service.\n\n**Code Sample**\n\nList all synonym map names.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.listSynonymMapNames()\n     .subscribe(synonymMap -> System.out.printf(\"The synonymMap name is %s.%n\", synonymMap));\n```"
  returns:
    description: "a reactive response emitting the list of synonym map names."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps()"
  fullName: "com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps()"
  name: "listSynonymMaps()"
  nameWithType: "SearchIndexAsyncClient.listSynonymMaps()"
  summary: "Lists all synonym maps available for an Azure AI Search service."
  syntax: "public PagedFlux<SynonymMap> listSynonymMaps()"
  desc: "Lists all synonym maps available for an Azure AI Search service.\n\n**Code Sample**\n\nList all synonym maps.\n\n```java\nSEARCH_INDEX_ASYNC_CLIENT.listSynonymMaps()\n     .subscribe(synonymMap -> System.out.printf(\"The synonymMap name is %s. The ETag of synonymMap is %s.%n\",\n         synonymMap.getName(), synonymMap.getETag()));\n```"
  returns:
    description: "a reactive response emitting the list of synonym maps."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting indexes or synonym map and analyzing text in an Azure AI Search service.\n\n## Overview ##\n\nAn index is stored on your search service and populated with JSON documents that are indexed and tokenized for information retrieval. The fields collection of an index defines the structure of the search document. Fields have a name, data types, and attributes that determine how it's used. For example, searchable fields are used in full text search, and thus tokenized during indexing. An index also defines other constructs, such as scoring profiles for relevance tuning, suggesters, semantic configurations, and custom analyzers.\n\nA synonym map is service-level object that contains user-defined synonyms. This object is maintained independently from search indexes. Once uploaded, you can point any searchable field to the synonym map (one per field).\n\nThis client provides an asynchronous API for accessing indexes. This client allows you to create, delete, update, and configure search indexes. The client also allows you to declare custom synonym maps to expand or rewrite queries.\n\n## Getting Started ##\n\nAuthenticating and building instances of this client are handled by <xref uid=\"com.azure.search.documents.indexes.SearchIndexClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClientBuilder\"></xref>. This sample shows you how to create an instance of the client:\n\n```java\nSearchIndexAsyncClient searchIndexAsyncClient = new SearchIndexClientBuilder()\n     .credential(new AzureKeyCredential(\"{key}\"))\n     .endpoint(\"{endpoint}\")\n     .buildAsyncClient();\n```\n\nFor more information on authentication and building, see the documentation for <xref uid=\"com.azure.search.documents.indexes.SearchIndexClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClientBuilder\"></xref>.\n\n--------------------\n\n## Examples ##\n\nThe following examples all use [a simple Hotel data set][] that you can [ import into your own index from the Azure portal.][import into your own index from the Azure portal.] These are just a few of the basics - please check out [our Samples ][our Samples]for much more.\n\n### Create an Index ###\n\nThe following sample creates an index.\n\n```java\nSearchIndex searchIndex = new SearchIndex(\"indexName\", Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING)\n         .setKey(true)\n         .setFilterable(true)\n         .setSortable(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING)\n         .setSearchable(true)\n         .setFilterable(true)\n         .setSortable(true),\n     new SearchField(\"description\", SearchFieldDataType.STRING)\n         .setSearchable(true)\n         .setAnalyzerName(LexicalAnalyzerName.EN_LUCENE),\n     new SearchField(\"descriptionFr\", SearchFieldDataType.STRING)\n         .setSearchable(true)\n         .setAnalyzerName(LexicalAnalyzerName.FR_LUCENE),\n     new SearchField(\"tags\", SearchFieldDataType.collection(SearchFieldDataType.STRING))\n         .setSearchable(true)\n         .setFilterable(true)\n         .setFacetable(true),\n     new SearchField(\"address\", SearchFieldDataType.COMPLEX)\n         .setFields(\n             new SearchField(\"streetAddress\", SearchFieldDataType.STRING)\n                 .setSearchable(true),\n             new SearchField(\"city\", SearchFieldDataType.STRING)\n                 .setFilterable(true)\n                 .setSortable(true)\n                 .setFacetable(true),\n             new SearchField(\"stateProvince\", SearchFieldDataType.STRING)\n                 .setSearchable(true)\n                 .setFilterable(true)\n                 .setSortable(true)\n                 .setFacetable(true),\n             new SearchField(\"country\", SearchFieldDataType.STRING)\n                 .setSearchable(true)\n                 .setSynonymMapNames(\"synonymMapName\")\n                 .setFilterable(true)\n                 .setSortable(true)\n                 .setFacetable(true),\n             new SearchField(\"postalCode\", SearchFieldDataType.STRING)\n                 .setSearchable(true)\n                 .setFilterable(true)\n                 .setSortable(true)\n                 .setFacetable(true))\n ));\n\n searchIndexAsyncClient.createIndex(searchIndex).block();\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#createIndex(SearchIndex)\"></xref>.* \n\n### List indexes ###\n\nThe following sample lists all indexes.\n\n```java\nsearchIndexAsyncClient.listIndexes().subscribe(index -> System.out.println(\"The index name is \" + index.getName()));\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.listIndexes()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#listIndexes()\"></xref>.* \n\n### Retrieve an Index ###\n\nThe following sample retrieves an index.\n\n```java\nSearchIndex searchIndex = searchIndexAsyncClient.getIndex(\"indexName\").block();\n if (searchIndex != null) {\n     System.out.println(\"The index name is \" + searchIndex.getName());\n }\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.getIndex(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#getIndex(String)\"></xref>.* \n\n### Update an Index ###\n\nThe following sample updates an index.\n\n```java\nSearchIndex searchIndex = searchIndexAsyncClient.getIndex(\"indexName\").block();\n if (searchIndex != null) {\n     searchIndex.setFields(new SearchField(\"newField\", SearchFieldDataType.STRING));\n     searchIndexAsyncClient.createOrUpdateIndex(searchIndex);\n }\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#createOrUpdateIndex(SearchIndex)\"></xref>.* \n\n### Delete an Index ###\n\nThe following sample deletes an index.\n\n```java\nString indexName = \"indexName\";\n searchIndexAsyncClient.deleteIndex(indexName).block();\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.deleteIndex(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#deleteIndex(String)\"></xref>.* \n\n### Create a Synonym Map ###\n\nThe following sample creates a synonym map.\n\n```java\nSynonymMap synonymMap = new SynonymMap(\"synonymMapName\", \"hotel, motel, \\\"motor inn\\\"\");\n searchIndexAsyncClient.createSynonymMap(synonymMap).block();\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#createSynonymMap(SynonymMap)\"></xref>.* \n\n### List Synonym Maps ###\n\nThe following sample lists all synonym maps.\n\n```java\nsearchIndexAsyncClient.listSynonymMaps().subscribe(synonymMap ->\n     System.out.println(\"The synonymMap name is \" + synonymMap.getName())\n );\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#listSynonymMaps()\"></xref>.* \n\n### Retrieve a Synonym Map ###\n\nThe following sample retrieves a synonym map.\n\n```java\nSynonymMap synonymMap = searchIndexAsyncClient.getSynonymMap(\"synonymMapName\").block();\n if (synonymMap != null) {\n     System.out.println(\"The synonymMap name is \" + synonymMap.getName());\n }\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#getSynonymMap(String)\"></xref>.* \n\n### Update a Synonym Map ###\n\nThe following sample updates a synonym map.\n\n```java\nSynonymMap synonymMap = searchIndexAsyncClient.getSynonymMap(\"synonymMapName\").block();\n if (synonymMap != null) {\n     synonymMap.setSynonyms(\"hotel, motel, inn\");\n     searchIndexAsyncClient.createOrUpdateSynonymMap(synonymMap).block();\n }\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#createOrUpdateSynonymMap(SynonymMap)\"></xref>.* \n\n### Delete a Synonym Map ###\n\nThe following sample deletes a synonym map.\n\n```java\nString synonymMapName = \"synonymMapName\";\n searchIndexAsyncClient.deleteSynonymMap(synonymMapName).block();\n```\n\n *For a synchronous sample see <xref uid=\"com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexClient#deleteSynonymMap(String)\"></xref>.* \n\n\n[a simple Hotel data set]: https://github.com/Azure-Samples/azure-search-sample-data\n[import into your own index from the Azure portal.]: https://learn.microsoft.com/azure/search/search-get-started-portal#step-1---start-the-import-data-wizard-and-create-a-data-source\n[our Samples]: https://github.com/Azure/azure-sdk-for-java/blob/main/sdk/search/azure-search-documents/src/samples/README.md"
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.8.0-beta.1
