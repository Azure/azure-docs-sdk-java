### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient
  id: SearchIndexAsyncClient
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes
  children:
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields(java.lang.Class<?>,com.azure.search.documents.indexes.models.FieldBuilderOptions)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint()
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics()
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse()
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames()
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes()
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames()
  - com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps()
  langs:
  - java
  name: SearchIndexAsyncClient
  nameWithType: SearchIndexAsyncClient
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient
  type: Class
  package: com.azure.search.documents.indexes
  summary: This class provides a client that contains the operations for creating, getting, listing, updating, or deleting indexes or synonym map and analyzing text in an Azure Cognitive Search service.
  syntax:
    content: public final class SearchIndexAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.SearchIndexAsyncClient(java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)
  id: SearchIndexAsyncClient(java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: SearchIndexAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  nameWithType: SearchIndexAsyncClient.SearchIndexAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.SearchIndexAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.SearchIndexAsyncClient*
  type: Constructor
  package: com.azure.search.documents.indexes
  syntax:
    content: " SearchIndexAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
    parameters:
    - id: endpoint
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.search.documents.SearchServiceVersion
    - id: httpPipeline
      type: com.azure.core.http.HttpPipeline
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  id: analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  nameWithType: SearchIndexAsyncClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Shows how an analyzer breaks text into tokens.


    **Code Sample**


    Analyzer text with LexicalTokenizerName "Classic" in search index "searchIndex".


    ```java

    searchIndexAsyncClient.analyzeText("searchIndex",
         new AnalyzeTextOptions("The quick brown fox", LexicalTokenizerName.CLASSIC))
         .subscribe(tokenInfo ->
             System.out.printf("The token emitted by the analyzer is %s.%n", tokenInfo.getToken()));
    ```
  syntax:
    content: public PagedFlux<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to test an analyzer
    - id: analyzeTextOptions
      type: com.azure.search.documents.indexes.models.AnalyzeTextOptions
      description: the text and analyzer or analysis components to test
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.AnalyzedTokenInfo>
      description: a response containing analyze result.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields(java.lang.Class<?>,com.azure.search.documents.indexes.models.FieldBuilderOptions)
  id: buildSearchFields(java.lang.Class<?>,com.azure.search.documents.indexes.models.FieldBuilderOptions)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: buildSearchFields(Class<?> model, FieldBuilderOptions options)
  nameWithType: SearchIndexAsyncClient.buildSearchFields(Class<?> model, FieldBuilderOptions options)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields(Class<?> model, FieldBuilderOptions options)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields*
  type: Method
  package: com.azure.search.documents.indexes
  summary: Convenience method to convert a <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class's</xref> <xref uid="" data-throw-if-not-resolved="false">Fields</xref> and <xref uid="" data-throw-if-not-resolved="false">Methods</xref> into <xref uid="com.azure.search.documents.indexes.models.SearchField" data-throw-if-not-resolved="false">SearchFields</xref> to help aid the creation of a <xref uid="com.azure.search.documents.indexes.models.SearchField" data-throw-if-not-resolved="false">SearchField</xref> which represents the <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref>.
  syntax:
    content: public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options)
    parameters:
    - id: model
      type: java.lang.Class<?>
      description: >-
        The model <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> that will have <xref uid="com.azure.search.documents.indexes.models.SearchField" data-throw-if-not-resolved="false">SearchFields</xref> generated from its
         structure.
    - id: options
      type: com.azure.search.documents.indexes.models.FieldBuilderOptions
      description: Configuration used to determine generation of the <xref uid="com.azure.search.documents.indexes.models.SearchField" data-throw-if-not-resolved="false">SearchFields</xref>.
    return:
      type: java.util.List<com.azure.search.documents.indexes.models.SearchField>
      description: A list <xref uid="com.azure.search.documents.indexes.models.SearchField" data-throw-if-not-resolved="false">SearchFields</xref> which represent the model <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref>.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)
  id: createIndex(com.azure.search.documents.indexes.models.SearchIndex)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createIndex(SearchIndex index)
  nameWithType: SearchIndexAsyncClient.createIndex(SearchIndex index)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex(SearchIndex index)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search index.


    **Code Sample**


    Create search index named "searchIndex".


    ```java

    List<SearchField> searchFields = Arrays.asList(
         new SearchField("hotelId", SearchFieldDataType.STRING).setKey(true),
         new SearchField("hotelName", SearchFieldDataType.STRING).setSearchable(true)
     );
     SearchIndex searchIndex = new SearchIndex("searchIndex", searchFields);
     searchIndexAsyncClient.createIndex(searchIndex)
         .subscribe(indexFromService ->
             System.out.printf("The index name is %s. The etag of index is %s.%n", indexFromService.getName(),
             indexFromService.getETag()));
    ```
  syntax:
    content: public Mono<SearchIndex> createIndex(SearchIndex index)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: definition of the index to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndex>
      description: the created Index.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex)
  id: createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createIndexWithResponse(SearchIndex index)
  nameWithType: SearchIndexAsyncClient.createIndexWithResponse(SearchIndex index)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse(SearchIndex index)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Creates a new Azure Cognitive Search index.\n\n**Code Sample**\n\nCreate search index named \"searchIndex\".\n\n```java\nList<SearchField> searchFields = Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING).setKey(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING).setSearchable(true)\n );\n SearchIndex searchIndex = new SearchIndex(\"searchIndex\", searchFields);\n \n searchIndexAsyncClient.createIndexWithResponse(searchIndex)\n     .subscribe(indexFromServiceResponse ->\n         System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n         indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName()));\n```"
  syntax:
    content: public Mono<Response<SearchIndex>> createIndexWithResponse(SearchIndex index)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: definition of the index to create
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>>
      description: a response containing the created Index.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)
  id: createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createOrUpdateIndex(SearchIndex index)
  nameWithType: SearchIndexAsyncClient.createOrUpdateIndex(SearchIndex index)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex(SearchIndex index)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search index or updates an index if it already exists.


    **Code Sample**


    Create or update search index named "searchIndex".


    ```java

    searchIndexAsyncClient.getIndex("searchIndex")
         .doOnNext(indexFromService -> {
             indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester("sg",
                 Collections.singletonList("hotelName"))));
         })
         .flatMap(index -> searchIndexAsyncClient.createOrUpdateIndex(index))
         .subscribe(updatedIndex ->
             System.out.printf("The index name is %s. The suggester name of index is %s.%n",
                 updatedIndex.getName(), updatedIndex.getSuggesters().get(0).getName()));
    ```
  syntax:
    content: public Mono<SearchIndex> createOrUpdateIndex(SearchIndex index)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the definition of the <xref uid="com.azure.search.documents.indexes.models.SearchIndex" data-throw-if-not-resolved="false">SearchIndex</xref> to create or update.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndex>
      description: the index that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean)
  id: createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)
  nameWithType: SearchIndexAsyncClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search index or updates an index if it already exists.


    **Code Sample**


    Create or update search index named "searchIndex".


    ```java

    SearchIndex indexFromService = searchIndexClient.getIndex("searchIndex");
     indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester("sg",
         Collections.singletonList("hotelName"))));
     Response<SearchIndex> updatedIndexResponse = searchIndexClient.createOrUpdateIndexWithResponse(indexFromService, true,
         false, new Context(key1, value1));
     System.out.printf("The status code of the normal response is %s.%n"
             + "The index name is %s. The etag of index is %s.%n", updatedIndexResponse.getStatusCode(),
         updatedIndexResponse.getValue().getName(), updatedIndexResponse.getValue().getETag());
    ```
  syntax:
    content: public Mono<Response<SearchIndex>> createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the definition of the index to create or update
    - id: allowIndexDowntime
      type: boolean
      description: >-
        allows new analyzers, tokenizers, token filters, or char filters to be added to an
         index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests
         to fail. Performance and write availability of the index can be impaired for several minutes after the index is
         updated, or longer for very large indexes
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>index</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>>
      description: a response containing the index that was created or updated
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  id: createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createOrUpdateSynonymMap(SynonymMap synonymMap)
  nameWithType: SearchIndexAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap(SynonymMap synonymMap)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists.


    **Code Sample**


    Create or update synonym map named "synonymMap".


    ```java

    searchIndexAsyncClient.getSynonymMap("searchIndex")
         .doOnNext(synonymMap -> synonymMap
             .setSynonyms("United States, United States of America, USA, America\nWashington, Wash. => WA"))
         .flatMap(synonymMap -> searchIndexAsyncClient.createOrUpdateSynonymMap(synonymMap))
         .subscribe(updatedSynonymMap ->
             System.out.printf("The synonym map name is %s. The synonyms are %s.%n", updatedSynonymMap.getName(),
             updatedSynonymMap.getSynonyms()));
    ```
  syntax:
    content: public Mono<SynonymMap> createOrUpdateSynonymMap(SynonymMap synonymMap)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> to create or update
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SynonymMap>
      description: the synonym map that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)
  id: createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
  nameWithType: SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists.


    **Code Sample**


    Create or update synonym map named "synonymMap".


    ```java

    searchIndexAsyncClient.getSynonymMap("searchIndex")
         .flatMap(synonymMap -> {
             synonymMap.setSynonyms(
                 "United States, United States of America, USA, America\nWashington, Wash. => WA");
             return searchIndexAsyncClient.createOrUpdateSynonymMapWithResponse(synonymMap, true);
         })
         .subscribe(updatedSynonymMap ->
             System.out.printf("The status code of the normal response is %s.%n"
                 + "The synonym map name is %s. The synonyms are %s.%n", updatedSynonymMap.getStatusCode(),
             updatedSynonymMap.getValue().getName(), updatedSynonymMap.getValue().getSynonyms()));
    ```
  syntax:
    content: public Mono<Response<SynonymMap>> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> to create or update
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>synonymMap</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>>
      description: a response containing the synonym map that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  id: createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createSynonymMap(SynonymMap synonymMap)
  nameWithType: SearchIndexAsyncClient.createSynonymMap(SynonymMap synonymMap)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap(SynonymMap synonymMap)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map.


    **Code Sample**


    Create synonym map named "synonymMap".


    ```java

    SynonymMap synonymMap = new SynonymMap("synonymMap",
         "United States, United States of America, USA\nWashington, Wash. => WA");
     searchIndexAsyncClient.createSynonymMap(synonymMap)
         .subscribe(synonymMapFromService ->
             System.out.printf("The synonym map name is %s. The etag of synonym map is %s.%n",
             synonymMapFromService.getName(), synonymMapFromService.getETag()));
    ```
  syntax:
    content: public Mono<SynonymMap> createSynonymMap(SynonymMap synonymMap)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the synonym map to create
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SynonymMap>
      description: the created <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref>.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap)
  id: createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: createSynonymMapWithResponse(SynonymMap synonymMap)
  nameWithType: SearchIndexAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse(SynonymMap synonymMap)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search synonym map.


    **Code Sample**


    Create synonym map named "synonymMap".


    ```java

    SynonymMap synonymMap = new SynonymMap("synonymMap",
         "United States, United States of America, USA\nWashington, Wash. => WA");
     searchIndexAsyncClient.createSynonymMapWithResponse(synonymMap)
         .subscribe(synonymMapFromService ->
             System.out.printf("The status code of the response is %d.%n"
                 + "The synonym map name is %s. The etag of synonym map is %s.%n",
                 synonymMapFromService.getStatusCode(),
             synonymMapFromService.getValue().getName(), synonymMapFromService.getValue().getETag()));
    ```
  syntax:
    content: public Mono<Response<SynonymMap>> createSynonymMapWithResponse(SynonymMap synonymMap)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the definition of the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> to create
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>>
      description: a response containing the created SynonymMap.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex(java.lang.String)
  id: deleteIndex(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: deleteIndex(String indexName)
  nameWithType: SearchIndexAsyncClient.deleteIndex(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search index and all the documents it contains.


    **Code Sample**


    Delete search index with name "searchIndex".


    ```java

    searchIndexAsyncClient.deleteIndex("searchIndex")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteIndex(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index to delete
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean)
  id: deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)
  nameWithType: SearchIndexAsyncClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search index and all the documents it contains.


    **Code Sample**


    Delete search index with name "searchIndex".


    ```java

    searchIndexAsyncClient.getIndex("searchIndex")
         .flatMap(indexFromService -> searchIndexAsyncClient.deleteIndexWithResponse(indexFromService, true))
         .subscribe(deleteResponse ->
             System.out.printf("The status code of the response is %d.%n", deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged)
    parameters:
    - id: index
      type: com.azure.search.documents.indexes.models.SearchIndex
      description: the <xref uid="com.azure.search.documents.indexes.models.SearchIndex" data-throw-if-not-resolved="false">SearchIndex</xref> to delete.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>index</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap(java.lang.String)
  id: deleteSynonymMap(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: deleteSynonymMap(String synonymMapName)
  nameWithType: SearchIndexAsyncClient.deleteSynonymMap(String synonymMapName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap(String synonymMapName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search synonym map.


    **Code Sample**


    Delete synonym map with name "synonymMap".


    ```java

    searchIndexAsyncClient.deleteSynonymMap("synonymMap")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteSynonymMap(String synonymMapName)
    parameters:
    - id: synonymMapName
      type: java.lang.String
      description: the name of the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> to delete
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)
  id: deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
  nameWithType: SearchIndexAsyncClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search synonym map.


    **Code Sample**


    Delete synonym map with name "synonymMap".


    ```java

    searchIndexAsyncClient.getSynonymMap("synonymMap")
         .flatMap(synonymMap -> searchIndexAsyncClient.deleteSynonymMapWithResponse(synonymMap, true))
         .subscribe(response -> System.out.println("The status code of the response is" + response.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged)
    parameters:
    - id: synonymMap
      type: com.azure.search.documents.indexes.models.SynonymMap
      description: the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> to delete.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>synonymMap</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint()
  id: getEndpoint()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getEndpoint()
  nameWithType: SearchIndexAsyncClient.getEndpoint()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint*
  type: Method
  package: com.azure.search.documents.indexes
  summary: Gets the endpoint for the Azure Cognitive Search service.
  syntax:
    content: public String getEndpoint()
    return:
      type: java.lang.String
      description: the endpoint value.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex(java.lang.String)
  id: getIndex(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getIndex(String indexName)
  nameWithType: SearchIndexAsyncClient.getIndex(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves an index definition from the Azure Cognitive Search.


    **Code Sample**


    Get search index with name "searchIndex".


    ```java

    searchIndexAsyncClient.getIndex("searchIndex")
         .subscribe(indexFromService ->
             System.out.printf("The index name is %s. The etag of index is %s.%n", indexFromService.getName(),
                 indexFromService.getETag()));
    ```
  syntax:
    content: public Mono<SearchIndex> getIndex(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: The name of the index to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndex>
      description: the Index.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics(java.lang.String)
  id: getIndexStatistics(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getIndexStatistics(String indexName)
  nameWithType: SearchIndexAsyncClient.getIndexStatistics(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns statistics for the given index, including a document count and storage usage.


    **Code Sample**


    Get search index "searchIndex" statistics.


    ```java

    searchIndexAsyncClient.getIndexStatistics("searchIndex")
         .subscribe(statistics ->
             System.out.printf("There are %d documents and storage size of %d available in 'searchIndex'.%n",
             statistics.getDocumentCount(), statistics.getStorageSize()));
    ```
  syntax:
    content: public Mono<SearchIndexStatistics> getIndexStatistics(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to retrieve statistics
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexStatistics>
      description: the index statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse(java.lang.String)
  id: getIndexStatisticsWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getIndexStatisticsWithResponse(String indexName)
  nameWithType: SearchIndexAsyncClient.getIndexStatisticsWithResponse(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns statistics for the given index, including a document count and storage usage.


    **Code Sample**


    Get search index "searchIndex" statistics.


    ```java

    searchIndexAsyncClient.getIndexStatisticsWithResponse("searchIndex")
         .subscribe(statistics -> System.out.printf("The status code of the response is %s.%n"
                 + "There are %d documents and storage size of %d available in 'searchIndex'.%n",
             statistics.getStatusCode(), statistics.getValue().getDocumentCount(),
             statistics.getValue().getStorageSize()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexStatistics>> getIndexStatisticsWithResponse(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index for which to retrieve statistics
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexStatistics>>
      description: a response containing the index statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse(java.lang.String)
  id: getIndexWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getIndexWithResponse(String indexName)
  nameWithType: SearchIndexAsyncClient.getIndexWithResponse(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves an index definition from the Azure Cognitive Search.


    **Code Sample**


    Get search index with "searchIndex.


    ```java

    searchIndexAsyncClient.getIndexWithResponse("searchIndex")
         .subscribe(indexFromServiceResponse ->
             System.out.printf("The status code of the response is %s. The index name is %s.%n",
                 indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndex>> getIndexWithResponse(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the index to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>>
      description: a response containing the Index.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient(java.lang.String)
  id: getSearchAsyncClient(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getSearchAsyncClient(String indexName)
  nameWithType: SearchIndexAsyncClient.getSearchAsyncClient(String indexName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient(String indexName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient*
  type: Method
  package: com.azure.search.documents.indexes
  summary: Initializes a new <xref uid="com.azure.search.documents.SearchAsyncClient" data-throw-if-not-resolved="false">SearchAsyncClient</xref> using the given Index name and the same configuration as the SearchServiceAsyncClient.
  syntax:
    content: public SearchAsyncClient getSearchAsyncClient(String indexName)
    parameters:
    - id: indexName
      type: java.lang.String
      description: the name of the Index for the client
    return:
      type: com.azure.search.documents.SearchAsyncClient
      description: a <xref uid="com.azure.search.documents.SearchAsyncClient" data-throw-if-not-resolved="false">SearchAsyncClient</xref> created from the service client configuration
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics()
  id: getServiceStatistics()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getServiceStatistics()
  nameWithType: SearchIndexAsyncClient.getServiceStatistics()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns service level statistics for a search service, including service counters and limits.


    Contains the tracking ID sent with the request to help with debugging


    **Code Sample**


    Get service statistics.


    ```java

    searchIndexAsyncClient.getServiceStatistics()
         .subscribe(serviceStatistics -> System.out.printf("There are %s search indexes in your service.%n",
             serviceStatistics.getCounters().getIndexCounter()));
    ```
  syntax:
    content: public Mono<SearchServiceStatistics> getServiceStatistics()
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchServiceStatistics>
      description: the search service statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse()
  id: getServiceStatisticsWithResponse()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getServiceStatisticsWithResponse()
  nameWithType: SearchIndexAsyncClient.getServiceStatisticsWithResponse()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns service level statistics for a search service, including service counters and limits.


    **Code Sample**


    Get service statistics.


    ```java

    searchIndexAsyncClient.getServiceStatisticsWithResponse()
         .subscribe(serviceStatistics ->
             System.out.printf("The status code of the response is %s.%n"
                     + "There are %s search indexes in your service.%n",
             serviceStatistics.getStatusCode(),
             serviceStatistics.getValue().getCounters().getIndexCounter()));
    ```
  syntax:
    content: public Mono<Response<SearchServiceStatistics>> getServiceStatisticsWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchServiceStatistics>>
      description: the search service statistics result.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap(java.lang.String)
  id: getSynonymMap(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getSynonymMap(String synonymMapName)
  nameWithType: SearchIndexAsyncClient.getSynonymMap(String synonymMapName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap(String synonymMapName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a synonym map definition.


    **Code Sample**


    Get synonym map with name "synonymMap".


    ```java

    searchIndexAsyncClient.getSynonymMap("synonymMap")
         .subscribe(synonymMapFromService ->
             System.out.printf("The synonym map is %s. The etag of synonym map is %s.%n",
                 synonymMapFromService.getName(), synonymMapFromService.getETag()));
    ```
  syntax:
    content: public Mono<SynonymMap> getSynonymMap(String synonymMapName)
    parameters:
    - id: synonymMapName
      type: java.lang.String
      description: name of the synonym map to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SynonymMap>
      description: the <xref uid="com.azure.search.documents.indexes.models.SynonymMap" data-throw-if-not-resolved="false">SynonymMap</xref> definition
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse(java.lang.String)
  id: getSynonymMapWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: getSynonymMapWithResponse(String synonymMapName)
  nameWithType: SearchIndexAsyncClient.getSynonymMapWithResponse(String synonymMapName)
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse(String synonymMapName)
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a synonym map definition.


    **Code Sample**


    Get synonym map with name "synonymMap".


    ```java

    searchIndexAsyncClient.getSynonymMap("synonymMap")
         .subscribe(synonymMapFromService ->
             System.out.printf("The synonym map is %s. The etag of synonym map is %s.%n",
                 synonymMapFromService.getName(), synonymMapFromService.getETag()));
    ```
  syntax:
    content: public Mono<Response<SynonymMap>> getSynonymMapWithResponse(String synonymMapName)
    parameters:
    - id: synonymMapName
      type: java.lang.String
      description: name of the synonym map to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>>
      description: a response containing the SynonymMap.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames()
  id: listIndexNames()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: listIndexNames()
  nameWithType: SearchIndexAsyncClient.listIndexNames()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexes names for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexes names.


    ```java

    searchIndexAsyncClient.listIndexNames()
         .subscribe(indexName -> System.out.printf("The index name is %s.%n", indexName));
    ```
  syntax:
    content: public PagedFlux<String> listIndexNames()
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: a reactive response emitting the list of index names.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes()
  id: listIndexes()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: listIndexes()
  nameWithType: SearchIndexAsyncClient.listIndexes()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexes available for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexes.


    ```java

    searchIndexAsyncClient.listIndexes()
         .subscribe(index ->
             System.out.printf("The index name is %s. The etag of index is %s.%n", index.getName(),
                 index.getETag()));
    ```
  syntax:
    content: public PagedFlux<SearchIndex> listIndexes()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndex>
      description: a reactive response emitting the list of indexes.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames()
  id: listSynonymMapNames()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: listSynonymMapNames()
  nameWithType: SearchIndexAsyncClient.listSynonymMapNames()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all synonym map names for an Azure Cognitive Search service.


    **Code Sample**


    List all synonym map names.


    ```java

    searchIndexAsyncClient.listSynonymMapNames()
         .subscribe(synonymMap -> System.out.printf("The synonymMap name is %s.%n", synonymMap));
    ```
  syntax:
    content: public PagedFlux<String> listSynonymMapNames()
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: a reactive response emitting the list of synonym map names.
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps()
  id: listSynonymMaps()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexAsyncClient
  langs:
  - java
  name: listSynonymMaps()
  nameWithType: SearchIndexAsyncClient.listSynonymMaps()
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps()
  overload: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all synonym maps available for an Azure Cognitive Search service.


    **Code Sample**


    List all synonym maps.


    ```java

    searchIndexAsyncClient.listSynonymMaps()
         .subscribe(synonymMap -> System.out.printf("The synonymMap name is %s. The etag of synonymMap is %s.%n",
             synonymMap.getName(), synonymMap.getETag()));
    ```
  syntax:
    content: public PagedFlux<SynonymMap> listSynonymMaps()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SynonymMap>
      description: a reactive response emitting the list of synonym maps.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.SearchServiceVersion
  name: SearchServiceVersion
  nameWithType: SearchServiceVersion
  fullName: com.azure.search.documents.SearchServiceVersion
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.SearchIndexAsyncClient*
  name: SearchIndexAsyncClient
  nameWithType: SearchIndexAsyncClient.SearchIndexAsyncClient
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.SearchIndexAsyncClient
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint*
  name: getEndpoint
  nameWithType: SearchIndexAsyncClient.getEndpoint
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getEndpoint
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.SearchAsyncClient
  name: SearchAsyncClient
  nameWithType: SearchAsyncClient
  fullName: com.azure.search.documents.SearchAsyncClient
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient*
  name: getSearchAsyncClient
  nameWithType: SearchIndexAsyncClient.getSearchAsyncClient
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSearchAsyncClient
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchIndex
  name: SearchIndex
  nameWithType: SearchIndex
  fullName: com.azure.search.documents.indexes.models.SearchIndex
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndex>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndex
    name: SearchIndex
    fullName: com.azure.search.documents.indexes.models.SearchIndex
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex*
  name: createIndex
  nameWithType: SearchIndexAsyncClient.createIndex
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndex
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndex>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndex
    name: SearchIndex
    fullName: com.azure.search.documents.indexes.models.SearchIndex
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse*
  name: createIndexWithResponse
  nameWithType: SearchIndexAsyncClient.createIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex*
  name: getIndex
  nameWithType: SearchIndexAsyncClient.getIndex
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndex
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse*
  name: getIndexWithResponse
  nameWithType: SearchIndexAsyncClient.getIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexStatistics>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexStatistics
    name: SearchIndexStatistics
    fullName: com.azure.search.documents.indexes.models.SearchIndexStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics*
  name: getIndexStatistics
  nameWithType: SearchIndexAsyncClient.getIndexStatistics
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatistics
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexStatistics>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexStatistics
    name: SearchIndexStatistics
    fullName: com.azure.search.documents.indexes.models.SearchIndexStatistics
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse*
  name: getIndexStatisticsWithResponse
  nameWithType: SearchIndexAsyncClient.getIndexStatisticsWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getIndexStatisticsWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndex>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndex
    name: SearchIndex
    fullName: com.azure.search.documents.indexes.models.SearchIndex
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes*
  name: listIndexes
  nameWithType: SearchIndexAsyncClient.listIndexes
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexes
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<java.lang.String>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames*
  name: listIndexNames
  nameWithType: SearchIndexAsyncClient.listIndexNames
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listIndexNames
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex*
  name: createOrUpdateIndex
  nameWithType: SearchIndexAsyncClient.createOrUpdateIndex
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndex
  package: com.azure.search.documents.indexes
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse*
  name: createOrUpdateIndexWithResponse
  nameWithType: SearchIndexAsyncClient.createOrUpdateIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex*
  name: deleteIndex
  nameWithType: SearchIndexAsyncClient.deleteIndex
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndex
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse*
  name: deleteIndexWithResponse
  nameWithType: SearchIndexAsyncClient.deleteIndexWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteIndexWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  name: AnalyzeTextOptions
  nameWithType: AnalyzeTextOptions
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.AnalyzedTokenInfo>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
    name: AnalyzedTokenInfo
    fullName: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText*
  name: analyzeText
  nameWithType: SearchIndexAsyncClient.analyzeText
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.analyzeText
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SynonymMap
  name: SynonymMap
  nameWithType: SynonymMap
  fullName: com.azure.search.documents.indexes.models.SynonymMap
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SynonymMap>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SynonymMap
    name: SynonymMap
    fullName: com.azure.search.documents.indexes.models.SynonymMap
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap*
  name: createSynonymMap
  nameWithType: SearchIndexAsyncClient.createSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMap
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SynonymMap>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SynonymMap
    name: SynonymMap
    fullName: com.azure.search.documents.indexes.models.SynonymMap
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse*
  name: createSynonymMapWithResponse
  nameWithType: SearchIndexAsyncClient.createSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap*
  name: getSynonymMap
  nameWithType: SearchIndexAsyncClient.getSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse*
  name: getSynonymMapWithResponse
  nameWithType: SearchIndexAsyncClient.getSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SynonymMap>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SynonymMap
    name: SynonymMap
    fullName: com.azure.search.documents.indexes.models.SynonymMap
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps*
  name: listSynonymMaps
  nameWithType: SearchIndexAsyncClient.listSynonymMaps
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMaps
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames*
  name: listSynonymMapNames
  nameWithType: SearchIndexAsyncClient.listSynonymMapNames
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.listSynonymMapNames
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap*
  name: createOrUpdateSynonymMap
  nameWithType: SearchIndexAsyncClient.createOrUpdateSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse*
  name: createOrUpdateSynonymMapWithResponse
  nameWithType: SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.createOrUpdateSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap*
  name: deleteSynonymMap
  nameWithType: SearchIndexAsyncClient.deleteSynonymMap
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMap
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse*
  name: deleteSynonymMapWithResponse
  nameWithType: SearchIndexAsyncClient.deleteSynonymMapWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.deleteSynonymMapWithResponse
  package: com.azure.search.documents.indexes
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.models.FieldBuilderOptions
  name: FieldBuilderOptions
  nameWithType: FieldBuilderOptions
  fullName: com.azure.search.documents.indexes.models.FieldBuilderOptions
- uid: java.util.List<com.azure.search.documents.indexes.models.SearchField>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchField
    name: SearchField
    fullName: com.azure.search.documents.indexes.models.SearchField
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields*
  name: buildSearchFields
  nameWithType: SearchIndexAsyncClient.buildSearchFields
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.buildSearchFields
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchServiceStatistics>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchServiceStatistics
    name: SearchServiceStatistics
    fullName: com.azure.search.documents.indexes.models.SearchServiceStatistics
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics*
  name: getServiceStatistics
  nameWithType: SearchIndexAsyncClient.getServiceStatistics
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatistics
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchServiceStatistics>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchServiceStatistics
    name: SearchServiceStatistics
    fullName: com.azure.search.documents.indexes.models.SearchServiceStatistics
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse*
  name: getServiceStatisticsWithResponse
  nameWithType: SearchIndexAsyncClient.getServiceStatisticsWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexAsyncClient.getServiceStatisticsWithResponse
  package: com.azure.search.documents.indexes
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.search.documents.indexes.models.SearchIndexStatistics
  name: SearchIndexStatistics
  nameWithType: SearchIndexStatistics
  fullName: com.azure.search.documents.indexes.models.SearchIndexStatistics
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
  name: AnalyzedTokenInfo
  nameWithType: AnalyzedTokenInfo
  fullName: com.azure.search.documents.indexes.models.AnalyzedTokenInfo
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.search.documents.indexes.models.SearchField
  name: SearchField
  nameWithType: SearchField
  fullName: com.azure.search.documents.indexes.models.SearchField
- uid: com.azure.search.documents.indexes.models.SearchServiceStatistics
  name: SearchServiceStatistics
  nameWithType: SearchServiceStatistics
  fullName: com.azure.search.documents.indexes.models.SearchServiceStatistics
