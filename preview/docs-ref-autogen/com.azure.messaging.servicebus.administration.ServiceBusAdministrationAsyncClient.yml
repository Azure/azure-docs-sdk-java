### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  id: ServiceBusAdministrationAsyncClient
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration
  children:
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateQueueOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueueWithResponse(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateQueueOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule(java.lang.String,java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateRuleOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRuleWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateRuleOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateTopicOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopicWithResponse(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateTopicOptions)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueue(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueueWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRule(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRuleWithResponse(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscription(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopic(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopicWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespaceProperties()
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse()
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExists(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRuleWithResponse(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExists(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExists(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicWithResponse(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listQueues()
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listRules(java.lang.String,java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listSubscriptions(java.lang.String)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listTopics()
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueue(com.azure.messaging.servicebus.administration.models.QueueProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueueWithResponse(com.azure.messaging.servicebus.administration.models.QueueProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRule(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.RuleProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRuleWithResponse(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.RuleProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscription(com.azure.messaging.servicebus.administration.models.SubscriptionProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse(com.azure.messaging.servicebus.administration.models.SubscriptionProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopic(com.azure.messaging.servicebus.administration.models.TopicProperties)
  - com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopicWithResponse(com.azure.messaging.servicebus.administration.models.TopicProperties)
  langs:
  - java
  name: ServiceBusAdministrationAsyncClient
  nameWithType: ServiceBusAdministrationAsyncClient
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  type: Class
  package: com.azure.messaging.servicebus.administration
  summary: An **asynchronous** client for managing a Service Bus namespace.
  syntax:
    content: public final class ServiceBusAdministrationAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient(com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl,com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer)
  id: ServiceBusAdministrationAsyncClient(com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl,com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: ServiceBusAdministrationAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)
  nameWithType: ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient*
  type: Constructor
  package: com.azure.messaging.servicebus.administration
  summary: Creates a new instance with the given management client and serializer.
  syntax:
    content: " ServiceBusAdministrationAsyncClient(ServiceBusManagementClientImpl managementClient, ServiceBusManagementSerializer serializer)"
    parameters:
    - id: managementClient
      type: com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl
      description: Client to make management calls.
    - id: serializer
      type: com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer
      description: Serializer to deserialize ATOM XML responses.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue(java.lang.String)
  id: createQueue(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createQueue(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.createQueue(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a queue with the given name.
  syntax:
    content: public Mono<QueueProperties> createQueue(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueProperties>
      description: A Mono that completes with information about the created queue.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateQueueOptions)
  id: createQueue(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateQueueOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createQueue(String queueName, CreateQueueOptions queueOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createQueue(String queueName, CreateQueueOptions queueOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue(String queueName, CreateQueueOptions queueOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a queue with the <xref uid="com.azure.messaging.servicebus.administration.models.CreateQueueOptions" data-throw-if-not-resolved="false">CreateQueueOptions</xref> and given queue name.
  syntax:
    content: public Mono<QueueProperties> createQueue(String queueName, CreateQueueOptions queueOptions)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue to create.
    - id: queueOptions
      type: com.azure.messaging.servicebus.administration.models.CreateQueueOptions
      description: Options about the queue to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueProperties>
      description: A Mono that completes with information about the created queue.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueueWithResponse(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateQueueOptions)
  id: createQueueWithResponse(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateQueueOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createQueueWithResponse(String queueName, CreateQueueOptions queueOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createQueueWithResponse(String queueName, CreateQueueOptions queueOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueueWithResponse(String queueName, CreateQueueOptions queueOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a queue and returns the created queue in addition to the HTTP response.
  syntax:
    content: public Mono<Response<QueueProperties>> createQueueWithResponse(String queueName, CreateQueueOptions queueOptions)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue to create.
    - id: queueOptions
      type: com.azure.messaging.servicebus.administration.models.CreateQueueOptions
      description: Options about the queue to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.QueueProperties>>
      description: A Mono that returns the created queue in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule(java.lang.String,java.lang.String,java.lang.String)
  id: createRule(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createRule(String topicName, String subscriptionName, String ruleName)
  nameWithType: ServiceBusAdministrationAsyncClient.createRule(String topicName, String subscriptionName, String ruleName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule(String topicName, String subscriptionName, String ruleName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a rule under the given topic and subscription
  syntax:
    content: public Mono<RuleProperties> createRule(String topicName, String subscriptionName, String ruleName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with rule.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription associated with the rule.
    - id: ruleName
      type: java.lang.String
      description: Name of the rule.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.RuleProperties>
      description: A Mono that completes with information about the created rule.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule(java.lang.String,java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateRuleOptions)
  id: createRule(java.lang.String,java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateRuleOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createRule(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createRule(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a rule with the <xref uid="com.azure.messaging.servicebus.administration.models.CreateRuleOptions" data-throw-if-not-resolved="false">CreateRuleOptions</xref>.
  syntax:
    content: public Mono<RuleProperties> createRule(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with rule.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription associated with the rule.
    - id: ruleName
      type: java.lang.String
      description: Name of the rule.
    - id: ruleOptions
      type: com.azure.messaging.servicebus.administration.models.CreateRuleOptions
      description: Information about the rule to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.RuleProperties>
      description: A Mono that completes with information about the created rule.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRuleWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateRuleOptions)
  id: createRuleWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateRuleOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createRuleWithResponse(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createRuleWithResponse(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRuleWithResponse(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRuleWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a rule and returns the created rule in addition to the HTTP response.
  syntax:
    content: public Mono<Response<RuleProperties>> createRuleWithResponse(String topicName, String subscriptionName, String ruleName, CreateRuleOptions ruleOptions)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with rule.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription associated with the rule.
    - id: ruleName
      type: java.lang.String
      description: Name of the rule.
    - id: ruleOptions
      type: com.azure.messaging.servicebus.administration.models.CreateRuleOptions
      description: Information about the rule to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.RuleProperties>>
      description: A Mono that returns the created rule in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription(java.lang.String,java.lang.String)
  id: createSubscription(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createSubscription(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.createSubscription(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a subscription with the given topic and subscription names.
  syntax:
    content: public Mono<SubscriptionProperties> createSubscription(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
      description: A Mono that completes with information about the created subscription.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions)
  id: createSubscription(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createSubscription(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createSubscription(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a subscription with the <xref uid="com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions" data-throw-if-not-resolved="false">CreateSubscriptionOptions</xref>.
  syntax:
    content: public Mono<SubscriptionProperties> createSubscription(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    - id: subscriptionOptions
      type: com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions
      description: Information about the subscription to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
      description: A Mono that completes with information about the created subscription.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions)
  id: createSubscriptionWithResponse(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createSubscriptionWithResponse(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a subscription and returns the created subscription in addition to the HTTP response.
  syntax:
    content: public Mono<Response<SubscriptionProperties>> createSubscriptionWithResponse(String topicName, String subscriptionName, CreateSubscriptionOptions subscriptionOptions)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    - id: subscriptionOptions
      type: com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions
      description: Information about the subscription to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>>
      description: A Mono that returns the created subscription in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic(java.lang.String)
  id: createTopic(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createTopic(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.createTopic(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a topic with the given name.
  syntax:
    content: public Mono<TopicProperties> createTopic(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicProperties>
      description: A Mono that completes with information about the created topic.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateTopicOptions)
  id: createTopic(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateTopicOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createTopic(String topicName, CreateTopicOptions topicOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createTopic(String topicName, CreateTopicOptions topicOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic(String topicName, CreateTopicOptions topicOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a topic with the <xref uid="com.azure.messaging.servicebus.administration.models.CreateTopicOptions" data-throw-if-not-resolved="false">CreateTopicOptions</xref>.
  syntax:
    content: public Mono<TopicProperties> createTopic(String topicName, CreateTopicOptions topicOptions)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic to create.
    - id: topicOptions
      type: com.azure.messaging.servicebus.administration.models.CreateTopicOptions
      description: The options used to create the topic.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicProperties>
      description: A Mono that completes with information about the created topic.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopicWithResponse(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateTopicOptions)
  id: createTopicWithResponse(java.lang.String,com.azure.messaging.servicebus.administration.models.CreateTopicOptions)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: createTopicWithResponse(String topicName, CreateTopicOptions topicOptions)
  nameWithType: ServiceBusAdministrationAsyncClient.createTopicWithResponse(String topicName, CreateTopicOptions topicOptions)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopicWithResponse(String topicName, CreateTopicOptions topicOptions)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Creates a topic and returns the created topic in addition to the HTTP response.
  syntax:
    content: public Mono<Response<TopicProperties>> createTopicWithResponse(String topicName, CreateTopicOptions topicOptions)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic to create.
    - id: topicOptions
      type: com.azure.messaging.servicebus.administration.models.CreateTopicOptions
      description: The options used to create the topic.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.TopicProperties>>
      description: A Mono that returns the created topic in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueue(java.lang.String)
  id: deleteQueue(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteQueue(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteQueue(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueue(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueue*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a queue the matching `queueName`.
  syntax:
    content: public Mono<Void> deleteQueue(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the queue is deleted.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueueWithResponse(java.lang.String)
  id: deleteQueueWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteQueueWithResponse(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteQueueWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueueWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a queue the matching `queueName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteQueueWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the queue is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRule(java.lang.String,java.lang.String,java.lang.String)
  id: deleteRule(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteRule(String topicName, String subscriptionName, String ruleName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteRule(String topicName, String subscriptionName, String ruleName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRule(String topicName, String subscriptionName, String ruleName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRule*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a rule the matching `ruleName`.
  syntax:
    content: public Mono<Void> deleteRule(String topicName, String subscriptionName, String ruleName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with rule to delete.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription associated with the rule to delete.
    - id: ruleName
      type: java.lang.String
      description: Name of rule to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the rule is deleted.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRuleWithResponse(java.lang.String,java.lang.String,java.lang.String)
  id: deleteRuleWithResponse(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteRuleWithResponse(String topicName, String subscriptionName, String ruleName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteRuleWithResponse(String topicName, String subscriptionName, String ruleName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRuleWithResponse(String topicName, String subscriptionName, String ruleName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRuleWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a rule the matching `ruleName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteRuleWithResponse(String topicName, String subscriptionName, String ruleName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with rule to delete.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription associated with the rule to delete.
    - id: ruleName
      type: java.lang.String
      description: Name of rule to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the rule is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscription(java.lang.String,java.lang.String)
  id: deleteSubscription(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteSubscription(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteSubscription(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscription(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscription*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a subscription the matching `subscriptionName`.
  syntax:
    content: public Mono<Void> deleteSubscription(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription to delete.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the subscription is deleted.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse(java.lang.String,java.lang.String)
  id: deleteSubscriptionWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteSubscriptionWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a subscription the matching `subscriptionName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteSubscriptionWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription to delete.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the subscription is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopic(java.lang.String)
  id: deleteTopic(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteTopic(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteTopic(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopic(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopic*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a topic the matching `topicName`.
  syntax:
    content: public Mono<Void> deleteTopic(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to delete.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A Mono that completes when the topic is deleted.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopicWithResponse(java.lang.String)
  id: deleteTopicWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: deleteTopicWithResponse(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.deleteTopicWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopicWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Deletes a topic the matching `topicName` and returns the HTTP response.
  syntax:
    content: public Mono<Response<Void>> deleteTopicWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to delete.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A Mono that completes when the topic is deleted and returns the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespaceProperties()
  id: getNamespaceProperties()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getNamespaceProperties()
  nameWithType: ServiceBusAdministrationAsyncClient.getNamespaceProperties()
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespaceProperties()
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespaceProperties*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the Service Bus namespace.
  syntax:
    content: public Mono<NamespaceProperties> getNamespaceProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.NamespaceProperties>
      description: A Mono that completes with information about the Service Bus namespace.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse()
  id: getNamespacePropertiesWithResponse()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getNamespacePropertiesWithResponse()
  nameWithType: ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse()
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse()
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the Service Bus namespace along with its HTTP response.
  syntax:
    content: public Mono<Response<NamespaceProperties>> getNamespacePropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.NamespaceProperties>>
      description: A Mono that completes with information about the namespace and the associated HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue(java.lang.String)
  id: getQueue(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getQueue(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.getQueue(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the queue.
  syntax:
    content: public Mono<QueueProperties> getQueue(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueProperties>
      description: A Mono that completes with information about the queue.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExists(java.lang.String)
  id: getQueueExists(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getQueueExists(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueExists(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExists(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExists*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets whether or not a queue with `queueName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Boolean> getQueueExists(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: A Mono that completes indicating whether or not the queue exists.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse(java.lang.String)
  id: getQueueExistsWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getQueueExistsWithResponse(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets whether or not a queue with `queueName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Response<Boolean>> getQueueExistsWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of the queue.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: A Mono that completes indicating whether or not the queue exists along with its HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties(java.lang.String)
  id: getQueueRuntimeProperties(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getQueueRuntimeProperties(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets runtime properties about the queue.
  syntax:
    content: public Mono<QueueRuntimeProperties> getQueueRuntimeProperties(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties>
      description: A Mono that completes with runtime properties about the queue.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse(java.lang.String)
  id: getQueueRuntimePropertiesWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getQueueRuntimePropertiesWithResponse(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets runtime properties about the queue along with its HTTP response.
  syntax:
    content: public Mono<Response<QueueRuntimeProperties>> getQueueRuntimePropertiesWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties>>
      description: A Mono that completes with runtime properties about the queue and the associated HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueWithResponse(java.lang.String)
  id: getQueueWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getQueueWithResponse(String queueName)
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueWithResponse(String queueName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueWithResponse(String queueName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the queue along with its HTTP response.
  syntax:
    content: public Mono<Response<QueueProperties>> getQueueWithResponse(String queueName)
    parameters:
    - id: queueName
      type: java.lang.String
      description: Name of queue to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.QueueProperties>>
      description: A Mono that completes with information about the queue and the associated HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule(java.lang.String,java.lang.String,java.lang.String)
  id: getRule(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getRule(String topicName, String subscriptionName, String ruleName)
  nameWithType: ServiceBusAdministrationAsyncClient.getRule(String topicName, String subscriptionName, String ruleName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule(String topicName, String subscriptionName, String ruleName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets a rule from the service namespace. Only following data types are deserialized in Filters and Action parameters - string, int, long, boolean, double, and OffsetDateTime. Other data types would return its string value.
  syntax:
    content: public Mono<RuleProperties> getRule(String topicName, String subscriptionName, String ruleName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The name of the topic relative to service bus namespace.
    - id: subscriptionName
      type: java.lang.String
      description: The subscription name the rule belongs to.
    - id: ruleName
      type: java.lang.String
      description: The name of the rule to retrieve.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.RuleProperties>
      description: The associated rule.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRuleWithResponse(java.lang.String,java.lang.String,java.lang.String)
  id: getRuleWithResponse(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getRuleWithResponse(String topicName, String subscriptionName, String ruleName)
  nameWithType: ServiceBusAdministrationAsyncClient.getRuleWithResponse(String topicName, String subscriptionName, String ruleName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRuleWithResponse(String topicName, String subscriptionName, String ruleName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRuleWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets a rule from the service namespace. Only following data types are deserialized in Filters and Action parameters - string, int, long, bool, double, and OffsetDateTime. Other data types would return its string value.
  syntax:
    content: public Mono<Response<RuleProperties>> getRuleWithResponse(String topicName, String subscriptionName, String ruleName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The name of the topic relative to service bus namespace.
    - id: subscriptionName
      type: java.lang.String
      description: The subscription name the rule belongs to.
    - id: ruleName
      type: java.lang.String
      description: The name of the rule to retrieve.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.RuleProperties>>
      description: The associated rule with the corresponding HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription(java.lang.String,java.lang.String)
  id: getSubscription(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getSubscription(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscription(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the queue.
  syntax:
    content: public Mono<SubscriptionProperties> getSubscription(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
      description: A Mono that completes with information about the subscription.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExists(java.lang.String,java.lang.String)
  id: getSubscriptionExists(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getSubscriptionExists(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionExists(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExists(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExists*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets whether or not a subscription within a topic exists.
  syntax:
    content: public Mono<Boolean> getSubscriptionExists(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: A Mono that completes indicating whether or not the subscription exists.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse(java.lang.String,java.lang.String)
  id: getSubscriptionExistsWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets whether or not a subscription within a topic exists.
  syntax:
    content: public Mono<Response<Boolean>> getSubscriptionExistsWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of the subscription.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: A Mono that completes indicating whether or not the subscription exists along with its HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties(java.lang.String,java.lang.String)
  id: getSubscriptionRuntimeProperties(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getSubscriptionRuntimeProperties(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets runtime properties about the subscription.
  syntax:
    content: public Mono<SubscriptionRuntimeProperties> getSubscriptionRuntimeProperties(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties>
      description: A Mono that completes with runtime properties about the subscription.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse(java.lang.String,java.lang.String)
  id: getSubscriptionRuntimePropertiesWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getSubscriptionRuntimePropertiesWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets runtime properties about the subscription.
  syntax:
    content: public Mono<Response<SubscriptionRuntimeProperties>> getSubscriptionRuntimePropertiesWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties>>
      description: A Mono that completes with runtime properties about the subscription.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse(java.lang.String,java.lang.String)
  id: getSubscriptionWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getSubscriptionWithResponse(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the subscription along with its HTTP response.
  syntax:
    content: public Mono<Response<SubscriptionProperties>> getSubscriptionWithResponse(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic associated with subscription.
    - id: subscriptionName
      type: java.lang.String
      description: Name of subscription to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>>
      description: A Mono that completes with information about the subscription and the associated HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic(java.lang.String)
  id: getTopic(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getTopic(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.getTopic(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the topic.
  syntax:
    content: public Mono<TopicProperties> getTopic(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicProperties>
      description: A Mono that completes with information about the topic.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExists(java.lang.String)
  id: getTopicExists(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getTopicExists(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicExists(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExists(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExists*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets whether or not a topic with `topicName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Boolean> getTopicExists(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: A Mono that completes indicating whether or not the topic exists.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse(java.lang.String)
  id: getTopicExistsWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getTopicExistsWithResponse(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets whether or not a topic with `topicName` exists in the Service Bus namespace.
  syntax:
    content: public Mono<Response<Boolean>> getTopicExistsWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of the topic.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
      description: A Mono that completes indicating whether or not the topic exists along with its HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties(java.lang.String)
  id: getTopicRuntimeProperties(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getTopicRuntimeProperties(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets runtime properties about the topic.
  syntax:
    content: public Mono<TopicRuntimeProperties> getTopicRuntimeProperties(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties>
      description: A Mono that completes with runtime properties about the topic.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse(java.lang.String)
  id: getTopicRuntimePropertiesWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getTopicRuntimePropertiesWithResponse(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets runtime properties about the topic with its HTTP response.
  syntax:
    content: public Mono<Response<TopicRuntimeProperties>> getTopicRuntimePropertiesWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties>>
      description: A Mono that completes with runtime properties about the topic and the associated HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicWithResponse(java.lang.String)
  id: getTopicWithResponse(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: getTopicWithResponse(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicWithResponse(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicWithResponse(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Gets information about the topic along with its HTTP response.
  syntax:
    content: public Mono<Response<TopicProperties>> getTopicWithResponse(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: Name of topic to get information about.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.TopicProperties>>
      description: A Mono that completes with information about the topic and the associated HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listQueues()
  id: listQueues()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: listQueues()
  nameWithType: ServiceBusAdministrationAsyncClient.listQueues()
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listQueues()
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listQueues*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Fetches all the queues in the Service Bus namespace.
  syntax:
    content: public PagedFlux<QueueProperties> listQueues()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.QueueProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties" data-throw-if-not-resolved="false">queues</xref> in the Service Bus namespace.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listRules(java.lang.String,java.lang.String)
  id: listRules(java.lang.String,java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: listRules(String topicName, String subscriptionName)
  nameWithType: ServiceBusAdministrationAsyncClient.listRules(String topicName, String subscriptionName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listRules(String topicName, String subscriptionName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listRules*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Fetches all the rules for a topic and subscription.
  syntax:
    content: public PagedFlux<RuleProperties> listRules(String topicName, String subscriptionName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The topic name under which all the rules need to be retrieved.
    - id: subscriptionName
      type: java.lang.String
      description: The name of the subscription for which all rules need to be retrieved.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.RuleProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.administration.models.RuleProperties" data-throw-if-not-resolved="false">rules</xref> for the <code>topicName</code> and <code>subscriptionName</code>.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listSubscriptions(java.lang.String)
  id: listSubscriptions(java.lang.String)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: listSubscriptions(String topicName)
  nameWithType: ServiceBusAdministrationAsyncClient.listSubscriptions(String topicName)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listSubscriptions(String topicName)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listSubscriptions*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Fetches all the subscriptions for a topic.
  syntax:
    content: public PagedFlux<SubscriptionProperties> listSubscriptions(String topicName)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The topic name under which all the subscriptions need to be retrieved.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties" data-throw-if-not-resolved="false">subscriptions</xref> for the <code>topicName</code>.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listTopics()
  id: listTopics()
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: listTopics()
  nameWithType: ServiceBusAdministrationAsyncClient.listTopics()
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listTopics()
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listTopics*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: Fetches all the topics in the Service Bus namespace.
  syntax:
    content: public PagedFlux<TopicProperties> listTopics()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.TopicProperties>
      description: A Flux of <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties" data-throw-if-not-resolved="false">topics</xref> in the Service Bus namespace.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueue(com.azure.messaging.servicebus.administration.models.QueueProperties)
  id: updateQueue(com.azure.messaging.servicebus.administration.models.QueueProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateQueue(QueueProperties queue)
  nameWithType: ServiceBusAdministrationAsyncClient.updateQueue(QueueProperties queue)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueue(QueueProperties queue)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueue*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a queue with the given <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue(java.lang.String)" data-throw-if-not-resolved="false">Get queue description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setMaxDeliveryCount(java.lang.Integer)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<QueueProperties> updateQueue(QueueProperties queue)
    parameters:
    - id: queue
      type: com.azure.messaging.servicebus.administration.models.QueueProperties
      description: >-
        Information about the queue to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueProperties>
      description: A Mono that completes with the updated queue.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueueWithResponse(com.azure.messaging.servicebus.administration.models.QueueProperties)
  id: updateQueueWithResponse(com.azure.messaging.servicebus.administration.models.QueueProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateQueueWithResponse(QueueProperties queue)
  nameWithType: ServiceBusAdministrationAsyncClient.updateQueueWithResponse(QueueProperties queue)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueueWithResponse(QueueProperties queue)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueueWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a queue with the given <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties" data-throw-if-not-resolved="false">QueueProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue(java.lang.String)" data-throw-if-not-resolved="false">Get queue description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.QueueProperties.setMaxDeliveryCount(java.lang.Integer)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<Response<QueueProperties>> updateQueueWithResponse(QueueProperties queue)
    parameters:
    - id: queue
      type: com.azure.messaging.servicebus.administration.models.QueueProperties
      description: >-
        Information about the queue to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.QueueProperties>>
      description: A Mono that returns the updated queue in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRule(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.RuleProperties)
  id: updateRule(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.RuleProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateRule(String topicName, String subscriptionName, RuleProperties rule)
  nameWithType: ServiceBusAdministrationAsyncClient.updateRule(String topicName, String subscriptionName, RuleProperties rule)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRule(String topicName, String subscriptionName, RuleProperties rule)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRule*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a rule with the given <xref uid="com.azure.messaging.servicebus.administration.models.RuleProperties" data-throw-if-not-resolved="false">RuleProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.RuleProperties" data-throw-if-not-resolved="false">RuleProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule(java.lang.String,java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Get rule description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.
  syntax:
    content: public Mono<RuleProperties> updateRule(String topicName, String subscriptionName, RuleProperties rule)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The topic name under which the rule is updated.
    - id: subscriptionName
      type: java.lang.String
      description: The name of the subscription for which the rule is updated.
    - id: rule
      type: com.azure.messaging.servicebus.administration.models.RuleProperties
      description: >-
        Information about the rule to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.RuleProperties>
      description: A Mono that returns the updated rule.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRuleWithResponse(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.RuleProperties)
  id: updateRuleWithResponse(java.lang.String,java.lang.String,com.azure.messaging.servicebus.administration.models.RuleProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateRuleWithResponse(String topicName, String subscriptionName, RuleProperties rule)
  nameWithType: ServiceBusAdministrationAsyncClient.updateRuleWithResponse(String topicName, String subscriptionName, RuleProperties rule)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRuleWithResponse(String topicName, String subscriptionName, RuleProperties rule)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRuleWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a rule with the given <xref uid="com.azure.messaging.servicebus.administration.models.RuleProperties" data-throw-if-not-resolved="false">RuleProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.RuleProperties" data-throw-if-not-resolved="false">RuleProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule(java.lang.String,java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Get rule description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.
  syntax:
    content: public Mono<Response<RuleProperties>> updateRuleWithResponse(String topicName, String subscriptionName, RuleProperties rule)
    parameters:
    - id: topicName
      type: java.lang.String
      description: The topic name under which the rule is updated.
    - id: subscriptionName
      type: java.lang.String
      description: The name of the subscription for which the rule is updated.
    - id: rule
      type: com.azure.messaging.servicebus.administration.models.RuleProperties
      description: >-
        Information about the rule to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.RuleProperties>>
      description: A Mono that returns the updated rule in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscription(com.azure.messaging.servicebus.administration.models.SubscriptionProperties)
  id: updateSubscription(com.azure.messaging.servicebus.administration.models.SubscriptionProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateSubscription(SubscriptionProperties subscription)
  nameWithType: ServiceBusAdministrationAsyncClient.updateSubscription(SubscriptionProperties subscription)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscription(SubscriptionProperties subscription)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscription*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a subscription with the given <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Get subscription description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties.setMaxDeliveryCount(int)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<SubscriptionProperties> updateSubscription(SubscriptionProperties subscription)
    parameters:
    - id: subscription
      type: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
      description: >-
        Information about the subscription to update. You must provide all the property values
             that are desired on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
      description: A Mono that returns the updated subscription.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse(com.azure.messaging.servicebus.administration.models.SubscriptionProperties)
  id: updateSubscriptionWithResponse(com.azure.messaging.servicebus.administration.models.SubscriptionProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateSubscriptionWithResponse(SubscriptionProperties subscription)
  nameWithType: ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse(SubscriptionProperties subscription)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse(SubscriptionProperties subscription)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a subscription with the given <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties" data-throw-if-not-resolved="false">SubscriptionProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Get subscription description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties.setLockDuration(java.time.Duration)" data-throw-if-not-resolved="false">LockDuration</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.SubscriptionProperties.setMaxDeliveryCount(int)" data-throw-if-not-resolved="false">MaxDeliveryCount</xref>
  syntax:
    content: public Mono<Response<SubscriptionProperties>> updateSubscriptionWithResponse(SubscriptionProperties subscription)
    parameters:
    - id: subscription
      type: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
      description: >-
        Information about the subscription to update. You must provide all the property values
             that are desired on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>>
      description: A Mono that returns the updated subscription in addition to the HTTP response.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopic(com.azure.messaging.servicebus.administration.models.TopicProperties)
  id: updateTopic(com.azure.messaging.servicebus.administration.models.TopicProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateTopic(TopicProperties topic)
  nameWithType: ServiceBusAdministrationAsyncClient.updateTopic(TopicProperties topic)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopic(TopicProperties topic)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopic*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a topic with the given <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic(java.lang.String)" data-throw-if-not-resolved="false">Get topic description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
  syntax:
    content: public Mono<TopicProperties> updateTopic(TopicProperties topic)
    parameters:
    - id: topic
      type: com.azure.messaging.servicebus.administration.models.TopicProperties
      description: >-
        Information about the topic to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicProperties>
      description: A Mono that completes with the updated topic.
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopicWithResponse(com.azure.messaging.servicebus.administration.models.TopicProperties)
  id: updateTopicWithResponse(com.azure.messaging.servicebus.administration.models.TopicProperties)
  artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
  parent: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient
  langs:
  - java
  name: updateTopicWithResponse(TopicProperties topic)
  nameWithType: ServiceBusAdministrationAsyncClient.updateTopicWithResponse(TopicProperties topic)
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopicWithResponse(TopicProperties topic)
  overload: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopicWithResponse*
  type: Method
  package: com.azure.messaging.servicebus.administration
  summary: >-
    Updates a topic with the given <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref>. The <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties" data-throw-if-not-resolved="false">TopicProperties</xref> must be fully populated as all of the properties are replaced. If a property is not set the service default value is used. The suggested flow is:


    1.  <xref uid="com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic(java.lang.String)" data-throw-if-not-resolved="false">Get topic description.</xref>

    2.  Update the required elements.

    3.  Pass the updated description into this method.


    There are a subset of properties that can be updated. More information can be found in the links below. They are:

     *  <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties.setDefaultMessageTimeToLive(java.time.Duration)" data-throw-if-not-resolved="false">DefaultMessageTimeToLive</xref>
     *  <xref uid="com.azure.messaging.servicebus.administration.models.TopicProperties.setDuplicateDetectionHistoryTimeWindow(java.time.Duration)" data-throw-if-not-resolved="false">DuplicateDetectionHistoryTimeWindow</xref>
  syntax:
    content: public Mono<Response<TopicProperties>> updateTopicWithResponse(TopicProperties topic)
    parameters:
    - id: topic
      type: com.azure.messaging.servicebus.administration.models.TopicProperties
      description: >-
        Information about the topic to update. You must provide all the property values that are desired
             on the updated entity. Any values not provided are set to the service default values.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.TopicProperties>>
      description: A Mono that completes with the updated topic and its HTTP response.
references:
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl
  name: ServiceBusManagementClientImpl
  nameWithType: ServiceBusManagementClientImpl
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementClientImpl
- uid: com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer
  name: ServiceBusManagementSerializer
  nameWithType: ServiceBusManagementSerializer
  fullName: com.azure.messaging.servicebus.implementation.ServiceBusManagementSerializer
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient*
  name: ServiceBusAdministrationAsyncClient
  nameWithType: ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.ServiceBusAdministrationAsyncClient
  package: com.azure.messaging.servicebus.administration
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.messaging.servicebus.administration.models.QueueProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue*
  name: createQueue
  nameWithType: ServiceBusAdministrationAsyncClient.createQueue
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueue
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.CreateQueueOptions
  name: CreateQueueOptions
  nameWithType: CreateQueueOptions
  fullName: com.azure.messaging.servicebus.administration.models.CreateQueueOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.QueueProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.messaging.servicebus.administration.models.QueueProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueueWithResponse*
  name: createQueueWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.createQueueWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createQueueWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.RuleProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.RuleProperties
    name: RuleProperties
    fullName: com.azure.messaging.servicebus.administration.models.RuleProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule*
  name: createRule
  nameWithType: ServiceBusAdministrationAsyncClient.createRule
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRule
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.CreateRuleOptions
  name: CreateRuleOptions
  nameWithType: CreateRuleOptions
  fullName: com.azure.messaging.servicebus.administration.models.CreateRuleOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.RuleProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.RuleProperties
    name: RuleProperties
    fullName: com.azure.messaging.servicebus.administration.models.RuleProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRuleWithResponse*
  name: createRuleWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.createRuleWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createRuleWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
    name: SubscriptionProperties
    fullName: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription*
  name: createSubscription
  nameWithType: ServiceBusAdministrationAsyncClient.createSubscription
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscription
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions
  name: CreateSubscriptionOptions
  nameWithType: CreateSubscriptionOptions
  fullName: com.azure.messaging.servicebus.administration.models.CreateSubscriptionOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
    name: SubscriptionProperties
    fullName: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse*
  name: createSubscriptionWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createSubscriptionWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.TopicProperties
    name: TopicProperties
    fullName: com.azure.messaging.servicebus.administration.models.TopicProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic*
  name: createTopic
  nameWithType: ServiceBusAdministrationAsyncClient.createTopic
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopic
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.CreateTopicOptions
  name: CreateTopicOptions
  nameWithType: CreateTopicOptions
  fullName: com.azure.messaging.servicebus.administration.models.CreateTopicOptions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.TopicProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.TopicProperties
    name: TopicProperties
    fullName: com.azure.messaging.servicebus.administration.models.TopicProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopicWithResponse*
  name: createTopicWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.createTopicWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.createTopicWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueue*
  name: deleteQueue
  nameWithType: ServiceBusAdministrationAsyncClient.deleteQueue
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueue
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueueWithResponse*
  name: deleteQueueWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.deleteQueueWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteQueueWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRule*
  name: deleteRule
  nameWithType: ServiceBusAdministrationAsyncClient.deleteRule
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRule
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRuleWithResponse*
  name: deleteRuleWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.deleteRuleWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteRuleWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscription*
  name: deleteSubscription
  nameWithType: ServiceBusAdministrationAsyncClient.deleteSubscription
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscription
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse*
  name: deleteSubscriptionWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteSubscriptionWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopic*
  name: deleteTopic
  nameWithType: ServiceBusAdministrationAsyncClient.deleteTopic
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopic
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopicWithResponse*
  name: deleteTopicWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.deleteTopicWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.deleteTopicWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue*
  name: getQueue
  nameWithType: ServiceBusAdministrationAsyncClient.getQueue
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueue
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueWithResponse*
  name: getQueueWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExists*
  name: getQueueExists
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueExists
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExists
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Boolean>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse*
  name: getQueueExistsWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueExistsWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties
    name: QueueRuntimeProperties
    fullName: com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties*
  name: getQueueRuntimeProperties
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimeProperties
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties
    name: QueueRuntimeProperties
    fullName: com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse*
  name: getQueueRuntimePropertiesWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getQueueRuntimePropertiesWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.NamespaceProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.NamespaceProperties
    name: NamespaceProperties
    fullName: com.azure.messaging.servicebus.administration.models.NamespaceProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespaceProperties*
  name: getNamespaceProperties
  nameWithType: ServiceBusAdministrationAsyncClient.getNamespaceProperties
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespaceProperties
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.NamespaceProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.NamespaceProperties
    name: NamespaceProperties
    fullName: com.azure.messaging.servicebus.administration.models.NamespaceProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse*
  name: getNamespacePropertiesWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getNamespacePropertiesWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule*
  name: getRule
  nameWithType: ServiceBusAdministrationAsyncClient.getRule
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRule
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRuleWithResponse*
  name: getRuleWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getRuleWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getRuleWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription*
  name: getSubscription
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscription
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscription
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse*
  name: getSubscriptionWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExists*
  name: getSubscriptionExists
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionExists
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExists
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse*
  name: getSubscriptionExistsWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionExistsWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties
    name: SubscriptionRuntimeProperties
    fullName: com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties*
  name: getSubscriptionRuntimeProperties
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimeProperties
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties
    name: SubscriptionRuntimeProperties
    fullName: com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse*
  name: getSubscriptionRuntimePropertiesWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getSubscriptionRuntimePropertiesWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic*
  name: getTopic
  nameWithType: ServiceBusAdministrationAsyncClient.getTopic
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopic
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicWithResponse*
  name: getTopicWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExists*
  name: getTopicExists
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicExists
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExists
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse*
  name: getTopicExistsWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicExistsWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties
    name: TopicRuntimeProperties
    fullName: com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties*
  name: getTopicRuntimeProperties
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimeProperties
  package: com.azure.messaging.servicebus.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties
    name: TopicRuntimeProperties
    fullName: com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse*
  name: getTopicRuntimePropertiesWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.getTopicRuntimePropertiesWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.QueueProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.QueueProperties
    name: QueueProperties
    fullName: com.azure.messaging.servicebus.administration.models.QueueProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listQueues*
  name: listQueues
  nameWithType: ServiceBusAdministrationAsyncClient.listQueues
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listQueues
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.RuleProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.RuleProperties
    name: RuleProperties
    fullName: com.azure.messaging.servicebus.administration.models.RuleProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listRules*
  name: listRules
  nameWithType: ServiceBusAdministrationAsyncClient.listRules
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listRules
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.SubscriptionProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
    name: SubscriptionProperties
    fullName: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listSubscriptions*
  name: listSubscriptions
  nameWithType: ServiceBusAdministrationAsyncClient.listSubscriptions
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listSubscriptions
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.messaging.servicebus.administration.models.TopicProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.messaging.servicebus.administration.models.TopicProperties
    name: TopicProperties
    fullName: com.azure.messaging.servicebus.administration.models.TopicProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listTopics*
  name: listTopics
  nameWithType: ServiceBusAdministrationAsyncClient.listTopics
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.listTopics
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.QueueProperties
  name: QueueProperties
  nameWithType: QueueProperties
  fullName: com.azure.messaging.servicebus.administration.models.QueueProperties
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueue*
  name: updateQueue
  nameWithType: ServiceBusAdministrationAsyncClient.updateQueue
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueue
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueueWithResponse*
  name: updateQueueWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.updateQueueWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateQueueWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.RuleProperties
  name: RuleProperties
  nameWithType: RuleProperties
  fullName: com.azure.messaging.servicebus.administration.models.RuleProperties
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRule*
  name: updateRule
  nameWithType: ServiceBusAdministrationAsyncClient.updateRule
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRule
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRuleWithResponse*
  name: updateRuleWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.updateRuleWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateRuleWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
  name: SubscriptionProperties
  nameWithType: SubscriptionProperties
  fullName: com.azure.messaging.servicebus.administration.models.SubscriptionProperties
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscription*
  name: updateSubscription
  nameWithType: ServiceBusAdministrationAsyncClient.updateSubscription
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscription
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse*
  name: updateSubscriptionWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateSubscriptionWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.models.TopicProperties
  name: TopicProperties
  nameWithType: TopicProperties
  fullName: com.azure.messaging.servicebus.administration.models.TopicProperties
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopic*
  name: updateTopic
  nameWithType: ServiceBusAdministrationAsyncClient.updateTopic
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopic
  package: com.azure.messaging.servicebus.administration
- uid: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopicWithResponse*
  name: updateTopicWithResponse
  nameWithType: ServiceBusAdministrationAsyncClient.updateTopicWithResponse
  fullName: com.azure.messaging.servicebus.administration.ServiceBusAdministrationAsyncClient.updateTopicWithResponse
  package: com.azure.messaging.servicebus.administration
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties
  name: QueueRuntimeProperties
  nameWithType: QueueRuntimeProperties
  fullName: com.azure.messaging.servicebus.administration.models.QueueRuntimeProperties
- uid: com.azure.messaging.servicebus.administration.models.NamespaceProperties
  name: NamespaceProperties
  nameWithType: NamespaceProperties
  fullName: com.azure.messaging.servicebus.administration.models.NamespaceProperties
- uid: com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties
  name: SubscriptionRuntimeProperties
  nameWithType: SubscriptionRuntimeProperties
  fullName: com.azure.messaging.servicebus.administration.models.SubscriptionRuntimeProperties
- uid: com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties
  name: TopicRuntimeProperties
  nameWithType: TopicRuntimeProperties
  fullName: com.azure.messaging.servicebus.administration.models.TopicRuntimeProperties
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
