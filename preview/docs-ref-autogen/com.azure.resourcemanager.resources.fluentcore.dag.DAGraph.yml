### YamlMime:ManagedReference
items:
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  id: DAGraph
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag
  children:
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.DAGraph(NodeT)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependencyGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependentGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNext()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNode(java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.hasParents()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isPreparer()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isRootNode(NodeT)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.parentDAGs
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.prepareForEnumeration()
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.queue
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportCompletion(NodeT)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportError(NodeT,java.lang.Throwable)
  - com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.root()
  langs:
  - java
  name: DAGraph<DataT,NodeT>
  nameWithType: DAGraph<DataT,NodeT>
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>
  type: Class
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: >-
    Type representing a DAG (directed acyclic graph).


    each node in a DAG is represented by <xref uid="com.azure.resourcemanager.resources.fluentcore.dag.DAGNode" data-throw-if-not-resolved="false">DAGNode</xref>
  syntax:
    content: public class DAGraph<DataT,NodeT> extends Graph<DataT,NodeT>
    typeParameters:
    - id: DataT
    - id: NodeT
  inheritance:
  - java.lang.Object
  - com.azure.resourcemanager.resources.fluentcore.dag.Graph
  inheritedMembers:
  - com.azure.resourcemanager.resources.fluentcore.dag.Graph.addNode(NodeT)
  - com.azure.resourcemanager.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)
  - com.azure.resourcemanager.resources.fluentcore.dag.Graph.getNodes()
  - com.azure.resourcemanager.resources.fluentcore.dag.Graph.visit(com.azure.resourcemanager.resources.fluentcore.dag.Graph.Visitor)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.DAGraph(NodeT)
  id: DAGraph(NodeT)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: DAGraph(NodeT rootNode)
  nameWithType: DAGraph<DataT,NodeT>.DAGraph(NodeT rootNode)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.DAGraph(NodeT rootNode)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.DAGraph*
  type: Constructor
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Creates a new DAG.
  syntax:
    content: public DAGraph(NodeT rootNode)
    parameters:
    - id: rootNode
      type: NodeT
      description: the root node of this DAG
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependencyGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)
  id: addDependencyGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)
  nameWithType: DAGraph<DataT,NodeT>.addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependencyGraph*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Mark root of this DAG depends on given DAG's root.
  syntax:
    content: public void addDependencyGraph(DAGraph<DataT,NodeT> dependencyGraph)
    parameters:
    - id: dependencyGraph
      type: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>
      description: the dependency DAG
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependentGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)
  id: addDependentGraph(com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)
  nameWithType: DAGraph<DataT,NodeT>.addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependentGraph*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Mark root of the given DAG depends on this DAG's root.
  syntax:
    content: public void addDependentGraph(DAGraph<DataT,NodeT> dependentGraph)
    parameters:
    - id: dependentGraph
      type: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>
      description: the dependent DAG
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNext()
  id: getNext()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: getNext()
  nameWithType: DAGraph<DataT,NodeT>.getNext()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.getNext()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNext*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Gets next node in the DAG which has no dependency or all of it's dependencies are resolved and ready to be consumed.
  syntax:
    content: public NodeT getNext()
    return:
      type: NodeT
      description: next node or null if all the nodes have been explored or no node is available at this moment.
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNode(java.lang.String)
  id: getNode(java.lang.String)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: getNode(String key)
  nameWithType: DAGraph<DataT,NodeT>.getNode(String key)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.getNode(String key)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNode*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Gets a node from the graph with the given key.
  syntax:
    content: public NodeT getNode(String key)
    parameters:
    - id: key
      type: java.lang.String
      description: the key of the node
    return:
      type: NodeT
      description: the node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.hasParents()
  id: hasParents()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: hasParents()
  nameWithType: DAGraph<DataT,NodeT>.hasParents()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.hasParents()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.hasParents*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: public boolean hasParents()
    return:
      type: boolean
      description: true if this DAG is merged with one or more DAG and hence has parents
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isPreparer()
  id: isPreparer()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: isPreparer()
  nameWithType: DAGraph<DataT,NodeT>.isPreparer()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.isPreparer()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isPreparer*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: public boolean isPreparer()
    return:
      type: boolean
      description: >-
        true if this dag is the preparer responsible for
         preparing the DAG for traversal.
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isRootNode(NodeT)
  id: isRootNode(NodeT)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: isRootNode(NodeT node)
  nameWithType: DAGraph<DataT,NodeT>.isRootNode(NodeT node)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.isRootNode(NodeT node)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isRootNode*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Checks whether the given node is root node of this DAG.
  syntax:
    content: public boolean isRootNode(NodeT node)
    parameters:
    - id: node
      type: NodeT
      description: the node <xref uid="com.azure.resourcemanager.resources.fluentcore.dag.DAGNode" data-throw-if-not-resolved="false">DAGNode</xref> to be checked
    return:
      type: boolean
      description: true if the given node is root node
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.parentDAGs
  id: parentDAGs
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: parentDAGs
  nameWithType: DAGraph<DataT,NodeT>.parentDAGs
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.parentDAGs
  type: Field
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: the immediate parent graphs of this graph. A parent graph is the one with it's root depends on this graph's root.
  syntax:
    content: protected List<DAGraph<DataT,NodeT>> parentDAGs
    return:
      type: java.util.List<com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>>
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.prepareForEnumeration()
  id: prepareForEnumeration()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: prepareForEnumeration()
  nameWithType: DAGraph<DataT,NodeT>.prepareForEnumeration()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.prepareForEnumeration()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.prepareForEnumeration*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Prepares this DAG for node enumeration using getNext method, each call to getNext returns next node in the DAG with no dependencies.
  syntax:
    content: public void prepareForEnumeration()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.queue
  id: queue
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: queue
  nameWithType: DAGraph<DataT,NodeT>.queue
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.queue
  type: Field
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: to perform topological sort on the graph. During sorting queue contains the nodes which are ready to invoke.
  syntax:
    content: protected ConcurrentLinkedQueue<String> queue
    return:
      type: java.util.concurrent.ConcurrentLinkedQueue<java.lang.String>
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportCompletion(NodeT)
  id: reportCompletion(NodeT)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: reportCompletion(NodeT completed)
  nameWithType: DAGraph<DataT,NodeT>.reportCompletion(NodeT completed)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.reportCompletion(NodeT completed)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportCompletion*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Reports that a node is resolved hence other nodes depends on it can consume it.
  syntax:
    content: public void reportCompletion(NodeT completed)
    parameters:
    - id: completed
      type: NodeT
      description: the node ready to be consumed
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportError(NodeT,java.lang.Throwable)
  id: reportError(NodeT,java.lang.Throwable)
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: reportError(NodeT faulted, Throwable throwable)
  nameWithType: DAGraph<DataT,NodeT>.reportError(NodeT faulted, Throwable throwable)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.reportError(NodeT faulted, Throwable throwable)
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportError*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  summary: Reports that a node is faulted.
  syntax:
    content: public void reportError(NodeT faulted, Throwable throwable)
    parameters:
    - id: faulted
      type: NodeT
      description: the node faulted
    - id: throwable
      type: java.lang.Throwable
      description: the reason for fault
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.root()
  id: root()
  artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
  parent: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  langs:
  - java
  name: root()
  nameWithType: DAGraph<DataT,NodeT>.root()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.root()
  overload: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.root*
  type: Method
  package: com.azure.resourcemanager.resources.fluentcore.dag
  syntax:
    content: protected NodeT root()
    return:
      type: NodeT
      description: the root node of the DAG.
references:
- uid: NodeT
  spec.java:
  - uid: NodeT
    name: NodeT
    fullName: NodeT
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.DAGraph*
  name: DAGraph
  nameWithType: DAGraph<DataT,NodeT>.DAGraph
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.DAGraph
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.hasParents*
  name: hasParents
  nameWithType: DAGraph<DataT,NodeT>.hasParents
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.hasParents
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.root*
  name: root
  nameWithType: DAGraph<DataT,NodeT>.root
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.root
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isRootNode*
  name: isRootNode
  nameWithType: DAGraph<DataT,NodeT>.isRootNode
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.isRootNode
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.isPreparer*
  name: isPreparer
  nameWithType: DAGraph<DataT,NodeT>.isPreparer
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.isPreparer
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNode*
  name: getNode
  nameWithType: DAGraph<DataT,NodeT>.getNode
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.getNode
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>
  spec.java:
  - uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
    name: DAGraph
    fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  - name: <
    fullName: <
  - uid: DataT
    name: DataT
    fullName: DataT
  - name: ','
    fullName: ','
  - uid: NodeT
    name: NodeT
    fullName: NodeT
  - name: '>'
    fullName: '>'
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependencyGraph*
  name: addDependencyGraph
  nameWithType: DAGraph<DataT,NodeT>.addDependencyGraph
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.addDependencyGraph
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.addDependentGraph*
  name: addDependentGraph
  nameWithType: DAGraph<DataT,NodeT>.addDependentGraph
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.addDependentGraph
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.prepareForEnumeration*
  name: prepareForEnumeration
  nameWithType: DAGraph<DataT,NodeT>.prepareForEnumeration
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.prepareForEnumeration
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.getNext*
  name: getNext
  nameWithType: DAGraph<DataT,NodeT>.getNext
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.getNext
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportCompletion*
  name: reportCompletion
  nameWithType: DAGraph<DataT,NodeT>.reportCompletion
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.reportCompletion
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph.reportError*
  name: reportError
  nameWithType: DAGraph<DataT,NodeT>.reportError
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>.reportError
  package: com.azure.resourcemanager.resources.fluentcore.dag
- uid: java.util.List<com.azure.resourcemanager.resources.fluentcore.dag.DAGraph<DataT,NodeT>>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
    name: DAGraph
    fullName: com.azure.resourcemanager.resources.fluentcore.dag.DAGraph
  - name: <
    fullName: <
  - uid: DataT
    name: DataT
    fullName: DataT
  - name: ','
    fullName: ','
  - uid: NodeT
    name: NodeT
    fullName: NodeT
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.concurrent.ConcurrentLinkedQueue<java.lang.String>
  spec.java:
  - uid: java.util.concurrent.ConcurrentLinkedQueue
    name: ConcurrentLinkedQueue
    fullName: java.util.concurrent.ConcurrentLinkedQueue
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: DataT
  name: DataT
  nameWithType: DataT
  fullName: DataT
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Graph<DataT,NodeT>
  name: Graph<DataT,NodeT>
  nameWithType: Graph<DataT,NodeT>
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Graph<DataT,NodeT>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Graph.addNode(NodeT)
  name: Graph.addNode(NodeT)
  nameWithType: Graph.addNode(NodeT)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Graph.addNode(NodeT)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Graph.visit(com.azure.resourcemanager.resources.fluentcore.dag.Graph.Visitor)
  name: Graph.visit(Graph.Visitor)
  nameWithType: Graph.visit(Graph.Visitor)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Graph.visit(com.azure.resourcemanager.resources.fluentcore.dag.Graph.Visitor)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Graph.getNodes()
  name: Graph.getNodes()
  nameWithType: Graph.getNodes()
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Graph.getNodes()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)
  name: Graph.findPath(String,String)
  nameWithType: Graph.findPath(String,String)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Graph.findPath(java.lang.String,java.lang.String)
- uid: DataT,NodeT
  name: DataT,NodeT
  nameWithType: DataT,NodeT
  fullName: DataT,NodeT
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.util.concurrent.ConcurrentLinkedQueue
  name: ConcurrentLinkedQueue
  nameWithType: ConcurrentLinkedQueue
  fullName: java.util.concurrent.ConcurrentLinkedQueue
- uid: com.azure.resourcemanager.resources.fluentcore.dag.Graph
  name: Graph
  nameWithType: Graph
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.Graph
