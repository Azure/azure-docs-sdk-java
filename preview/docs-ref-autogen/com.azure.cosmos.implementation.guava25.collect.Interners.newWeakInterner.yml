### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Interners.newWeakInterner*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Interners.<E>newWeakInterner"
name: "<E>newWeakInterner"
nameWithType: "Interners.<E>newWeakInterner"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Interners.<E>newWeakInterner()"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Interners.<E>newWeakInterner()"
  name: "<E>newWeakInterner()"
  nameWithType: "Interners.<E>newWeakInterner()"
  summary: "Returns a new thread-safe interner which retains a weak reference to each instance it has interned, and so does not prevent these instances from being garbage-collected. This most likely does not perform as well as <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Interners.newStrongInterner\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#newStrongInterner\"></xref>, but is the best alternative when the memory usage of that implementation is unacceptable."
  syntax: "public static Interner<E> <E>newWeakInterner()"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Interner?alt=com.azure.cosmos.implementation.guava25.collect.Interner&text=Interner\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
