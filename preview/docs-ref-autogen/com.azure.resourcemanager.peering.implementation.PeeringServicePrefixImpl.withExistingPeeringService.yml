### YamlMime:JavaMember
uid: "com.azure.resourcemanager.peering.implementation.PeeringServicePrefixImpl.withExistingPeeringService*"
fullName: "com.azure.resourcemanager.peering.implementation.PeeringServicePrefixImpl.withExistingPeeringService"
name: "withExistingPeeringService"
nameWithType: "PeeringServicePrefixImpl.withExistingPeeringService"
members:
- uid: "com.azure.resourcemanager.peering.implementation.PeeringServicePrefixImpl.withExistingPeeringService(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.peering.implementation.PeeringServicePrefixImpl.withExistingPeeringService(String resourceGroupName, String peeringServiceName)"
  name: "withExistingPeeringService(String resourceGroupName, String peeringServiceName)"
  nameWithType: "PeeringServicePrefixImpl.withExistingPeeringService(String resourceGroupName, String peeringServiceName)"
  summary: "Specifies resourceGroupName, peeringServiceName."
  parameters:
  - name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "peeringServiceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PeeringServicePrefixImpl withExistingPeeringService(String resourceGroupName, String peeringServiceName)"
  returns:
    type: "<xref href=\"com.azure.resourcemanager.peering.implementation.PeeringServicePrefixImpl?alt=com.azure.resourcemanager.peering.implementation.PeeringServicePrefixImpl&text=PeeringServicePrefixImpl\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.peering.implementation"
artifact: com.azure.resourcemanager:azure-resourcemanager-peering:1.0.0-beta.1
