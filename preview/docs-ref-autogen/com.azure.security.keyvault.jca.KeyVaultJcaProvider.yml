### YamlMime:JavaType
uid: "com.azure.security.keyvault.jca.KeyVaultJcaProvider"
fullName: "com.azure.security.keyvault.jca.KeyVaultJcaProvider"
name: "KeyVaultJcaProvider"
nameWithType: "KeyVaultJcaProvider"
summary: "The Azure Key Vault security provider."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.Dictionary\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.Hashtable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.Properties\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.security.Provider\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.security.Provider.clear()"
- "java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)"
- "java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,? extends java.lang.Object>)"
- "java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)"
- "java.security.Provider.configure(java.lang.String)"
- "java.security.Provider.elements()"
- "java.security.Provider.entrySet()"
- "java.security.Provider.forEach(java.util.function.BiConsumer<? super java.lang.Object,? super java.lang.Object>)"
- "java.security.Provider.get(java.lang.Object)"
- "java.security.Provider.getInfo()"
- "java.security.Provider.getName()"
- "java.security.Provider.getOrDefault(java.lang.Object,java.lang.Object)"
- "java.security.Provider.getProperty(java.lang.String)"
- "java.security.Provider.getService(java.lang.String,java.lang.String)"
- "java.security.Provider.getServices()"
- "java.security.Provider.getVersion()"
- "java.security.Provider.getVersionStr()"
- "java.security.Provider.isConfigured()"
- "java.security.Provider.keySet()"
- "java.security.Provider.keys()"
- "java.security.Provider.load(java.io.InputStream)"
- "java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)"
- "java.security.Provider.put(java.lang.Object,java.lang.Object)"
- "java.security.Provider.putAll(java.util.Map<?,?>)"
- "java.security.Provider.putIfAbsent(java.lang.Object,java.lang.Object)"
- "java.security.Provider.putService(java.security.Provider.Service)"
- "java.security.Provider.remove(java.lang.Object)"
- "java.security.Provider.remove(java.lang.Object,java.lang.Object)"
- "java.security.Provider.removeService(java.security.Provider.Service)"
- "java.security.Provider.replace(java.lang.Object,java.lang.Object)"
- "java.security.Provider.replace(java.lang.Object,java.lang.Object,java.lang.Object)"
- "java.security.Provider.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)"
- "java.security.Provider.toString()"
- "java.security.Provider.values()"
- "java.util.Hashtable.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.Hashtable.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- "java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.Hashtable.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "java.util.Hashtable.getOrDefault(java.lang.Object,V)"
- "java.util.Hashtable.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "java.util.Hashtable.put(K,V)"
- "java.util.Hashtable.putAll(java.util.Map<? extends K,? extends V>)"
- "java.util.Hashtable.putIfAbsent(K,V)"
- "java.util.Hashtable.replace(K,V)"
- "java.util.Hashtable.replace(K,V,V)"
- "java.util.Hashtable.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.Properties.clone()"
- "java.util.Properties.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)"
- "java.util.Properties.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,?>)"
- "java.util.Properties.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)"
- "java.util.Properties.contains(java.lang.Object)"
- "java.util.Properties.containsKey(java.lang.Object)"
- "java.util.Properties.containsValue(java.lang.Object)"
- "java.util.Properties.equals(java.lang.Object)"
- "java.util.Properties.getProperty(java.lang.String,java.lang.String)"
- "java.util.Properties.hashCode()"
- "java.util.Properties.isEmpty()"
- "java.util.Properties.list(java.io.PrintStream)"
- "java.util.Properties.list(java.io.PrintWriter)"
- "java.util.Properties.load(java.io.Reader)"
- "java.util.Properties.loadFromXML(java.io.InputStream)"
- "java.util.Properties.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)"
- "java.util.Properties.propertyNames()"
- "java.util.Properties.rehash()"
- "java.util.Properties.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)"
- "java.util.Properties.save(java.io.OutputStream,java.lang.String)"
- "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
- "java.util.Properties.size()"
- "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
- "java.util.Properties.store(java.io.Writer,java.lang.String)"
- "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)"
- "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)"
- "java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)"
- "java.util.Properties.stringPropertyNames()"
syntax: "public class KeyVaultJcaProvider extends Provider"
constructors:
- "com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider()"
type: "class"
metadata: {}
package: "com.azure.security.keyvault.jca"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
