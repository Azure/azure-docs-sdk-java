### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.jca.KeyVaultJcaProvider
  id: KeyVaultJcaProvider
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.azure.security.keyvault.jca
  children:
  - com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider()
  langs:
  - java
  name: KeyVaultJcaProvider
  nameWithType: KeyVaultJcaProvider
  fullName: com.azure.security.keyvault.jca.KeyVaultJcaProvider
  type: Class
  package: com.azure.security.keyvault.jca
  summary: The Azure Key Vault security provider.
  syntax:
    content: public class KeyVaultJcaProvider extends Provider
  inheritance:
  - java.lang.Object
  - java.util.Dictionary
  - java.util.Hashtable
  - java.util.Properties
  - java.security.Provider
  inheritedMembers:
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.security.Provider.clear()
  - java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  - java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,? extends java.lang.Object>)
  - java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  - java.security.Provider.configure(java.lang.String)
  - java.security.Provider.elements()
  - java.security.Provider.entrySet()
  - java.security.Provider.forEach(java.util.function.BiConsumer<? super java.lang.Object,? super java.lang.Object>)
  - java.security.Provider.get(java.lang.Object)
  - java.security.Provider.getInfo()
  - java.security.Provider.getName()
  - java.security.Provider.getOrDefault(java.lang.Object,java.lang.Object)
  - java.security.Provider.getProperty(java.lang.String)
  - java.security.Provider.getService(java.lang.String,java.lang.String)
  - java.security.Provider.getServices()
  - java.security.Provider.getVersion()
  - java.security.Provider.getVersionStr()
  - java.security.Provider.isConfigured()
  - java.security.Provider.keySet()
  - java.security.Provider.keys()
  - java.security.Provider.load(java.io.InputStream)
  - java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  - java.security.Provider.put(java.lang.Object,java.lang.Object)
  - java.security.Provider.putAll(java.util.Map<?,?>)
  - java.security.Provider.putIfAbsent(java.lang.Object,java.lang.Object)
  - java.security.Provider.putService(java.security.Provider.Service)
  - java.security.Provider.remove(java.lang.Object)
  - java.security.Provider.remove(java.lang.Object,java.lang.Object)
  - java.security.Provider.removeService(java.security.Provider.Service)
  - java.security.Provider.replace(java.lang.Object,java.lang.Object)
  - java.security.Provider.replace(java.lang.Object,java.lang.Object,java.lang.Object)
  - java.security.Provider.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  - java.security.Provider.toString()
  - java.security.Provider.values()
  - java.util.Hashtable.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.Hashtable.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  - java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.Hashtable.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - java.util.Hashtable.getOrDefault(java.lang.Object,V)
  - java.util.Hashtable.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - java.util.Hashtable.put(K,V)
  - java.util.Hashtable.putAll(java.util.Map<? extends K,? extends V>)
  - java.util.Hashtable.putIfAbsent(K,V)
  - java.util.Hashtable.replace(K,V)
  - java.util.Hashtable.replace(K,V,V)
  - java.util.Hashtable.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.Properties.clone()
  - java.util.Properties.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  - java.util.Properties.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,?>)
  - java.util.Properties.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  - java.util.Properties.contains(java.lang.Object)
  - java.util.Properties.containsKey(java.lang.Object)
  - java.util.Properties.containsValue(java.lang.Object)
  - java.util.Properties.equals(java.lang.Object)
  - java.util.Properties.getProperty(java.lang.String,java.lang.String)
  - java.util.Properties.hashCode()
  - java.util.Properties.isEmpty()
  - java.util.Properties.list(java.io.PrintStream)
  - java.util.Properties.list(java.io.PrintWriter)
  - java.util.Properties.load(java.io.Reader)
  - java.util.Properties.loadFromXML(java.io.InputStream)
  - java.util.Properties.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  - java.util.Properties.propertyNames()
  - java.util.Properties.rehash()
  - java.util.Properties.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  - java.util.Properties.save(java.io.OutputStream,java.lang.String)
  - java.util.Properties.setProperty(java.lang.String,java.lang.String)
  - java.util.Properties.size()
  - java.util.Properties.store(java.io.OutputStream,java.lang.String)
  - java.util.Properties.store(java.io.Writer,java.lang.String)
  - java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)
  - java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)
  - java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)
  - java.util.Properties.stringPropertyNames()
- uid: com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider()
  id: KeyVaultJcaProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.azure.security.keyvault.jca.KeyVaultJcaProvider
  langs:
  - java
  name: KeyVaultJcaProvider()
  nameWithType: KeyVaultJcaProvider.KeyVaultJcaProvider()
  fullName: com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider()
  overload: com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider*
  type: Constructor
  package: com.azure.security.keyvault.jca
  summary: Constructor.
  syntax:
    content: public KeyVaultJcaProvider()
references:
- uid: com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider*
  name: KeyVaultJcaProvider
  nameWithType: KeyVaultJcaProvider.KeyVaultJcaProvider
  fullName: com.azure.security.keyvault.jca.KeyVaultJcaProvider.KeyVaultJcaProvider
  package: com.azure.security.keyvault.jca
- uid: java.security.Provider
  name: Provider
  nameWithType: Provider
  fullName: java.security.Provider
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.util.Hashtable.putAll(java.util.Map<? extends K,? extends V>)
  name: Hashtable.putAll(Map<? extends K,? extends V>)
  nameWithType: Hashtable.putAll(Map<? extends K,? extends V>)
  fullName: java.util.Hashtable.putAll(java.util.Map<? extends K,? extends V>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.security.Provider.forEach(java.util.function.BiConsumer<? super java.lang.Object,? super java.lang.Object>)
  name: Provider.forEach(BiConsumer<? super Object,? super Object>)
  nameWithType: Provider.forEach(BiConsumer<? super Object,? super Object>)
  fullName: java.security.Provider.forEach(java.util.function.BiConsumer<? super java.lang.Object,? super java.lang.Object>)
- uid: java.util.Properties.size()
  name: Properties.size()
  nameWithType: Properties.size()
  fullName: java.util.Properties.size()
- uid: java.util.Properties.setProperty(java.lang.String,java.lang.String)
  name: Properties.setProperty(String,String)
  nameWithType: Properties.setProperty(String,String)
  fullName: java.util.Properties.setProperty(java.lang.String,java.lang.String)
- uid: java.util.Properties.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  name: Properties.compute(Object,BiFunction<? super Object,? super Object,?>)
  nameWithType: Properties.compute(Object,BiFunction<? super Object,? super Object,?>)
  fullName: java.util.Properties.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
- uid: java.security.Provider.values()
  name: Provider.values()
  nameWithType: Provider.values()
  fullName: java.security.Provider.values()
- uid: java.security.Provider.load(java.io.InputStream)
  name: Provider.load(InputStream)
  nameWithType: Provider.load(InputStream)
  fullName: java.security.Provider.load(java.io.InputStream)
- uid: java.util.Hashtable.putIfAbsent(K,V)
  name: Hashtable.putIfAbsent(K,V)
  nameWithType: Hashtable.putIfAbsent(K,V)
  fullName: java.util.Hashtable.putIfAbsent(K,V)
- uid: java.util.Properties.list(java.io.PrintStream)
  name: Properties.list(PrintStream)
  nameWithType: Properties.list(PrintStream)
  fullName: java.util.Properties.list(java.io.PrintStream)
- uid: java.security.Provider.putService(java.security.Provider.Service)
  name: Provider.putService(Provider.Service)
  nameWithType: Provider.putService(Provider.Service)
  fullName: java.security.Provider.putService(java.security.Provider.Service)
- uid: java.util.Properties.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,?>)
  name: Properties.computeIfAbsent(Object,Function<? super Object,?>)
  nameWithType: Properties.computeIfAbsent(Object,Function<? super Object,?>)
  fullName: java.util.Properties.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,?>)
- uid: java.security.Provider.configure(java.lang.String)
  name: Provider.configure(String)
  nameWithType: Provider.configure(String)
  fullName: java.security.Provider.configure(java.lang.String)
- uid: java.util.Hashtable.replace(K,V,V)
  name: Hashtable.replace(K,V,V)
  nameWithType: Hashtable.replace(K,V,V)
  fullName: java.util.Hashtable.replace(K,V,V)
- uid: java.security.Provider.toString()
  name: Provider.toString()
  nameWithType: Provider.toString()
  fullName: java.security.Provider.toString()
- uid: java.security.Provider.put(java.lang.Object,java.lang.Object)
  name: Provider.put(Object,Object)
  nameWithType: Provider.put(Object,Object)
  fullName: java.security.Provider.put(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.security.Provider.getVersionStr()
  name: Provider.getVersionStr()
  nameWithType: Provider.getVersionStr()
  fullName: java.security.Provider.getVersionStr()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.Hashtable.put(K,V)
  name: Hashtable.put(K,V)
  nameWithType: Hashtable.put(K,V)
  fullName: java.util.Hashtable.put(K,V)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.security.Provider.isConfigured()
  name: Provider.isConfigured()
  nameWithType: Provider.isConfigured()
  fullName: java.security.Provider.isConfigured()
- uid: java.util.Properties.containsValue(java.lang.Object)
  name: Properties.containsValue(Object)
  nameWithType: Properties.containsValue(Object)
  fullName: java.util.Properties.containsValue(java.lang.Object)
- uid: java.security.Provider.putIfAbsent(java.lang.Object,java.lang.Object)
  name: Provider.putIfAbsent(Object,Object)
  nameWithType: Provider.putIfAbsent(Object,Object)
  fullName: java.security.Provider.putIfAbsent(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.Properties.rehash()
  name: Properties.rehash()
  nameWithType: Properties.rehash()
  fullName: java.util.Properties.rehash()
- uid: java.util.Properties.load(java.io.Reader)
  name: Properties.load(Reader)
  nameWithType: Properties.load(Reader)
  fullName: java.util.Properties.load(java.io.Reader)
- uid: java.util.Properties.store(java.io.OutputStream,java.lang.String)
  name: Properties.store(OutputStream,String)
  nameWithType: Properties.store(OutputStream,String)
  fullName: java.util.Properties.store(java.io.OutputStream,java.lang.String)
- uid: java.security.Provider.putAll(java.util.Map<?,?>)
  name: Provider.putAll(Map<?,?>)
  nameWithType: Provider.putAll(Map<?,?>)
  fullName: java.security.Provider.putAll(java.util.Map<?,?>)
- uid: java.util.Properties.containsKey(java.lang.Object)
  name: Properties.containsKey(Object)
  nameWithType: Properties.containsKey(Object)
  fullName: java.util.Properties.containsKey(java.lang.Object)
- uid: java.util.Properties.contains(java.lang.Object)
  name: Properties.contains(Object)
  nameWithType: Properties.contains(Object)
  fullName: java.util.Properties.contains(java.lang.Object)
- uid: java.security.Provider.get(java.lang.Object)
  name: Provider.get(Object)
  nameWithType: Provider.get(Object)
  fullName: java.security.Provider.get(java.lang.Object)
- uid: java.util.Properties.getProperty(java.lang.String,java.lang.String)
  name: Properties.getProperty(String,String)
  nameWithType: Properties.getProperty(String,String)
  fullName: java.util.Properties.getProperty(java.lang.String,java.lang.String)
- uid: java.security.Provider.keySet()
  name: Provider.keySet()
  nameWithType: Provider.keySet()
  fullName: java.security.Provider.keySet()
- uid: java.security.Provider.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  name: Provider.replaceAll(BiFunction<? super Object,? super Object,? extends Object>)
  nameWithType: Provider.replaceAll(BiFunction<? super Object,? super Object,? extends Object>)
  fullName: java.security.Provider.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
- uid: java.security.Provider.keys()
  name: Provider.keys()
  nameWithType: Provider.keys()
  fullName: java.security.Provider.keys()
- uid: java.security.Provider.remove(java.lang.Object)
  name: Provider.remove(Object)
  nameWithType: Provider.remove(Object)
  fullName: java.security.Provider.remove(java.lang.Object)
- uid: java.security.Provider.replace(java.lang.Object,java.lang.Object,java.lang.Object)
  name: Provider.replace(Object,Object,Object)
  nameWithType: Provider.replace(Object,Object,Object)
  fullName: java.security.Provider.replace(java.lang.Object,java.lang.Object,java.lang.Object)
- uid: java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)
  name: Properties.storeToXML(OutputStream,String,Charset)
  nameWithType: Properties.storeToXML(OutputStream,String,Charset)
  fullName: java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)
- uid: java.util.Properties.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  name: Properties.replaceAll(BiFunction<? super Object,? super Object,?>)
  nameWithType: Properties.replaceAll(BiFunction<? super Object,? super Object,?>)
  fullName: java.util.Properties.replaceAll(java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
- uid: java.util.Hashtable.replace(K,V)
  name: Hashtable.replace(K,V)
  nameWithType: Hashtable.replace(K,V)
  fullName: java.util.Hashtable.replace(K,V)
- uid: java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,? extends java.lang.Object>)
  name: Provider.computeIfAbsent(Object,Function<? super Object,? extends Object>)
  nameWithType: Provider.computeIfAbsent(Object,Function<? super Object,? extends Object>)
  fullName: java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function<? super java.lang.Object,? extends java.lang.Object>)
- uid: java.util.Hashtable.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: Hashtable.compute(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: Hashtable.compute(K,BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.Hashtable.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.security.Provider.getProperty(java.lang.String)
  name: Provider.getProperty(String)
  nameWithType: Provider.getProperty(String)
  fullName: java.security.Provider.getProperty(java.lang.String)
- uid: java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  name: Provider.computeIfPresent(Object,BiFunction<? super Object,? super Object,? extends Object>)
  nameWithType: Provider.computeIfPresent(Object,BiFunction<? super Object,? super Object,? extends Object>)
  fullName: java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
- uid: java.security.Provider.getServices()
  name: Provider.getServices()
  nameWithType: Provider.getServices()
  fullName: java.security.Provider.getServices()
- uid: java.util.Properties.propertyNames()
  name: Properties.propertyNames()
  nameWithType: Properties.propertyNames()
  fullName: java.util.Properties.propertyNames()
- uid: java.util.Properties.stringPropertyNames()
  name: Properties.stringPropertyNames()
  nameWithType: Properties.stringPropertyNames()
  fullName: java.util.Properties.stringPropertyNames()
- uid: java.security.Provider.getInfo()
  name: Provider.getInfo()
  nameWithType: Provider.getInfo()
  fullName: java.security.Provider.getInfo()
- uid: java.util.Properties.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  name: Properties.merge(Object,Object,BiFunction<? super Object,? super Object,?>)
  nameWithType: Properties.merge(Object,Object,BiFunction<? super Object,? super Object,?>)
  fullName: java.util.Properties.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
- uid: java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  name: Provider.merge(Object,Object,BiFunction<? super Object,? super Object,? extends Object>)
  nameWithType: Provider.merge(Object,Object,BiFunction<? super Object,? super Object,? extends Object>)
  fullName: java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
- uid: java.util.Properties.isEmpty()
  name: Properties.isEmpty()
  nameWithType: Properties.isEmpty()
  fullName: java.util.Properties.isEmpty()
- uid: java.security.Provider.entrySet()
  name: Provider.entrySet()
  nameWithType: Provider.entrySet()
  fullName: java.security.Provider.entrySet()
- uid: java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)
  name: Properties.storeToXML(OutputStream,String)
  nameWithType: Properties.storeToXML(OutputStream,String)
  fullName: java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String)
- uid: java.util.Hashtable.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  name: Hashtable.computeIfAbsent(K,Function<? super K,? extends V>)
  nameWithType: Hashtable.computeIfAbsent(K,Function<? super K,? extends V>)
  fullName: java.util.Hashtable.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
- uid: java.security.Provider.getOrDefault(java.lang.Object,java.lang.Object)
  name: Provider.getOrDefault(Object,Object)
  nameWithType: Provider.getOrDefault(Object,Object)
  fullName: java.security.Provider.getOrDefault(java.lang.Object,java.lang.Object)
- uid: java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)
  name: Properties.storeToXML(OutputStream,String,String)
  nameWithType: Properties.storeToXML(OutputStream,String,String)
  fullName: java.util.Properties.storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)
- uid: java.security.Provider.getVersion()
  name: Provider.getVersion()
  nameWithType: Provider.getVersion()
  fullName: java.security.Provider.getVersion()
- uid: java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
  name: Provider.compute(Object,BiFunction<? super Object,? super Object,? extends Object>)
  nameWithType: Provider.compute(Object,BiFunction<? super Object,? super Object,? extends Object>)
  fullName: java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)
- uid: java.security.Provider.clear()
  name: Provider.clear()
  nameWithType: Provider.clear()
  fullName: java.security.Provider.clear()
- uid: java.util.Properties.equals(java.lang.Object)
  name: Properties.equals(Object)
  nameWithType: Properties.equals(Object)
  fullName: java.util.Properties.equals(java.lang.Object)
- uid: java.util.Properties.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
  name: Properties.computeIfPresent(Object,BiFunction<? super Object,? super Object,?>)
  nameWithType: Properties.computeIfPresent(Object,BiFunction<? super Object,? super Object,?>)
  fullName: java.util.Properties.computeIfPresent(java.lang.Object,java.util.function.BiFunction<? super java.lang.Object,? super java.lang.Object,?>)
- uid: java.security.Provider.remove(java.lang.Object,java.lang.Object)
  name: Provider.remove(Object,Object)
  nameWithType: Provider.remove(Object,Object)
  fullName: java.security.Provider.remove(java.lang.Object,java.lang.Object)
- uid: java.util.Properties.store(java.io.Writer,java.lang.String)
  name: Properties.store(Writer,String)
  nameWithType: Properties.store(Writer,String)
  fullName: java.util.Properties.store(java.io.Writer,java.lang.String)
- uid: java.security.Provider.getService(java.lang.String,java.lang.String)
  name: Provider.getService(String,String)
  nameWithType: Provider.getService(String,String)
  fullName: java.security.Provider.getService(java.lang.String,java.lang.String)
- uid: java.util.Properties.loadFromXML(java.io.InputStream)
  name: Properties.loadFromXML(InputStream)
  nameWithType: Properties.loadFromXML(InputStream)
  fullName: java.util.Properties.loadFromXML(java.io.InputStream)
- uid: java.util.Hashtable.getOrDefault(java.lang.Object,V)
  name: Hashtable.getOrDefault(Object,V)
  nameWithType: Hashtable.getOrDefault(Object,V)
  fullName: java.util.Hashtable.getOrDefault(java.lang.Object,V)
- uid: java.util.Hashtable.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  name: Hashtable.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  nameWithType: Hashtable.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  fullName: java.util.Hashtable.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
- uid: java.security.Provider.elements()
  name: Provider.elements()
  nameWithType: Provider.elements()
  fullName: java.security.Provider.elements()
- uid: java.util.Hashtable.forEach(java.util.function.BiConsumer<? super K,? super V>)
  name: Hashtable.forEach(BiConsumer<? super K,? super V>)
  nameWithType: Hashtable.forEach(BiConsumer<? super K,? super V>)
  fullName: java.util.Hashtable.forEach(java.util.function.BiConsumer<? super K,? super V>)
- uid: java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: Hashtable.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: Hashtable.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.Properties.clone()
  name: Properties.clone()
  nameWithType: Properties.clone()
  fullName: java.util.Properties.clone()
- uid: java.security.Provider.replace(java.lang.Object,java.lang.Object)
  name: Provider.replace(Object,Object)
  nameWithType: Provider.replace(Object,Object)
  fullName: java.security.Provider.replace(java.lang.Object,java.lang.Object)
- uid: java.util.Properties.hashCode()
  name: Properties.hashCode()
  nameWithType: Properties.hashCode()
  fullName: java.util.Properties.hashCode()
- uid: java.util.Properties.list(java.io.PrintWriter)
  name: Properties.list(PrintWriter)
  nameWithType: Properties.list(PrintWriter)
  fullName: java.util.Properties.list(java.io.PrintWriter)
- uid: java.util.Hashtable.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: Hashtable.replaceAll(BiFunction<? super K,? super V,? extends V>)
  nameWithType: Hashtable.replaceAll(BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.Hashtable.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.security.Provider.removeService(java.security.Provider.Service)
  name: Provider.removeService(Provider.Service)
  nameWithType: Provider.removeService(Provider.Service)
  fullName: java.security.Provider.removeService(java.security.Provider.Service)
- uid: java.security.Provider.getName()
  name: Provider.getName()
  nameWithType: Provider.getName()
  fullName: java.security.Provider.getName()
- uid: java.util.Properties.save(java.io.OutputStream,java.lang.String)
  name: Properties.save(OutputStream,String)
  nameWithType: Properties.save(OutputStream,String)
  fullName: java.util.Properties.save(java.io.OutputStream,java.lang.String)
- uid: java.util.Hashtable.putAll(java.util.Map
  name: Hashtable.putAll(Map
  nameWithType: Hashtable.putAll(Map
  fullName: java.util.Hashtable.putAll(java.util.Map
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: '? super java.lang.Object,? super java.lang.Object>)'
  name: '? super Object,? super Object>)'
  nameWithType: '? super Object,? super Object>)'
  fullName: '? super java.lang.Object,? super java.lang.Object>)'
- uid: java.security.Provider.forEach(java.util.function.BiConsumer
  name: Provider.forEach(BiConsumer
  nameWithType: Provider.forEach(BiConsumer
  fullName: java.security.Provider.forEach(java.util.function.BiConsumer
- uid: java.util.Properties.compute(java.lang.Object,java.util.function.BiFunction
  name: Properties.compute(Object,BiFunction
  nameWithType: Properties.compute(Object,BiFunction
  fullName: java.util.Properties.compute(java.lang.Object,java.util.function.BiFunction
- uid: '? super java.lang.Object,? super java.lang.Object,?>)'
  name: '? super Object,? super Object,?>)'
  nameWithType: '? super Object,? super Object,?>)'
  fullName: '? super java.lang.Object,? super java.lang.Object,?>)'
- uid: '? super java.lang.Object,?>)'
  name: '? super Object,?>)'
  nameWithType: '? super Object,?>)'
  fullName: '? super java.lang.Object,?>)'
- uid: java.util.Properties.computeIfAbsent(java.lang.Object,java.util.function.Function
  name: Properties.computeIfAbsent(Object,Function
  nameWithType: Properties.computeIfAbsent(Object,Function
  fullName: java.util.Properties.computeIfAbsent(java.lang.Object,java.util.function.Function
- uid: ?,?>)
  name: ?,?>)
  nameWithType: ?,?>)
  fullName: ?,?>)
- uid: java.security.Provider.putAll(java.util.Map
  name: Provider.putAll(Map
  nameWithType: Provider.putAll(Map
  fullName: java.security.Provider.putAll(java.util.Map
- uid: '? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)'
  name: '? super Object,? super Object,? extends Object>)'
  nameWithType: '? super Object,? super Object,? extends Object>)'
  fullName: '? super java.lang.Object,? super java.lang.Object,? extends java.lang.Object>)'
- uid: java.security.Provider.replaceAll(java.util.function.BiFunction
  name: Provider.replaceAll(BiFunction
  nameWithType: Provider.replaceAll(BiFunction
  fullName: java.security.Provider.replaceAll(java.util.function.BiFunction
- uid: java.util.Properties.replaceAll(java.util.function.BiFunction
  name: Properties.replaceAll(BiFunction
  nameWithType: Properties.replaceAll(BiFunction
  fullName: java.util.Properties.replaceAll(java.util.function.BiFunction
- uid: java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function
  name: Provider.computeIfAbsent(Object,Function
  nameWithType: Provider.computeIfAbsent(Object,Function
  fullName: java.security.Provider.computeIfAbsent(java.lang.Object,java.util.function.Function
- uid: '? super java.lang.Object,? extends java.lang.Object>)'
  name: '? super Object,? extends Object>)'
  nameWithType: '? super Object,? extends Object>)'
  fullName: '? super java.lang.Object,? extends java.lang.Object>)'
- uid: java.util.Hashtable.compute(K,java.util.function.BiFunction
  name: Hashtable.compute(K,BiFunction
  nameWithType: Hashtable.compute(K,BiFunction
  fullName: java.util.Hashtable.compute(K,java.util.function.BiFunction
- uid: '? super K,? super V,? extends V>)'
  name: '? super K,? super V,? extends V>)'
  nameWithType: '? super K,? super V,? extends V>)'
  fullName: '? super K,? super V,? extends V>)'
- uid: java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction
  name: Provider.computeIfPresent(Object,BiFunction
  nameWithType: Provider.computeIfPresent(Object,BiFunction
  fullName: java.security.Provider.computeIfPresent(java.lang.Object,java.util.function.BiFunction
- uid: java.util.Properties.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction
  name: Properties.merge(Object,Object,BiFunction
  nameWithType: Properties.merge(Object,Object,BiFunction
  fullName: java.util.Properties.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction
- uid: java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction
  name: Provider.merge(Object,Object,BiFunction
  nameWithType: Provider.merge(Object,Object,BiFunction
  fullName: java.security.Provider.merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction
- uid: '? super K,? extends V>)'
  name: '? super K,? extends V>)'
  nameWithType: '? super K,? extends V>)'
  fullName: '? super K,? extends V>)'
- uid: java.util.Hashtable.computeIfAbsent(K,java.util.function.Function
  name: Hashtable.computeIfAbsent(K,Function
  nameWithType: Hashtable.computeIfAbsent(K,Function
  fullName: java.util.Hashtable.computeIfAbsent(K,java.util.function.Function
- uid: java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction
  name: Provider.compute(Object,BiFunction
  nameWithType: Provider.compute(Object,BiFunction
  fullName: java.security.Provider.compute(java.lang.Object,java.util.function.BiFunction
- uid: java.util.Properties.computeIfPresent(java.lang.Object,java.util.function.BiFunction
  name: Properties.computeIfPresent(Object,BiFunction
  nameWithType: Properties.computeIfPresent(Object,BiFunction
  fullName: java.util.Properties.computeIfPresent(java.lang.Object,java.util.function.BiFunction
- uid: java.util.Hashtable.merge(K,V,java.util.function.BiFunction
  name: Hashtable.merge(K,V,BiFunction
  nameWithType: Hashtable.merge(K,V,BiFunction
  fullName: java.util.Hashtable.merge(K,V,java.util.function.BiFunction
- uid: '? super V,? super V,? extends V>)'
  name: '? super V,? super V,? extends V>)'
  nameWithType: '? super V,? super V,? extends V>)'
  fullName: '? super V,? super V,? extends V>)'
- uid: '? super K,? super V>)'
  name: '? super K,? super V>)'
  nameWithType: '? super K,? super V>)'
  fullName: '? super K,? super V>)'
- uid: java.util.Hashtable.forEach(java.util.function.BiConsumer
  name: Hashtable.forEach(BiConsumer
  nameWithType: Hashtable.forEach(BiConsumer
  fullName: java.util.Hashtable.forEach(java.util.function.BiConsumer
- uid: java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction
  name: Hashtable.computeIfPresent(K,BiFunction
  nameWithType: Hashtable.computeIfPresent(K,BiFunction
  fullName: java.util.Hashtable.computeIfPresent(K,java.util.function.BiFunction
- uid: java.util.Hashtable.replaceAll(java.util.function.BiFunction
  name: Hashtable.replaceAll(BiFunction
  nameWithType: Hashtable.replaceAll(BiFunction
  fullName: java.util.Hashtable.replaceAll(java.util.function.BiFunction
