### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator"
fullName: "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator"
name: "PolymorphicTypeValidator"
nameWithType: "PolymorphicTypeValidator"
summary: "Interface for classes that handle validation of class-name - based subtypes used with Polymorphic Deserialization: both via \"default typing\" and explicit `@JsonTypeInfo` when using Java Class name as Type Identifier. The main purpose, initially, is to allow pluggable allow lists to avoid security problems that occur with unlimited class names (See [ this article][this article] for full explanation).\n\nCalls to methods are done as follows:\n\n1.  When a deserializer is needed for a polymorphic property (including root values) -- either for explicitly annotated polymorphic type, or \"default typing\" -- <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#validateBaseType\"></xref> is called to see if validity can be determined for all possible types: if <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#ALLOWED\"></xref> is returned no futher checks are made for any subtypes; of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#DENIED\"></xref> is returned, an exception will be thrown to indicate invalid polymorphic property\n2.  If neither deny nor allowed was returned for property with specific base type, first time specific Type Id (Class Name) is encountered, method <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#validateSubClassName\"></xref> is called with resolved class name: it may indicate allowed/denied, resulting in either allowed use or denial with exception\n3.  If no denial/allowance indicated, class name is resolved to actual <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>, and <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig&lt;?&gt;,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#validateSubType(MapperConfig, JavaType, JavaType)\"></xref> is called: if <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#ALLOWED\"></xref> is returned, usage is accepted; otherwise (denied or indeterminate) usage is not allowed and exception is thrown\n\nNotes on implementations: implementations must be thread-safe and shareable (usually meaning they are stateless). Determinations for validity are usually effectively cached on per-property basis (by virtue of subtype deserializers being cached by polymorphic deserializers) so caching at validator level is usually not needed. If caching is used, however, it must be done in thread-safe manner as validators are shared within <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> as well as possible across mappers (in case of default/standard validator).\n\nAlso note that it is strongly recommended that all implementations are based on provided abstract base class, <xref uid=\"com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Base\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PolymorphicTypeValidator.Base\"></xref> which contains helper methods and default implementations for returning <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Validity#INDETERMINATE\"></xref> for validation methods (to allow only overriding relevant methods implementation cares about)\n\n\n[this article]: https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class PolymorphicTypeValidator implements Serializable"
constructors:
- "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.PolymorphicTypeValidator()"
methods:
- "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)"
- "com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)"
type: "class"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
