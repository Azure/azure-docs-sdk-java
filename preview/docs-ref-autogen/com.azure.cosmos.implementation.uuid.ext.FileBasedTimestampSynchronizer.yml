### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  id: FileBasedTimestampSynchronizer
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext
  children:
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME1
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME2
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer()
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(java.io.File,java.io.File)
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(java.io.File,java.io.File,long)
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate()
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate(com.azure.cosmos.implementation.uuid.ext.LockedFile,com.azure.cosmos.implementation.uuid.ext.LockedFile)
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize()
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mInterval
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked1
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked2
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval(long)
  - com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update(long)
  langs:
  - java
  name: FileBasedTimestampSynchronizer
  nameWithType: FileBasedTimestampSynchronizer
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  type: Class
  package: com.azure.cosmos.implementation.uuid.ext
  summary: >-
    Implementation of <xref uid="com.azure.cosmos.implementation.uuid.TimestampSynchronizer" data-throw-if-not-resolved="false">TimestampSynchronizer</xref>, which uses file system as the storage and locking mechanism.


    Synchronization is achieved by obtaining an exclusive file locks on two specified lock files, and by using the files to store first "safe" timestamp value that the generator can use; alternating between one to use to ensure one of them always contains a valid timestamp. Latter is needed to guard against system clock moving backwards after UUID generator restart.


    Note: this class will only work on JDK 1.4 and above, since it requires NIO package to do proper file locking (as well as new opening mode for <xref uid="" data-throw-if-not-resolved="false">RandomAccessFile</xref>).


    Also note that it is assumed that the caller has taken care to synchronize access to method to be single-threaded. As such, none of the methods is explicitly synchronized here.
  syntax:
    content: public final class FileBasedTimestampSynchronizer extends TimestampSynchronizer
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  inheritedMembers:
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME1
  id: DEFAULT_LOCK_FILE_NAME1
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: DEFAULT_LOCK_FILE_NAME1
  nameWithType: FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME1
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME1
  type: Field
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: protected static final String DEFAULT_LOCK_FILE_NAME1
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME2
  id: DEFAULT_LOCK_FILE_NAME2
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: DEFAULT_LOCK_FILE_NAME2
  nameWithType: FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME2
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME2
  type: Field
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: protected static final String DEFAULT_LOCK_FILE_NAME2
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer()
  id: FileBasedTimestampSynchronizer()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: FileBasedTimestampSynchronizer()
  nameWithType: FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer()
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer()
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer*
  type: Constructor
  package: com.azure.cosmos.implementation.uuid.ext
  summary: Constructor that uses default values for names of files to use (files will get created in the current working directory), as well as for the update frequency value (10 seconds).
  syntax:
    content: public FileBasedTimestampSynchronizer()
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(java.io.File,java.io.File)
  id: FileBasedTimestampSynchronizer(java.io.File,java.io.File)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: FileBasedTimestampSynchronizer(File lockFile1, File lockFile2)
  nameWithType: FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(File lockFile1, File lockFile2)
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(File lockFile1, File lockFile2)
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer*
  type: Constructor
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: public FileBasedTimestampSynchronizer(File lockFile1, File lockFile2)
    parameters:
    - id: lockFile1
      type: java.io.File
    - id: lockFile2
      type: java.io.File
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(java.io.File,java.io.File,long)
  id: FileBasedTimestampSynchronizer(java.io.File,java.io.File,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: FileBasedTimestampSynchronizer(File lockFile1, File lockFile2, long interval)
  nameWithType: FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(File lockFile1, File lockFile2, long interval)
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(File lockFile1, File lockFile2, long interval)
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer*
  type: Constructor
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: public FileBasedTimestampSynchronizer(File lockFile1, File lockFile2, long interval)
    parameters:
    - id: lockFile1
      type: java.io.File
    - id: lockFile2
      type: java.io.File
    - id: interval
      type: long
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate()
  id: deactivate()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: deactivate()
  nameWithType: FileBasedTimestampSynchronizer.deactivate()
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate()
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate*
  type: Method
  package: com.azure.cosmos.implementation.uuid.ext
  summary: Method <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref> will call if this synchronizer object is being replaced by another synchronizer (or removed, that is, no more synchronization is to be done). It will not be called if JVM terminates.
  syntax:
    content: public void deactivate()
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate(com.azure.cosmos.implementation.uuid.ext.LockedFile,com.azure.cosmos.implementation.uuid.ext.LockedFile)
  id: doDeactivate(com.azure.cosmos.implementation.uuid.ext.LockedFile,com.azure.cosmos.implementation.uuid.ext.LockedFile)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: doDeactivate(LockedFile lf1, LockedFile lf2)
  nameWithType: FileBasedTimestampSynchronizer.doDeactivate(LockedFile lf1, LockedFile lf2)
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate(LockedFile lf1, LockedFile lf2)
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate*
  type: Method
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: protected static void doDeactivate(LockedFile lf1, LockedFile lf2)
    parameters:
    - id: lf1
      type: com.azure.cosmos.implementation.uuid.ext.LockedFile
    - id: lf2
      type: com.azure.cosmos.implementation.uuid.ext.LockedFile
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize()
  id: initialize()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: initialize()
  nameWithType: FileBasedTimestampSynchronizer.initialize()
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize()
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize*
  type: Method
  package: com.azure.cosmos.implementation.uuid.ext
  summary: This method is to be called only once by <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref>. It should fetch the persisted timestamp value, which indicates first timestamp value that is guaranteed NOT to have used by a previous incarnation. If it can not determine such value, it is to return 0L as a marker.
  syntax:
    content: protected long initialize()
    return:
      type: long
      description: >-
        First timestamp value that was NOT locked by lock files;
           0L to indicate that no information was read.
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mInterval
  id: mInterval
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: mInterval
  nameWithType: FileBasedTimestampSynchronizer.mInterval
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mInterval
  type: Field
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: protected long mInterval
    return:
      type: long
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked1
  id: mLocked1
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: mLocked1
  nameWithType: FileBasedTimestampSynchronizer.mLocked1
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked1
  type: Field
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: protected final LockedFile mLocked1
    return:
      type: com.azure.cosmos.implementation.uuid.ext.LockedFile
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked2
  id: mLocked2
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: mLocked2
  nameWithType: FileBasedTimestampSynchronizer.mLocked2
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked2
  type: Field
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: protected final LockedFile mLocked2
    return:
      type: com.azure.cosmos.implementation.uuid.ext.LockedFile
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval(long)
  id: setUpdateInterval(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: setUpdateInterval(long interval)
  nameWithType: FileBasedTimestampSynchronizer.setUpdateInterval(long interval)
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval(long interval)
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval*
  type: Method
  package: com.azure.cosmos.implementation.uuid.ext
  syntax:
    content: public void setUpdateInterval(long interval)
    parameters:
    - id: interval
      type: long
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update(long)
  id: update(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer
  langs:
  - java
  name: update(long now)
  nameWithType: FileBasedTimestampSynchronizer.update(long now)
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update(long now)
  overload: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update*
  type: Method
  package: com.azure.cosmos.implementation.uuid.ext
  summary: Method called by <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref> to indicate that it has generated a timestamp value that is beyond last legal timestamp value. The method should only return once it has "locked" specified timestamp value (and possible additional ones).
  syntax:
    content: public long update(long now)
    parameters:
    - id: now
      type: long
    return:
      type: long
      description: >-
        Timestamp value that the caller can NOT use. That is, all
           timestamp values prior to (less than) this value can be used
           ok, but this value and ones after can only be used by first
           calling update.
  exceptions:
  - type: java.io.IOException
references:
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer*
  name: FileBasedTimestampSynchronizer
  nameWithType: FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer
  package: com.azure.cosmos.implementation.uuid.ext
- uid: java.io.File
  spec.java:
  - uid: java.io.File
    name: File
    fullName: java.io.File
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval*
  name: setUpdateInterval
  nameWithType: FileBasedTimestampSynchronizer.setUpdateInterval
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval
  package: com.azure.cosmos.implementation.uuid.ext
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize*
  name: initialize
  nameWithType: FileBasedTimestampSynchronizer.initialize
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize
  package: com.azure.cosmos.implementation.uuid.ext
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate*
  name: deactivate
  nameWithType: FileBasedTimestampSynchronizer.deactivate
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate
  package: com.azure.cosmos.implementation.uuid.ext
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update*
  name: update
  nameWithType: FileBasedTimestampSynchronizer.update
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update
  package: com.azure.cosmos.implementation.uuid.ext
- uid: com.azure.cosmos.implementation.uuid.ext.LockedFile
  spec.java:
  - uid: com.azure.cosmos.implementation.uuid.ext.LockedFile
    name: LockedFile
    fullName: com.azure.cosmos.implementation.uuid.ext.LockedFile
- uid: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate*
  name: doDeactivate
  nameWithType: FileBasedTimestampSynchronizer.doDeactivate
  fullName: com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate
  package: com.azure.cosmos.implementation.uuid.ext
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  name: TimestampSynchronizer
  nameWithType: TimestampSynchronizer
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()
  name: TimestampSynchronizer.deactivate()
  nameWithType: TimestampSynchronizer.deactivate()
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()
  name: TimestampSynchronizer.initialize()
  nameWithType: TimestampSynchronizer.initialize()
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long)
  name: TimestampSynchronizer.update(long)
  nameWithType: TimestampSynchronizer.update(long)
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
