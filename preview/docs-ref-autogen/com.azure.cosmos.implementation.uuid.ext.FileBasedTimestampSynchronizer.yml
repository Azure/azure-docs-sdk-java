### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer"
fullName: "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer"
name: "FileBasedTimestampSynchronizer"
nameWithType: "FileBasedTimestampSynchronizer"
summary: "Implementation of <xref uid=\"com.azure.cosmos.implementation.uuid.TimestampSynchronizer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TimestampSynchronizer\"></xref>, which uses file system as the storage and locking mechanism.\n\nSynchronization is achieved by obtaining an exclusive file locks on two specified lock files, and by using the files to store first \"safe\" timestamp value that the generator can use; alternating between one to use to ensure one of them always contains a valid timestamp. Latter is needed to guard against system clock moving backwards after UUID generator restart.\n\nNote: this class will only work on JDK 1.4 and above, since it requires NIO package to do proper file locking (as well as new opening mode for <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RandomAccessFile\"></xref>).\n\nAlso note that it is assumed that the caller has taken care to synchronize access to method to be single-threaded. As such, none of the methods is explicitly synchronized here."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.uuid.TimestampSynchronizer\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()"
- "com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()"
- "com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class FileBasedTimestampSynchronizer extends TimestampSynchronizer"
constructors:
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer()"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(java.io.File,java.io.File)"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.FileBasedTimestampSynchronizer(java.io.File,java.io.File,long)"
fields:
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME1"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.DEFAULT_LOCK_FILE_NAME2"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mInterval"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked1"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.mLocked2"
methods:
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.deactivate()"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.doDeactivate(com.azure.cosmos.implementation.uuid.ext.LockedFile,com.azure.cosmos.implementation.uuid.ext.LockedFile)"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.initialize()"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.setUpdateInterval(long)"
- "com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer.update(long)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.uuid.ext"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
