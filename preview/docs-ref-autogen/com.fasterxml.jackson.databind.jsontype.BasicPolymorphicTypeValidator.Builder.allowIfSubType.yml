### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType*"
fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType"
name: "allowIfSubType"
nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubType"
members:
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  name: "allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  summary: "Method for appending custom matcher called with resolved subtype: if matcher returns `true`, type will be accepted; if `false`, other matchers are applied."
  parameters:
  - description: "Custom matcher to apply to resolved subtype"
    name: "matcher"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.TypeMatcher&text=TypeMatcher\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfSubType(BasicPolymorphicTypeValidator.TypeMatcher matcher)"
  returns:
    description: "This Builder to allow call chaining"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(Class<?> subTypeBase)"
  name: "allowIfSubType(Class<?> subTypeBase)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubType(Class<?> subTypeBase)"
  summary: "Method for appending matcher that will allow specific subtype (regardless of declared base type) if it is `subTypeBase` or its subtype. For example, call to\n\n```java\nbuilder.allowIfSubType(MyImplType.class)\n```\n\nwould indicate that any polymorphic values with type of is `MyImplType` (or subclass thereof) would be allowed."
  parameters:
  - name: "subTypeBase"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfSubType(Class<?> subTypeBase)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(String prefixForSubType)"
  name: "allowIfSubType(String prefixForSubType)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubType(String prefixForSubType)"
  summary: "Method for appending matcher that will allow specific subtype (regardless of declared base type) in cases where subclass name starts with specified prefix For example, call to\n\n```java\nbuilder.allowIfSubType(\"com.mycompany.\")\n```\n\nwould indicate that any polymorphic values in package `com.mycompany` would be allowed."
  parameters:
  - name: "prefixForSubType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfSubType(String prefixForSubType)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(java.util.regex.Pattern)"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubType(Pattern patternForSubType)"
  name: "allowIfSubType(Pattern patternForSubType)"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubType(Pattern patternForSubType)"
  summary: "Method for appending matcher that will allow specific subtype (regardless of declared base type) in cases where subclass name matches given <xref uid=\"java.util.regex.Pattern\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Pattern\"></xref>. For example, call to\n\n```java\nbuilder.allowIfSubType(Pattern.compile(\"com\\\\.mycompany\\\\.\")\n```\n\nwould indicate that any polymorphic values in package `com.mycompany` would be allowed.\n\nNOTE! <xref uid=\"java.util.regex.Pattern\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Pattern\"></xref> match is applied using `if (patternForSubType.matcher(typeId).matches()) { }` that is, it must match the whole class name, not just part."
  parameters:
  - name: "patternForSubType"
    type: "<xref href=\"java.util.regex.Pattern?alt=java.util.regex.Pattern&text=Pattern\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfSubType(Pattern patternForSubType)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
