### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.StandardKeySet
  id: StandardKeySet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.StandardKeySet.StandardKeySet()
  langs:
  - java
  name: ForwardingSortedMap<K,V>.StandardKeySet
  nameWithType: ForwardingSortedMap<K,V>.StandardKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap<K,V>.StandardKeySet
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: A sensible implementation of <xref uid="java.util.SortedMap.keySet" data-throw-if-not-resolved="false">SortedMap#keySet</xref> in terms of the methods of `ForwardingSortedMap`. In many cases, you may wish to override <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.keySet" data-throw-if-not-resolved="false">ForwardingSortedMap#keySet</xref> to forward to this implementation or a subclass thereof.
  syntax:
    content: protected class ForwardingSortedMap<K,V>.StandardKeySet extends Maps.SortedKeySet<K,V>
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - java.util.AbstractSet
  - com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.clear()
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.forEach(java.util.function.Consumer<? super K>)
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.iterator()
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.size()
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.comparator()
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.first()
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.headSet(K)
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.last()
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.subSet(K,K)
  - com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.tailSet(K)
  - com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.retainAll(java.util.Collection<?>)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.add(E)
  - java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.toArray()
  - java.util.AbstractCollection.toString()
  - java.util.AbstractSet.equals(java.lang.Object)
  - java.util.AbstractSet.hashCode()
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.StandardKeySet.StandardKeySet()
  id: StandardKeySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.StandardKeySet
  langs:
  - java
  name: StandardKeySet()
  nameWithType: ForwardingSortedMap<K,V>.StandardKeySet.StandardKeySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap<K,V>.StandardKeySet.StandardKeySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.StandardKeySet.StandardKeySet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructor for use by subclasses.
  syntax:
    content: public StandardKeySet()
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap.StandardKeySet.StandardKeySet*
  name: StandardKeySet
  nameWithType: ForwardingSortedMap<K,V>.StandardKeySet.StandardKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingSortedMap<K,V>.StandardKeySet.StandardKeySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet<K,V>
  name: Maps.SortedKeySet<K,V>
  nameWithType: Maps.SortedKeySet<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.tailSet(K)
  name: Maps.SortedKeySet.tailSet(K)
  nameWithType: Maps.SortedKeySet.tailSet(K)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.tailSet(K)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.subSet(K,K)
  name: Maps.SortedKeySet.subSet(K,K)
  nameWithType: Maps.SortedKeySet.subSet(K,K)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.subSet(K,K)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.iterator()
  name: Maps.KeySet.iterator()
  nameWithType: Maps.KeySet.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.iterator()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection<?>)
  name: Sets.ImprovedAbstractSet.removeAll(Collection<?>)
  nameWithType: Sets.ImprovedAbstractSet.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.isEmpty()
  name: Maps.KeySet.isEmpty()
  nameWithType: Maps.KeySet.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.isEmpty()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.size()
  name: Maps.KeySet.size()
  nameWithType: Maps.KeySet.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.size()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.remove(java.lang.Object)
  name: Maps.KeySet.remove(Object)
  nameWithType: Maps.KeySet.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.first()
  name: Maps.SortedKeySet.first()
  nameWithType: Maps.SortedKeySet.first()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.first()
- uid: java.util.AbstractCollection.add(E)
  name: AbstractCollection.add(E)
  nameWithType: AbstractCollection.add(E)
  fullName: java.util.AbstractCollection.add(E)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractSet.hashCode()
  name: AbstractSet.hashCode()
  nameWithType: AbstractSet.hashCode()
  fullName: java.util.AbstractSet.hashCode()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.clear()
  name: Maps.KeySet.clear()
  nameWithType: Maps.KeySet.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.clear()
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.contains(java.lang.Object)
  name: Maps.KeySet.contains(Object)
  nameWithType: Maps.KeySet.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.contains(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.headSet(K)
  name: Maps.SortedKeySet.headSet(K)
  nameWithType: Maps.SortedKeySet.headSet(K)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.headSet(K)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.comparator()
  name: Maps.SortedKeySet.comparator()
  nameWithType: Maps.SortedKeySet.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.comparator()
- uid: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
  name: AbstractCollection.addAll(Collection<? extends E>)
  nameWithType: AbstractCollection.addAll(Collection<? extends E>)
  fullName: java.util.AbstractCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.forEach(java.util.function.Consumer<? super K>)
  name: Maps.KeySet.forEach(Consumer<? super K>)
  nameWithType: Maps.KeySet.forEach(Consumer<? super K>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.forEach(java.util.function.Consumer<? super K>)
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.last()
  name: Maps.SortedKeySet.last()
  nameWithType: Maps.SortedKeySet.last()
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet.last()
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.retainAll(java.util.Collection<?>)
  name: Sets.ImprovedAbstractSet.retainAll(Collection<?>)
  nameWithType: Sets.ImprovedAbstractSet.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.retainAll(java.util.Collection<?>)
- uid: java.util.AbstractSet.equals(java.lang.Object)
  name: AbstractSet.equals(Object)
  nameWithType: AbstractSet.equals(Object)
  fullName: java.util.AbstractSet.equals(java.lang.Object)
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet
  name: Maps.SortedKeySet
  nameWithType: Maps.SortedKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.SortedKeySet
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection
  name: Sets.ImprovedAbstractSet.removeAll(Collection
  nameWithType: Sets.ImprovedAbstractSet.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.removeAll(java.util.Collection
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: java.util.AbstractCollection.addAll(java.util.Collection
  name: AbstractCollection.addAll(Collection
  nameWithType: AbstractCollection.addAll(Collection
  fullName: java.util.AbstractCollection.addAll(java.util.Collection
- uid: '? super K>)'
  name: '? super K>)'
  nameWithType: '? super K>)'
  fullName: '? super K>)'
- uid: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.forEach(java.util.function.Consumer
  name: Maps.KeySet.forEach(Consumer
  nameWithType: Maps.KeySet.forEach(Consumer
  fullName: com.azure.cosmos.implementation.guava25.collect.Maps.KeySet.forEach(java.util.function.Consumer
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.retainAll(java.util.Collection
  name: Sets.ImprovedAbstractSet.retainAll(Collection
  nameWithType: Sets.ImprovedAbstractSet.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.ImprovedAbstractSet.retainAll(java.util.Collection
