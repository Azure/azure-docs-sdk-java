### YamlMime:JavaType
uid: "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy"
fullName: "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy"
name: "ContainerRegistryCredentialsPolicy"
nameWithType: "ContainerRegistryCredentialsPolicy"
summary: "Credential policy for the container registry. It follows the challenge based authorization scheme.\n\nFor example GET /api/v1/acr/repositories translates into the following calls.\n\nStep1: GET /api/v1/acr/repositories Return Header: 401: www-authenticate header - Bearer realm=\"\\{url\\}\",service=\"\\{serviceName\\}\",scope=\"\\{scope\\}\",error=\"invalid\\_token\".\n\nStep2: Parse the serviceName, scope from the service.\n\nStep3: POST /api/oauth2/exchange Request Body : \\{service, scope, grant-type, aadToken with ARM scope\\} Response Body: \\{acrRefreshToken\\}\n\nStep4: POST /api/oauth2/token Request Body: \\{acrRefreshToken, scope, grant-type\\} Response Body: \\{acrAccessToken\\}\n\nStep5: GET /api/v1/acr/repositories Request Header: \\{Bearer acrTokenAccess\\}"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ContainerRegistryCredentialsPolicy implements HttpPipelinePolicy"
constructors:
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.ContainerRegistryCredentialsPolicy(com.azure.core.credential.TokenCredential,java.lang.String,com.azure.core.http.HttpPipeline)"
fields:
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.AUTHENTICATION_CHALLENGE_PARAMS_PATTERN"
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.AUTHORIZATION"
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.SCOPES_PARAMETER"
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.SERVICE_PARAMETER"
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.WWW_AUTHENTICATE"
methods:
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.authorizeRequest(com.azure.core.http.HttpPipelineCallContext,com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryTokenRequestContext)"
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.onChallenge(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpResponse)"
- "com.azure.containers.containerregistry.implementation.authentication.ContainerRegistryCredentialsPolicy.process(com.azure.core.http.HttpPipelineCallContext,com.azure.core.http.HttpPipelineNextPolicy)"
type: "class"
implements:
- "<xref href=\"com.azure.core.http.policy.HttpPipelinePolicy?alt=com.azure.core.http.policy.HttpPipelinePolicy&text=HttpPipelinePolicy\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.containers.containerregistry.implementation.authentication"
artifact: com.azure:azure-containers-containerregistry:1.0.0-beta.1
