### YamlMime:JavaType
uid: "com.azure.xml.XmlSerializable"
fullName: "com.azure.xml.XmlSerializable<T>"
name: "XmlSerializable<T>"
nameWithType: "XmlSerializable<T>"
summary: "Indicates that the implementing class can be serialized to and deserialized from XML."
syntax: "public interface **XmlSerializable<T>**"
methods:
- uid: "com.azure.xml.XmlSerializable.<T>fromXml(com.azure.xml.XmlReader)"
  fullName: "com.azure.xml.XmlSerializable<T>.fromXml(XmlReader xmlReader)"
  name: "fromXml(XmlReader xmlReader)"
  nameWithType: "XmlSerializable<T>.fromXml(XmlReader xmlReader)"
  summary: "Reads an XML stream into an object."
  modifiers:
  - "static"
  parameters:
  - description: "The <xref uid=\"com.azure.xml.XmlReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlReader\"></xref> being read."
    name: "xmlReader"
    type: "<xref href=\"com.azure.xml.XmlReader?alt=com.azure.xml.XmlReader&text=XmlReader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static T <T>fromXml(XmlReader xmlReader)"
  exceptions:
  - description: "If an object fails to be read from the <code>xmlReader</code>."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Reads an XML stream into an object.\n\nImplementations of <xref uid=\"com.azure.xml.XmlSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlSerializable\"></xref> must define this method, otherwise an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref> will be thrown."
  returns:
    description: "The object that the XML stream represented, may return null."
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.xml.XmlSerializable.toXml(com.azure.xml.XmlWriter)"
  fullName: "com.azure.xml.XmlSerializable<T>.toXml(XmlWriter xmlWriter)"
  name: "toXml(XmlWriter xmlWriter)"
  nameWithType: "XmlSerializable<T>.toXml(XmlWriter xmlWriter)"
  summary: "Writes the object to the passed <xref uid=\"com.azure.xml.XmlWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlWriter\"></xref>."
  modifiers:
  - "abstract"
  parameters:
  - description: "The <xref uid=\"com.azure.xml.XmlWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlWriter\"></xref> being written to."
    name: "xmlWriter"
    type: "<xref href=\"com.azure.xml.XmlWriter?alt=com.azure.xml.XmlWriter&text=XmlWriter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract XmlWriter toXml(XmlWriter xmlWriter)"
  exceptions:
  - description: "If the object fails to be written to the <code>xmlWriter</code>."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/javax/xml/stream/XMLStreamException.html\">XMLStreamException</a>"
  desc: "Writes the object to the passed <xref uid=\"com.azure.xml.XmlWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlWriter\"></xref>.\n\nThe contract for writing XML to <xref uid=\"com.azure.xml.XmlWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlWriter\"></xref> is that the object being written will handle opening and closing its own XML object. So, for objects calling out to other <xref uid=\"com.azure.xml.XmlSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlSerializable\"></xref> objects for serialization, they'll pass the <xref uid=\"com.azure.xml.XmlWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlWriter\"></xref> to the other <xref uid=\"com.azure.xml.XmlSerializable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlSerializable\"></xref> object. This way objects writing XML will be self-encapsulated for writing properly formatted XML."
  returns:
    description: "The <xref uid=\"com.azure.xml.XmlWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"XmlWriter\"></xref> where the JSON was written for chaining."
    type: "<xref href=\"com.azure.xml.XmlWriter?alt=com.azure.xml.XmlWriter&text=XmlWriter\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
typeParameters:
- description: "The type of the object that is XML serializable."
  name: "T"
desc: "Indicates that the implementing class can be serialized to and deserialized from XML.\n\nSince deserialization needs to work without an instance of the class, implementing this interface it's assumed the class has a static method `fromXml(XmlReader)` that deserializes an instance of that class. The contract for reading XML... TODO (alzimmer): finish this javadoc"
metadata: {}
package: "com.azure.xml"
artifact: com.azure:azure-xml:1.0.0-beta.1
