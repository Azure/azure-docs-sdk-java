### YamlMime:JavaType
uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient"
fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient"
name: "AnomalyDetectorAsyncClient"
nameWithType: "AnomalyDetectorAsyncClient"
summary: "Initializes a new instance of the asynchronous Anomaly<wbr>Detector<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AnomalyDetectorAsyncClient"
methods:
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModel(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModel(UUID modelId)"
  name: "deleteMultivariateModel(UUID modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.deleteMultivariateModel(UUID modelId)"
  summary: "Delete an existing multivariate model according to the model<wbr>Id."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteMultivariateModel(UUID modelId)"
  desc: "Delete an existing multivariate model according to the modelId."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModelWithResponse(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.deleteMultivariateModelWithResponse(UUID modelId)"
  name: "deleteMultivariateModelWithResponse(UUID modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.deleteMultivariateModelWithResponse(UUID modelId)"
  summary: "Delete an existing multivariate model according to the model<wbr>Id."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteMultivariateModelWithResponse(UUID modelId)"
  desc: "Delete an existing multivariate model according to the modelId."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectAnomaly(java.util.UUID,com.azure.ai.anomalydetector.models.DetectionRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectAnomaly(UUID modelId, DetectionRequest body)"
  name: "detectAnomaly(UUID modelId, DetectionRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectAnomaly(UUID modelId, DetectionRequest body)"
  summary: "Submit detection multivariate anomaly task with the trained model of model<wbr>Id, the input schema should be the same with the training request."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Detect anomaly request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectionRequest?alt=com.azure.ai.anomalydetector.models.DetectionRequest&text=DetectionRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> detectAnomaly(UUID modelId, DetectionRequest body)"
  desc: "Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same with the training request. Thus request will be complete asynchronously and will return a resultId for querying the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one single file. Each time-series will be as follows: the first column is timestamp and the second column is value."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectAnomalyWithResponse(java.util.UUID,com.azure.ai.anomalydetector.models.DetectionRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectAnomalyWithResponse(UUID modelId, DetectionRequest body)"
  name: "detectAnomalyWithResponse(UUID modelId, DetectionRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectAnomalyWithResponse(UUID modelId, DetectionRequest body)"
  summary: "Submit detection multivariate anomaly task with the trained model of model<wbr>Id, the input schema should be the same with the training request."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Detect anomaly request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectionRequest?alt=com.azure.ai.anomalydetector.models.DetectionRequest&text=DetectionRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DetectAnomalyResponse> detectAnomalyWithResponse(UUID modelId, DetectionRequest body)"
  desc: "Submit detection multivariate anomaly task with the trained model of modelId, the input schema should be the same with the training request. Thus request will be complete asynchronously and will return a resultId for querying the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one single file. Each time-series will be as follows: the first column is timestamp and the second column is value."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.DetectAnomalyResponse?alt=com.azure.ai.anomalydetector.models.DetectAnomalyResponse&text=DetectAnomalyResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectChangePoint(com.azure.ai.anomalydetector.models.ChangePointDetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectChangePoint(ChangePointDetectRequest body)"
  name: "detectChangePoint(ChangePointDetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectChangePoint(ChangePointDetectRequest body)"
  summary: "Evaluate change point score of every series point."
  parameters:
  - description: "Time series points and granularity is needed. Advanced model parameters can also be set in the\n     request if needed."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ChangePointDetectRequest?alt=com.azure.ai.anomalydetector.models.ChangePointDetectRequest&text=ChangePointDetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ChangePointDetectResponse> detectChangePoint(ChangePointDetectRequest body)"
  desc: "Evaluate change point score of every series point."
  returns:
    description: "the response of change point detection."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.ChangePointDetectResponse?alt=com.azure.ai.anomalydetector.models.ChangePointDetectResponse&text=ChangePointDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectChangePointWithResponse(com.azure.ai.anomalydetector.models.ChangePointDetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectChangePointWithResponse(ChangePointDetectRequest body)"
  name: "detectChangePointWithResponse(ChangePointDetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectChangePointWithResponse(ChangePointDetectRequest body)"
  summary: "Evaluate change point score of every series point."
  parameters:
  - description: "Time series points and granularity is needed. Advanced model parameters can also be set in the\n     request if needed."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ChangePointDetectRequest?alt=com.azure.ai.anomalydetector.models.ChangePointDetectRequest&text=ChangePointDetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ChangePointDetectResponse>> detectChangePointWithResponse(ChangePointDetectRequest body)"
  desc: "Evaluate change point score of every series point."
  returns:
    description: "the response of change point detection."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.ChangePointDetectResponse?alt=com.azure.ai.anomalydetector.models.ChangePointDetectResponse&text=ChangePointDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeries(com.azure.ai.anomalydetector.models.DetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeries(DetectRequest body)"
  name: "detectEntireSeries(DetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectEntireSeries(DetectRequest body)"
  summary: "This operation generates a model with an entire series, each point is detected with the same model."
  parameters:
  - description: "Time series points and period if needed. Advanced model parameters can also be set in the request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectRequest?alt=com.azure.ai.anomalydetector.models.DetectRequest&text=DetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<EntireDetectResponse> detectEntireSeries(DetectRequest body)"
  desc: "This operation generates a model with an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series."
  returns:
    description: "the response of entire anomaly detection."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeriesWithResponse(com.azure.ai.anomalydetector.models.DetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeriesWithResponse(DetectRequest body)"
  name: "detectEntireSeriesWithResponse(DetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectEntireSeriesWithResponse(DetectRequest body)"
  summary: "This operation generates a model with an entire series, each point is detected with the same model."
  parameters:
  - description: "Time series points and period if needed. Advanced model parameters can also be set in the request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectRequest?alt=com.azure.ai.anomalydetector.models.DetectRequest&text=DetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<EntireDetectResponse>> detectEntireSeriesWithResponse(DetectRequest body)"
  desc: "This operation generates a model with an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series."
  returns:
    description: "the response of entire anomaly detection."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectLastPoint(com.azure.ai.anomalydetector.models.DetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectLastPoint(DetectRequest body)"
  name: "detectLastPoint(DetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectLastPoint(DetectRequest body)"
  summary: "This operation generates a model using points before the latest one."
  parameters:
  - description: "Time series points and period if needed. Advanced model parameters can also be set in the request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectRequest?alt=com.azure.ai.anomalydetector.models.DetectRequest&text=DetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LastDetectResponse> detectLastPoint(DetectRequest body)"
  desc: "This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics."
  returns:
    description: "the response of last anomaly detection."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.LastDetectResponse?alt=com.azure.ai.anomalydetector.models.LastDetectResponse&text=LastDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectLastPointWithResponse(com.azure.ai.anomalydetector.models.DetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectLastPointWithResponse(DetectRequest body)"
  name: "detectLastPointWithResponse(DetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectLastPointWithResponse(DetectRequest body)"
  summary: "This operation generates a model using points before the latest one."
  parameters:
  - description: "Time series points and period if needed. Advanced model parameters can also be set in the request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectRequest?alt=com.azure.ai.anomalydetector.models.DetectRequest&text=DetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LastDetectResponse>> detectLastPointWithResponse(DetectRequest body)"
  desc: "This operation generates a model using points before the latest one. With this method, only historical points are used to determine whether the target point is an anomaly. The latest point detecting operation matches the scenario of real-time monitoring of business metrics."
  returns:
    description: "the response of last anomaly detection."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.LastDetectResponse?alt=com.azure.ai.anomalydetector.models.LastDetectResponse&text=LastDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.exportModel(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.exportModel(UUID modelId)"
  name: "exportModel(UUID modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.exportModel(UUID modelId)"
  summary: "Export multivariate anomaly detection model based on model<wbr>Id."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ByteBuffer> exportModel(UUID modelId)"
  desc: "Export multivariate anomaly detection model based on modelId."
  returns:
    description: "the response."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.exportModelWithResponse(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.exportModelWithResponse(UUID modelId)"
  name: "exportModelWithResponse(UUID modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.exportModelWithResponse(UUID modelId)"
  summary: "Export multivariate anomaly detection model based on model<wbr>Id."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<StreamResponse> exportModelWithResponse(UUID modelId)"
  desc: "Export multivariate anomaly detection model based on modelId."
  returns:
    description: "the response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.StreamResponse?alt=com.azure.core.http.rest.StreamResponse&text=StreamResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getDetectionResult(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getDetectionResult(UUID resultId)"
  name: "getDetectionResult(UUID resultId)"
  nameWithType: "AnomalyDetectorAsyncClient.getDetectionResult(UUID resultId)"
  summary: "Get multivariate anomaly detection result based on result<wbr>Id returned by the Detect<wbr>Anomaly<wbr>Async api."
  parameters:
  - description: "Result identifier."
    name: "resultId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<DetectionResult> getDetectionResult(UUID resultId)"
  desc: "Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api."
  returns:
    description: "multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.DetectionResult?alt=com.azure.ai.anomalydetector.models.DetectionResult&text=DetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getDetectionResultWithResponse(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getDetectionResultWithResponse(UUID resultId)"
  name: "getDetectionResultWithResponse(UUID resultId)"
  nameWithType: "AnomalyDetectorAsyncClient.getDetectionResultWithResponse(UUID resultId)"
  summary: "Get multivariate anomaly detection result based on result<wbr>Id returned by the Detect<wbr>Anomaly<wbr>Async api."
  parameters:
  - description: "Result identifier."
    name: "resultId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<DetectionResult>> getDetectionResultWithResponse(UUID resultId)"
  desc: "Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api."
  returns:
    description: "multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.DetectionResult?alt=com.azure.ai.anomalydetector.models.DetectionResult&text=DetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModel(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModel(UUID modelId)"
  name: "getMultivariateModel(UUID modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.getMultivariateModel(UUID modelId)"
  summary: "Get detailed information of multivariate model, including the training status and variables used in the model."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Model> getMultivariateModel(UUID modelId)"
  desc: "Get detailed information of multivariate model, including the training status and variables used in the model."
  returns:
    description: "detailed information of multivariate model, including the training status and variables used in the\n     model."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.Model?alt=com.azure.ai.anomalydetector.models.Model&text=Model\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModelWithResponse(java.util.UUID)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.getMultivariateModelWithResponse(UUID modelId)"
  name: "getMultivariateModelWithResponse(UUID modelId)"
  nameWithType: "AnomalyDetectorAsyncClient.getMultivariateModelWithResponse(UUID modelId)"
  summary: "Get detailed information of multivariate model, including the training status and variables used in the model."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Model>> getMultivariateModelWithResponse(UUID modelId)"
  desc: "Get detailed information of multivariate model, including the training status and variables used in the model."
  returns:
    description: "detailed information of multivariate model, including the training status and variables used in the\n     model."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.Model?alt=com.azure.ai.anomalydetector.models.Model&text=Model\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.lastDetectAnomaly(java.util.UUID,com.azure.ai.anomalydetector.models.LastDetectionRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.lastDetectAnomaly(UUID modelId, LastDetectionRequest body)"
  name: "lastDetectAnomaly(UUID modelId, LastDetectionRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.lastDetectAnomaly(UUID modelId, LastDetectionRequest body)"
  summary: "Synchronized API for anomaly detection."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Request for last detection."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.LastDetectionRequest?alt=com.azure.ai.anomalydetector.models.LastDetectionRequest&text=LastDetectionRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<LastDetectionResult> lastDetectAnomaly(UUID modelId, LastDetectionRequest body)"
  desc: "Synchronized API for anomaly detection."
  returns:
    description: "the response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.LastDetectionResult?alt=com.azure.ai.anomalydetector.models.LastDetectionResult&text=LastDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.lastDetectAnomalyWithResponse(java.util.UUID,com.azure.ai.anomalydetector.models.LastDetectionRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.lastDetectAnomalyWithResponse(UUID modelId, LastDetectionRequest body)"
  name: "lastDetectAnomalyWithResponse(UUID modelId, LastDetectionRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.lastDetectAnomalyWithResponse(UUID modelId, LastDetectionRequest body)"
  summary: "Synchronized API for anomaly detection."
  parameters:
  - description: "Model identifier."
    name: "modelId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Request for last detection."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.LastDetectionRequest?alt=com.azure.ai.anomalydetector.models.LastDetectionRequest&text=LastDetectionRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<LastDetectionResult>> lastDetectAnomalyWithResponse(UUID modelId, LastDetectionRequest body)"
  desc: "Synchronized API for anomaly detection."
  returns:
    description: "the response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.LastDetectionResult?alt=com.azure.ai.anomalydetector.models.LastDetectionResult&text=LastDetectionResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModel(java.lang.Integer,java.lang.Integer)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModel(Integer skip, Integer top)"
  name: "listMultivariateModel(Integer skip, Integer top)"
  nameWithType: "AnomalyDetectorAsyncClient.listMultivariateModel(Integer skip, Integer top)"
  summary: "List models of a subscription."
  parameters:
  - description: "$skip indicates how many models will be skipped."
    name: "skip"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "$top indicates how many models will be fetched."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ModelSnapshot> listMultivariateModel(Integer skip, Integer top)"
  desc: "List models of a subscription."
  returns:
    description: "response of listing models."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.ModelSnapshot?alt=com.azure.ai.anomalydetector.models.ModelSnapshot&text=ModelSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModelNextSinglePage(java.lang.String)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModelNextSinglePage(String nextLink)"
  name: "listMultivariateModelNextSinglePage(String nextLink)"
  nameWithType: "AnomalyDetectorAsyncClient.listMultivariateModelNextSinglePage(String nextLink)"
  summary: "Get the next page of items."
  parameters:
  - description: "The nextLink parameter."
    name: "nextLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelNextSinglePage(String nextLink)"
  desc: "Get the next page of items."
  returns:
    description: "response of listing models."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.ModelSnapshot?alt=com.azure.ai.anomalydetector.models.ModelSnapshot&text=ModelSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModelSinglePage(java.lang.Integer,java.lang.Integer)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.listMultivariateModelSinglePage(Integer skip, Integer top)"
  name: "listMultivariateModelSinglePage(Integer skip, Integer top)"
  nameWithType: "AnomalyDetectorAsyncClient.listMultivariateModelSinglePage(Integer skip, Integer top)"
  summary: "List models of a subscription."
  parameters:
  - description: "$skip indicates how many models will be skipped."
    name: "skip"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "$top indicates how many models will be fetched."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PagedResponse<ModelSnapshot>> listMultivariateModelSinglePage(Integer skip, Integer top)"
  desc: "List models of a subscription."
  returns:
    description: "response of listing models."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.PagedResponse?alt=com.azure.core.http.rest.PagedResponse&text=PagedResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.ModelSnapshot?alt=com.azure.ai.anomalydetector.models.ModelSnapshot&text=ModelSnapshot\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModel(com.azure.ai.anomalydetector.models.ModelInfo)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModel(ModelInfo body)"
  name: "trainMultivariateModel(ModelInfo body)"
  nameWithType: "AnomalyDetectorAsyncClient.trainMultivariateModel(ModelInfo body)"
  summary: "Create and train a multivariate anomaly detection model."
  parameters:
  - description: "Training request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ModelInfo?alt=com.azure.ai.anomalydetector.models.ModelInfo&text=ModelInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> trainMultivariateModel(ModelInfo body)"
  desc: "Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which the first column is timestamp and the second column is value."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModelWithResponse(com.azure.ai.anomalydetector.models.ModelInfo)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.trainMultivariateModelWithResponse(ModelInfo body)"
  name: "trainMultivariateModelWithResponse(ModelInfo body)"
  nameWithType: "AnomalyDetectorAsyncClient.trainMultivariateModelWithResponse(ModelInfo body)"
  summary: "Create and train a multivariate anomaly detection model."
  parameters:
  - description: "Training request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ModelInfo?alt=com.azure.ai.anomalydetector.models.ModelInfo&text=ModelInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TrainMultivariateModelResponse> trainMultivariateModelWithResponse(ModelInfo body)"
  desc: "Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which the first column is timestamp and the second column is value."
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.TrainMultivariateModelResponse?alt=com.azure.ai.anomalydetector.models.TrainMultivariateModelResponse&text=TrainMultivariateModelResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous AnomalyDetectorClient type."
metadata: {}
package: "com.azure.ai.anomalydetector"
artifact: com.azure:azure-ai-anomalydetector:3.0.0-beta.4
