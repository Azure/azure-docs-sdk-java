### YamlMime:ManagedReference
items:
- uid: "com.azure.search.documents.SearchIndexAsyncClient"
  id: "SearchIndexAsyncClient"
  parent: "com.azure.search.documents"
  children:
  - "com.azure.search.documents.SearchIndexAsyncClient.SearchIndexAsyncClient(java.lang.String,java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)"
  - "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(java.lang.String,java.lang.String)"
  - "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.search.documents.models.RequestOptions)"
  - "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.deleteDocuments(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.getDocument(java.lang.String)"
  - "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCount()"
  - "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse()"
  - "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse(com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse(java.lang.String,java.util.List<java.lang.String>,com.azure.search.documents.models.RequestOptions)"
  - "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse(java.lang.String,java.util.List<java.lang.String>,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.getEndpoint()"
  - "com.azure.search.documents.SearchIndexAsyncClient.getHttpPipeline()"
  - "com.azure.search.documents.SearchIndexAsyncClient.getIndexName()"
  - "com.azure.search.documents.SearchIndexAsyncClient.getServiceVersion()"
  - "com.azure.search.documents.SearchIndexAsyncClient.indexDocuments(com.azure.search.documents.models.IndexDocumentsBatch<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse(com.azure.search.documents.models.IndexDocumentsBatch<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse(com.azure.search.documents.models.IndexDocumentsBatch<?>,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.mergeDocuments(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocuments(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.search(java.lang.String)"
  - "com.azure.search.documents.SearchIndexAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.search.documents.models.RequestOptions)"
  - "com.azure.search.documents.SearchIndexAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.suggest(java.lang.String,java.lang.String)"
  - "com.azure.search.documents.SearchIndexAsyncClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.search.documents.models.RequestOptions)"
  - "com.azure.search.documents.SearchIndexAsyncClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  - "com.azure.search.documents.SearchIndexAsyncClient.uploadDocuments(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse(java.lang.Iterable<?>)"
  - "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "SearchIndexAsyncClient"
  nameWithType: "SearchIndexAsyncClient"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient"
  type: "Class"
  package: "com.azure.search.documents"
  summary: "Cognitive Search Asynchronous Client to query an index and upload, merge, or delete documents"
  syntax:
    content: "public final class SearchIndexAsyncClient"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.SearchIndexAsyncClient(java.lang.String,java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)"
  id: "SearchIndexAsyncClient(java.lang.String,java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "SearchIndexAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
  nameWithType: "SearchIndexAsyncClient.SearchIndexAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.SearchIndexAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.SearchIndexAsyncClient*"
  type: "Constructor"
  package: "com.azure.search.documents"
  summary: "Package private constructor to be used by <xref uid=\"com.azure.search.documents.SearchIndexClientBuilder\" data-throw-if-not-resolved=\"false\">SearchIndexClientBuilder</xref>"
  syntax:
    content: " SearchIndexAsyncClient(String endpoint, String indexName, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
    parameters:
    - id: "endpoint"
      type: "java.lang.String"
    - id: "indexName"
      type: "java.lang.String"
    - id: "serviceVersion"
      type: "com.azure.search.documents.SearchServiceVersion"
    - id: "httpPipeline"
      type: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(java.lang.String,java.lang.String)"
  id: "autocomplete(java.lang.String,java.lang.String)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "autocomplete(String searchText, String suggesterName)"
  nameWithType: "SearchIndexAsyncClient.autocomplete(String searchText, String suggesterName)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(String searchText, String suggesterName)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Autocompletes incomplete query terms based on input text and matching terms in the index."
  syntax:
    content: "public AutocompletePagedFlux autocomplete(String searchText, String suggesterName)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
      description: "search text"
    - id: "suggesterName"
      type: "java.lang.String"
      description: "suggester name"
    return:
      type: "com.azure.search.documents.util.AutocompletePagedFlux"
      description: "auto complete result."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.search.documents.models.RequestOptions)"
  id: "autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.search.documents.models.RequestOptions)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions)"
  nameWithType: "SearchIndexAsyncClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Autocompletes incomplete query terms based on input text and matching terms in the index."
  syntax:
    content: "public AutocompletePagedFlux autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
      description: "search text"
    - id: "suggesterName"
      type: "java.lang.String"
      description: "suggester name"
    - id: "autocompleteOptions"
      type: "com.azure.search.documents.models.AutocompleteOptions"
      description: "autocomplete options"
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.search.documents.util.AutocompletePagedFlux"
      description: "auto complete result."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  id: "autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchIndexAsyncClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " AutocompletePagedFlux autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
    - id: "suggesterName"
      type: "java.lang.String"
    - id: "autocompleteOptions"
      type: "com.azure.search.documents.models.AutocompleteOptions"
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.search.documents.util.AutocompletePagedFlux"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocuments(java.lang.Iterable<?>)"
  id: "deleteDocuments(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "deleteDocuments(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.deleteDocuments(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocuments(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocuments*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Deletes a collection of documents from the target index."
  syntax:
    content: "public Mono<IndexDocumentsResult> deleteDocuments(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to delete from the target Index. Fields other than the key are ignored."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>"
      description: "document index result."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse(java.lang.Iterable<?>)"
  id: "deleteDocumentsWithResponse(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "deleteDocumentsWithResponse(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.deleteDocumentsWithResponse(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Deletes a collection of documents from the target index."
  syntax:
    content: "public Mono<Response<IndexDocumentsResult>> deleteDocumentsWithResponse(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to delete from the target Index. Fields other than the key are ignored."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
      description: "response containing the document index result."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  id: "deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "deleteDocumentsWithResponse(Iterable<?> documents, Context context)"
  nameWithType: "SearchIndexAsyncClient.deleteDocumentsWithResponse(Iterable<?> documents, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse(Iterable<?> documents, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<IndexDocumentsResult>> deleteDocumentsWithResponse(Iterable<?> documents, Context context)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocument(java.lang.String)"
  id: "getDocument(java.lang.String)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getDocument(String key)"
  nameWithType: "SearchIndexAsyncClient.getDocument(String key)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocument(String key)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getDocument*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Retrieves a document from the Azure Cognitive Search index.\n\nView [naming rules][] for guidelines on constructing valid document keys.\n\n\n[naming rules]: https://docs.microsoft.com/rest/api/searchservice/Naming-rules"
  syntax:
    content: "public Mono<SearchDocument> getDocument(String key)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the document to retrieve."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.documents.SearchDocument>"
      description: "the document object"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCount()"
  id: "getDocumentCount()"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getDocumentCount()"
  nameWithType: "SearchIndexAsyncClient.getDocumentCount()"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCount()"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCount*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Queries the number of documents in the search index."
  syntax:
    content: "public Mono<Long> getDocumentCount()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Long>"
      description: "the number of documents."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse()"
  id: "getDocumentCountWithResponse()"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getDocumentCountWithResponse()"
  nameWithType: "SearchIndexAsyncClient.getDocumentCountWithResponse()"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse()"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Queries the number of documents in the search index."
  syntax:
    content: "public Mono<Response<Long>> getDocumentCountWithResponse()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Long>>"
      description: "response containing the number of documents."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse(com.azure.core.util.Context)"
  id: "getDocumentCountWithResponse(com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getDocumentCountWithResponse(Context context)"
  nameWithType: "SearchIndexAsyncClient.getDocumentCountWithResponse(Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse(Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<Long>> getDocumentCountWithResponse(Context context)"
    parameters:
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Long>>"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse(java.lang.String,java.util.List<java.lang.String>,com.azure.search.documents.models.RequestOptions)"
  id: "getDocumentWithResponse(java.lang.String,java.util.List<java.lang.String>,com.azure.search.documents.models.RequestOptions)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions)"
  nameWithType: "SearchIndexAsyncClient.getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Retrieves a document from the Azure Cognitive Search index.\n\nView [naming rules][] for guidelines on constructing valid document keys.\n\n\n[naming rules]: https://docs.microsoft.com/rest/api/searchservice/Naming-rules"
  syntax:
    content: "public Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "The key of the document to retrieve."
    - id: "selectedFields"
      type: "java.util.List<java.lang.String>"
      description: "List of field names to retrieve for the document; Any field not retrieved will have null or\n default as its corresponding property value in the returned object."
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.SearchDocument>>"
      description: "a response containing the document object"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse(java.lang.String,java.util.List<java.lang.String>,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  id: "getDocumentWithResponse(java.lang.String,java.util.List<java.lang.String>,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchIndexAsyncClient.getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<SearchDocument>> getDocumentWithResponse(String key, List<String> selectedFields, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "key"
      type: "java.lang.String"
    - id: "selectedFields"
      type: "java.util.List<java.lang.String>"
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.SearchDocument>>"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getEndpoint()"
  id: "getEndpoint()"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getEndpoint()"
  nameWithType: "SearchIndexAsyncClient.getEndpoint()"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getEndpoint()"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getEndpoint*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Gets the endpoint for the Azure Cognitive Search service."
  syntax:
    content: "public String getEndpoint()"
    return:
      type: "java.lang.String"
      description: "the endpoint value."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getHttpPipeline()"
  id: "getHttpPipeline()"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getHttpPipeline()"
  nameWithType: "SearchIndexAsyncClient.getHttpPipeline()"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getHttpPipeline()"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getHttpPipeline*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\">HttpPipeline</xref> powering this client."
  syntax:
    content: " HttpPipeline getHttpPipeline()"
    return:
      type: "com.azure.core.http.HttpPipeline"
      description: "the pipeline."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getIndexName()"
  id: "getIndexName()"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getIndexName()"
  nameWithType: "SearchIndexAsyncClient.getIndexName()"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getIndexName()"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getIndexName*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Gets the name of the Azure Cognitive Search index."
  syntax:
    content: "public String getIndexName()"
    return:
      type: "java.lang.String"
      description: "the indexName value."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getServiceVersion()"
  id: "getServiceVersion()"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "getServiceVersion()"
  nameWithType: "SearchIndexAsyncClient.getServiceVersion()"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getServiceVersion()"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.getServiceVersion*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Gets the version of the Search service the client is using."
  syntax:
    content: "public SearchServiceVersion getServiceVersion()"
    return:
      type: "com.azure.search.documents.SearchServiceVersion"
      description: "The version of the Search service the client is using."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.indexDocuments(com.azure.search.documents.models.IndexDocumentsBatch<?>)"
  id: "indexDocuments(com.azure.search.documents.models.IndexDocumentsBatch<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "indexDocuments(IndexDocumentsBatch<?> batch)"
  nameWithType: "SearchIndexAsyncClient.indexDocuments(IndexDocumentsBatch<?> batch)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.indexDocuments(IndexDocumentsBatch<?> batch)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.indexDocuments*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Sends a batch of upload, merge, and/or delete actions to the search index."
  syntax:
    content: "public Mono<IndexDocumentsResult> indexDocuments(IndexDocumentsBatch<?> batch)"
    parameters:
    - id: "batch"
      type: "com.azure.search.documents.models.IndexDocumentsBatch<?>"
      description: "The batch of index actions"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>"
      description: "Response containing the status of operations for all actions in the batch."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse(com.azure.search.documents.models.IndexDocumentsBatch<?>)"
  id: "indexDocumentsWithResponse(com.azure.search.documents.models.IndexDocumentsBatch<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "indexDocumentsWithResponse(IndexDocumentsBatch<?> batch)"
  nameWithType: "SearchIndexAsyncClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Sends a batch of upload, merge, and/or delete actions to the search index."
  syntax:
    content: "public Mono<Response<IndexDocumentsResult>> indexDocumentsWithResponse(IndexDocumentsBatch<?> batch)"
    parameters:
    - id: "batch"
      type: "com.azure.search.documents.models.IndexDocumentsBatch<?>"
      description: "The batch of index actions"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
      description: "Response containing the status of operations for all actions in the batch"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse(com.azure.search.documents.models.IndexDocumentsBatch<?>,com.azure.core.util.Context)"
  id: "indexDocumentsWithResponse(com.azure.search.documents.models.IndexDocumentsBatch<?>,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, Context context)"
  nameWithType: "SearchIndexAsyncClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<IndexDocumentsResult>> indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, Context context)"
    parameters:
    - id: "batch"
      type: "com.azure.search.documents.models.IndexDocumentsBatch<?>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocuments(java.lang.Iterable<?>)"
  id: "mergeDocuments(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "mergeDocuments(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.mergeDocuments(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocuments(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocuments*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Merges a collection of documents with existing documents in the target index.\n\nIf the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`)."
  syntax:
    content: "public Mono<IndexDocumentsResult> mergeDocuments(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to be merged"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>"
      description: "document index result"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse(java.lang.Iterable<?>)"
  id: "mergeDocumentsWithResponse(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "mergeDocumentsWithResponse(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.mergeDocumentsWithResponse(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Merges a collection of documents with existing documents in the target index.\n\nIf the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`)."
  syntax:
    content: "public Mono<Response<IndexDocumentsResult>> mergeDocumentsWithResponse(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to be merged"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
      description: "response containing the document index result."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  id: "mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "mergeDocumentsWithResponse(Iterable<?> documents, Context context)"
  nameWithType: "SearchIndexAsyncClient.mergeDocumentsWithResponse(Iterable<?> documents, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse(Iterable<?> documents, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<IndexDocumentsResult>> mergeDocumentsWithResponse(Iterable<?> documents, Context context)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocuments(java.lang.Iterable<?>)"
  id: "mergeOrUploadDocuments(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "mergeOrUploadDocuments(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.mergeOrUploadDocuments(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocuments(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocuments*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.\n\nIf the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`)."
  syntax:
    content: "public Mono<IndexDocumentsResult> mergeOrUploadDocuments(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to be merged, if exists, otherwise uploaded"
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>"
      description: "document index result"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>)"
  id: "mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "mergeOrUploadDocumentsWithResponse(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.\n\nIf the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`)."
  syntax:
    content: "public Mono<Response<IndexDocumentsResult>> mergeOrUploadDocumentsWithResponse(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to be merged, if exists, otherwise uploaded"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
      description: "document index result"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  id: "mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "mergeOrUploadDocumentsWithResponse(Iterable<?> documents, Context context)"
  nameWithType: "SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<IndexDocumentsResult>> mergeOrUploadDocumentsWithResponse(Iterable<?> documents, Context context)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.search(java.lang.String)"
  id: "search(java.lang.String)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "search(String searchText)"
  nameWithType: "SearchIndexAsyncClient.search(String searchText)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.search(String searchText)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.search*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Searches for documents in the Azure Cognitive Search index.\n\nIf `searchText` is set to `null` or `\"*\"` all documents will be matched, see [simple query syntax in Azure Search][] for more information about search query syntax.\n\n\n[simple query syntax in Azure Search]: https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search"
  syntax:
    content: "public SearchPagedFlux search(String searchText)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
      description: "A full-text search query expression."
    return:
      type: "com.azure.search.documents.util.SearchPagedFlux"
      description: "A <xref uid=\"com.azure.search.documents.util.SearchPagedFlux\" data-throw-if-not-resolved=\"false\">SearchPagedFlux</xref> that iterates over <xref uid=\"com.azure.search.documents.models.SearchResult\" data-throw-if-not-resolved=\"false\">SearchResult</xref> objects and provides access to the\n <xref uid=\"com.azure.search.documents.util.SearchPagedResponse\" data-throw-if-not-resolved=\"false\">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage\n information."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.search.documents.models.RequestOptions)"
  id: "search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.search.documents.models.RequestOptions)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions)"
  nameWithType: "SearchIndexAsyncClient.search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.search*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Searches for documents in the Azure Cognitive Search index.\n\nIf `searchText` is set to `null` or `\"*\"` all documents will be matched, see [simple query syntax in Azure Search][] for more information about search query syntax.\n\n\n[simple query syntax in Azure Search]: https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search"
  syntax:
    content: "public SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
      description: "A full-text search query expression."
    - id: "searchOptions"
      type: "com.azure.search.documents.models.SearchOptions"
      description: "Parameters to further refine the search query"
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.search.documents.util.SearchPagedFlux"
      description: "A <xref uid=\"com.azure.search.documents.util.SearchPagedFlux\" data-throw-if-not-resolved=\"false\">SearchPagedFlux</xref> that iterates over <xref uid=\"com.azure.search.documents.models.SearchResult\" data-throw-if-not-resolved=\"false\">SearchResult</xref> objects and provides access to the\n <xref uid=\"com.azure.search.documents.util.SearchPagedResponse\" data-throw-if-not-resolved=\"false\">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage\n information."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  id: "search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchIndexAsyncClient.search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.search*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " SearchPagedFlux search(String searchText, SearchOptions searchOptions, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
    - id: "searchOptions"
      type: "com.azure.search.documents.models.SearchOptions"
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.search.documents.util.SearchPagedFlux"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.suggest(java.lang.String,java.lang.String)"
  id: "suggest(java.lang.String,java.lang.String)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "suggest(String searchText, String suggesterName)"
  nameWithType: "SearchIndexAsyncClient.suggest(String searchText, String suggesterName)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.suggest(String searchText, String suggesterName)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.suggest*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Suggests documents in the index that match the given partial query."
  syntax:
    content: "public SuggestPagedFlux suggest(String searchText, String suggesterName)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
      description: "The search text on which to base suggestions"
    - id: "suggesterName"
      type: "java.lang.String"
      description: "The name of the suggester as specified in the suggesters collection that's part of the index\n definition"
    return:
      type: "com.azure.search.documents.util.SuggestPagedFlux"
      description: "A <xref uid=\"com.azure.search.documents.util.SuggestPagedFlux\" data-throw-if-not-resolved=\"false\">SuggestPagedFlux</xref> that iterates over <xref uid=\"com.azure.search.documents.models.SuggestResult\" data-throw-if-not-resolved=\"false\">SuggestResult</xref> objects and provides access to the\n <xref uid=\"com.azure.search.documents.util.SuggestPagedResponse\" data-throw-if-not-resolved=\"false\">SuggestPagedResponse</xref> object for each page containing HTTP response and coverage information."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.search.documents.models.RequestOptions)"
  id: "suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.search.documents.models.RequestOptions)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions)"
  nameWithType: "SearchIndexAsyncClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.suggest*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Suggests documents in the index that match the given partial query."
  syntax:
    content: "public SuggestPagedFlux suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
      description: "The search text on which to base suggestions"
    - id: "suggesterName"
      type: "java.lang.String"
      description: "The name of the suggester as specified in the suggesters collection that's part of the index\n definition"
    - id: "suggestOptions"
      type: "com.azure.search.documents.models.SuggestOptions"
      description: "Parameters to further refine the suggestion query."
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
      description: "additional parameters for the operation. Contains the tracking ID sent with the request to\n help with debugging"
    return:
      type: "com.azure.search.documents.util.SuggestPagedFlux"
      description: "A <xref uid=\"com.azure.search.documents.util.SuggestPagedFlux\" data-throw-if-not-resolved=\"false\">SuggestPagedFlux</xref> that iterates over <xref uid=\"com.azure.search.documents.models.SuggestResult\" data-throw-if-not-resolved=\"false\">SuggestResult</xref> objects and provides access to the\n <xref uid=\"com.azure.search.documents.util.SuggestPagedResponse\" data-throw-if-not-resolved=\"false\">SuggestPagedResponse</xref> object for each page containing HTTP response and coverage information."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  id: "suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.search.documents.models.RequestOptions,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions, Context context)"
  nameWithType: "SearchIndexAsyncClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.suggest*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " SuggestPagedFlux suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, RequestOptions requestOptions, Context context)"
    parameters:
    - id: "searchText"
      type: "java.lang.String"
    - id: "suggesterName"
      type: "java.lang.String"
    - id: "suggestOptions"
      type: "com.azure.search.documents.models.SuggestOptions"
    - id: "requestOptions"
      type: "com.azure.search.documents.models.RequestOptions"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "com.azure.search.documents.util.SuggestPagedFlux"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocuments(java.lang.Iterable<?>)"
  id: "uploadDocuments(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "uploadDocuments(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.uploadDocuments(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocuments(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocuments*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Uploads a collection of documents to the target index."
  syntax:
    content: "public Mono<IndexDocumentsResult> uploadDocuments(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to upload to the target Index."
    return:
      type: "reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>"
      description: "The result of the document indexing actions."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse(java.lang.Iterable<?>)"
  id: "uploadDocumentsWithResponse(java.lang.Iterable<?>)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "uploadDocumentsWithResponse(Iterable<?> documents)"
  nameWithType: "SearchIndexAsyncClient.uploadDocumentsWithResponse(Iterable<?> documents)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse(Iterable<?> documents)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  summary: "Uploads a collection of documents to the target index."
  syntax:
    content: "public Mono<Response<IndexDocumentsResult>> uploadDocumentsWithResponse(Iterable<?> documents)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
      description: "collection of documents to upload to the target Index."
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
      description: "A response containing the result of the document indexing actions."
- uid: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  id: "uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.core.util.Context)"
  parent: "com.azure.search.documents.SearchIndexAsyncClient"
  langs:
  - "java"
  name: "uploadDocumentsWithResponse(Iterable<?> documents, Context context)"
  nameWithType: "SearchIndexAsyncClient.uploadDocumentsWithResponse(Iterable<?> documents, Context context)"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse(Iterable<?> documents, Context context)"
  overload: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse*"
  type: "Method"
  package: "com.azure.search.documents"
  syntax:
    content: " Mono<Response<IndexDocumentsResult>> uploadDocumentsWithResponse(Iterable<?> documents, Context context)"
    parameters:
    - id: "documents"
      type: "java.lang.Iterable<?>"
    - id: "context"
      type: "com.azure.core.util.Context"
    return:
      type: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.search.documents.SearchServiceVersion"
  name: "SearchServiceVersion"
  nameWithType: "SearchServiceVersion"
  fullName: "com.azure.search.documents.SearchServiceVersion"
- uid: "com.azure.core.http.HttpPipeline"
  spec.java:
  - uid: "com.azure.core.http.HttpPipeline"
    name: "HttpPipeline"
    fullName: "com.azure.core.http.HttpPipeline"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.SearchIndexAsyncClient*"
  name: "SearchIndexAsyncClient"
  nameWithType: "SearchIndexAsyncClient.SearchIndexAsyncClient"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.SearchIndexAsyncClient"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getIndexName*"
  name: "getIndexName"
  nameWithType: "SearchIndexAsyncClient.getIndexName"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getIndexName"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getHttpPipeline*"
  name: "getHttpPipeline"
  nameWithType: "SearchIndexAsyncClient.getHttpPipeline"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getHttpPipeline"
  package: "com.azure.search.documents"
- uid: "java.lang.Iterable<?>"
  spec.java:
  - uid: "java.lang.Iterable"
    name: "Iterable"
    fullName: "java.lang.Iterable"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.search.documents.models.IndexDocumentsResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.documents.models.IndexDocumentsResult"
    name: "IndexDocumentsResult"
    fullName: "com.azure.search.documents.models.IndexDocumentsResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocuments*"
  name: "uploadDocuments"
  nameWithType: "SearchIndexAsyncClient.uploadDocuments"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocuments"
  package: "com.azure.search.documents"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.documents.models.IndexDocumentsResult"
    name: "IndexDocumentsResult"
    fullName: "com.azure.search.documents.models.IndexDocumentsResult"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse*"
  name: "uploadDocumentsWithResponse"
  nameWithType: "SearchIndexAsyncClient.uploadDocumentsWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.uploadDocumentsWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocuments*"
  name: "mergeDocuments"
  nameWithType: "SearchIndexAsyncClient.mergeDocuments"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocuments"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse*"
  name: "mergeDocumentsWithResponse"
  nameWithType: "SearchIndexAsyncClient.mergeDocumentsWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeDocumentsWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocuments*"
  name: "mergeOrUploadDocuments"
  nameWithType: "SearchIndexAsyncClient.mergeOrUploadDocuments"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocuments"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse*"
  name: "mergeOrUploadDocumentsWithResponse"
  nameWithType: "SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.mergeOrUploadDocumentsWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocuments*"
  name: "deleteDocuments"
  nameWithType: "SearchIndexAsyncClient.deleteDocuments"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocuments"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse*"
  name: "deleteDocumentsWithResponse"
  nameWithType: "SearchIndexAsyncClient.deleteDocumentsWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.deleteDocumentsWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getServiceVersion*"
  name: "getServiceVersion"
  nameWithType: "SearchIndexAsyncClient.getServiceVersion"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getServiceVersion"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getEndpoint*"
  name: "getEndpoint"
  nameWithType: "SearchIndexAsyncClient.getEndpoint"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getEndpoint"
  package: "com.azure.search.documents"
- uid: "reactor.core.publisher.Mono<java.lang.Long>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCount*"
  name: "getDocumentCount"
  nameWithType: "SearchIndexAsyncClient.getDocumentCount"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCount"
  package: "com.azure.search.documents"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Long>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Long"
    name: "Long"
    fullName: "java.lang.Long"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse*"
  name: "getDocumentCountWithResponse"
  nameWithType: "SearchIndexAsyncClient.getDocumentCountWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentCountWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.util.SearchPagedFlux"
  name: "SearchPagedFlux"
  nameWithType: "SearchPagedFlux"
  fullName: "com.azure.search.documents.util.SearchPagedFlux"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.search*"
  name: "search"
  nameWithType: "SearchIndexAsyncClient.search"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.search"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.models.SearchOptions"
  name: "SearchOptions"
  nameWithType: "SearchOptions"
  fullName: "com.azure.search.documents.models.SearchOptions"
- uid: "com.azure.search.documents.models.RequestOptions"
  name: "RequestOptions"
  nameWithType: "RequestOptions"
  fullName: "com.azure.search.documents.models.RequestOptions"
- uid: "reactor.core.publisher.Mono<com.azure.search.documents.SearchDocument>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.documents.SearchDocument"
    name: "SearchDocument"
    fullName: "com.azure.search.documents.SearchDocument"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocument*"
  name: "getDocument"
  nameWithType: "SearchIndexAsyncClient.getDocument"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocument"
  package: "com.azure.search.documents"
- uid: "java.util.List<java.lang.String>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.SearchDocument>>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.core.http.rest.Response"
    name: "Response"
    fullName: "com.azure.core.http.rest.Response"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.search.documents.SearchDocument"
    name: "SearchDocument"
    fullName: "com.azure.search.documents.SearchDocument"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse*"
  name: "getDocumentWithResponse"
  nameWithType: "SearchIndexAsyncClient.getDocumentWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.getDocumentWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.util.SuggestPagedFlux"
  name: "SuggestPagedFlux"
  nameWithType: "SuggestPagedFlux"
  fullName: "com.azure.search.documents.util.SuggestPagedFlux"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.suggest*"
  name: "suggest"
  nameWithType: "SearchIndexAsyncClient.suggest"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.suggest"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.models.SuggestOptions"
  name: "SuggestOptions"
  nameWithType: "SuggestOptions"
  fullName: "com.azure.search.documents.models.SuggestOptions"
- uid: "com.azure.search.documents.models.IndexDocumentsBatch<?>"
  spec.java:
  - uid: "com.azure.search.documents.models.IndexDocumentsBatch"
    name: "IndexDocumentsBatch"
    fullName: "com.azure.search.documents.models.IndexDocumentsBatch"
  - name: "<"
    fullName: "<"
  - uid: "?"
    name: "?"
    fullName: "?"
  - name: ">"
    fullName: ">"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.indexDocuments*"
  name: "indexDocuments"
  nameWithType: "SearchIndexAsyncClient.indexDocuments"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.indexDocuments"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse*"
  name: "indexDocumentsWithResponse"
  nameWithType: "SearchIndexAsyncClient.indexDocumentsWithResponse"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.indexDocumentsWithResponse"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.util.AutocompletePagedFlux"
  name: "AutocompletePagedFlux"
  nameWithType: "AutocompletePagedFlux"
  fullName: "com.azure.search.documents.util.AutocompletePagedFlux"
- uid: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete*"
  name: "autocomplete"
  nameWithType: "SearchIndexAsyncClient.autocomplete"
  fullName: "com.azure.search.documents.SearchIndexAsyncClient.autocomplete"
  package: "com.azure.search.documents"
- uid: "com.azure.search.documents.models.AutocompleteOptions"
  name: "AutocompleteOptions"
  nameWithType: "AutocompleteOptions"
  fullName: "com.azure.search.documents.models.AutocompleteOptions"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Iterable"
  name: "Iterable"
  nameWithType: "Iterable"
  fullName: "java.lang.Iterable"
- uid: "?"
  name: "?"
  nameWithType: "?"
  fullName: "?"
- uid: "com.azure.search.documents.models.IndexDocumentsResult"
  name: "IndexDocumentsResult"
  nameWithType: "IndexDocumentsResult"
  fullName: "com.azure.search.documents.models.IndexDocumentsResult"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.core.http.rest.Response"
  name: "Response"
  nameWithType: "Response"
  fullName: "com.azure.core.http.rest.Response"
- uid: "java.lang.Long"
  name: "Long"
  nameWithType: "Long"
  fullName: "java.lang.Long"
- uid: "com.azure.search.documents.SearchDocument"
  name: "SearchDocument"
  nameWithType: "SearchDocument"
  fullName: "com.azure.search.documents.SearchDocument"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.search.documents.models.IndexDocumentsBatch"
  name: "IndexDocumentsBatch"
  nameWithType: "IndexDocumentsBatch"
  fullName: "com.azure.search.documents.models.IndexDocumentsBatch"
