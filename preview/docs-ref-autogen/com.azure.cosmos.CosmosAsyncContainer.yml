### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosAsyncContainer
  id: CosmosAsyncContainer
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T)
  - com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  - com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<T>)
  - com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  - com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(java.lang.String,java.lang.Class<T>)
  - com.azure.cosmos.CosmosAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions,java.lang.Class<T>)
  - com.azure.cosmos.CosmosAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  - com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey)
  - com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T)
  - com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.delete()
  - com.azure.cosmos.CosmosAsyncContainer.delete(com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey)
  - com.azure.cosmos.CosmosAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.getConflict(java.lang.String)
  - com.azure.cosmos.CosmosAsyncContainer.getDatabase()
  - com.azure.cosmos.CosmosAsyncContainer.getId()
  - com.azure.cosmos.CosmosAsyncContainer.getScripts()
  - com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String)
  - com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.read()
  - com.azure.cosmos.CosmosAsyncContainer.read(com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.readThroughput()
  - com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.models.CosmosContainerProperties)
  - com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosAsyncContainer.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  langs:
  - java
  name: CosmosAsyncContainer
  nameWithType: CosmosAsyncContainer
  fullName: com.azure.cosmos.CosmosAsyncContainer
  type: Class
  package: com.azure.cosmos
  summary: Provides methods for reading, deleting, and replacing existing Containers. Provides methods for interacting with child resources (Items, Scripts, Conflicts)
  syntax:
    content: public class CosmosAsyncContainer
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T)
  id: <T>createItem(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>createItem(T item)
  nameWithType: CosmosAsyncContainer.<T>createItem(T item)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T item)
  overload: com.azure.cosmos.CosmosAsyncContainer.createItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created Cosmos item. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>createItem(T item)
    parameters:
    - id: item
      type: T
      description: the Cosmos item represented as a POJO or Cosmos item object.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the
         created Cosmos item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)
  id: <T>createItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>createItem(T item, CosmosItemRequestOptions options)
  nameWithType: CosmosAsyncContainer.<T>createItem(T item, CosmosItemRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T item, CosmosItemRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.createItem*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos item.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>createItem(T item, CosmosItemRequestOptions options)
    parameters:
    - id: item
      type: T
      description: the item.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the item request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created Cosmos item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  id: <T>createItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
  nameWithType: CosmosAsyncContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.createItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created Cosmos item. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>createItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
    parameters:
    - id: item
      type: T
      description: the Cosmos item represented as a POJO or Cosmos item object.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created Cosmos item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  id: <T>queryItems(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)
  nameWithType: CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)
  overload: com.azure.cosmos.CosmosAsyncContainer.queryItems*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for items in the current container using a <xref uid="com.azure.cosmos.models.SqlQuerySpec" data-throw-if-not-resolved="false">SqlQuerySpec</xref> and <xref uid="com.azure.cosmos.models.CosmosQueryRequestOptions" data-throw-if-not-resolved="false">CosmosQueryRequestOptions</xref>.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<T> <T>queryItems(SqlQuerySpec querySpec, CosmosQueryRequestOptions options, Class<T> classType)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    - id: classType
      type: java.lang.Class<T>
      description: the class type.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<T>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained items or an
         error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<T>)
  id: <T>queryItems(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>queryItems(SqlQuerySpec querySpec, Class<T> classType)
  nameWithType: CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(SqlQuerySpec querySpec, Class<T> classType)
  overload: com.azure.cosmos.CosmosAsyncContainer.queryItems*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for items in the current container using a <xref uid="com.azure.cosmos.models.SqlQuerySpec" data-throw-if-not-resolved="false">SqlQuerySpec</xref>.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<T> <T>queryItems(SqlQuerySpec querySpec, Class<T> classType)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: classType
      type: java.lang.Class<T>
      description: the class type.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<T>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained items or an
         error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  id: <T>queryItems(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)
  nameWithType: CosmosAsyncContainer.<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)
  overload: com.azure.cosmos.CosmosAsyncContainer.queryItems*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for items in the current container using a string.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<T> <T>queryItems(String query, CosmosQueryRequestOptions options, Class<T> classType)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    - id: classType
      type: java.lang.Class<T>
      description: the class type.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<T>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained items or an
         error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(java.lang.String,java.lang.Class<T>)
  id: <T>queryItems(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>queryItems(String query, Class<T> classType)
  nameWithType: CosmosAsyncContainer.<T>queryItems(String query, Class<T> classType)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems(String query, Class<T> classType)
  overload: com.azure.cosmos.CosmosAsyncContainer.queryItems*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for items in the current container.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained items. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<T> <T>queryItems(String query, Class<T> classType)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: classType
      type: java.lang.Class<T>
      description: the class type.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<T>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained items or an
         error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions,java.lang.Class<T>)
  id: <T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)
  nameWithType: CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)
  overload: com.azure.cosmos.CosmosAsyncContainer.readItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads an item using a configured <xref uid="com.azure.cosmos.models.CosmosItemRequestOptions" data-throw-if-not-resolved="false">CosmosItemRequestOptions</xref>.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a Cosmos item response with the read item.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>readItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options, Class<T> itemType)
    parameters:
    - id: itemId
      type: java.lang.String
      description: the item id.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the request <xref uid="com.azure.cosmos.models.CosmosItemRequestOptions" data-throw-if-not-resolved="false">CosmosItemRequestOptions</xref>.
    - id: itemType
      type: java.lang.Class<T>
      description: the item type.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the Cosmos item response with the read item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  id: <T>readItem(java.lang.String,com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)
  nameWithType: CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)
  overload: com.azure.cosmos.CosmosAsyncContainer.readItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain an item response with the read item.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>readItem(String itemId, PartitionKey partitionKey, Class<T> itemType)
    parameters:
    - id: itemId
      type: java.lang.String
      description: the item id.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    - id: itemType
      type: java.lang.Class<T>
      description: the item type.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the Cosmos item response with the read item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey)
  id: <T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>replaceItem(T item, String itemId, PartitionKey partitionKey)
  nameWithType: CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey)
  overload: com.azure.cosmos.CosmosAsyncContainer.replaceItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Replaces an item with the passed in item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos item response with the replaced item.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>replaceItem(T item, String itemId, PartitionKey partitionKey)
    parameters:
    - id: item
      type: T
      description: the item to replace (containing the item id).
    - id: itemId
      type: java.lang.String
      description: the item id.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the Cosmos item resource response with the replaced item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  id: <T>replaceItem(T,java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
  nameWithType: CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.replaceItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Replaces an item with the passed in item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos item response with the replaced item.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>replaceItem(T item, String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
    parameters:
    - id: item
      type: T
      description: the item to replace (containing the item id).
    - id: itemId
      type: java.lang.String
      description: the item id.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the request comosItemRequestOptions.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the Cosmos item resource response with the replaced item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T)
  id: <T>upsertItem(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>upsertItem(T item)
  nameWithType: CosmosAsyncContainer.<T>upsertItem(T item)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T item)
  overload: com.azure.cosmos.CosmosAsyncContainer.upsertItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Upserts an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>upsertItem(T item)
    parameters:
    - id: item
      type: T
      description: the item represented as a POJO or Item object to upsert.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)
  id: <T>upsertItem(T,com.azure.cosmos.models.CosmosItemRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>upsertItem(T item, CosmosItemRequestOptions options)
  nameWithType: CosmosAsyncContainer.<T>upsertItem(T item, CosmosItemRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T item, CosmosItemRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.upsertItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Upserts an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>upsertItem(T item, CosmosItemRequestOptions options)
    parameters:
    - id: item
      type: T
      description: the item represented as a POJO or Item object to upsert.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  id: <T>upsertItem(T,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: <T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
  nameWithType: CosmosAsyncContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.upsertItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Upserts an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the upserted item. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosItemResponse<T>> <T>upsertItem(T item, PartitionKey partitionKey, CosmosItemRequestOptions options)
    parameters:
    - id: item
      type: T
      description: the item represented as a POJO or Item object to upsert.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the upserted item or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)
  id: CosmosAsyncContainer(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: CosmosAsyncContainer(String id, CosmosAsyncDatabase database)
  nameWithType: CosmosAsyncContainer.CosmosAsyncContainer(String id, CosmosAsyncDatabase database)
  fullName: com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer(String id, CosmosAsyncDatabase database)
  overload: com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer*
  type: Constructor
  package: com.azure.cosmos
  syntax:
    content: " CosmosAsyncContainer(String id, CosmosAsyncDatabase database)"
    parameters:
    - id: id
      type: java.lang.String
    - id: database
      type: com.azure.cosmos.CosmosAsyncDatabase
- uid: com.azure.cosmos.CosmosAsyncContainer.delete()
  id: delete()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: delete()
  nameWithType: CosmosAsyncContainer.delete()
  fullName: com.azure.cosmos.CosmosAsyncContainer.delete()
  overload: com.azure.cosmos.CosmosAsyncContainer.delete*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes the current container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos container response for the deleted container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> delete()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single Cosmos container response for
         the deleted container or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.delete(com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: delete(com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: delete(CosmosContainerRequestOptions options)
  nameWithType: CosmosAsyncContainer.delete(CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.delete(CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.delete*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes the container


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos container response for the deleted database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> delete(CosmosContainerRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single Cosmos container response for
         the deleted database or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey)
  id: deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: deleteItem(String itemId, PartitionKey partitionKey)
  nameWithType: CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey)
  fullName: com.azure.cosmos.CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey)
  overload: com.azure.cosmos.CosmosAsyncContainer.deleteItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes an item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos item response for the deleted item.
  syntax:
    content: public Mono<CosmosItemResponse<Object>> deleteItem(String itemId, PartitionKey partitionKey)
    parameters:
    - id: itemId
      type: java.lang.String
      description: the item id.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<java.lang.Object>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the Cosmos item resource response.
- uid: com.azure.cosmos.CosmosAsyncContainer.deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  id: deleteItem(java.lang.String,com.azure.cosmos.models.PartitionKey,com.azure.cosmos.models.CosmosItemRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
  nameWithType: CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.deleteItem*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes the item.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos item response for the deleted item.
  syntax:
    content: public Mono<CosmosItemResponse<Object>> deleteItem(String itemId, PartitionKey partitionKey, CosmosItemRequestOptions options)
    parameters:
    - id: itemId
      type: java.lang.String
      description: id of the item.
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: partitionKey of the item.
    - id: options
      type: com.azure.cosmos.models.CosmosItemRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<java.lang.Object>>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the Cosmos item resource response.
- uid: com.azure.cosmos.CosmosAsyncContainer.getConflict(java.lang.String)
  id: getConflict(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: getConflict(String id)
  nameWithType: CosmosAsyncContainer.getConflict(String id)
  fullName: com.azure.cosmos.CosmosAsyncContainer.getConflict(String id)
  overload: com.azure.cosmos.CosmosAsyncContainer.getConflict*
  type: Method
  package: com.azure.cosmos
  summary: Gets a <xref uid="com.azure.cosmos.CosmosAsyncConflict" data-throw-if-not-resolved="false">CosmosAsyncConflict</xref> object using current container for context.
  syntax:
    content: public CosmosAsyncConflict getConflict(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id of the Cosmos conflict.
    return:
      type: com.azure.cosmos.CosmosAsyncConflict
      description: a Cosmos conflict.
- uid: com.azure.cosmos.CosmosAsyncContainer.getDatabase()
  id: getDatabase()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: getDatabase()
  nameWithType: CosmosAsyncContainer.getDatabase()
  fullName: com.azure.cosmos.CosmosAsyncContainer.getDatabase()
  overload: com.azure.cosmos.CosmosAsyncContainer.getDatabase*
  type: Method
  package: com.azure.cosmos
  summary: Gets the parent <xref uid="com.azure.cosmos.CosmosAsyncDatabase" data-throw-if-not-resolved="false">CosmosAsyncDatabase</xref> for the current container.
  syntax:
    content: public CosmosAsyncDatabase getDatabase()
    return:
      type: com.azure.cosmos.CosmosAsyncDatabase
      description: the <xref uid="com.azure.cosmos.CosmosAsyncDatabase" data-throw-if-not-resolved="false">CosmosAsyncDatabase</xref>.
- uid: com.azure.cosmos.CosmosAsyncContainer.getId()
  id: getId()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: getId()
  nameWithType: CosmosAsyncContainer.getId()
  fullName: com.azure.cosmos.CosmosAsyncContainer.getId()
  overload: com.azure.cosmos.CosmosAsyncContainer.getId*
  type: Method
  package: com.azure.cosmos
  summary: Get the id of the <xref uid="com.azure.cosmos.CosmosAsyncContainer" data-throw-if-not-resolved="false">CosmosAsyncContainer</xref>.
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: the id of the <xref uid="com.azure.cosmos.CosmosAsyncContainer" data-throw-if-not-resolved="false">CosmosAsyncContainer</xref>.
- uid: com.azure.cosmos.CosmosAsyncContainer.getScripts()
  id: getScripts()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: getScripts()
  nameWithType: CosmosAsyncContainer.getScripts()
  fullName: com.azure.cosmos.CosmosAsyncContainer.getScripts()
  overload: com.azure.cosmos.CosmosAsyncContainer.getScripts*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Gets a <xref uid="com.azure.cosmos.CosmosAsyncScripts" data-throw-if-not-resolved="false">CosmosAsyncScripts</xref> using the current container as context.


    This can be further used to perform various operations on Cosmos scripts.
  syntax:
    content: public CosmosAsyncScripts getScripts()
    return:
      type: com.azure.cosmos.CosmosAsyncScripts
      description: the <xref uid="com.azure.cosmos.CosmosAsyncScripts" data-throw-if-not-resolved="false">CosmosAsyncScripts</xref>.
- uid: com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String)
  id: queryConflicts(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: queryConflicts(String query)
  nameWithType: CosmosAsyncContainer.queryConflicts(String query)
  fullName: com.azure.cosmos.CosmosAsyncContainer.queryConflicts(String query)
  overload: com.azure.cosmos.CosmosAsyncContainer.queryConflicts*
  type: Method
  package: com.azure.cosmos
  summary: Queries all the conflicts in the current container.
  syntax:
    content: public CosmosPagedFlux<CosmosConflictProperties> queryConflicts(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosConflictProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained conflicts or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.queryConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryConflicts(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: queryConflicts(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncContainer.queryConflicts(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.queryConflicts(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.queryConflicts*
  type: Method
  package: com.azure.cosmos
  summary: Queries all the conflicts in the current container.
  syntax:
    content: public CosmosPagedFlux<CosmosConflictProperties> queryConflicts(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosConflictProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained conflicts or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.read()
  id: read()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: read()
  nameWithType: CosmosAsyncContainer.read()
  fullName: com.azure.cosmos.CosmosAsyncContainer.read()
  overload: com.azure.cosmos.CosmosAsyncContainer.read*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads the current container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos container response with the read container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> read()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single Cosmos container response with
         the read container or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.read(com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: read(com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: read(CosmosContainerRequestOptions options)
  nameWithType: CosmosAsyncContainer.read(CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.read(CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.read*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads the current container while specifying additional options such as If-Match.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos container response with the read container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> read(CosmosContainerRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the Cosmos container request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single Cosmos container response with
         the read container or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readAllConflicts(com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: readAllConflicts(CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncContainer.readAllConflicts(CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.readAllConflicts(CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.readAllConflicts*
  type: Method
  package: com.azure.cosmos
  summary: Lists all the conflicts in the current container.
  syntax:
    content: public CosmosPagedFlux<CosmosConflictProperties> readAllConflicts(CosmosQueryRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosConflictProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained conflicts or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.readThroughput()
  id: readThroughput()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: readThroughput()
  nameWithType: CosmosAsyncContainer.readThroughput()
  fullName: com.azure.cosmos.CosmosAsyncContainer.readThroughput()
  overload: com.azure.cosmos.CosmosAsyncContainer.readThroughput*
  type: Method
  package: com.azure.cosmos
  summary: Read the throughput provisioned for the current container.
  syntax:
    content: public Mono<ThroughputResponse> readThroughput()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.ThroughputResponse>
      description: the mono containing throughput response.
- uid: com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.models.CosmosContainerProperties)
  id: replace(com.azure.cosmos.models.CosmosContainerProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: replace(CosmosContainerProperties containerProperties)
  nameWithType: CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties)
  fullName: com.azure.cosmos.CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties)
  overload: com.azure.cosmos.CosmosAsyncContainer.replace*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Replaces the current container's properties.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos container response with the replaced container properties. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> replace(CosmosContainerProperties containerProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single Cosmos container response with
         the replaced container properties or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.replace(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: replace(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  nameWithType: CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncContainer.replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncContainer.replace*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Replaces the current container properties while using non-default request options.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single Cosmos container response with the replaced container properties. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> replace(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the Cosmos container request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single Cosmos container response with
         the replaced container properties or an error.
- uid: com.azure.cosmos.CosmosAsyncContainer.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  id: replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncContainer
  langs:
  - java
  name: replaceThroughput(ThroughputProperties throughputProperties)
  nameWithType: CosmosAsyncContainer.replaceThroughput(ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosAsyncContainer.replaceThroughput(ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosAsyncContainer.replaceThroughput*
  type: Method
  package: com.azure.cosmos
  summary: Replace the throughput.
  syntax:
    content: public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties)
    parameters:
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.ThroughputResponse>
      description: the mono containing throughput response.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.CosmosAsyncDatabase
  name: CosmosAsyncDatabase
  nameWithType: CosmosAsyncDatabase
  fullName: com.azure.cosmos.CosmosAsyncDatabase
- uid: com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer*
  name: CosmosAsyncContainer
  nameWithType: CosmosAsyncContainer.CosmosAsyncContainer
  fullName: com.azure.cosmos.CosmosAsyncContainer.CosmosAsyncContainer
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncContainer.getId*
  name: getId
  nameWithType: CosmosAsyncContainer.getId
  fullName: com.azure.cosmos.CosmosAsyncContainer.getId
  package: com.azure.cosmos
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosContainerResponse
    name: CosmosContainerResponse
    fullName: com.azure.cosmos.models.CosmosContainerResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncContainer.read*
  name: read
  nameWithType: CosmosAsyncContainer.read
  fullName: com.azure.cosmos.CosmosAsyncContainer.read
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosContainerRequestOptions
  name: CosmosContainerRequestOptions
  nameWithType: CosmosContainerRequestOptions
  fullName: com.azure.cosmos.models.CosmosContainerRequestOptions
- uid: com.azure.cosmos.CosmosAsyncContainer.delete*
  name: delete
  nameWithType: CosmosAsyncContainer.delete
  fullName: com.azure.cosmos.CosmosAsyncContainer.delete
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosContainerProperties
  name: CosmosContainerProperties
  nameWithType: CosmosContainerProperties
  fullName: com.azure.cosmos.models.CosmosContainerProperties
- uid: com.azure.cosmos.CosmosAsyncContainer.replace*
  name: replace
  nameWithType: CosmosAsyncContainer.replace
  fullName: com.azure.cosmos.CosmosAsyncContainer.replace
  package: com.azure.cosmos
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<T>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosItemResponse
    name: CosmosItemResponse
    fullName: com.azure.cosmos.models.CosmosItemResponse
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncContainer.createItem*
  name: <T>createItem
  nameWithType: CosmosAsyncContainer.<T>createItem
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>createItem
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.PartitionKey
  name: PartitionKey
  nameWithType: PartitionKey
  fullName: com.azure.cosmos.models.PartitionKey
- uid: com.azure.cosmos.models.CosmosItemRequestOptions
  name: CosmosItemRequestOptions
  nameWithType: CosmosItemRequestOptions
  fullName: com.azure.cosmos.models.CosmosItemRequestOptions
- uid: com.azure.cosmos.CosmosAsyncContainer.upsertItem*
  name: <T>upsertItem
  nameWithType: CosmosAsyncContainer.<T>upsertItem
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>upsertItem
  package: com.azure.cosmos
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.util.CosmosPagedFlux<T>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncContainer.queryItems*
  name: <T>queryItems
  nameWithType: CosmosAsyncContainer.<T>queryItems
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>queryItems
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: com.azure.cosmos.models.SqlQuerySpec
  name: SqlQuerySpec
  nameWithType: SqlQuerySpec
  fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.cosmos.CosmosAsyncContainer.readItem*
  name: <T>readItem
  nameWithType: CosmosAsyncContainer.<T>readItem
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>readItem
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncContainer.replaceItem*
  name: <T>replaceItem
  nameWithType: CosmosAsyncContainer.<T>replaceItem
  fullName: com.azure.cosmos.CosmosAsyncContainer.<T>replaceItem
  package: com.azure.cosmos
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosItemResponse<java.lang.Object>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosItemResponse
    name: CosmosItemResponse
    fullName: com.azure.cosmos.models.CosmosItemResponse
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncContainer.deleteItem*
  name: deleteItem
  nameWithType: CosmosAsyncContainer.deleteItem
  fullName: com.azure.cosmos.CosmosAsyncContainer.deleteItem
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncScripts
  name: CosmosAsyncScripts
  nameWithType: CosmosAsyncScripts
  fullName: com.azure.cosmos.CosmosAsyncScripts
- uid: com.azure.cosmos.CosmosAsyncContainer.getScripts*
  name: getScripts
  nameWithType: CosmosAsyncContainer.getScripts
  fullName: com.azure.cosmos.CosmosAsyncContainer.getScripts
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosConflictProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosConflictProperties
    name: CosmosConflictProperties
    fullName: com.azure.cosmos.models.CosmosConflictProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncContainer.readAllConflicts*
  name: readAllConflicts
  nameWithType: CosmosAsyncContainer.readAllConflicts
  fullName: com.azure.cosmos.CosmosAsyncContainer.readAllConflicts
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncContainer.queryConflicts*
  name: queryConflicts
  nameWithType: CosmosAsyncContainer.queryConflicts
  fullName: com.azure.cosmos.CosmosAsyncContainer.queryConflicts
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncConflict
  name: CosmosAsyncConflict
  nameWithType: CosmosAsyncConflict
  fullName: com.azure.cosmos.CosmosAsyncConflict
- uid: com.azure.cosmos.CosmosAsyncContainer.getConflict*
  name: getConflict
  nameWithType: CosmosAsyncContainer.getConflict
  fullName: com.azure.cosmos.CosmosAsyncContainer.getConflict
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.ThroughputProperties
  name: ThroughputProperties
  nameWithType: ThroughputProperties
  fullName: com.azure.cosmos.models.ThroughputProperties
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.ThroughputResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.ThroughputResponse
    name: ThroughputResponse
    fullName: com.azure.cosmos.models.ThroughputResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncContainer.replaceThroughput*
  name: replaceThroughput
  nameWithType: CosmosAsyncContainer.replaceThroughput
  fullName: com.azure.cosmos.CosmosAsyncContainer.replaceThroughput
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncContainer.readThroughput*
  name: readThroughput
  nameWithType: CosmosAsyncContainer.readThroughput
  fullName: com.azure.cosmos.CosmosAsyncContainer.readThroughput
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncContainer.getDatabase*
  name: getDatabase
  nameWithType: CosmosAsyncContainer.getDatabase
  fullName: com.azure.cosmos.CosmosAsyncContainer.getDatabase
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.models.CosmosContainerResponse
  name: CosmosContainerResponse
  nameWithType: CosmosContainerResponse
  fullName: com.azure.cosmos.models.CosmosContainerResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.cosmos.models.CosmosItemResponse
  name: CosmosItemResponse
  nameWithType: CosmosItemResponse
  fullName: com.azure.cosmos.models.CosmosItemResponse
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.azure.cosmos.util.CosmosPagedFlux
  name: CosmosPagedFlux
  nameWithType: CosmosPagedFlux
  fullName: com.azure.cosmos.util.CosmosPagedFlux
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: com.azure.cosmos.models.CosmosConflictProperties
  name: CosmosConflictProperties
  nameWithType: CosmosConflictProperties
  fullName: com.azure.cosmos.models.CosmosConflictProperties
- uid: com.azure.cosmos.models.ThroughputResponse
  name: ThroughputResponse
  nameWithType: ThroughputResponse
  fullName: com.azure.cosmos.models.ThroughputResponse
