### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.filter*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter"
name: "<T>filter"
nameWithType: "Iterables.<T>filter"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<?>,java.lang.Class<T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(Iterable<?> unfiltered, Class<T> desiredType)"
  name: "<T>filter(Iterable<?> unfiltered, Class<T> desiredType)"
  nameWithType: "Iterables.<T>filter(Iterable<?> unfiltered, Class<T> desiredType)"
  summary: "Returns a view of `unfiltered` containing all elements that are of the type `desiredType`. The returned iterable's iterator does not support `remove()`.\n\n**`Stream` equivalent:** `stream.filter(type::isInstance).map(type::cast)`. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point:\n\n```java\n@SuppressWarnings({\"unchecked\", \"rawtypes\"}) // safe because of ::isInstance check\n ImmutableList result =\n     (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());\n```"
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "desiredType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Iterable<T> <T>filter(Iterable<?> unfiltered, Class<T> desiredType)"
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(java.lang.Iterable<T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)"
  name: "<T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)"
  nameWithType: "Iterables.<T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)"
  summary: "Returns a view of `unfiltered` containing all elements that satisfy the input predicate `retainIfTrue`. The returned iterable's iterator does not support `remove()`.\n\n**`Stream` equivalent:** <xref uid=\"java.util.stream.Stream.filter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream#filter\"></xref>."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "retainIfTrue"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super T?alt=? super T&text=? super T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Iterable<T> <T>filter(Iterable<T> unfiltered, Predicate<? super T> retainIfTrue)"
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
