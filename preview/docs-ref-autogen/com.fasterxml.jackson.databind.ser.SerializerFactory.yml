### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory
  id: SerializerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.SerializerFactory.SerializerFactory()
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  - com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  langs:
  - java
  name: SerializerFactory
  nameWithType: SerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory
  type: Class
  package: com.fasterxml.jackson.databind.ser
  summary: Abstract class that defines API used by <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> to obtain actual <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">JsonSerializer</xref> instances from multiple distinct factories.
  syntax:
    content: public abstract class SerializerFactory
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.SerializerFactory()
  id: SerializerFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: SerializerFactory()
  nameWithType: SerializerFactory.SerializerFactory()
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.SerializerFactory()
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.SerializerFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public SerializerFactory()
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: createKeySerializer(SerializationConfig config, JavaType type, JsonSerializer<Object> defaultImpl)
  nameWithType: SerializerFactory.createKeySerializer(SerializationConfig config, JavaType type, JsonSerializer<Object> defaultImpl)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(SerializationConfig config, JavaType type, JsonSerializer<Object> defaultImpl)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public abstract JsonSerializer<Object> createKeySerializer(SerializationConfig config, JavaType type, JsonSerializer<Object> defaultImpl)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    - id: defaultImpl
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: createKeySerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: createKeySerializer(SerializerProvider prov, JavaType type, JsonSerializer<Object> defaultImpl)
  nameWithType: SerializerFactory.createKeySerializer(SerializerProvider prov, JavaType type, JsonSerializer<Object> defaultImpl)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(SerializerProvider prov, JavaType type, JsonSerializer<Object> defaultImpl)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to create serializer to use for serializing JSON property names (which must be output as `JsonToken.FIELD_NAME`) for Map that has specified declared key type, and is for specified property (or, if property is null, as root value)
  syntax:
    content: public JsonSerializer<Object> createKeySerializer(SerializerProvider prov, JavaType type, JsonSerializer<Object> defaultImpl)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Declared type for Map keys
    - id: defaultImpl
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
      description: >-
        Default key serializer implementation to use, if no custom ones
            are found (may be null)
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
      description: >-
        Serializer to use, if factory knows it; null if not (in which case default
           serializer is to be used)
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  id: createSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: createSerializer(SerializerProvider prov, JavaType baseType)
  nameWithType: SerializerFactory.createSerializer(SerializerProvider prov, JavaType baseType)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(SerializerProvider prov, JavaType baseType)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to create (or, for immutable serializers, reuse) a serializer for given type.
  syntax:
    content: public abstract JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType baseType)
    parameters:
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that needs to be used to resolve annotation-provided
            serializers (but NOT for others)
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  id: createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: createTypeSerializer(SerializationConfig config, JavaType baseType)
  nameWithType: SerializerFactory.createTypeSerializer(SerializationConfig config, JavaType baseType)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(SerializationConfig config, JavaType baseType)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to create a type information serializer for given base type, if one is needed. If not needed (no polymorphic handling configured), should return null.
  syntax:
    content: public abstract TypeSerializer createTypeSerializer(SerializationConfig config, JavaType baseType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Declared type to use as the base type for type information serializer
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
      description: Type serializer to use for the base type, if one is needed; null if not.
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  id: withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: withAdditionalKeySerializers(Serializers additional)
  nameWithType: SerializerFactory.withAdditionalKeySerializers(Serializers additional)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(Serializers additional)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public abstract SerializerFactory withAdditionalKeySerializers(Serializers additional)
    parameters:
    - id: additional
      type: com.fasterxml.jackson.databind.ser.Serializers
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  id: withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: withAdditionalSerializers(Serializers additional)
  nameWithType: SerializerFactory.withAdditionalSerializers(Serializers additional)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(Serializers additional)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Convenience method for creating a new factory instance with additional serializer provider; equivalent to calling


    ```java

    withConfig(getConfig().withAdditionalSerializers(additional));

    ```
  syntax:
    content: public abstract SerializerFactory withAdditionalSerializers(Serializers additional)
    parameters:
    - id: additional
      type: com.fasterxml.jackson.databind.ser.Serializers
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  id: withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.SerializerFactory
  langs:
  - java
  name: withSerializerModifier(BeanSerializerModifier modifier)
  nameWithType: SerializerFactory.withSerializerModifier(BeanSerializerModifier modifier)
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(BeanSerializerModifier modifier)
  overload: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Convenience method for creating a new factory instance with additional bean serializer modifier; equivalent to calling


    ```java

    withConfig(getConfig().withSerializerModifier(modifier));

    ```
  syntax:
    content: public abstract SerializerFactory withSerializerModifier(BeanSerializerModifier modifier)
    parameters:
    - id: modifier
      type: com.fasterxml.jackson.databind.ser.BeanSerializerModifier
    return:
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
references:
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.SerializerFactory*
  name: SerializerFactory
  nameWithType: SerializerFactory.SerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.SerializerFactory
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.Serializers
  name: Serializers
  nameWithType: Serializers
  fullName: com.fasterxml.jackson.databind.ser.Serializers
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers*
  name: withAdditionalSerializers
  nameWithType: SerializerFactory.withAdditionalSerializers
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers*
  name: withAdditionalKeySerializers
  nameWithType: SerializerFactory.withAdditionalKeySerializers
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.BeanSerializerModifier
  name: BeanSerializerModifier
  nameWithType: BeanSerializerModifier
  fullName: com.fasterxml.jackson.databind.ser.BeanSerializerModifier
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier*
  name: withSerializerModifier
  nameWithType: SerializerFactory.withSerializerModifier
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer*
  name: createSerializer
  nameWithType: SerializerFactory.createSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.SerializationConfig
  name: SerializationConfig
  nameWithType: SerializationConfig
  fullName: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer*
  name: createTypeSerializer
  nameWithType: SerializerFactory.createTypeSerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer*
  name: createKeySerializer
  nameWithType: SerializerFactory.createKeySerializer
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
