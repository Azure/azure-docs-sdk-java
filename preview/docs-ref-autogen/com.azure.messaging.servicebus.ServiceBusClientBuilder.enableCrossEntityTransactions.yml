### YamlMime:JavaMember
uid: "com.azure.messaging.servicebus.ServiceBusClientBuilder.enableCrossEntityTransactions*"
fullName: "com.azure.messaging.servicebus.ServiceBusClientBuilder.enableCrossEntityTransactions"
name: "enableCrossEntityTransactions"
nameWithType: "ServiceBusClientBuilder.enableCrossEntityTransactions"
members:
- uid: "com.azure.messaging.servicebus.ServiceBusClientBuilder.enableCrossEntityTransactions()"
  fullName: "com.azure.messaging.servicebus.ServiceBusClientBuilder.enableCrossEntityTransactions()"
  name: "enableCrossEntityTransactions()"
  nameWithType: "ServiceBusClientBuilder.enableCrossEntityTransactions()"
  summary: "Enable cross entity transaction on the connection to Service bus. Use this feature only when your transaction scope spans across different Service Bus entities.\n\n**Avoid using non-transaction API on this client**\n\nSince this feature will set up connection to Service Bus optimised to enable this feature. Once all the clients have been setup, the first receiver or sender used will initialize 'send-via' queue as a single message transfer entity. All the messages will flow via this queue. Thus this client is not suitable for any non-transaction API.\n\n**When not to enable this feature**\n\nIf your transaction involved in one Service bus entity only. For example you are receiving from one queue/subscription and you want to settle your own messages which are part of one transaction."
  syntax: "public ServiceBusClientBuilder enableCrossEntityTransactions()"
  returns:
    description: "The updated <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSenderClientBuilder\"></xref> object."
    type: "<xref href=\"com.azure.messaging.servicebus.ServiceBusClientBuilder?alt=com.azure.messaging.servicebus.ServiceBusClientBuilder&text=ServiceBusClientBuilder\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.3.0-beta.1
