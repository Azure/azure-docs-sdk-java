### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JsonParser.readValueAs*"
fullName: "com.fasterxml.jackson.core.JsonParser.<T>readValueAs"
name: "<T>readValueAs"
nameWithType: "JsonParser.<T>readValueAs"
members:
- uid: "com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)"
  fullName: "com.fasterxml.jackson.core.JsonParser.<T>readValueAs(TypeReference<?> valueTypeRef)"
  name: "<T>readValueAs(TypeReference<?> valueTypeRef)"
  nameWithType: "JsonParser.<T>readValueAs(TypeReference<?> valueTypeRef)"
  summary: "Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called \"super type token\" and specifically needs to be used if the root type is a parameterized (generic) container type. **Note**: method can only be called if the parser has an object codec assigned; this is true for parsers constructed by `MappingJsonFactory` (defined in 'jackson-databind' bundle) but not for <xref uid=\"com.fasterxml.jackson.core.JsonFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory\"></xref> (unless its `setCodec` method has been explicitly called).\n\nThis method may advance the event stream, for structured types the current token will be the closing end marker (END\\_ARRAY, END\\_OBJECT) of the bound structure. For non-structured Json types (and for <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_EMBEDDED_OBJECT\"></xref>) stream is not advanced."
  parameters:
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public T <T>readValueAs(TypeReference<?> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.core.JsonParser.<T>readValueAs(Class<T> valueType)"
  name: "<T>readValueAs(Class<T> valueType)"
  nameWithType: "JsonParser.<T>readValueAs(Class<T> valueType)"
  summary: "Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like <xref uid=\"java.lang.Boolean\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Boolean\"></xref>). **Note**: method can only be called if the parser has an object codec assigned; this is true for parsers constructed by `MappingJsonFactory` (from \"jackson-databind\" jar) but not for <xref uid=\"com.fasterxml.jackson.core.JsonFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonFactory\"></xref> (unless its `setCodec` method has been explicitly called).\n\nThis method may advance the event stream, for structured types the current token will be the closing end marker (END\\_ARRAY, END\\_OBJECT) of the bound structure. For non-structured Json types (and for <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_EMBEDDED_OBJECT\"></xref>) stream is not advanced.\n\nNote: this method should NOT be used if the result type is a container (<xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> or <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>. The reason is that due to type erasure, key and value types can not be introspected when using this method."
  parameters:
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>readValueAs(Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
