### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  id: LeaseStoreManager
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed
  children:
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.LeaseStoreManagerBuilderDefinition
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquire(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquireInitializationLock(java.time.Duration)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.builder()
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.checkpoint(com.azure.cosmos.implementation.changefeed.Lease,java.lang.String)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.createLeaseIfNotExist(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.delete(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getAllLeases()
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getOwnedLeases()
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.isInitialized()
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.markInitialized()
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.release(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.releaseInitializationLock()
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.renew(com.azure.cosmos.implementation.changefeed.Lease)
  - com.azure.cosmos.implementation.changefeed.LeaseStoreManager.updateProperties(com.azure.cosmos.implementation.changefeed.Lease)
  langs:
  - java
  name: LeaseStoreManager
  nameWithType: LeaseStoreManager
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  type: Interface
  package: com.azure.cosmos.implementation.changefeed
  summary: Defines an interface for operations with <xref uid="com.azure.cosmos.implementation.changefeed.Lease" data-throw-if-not-resolved="false">Lease</xref>.
  syntax:
    content: public interface LeaseStoreManager extends LeaseContainer, LeaseManager, LeaseStore, LeaseCheckpointer
  implements:
  - com.azure.cosmos.implementation.changefeed.LeaseContainer
  - com.azure.cosmos.implementation.changefeed.LeaseManager
  - com.azure.cosmos.implementation.changefeed.LeaseStore
  - com.azure.cosmos.implementation.changefeed.LeaseCheckpointer
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquire(com.azure.cosmos.implementation.changefeed.Lease)
  id: acquire(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: acquire(Lease lease)
  nameWithType: LeaseStoreManager.acquire(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquire(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquire*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Acquire ownership of the lease.
  syntax:
    content: public abstract Mono<Lease> acquire(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the Lease to acquire.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the updated acquired lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquireInitializationLock(java.time.Duration)
  id: acquireInitializationLock(java.time.Duration)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: acquireInitializationLock(Duration lockExpirationTime)
  nameWithType: LeaseStoreManager.acquireInitializationLock(Duration lockExpirationTime)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquireInitializationLock(Duration lockExpirationTime)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquireInitializationLock*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Places a lock on the lease store for initialization. Only one process may own the store for the lock time.
  syntax:
    content: public abstract Mono<Boolean> acquireInitializationLock(Duration lockExpirationTime)
    parameters:
    - id: lockExpirationTime
      type: java.time.Duration
      description: the time for the lock to expire.
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: true if the lock was acquired, false otherwise.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.builder()
  id: builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: builder()
  nameWithType: LeaseStoreManager.builder()
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.builder()
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.builder*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  syntax:
    content: public static LeaseStoreManager.LeaseStoreManagerBuilderDefinition builder()
    return:
      type: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.LeaseStoreManagerBuilderDefinition
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.checkpoint(com.azure.cosmos.implementation.changefeed.Lease,java.lang.String)
  id: checkpoint(com.azure.cosmos.implementation.changefeed.Lease,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: checkpoint(Lease lease, String continuationToken)
  nameWithType: LeaseStoreManager.checkpoint(Lease lease, String continuationToken)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.checkpoint(Lease lease, String continuationToken)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.checkpoint*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Checkpoint the lease.
  syntax:
    content: public abstract Mono<Lease> checkpoint(Lease lease, String continuationToken)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the Lease to renew.
    - id: continuationToken
      type: java.lang.String
      description: the continuation token.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the updated renewed lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.createLeaseIfNotExist(java.lang.String,java.lang.String)
  id: createLeaseIfNotExist(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: createLeaseIfNotExist(String leaseToken, String continuationToken)
  nameWithType: LeaseStoreManager.createLeaseIfNotExist(String leaseToken, String continuationToken)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.createLeaseIfNotExist(String leaseToken, String continuationToken)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.createLeaseIfNotExist*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Checks whether the lease exists and creates it if it does not exist.
  syntax:
    content: public abstract Mono<Lease> createLeaseIfNotExist(String leaseToken, String continuationToken)
    parameters:
    - id: leaseToken
      type: java.lang.String
      description: the partition to work on.
    - id: continuationToken
      type: java.lang.String
      description: the continuation token if it exists.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.delete(com.azure.cosmos.implementation.changefeed.Lease)
  id: delete(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: delete(Lease lease)
  nameWithType: LeaseStoreManager.delete(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.delete(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.delete*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: DELETE the lease.
  syntax:
    content: public abstract Mono<Void> delete(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the lease to remove.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a representation of the deferred computation of this call.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getAllLeases()
  id: getAllLeases()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: getAllLeases()
  nameWithType: LeaseStoreManager.getAllLeases()
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getAllLeases()
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getAllLeases*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  syntax:
    content: public abstract Flux<Lease> getAllLeases()
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.implementation.changefeed.Lease>
      description: List of all leases.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getOwnedLeases()
  id: getOwnedLeases()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: getOwnedLeases()
  nameWithType: LeaseStoreManager.getOwnedLeases()
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getOwnedLeases()
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getOwnedLeases*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  syntax:
    content: public abstract Flux<Lease> getOwnedLeases()
    return:
      type: reactor.core.publisher.Flux<com.azure.cosmos.implementation.changefeed.Lease>
      description: all leases owned by the current host.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.isInitialized()
  id: isInitialized()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: isInitialized()
  nameWithType: LeaseStoreManager.isInitialized()
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.isInitialized()
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.isInitialized*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  syntax:
    content: public abstract Mono<Boolean> isInitialized()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: true if the lease store is initialized.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.markInitialized()
  id: markInitialized()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: markInitialized()
  nameWithType: LeaseStoreManager.markInitialized()
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.markInitialized()
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.markInitialized*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Mark the store as initialized.
  syntax:
    content: public abstract Mono<Boolean> markInitialized()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: true if marked as initialized.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.release(com.azure.cosmos.implementation.changefeed.Lease)
  id: release(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: release(Lease lease)
  nameWithType: LeaseStoreManager.release(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.release(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.release*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Release ownership of the lease.
  syntax:
    content: public abstract Mono<Void> release(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the lease to acquire.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a representation of the deferred computation of this call.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.releaseInitializationLock()
  id: releaseInitializationLock()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: releaseInitializationLock()
  nameWithType: LeaseStoreManager.releaseInitializationLock()
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.releaseInitializationLock()
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.releaseInitializationLock*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Releases the lock one the lease store for initialization.
  syntax:
    content: public abstract Mono<Boolean> releaseInitializationLock()
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: true if the lock was acquired and was relesed, false if the lock was not acquired.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.renew(com.azure.cosmos.implementation.changefeed.Lease)
  id: renew(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: renew(Lease lease)
  nameWithType: LeaseStoreManager.renew(Lease lease)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.renew(Lease lease)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.renew*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: Renew the lease. Leases are periodically renewed to prevent expiration.
  syntax:
    content: public abstract Mono<Lease> renew(Lease lease)
    parameters:
    - id: lease
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the Lease to renew.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the updated renewed lease.
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.updateProperties(com.azure.cosmos.implementation.changefeed.Lease)
  id: updateProperties(com.azure.cosmos.implementation.changefeed.Lease)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.changefeed.LeaseStoreManager
  langs:
  - java
  name: updateProperties(Lease leaseToUpdatePropertiesFrom)
  nameWithType: LeaseStoreManager.updateProperties(Lease leaseToUpdatePropertiesFrom)
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.updateProperties(Lease leaseToUpdatePropertiesFrom)
  overload: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.updateProperties*
  type: Method
  package: com.azure.cosmos.implementation.changefeed
  summary: REPLACE item from the specified lease.
  syntax:
    content: public abstract Mono<Lease> updateProperties(Lease leaseToUpdatePropertiesFrom)
    parameters:
    - id: leaseToUpdatePropertiesFrom
      type: com.azure.cosmos.implementation.changefeed.Lease
      description: the Lease containing new item.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
      description: the updated lease.
references:
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.LeaseStoreManagerBuilderDefinition
  name: LeaseStoreManager.LeaseStoreManagerBuilderDefinition
  nameWithType: LeaseStoreManager.LeaseStoreManagerBuilderDefinition
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.LeaseStoreManagerBuilderDefinition
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.builder*
  name: builder
  nameWithType: LeaseStoreManager.builder
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.builder
  package: com.azure.cosmos.implementation.changefeed
- uid: reactor.core.publisher.Flux<com.azure.cosmos.implementation.changefeed.Lease>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.changefeed.Lease
    name: Lease
    fullName: com.azure.cosmos.implementation.changefeed.Lease
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getAllLeases*
  name: getAllLeases
  nameWithType: LeaseStoreManager.getAllLeases
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getAllLeases
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getOwnedLeases*
  name: getOwnedLeases
  nameWithType: LeaseStoreManager.getOwnedLeases
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.getOwnedLeases
  package: com.azure.cosmos.implementation.changefeed
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: reactor.core.publisher.Mono<com.azure.cosmos.implementation.changefeed.Lease>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.changefeed.Lease
    name: Lease
    fullName: com.azure.cosmos.implementation.changefeed.Lease
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.createLeaseIfNotExist*
  name: createLeaseIfNotExist
  nameWithType: LeaseStoreManager.createLeaseIfNotExist
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.createLeaseIfNotExist
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.Lease
  name: Lease
  nameWithType: Lease
  fullName: com.azure.cosmos.implementation.changefeed.Lease
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.delete*
  name: delete
  nameWithType: LeaseStoreManager.delete
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.delete
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquire*
  name: acquire
  nameWithType: LeaseStoreManager.acquire
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquire
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.release*
  name: release
  nameWithType: LeaseStoreManager.release
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.release
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.renew*
  name: renew
  nameWithType: LeaseStoreManager.renew
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.renew
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.updateProperties*
  name: updateProperties
  nameWithType: LeaseStoreManager.updateProperties
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.updateProperties
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.checkpoint*
  name: checkpoint
  nameWithType: LeaseStoreManager.checkpoint
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.checkpoint
  package: com.azure.cosmos.implementation.changefeed
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.isInitialized*
  name: isInitialized
  nameWithType: LeaseStoreManager.isInitialized
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.isInitialized
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.markInitialized*
  name: markInitialized
  nameWithType: LeaseStoreManager.markInitialized
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.markInitialized
  package: com.azure.cosmos.implementation.changefeed
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquireInitializationLock*
  name: acquireInitializationLock
  nameWithType: LeaseStoreManager.acquireInitializationLock
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.acquireInitializationLock
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.releaseInitializationLock*
  name: releaseInitializationLock
  nameWithType: LeaseStoreManager.releaseInitializationLock
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStoreManager.releaseInitializationLock
  package: com.azure.cosmos.implementation.changefeed
- uid: com.azure.cosmos.implementation.changefeed.LeaseContainer
  name: LeaseContainer
  nameWithType: LeaseContainer
  fullName: com.azure.cosmos.implementation.changefeed.LeaseContainer
- uid: com.azure.cosmos.implementation.changefeed.LeaseCheckpointer
  name: LeaseCheckpointer
  nameWithType: LeaseCheckpointer
  fullName: com.azure.cosmos.implementation.changefeed.LeaseCheckpointer
- uid: com.azure.cosmos.implementation.changefeed.LeaseManager
  name: LeaseManager
  nameWithType: LeaseManager
  fullName: com.azure.cosmos.implementation.changefeed.LeaseManager
- uid: com.azure.cosmos.implementation.changefeed.LeaseStore
  name: LeaseStore
  nameWithType: LeaseStore
  fullName: com.azure.cosmos.implementation.changefeed.LeaseStore
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
