### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  id: TypeResolverBuilder
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype
  children:
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.defaultImpl(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.getDefaultImpl()
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeIdVisibility(boolean)
  - com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeProperty(java.lang.String)
  langs:
  - java
  name: TypeResolverBuilder<T>
  nameWithType: TypeResolverBuilder<T>
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>
  type: Interface
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Interface that defines builders that are configured based on annotations (like <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo</xref> or JAXB annotations), and produce type serializers and deserializers used for handling type information embedded in JSON to allow for safe polymorphic type handling.


    Builder is first initialized by calling <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init" data-throw-if-not-resolved="false">#init</xref> method, and then configured using 'set' methods like <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion" data-throw-if-not-resolved="false">#inclusion</xref>. Finally, after calling all configuration methods, <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer" data-throw-if-not-resolved="false">#buildTypeSerializer</xref> or <xref uid="com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer" data-throw-if-not-resolved="false">#buildTypeDeserializer</xref> will be called to get actual type resolver constructed and used for resolving types for configured base type and its subtypes.


    Note that instances are used for two related but distinct use cases:

     *  To create builders to use with explicit type information inclusion (usually via `@JsonTypeInfo` annotation)
     *  To create builders when "default typing" is used; if so, type information is automatically included for certain kind of types, regardless of annotations

    Important distinction between the cases is that in first case, calls to create builders are only made when builders are certainly needed; whereas in second case builder has to first verify whether type information is applicable for given type, and if not, just return null to indicate this.
  syntax:
    content: public interface TypeResolverBuilder<T>
    typeParameters:
    - id: T
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)
  id: buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
  nameWithType: TypeResolverBuilder<T>.buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method for building type deserializer based on current configuration of this builder.
  syntax:
    content: public abstract TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Base type that constructed resolver will
            handle; super type of all types it will be used for.
    - id: subtypes
      type: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>
      description: Known subtypes of the base type.
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)
  id: buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
  nameWithType: TypeResolverBuilder<T>.buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method for building type serializer based on current configuration of this builder.
  syntax:
    content: public abstract TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Base type that constructed resolver will
            handle; super type of all types it will be used for.
    - id: subtypes
      type: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.defaultImpl(java.lang.Class<?>)
  id: defaultImpl(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: defaultImpl(Class<?> defaultImpl)
  nameWithType: TypeResolverBuilder<T>.defaultImpl(Class<?> defaultImpl)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.defaultImpl(Class<?> defaultImpl)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.defaultImpl*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method for specifying default implementation to use if type id is either not available, or cannot be resolved.
  syntax:
    content: public abstract T defaultImpl(Class<?> defaultImpl)
    parameters:
    - id: defaultImpl
      type: java.lang.Class<?>
    return:
      type: T
      description: >-
        Resulting builder instance (usually this builder,
           but may be a newly constructed instance for immutable builders}
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.getDefaultImpl()
  id: getDefaultImpl()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: getDefaultImpl()
  nameWithType: TypeResolverBuilder<T>.getDefaultImpl()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.getDefaultImpl()
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.getDefaultImpl*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for currently configured default type; implementation class that may be used in case no valid type information is available during type resolution
  syntax:
    content: public abstract Class<?> getDefaultImpl()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  id: inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: inclusion(JsonTypeInfo.As includeAs)
  nameWithType: TypeResolverBuilder<T>.inclusion(JsonTypeInfo.As includeAs)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.inclusion(JsonTypeInfo.As includeAs)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method for specifying mechanism to use for including type metadata in JSON. If not explicitly called, setting defaults to <xref uid="" data-throw-if-not-resolved="false">As#PROPERTY</xref>.
  syntax:
    content: public abstract T inclusion(JsonTypeInfo.As includeAs)
    parameters:
    - id: includeAs
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
      description: Mechanism used for including type metadata in JSON
    return:
      type: T
      description: >-
        Resulting builder instance (usually this builder,
           but may be a newly constructed instance for immutable builders}
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)
  id: init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: init(JsonTypeInfo.Id idType, TypeIdResolver res)
  nameWithType: TypeResolverBuilder<T>.init(JsonTypeInfo.Id idType, TypeIdResolver res)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.init(JsonTypeInfo.Id idType, TypeIdResolver res)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Initialization method that is called right after constructing the builder instance.
  syntax:
    content: public abstract T init(JsonTypeInfo.Id idType, TypeIdResolver res)
    parameters:
    - id: idType
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
      description: Which type metadata is used
    - id: res
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
      description: (optional) Custom type id resolver used, if any
    return:
      type: T
      description: >-
        Resulting builder instance (usually this builder,
           but not necessarily)
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeIdVisibility(boolean)
  id: typeIdVisibility(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: typeIdVisibility(boolean isVisible)
  nameWithType: TypeResolverBuilder<T>.typeIdVisibility(boolean isVisible)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.typeIdVisibility(boolean isVisible)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeIdVisibility*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method for specifying whether type id should be visible to <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.JsonDeserializer</xref>s or not.
  syntax:
    content: public abstract T typeIdVisibility(boolean isVisible)
    parameters:
    - id: isVisible
      type: boolean
    return:
      type: T
      description: >-
        Resulting builder instance (usually this builder,
           but may be a newly constructed instance for immutable builders}
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeProperty(java.lang.String)
  id: typeProperty(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder
  langs:
  - java
  name: typeProperty(String propName)
  nameWithType: TypeResolverBuilder<T>.typeProperty(String propName)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.typeProperty(String propName)
  overload: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeProperty*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method for specifying name of property used for including type information. Not used for all inclusion mechanisms; usually only used with <xref uid="" data-throw-if-not-resolved="false">As#PROPERTY</xref>.


    If not explicitly called, name of property to use is based on defaults for <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo.Id" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo.Id</xref> configured.
  syntax:
    content: public abstract T typeProperty(String propName)
    parameters:
    - id: propName
      type: java.lang.String
      description: >-
        Name of JSON property to use for including
            type information
    return:
      type: T
      description: >-
        Resulting builder instance (usually this builder,
           but may be a newly constructed instance for immutable builders}
references:
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.getDefaultImpl*
  name: getDefaultImpl
  nameWithType: TypeResolverBuilder<T>.getDefaultImpl
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.getDefaultImpl
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.SerializationConfig
  name: SerializationConfig
  nameWithType: SerializationConfig
  fullName: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.jsontype.NamedType
    name: NamedType
    fullName: com.fasterxml.jackson.databind.jsontype.NamedType
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer*
  name: buildTypeSerializer
  nameWithType: TypeResolverBuilder<T>.buildTypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.buildTypeSerializer
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  name: TypeDeserializer
  nameWithType: TypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer*
  name: buildTypeDeserializer
  nameWithType: TypeResolverBuilder<T>.buildTypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.buildTypeDeserializer
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  name: JsonTypeInfo.Id
  nameWithType: JsonTypeInfo.Id
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init*
  name: init
  nameWithType: TypeResolverBuilder<T>.init
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.init
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  name: JsonTypeInfo.As
  nameWithType: JsonTypeInfo.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion*
  name: inclusion
  nameWithType: TypeResolverBuilder<T>.inclusion
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.inclusion
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeProperty*
  name: typeProperty
  nameWithType: TypeResolverBuilder<T>.typeProperty
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.typeProperty
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.defaultImpl*
  name: defaultImpl
  nameWithType: TypeResolverBuilder<T>.defaultImpl
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.defaultImpl
  package: com.fasterxml.jackson.databind.jsontype
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeIdVisibility*
  name: typeIdVisibility
  nameWithType: TypeResolverBuilder<T>.typeIdVisibility
  fullName: com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>.typeIdVisibility
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: com.fasterxml.jackson.databind.jsontype.NamedType
  name: NamedType
  nameWithType: NamedType
  fullName: com.fasterxml.jackson.databind.jsontype.NamedType
