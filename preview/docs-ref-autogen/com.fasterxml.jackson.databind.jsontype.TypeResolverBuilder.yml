### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder"
fullName: "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder<T>"
name: "TypeResolverBuilder<T>"
nameWithType: "TypeResolverBuilder<T>"
summary: "Interface that defines builders that are configured based on annotations (like <xref uid=\"com.fasterxml.jackson.annotation.JsonTypeInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonTypeInfo\"></xref> or JAXB annotations), and produce type serializers and deserializers used for handling type information embedded in JSON to allow for safe polymorphic type handling.\n\nBuilder is first initialized by calling <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#init\"></xref> method, and then configured using 'set' methods like <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#inclusion\"></xref>. Finally, after calling all configuration methods, <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#buildTypeSerializer\"></xref> or <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#buildTypeDeserializer\"></xref> will be called to get actual type resolver constructed and used for resolving types for configured base type and its subtypes.\n\nNote that instances are used for two related but distinct use cases:\n\n *  To create builders to use with explicit type information inclusion (usually via `@JsonTypeInfo` annotation)\n *  To create builders when \"default typing\" is used; if so, type information is automatically included for certain kind of types, regardless of annotations\n\nImportant distinction between the cases is that in first case, calls to create builders are only made when builders are certainly needed; whereas in second case builder has to first verify whether type information is applicable for given type, and if not, just return null to indicate this."
syntax: "public interface TypeResolverBuilder<T>"
methods:
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.JavaType,java.util.Collection<com.fasterxml.jackson.databind.jsontype.NamedType>)"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.defaultImpl(java.lang.Class<?>)"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.getDefaultImpl()"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.inclusion(com.fasterxml.jackson.annotation.JsonTypeInfo.As)"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.init(com.fasterxml.jackson.annotation.JsonTypeInfo.Id,com.fasterxml.jackson.databind.jsontype.TypeIdResolver)"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeIdVisibility(boolean)"
- "com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder.typeProperty(java.lang.String)"
type: "interface"
typeParameters:
- name: "T"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
