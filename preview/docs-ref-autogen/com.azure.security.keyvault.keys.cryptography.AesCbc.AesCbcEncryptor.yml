### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor"
  id: "AesCbcEncryptor"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.AesCbcEncryptor(byte[],byte[],java.security.Provider)"
  - "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.doFinal(byte[])"
  langs:
  - "java"
  name: "AesCbc.AesCbcEncryptor"
  nameWithType: "AesCbc.AesCbcEncryptor"
  fullName: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "static class AesCbc.AesCbcEncryptor implements ICryptoTransform"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.azure.security.keyvault.keys.cryptography.ICryptoTransform"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.AesCbcEncryptor(byte[],byte[],java.security.Provider)"
  id: "AesCbcEncryptor(byte[],byte[],java.security.Provider)"
  parent: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor"
  langs:
  - "java"
  name: "AesCbcEncryptor(byte[] key, byte[] iv, Provider provider)"
  nameWithType: "AesCbc.AesCbcEncryptor.AesCbcEncryptor(byte[] key, byte[] iv, Provider provider)"
  fullName: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.AesCbcEncryptor(byte[] key, byte[] iv, Provider provider)"
  overload: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.AesCbcEncryptor*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " AesCbcEncryptor(byte[] key, byte[] iv, Provider provider)"
    parameters:
    - id: "key"
      type: "byte[]"
    - id: "iv"
      type: "byte[]"
    - id: "provider"
      type: "java.security.Provider"
- uid: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.doFinal(byte[])"
  id: "doFinal(byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor"
  langs:
  - "java"
  name: "doFinal(byte[] plaintext)"
  nameWithType: "AesCbc.AesCbcEncryptor.doFinal(byte[] plaintext)"
  fullName: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.doFinal(byte[] plaintext)"
  overload: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.doFinal*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "public byte[] doFinal(byte[] plaintext)"
    parameters:
    - id: "plaintext"
      type: "byte[]"
    return:
      type: "byte[]"
  exceptions:
  - type: "javax.crypto.IllegalBlockSizeException"
  - type: "javax.crypto.BadPaddingException"
references:
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.security.Provider"
  spec.java:
  - uid: "java.security.Provider"
    name: "Provider"
    fullName: "java.security.Provider"
- uid: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.AesCbcEncryptor*"
  name: "AesCbcEncryptor"
  nameWithType: "AesCbc.AesCbcEncryptor.AesCbcEncryptor"
  fullName: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.AesCbcEncryptor"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "javax.crypto.IllegalBlockSizeException"
  spec.java:
  - uid: "javax.crypto.IllegalBlockSizeException"
    name: "IllegalBlockSizeException"
    fullName: "javax.crypto.IllegalBlockSizeException"
- uid: "javax.crypto.BadPaddingException"
  spec.java:
  - uid: "javax.crypto.BadPaddingException"
    name: "BadPaddingException"
    fullName: "javax.crypto.BadPaddingException"
- uid: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.doFinal*"
  name: "doFinal"
  nameWithType: "AesCbc.AesCbcEncryptor.doFinal"
  fullName: "com.azure.security.keyvault.keys.cryptography.AesCbc.AesCbcEncryptor.doFinal"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.ICryptoTransform"
  name: "ICryptoTransform"
  nameWithType: "ICryptoTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.ICryptoTransform"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
