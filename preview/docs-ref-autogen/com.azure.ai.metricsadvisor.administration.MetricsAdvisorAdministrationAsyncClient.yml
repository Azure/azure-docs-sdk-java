### YamlMime:ManagedReference
items:
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  id: MetricsAdvisorAdministrationAsyncClient
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration
  children:
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed(java.lang.String,com.azure.ai.metricsadvisor.models.DataFeedSource,com.azure.ai.metricsadvisor.models.DataFeedGranularity,com.azure.ai.metricsadvisor.models.DataFeedSchema,com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings,com.azure.ai.metricsadvisor.models.DataFeedOptions)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.DataFeedSource,com.azure.ai.metricsadvisor.models.DataFeedGranularity,com.azure.ai.metricsadvisor.models.DataFeedSchema,com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings,com.azure.ai.metricsadvisor.models.DataFeedOptions)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook(com.azure.ai.metricsadvisor.models.Hook)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(com.azure.ai.metricsadvisor.models.Hook)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds()
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds(com.azure.ai.metricsadvisor.models.ListDataFeedOptions)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations(java.lang.String)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook(com.azure.ai.metricsadvisor.models.Hook)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(com.azure.ai.metricsadvisor.models.Hook)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  - com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  langs:
  - java
  name: MetricsAdvisorAdministrationAsyncClient
  nameWithType: MetricsAdvisorAdministrationAsyncClient
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  type: Class
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Metrics Advisor.


    **Instantiating a asynchronous Metrics Advisor Administration Client**


    ```java

    MetricsAdvisorAdministrationAsyncClient metricAdvisorAdministrationAsyncClient =
         new MetricsAdvisorAdministrationClientBuilder()
             .credential(new MetricsAdvisorKeyCredential("{subscription_key}", "{api_key}"))
             .endpoint("{endpoint}")
             .buildAsyncClient();
    ```
  syntax:
    content: public class MetricsAdvisorAdministrationAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient(com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl,com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion)
  id: MetricsAdvisorAdministrationAsyncClient(com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl,com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: MetricsAdvisorAdministrationAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient*
  type: Constructor
  package: com.azure.ai.metricsadvisor.administration
  summary: Create a <xref uid="com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient" data-throw-if-not-resolved="false">MetricsAdvisorAdministrationAsyncClient</xref> that sends requests to the Metrics Advisor service's endpoint. Each service call goes through the <xref uid="com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClientBuilder.pipeline(com.azure.core.http.HttpPipeline)" data-throw-if-not-resolved="false">MetricsAdvisorAdministrationClientBuilder#pipeline(HttpPipeline)</xref> http pipeline\}.
  syntax:
    content: " MetricsAdvisorAdministrationAsyncClient(AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl service, MetricsAdvisorServiceVersion serviceVersion)"
    parameters:
    - id: service
      type: com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion
      description: The versions of Azure Metrics Advisor supported by this client library.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  id: createAnomalyAlertConfiguration(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration(\n     new AnomalyAlertConfiguration(\"My Alert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityCondition(new SeverityCondition().setMaxAlertSeverity(Severity.HIGH)))))\n         .setCrossMetricsOperator(MetricAnomalyAlertConfigurationsOperator.AND)\n         .setIdOfHooksToAlert(Arrays.asList(hookId1, hookId2)))\n     .subscribe(anomalyAlertConfiguration -> {\n         System.out.printf(\"Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Anomaly alert configuration hook ids: %.2f%n\",\n             anomalyAlertConfiguration.getIdOfHooksToAlert());\n         System.out.printf(\"Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  syntax:
    content: public Mono<AnomalyAlertConfiguration> createAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alerting configuration.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  id: createAnomalyAlertConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to trigger alert when anomalies are detected.\n\n**Code sample**\n\n```java\nString detectionConfigurationId1 = \"9ol48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String detectionConfigurationId2 = \"3e58er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId1 = \"5f48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n String hookId2 = \"8i48er30-6e6e-4391-b78f-b00dfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse(\n     new AnomalyAlertConfiguration(\"My Alert config name\")\n         .setDescription(\"alert config description\")\n         .setMetricAlertConfigurations(Arrays.asList(\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId1,\n                 MetricAnomalyAlertScope.forWholeSeries()),\n             new MetricAnomalyAlertConfiguration(detectionConfigurationId2,\n                 MetricAnomalyAlertScope.forWholeSeries())\n                 .setAlertConditions(new MetricAnomalyAlertConditions()\n                     .setSeverityCondition(new SeverityCondition().setMaxAlertSeverity(Severity.HIGH)))))\n         .setCrossMetricsOperator(MetricAnomalyAlertConfigurationsOperator.AND)\n         .setIdOfHooksToAlert(Arrays.asList(hookId1, hookId2)))\n     .subscribe(alertConfigurationResponse -> {\n         System.out.printf(\"Anomaly alert creation operation status: %s%n\",\n             alertConfigurationResponse.getStatusCode());\n         final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n         System.out.printf(\"Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Anomaly alert configuration hook ids: %s%n\",\n             anomalyAlertConfiguration.getIdOfHooksToAlert());\n         System.out.printf(\"Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  syntax:
    content: public Mono<Response<AnomalyAlertConfiguration>> createAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alerting configuration.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed(java.lang.String,com.azure.ai.metricsadvisor.models.DataFeedSource,com.azure.ai.metricsadvisor.models.DataFeedGranularity,com.azure.ai.metricsadvisor.models.DataFeedSchema,com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings,com.azure.ai.metricsadvisor.models.DataFeedOptions)
  id: createDataFeed(java.lang.String,com.azure.ai.metricsadvisor.models.DataFeedSource,com.azure.ai.metricsadvisor.models.DataFeedGranularity,com.azure.ai.metricsadvisor.models.DataFeedSchema,com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings,com.azure.ai.metricsadvisor.models.DataFeedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createDataFeed(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createDataFeed(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Create a new data feed.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.createDataFeed(
         "dataFeedName",
         new MySqlDataFeedSource("conn-string", "query"),
         new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY),
         new DataFeedSchema(Arrays.asList(new Metric().setName("metric1"), new Metric().setName("metric2"))),
         new DataFeedIngestionSettings(OffsetDateTime.parse("")),
         new DataFeedOptions().setDescription("data feed description")
             .setRollupSettings(new DataFeedRollupSettings().setRollupType(DataFeedRollupType.AUTO_ROLLUP)))
         .subscribe(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %.2f%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %.2f%n", dataFeed.getCreator());
         });
    ```
  syntax:
    content: public Mono<DataFeed> createDataFeed(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
    parameters:
    - id: dataFeedName
      type: java.lang.String
      description: the name of the data feed.
    - id: dataFeedSource
      type: com.azure.ai.metricsadvisor.models.DataFeedSource
      description: the source of the data feed.
    - id: dataFeedGranularity
      type: com.azure.ai.metricsadvisor.models.DataFeedGranularity
      description: the granularity details of the data feed.
    - id: dataFeedSchema
      type: com.azure.ai.metricsadvisor.models.DataFeedSchema
      description: the schema detail properties of the data feed.
    - id: dataFeedIngestionSettings
      type: com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings
      description: the data feed ingestion properties.
    - id: dataFeedOptions
      type: com.azure.ai.metricsadvisor.models.DataFeedOptions
      description: the additional options to configure the data feed.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.DataFeed>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.DataFeedSource,com.azure.ai.metricsadvisor.models.DataFeedGranularity,com.azure.ai.metricsadvisor.models.DataFeedSchema,com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings,com.azure.ai.metricsadvisor.models.DataFeedOptions)
  id: createDataFeedWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.DataFeedSource,com.azure.ai.metricsadvisor.models.DataFeedGranularity,com.azure.ai.metricsadvisor.models.DataFeedSchema,com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings,com.azure.ai.metricsadvisor.models.DataFeedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createDataFeedWithResponse(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Create a new data feed with REST response.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.createDataFeedWithResponse(
         "dataFeedName",
         new MySqlDataFeedSource("conn-string", "query"),
         new DataFeedGranularity().setGranularityType(DataFeedGranularityType.DAILY),
         new DataFeedSchema(Arrays.asList(new Metric().setName("metric1"), new Metric().setName("metric2"))),
         new DataFeedIngestionSettings(OffsetDateTime.parse("")),
         new DataFeedOptions().setDescription("data feed description")
             .setRollupSettings(new DataFeedRollupSettings().setRollupType(DataFeedRollupType.AUTO_ROLLUP)))
         .subscribe(dataFeedResponse -> {
             System.out.printf("Data feed create operation status: %s%n", dataFeedResponse.getStatusCode());
             DataFeed dataFeed = dataFeedResponse.getValue();
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %.2f%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %.2f%n", dataFeed.getCreator());
         });
    ```
  syntax:
    content: public Mono<Response<DataFeed>> createDataFeedWithResponse(String dataFeedName, DataFeedSource dataFeedSource, DataFeedGranularity dataFeedGranularity, DataFeedSchema dataFeedSchema, DataFeedIngestionSettings dataFeedIngestionSettings, DataFeedOptions dataFeedOptions)
    parameters:
    - id: dataFeedName
      type: java.lang.String
      description: the name of the data feed.
    - id: dataFeedSource
      type: com.azure.ai.metricsadvisor.models.DataFeedSource
      description: the source of the data feed.
    - id: dataFeedGranularity
      type: com.azure.ai.metricsadvisor.models.DataFeedGranularity
      description: the granularity details of the data feed.
    - id: dataFeedSchema
      type: com.azure.ai.metricsadvisor.models.DataFeedSchema
      description: the schema detail properties of the data feed.
    - id: dataFeedIngestionSettings
      type: com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings
      description: the data feed ingestion properties.
    - id: dataFeedOptions
      type: com.azure.ai.metricsadvisor.models.DataFeedOptions
      description: the additional options to configure the data feed.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.DataFeed" data-throw-if-not-resolved="false">data feed</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook(com.azure.ai.metricsadvisor.models.Hook)
  id: createHook(com.azure.ai.metricsadvisor.models.Hook)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createHook(Hook hook)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createHook(Hook hook)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook(Hook hook)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Creates a hook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nHook emailHook = new EmailHook(\"email hook\")\n     .setDescription(\"my email hook\")\n     .addEmailToAlert(\"alertme{@literal @}alertme.com\")\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n \n metricAdvisorAdministrationAsyncClient.createHook(emailHook)\n     .subscribe(hook -> {\n         EmailHook createdEmailHook = (EmailHook) hook;\n         System.out.printf(\"Hook Id: %s%n\", createdEmailHook.getId());\n         System.out.printf(\"Hook Name: %s%n\", createdEmailHook.getName());\n         System.out.printf(\"Hook Description: %s%n\", createdEmailHook.getDescription());\n         System.out.printf(\"Hook External Link: %s%n\", createdEmailHook.getExternalLink());\n         System.out.printf(\"Hook Emails: %s%n\", String.join(\",\", createdEmailHook.getEmailsToAlert()));\n     });\n```"
  syntax:
    content: public Mono<Hook> createHook(Hook hook)
    parameters:
    - id: hook
      type: com.azure.ai.metricsadvisor.models.Hook
      description: The hook.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.Hook>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(com.azure.ai.metricsadvisor.models.Hook)
  id: createHookWithResponse(com.azure.ai.metricsadvisor.models.Hook)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createHookWithResponse(Hook hook)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(Hook hook)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse(Hook hook)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Creates a hook that receives anomaly incident alerts.\n\n**Code sample**\n\n```java\nHook emailHook = new EmailHook(\"email hook\")\n     .setDescription(\"my email hook\")\n     .addEmailToAlert(\"alertme{@literal @}alertme.com\")\n     .setExternalLink(\"https://adwiki.azurewebsites.net/articles/howto/alerts/create-hooks.html\");\n \n metricAdvisorAdministrationAsyncClient.createHookWithResponse(emailHook)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n         EmailHook createdEmailHook = (EmailHook) response.getValue();\n         System.out.printf(\"Hook Id: %s%n\", createdEmailHook.getId());\n         System.out.printf(\"Hook Name: %s%n\", createdEmailHook.getName());\n         System.out.printf(\"Hook Description: %s%n\", createdEmailHook.getDescription());\n         System.out.printf(\"Hook External Link: %s%n\", createdEmailHook.getExternalLink());\n         System.out.printf(\"Hook Emails: %s%n\", String.join(\",\", createdEmailHook.getEmailsToAlert()));\n     });\n```"
  syntax:
    content: public Mono<Response<Hook>> createHookWithResponse(Hook hook)
    parameters:
    - id: hook
      type: com.azure.ai.metricsadvisor.models.Hook
      description: The hook.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.Hook>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  id: createMetricAnomalyDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createMetricAnomalyDetectionConfiguration(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setCrossConditionOperator(DetectionConditionsOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition()\n         .setSensitivity(50)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(50).setMinRatio(50)))\n     .setHardThresholdCondition(new HardThresholdCondition()\n         .setLowerBound(0.0)\n         .setUpperBound(100.0)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(5).setMinRatio(5)))\n     .setChangeThresholdCondition(new ChangeThresholdCondition()\n         .setChangePercentage(50)\n         .setShiftPoint(30)\n         .setWithinRange(true)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2)));\n \n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n \n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n metricAdvisorAdministrationAsyncClient\n     .createMetricAnomalyDetectionConfiguration(metricId, detectionConfig)\n     .subscribe(createdDetectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n     });\n```"
  syntax:
    content: public Mono<AnomalyDetectionConfiguration> createMetricAnomalyDetectionConfiguration(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id to associate the configuration with.
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  id: createMetricAnomalyDetectionConfigurationWithResponse(java.lang.String,com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: createMetricAnomalyDetectionConfigurationWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Create a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal MetricWholeSeriesDetectionCondition wholeSeriesCondition = new MetricWholeSeriesDetectionCondition()\n     .setCrossConditionOperator(DetectionConditionsOperator.OR)\n     .setSmartDetectionCondition(new SmartDetectionCondition()\n         .setSensitivity(50)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(50).setMinRatio(50)))\n     .setHardThresholdCondition(new HardThresholdCondition()\n         .setLowerBound(0.0)\n         .setUpperBound(100.0)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(5).setMinRatio(5)))\n     .setChangeThresholdCondition(new ChangeThresholdCondition()\n         .setChangePercentage(50)\n         .setShiftPoint(30)\n         .setWithinRange(true)\n         .setAnomalyDetectorDirection(AnomalyDetectorDirection.BOTH)\n         .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2)));\n \n final String detectionConfigName = \"my_detection_config\";\n final String detectionConfigDescription = \"anomaly detection config for metric\";\n final AnomalyDetectionConfiguration detectionConfig\n     = new AnomalyDetectionConfiguration(detectionConfigName)\n     .setDescription(detectionConfigDescription)\n     .setWholeSeriesDetectionCondition(wholeSeriesCondition);\n \n final String metricId = \"0b836da8-10e6-46cd-8f4f-28262e113a62\";\n metricAdvisorAdministrationAsyncClient\n     .createMetricAnomalyDetectionConfigurationWithResponse(metricId, detectionConfig)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n         AnomalyDetectionConfiguration createdDetectionConfig = response.getValue();\n         System.out.printf(\"Detection config Id: %s%n\", createdDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", createdDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", createdDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", createdDetectionConfig.getMetricId());\n     });\n```"
  syntax:
    content: public Mono<Response<AnomalyDetectionConfiguration>> createMetricAnomalyDetectionConfigurationWithResponse(String metricId, AnomalyDetectionConfiguration detectionConfiguration)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id to associate the configuration with.
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration(java.lang.String)
  id: deleteAnomalyAlertConfiguration(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteAnomalyAlertConfiguration(String alertConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration(String alertConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration(String alertConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Deletes the anomaly alert configuration identified by `alertConfigurationId`.


    **Code sample**


    ```java

    String alertConfigId = "1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5";
     metricAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration(alertConfigId);
    ```
  syntax:
    content: public Mono<Void> deleteAnomalyAlertConfiguration(String alertConfigurationId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse(java.lang.String)
  id: deleteAnomalyAlertConfigurationWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Deletes the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse(alertConfigId)\n     .subscribe(response -> {\n         System.out.printf(\"Anomaly alert config delete operation status : %s%n\", response.getStatusCode());\n     });\n```"
  syntax:
    content: public Mono<Response<Void>> deleteAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response containing status code and headers returned after the operation.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(java.lang.String)
  id: deleteDataFeed(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteDataFeed(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a data feed.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.deleteDataFeed("dataFeedId");

    ```
  syntax:
    content: public Mono<Void> deleteDataFeed(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(java.lang.String)
  id: deleteDataFeedWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteDataFeedWithResponse(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a data feed with REST response.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse("dataFeedId")
         .subscribe(response -> {
             System.out.printf("Data feed delete operation status : %s%n", response.getStatusCode());
         });
    ```
  syntax:
    content: public Mono<Response<Void>> deleteDataFeedWithResponse(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response containing status code and headers returned after the operation.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook(java.lang.String)
  id: deleteHook(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteHook(String hookId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteHook(String hookId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook(String hookId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a hook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricAdvisorAdministrationAsyncClient.deleteHook(emailHookId);
    ```
  syntax:
    content: public Mono<Void> deleteHook(String hookId)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(java.lang.String)
  id: deleteHookWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteHookWithResponse(String hookId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(String hookId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse(String hookId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a hook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricAdvisorAdministrationAsyncClient.deleteHookWithResponse(emailHookId)
         .subscribe(response -> {
             System.out.printf("Response statusCode: %d%n", response.getStatusCode());
         });
    ```
  syntax:
    content: public Mono<Response<Void>> deleteHookWithResponse(String hookId)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration(java.lang.String)
  id: deleteMetricAnomalyDetectionConfiguration(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: Delete a metric anomaly detection configuration.
  syntax:
    content: public Mono<Void> deleteMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: >-
        The metric anomaly detection configuration unique id.

         <p><strong>Code sample</strong></p>
         <pre>
         final String detectionConfigId = &quot;7b8069a1-1564-46da-9f50-b5d0dd9129ab&quot;;
         metricAdvisorAdministrationAsyncClient
             .deleteMetricAnomalyDetectionConfiguration&#40;detectionConfigId&#41;
             .subscribe&#40;&#41;;
         </pre>
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty Mono.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse(java.lang.String)
  id: deleteMetricAnomalyDetectionConfigurationWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: deleteMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Delete a metric anomaly detection configuration.


    **Code sample**


    ```java

    final String detectionConfigId = "7b8069a1-1564-46da-9f50-b5d0dd9129ab";
     metricAdvisorAdministrationAsyncClient
         .deleteMetricAnomalyDetectionConfigurationWithResponse(detectionConfigId)
         .subscribe(response -> {
             System.out.printf("Response statusCode: %d%n", response.getStatusCode());
         });
    ```
  syntax:
    content: public Mono<Response<Void>> deleteMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The metric anomaly detection configuration unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(java.lang.String)
  id: getAnomalyAlertConfiguration(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getAnomalyAlertConfiguration(String alertConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(String alertConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(String alertConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(alertConfigId)\n     .subscribe(anomalyAlertConfiguration -> {\n         System.out.printf(\"Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Anomaly alert configuration hook ids: %.2f%n\",\n             anomalyAlertConfiguration.getIdOfHooksToAlert());\n         System.out.printf(\"Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  syntax:
    content: public Mono<AnomalyAlertConfiguration> getAnomalyAlertConfiguration(String alertConfigurationId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> identified by the given id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse(java.lang.String)
  id: getAnomalyAlertConfigurationWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly alert configuration identified by `alertConfigurationId`.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse(alertConfigId)\n     .subscribe(alertConfigurationResponse -> {\n         System.out.printf(\"Anomaly alert creation operation status: %s%n\",\n             alertConfigurationResponse.getStatusCode());\n         final AnomalyAlertConfiguration anomalyAlertConfiguration = alertConfigurationResponse.getValue();\n         System.out.printf(\"Anomaly alert configuration Id: %s%n\", anomalyAlertConfiguration.getId());\n         System.out.printf(\"Anomaly alert configuration description: %s%n\",\n             anomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Anomaly alert configuration hook ids: %.2f%n\",\n             anomalyAlertConfiguration.getIdOfHooksToAlert());\n         System.out.printf(\"Anomaly alert configuration cross metrics operator: %s%n\",\n             anomalyAlertConfiguration.getCrossMetricsOperator().toString());\n     });\n```"
  syntax:
    content: public Mono<Response<AnomalyAlertConfiguration>> getAnomalyAlertConfigurationWithResponse(String alertConfigurationId)
    parameters:
    - id: alertConfigurationId
      type: java.lang.String
      description: The anomaly alert configuration id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>>
      description: >-
        A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>
         containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> identified by the given id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed(java.lang.String)
  id: getDataFeed(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getDataFeed(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeed(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a data feed by its id.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.getDataFeed("dataFeedId")
         .subscribe(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %.2f%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %.2f%n", dataFeed.getCreator());
         });
    ```
  syntax:
    content: public Mono<DataFeed> getDataFeed(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.DataFeed>
      description: The data feed for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(java.lang.String)
  id: getDataFeedIngestionProgress(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getDataFeedIngestionProgress(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Retrieve the ingestion progress of a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     metricAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress(dataFeedId)
         .subscribe(ingestionProgress -> {
             System.out.printf("Latest active timestamp: %s%n", ingestionProgress.getLatestActiveTimestamp());
             System.out.printf("Latest successful timestamp: %s%n", ingestionProgress.getLatestSuccessTimestamp());
         });
    ```
  syntax:
    content: public Mono<DataFeedIngestionProgress> getDataFeedIngestionProgress(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing <xref uid="com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress" data-throw-if-not-resolved="false">DataFeedIngestionProgress</xref> of the data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(java.lang.String)
  id: getDataFeedIngestionProgressWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getDataFeedIngestionProgressWithResponse(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Retrieve the ingestion progress of a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     metricAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse(dataFeedId, Context.NONE)
         .subscribe(response -> {
             System.out.printf("Response statusCode: %d%n", response.getStatusCode());
             DataFeedIngestionProgress ingestionProgress = response.getValue();
             System.out.printf("Latest active timestamp: %s%n", ingestionProgress.getLatestActiveTimestamp());
             System.out.printf("Latest successful timestamp: %s%n", ingestionProgress.getLatestSuccessTimestamp());
         });
    ```
  syntax:
    content: public Mono<Response<DataFeedIngestionProgress>> getDataFeedIngestionProgressWithResponse(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing <xref uid="com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress" data-throw-if-not-resolved="false">DataFeedIngestionProgress</xref> of the data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(java.lang.String)
  id: getDataFeedWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getDataFeedWithResponse(String dataFeedId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(String dataFeedId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse(String dataFeedId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a data feed by its id with REST response.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.getDataFeedWithResponse("dataFeedId")
         .subscribe(dataFeedResponse -> {
             System.out.printf("Data feed create operation status: %s%n", dataFeedResponse.getStatusCode());
             DataFeed dataFeed = dataFeedResponse.getValue();
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %.2f%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %.2f%n", dataFeed.getCreator());
         });
    ```
  syntax:
    content: public Mono<Response<DataFeed>> getDataFeedWithResponse(String dataFeedId)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>>
      description: The data feed for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook(java.lang.String)
  id: getHook(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getHook(String hookId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getHook(String hookId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook(String hookId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a hook by its id.


    **Code sample**


    ```java

    final String hookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricAdvisorAdministrationAsyncClient.getHook(hookId)
         .subscribe(hook -> {
             if (hook instanceof EmailHook) {
                 EmailHook emailHook = (EmailHook) hook;
                 System.out.printf("Hook Id: %s%n", emailHook.getId());
                 System.out.printf("Hook Name: %s%n", emailHook.getName());
                 System.out.printf("Hook Description: %s%n", emailHook.getDescription());
                 System.out.printf("Hook External Link: %s%n", emailHook.getExternalLink());
                 System.out.printf("Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
             } else if (hook instanceof WebHook) {
                 WebHook webHook = (WebHook) hook;
                 System.out.printf("Hook Id: %s%n", webHook.getId());
                 System.out.printf("Hook Name: %s%n", webHook.getName());
                 System.out.printf("Hook Description: %s%n", webHook.getDescription());
                 System.out.printf("Hook External Link: %s%n", webHook.getExternalLink());
                 System.out.printf("Hook Endpoint: %s%n", webHook.getEndpoint());
                 System.out.printf("Hook Headers: %s%n", webHook.getHttpHeaders());
             }
         });
    ```
  syntax:
    content: public Mono<Hook> getHook(String hookId)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.Hook>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref> for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(java.lang.String)
  id: getHookWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getHookWithResponse(String hookId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(String hookId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse(String hookId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Get a hook by its id.


    **Code sample**


    ```java

    final String hookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricAdvisorAdministrationAsyncClient.getHookWithResponse(hookId)
         .subscribe(response -> {
             System.out.printf("Response statusCode: %d%n", response.getStatusCode());
             Hook hook = response.getValue();
             if (hook instanceof EmailHook) {
                 EmailHook emailHook = (EmailHook) hook;
                 System.out.printf("Hook Id: %s%n", emailHook.getId());
                 System.out.printf("Hook Name: %s%n", emailHook.getName());
                 System.out.printf("Hook Description: %s%n", emailHook.getDescription());
                 System.out.printf("Hook External Link: %s%n", emailHook.getExternalLink());
                 System.out.printf("Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
             } else if (hook instanceof WebHook) {
                 WebHook webHook = (WebHook) hook;
                 System.out.printf("Hook Id: %s%n", webHook.getId());
                 System.out.printf("Hook Name: %s%n", webHook.getName());
                 System.out.printf("Hook Description: %s%n", webHook.getDescription());
                 System.out.printf("Hook External Link: %s%n", webHook.getExternalLink());
                 System.out.printf("Hook Endpoint: %s%n", webHook.getEndpoint());
                 System.out.printf("Hook Headers: %s%n", webHook.getHttpHeaders());
             }
         });
    ```
  syntax:
    content: public Mono<Response<Hook>> getHookWithResponse(String hookId)
    parameters:
    - id: hookId
      type: java.lang.String
      description: The hook unique id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.Hook>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref> for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration(java.lang.String)
  id: getMetricAnomalyDetectionConfiguration(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricAdvisorAdministrationAsyncClient\n     .getMetricAnomalyDetectionConfiguration(detectionConfigId)\n     .subscribe(detectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n \n         System.out.printf(\"Detection conditions specified for configuration...%n\");\n \n         System.out.printf(\"Whole Series Detection Conditions:%n\");\n         MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n             = detectionConfig.getWholeSeriesDetectionCondition();\n \n         System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n             wholeSeriesDetectionCondition.getCrossConditionsOperator());\n \n         System.out.printf(\"- Smart Detection Condition:%n\");\n         System.out.printf(\" - Sensitivity: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSensitivity());\n         System.out.printf(\" - Detection direction: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getAnomalyDetectorDirection());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinRatio());\n \n         System.out.printf(\"- Hard Threshold Condition:%n\");\n         System.out.printf(\" - Lower bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getLowerBound());\n         System.out.printf(\" - Upper bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getUpperBound());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n \n         System.out.printf(\"- Change Threshold Condition:%n\");\n         System.out.printf(\" - Change percentage: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getChangePercentage());\n         System.out.printf(\" - Shift point: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getShiftPoint());\n         System.out.printf(\" - Detect anomaly if within range: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .isWithinRange());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n \n         List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n             = detectionConfig.getSeriesDetectionConditions();\n         System.out.printf(\"Series Detection Conditions:%n\");\n         for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n             DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n             final String seriesKeyStr\n                 = Arrays.toString(seriesKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Key:%n\", seriesKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesDetectionCondition.getCrossConditionsOperator());\n \n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n \n         List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n             = detectionConfig.getSeriesGroupDetectionConditions();\n         System.out.printf(\"Series Group Detection Conditions:%n\");\n         for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n             : seriesGroupDetectionConditions) {\n             DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n             final String seriesGroupKeyStr\n                 = Arrays.toString(seriesGroupKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Group Key:%n\", seriesGroupKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesGroupDetectionCondition.getCrossConditionsOperator());\n \n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n     });\n```"
  syntax:
    content: public Mono<AnomalyDetectionConfiguration> getMetricAnomalyDetectionConfiguration(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The anomaly detection configuration id.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref> for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse(java.lang.String)
  id: getMetricAnomalyDetectionConfigurationWithResponse(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: getMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricAdvisorAdministrationAsyncClient\n     .getMetricAnomalyDetectionConfigurationWithResponse(detectionConfigId)\n     .subscribe(response -> {\n         System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n \n         AnomalyDetectionConfiguration detectionConfig = response.getValue();\n         System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n \n         System.out.printf(\"Detection conditions specified for configuration...%n\");\n \n         System.out.printf(\"Whole Series Detection Conditions:%n\");\n         MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n             = detectionConfig.getWholeSeriesDetectionCondition();\n \n         System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n             wholeSeriesDetectionCondition.getCrossConditionsOperator());\n \n         System.out.printf(\"- Smart Detection Condition:%n\");\n         System.out.printf(\" - Sensitivity: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSensitivity());\n         System.out.printf(\" - Detection direction: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getAnomalyDetectorDirection());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getSmartDetectionCondition()\n                 .getSuppressCondition().getMinRatio());\n \n         System.out.printf(\"- Hard Threshold Condition:%n\");\n         System.out.printf(\" - Lower bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getLowerBound());\n         System.out.printf(\" - Upper bound: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getUpperBound());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getHardThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n \n         System.out.printf(\"- Change Threshold Condition:%n\");\n         System.out.printf(\" - Change percentage: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getChangePercentage());\n         System.out.printf(\" - Shift point: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getShiftPoint());\n         System.out.printf(\" - Detect anomaly if within range: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .isWithinRange());\n         System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinNumber(),\n             wholeSeriesDetectionCondition.getChangeThresholdCondition()\n                 .getSuppressCondition().getMinRatio());\n \n         List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n             = detectionConfig.getSeriesDetectionConditions();\n         System.out.printf(\"Series Detection Conditions:%n\");\n         for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n             DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n             final String seriesKeyStr\n                 = Arrays.toString(seriesKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Key:%n\", seriesKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesDetectionCondition.getCrossConditionsOperator());\n \n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n \n         List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n             = detectionConfig.getSeriesGroupDetectionConditions();\n         System.out.printf(\"Series Group Detection Conditions:%n\");\n         for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n             : seriesGroupDetectionConditions) {\n             DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n             final String seriesGroupKeyStr\n                 = Arrays.toString(seriesGroupKey.asMap().entrySet().stream().toArray());\n             System.out.printf(\"- Series Group Key:%n\", seriesGroupKeyStr);\n             System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n                 seriesGroupDetectionCondition.getCrossConditionsOperator());\n \n             System.out.printf(\" - Smart Detection Condition:%n\");\n             System.out.printf(\"  - Sensitivity: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSensitivity());\n             System.out.printf(\"  - Detection direction: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getAnomalyDetectorDirection());\n             System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getSmartDetectionCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Hard Threshold Condition:%n\");\n             System.out.printf(\"  -  Lower bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getLowerBound());\n             System.out.printf(\"  -  Upper bound: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getUpperBound());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getHardThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n \n             System.out.printf(\" - Change Threshold Condition:%n\");\n             System.out.printf(\"  -  Change percentage: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getChangePercentage());\n             System.out.printf(\"  -  Shift point: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getShiftPoint());\n             System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .isWithinRange());\n             System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinNumber(),\n                 seriesGroupDetectionCondition.getChangeThresholdCondition()\n                     .getSuppressCondition().getMinRatio());\n         }\n     });\n```"
  syntax:
    content: public Mono<Response<AnomalyDetectionConfiguration>> getMetricAnomalyDetectionConfigurationWithResponse(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The anomaly detection configuration id.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>>
      description: >-
        A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>
             for the provided id.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations(java.lang.String)
  id: listAnomalyAlertConfigurations(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listAnomalyAlertConfigurations(String detectionConfigurationId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations(String detectionConfigurationId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations(String detectionConfigurationId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Fetch the anomaly alert configurations associated with a detection configuration.


    **Code sample**


    ```java

    String detectionConfigId = "3rt98er30-6e6e-4391-b78f-bpfdfee1e6f5";
     metricAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations(detectionConfigId)
         .subscribe(anomalyAlertConfiguration -> {
             System.out.printf("Anomaly alert configuration Id: %s%n", anomalyAlertConfiguration.getId());
             System.out.printf("Anomaly alert configuration description: %s%n",
                 anomalyAlertConfiguration.getDescription());
             System.out.printf("Anomaly alert configuration hook ids: %.2f%n",
                 anomalyAlertConfiguration.getIdOfHooksToAlert());
             System.out.printf("Anomaly alert configuration cross metrics operator: %s%n",
                 anomalyAlertConfiguration.getCrossMetricsOperator().toString());
         });
    ```
  syntax:
    content: public PagedFlux<AnomalyAlertConfiguration> listAnomalyAlertConfigurations(String detectionConfigurationId)
    parameters:
    - id: detectionConfigurationId
      type: java.lang.String
      description: The id of the detection configuration.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: >-
        A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of all the
         <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">anomaly alert configurations</xref> for the specified detection configuration.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions)
  id: listDataFeedIngestionStatus(java.lang.String,com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Fetch the ingestion status of a data feed.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-01-01T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-09-09T00:00:00Z");
     final ListDataFeedIngestionOptions options = new ListDataFeedIngestionOptions(startTime, endTime);
     metricAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus(dataFeedId, options)
         .subscribe(ingestionStatus -> {
             System.out.printf("Timestamp: %s%n", ingestionStatus.getTimestamp());
             System.out.printf("Status: %s%n", ingestionStatus.getStatus());
             System.out.printf("Message: %s%n", ingestionStatus.getMessage());
         });
    ```
  syntax:
    content: public PagedFlux<DataFeedIngestionStatus> listDataFeedIngestionStatus(String dataFeedId, ListDataFeedIngestionOptions options)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
      description: The additional parameters.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus>
      description: The ingestion statuses.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds()
  id: listDataFeeds()
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listDataFeeds()
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listDataFeeds()
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds()
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of all data feeds on the metrics advisor account.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.listDataFeeds()
         .subscribe(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %.2f%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %.2f%n", dataFeed.getCreator());
         });
    ```
  syntax:
    content: public PagedFlux<DataFeed> listDataFeeds()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataFeed>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.DataFeed" data-throw-if-not-resolved="false">data feeds</xref> in the account.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds(com.azure.ai.metricsadvisor.models.ListDataFeedOptions)
  id: listDataFeeds(com.azure.ai.metricsadvisor.models.ListDataFeedOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listDataFeeds(ListDataFeedOptions options)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listDataFeeds(ListDataFeedOptions options)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds(ListDataFeedOptions options)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of all data feeds on the metrics advisor account.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.listDataFeeds(
         new ListDataFeedOptions()
             .setListDataFeedFilter(
                 new ListDataFeedFilter()
                     .setDataFeedStatus(DataFeedStatus.ACTIVE)
                     .setDataFeedGranularityType(DataFeedGranularityType.DAILY))
             .setTop(3))
         .subscribe(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed description: %s%n", dataFeed.getOptions().getDescription());
             System.out.printf("Data feed source type: %.2f%n", dataFeed.getSourceType());
             System.out.printf("Data feed creator: %.2f%n", dataFeed.getCreator());
             System.out.printf("Data feed status: %.2f%n", dataFeed.getStatus());
             System.out.printf("Data feed granularity type: %.2f%n", dataFeed.getGranularity().getGranularityType());
         });
    ```
  syntax:
    content: public PagedFlux<DataFeed> listDataFeeds(ListDataFeedOptions options)
    parameters:
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListDataFeedOptions
      description: The configurable <xref uid="com.azure.ai.metricsadvisor.models.ListDataFeedOptions" data-throw-if-not-resolved="false">options</xref> to pass for filtering the output result.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataFeed>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.DataFeed" data-throw-if-not-resolved="false">data feeds</xref> in the account.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()
  id: listHooks()
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listHooks()
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listHooks()
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks()
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of hooks on the metrics advisor account.


    **Code sample**


    ```java

    metricAdvisorAdministrationAsyncClient.listHooks()
         .subscribe(hook -> {
             if (hook instanceof EmailHook) {
                 EmailHook emailHook = (EmailHook) hook;
                 System.out.printf("Hook Id: %s%n", emailHook.getId());
                 System.out.printf("Hook Name: %s%n", emailHook.getName());
                 System.out.printf("Hook Description: %s%n", emailHook.getDescription());
                 System.out.printf("Hook External Link: %s%n", emailHook.getExternalLink());
                 System.out.printf("Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
             } else if (hook instanceof WebHook) {
                 WebHook webHook = (WebHook) hook;
                 System.out.printf("Hook Id: %s%n", webHook.getId());
                 System.out.printf("Hook Name: %s%n", webHook.getName());
                 System.out.printf("Hook Description: %s%n", webHook.getDescription());
                 System.out.printf("Hook External Link: %s%n", webHook.getExternalLink());
                 System.out.printf("Hook Endpoint: %s%n", webHook.getEndpoint());
                 System.out.printf("Hook Headers: %s%n", webHook.getHttpHeaders());
             }
         });
    ```
  syntax:
    content: public PagedFlux<Hook> listHooks()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.Hook>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of all the <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref> in the account.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions)
  id: listHooks(com.azure.ai.metricsadvisor.models.ListHookOptions)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listHooks(ListHookOptions options)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listHooks(ListHookOptions options)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks(ListHookOptions options)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    List information of hooks.


    **Code sample**


    ```java

    ListHookOptions options = new ListHookOptions()
         .setSkip(100)
         .setTop(20);
     int[] pageCount = new int[1];
     metricAdvisorAdministrationAsyncClient.listHooks(options).byPage()
         .subscribe(hookPage -> {
             System.out.printf("Page: %d%n", pageCount[0]++);
             for (Hook hook : hookPage.getElements()) {
                 if (hook instanceof EmailHook) {
                     EmailHook emailHook = (EmailHook) hook;
                     System.out.printf("Hook Id: %s%n", emailHook.getId());
                     System.out.printf("Hook Name: %s%n", emailHook.getName());
                     System.out.printf("Hook Description: %s%n", emailHook.getDescription());
                     System.out.printf("Hook External Link: %s%n", emailHook.getExternalLink());
                     System.out.printf("Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
                     System.out.printf("Hook Admins: %s%n", String.join(",", emailHook.getAdmins()));
                 } else if (hook instanceof WebHook) {
                     WebHook webHook = (WebHook) hook;
                     System.out.printf("Hook Id: %s%n", webHook.getId());
                     System.out.printf("Hook Name: %s%n", webHook.getName());
                     System.out.printf("Hook Description: %s%n", webHook.getDescription());
                     System.out.printf("Hook External Link: %s%n", webHook.getExternalLink());
                     System.out.printf("Hook Endpoint: %s%n", webHook.getEndpoint());
                     System.out.printf("Hook Headers: %s%n", webHook.getHttpHeaders());
                     System.out.printf("Hook Admins: %s%n", String.join(",", webHook.getAdmins()));
                 }
             }
         });
    ```
  syntax:
    content: public PagedFlux<Hook> listHooks(ListHookOptions options)
    parameters:
    - id: options
      type: com.azure.ai.metricsadvisor.models.ListHookOptions
      description: The additional parameters
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.Hook>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing information of the <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref> resources.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations(java.lang.String)
  id: listMetricAnomalyDetectionConfigurations(java.lang.String)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: listMetricAnomalyDetectionConfigurations(String metricId)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations(String metricId)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations(String metricId)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Given a metric id, retrieve all anomaly detection configurations applied to it.


    **Code sample**


    ```java

    final String metricId = "0b836da8-10e6-46cd-8f4f-28262e113a62";
     metricAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations(metricId)
         .subscribe(detectionConfig -> {
             System.out.printf("Detection config Id: %s%n", detectionConfig.getId());
             System.out.printf("Name: %s%n", detectionConfig.getName());
             System.out.printf("Description: %s%n", detectionConfig.getDescription());
             System.out.printf("MetricId: %s%n", detectionConfig.getMetricId());
         });
    ```
  syntax:
    content: public PagedFlux<AnomalyDetectionConfiguration> listMetricAnomalyDetectionConfigurations(String metricId)
    parameters:
    - id: metricId
      type: java.lang.String
      description: The metric id.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: The anomaly detection configurations.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: refreshDataFeedIngestion(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Refresh data ingestion for a period.


    The data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-01-01T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-03-03T00:00:00Z");
     metricAdvisorAdministrationAsyncClient.refreshDataFeedIngestion(dataFeedId,
         startTime,
         endTime).subscribe();
    ```
  syntax:
    content: public Mono<Void> refreshDataFeedIngestion(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start point of the period.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end point of of the period.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> indicating ingestion reset success or failure.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: refreshDataFeedIngestionWithResponse(java.lang.String,java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Refresh data ingestion for a period.


    The data in the data source for the given period will be reingested and any ingested data for the same period will be overwritten.


    **Code sample**


    ```java

    final String dataFeedId = "4957a2f7-a0f4-4fc0-b8d7-d866c1df0f4c";
     final OffsetDateTime startTime = OffsetDateTime.parse("2020-01-01T00:00:00Z");
     final OffsetDateTime endTime = OffsetDateTime.parse("2020-03-03T00:00:00Z");
     metricAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse(dataFeedId,
         startTime,
         endTime)
         .subscribe(response -> {
             System.out.printf("Response statusCode: %d%n", response.getStatusCode());
         });
    ```
  syntax:
    content: public Mono<Response<Void>> refreshDataFeedIngestionWithResponse(String dataFeedId, OffsetDateTime startTime, OffsetDateTime endTime)
    parameters:
    - id: dataFeedId
      type: java.lang.String
      description: The data feed id.
    - id: startTime
      type: java.time.OffsetDateTime
      description: The start point of the period.
    - id: endTime
      type: java.time.OffsetDateTime
      description: The end point of of the period.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> with result of reset request.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  id: updateAnomalyAlertConfiguration(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(alertConfigId)\n     .flatMap(existingAnomalyConfig -> {\n         return metricAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration(\n             existingAnomalyConfig\n                 .addIdOfHookToAlert(additionalHookId)\n                 .setDescription(\"updated to add more hook ids\"));\n     }).subscribe(updateAnomalyAlertConfiguration -> {\n         System.out.printf(\"Updated anomaly alert configuration Id: %s%n\",\n             updateAnomalyAlertConfiguration.getId());\n         System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n             updateAnomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Updated anomaly alert configuration hook ids: %.2f%n\",\n             updateAnomalyAlertConfiguration.getIdOfHooksToAlert());\n     });\n```"
  syntax:
    content: public Mono<AnomalyAlertConfiguration> updateAnomalyAlertConfiguration(AnomalyAlertConfiguration alertConfiguration)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alert configuration to update.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> that was updated.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  id: updateAnomalyAlertConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update anomaly alert configuration.\n\n**Code sample**\n\n```java\nString alertConfigId = \"1p0f8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n String additionalHookId = \"2gh8er30-6e6e-4391-b78f-bpfdfee1e6f5\";\n \n metricAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration(alertConfigId)\n     .flatMap(existingAnomalyConfig -> {\n         return metricAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse(\n             existingAnomalyConfig\n                 .addIdOfHookToAlert(additionalHookId)\n                 .setDescription(\"updated to add more hook ids\"));\n     }).subscribe(alertConfigurationResponse -> {\n         System.out.printf(\"Update anomaly alert operation status: %s%n\",\n             alertConfigurationResponse.getStatusCode());\n         final AnomalyAlertConfiguration updatAnomalyAlertConfiguration = alertConfigurationResponse.getValue();\n         System.out.printf(\"Updated anomaly alert configuration Id: %s%n\",\n             updatAnomalyAlertConfiguration.getId());\n         System.out.printf(\"Updated anomaly alert configuration description: %s%n\",\n             updatAnomalyAlertConfiguration.getDescription());\n         System.out.printf(\"Updated anomaly alert configuration hook ids: %.2f%n\",\n             updatAnomalyAlertConfiguration.getIdOfHooksToAlert());\n     });\n```"
  syntax:
    content: public Mono<Response<AnomalyAlertConfiguration>> updateAnomalyAlertConfigurationWithResponse(AnomalyAlertConfiguration alertConfiguration)
    parameters:
    - id: alertConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
      description: The anomaly alert configuration to update.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration" data-throw-if-not-resolved="false">AnomalyAlertConfiguration</xref> that was updated.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  id: updateDataFeed(com.azure.ai.metricsadvisor.models.DataFeed)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateDataFeed(DataFeed dataFeed)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateDataFeed(DataFeed dataFeed)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed(DataFeed dataFeed)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update an existing data feed.


    **Code sample**


    ```java

    DataFeed existingDataFeed  = new DataFeed();
     metricAdvisorAdministrationAsyncClient.updateDataFeed(
         existingDataFeed.setOptions(new DataFeedOptions().setDescription("set updated description")))
         .subscribe(dataFeed -> {
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed updated description: %s%n", dataFeed.getOptions().getDescription());
         });
    ```
  syntax:
    content: public Mono<DataFeed> updateDataFeed(DataFeed dataFeed)
    parameters:
    - id: dataFeed
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: the data feed that needs to be updated.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.DataFeed>
      description: the updated data feed.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed)
  id: updateDataFeedWithResponse(com.azure.ai.metricsadvisor.models.DataFeed)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateDataFeedWithResponse(DataFeed dataFeed)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(DataFeed dataFeed)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(DataFeed dataFeed)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update an existing data feed with REST response.


    **Code sample**


    ```java

    DataFeed existingDataFeed  = new DataFeed();
     metricAdvisorAdministrationAsyncClient.updateDataFeedWithResponse(
         existingDataFeed.setOptions(new DataFeedOptions().setDescription("set updated description")))
         .subscribe(dataFeedResponse -> {
             System.out.printf("Data feed update operation status: %s%n", dataFeedResponse.getStatusCode());
             DataFeed dataFeed = dataFeedResponse.getValue();
             System.out.printf("Data feed Id: %s%n", dataFeed.getId());
             System.out.printf("Data feed updated description: %s%n", dataFeed.getOptions().getDescription());
         });
    ```
  syntax:
    content: public Mono<Response<DataFeed>> updateDataFeedWithResponse(DataFeed dataFeed)
    parameters:
    - id: dataFeed
      type: com.azure.ai.metricsadvisor.models.DataFeed
      description: the data feed that needs to be updated.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>>
      description: the <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.DataFeed" data-throw-if-not-resolved="false">data feed</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook(com.azure.ai.metricsadvisor.models.Hook)
  id: updateHook(com.azure.ai.metricsadvisor.models.Hook)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateHook(Hook hook)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateHook(Hook hook)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook(Hook hook)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update an existing hook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricAdvisorAdministrationAsyncClient.getHook(emailHookId)
         .flatMap(hook -> {
             EmailHook emailHook = (EmailHook) hook;
             emailHook
                 .removeEmailToAlert("alertme{@literal @}alertme.com")
                 .addEmailToAlert("alertme2{@literal @}alertme.com")
                 .addEmailToAlert("alertme3{@literal @}alertme.com");
             return metricAdvisorAdministrationAsyncClient.updateHook(emailHook);
         })
         .subscribe(hook -> {
             EmailHook emailHook = (EmailHook) hook;
             System.out.printf("Hook Id: %s%n", emailHook.getId());
             System.out.printf("Hook Name: %s%n", emailHook.getName());
             System.out.printf("Hook Description: %s%n", emailHook.getDescription());
             System.out.printf("Hook External Link: %s%n", emailHook.getExternalLink());
             System.out.printf("Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
         });
    ```
  syntax:
    content: public Mono<Hook> updateHook(Hook hook)
    parameters:
    - id: hook
      type: com.azure.ai.metricsadvisor.models.Hook
      description: The hook to update.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.Hook>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(com.azure.ai.metricsadvisor.models.Hook)
  id: updateHookWithResponse(com.azure.ai.metricsadvisor.models.Hook)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateHookWithResponse(Hook hook)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(Hook hook)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse(Hook hook)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update an existing hook.


    **Code sample**


    ```java

    final String emailHookId = "f00853f1-6627-447f-bacf-8dccf2e86fed";
     metricAdvisorAdministrationAsyncClient.getHookWithResponse(emailHookId)
         .flatMap(response -> {
             EmailHook emailHook = (EmailHook) response.getValue();
             emailHook
                 .removeEmailToAlert("alertme{@literal @}alertme.com")
                 .addEmailToAlert("alertme2{@literal @}alertme.com")
                 .addEmailToAlert("alertme3{@literal @}alertme.com");
             return metricAdvisorAdministrationAsyncClient.updateHookWithResponse(emailHook);
         })
         .subscribe(response -> {
             System.out.printf("Response statusCode: %d%n", response.getStatusCode());
             EmailHook emailHook = (EmailHook) response.getValue();
             System.out.printf("Hook Id: %s%n", emailHook.getId());
             System.out.printf("Hook Name: %s%n", emailHook.getName());
             System.out.printf("Hook Description: %s%n", emailHook.getDescription());
             System.out.printf("Hook External Link: %s%n", emailHook.getExternalLink());
             System.out.printf("Hook Emails: %s%n", String.join(",", emailHook.getEmailsToAlert()));
         });
    ```
  syntax:
    content: public Mono<Response<Hook>> updateHookWithResponse(Hook hook)
    parameters:
    - id: hook
      type: com.azure.ai.metricsadvisor.models.Hook
      description: The hook to update.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.Hook>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.Hook" data-throw-if-not-resolved="false">Hook</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  id: updateMetricAnomalyDetectionConfiguration(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateMetricAnomalyDetectionConfiguration(AnomalyDetectionConfiguration detectionConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration(AnomalyDetectionConfiguration detectionConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration(AnomalyDetectionConfiguration detectionConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n metricAdvisorAdministrationAsyncClient\n     .getMetricAnomalyDetectionConfiguration(detectionConfigId)\n     .flatMap(detectionConfig -> {\n         detectionConfig.setName(\"updated config name\");\n         detectionConfig.setDescription(\"updated with more detection conditions\");\n \n         DimensionKey seriesGroupKey = new DimensionKey()\n             .put(\"city\", \"Seoul\");\n         detectionConfig.addSeriesGroupDetectionCondition(\n             new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n                 .setSmartDetectionCondition(new SmartDetectionCondition()\n                     .setSensitivity(10.0)\n                     .setAnomalyDetectorDirection(AnomalyDetectorDirection.UP)\n                     .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2))));\n         return metricAdvisorAdministrationAsyncClient\n             .updateMetricAnomalyDetectionConfiguration(detectionConfig);\n     })\n     .subscribe(updatedDetectionConfig -> {\n         System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n         System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n         System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n         System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n     });\n```"
  syntax:
    content: public Mono<AnomalyDetectionConfiguration> updateMetricAnomalyDetectionConfiguration(AnomalyDetectionConfiguration detectionConfiguration)
    parameters:
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  id: updateMetricAnomalyDetectionConfigurationWithResponse(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)
  artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
  parent: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient
  langs:
  - java
  name: updateMetricAnomalyDetectionConfigurationWithResponse(AnomalyDetectionConfiguration detectionConfiguration)
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse(AnomalyDetectionConfiguration detectionConfiguration)
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse(AnomalyDetectionConfiguration detectionConfiguration)
  overload: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse*
  type: Method
  package: com.azure.ai.metricsadvisor.administration
  summary: >-
    Update a configuration to detect anomalies in the time series of a metric.


    **Code sample**


    ```java

    final String detectionConfigId = "7b8069a1-1564-46da-9f50-b5d0dd9129ab";
     metricAdvisorAdministrationAsyncClient
         .getMetricAnomalyDetectionConfigurationWithResponse(detectionConfigId)
         .flatMap(response -> {
             AnomalyDetectionConfiguration detectionConfig = response.getValue();
             detectionConfig.setName("updated config name");
             detectionConfig.setDescription("updated with more detection conditions");
             DimensionKey seriesGroupKey = new DimensionKey()
                 .put("city", "Seoul");
             detectionConfig.addSeriesGroupDetectionCondition(
                 new MetricSeriesGroupDetectionCondition(seriesGroupKey)
                     .setSmartDetectionCondition(new SmartDetectionCondition()
                         .setSensitivity(10.0)
                         .setAnomalyDetectorDirection(AnomalyDetectorDirection.UP)
                         .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2))));
             return metricAdvisorAdministrationAsyncClient
                 .updateMetricAnomalyDetectionConfigurationWithResponse(detectionConfig);
         })
         .subscribe(response -> {
             AnomalyDetectionConfiguration updatedDetectionConfig = response.getValue();
             System.out.printf("Detection config Id: %s%n", updatedDetectionConfig.getId());
             System.out.printf("Name: %s%n", updatedDetectionConfig.getName());
             System.out.printf("Description: %s%n", updatedDetectionConfig.getDescription());
             System.out.printf("MetricId: %s%n", updatedDetectionConfig.getMetricId());
         });
    ```
  syntax:
    content: public Mono<Response<AnomalyDetectionConfiguration>> updateMetricAnomalyDetectionConfigurationWithResponse(AnomalyDetectionConfiguration detectionConfiguration)
    parameters:
    - id: detectionConfiguration
      type: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
      description: The anomaly detection configuration.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> of a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the updated <xref uid="com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration" data-throw-if-not-resolved="false">AnomalyDetectionConfiguration</xref>.
references:
- uid: com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
  name: AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
  nameWithType: AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
  fullName: com.azure.ai.metricsadvisor.implementation.AzureCognitiveServiceMetricsAdvisorRestAPIOpenAPIV2Impl
- uid: com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion
  name: MetricsAdvisorServiceVersion
  nameWithType: MetricsAdvisorServiceVersion
  fullName: com.azure.ai.metricsadvisor.models.MetricsAdvisorServiceVersion
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient*
  name: MetricsAdvisorAdministrationAsyncClient
  nameWithType: MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.MetricsAdvisorAdministrationAsyncClient
  package: com.azure.ai.metricsadvisor.administration
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.metricsadvisor.models.DataFeedSource
  name: DataFeedSource
  nameWithType: DataFeedSource
  fullName: com.azure.ai.metricsadvisor.models.DataFeedSource
- uid: com.azure.ai.metricsadvisor.models.DataFeedGranularity
  name: DataFeedGranularity
  nameWithType: DataFeedGranularity
  fullName: com.azure.ai.metricsadvisor.models.DataFeedGranularity
- uid: com.azure.ai.metricsadvisor.models.DataFeedSchema
  name: DataFeedSchema
  nameWithType: DataFeedSchema
  fullName: com.azure.ai.metricsadvisor.models.DataFeedSchema
- uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings
  name: DataFeedIngestionSettings
  nameWithType: DataFeedIngestionSettings
  fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionSettings
- uid: com.azure.ai.metricsadvisor.models.DataFeedOptions
  name: DataFeedOptions
  nameWithType: DataFeedOptions
  fullName: com.azure.ai.metricsadvisor.models.DataFeedOptions
- uid: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.DataFeed>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeed
    name: DataFeed
    fullName: com.azure.ai.metricsadvisor.models.DataFeed
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed*
  name: createDataFeed
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeed>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeed
    name: DataFeed
    fullName: com.azure.ai.metricsadvisor.models.DataFeed
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse*
  name: createDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed*
  name: getDataFeed
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse*
  name: getDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.DataFeed
  name: DataFeed
  nameWithType: DataFeed
  fullName: com.azure.ai.metricsadvisor.models.DataFeed
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed*
  name: updateDataFeed
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse*
  name: updateDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed*
  name: deleteDataFeed
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteDataFeed
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeed
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse*
  name: deleteDataFeedWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteDataFeedWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataFeed>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeed
    name: DataFeed
    fullName: com.azure.ai.metricsadvisor.models.DataFeed
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds*
  name: listDataFeeds
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listDataFeeds
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeeds
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.ListDataFeedOptions
  name: ListDataFeedOptions
  nameWithType: ListDataFeedOptions
  fullName: com.azure.ai.metricsadvisor.models.ListDataFeedOptions
- uid: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
  name: ListDataFeedIngestionOptions
  nameWithType: ListDataFeedIngestionOptions
  fullName: com.azure.ai.metricsadvisor.models.ListDataFeedIngestionOptions
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
    name: DataFeedIngestionStatus
    fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus*
  name: listDataFeedIngestionStatus
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listDataFeedIngestionStatus
  package: com.azure.ai.metricsadvisor.administration
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion*
  name: refreshDataFeedIngestion
  nameWithType: MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestion
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse*
  name: refreshDataFeedIngestionWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.refreshDataFeedIngestionWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
    name: DataFeedIngestionProgress
    fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress*
  name: getDataFeedIngestionProgress
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgress
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
    name: DataFeedIngestionProgress
    fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse*
  name: getDataFeedIngestionProgressWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getDataFeedIngestionProgressWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  name: AnomalyDetectionConfiguration
  nameWithType: AnomalyDetectionConfiguration
  fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
- uid: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    name: AnomalyDetectionConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration*
  name: createMetricAnomalyDetectionConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    name: AnomalyDetectionConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse*
  name: createMetricAnomalyDetectionConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createMetricAnomalyDetectionConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration*
  name: getMetricAnomalyDetectionConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse*
  name: getMetricAnomalyDetectionConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getMetricAnomalyDetectionConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration*
  name: updateMetricAnomalyDetectionConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse*
  name: updateMetricAnomalyDetectionConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateMetricAnomalyDetectionConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration*
  name: deleteMetricAnomalyDetectionConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse*
  name: deleteMetricAnomalyDetectionConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteMetricAnomalyDetectionConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    name: AnomalyDetectionConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations*
  name: listMetricAnomalyDetectionConfigurations
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listMetricAnomalyDetectionConfigurations
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.Hook
  name: Hook
  nameWithType: Hook
  fullName: com.azure.ai.metricsadvisor.models.Hook
- uid: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.Hook>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.Hook
    name: Hook
    fullName: com.azure.ai.metricsadvisor.models.Hook
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook*
  name: createHook
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHook
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.Hook>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.Hook
    name: Hook
    fullName: com.azure.ai.metricsadvisor.models.Hook
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse*
  name: createHookWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook*
  name: getHook
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse*
  name: getHookWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook*
  name: updateHook
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse*
  name: updateHookWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook*
  name: deleteHook
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteHook
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHook
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse*
  name: deleteHookWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteHookWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.Hook>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.Hook
    name: Hook
    fullName: com.azure.ai.metricsadvisor.models.Hook
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks*
  name: listHooks
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listHooks
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listHooks
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.models.ListHookOptions
  name: ListHookOptions
  nameWithType: ListHookOptions
  fullName: com.azure.ai.metricsadvisor.models.ListHookOptions
- uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  name: AnomalyAlertConfiguration
  nameWithType: AnomalyAlertConfiguration
  fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
- uid: reactor.core.publisher.Mono<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
    name: AnomalyAlertConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration*
  name: createAnomalyAlertConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
    name: AnomalyAlertConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse*
  name: createAnomalyAlertConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.createAnomalyAlertConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration*
  name: getAnomalyAlertConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse*
  name: getAnomalyAlertConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.getAnomalyAlertConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration*
  name: updateAnomalyAlertConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse*
  name: updateAnomalyAlertConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.updateAnomalyAlertConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration*
  name: deleteAnomalyAlertConfiguration
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfiguration
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse*
  name: deleteAnomalyAlertConfigurationWithResponse
  nameWithType: MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.deleteAnomalyAlertConfigurationWithResponse
  package: com.azure.ai.metricsadvisor.administration
- uid: com.azure.core.http.rest.PagedFlux<com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
    name: AnomalyAlertConfiguration
    fullName: com.azure.ai.metricsadvisor.models.AnomalyAlertConfiguration
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations*
  name: listAnomalyAlertConfigurations
  nameWithType: MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations
  fullName: com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationAsyncClient.listAnomalyAlertConfigurations
  package: com.azure.ai.metricsadvisor.administration
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
  name: DataFeedIngestionStatus
  nameWithType: DataFeedIngestionStatus
  fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionStatus
- uid: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
  name: DataFeedIngestionProgress
  nameWithType: DataFeedIngestionProgress
  fullName: com.azure.ai.metricsadvisor.models.DataFeedIngestionProgress
