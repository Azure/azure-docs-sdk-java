### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions"
fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions"
name: "DataLakePathCreateOptions"
nameWithType: "DataLakePathCreateOptions"
summary: "Extended options that may be passed when creating a datalake resource."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakePathCreateOptions"
constructors:
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.DataLakePathCreateOptions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.DataLakePathCreateOptions()"
  name: "DataLakePathCreateOptions()"
  nameWithType: "DataLakePathCreateOptions.DataLakePathCreateOptions()"
  summary: "Optional parameters for creating a file or directory."
  syntax: "public DataLakePathCreateOptions()"
  desc: "Optional parameters for creating a file or directory."
methods:
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getAccessControlList()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getAccessControlList()"
  name: "getAccessControlList()"
  nameWithType: "DataLakePathCreateOptions.getAccessControlList()"
  syntax: "public List<PathAccessControlEntry> getAccessControlList()"
  returns:
    description: "the POSIX access control list for the file/directory."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getGroup()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getGroup()"
  name: "getGroup()"
  nameWithType: "DataLakePathCreateOptions.getGroup()"
  syntax: "public String getGroup()"
  returns:
    description: "the name of owning group of the file/directory."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getLeaseDuration()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getLeaseDuration()"
  name: "getLeaseDuration()"
  nameWithType: "DataLakePathCreateOptions.getLeaseDuration()"
  syntax: "public Integer getLeaseDuration()"
  returns:
    description: "the lease duration in seconds."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getMetadata()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getMetadata()"
  name: "getMetadata()"
  nameWithType: "DataLakePathCreateOptions.getMetadata()"
  syntax: "public Map<String,String> getMetadata()"
  returns:
    description: "Metadata associated with the datalake path."
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getOwner()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getOwner()"
  name: "getOwner()"
  nameWithType: "DataLakePathCreateOptions.getOwner()"
  syntax: "public String getOwner()"
  returns:
    description: "the name of owner of the file/directory."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getPathHttpHeaders()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getPathHttpHeaders()"
  name: "getPathHttpHeaders()"
  nameWithType: "DataLakePathCreateOptions.getPathHttpHeaders()"
  summary: "Gets the http header properties."
  syntax: "public PathHttpHeaders getPathHttpHeaders()"
  desc: "Gets the http header properties."
  returns:
    description: "the http headers."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getPermissions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getPermissions()"
  name: "getPermissions()"
  nameWithType: "DataLakePathCreateOptions.getPermissions()"
  syntax: "public String getPermissions()"
  returns:
    description: "the permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getProposedLeaseId()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getProposedLeaseId()"
  name: "getProposedLeaseId()"
  nameWithType: "DataLakePathCreateOptions.getProposedLeaseId()"
  syntax: "public String getProposedLeaseId()"
  returns:
    description: "the proposed lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getRequestConditions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getRequestConditions()"
  name: "getRequestConditions()"
  nameWithType: "DataLakePathCreateOptions.getRequestConditions()"
  summary: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions on the creation of this file or directory."
  syntax: "public DataLakeRequestConditions getRequestConditions()"
  desc: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions on the creation of this file or directory."
  returns:
    description: "the request conditions."
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getScheduleDeletionOptions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getScheduleDeletionOptions()"
  name: "getScheduleDeletionOptions()"
  nameWithType: "DataLakePathCreateOptions.getScheduleDeletionOptions()"
  syntax: "public DataLakePathScheduleDeletionOptions getScheduleDeletionOptions()"
  returns:
    description: "the <xref uid=\"com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathScheduleDeletionOptions\"></xref> set on the path."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions?alt=com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions&text=DataLakePathScheduleDeletionOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getSourceLeaseId()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getSourceLeaseId()"
  name: "getSourceLeaseId()"
  nameWithType: "DataLakePathCreateOptions.getSourceLeaseId()"
  syntax: "public String getSourceLeaseId()"
  returns:
    description: "the source lease ID"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getUmask()"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.getUmask()"
  name: "getUmask()"
  nameWithType: "DataLakePathCreateOptions.getUmask()"
  syntax: "public String getUmask()"
  returns:
    description: "the umask."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setAccessControlList(List<PathAccessControlEntry> accessControl)"
  name: "setAccessControlList(List<PathAccessControlEntry> accessControl)"
  nameWithType: "DataLakePathCreateOptions.setAccessControlList(List<PathAccessControlEntry> accessControl)"
  summary: "Optional."
  parameters:
  - description: "The access control list."
    name: "accessControl"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public DataLakePathCreateOptions setAccessControlList(List<PathAccessControlEntry> accessControl)"
  desc: "Optional. The POSIX access control list for the file or directory."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setGroup(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setGroup(String group)"
  name: "setGroup(String group)"
  nameWithType: "DataLakePathCreateOptions.setGroup(String group)"
  summary: "Optional."
  parameters:
  - description: "the new owning group."
    name: "group"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setGroup(String group)"
  desc: "Optional. Sets the owning group of the file/directory."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setLeaseDuration(java.lang.Integer)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setLeaseDuration(Integer duration)"
  name: "setLeaseDuration(Integer duration)"
  nameWithType: "DataLakePathCreateOptions.setLeaseDuration(Integer duration)"
  summary: "Optional."
  parameters:
  - description: "the new duration."
    name: "duration"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setLeaseDuration(Integer duration)"
  desc: "Optional. Specifies the duration of the lease, in seconds, or specify -1 for a lease that never expires. A non-infinite lease can be between 15 and 60 seconds. Does not apply to directories. Sets the lease duration."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "DataLakePathCreateOptions.setMetadata(Map<String,String> metadata)"
  summary: "Optional custom metadata to set for this file or directory."
  parameters:
  - description: "Metadata to associate with the datalake path. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public DataLakePathCreateOptions setMetadata(Map<String,String> metadata)"
  desc: "Optional custom metadata to set for this file or directory."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setOwner(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setOwner(String owner)"
  name: "setOwner(String owner)"
  nameWithType: "DataLakePathCreateOptions.setOwner(String owner)"
  summary: "Optional."
  parameters:
  - description: "the new owner."
    name: "owner"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setOwner(String owner)"
  desc: "Optional. Sets the owner of the file/directory."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setPathHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setPathHttpHeaders(PathHttpHeaders headers)"
  name: "setPathHttpHeaders(PathHttpHeaders headers)"
  nameWithType: "DataLakePathCreateOptions.setPathHttpHeaders(PathHttpHeaders headers)"
  summary: "Optional standard HTTP header properties that can be set for the new file or directory."
  parameters:
  - description: "The http headers."
    name: "headers"
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setPathHttpHeaders(PathHttpHeaders headers)"
  desc: "Optional standard HTTP header properties that can be set for the new file or directory."
  returns:
    description: "the updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setPermissions(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setPermissions(String permissions)"
  name: "setPermissions(String permissions)"
  nameWithType: "DataLakePathCreateOptions.setPermissions(String permissions)"
  summary: "Sets POSIX access permissions for the file owner, the file owning group, and others."
  parameters:
  - description: "The permissions."
    name: "permissions"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setPermissions(String permissions)"
  desc: "Sets POSIX access permissions for the file owner, the file owning group, and others. Each class may be granted read, write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported."
  returns:
    description: "the updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setProposedLeaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setProposedLeaseId(String leaseId)"
  name: "setProposedLeaseId(String leaseId)"
  nameWithType: "DataLakePathCreateOptions.setProposedLeaseId(String leaseId)"
  summary: "Optional."
  parameters:
  - description: "the proposed lease ID."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setProposedLeaseId(String leaseId)"
  desc: "Optional. Sets proposed lease ID. Does not apply to directories."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setRequestConditions(com.azure.storage.file.datalake.models.DataLakeRequestConditions)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  name: "setRequestConditions(DataLakeRequestConditions requestConditions)"
  nameWithType: "DataLakePathCreateOptions.setRequestConditions(DataLakeRequestConditions requestConditions)"
  summary: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions on the creation of this file or directory."
  parameters:
  - description: "The request conditions."
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setRequestConditions(DataLakeRequestConditions requestConditions)"
  desc: "Optional <xref uid=\"com.azure.storage.file.datalake.models.DataLakeRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeRequestConditions\"></xref> conditions on the creation of this file or directory. Sets the request conditions."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setScheduleDeletionOptions(com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setScheduleDeletionOptions(DataLakePathScheduleDeletionOptions deletionOptions)"
  name: "setScheduleDeletionOptions(DataLakePathScheduleDeletionOptions deletionOptions)"
  nameWithType: "DataLakePathCreateOptions.setScheduleDeletionOptions(DataLakePathScheduleDeletionOptions deletionOptions)"
  summary: "Scheduled deletion options to set on the path."
  parameters:
  - description: "the <xref uid=\"com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakePathScheduleDeletionOptions\"></xref> to set."
    name: "deletionOptions"
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions?alt=com.azure.storage.file.datalake.options.DataLakePathScheduleDeletionOptions&text=DataLakePathScheduleDeletionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setScheduleDeletionOptions(DataLakePathScheduleDeletionOptions deletionOptions)"
  desc: "Scheduled deletion options to set on the path."
  returns:
    description: "the updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setSourceLeaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setSourceLeaseId(String leaseId)"
  name: "setSourceLeaseId(String leaseId)"
  nameWithType: "DataLakePathCreateOptions.setSourceLeaseId(String leaseId)"
  summary: "Sets the source lease ID."
  parameters:
  - description: "the source lease ID."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setSourceLeaseId(String leaseId)"
  desc: "Sets the source lease ID."
  returns:
    description: "The updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setUmask(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakePathCreateOptions.setUmask(String umask)"
  name: "setUmask(String umask)"
  nameWithType: "DataLakePathCreateOptions.setUmask(String umask)"
  summary: "When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created."
  parameters:
  - description: "The umask."
    name: "umask"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathCreateOptions setUmask(String umask)"
  desc: "When creating a file or directory and the parent folder does not have a default ACL, the umask restricts the permissions of the file or directory to be created. The resulting permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example, if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is 0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified in 4-digit octal notation (e.g. 0766)."
  returns:
    description: "the updated options."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakePathCreateOptions?alt=com.azure.storage.file.datalake.options.DataLakePathCreateOptions&text=DataLakePathCreateOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Extended options that may be passed when creating a datalake resource."
metadata: {}
package: "com.azure.storage.file.datalake.options"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
