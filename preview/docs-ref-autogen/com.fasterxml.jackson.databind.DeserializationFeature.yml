### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.databind.DeserializationFeature"
fullName: "com.fasterxml.jackson.databind.DeserializationFeature"
name: "DeserializationFeature"
nameWithType: "DeserializationFeature"
summary: "Enumeration that defines simple on/off features that affect the way Java objects are deserialized from JSON\n\nNote that features can be set both through <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> (as sort of defaults) and through <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref>. In first case these defaults must follow \"config-then-use\" patterns (i.e. defined once, not changed afterwards); all per-call changes must be done using <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref>.\n\nNote that features that do not indicate version of inclusion were available in Jackson 2.0 (or earlier); only later additions indicate version of inclusion."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum DeserializationFeature extends Enum<DeserializationFeature> implements ConfigFeature"
fields:
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT"
  name: "ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT"
  nameWithType: "DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT"
  summary: "Feature that can be enabled to allow empty JSON Array value (that is, `[ ]`) to be bound to POJOs (and with 2.9, other values too) as \\`null\\`. If disabled, standard POJOs can only be bound from JSON \\`null\\` or JSON Object (standard meaning that no custom deserializers or constructors are defined; both of which can add support for other kinds of JSON values); if enabled, empty JSON Array will be taken to be equivalent of JSON null.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
  name: "ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
  nameWithType: "DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT"
  summary: "Feature that can be enabled to allow JSON empty String value (\"\") to be bound as \\`null\\` for POJOs and other structured values (<xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>s, <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s). If disabled, standard POJOs can only be bound from JSON \\`null\\` or JSON Object (standard meaning that no custom deserializers or constructors are defined; both of which can add support for other kinds of JSON values); if enabled, empty JSON String can be taken to be equivalent of JSON null.\n\nNOTE: this does NOT apply to scalar values such as booleans and numbers; whether they can be coerced depends on <xref uid=\"com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapperFeature#ALLOW_COERCION_OF_SCALARS\"></xref>.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_FLOAT_AS_INT"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_FLOAT_AS_INT"
  name: "ACCEPT_FLOAT_AS_INT"
  nameWithType: "DeserializationFeature.ACCEPT_FLOAT_AS_INT"
  summary: "Feature that determines whether coercion from JSON floating point number (anything with command (\\`.\\`) or exponent portion (\\`e\\` / \\`E')) to an expected integral number (\\`int\\`, \\`long\\`, \\`java.lang.Integer\\`, \\`java.lang.Long\\`, \\`java.math.BigDecimal\\`) is allowed or not. If enabled, coercion truncates value; if disabled, a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> will be thrown.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
  name: "ACCEPT_SINGLE_VALUE_AS_ARRAY"
  nameWithType: "DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY"
  summary: "Feature that determines whether it is acceptable to coerce non-array (in JSON) values to work with Java collection (arrays, java.util.Collection) types. If enabled, collection deserializers will try to handle non-array values as if they had \"implicit\" surrounding JSON array. This feature is meant to be used for compatibility/interoperability reasons, to work with packages (such as XML-to-JSON converters) that leave out JSON array in cases where there is just a single element in array.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  name: "ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  nameWithType: "DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE"
  summary: "Feature that specifies whether context provided <xref uid=\"java.util.TimeZone\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.TimeZone\"></xref> (<xref uid=\"com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationContext#getTimeZone()\"></xref> should be used to adjust Date/Time values on deserialization, even if value itself contains timezone information. If enabled, contextual `TimeZone` will essentially override any other TimeZone information; if disabled, it will only be used if value itself does not contain any TimeZone information.\n\nNote that exact behavior depends on date/time types in question; and specifically JDK type of <xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref> does NOT have in-built timezone information so this setting has no effect. Further, while <xref uid=\"java.util.Calendar\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Calendar\"></xref> does have this information basic JDK <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.text.SimpleDateFormat\"></xref> is unable to retain parsed zone information, and as a result, <xref uid=\"java.util.Calendar\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Calendar\"></xref> will always get context timezone adjustment regardless of this setting.\n\nTaking above into account, this feature is supported only by extension modules for Joda and Java 8 date/tyime datatypes."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH"
  name: "EAGER_DESERIALIZER_FETCH"
  nameWithType: "DeserializationFeature.EAGER_DESERIALIZER_FETCH"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref> should try to eagerly fetch necessary <xref uid=\"com.fasterxml.jackson.databind.JsonDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonDeserializer\"></xref> when possible. This improves performance in cases where similarly configured <xref uid=\"com.fasterxml.jackson.databind.ObjectReader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectReader\"></xref> instance is used multiple times; and should not significantly affect single-use cases.\n\nNote that there should not be any need to normally disable this feature: only consider that if there are actual perceived problems.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES"
  name: "FAIL_ON_IGNORED_PROPERTIES"
  nameWithType: "DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES"
  summary: "Feature that determines what happens when a property that has been explicitly marked as ignorable is encountered in input: if feature is enabled, <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> is thrown; if false, property is quietly skipped.\n\nFeature is disabled by default so that no exception is thrown."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_INVALID_SUBTYPE"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_INVALID_SUBTYPE"
  name: "FAIL_ON_INVALID_SUBTYPE"
  nameWithType: "DeserializationFeature.FAIL_ON_INVALID_SUBTYPE"
  summary: "Feature that determines what happens when type of a polymorphic value (indicated for example by <xref uid=\"com.fasterxml.jackson.annotation.JsonTypeInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonTypeInfo\"></xref>) cannot be found (missing) or resolved (invalid class name, unmappable id); if enabled, an exception ir thrown; if false, null value is used instead.\n\nFeature is enabled by default so that exception is thrown for missing or invalid type information."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES"
  name: "FAIL_ON_MISSING_CREATOR_PROPERTIES"
  nameWithType: "DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES"
  summary: "Feature that determines what happens if one or more Creator properties (properties bound to parameters of Creator method (constructor or static factory method)) are missing value to bind to from content. If enabled, such missing values result in a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> being thrown with information on the first one (by index) of missing properties. If disabled, and if property is NOT marked as required, missing Creator properties are filled with `null values` provided by deserializer for the type of parameter (usually null for Object types, and default value for primitives; but redefinable via custom deserializers).\n\nNote that having an injectable value counts as \"not missing\".\n\nFeature is disabled by default, so that no exception is thrown for missing creator property values, unless they are explicitly marked as \\`required\\`."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY"
  name: "FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY"
  nameWithType: "DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY"
  summary: "Feature that determines what happens when a property annotated with <xref uid=\"com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY\"></xref> is missing, but associated type id is available. If enabled, <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> is always thrown when property value is missing (if type id does exist); if disabled, exception is only thrown if property is marked as \\`required\\`.\n\nFeature is enabled by default, so that exception is thrown when a subtype property is missing."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES"
  name: "FAIL_ON_NULL_CREATOR_PROPERTIES"
  nameWithType: "DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES"
  summary: "Feature that determines what happens if one or more Creator properties (properties bound to parameters of Creator method (constructor or static factory method)) are bound to null values - either from the JSON or as a default value. This is useful if you want to avoid nulls in your codebase, and particularly useful if you are using Java or Scala optionals for non-mandatory fields. Feature is disabled by default, so that no exception is thrown for missing creator property values, unless they are explicitly marked as \\`required\\`."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES"
  name: "FAIL_ON_NULL_FOR_PRIMITIVES"
  nameWithType: "DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES"
  summary: "Feature that determines whether encountering of JSON null is an error when deserializing into Java primitive types (like 'int' or 'double'). If it is, a JsonProcessingException is thrown to indicate this; if not, default value is used (0 for 'int', 0.0 for double, same defaulting as what JVM uses).\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS"
  name: "FAIL_ON_NUMBERS_FOR_ENUMS"
  nameWithType: "DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS"
  summary: "Feature that determines whether JSON integer numbers are valid values to be used for deserializing Java enum values. If set to 'false' numbers are acceptable and are used to map to ordinal() of matching enumeration value; if 'true', numbers are not allowed and a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> will be thrown. Latter behavior makes sense if there is concern that accidental mapping from integer values to enums might happen (and when enums are always serialized as JSON Strings)\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY"
  name: "FAIL_ON_READING_DUP_TREE_KEY"
  nameWithType: "DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY"
  summary: "Feature that determines what happens when reading JSON content into tree (<xref uid=\"com.fasterxml.jackson.core.TreeNode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.TreeNode\"></xref>) and a duplicate key is encountered (property name that was already seen for the JSON Object). If enabled, <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> will be thrown; if disabled, no exception is thrown and the new (later) value overwrites the earlier value.\n\nNote that this property does NOT affect other aspects of data-binding; that is, no detection is done with respect to POJO properties or <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> keys. New features may be added to control additional cases.\n\nFeature is disabled by default so that no exception is thrown."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS"
  name: "FAIL_ON_TRAILING_TOKENS"
  nameWithType: "DeserializationFeature.FAIL_ON_TRAILING_TOKENS"
  summary: "Feature that determines behaviour for data-binding after binding the root value. If feature is enabled, one more call to <xref uid=\"com.fasterxml.jackson.core.JsonParser.nextToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonParser#nextToken\"></xref> is made to ensure that no more tokens are found (and if any is found, <xref uid=\"com.fasterxml.jackson.databind.exc.MismatchedInputException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.exc.MismatchedInputException\"></xref> is thrown); if disabled, no further checks are made.\n\nFeature could alternatively be called `READ_FULL_STREAM`, since it effectively verifies that input stream contains only as much data as is needed for binding the full value, and nothing more (except for possible ignorable white space or comments, if supported by data format).\n\nFeature is disabled by default (so that no check is made for possible trailing token(s)) for backwards compatibility reasons."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES"
  name: "FAIL_ON_UNKNOWN_PROPERTIES"
  nameWithType: "DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES"
  summary: "Feature that determines whether encountering of unknown properties (ones that do not map to a property, and there is no \"any setter\" or handler that can handle it) should result in a failure (by throwing a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref>) or not. This setting only takes effect after all other handling methods for unknown properties have been tried, and property remains unhandled.\n\nFeature is enabled by default (meaning that a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> will be thrown if an unknown property is encountered)."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS"
  name: "FAIL_ON_UNRESOLVED_OBJECT_IDS"
  nameWithType: "DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS"
  summary: "Feature that determines what happens if an Object Id reference is encountered that does not refer to an actual Object with that id (\"unresolved Object Id\"): either an exception is thrown (`true`), or a null object is used instead (`false`). Note that if this is set to `false`, no further processing is done; specifically, if reference is defined via setter method, that method will NOT be called.\n\nFeature is enabled by default, so that unknown Object Ids will result in an exception being thrown, at the end of deserialization."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS"
  name: "READ_DATE_TIMESTAMPS_AS_NANOSECONDS"
  nameWithType: "DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS"
  summary: "Feature that controls whether numeric timestamp values are expected to be written using nanosecond timestamps (enabled) or not (disabled), **if and only if** datatype supports such resolution. Only newer datatypes (such as Java8 Date/Time) support such resolution -- older types (pre-Java8 **java.util.Date** etc) and Joda do not -- and this setting **has no effect** on such types.\n\nIf disabled, standard millisecond timestamps are assumed. This is the counterpart to <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS\"></xref>.\n\nFeature is enabled by default, to support most accurate time values possible."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING"
  name: "READ_ENUMS_USING_TO_STRING"
  nameWithType: "DeserializationFeature.READ_ENUMS_USING_TO_STRING"
  summary: "Feature that determines standard deserialization mechanism used for Enum values: if enabled, Enums are assumed to have been serialized using return value of `Enum.toString()`; if disabled, return value of `Enum.name()` is assumed to have been used.\n\nNote: this feature should usually have same value as <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializationFeature#WRITE_ENUMS_USING_TO_STRING\"></xref>.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL"
  name: "READ_UNKNOWN_ENUM_VALUES_AS_NULL"
  nameWithType: "DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL"
  summary: "Feature that allows unknown Enum values to be parsed as null values. If disabled, unknown Enum values will throw exceptions.\n\nNote that in some cases this will basically ignore unknown Enum values; this is the keys for keys of <xref uid=\"java.util.EnumMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.EnumMap\"></xref> and values of <xref uid=\"java.util.EnumSet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.EnumSet\"></xref> (because nulls are not accepted in these cases).\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE"
  name: "READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE"
  nameWithType: "DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE"
  summary: "Feature that allows unknown Enum values to be ignored and a predefined value specified through <xref uid=\"com.fasterxml.jackson.annotation.JsonEnumDefaultValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"@JsonEnumDefaultValue\"></xref> annotation. If disabled, unknown Enum values will throw exceptions. If enabled, but no predefined default Enum value is specified, an exception will be thrown as well.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_ROOT_VALUE"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_ROOT_VALUE"
  name: "UNWRAP_ROOT_VALUE"
  nameWithType: "DeserializationFeature.UNWRAP_ROOT_VALUE"
  summary: "Feature to allow \"unwrapping\" root-level JSON value, to match setting of <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializationFeature#WRAP_ROOT_VALUE\"></xref> used for serialization. Will verify that the root JSON value is a JSON Object, and that it has a single property with expected root name. If not, a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> is thrown; otherwise value of the wrapped property will be deserialized as if it was the root value.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS"
  name: "UNWRAP_SINGLE_VALUE_ARRAYS"
  nameWithType: "DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS"
  summary: "Feature that determines whether it is acceptable to coerce single value array (in JSON) values to the corresponding value type. This is basically the opposite of the <xref uid=\"com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#ACCEPT_SINGLE_VALUE_AS_ARRAY\"></xref> feature. If more than one value is found in the array, a JsonMappingException is thrown.\n\nFeature is disabled by default"
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS"
  name: "USE_BIG_DECIMAL_FOR_FLOATS"
  nameWithType: "DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS"
  summary: "Feature that determines whether JSON floating point numbers are to be deserialized into <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref>s if only generic type description (either <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Number\"></xref>, or within untyped <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> or <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> context) is available. If enabled such values will be deserialized as <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref>s; if disabled, will be deserialized as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Double\"></xref>s.\n\nNOTE: one aspect of <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref> handling that may need configuring is whether trailing zeroes are trimmed: <xref uid=\"com.fasterxml.jackson.databind.node.JsonNodeFactory\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.node.JsonNodeFactory\"></xref> has <xref uid=\"com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.node.JsonNodeFactory#withExactBigDecimals\"></xref> for changing default behavior (default is for trailing zeroes to be trimmed).\n\nFeature is disabled by default, meaning that \"untyped\" floating point numbers will by default be deserialized as <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Double\"></xref>s (choice is for performance reason -- BigDecimals are slower than Doubles)."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS"
  name: "USE_BIG_INTEGER_FOR_INTS"
  nameWithType: "DeserializationFeature.USE_BIG_INTEGER_FOR_INTS"
  summary: "Feature that determines whether JSON integral (non-floating-point) numbers are to be deserialized into <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigInteger\"></xref>s if only generic type description (either <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Number\"></xref>, or within untyped <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> or <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> context) is available. If enabled such values will be deserialized as <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigInteger\"></xref>s; if disabled, will be deserialized as \"smallest\" available type, which is either <xref uid=\"java.lang.Integer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer\"></xref>, <xref uid=\"java.lang.Long\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Long\"></xref> or <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigInteger\"></xref>, depending on number of digits.\n\nFeature is disabled by default, meaning that \"untyped\" integral numbers will by default be deserialized using whatever is the most compact integral type, to optimize efficiency."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY"
  name: "USE_JAVA_ARRAY_FOR_JSON_ARRAY"
  nameWithType: "DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY"
  summary: "Feature that determines whether JSON Array is mapped to `Object[]` or `List when binding \"untyped\" objects (ones with nominal type of java.lang.Object). If true, binds as Object[]; if false, as List. Feature is disabled by default, meaning that JSON arrays are bound as s.`"
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.USE_LONG_FOR_INTS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.USE_LONG_FOR_INTS"
  name: "USE_LONG_FOR_INTS"
  nameWithType: "DeserializationFeature.USE_LONG_FOR_INTS"
  summary: "Feature that determines how \"small\" JSON integral (non-floating-point) numbers -- ones that fit in 32-bit signed integer (\\`int\\`) -- are bound when target type is loosely typed as <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Number\"></xref> (or within untyped <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> or <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> context). If enabled, such values will be deserialized as <xref uid=\"java.lang.Long\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Long\"></xref>; if disabled, they will be deserialized as \"smallest\" available type, <xref uid=\"java.lang.Integer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer\"></xref>. In addition, if enabled, trying to bind values that do not fit in <xref uid=\"java.lang.Long\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Long\"></xref> will throw a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonProcessingException\"></xref>.\n\nNote: if <xref uid=\"com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#USE_BIG_INTEGER_FOR_INTS\"></xref> is enabled, it has precedence over this setting, forcing use of <xref uid=\"java.math.BigInteger\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigInteger\"></xref> for all integral values.\n\nFeature is disabled by default, meaning that \"untyped\" integral numbers will by default be deserialized using <xref uid=\"java.lang.Integer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Integer\"></xref> if value fits."
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.WRAP_EXCEPTIONS"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.WRAP_EXCEPTIONS"
  name: "WRAP_EXCEPTIONS"
  nameWithType: "DeserializationFeature.WRAP_EXCEPTIONS"
  summary: "Feature that determines whether Jackson code should catch and wrap <xref uid=\"java.lang.Exception\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Exception\"></xref>s (but never <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Error\"></xref>s!) to add additional information about location (within input) of problem or not. If enabled, most exceptions will be caught and re-thrown (exception specifically being that <xref uid=\"java.io.IOException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.IOException\"></xref>s may be passed as is, since they are declared as throwable); this can be convenient both in that all exceptions will be checked and declared, and so there is more contextual information. However, sometimes calling application may just want \"raw\" unchecked exceptions passed as is.\n\nFeature is enabled by default."
methods:
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "DeserializationFeature.enabledByDefault()"
  summary: "Accessor for checking whether this feature is enabled by default."
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "DeserializationFeature.enabledIn(int flags)"
  summary: "Convenience method for checking whether feature is enabled in given bitmask"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.getMask()"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.getMask()"
  name: "getMask()"
  nameWithType: "DeserializationFeature.getMask()"
  summary: "Returns bit mask for this feature instance"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "DeserializationFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static DeserializationFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationFeature?alt=com.fasterxml.jackson.databind.DeserializationFeature&text=DeserializationFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.DeserializationFeature.values()"
  fullName: "com.fasterxml.jackson.databind.DeserializationFeature.values()"
  name: "values()"
  nameWithType: "DeserializationFeature.values()"
  syntax: "public static DeserializationFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.DeserializationFeature?alt=com.fasterxml.jackson.databind.DeserializationFeature&text=DeserializationFeature\" data-throw-if-not-resolved=\"False\" />[]"
implements:
- "<xref href=\"com.fasterxml.jackson.databind.cfg.ConfigFeature?alt=com.fasterxml.jackson.databind.cfg.ConfigFeature&text=ConfigFeature\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
