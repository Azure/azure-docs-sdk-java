### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.DeserializationFeature
  id: DeserializationFeature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
  - com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
  - com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_FLOAT_AS_INT
  - com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  - com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  - com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_INVALID_SUBTYPE
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES
  - com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS
  - com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS
  - com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING
  - com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL
  - com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
  - com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_ROOT_VALUE
  - com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS
  - com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS
  - com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS
  - com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY
  - com.fasterxml.jackson.databind.DeserializationFeature.USE_LONG_FOR_INTS
  - com.fasterxml.jackson.databind.DeserializationFeature.WRAP_EXCEPTIONS
  - com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()
  - com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int)
  - com.fasterxml.jackson.databind.DeserializationFeature.getMask()
  - com.fasterxml.jackson.databind.DeserializationFeature.valueOf(java.lang.String)
  - com.fasterxml.jackson.databind.DeserializationFeature.values()
  langs:
  - java
  name: DeserializationFeature
  nameWithType: DeserializationFeature
  fullName: com.fasterxml.jackson.databind.DeserializationFeature
  type: Enum
  package: com.fasterxml.jackson.databind
  summary: >-
    Enumeration that defines simple on/off features that affect the way Java objects are deserialized from JSON


    Note that features can be set both through <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> (as sort of defaults) and through <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>. In first case these defaults must follow "config-then-use" patterns (i.e. defined once, not changed afterwards); all per-call changes must be done using <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref>.


    Note that features that do not indicate version of inclusion were available in Jackson 2.0 (or earlier); only later additions indicate version of inclusion.
  syntax:
    content: public enum DeserializationFeature extends Enum<DeserializationFeature> implements ConfigFeature
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  implements:
  - com.fasterxml.jackson.databind.cfg.ConfigFeature
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
  id: ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
  nameWithType: DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that can be enabled to allow empty JSON Array value (that is, `[ ]`) to be bound to POJOs (and with 2.9, other values too) as \`null\`. If disabled, standard POJOs can only be bound from JSON \`null\` or JSON Object (standard meaning that no custom deserializers or constructors are defined; both of which can add support for other kinds of JSON values); if enabled, empty JSON Array will be taken to be equivalent of JSON null.


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
  id: ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
  nameWithType: DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that can be enabled to allow JSON empty String value ("") to be bound as \`null\` for POJOs and other structured values (<xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>s, <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s). If disabled, standard POJOs can only be bound from JSON \`null\` or JSON Object (standard meaning that no custom deserializers or constructors are defined; both of which can add support for other kinds of JSON values); if enabled, empty JSON String can be taken to be equivalent of JSON null.


    NOTE: this does NOT apply to scalar values such as booleans and numbers; whether they can be coerced depends on <xref uid="com.fasterxml.jackson.databind.MapperFeature.ALLOW_COERCION_OF_SCALARS" data-throw-if-not-resolved="false">MapperFeature#ALLOW_COERCION_OF_SCALARS</xref>.


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature ACCEPT_EMPTY_STRING_AS_NULL_OBJECT
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_FLOAT_AS_INT
  id: ACCEPT_FLOAT_AS_INT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: ACCEPT_FLOAT_AS_INT
  nameWithType: DeserializationFeature.ACCEPT_FLOAT_AS_INT
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_FLOAT_AS_INT
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether coercion from JSON floating point number (anything with command (\`.\`) or exponent portion (\`e\` / \`E')) to an expected integral number (\`int\`, \`long\`, \`java.lang.Integer\`, \`java.lang.Long\`, \`java.math.BigDecimal\`) is allowed or not. If enabled, coercion truncates value; if disabled, a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> will be thrown.


    Feature is enabled by default.
  syntax:
    content: public static final DeserializationFeature ACCEPT_FLOAT_AS_INT
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  id: ACCEPT_SINGLE_VALUE_AS_ARRAY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: ACCEPT_SINGLE_VALUE_AS_ARRAY
  nameWithType: DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether it is acceptable to coerce non-array (in JSON) values to work with Java collection (arrays, java.util.Collection) types. If enabled, collection deserializers will try to handle non-array values as if they had "implicit" surrounding JSON array. This feature is meant to be used for compatibility/interoperability reasons, to work with packages (such as XML-to-JSON converters) that leave out JSON array in cases where there is just a single element in array.


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature ACCEPT_SINGLE_VALUE_AS_ARRAY
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  id: ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  nameWithType: DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that specifies whether context provided <xref uid="java.util.TimeZone" data-throw-if-not-resolved="false">java.util.TimeZone</xref> (<xref uid="com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()" data-throw-if-not-resolved="false">DeserializationContext#getTimeZone()</xref> should be used to adjust Date/Time values on deserialization, even if value itself contains timezone information. If enabled, contextual `TimeZone` will essentially override any other TimeZone information; if disabled, it will only be used if value itself does not contain any TimeZone information.


    Note that exact behavior depends on date/time types in question; and specifically JDK type of <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref> does NOT have in-built timezone information so this setting has no effect. Further, while <xref uid="java.util.Calendar" data-throw-if-not-resolved="false">java.util.Calendar</xref> does have this information basic JDK <xref uid="" data-throw-if-not-resolved="false">java.text.SimpleDateFormat</xref> is unable to retain parsed zone information, and as a result, <xref uid="java.util.Calendar" data-throw-if-not-resolved="false">java.util.Calendar</xref> will always get context timezone adjustment regardless of this setting.


    Taking above into account, this feature is supported only by extension modules for Joda and Java 8 date/tyime datatypes.
  syntax:
    content: public static final DeserializationFeature ADJUST_DATES_TO_CONTEXT_TIME_ZONE
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean)
  id: DeserializationFeature(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: DeserializationFeature(boolean defaultState)
  nameWithType: DeserializationFeature.DeserializationFeature(boolean defaultState)
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean defaultState)
  overload: com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: private DeserializationFeature(boolean defaultState)
    parameters:
    - id: defaultState
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH
  id: EAGER_DESERIALIZER_FETCH
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: EAGER_DESERIALIZER_FETCH
  nameWithType: DeserializationFeature.EAGER_DESERIALIZER_FETCH
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.EAGER_DESERIALIZER_FETCH
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> should try to eagerly fetch necessary <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref> when possible. This improves performance in cases where similarly configured <xref uid="com.fasterxml.jackson.databind.ObjectReader" data-throw-if-not-resolved="false">ObjectReader</xref> instance is used multiple times; and should not significantly affect single-use cases.


    Note that there should not be any need to normally disable this feature: only consider that if there are actual perceived problems.


    Feature is enabled by default.
  syntax:
    content: public static final DeserializationFeature EAGER_DESERIALIZER_FETCH
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES
  id: FAIL_ON_IGNORED_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_IGNORED_PROPERTIES
  nameWithType: DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when a property that has been explicitly marked as ignorable is encountered in input: if feature is enabled, <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> is thrown; if false, property is quietly skipped.


    Feature is disabled by default so that no exception is thrown.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_IGNORED_PROPERTIES
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_INVALID_SUBTYPE
  id: FAIL_ON_INVALID_SUBTYPE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_INVALID_SUBTYPE
  nameWithType: DeserializationFeature.FAIL_ON_INVALID_SUBTYPE
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_INVALID_SUBTYPE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when type of a polymorphic value (indicated for example by <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo</xref>) cannot be found (missing) or resolved (invalid class name, unmappable id); if enabled, an exception ir thrown; if false, null value is used instead.


    Feature is enabled by default so that exception is thrown for missing or invalid type information.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_INVALID_SUBTYPE
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES
  id: FAIL_ON_MISSING_CREATOR_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_MISSING_CREATOR_PROPERTIES
  nameWithType: DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_CREATOR_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens if one or more Creator properties (properties bound to parameters of Creator method (constructor or static factory method)) are missing value to bind to from content. If enabled, such missing values result in a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> being thrown with information on the first one (by index) of missing properties. If disabled, and if property is NOT marked as required, missing Creator properties are filled with `null values` provided by deserializer for the type of parameter (usually null for Object types, and default value for primitives; but redefinable via custom deserializers).


    Note that having an injectable value counts as "not missing".


    Feature is disabled by default, so that no exception is thrown for missing creator property values, unless they are explicitly marked as \`required\`.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_MISSING_CREATOR_PROPERTIES
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
  id: FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
  nameWithType: DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when a property annotated with <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo.As.EXTERNAL_PROPERTY" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonTypeInfo.As#EXTERNAL_PROPERTY</xref> is missing, but associated type id is available. If enabled, <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> is always thrown when property value is missing (if type id does exist); if disabled, exception is only thrown if property is marked as \`required\`.


    Feature is enabled by default, so that exception is thrown when a subtype property is missing.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES
  id: FAIL_ON_NULL_CREATOR_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_NULL_CREATOR_PROPERTIES
  nameWithType: DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_CREATOR_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Feature that determines what happens if one or more Creator properties (properties bound to parameters of Creator method (constructor or static factory method)) are bound to null values - either from the JSON or as a default value. This is useful if you want to avoid nulls in your codebase, and particularly useful if you are using Java or Scala optionals for non-mandatory fields. Feature is disabled by default, so that no exception is thrown for missing creator property values, unless they are explicitly marked as \`required\`.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_NULL_CREATOR_PROPERTIES
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES
  id: FAIL_ON_NULL_FOR_PRIMITIVES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_NULL_FOR_PRIMITIVES
  nameWithType: DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether encountering of JSON null is an error when deserializing into Java primitive types (like 'int' or 'double'). If it is, a JsonProcessingException is thrown to indicate this; if not, default value is used (0 for 'int', 0.0 for double, same defaulting as what JVM uses).


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_NULL_FOR_PRIMITIVES
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS
  id: FAIL_ON_NUMBERS_FOR_ENUMS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_NUMBERS_FOR_ENUMS
  nameWithType: DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether JSON integer numbers are valid values to be used for deserializing Java enum values. If set to 'false' numbers are acceptable and are used to map to ordinal() of matching enumeration value; if 'true', numbers are not allowed and a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> will be thrown. Latter behavior makes sense if there is concern that accidental mapping from integer values to enums might happen (and when enums are always serialized as JSON Strings)


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_NUMBERS_FOR_ENUMS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY
  id: FAIL_ON_READING_DUP_TREE_KEY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_READING_DUP_TREE_KEY
  nameWithType: DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_READING_DUP_TREE_KEY
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when reading JSON content into tree (<xref uid="com.fasterxml.jackson.core.TreeNode" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.TreeNode</xref>) and a duplicate key is encountered (property name that was already seen for the JSON Object). If enabled, <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> will be thrown; if disabled, no exception is thrown and the new (later) value overwrites the earlier value.


    Note that this property does NOT affect other aspects of data-binding; that is, no detection is done with respect to POJO properties or <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys. New features may be added to control additional cases.


    Feature is disabled by default so that no exception is thrown.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_READING_DUP_TREE_KEY
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS
  id: FAIL_ON_TRAILING_TOKENS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_TRAILING_TOKENS
  nameWithType: DeserializationFeature.FAIL_ON_TRAILING_TOKENS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_TRAILING_TOKENS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines behaviour for data-binding after binding the root value. If feature is enabled, one more call to <xref uid="com.fasterxml.jackson.core.JsonParser.nextToken" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser#nextToken</xref> is made to ensure that no more tokens are found (and if any is found, <xref uid="com.fasterxml.jackson.databind.exc.MismatchedInputException" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.exc.MismatchedInputException</xref> is thrown); if disabled, no further checks are made.


    Feature could alternatively be called `READ_FULL_STREAM`, since it effectively verifies that input stream contains only as much data as is needed for binding the full value, and nothing more (except for possible ignorable white space or comments, if supported by data format).


    Feature is disabled by default (so that no check is made for possible trailing token(s)) for backwards compatibility reasons.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_TRAILING_TOKENS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES
  id: FAIL_ON_UNKNOWN_PROPERTIES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_UNKNOWN_PROPERTIES
  nameWithType: DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether encountering of unknown properties (ones that do not map to a property, and there is no "any setter" or handler that can handle it) should result in a failure (by throwing a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref>) or not. This setting only takes effect after all other handling methods for unknown properties have been tried, and property remains unhandled.


    Feature is enabled by default (meaning that a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> will be thrown if an unknown property is encountered).
  syntax:
    content: public static final DeserializationFeature FAIL_ON_UNKNOWN_PROPERTIES
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS
  id: FAIL_ON_UNRESOLVED_OBJECT_IDS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: FAIL_ON_UNRESOLVED_OBJECT_IDS
  nameWithType: DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens if an Object Id reference is encountered that does not refer to an actual Object with that id ("unresolved Object Id"): either an exception is thrown (`true`), or a null object is used instead (`false`). Note that if this is set to `false`, no further processing is done; specifically, if reference is defined via setter method, that method will NOT be called.


    Feature is enabled by default, so that unknown Object Ids will result in an exception being thrown, at the end of deserialization.
  syntax:
    content: public static final DeserializationFeature FAIL_ON_UNRESOLVED_OBJECT_IDS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS
  id: READ_DATE_TIMESTAMPS_AS_NANOSECONDS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: READ_DATE_TIMESTAMPS_AS_NANOSECONDS
  nameWithType: DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that controls whether numeric timestamp values are expected to be written using nanosecond timestamps (enabled) or not (disabled), **if and only if** datatype supports such resolution. Only newer datatypes (such as Java8 Date/Time) support such resolution -- older types (pre-Java8 **java.util.Date** etc) and Joda do not -- and this setting **has no effect** on such types.


    If disabled, standard millisecond timestamps are assumed. This is the counterpart to <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS" data-throw-if-not-resolved="false">SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS</xref>.


    Feature is enabled by default, to support most accurate time values possible.
  syntax:
    content: public static final DeserializationFeature READ_DATE_TIMESTAMPS_AS_NANOSECONDS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING
  id: READ_ENUMS_USING_TO_STRING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: READ_ENUMS_USING_TO_STRING
  nameWithType: DeserializationFeature.READ_ENUMS_USING_TO_STRING
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines standard deserialization mechanism used for Enum values: if enabled, Enums are assumed to have been serialized using return value of `Enum.toString()`; if disabled, return value of `Enum.name()` is assumed to have been used.


    Note: this feature should usually have same value as <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING" data-throw-if-not-resolved="false">SerializationFeature#WRITE_ENUMS_USING_TO_STRING</xref>.


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature READ_ENUMS_USING_TO_STRING
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL
  id: READ_UNKNOWN_ENUM_VALUES_AS_NULL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: READ_UNKNOWN_ENUM_VALUES_AS_NULL
  nameWithType: DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that allows unknown Enum values to be parsed as null values. If disabled, unknown Enum values will throw exceptions.


    Note that in some cases this will basically ignore unknown Enum values; this is the keys for keys of <xref uid="java.util.EnumMap" data-throw-if-not-resolved="false">java.util.EnumMap</xref> and values of <xref uid="java.util.EnumSet" data-throw-if-not-resolved="false">java.util.EnumSet</xref> (because nulls are not accepted in these cases).


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature READ_UNKNOWN_ENUM_VALUES_AS_NULL
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
  id: READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
  nameWithType: DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that allows unknown Enum values to be ignored and a predefined value specified through <xref uid="com.fasterxml.jackson.annotation.JsonEnumDefaultValue" data-throw-if-not-resolved="false">@JsonEnumDefaultValue</xref> annotation. If disabled, unknown Enum values will throw exceptions. If enabled, but no predefined default Enum value is specified, an exception will be thrown as well.


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_ROOT_VALUE
  id: UNWRAP_ROOT_VALUE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: UNWRAP_ROOT_VALUE
  nameWithType: DeserializationFeature.UNWRAP_ROOT_VALUE
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_ROOT_VALUE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature to allow "unwrapping" root-level JSON value, to match setting of <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE" data-throw-if-not-resolved="false">SerializationFeature#WRAP_ROOT_VALUE</xref> used for serialization. Will verify that the root JSON value is a JSON Object, and that it has a single property with expected root name. If not, a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> is thrown; otherwise value of the wrapped property will be deserialized as if it was the root value.


    Feature is disabled by default.
  syntax:
    content: public static final DeserializationFeature UNWRAP_ROOT_VALUE
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS
  id: UNWRAP_SINGLE_VALUE_ARRAYS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: UNWRAP_SINGLE_VALUE_ARRAYS
  nameWithType: DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether it is acceptable to coerce single value array (in JSON) values to the corresponding value type. This is basically the opposite of the <xref uid="com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY" data-throw-if-not-resolved="false">#ACCEPT_SINGLE_VALUE_AS_ARRAY</xref> feature. If more than one value is found in the array, a JsonMappingException is thrown.


    Feature is disabled by default
  syntax:
    content: public static final DeserializationFeature UNWRAP_SINGLE_VALUE_ARRAYS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS
  id: USE_BIG_DECIMAL_FOR_FLOATS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: USE_BIG_DECIMAL_FOR_FLOATS
  nameWithType: DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether JSON floating point numbers are to be deserialized into <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">java.math.BigDecimal</xref>s if only generic type description (either <xref uid="java.lang.Object" data-throw-if-not-resolved="false">Object</xref> or <xref uid="" data-throw-if-not-resolved="false">Number</xref>, or within untyped <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> or <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> context) is available. If enabled such values will be deserialized as <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">java.math.BigDecimal</xref>s; if disabled, will be deserialized as <xref uid="" data-throw-if-not-resolved="false">Double</xref>s.


    NOTE: one aspect of <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">java.math.BigDecimal</xref> handling that may need configuring is whether trailing zeroes are trimmed: <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node.JsonNodeFactory</xref> has <xref uid="com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node.JsonNodeFactory#withExactBigDecimals</xref> for changing default behavior (default is for trailing zeroes to be trimmed).


    Feature is disabled by default, meaning that "untyped" floating point numbers will by default be deserialized as <xref uid="" data-throw-if-not-resolved="false">Double</xref>s (choice is for performance reason -- BigDecimals are slower than Doubles).
  syntax:
    content: public static final DeserializationFeature USE_BIG_DECIMAL_FOR_FLOATS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS
  id: USE_BIG_INTEGER_FOR_INTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: USE_BIG_INTEGER_FOR_INTS
  nameWithType: DeserializationFeature.USE_BIG_INTEGER_FOR_INTS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether JSON integral (non-floating-point) numbers are to be deserialized into <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">java.math.BigInteger</xref>s if only generic type description (either <xref uid="java.lang.Object" data-throw-if-not-resolved="false">Object</xref> or <xref uid="" data-throw-if-not-resolved="false">Number</xref>, or within untyped <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> or <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> context) is available. If enabled such values will be deserialized as <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">java.math.BigInteger</xref>s; if disabled, will be deserialized as "smallest" available type, which is either <xref uid="java.lang.Integer" data-throw-if-not-resolved="false">Integer</xref>, <xref uid="java.lang.Long" data-throw-if-not-resolved="false">Long</xref> or <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">java.math.BigInteger</xref>, depending on number of digits.


    Feature is disabled by default, meaning that "untyped" integral numbers will by default be deserialized using whatever is the most compact integral type, to optimize efficiency.
  syntax:
    content: public static final DeserializationFeature USE_BIG_INTEGER_FOR_INTS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY
  id: USE_JAVA_ARRAY_FOR_JSON_ARRAY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: USE_JAVA_ARRAY_FOR_JSON_ARRAY
  nameWithType: DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY
  type: Field
  package: com.fasterxml.jackson.databind
  summary: Feature that determines whether JSON Array is mapped to `Object[]` or `List when binding "untyped" objects (ones with nominal type of java.lang.Object). If true, binds as Object[]; if false, as List. Feature is disabled by default, meaning that JSON arrays are bound as java.util.Lists.`
  syntax:
    content: public static final DeserializationFeature USE_JAVA_ARRAY_FOR_JSON_ARRAY
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.USE_LONG_FOR_INTS
  id: USE_LONG_FOR_INTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: USE_LONG_FOR_INTS
  nameWithType: DeserializationFeature.USE_LONG_FOR_INTS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.USE_LONG_FOR_INTS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines how "small" JSON integral (non-floating-point) numbers -- ones that fit in 32-bit signed integer (\`int\`) -- are bound when target type is loosely typed as <xref uid="java.lang.Object" data-throw-if-not-resolved="false">Object</xref> or <xref uid="" data-throw-if-not-resolved="false">Number</xref> (or within untyped <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> or <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> context). If enabled, such values will be deserialized as <xref uid="java.lang.Long" data-throw-if-not-resolved="false">java.lang.Long</xref>; if disabled, they will be deserialized as "smallest" available type, <xref uid="java.lang.Integer" data-throw-if-not-resolved="false">Integer</xref>. In addition, if enabled, trying to bind values that do not fit in <xref uid="java.lang.Long" data-throw-if-not-resolved="false">java.lang.Long</xref> will throw a <xref uid="com.fasterxml.jackson.core.JsonProcessingException" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonProcessingException</xref>.


    Note: if <xref uid="com.fasterxml.jackson.databind.DeserializationFeature.USE_BIG_INTEGER_FOR_INTS" data-throw-if-not-resolved="false">#USE_BIG_INTEGER_FOR_INTS</xref> is enabled, it has precedence over this setting, forcing use of <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">java.math.BigInteger</xref> for all integral values.


    Feature is disabled by default, meaning that "untyped" integral numbers will by default be deserialized using <xref uid="java.lang.Integer" data-throw-if-not-resolved="false">java.lang.Integer</xref> if value fits.
  syntax:
    content: public static final DeserializationFeature USE_LONG_FOR_INTS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.WRAP_EXCEPTIONS
  id: WRAP_EXCEPTIONS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: WRAP_EXCEPTIONS
  nameWithType: DeserializationFeature.WRAP_EXCEPTIONS
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.WRAP_EXCEPTIONS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Jackson code should catch and wrap <xref uid="java.lang.Exception" data-throw-if-not-resolved="false">Exception</xref>s (but never <xref uid="" data-throw-if-not-resolved="false">Error</xref>s!) to add additional information about location (within input) of problem or not. If enabled, most exceptions will be caught and re-thrown (exception specifically being that <xref uid="java.io.IOException" data-throw-if-not-resolved="false">java.io.IOException</xref>s may be passed as is, since they are declared as throwable); this can be convenient both in that all exceptions will be checked and declared, and so there is more contextual information. However, sometimes calling application may just want "raw" unchecked exceptions passed as is.


    Feature is enabled by default.
  syntax:
    content: public static final DeserializationFeature WRAP_EXCEPTIONS
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: DeserializationFeature.enabledByDefault()
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()
  overload: com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for checking whether this feature is enabled by default.
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: DeserializationFeature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int flags)
  overload: com.fasterxml.jackson.databind.DeserializationFeature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for checking whether feature is enabled in given bitmask
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.DeserializationFeature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: getMask()
  nameWithType: DeserializationFeature.getMask()
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.getMask()
  overload: com.fasterxml.jackson.databind.DeserializationFeature.getMask*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns bit mask for this feature instance
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.DeserializationFeature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: DeserializationFeature.valueOf(String name)
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.valueOf(String name)
  overload: com.fasterxml.jackson.databind.DeserializationFeature.valueOf*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static DeserializationFeature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature
- uid: com.fasterxml.jackson.databind.DeserializationFeature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.DeserializationFeature
  langs:
  - java
  name: values()
  nameWithType: DeserializationFeature.values()
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.values()
  overload: com.fasterxml.jackson.databind.DeserializationFeature.values*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static DeserializationFeature[] values()
    return:
      type: com.fasterxml.jackson.databind.DeserializationFeature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature*
  name: DeserializationFeature
  nameWithType: DeserializationFeature.DeserializationFeature
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.DeserializationFeature
    name: DeserializationFeature
    fullName: com.fasterxml.jackson.databind.DeserializationFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.DeserializationFeature.values*
  name: values
  nameWithType: DeserializationFeature.values
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.values
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.DeserializationFeature.valueOf*
  name: valueOf
  nameWithType: DeserializationFeature.valueOf
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.valueOf
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault*
  name: enabledByDefault
  nameWithType: DeserializationFeature.enabledByDefault
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault
  package: com.fasterxml.jackson.databind
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.DeserializationFeature.getMask*
  name: getMask
  nameWithType: DeserializationFeature.getMask
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.getMask
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationFeature.enabledIn*
  name: enabledIn
  nameWithType: DeserializationFeature.enabledIn
  fullName: com.fasterxml.jackson.databind.DeserializationFeature.enabledIn
  package: com.fasterxml.jackson.databind
- uid: java.lang.Enum<com.fasterxml.jackson.databind.DeserializationFeature>
  name: Enum<DeserializationFeature>
  nameWithType: Enum<DeserializationFeature>
  fullName: java.lang.Enum<com.fasterxml.jackson.databind.DeserializationFeature>
- uid: com.fasterxml.jackson.databind.cfg.ConfigFeature
  name: ConfigFeature
  nameWithType: ConfigFeature
  fullName: com.fasterxml.jackson.databind.cfg.ConfigFeature
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
