### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver
  id: AbstractTypeResolver
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.AbstractTypeResolver.AbstractTypeResolver()
  - com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  langs:
  - java
  name: AbstractTypeResolver
  nameWithType: AbstractTypeResolver
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver
  type: Class
  package: com.fasterxml.jackson.databind
  summary: Defines interface for resolvers that can resolve abstract types into concrete ones; either by using static mappings, or possibly by materializing implementations dynamically.
  syntax:
    content: public abstract class AbstractTypeResolver
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.AbstractTypeResolver()
  id: AbstractTypeResolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.AbstractTypeResolver
  langs:
  - java
  name: AbstractTypeResolver()
  nameWithType: AbstractTypeResolver.AbstractTypeResolver()
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.AbstractTypeResolver()
  overload: com.fasterxml.jackson.databind.AbstractTypeResolver.AbstractTypeResolver*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: public AbstractTypeResolver()
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  id: findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.AbstractTypeResolver
  langs:
  - java
  name: findTypeMapping(DeserializationConfig config, JavaType type)
  nameWithType: AbstractTypeResolver.findTypeMapping(DeserializationConfig config, JavaType type)
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(DeserializationConfig config, JavaType type)
  overload: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Try to locate a subtype for given abstract type, to either resolve to a concrete type, or at least to a more-specific (and hopefully supported) abstract type, one which may have registered deserializers. Method is called before trying to locate registered deserializers (as well as standard abstract type defaulting that core Jackson does), so it is typically implemented to add custom mappings of common abstract types (like specify which concrete implementation to use for binding <xref uid="java.util.List" data-throw-if-not-resolved="false">java.util.List</xref>s).


    Note that this method does not necessarily have to do full resolution of bindings; that is, it is legal to return type that could be further resolved: caller is expected to keep calling this method on registered resolvers, until a concrete type is located.
  syntax:
    content: public JavaType findTypeMapping(DeserializationConfig config, JavaType type)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
      description: Configuration in use
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Type to find mapping for
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: Type to map given input type (if mapping found) or <code>null</code> (if not).
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  id: resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.AbstractTypeResolver
  langs:
  - java
  name: resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
  nameWithType: AbstractTypeResolver.resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
  overload: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method called to try to resolve an abstract type into concrete type (usually for purposes of deserializing), when no concrete implementation was found. It will be called after checking all other possibilities, including defaulting.
  syntax:
    content: public JavaType resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
      description: Configuration in use
    - id: typeDesc
      type: com.fasterxml.jackson.databind.BeanDescription
      description: Description of the POJO type to resolve
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Resolved concrete type (which should retain generic
            type parameters of input type, if any), if resolution succeeds;
            null if resolver does not know how to resolve given type
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  id: resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.AbstractTypeResolver
  langs:
  - java
  name: resolveAbstractType(DeserializationConfig config, JavaType type)
  nameWithType: AbstractTypeResolver.resolveAbstractType(DeserializationConfig config, JavaType type)
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(DeserializationConfig config, JavaType type)
  overload: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Older variant of <xref uid="com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)" data-throw-if-not-resolved="false">#resolveAbstractType(DeserializationConfig, BeanDescription)</xref>; obsoleted in 2.7
  syntax:
    content: public JavaType resolveAbstractType(DeserializationConfig config, JavaType type)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
      description: Configuration in use
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Type to resolve
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: Resolved concrete type
references:
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.AbstractTypeResolver*
  name: AbstractTypeResolver
  nameWithType: AbstractTypeResolver.AbstractTypeResolver
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.AbstractTypeResolver
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping*
  name: findTypeMapping
  nameWithType: AbstractTypeResolver.findTypeMapping
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType*
  name: resolveAbstractType
  nameWithType: AbstractTypeResolver.resolveAbstractType
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
