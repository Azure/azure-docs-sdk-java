### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.http.nio.AsyncServerRequestHandler
  id: AsyncServerRequestHandler
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio
  children:
  - org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger
  - org.apache.hc.core5.http.nio.AsyncServerRequestHandler.handle(T,org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger,org.apache.hc.core5.http.protocol.HttpContext)
  - org.apache.hc.core5.http.nio.AsyncServerRequestHandler.prepare(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.EntityDetails,org.apache.hc.core5.http.protocol.HttpContext)
  langs:
  - java
  name: AsyncServerRequestHandler<T>
  nameWithType: AsyncServerRequestHandler<T>
  fullName: org.apache.hc.core5.http.nio.AsyncServerRequestHandler<T>
  type: Interface
  package: org.apache.hc.core5.http.nio
  summary: AsyncServerRequestHandler represents a routine for processing of a specific group of HTTP requests. Request execution filters are designed to take care of protocol specific aspects, whereas individual request handlers are expected to take care of application specific HTTP processing. The main purpose of a request handler is to generate a response object with a content entity to be sent back to the client in response to the given request.
  syntax:
    content: public interface AsyncServerRequestHandler<T>
    typeParameters:
    - id: T
- uid: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.handle(T,org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger,org.apache.hc.core5.http.protocol.HttpContext)
  id: handle(T,org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger,org.apache.hc.core5.http.protocol.HttpContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.AsyncServerRequestHandler
  langs:
  - java
  name: handle(T requestObject, AsyncServerRequestHandler.ResponseTrigger responseTrigger, HttpContext context)
  nameWithType: AsyncServerRequestHandler<T>.handle(T requestObject, AsyncServerRequestHandler.ResponseTrigger responseTrigger, HttpContext context)
  fullName: org.apache.hc.core5.http.nio.AsyncServerRequestHandler<T>.handle(T requestObject, AsyncServerRequestHandler.ResponseTrigger responseTrigger, HttpContext context)
  overload: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.handle*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Triggered to handles the request object produced by the <xref uid="org.apache.hc.core5.http.nio.AsyncRequestConsumer" data-throw-if-not-resolved="false">AsyncRequestConsumer</xref> returned from the <xref uid="org.apache.hc.core5.http.nio.AsyncServerRequestHandler.prepare(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.EntityDetails,org.apache.hc.core5.http.protocol.HttpContext)" data-throw-if-not-resolved="false">#prepare(HttpRequest, EntityDetails, HttpContext)</xref> method. The handler can choose to send response messages immediately inside the call or asynchronously at some later point.
  syntax:
    content: public abstract void handle(T requestObject, AsyncServerRequestHandler.ResponseTrigger responseTrigger, HttpContext context)
    parameters:
    - id: requestObject
      type: T
      description: the request object.
    - id: responseTrigger
      type: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger
      description: the response trigger.
    - id: context
      type: org.apache.hc.core5.http.protocol.HttpContext
      description: the actual execution context.
  exceptions:
  - type: org.apache.hc.core5.http.HttpException
  - type: java.io.IOException
- uid: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.prepare(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.EntityDetails,org.apache.hc.core5.http.protocol.HttpContext)
  id: prepare(org.apache.hc.core5.http.HttpRequest,org.apache.hc.core5.http.EntityDetails,org.apache.hc.core5.http.protocol.HttpContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.nio.AsyncServerRequestHandler
  langs:
  - java
  name: prepare(HttpRequest request, EntityDetails entityDetails, HttpContext context)
  nameWithType: AsyncServerRequestHandler<T>.prepare(HttpRequest request, EntityDetails entityDetails, HttpContext context)
  fullName: org.apache.hc.core5.http.nio.AsyncServerRequestHandler<T>.prepare(HttpRequest request, EntityDetails entityDetails, HttpContext context)
  overload: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.prepare*
  type: Method
  package: org.apache.hc.core5.http.nio
  summary: Triggered to signal new incoming request. The handler can create a <xref uid="org.apache.hc.core5.http.nio.AsyncRequestConsumer" data-throw-if-not-resolved="false">AsyncRequestConsumer</xref> based on properties of the request head and entity details and let it process the request data stream. The request handler will be used to generate an object that represents request data.
  syntax:
    content: public abstract AsyncRequestConsumer<T> prepare(HttpRequest request, EntityDetails entityDetails, HttpContext context)
    parameters:
    - id: request
      type: org.apache.hc.core5.http.HttpRequest
      description: the incoming request head.
    - id: entityDetails
      type: org.apache.hc.core5.http.EntityDetails
      description: >-
        the request entity details or <code>null</code> if the request
                              does not enclose an entity.
    - id: context
      type: org.apache.hc.core5.http.protocol.HttpContext
      description: the actual execution context.
    return:
      type: org.apache.hc.core5.http.nio.AsyncRequestConsumer<T>
      description: the request handler.
  exceptions:
  - type: org.apache.hc.core5.http.HttpException
references:
- uid: org.apache.hc.core5.http.HttpException
  name: HttpException
  nameWithType: HttpException
  fullName: org.apache.hc.core5.http.HttpException
- uid: org.apache.hc.core5.http.HttpRequest
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: org.apache.hc.core5.http.HttpRequest
- uid: org.apache.hc.core5.http.EntityDetails
  name: EntityDetails
  nameWithType: EntityDetails
  fullName: org.apache.hc.core5.http.EntityDetails
- uid: org.apache.hc.core5.http.protocol.HttpContext
  name: HttpContext
  nameWithType: HttpContext
  fullName: org.apache.hc.core5.http.protocol.HttpContext
- uid: org.apache.hc.core5.http.nio.AsyncRequestConsumer<T>
  spec.java:
  - uid: org.apache.hc.core5.http.nio.AsyncRequestConsumer
    name: AsyncRequestConsumer
    fullName: org.apache.hc.core5.http.nio.AsyncRequestConsumer
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.prepare*
  name: prepare
  nameWithType: AsyncServerRequestHandler<T>.prepare
  fullName: org.apache.hc.core5.http.nio.AsyncServerRequestHandler<T>.prepare
  package: org.apache.hc.core5.http.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger
  name: AsyncServerRequestHandler.ResponseTrigger
  nameWithType: AsyncServerRequestHandler.ResponseTrigger
  fullName: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.ResponseTrigger
- uid: org.apache.hc.core5.http.nio.AsyncServerRequestHandler.handle*
  name: handle
  nameWithType: AsyncServerRequestHandler<T>.handle
  fullName: org.apache.hc.core5.http.nio.AsyncServerRequestHandler<T>.handle
  package: org.apache.hc.core5.http.nio
- uid: org.apache.hc.core5.http.nio.AsyncRequestConsumer
  name: AsyncRequestConsumer
  nameWithType: AsyncRequestConsumer
  fullName: org.apache.hc.core5.http.nio.AsyncRequestConsumer
