### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse*"
fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse"
name: "tryParse"
nameWithType: "Doubles.tryParse"
members:
- uid: "com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse(java.lang.String)"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Doubles.tryParse(String string)"
  name: "tryParse(String string)"
  nameWithType: "Doubles.tryParse(String string)"
  summary: "Parses the specified string as a double-precision floating point value. The ASCII character `'-'` (`'\\u002D'`) is recognized as the minus sign.\n\nUnlike <xref uid=\"java.lang.Double.parseDouble*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Double#parseDouble(String)\"></xref>, this method returns `null` instead of throwing an exception if parsing fails. Valid inputs are exactly those accepted by <xref uid=\"java.lang.Double.valueOf*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Double#valueOf(String)\"></xref>, except that leading and trailing whitespace is not permitted.\n\nThis implementation is likely to be faster than `Double.parseDouble` if many failures are expected."
  parameters:
  - description: "the string representation of a <code>double</code> value"
    name: "string"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Double tryParse(String string)"
  returns:
    description: "the floating point value represented by <code>string</code>, or <code>null</code> if <code>\n     string</code> has a length of zero or cannot be parsed as a <code>double</code> value"
    type: "<xref href=\"java.lang.Double?alt=java.lang.Double&text=Double\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.primitives"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
