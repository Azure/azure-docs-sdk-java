### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  id: NetworkConfiguration
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models
  children:
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.NetworkConfiguration()
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.dynamicVNetAssignmentScope()
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.endpointConfiguration()
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.publicIPAddressConfiguration()
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.subnetId()
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withDynamicVNetAssignmentScope(com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope)
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withEndpointConfiguration(com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration)
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withPublicIPAddressConfiguration(com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration)
  - com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withSubnetId(java.lang.String)
  langs:
  - java
  name: NetworkConfiguration
  nameWithType: NetworkConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  type: Class
  package: com.microsoft.azure.batch.protocol.models
  summary: The network configuration for a Pool.
  syntax:
    content: public class NetworkConfiguration
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.NetworkConfiguration()
  id: NetworkConfiguration()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: NetworkConfiguration()
  nameWithType: NetworkConfiguration.NetworkConfiguration()
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.NetworkConfiguration()
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.NetworkConfiguration*
  type: Constructor
  package: com.microsoft.azure.batch.protocol.models
  syntax:
    content: public NetworkConfiguration()
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.dynamicVNetAssignmentScope()
  id: dynamicVNetAssignmentScope()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: dynamicVNetAssignmentScope()
  nameWithType: NetworkConfiguration.dynamicVNetAssignmentScope()
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.dynamicVNetAssignmentScope()
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.dynamicVNetAssignmentScope*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Get possible values include: 'none', 'job'."
  syntax:
    content: public DynamicVNetAssignmentScope dynamicVNetAssignmentScope()
    return:
      type: com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope
      description: the dynamicVNetAssignmentScope value
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.endpointConfiguration()
  id: endpointConfiguration()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: endpointConfiguration()
  nameWithType: NetworkConfiguration.endpointConfiguration()
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.endpointConfiguration()
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.endpointConfiguration*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
  syntax:
    content: public PoolEndpointConfiguration endpointConfiguration()
    return:
      type: com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration
      description: the endpointConfiguration value
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.publicIPAddressConfiguration()
  id: publicIPAddressConfiguration()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: publicIPAddressConfiguration()
  nameWithType: NetworkConfiguration.publicIPAddressConfiguration()
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.publicIPAddressConfiguration()
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.publicIPAddressConfiguration*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Get public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
  syntax:
    content: public PublicIPAddressConfiguration publicIPAddressConfiguration()
    return:
      type: com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration
      description: the publicIPAddressConfiguration value
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.subnetId()
  id: subnetId()
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: subnetId()
  nameWithType: NetworkConfiguration.subnetId()
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.subnetId()
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.subnetId*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Get the virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics\\#virtual-network-vnet-and-firewall-configuration."
  syntax:
    content: public String subnetId()
    return:
      type: java.lang.String
      description: the subnetId value
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withDynamicVNetAssignmentScope(com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope)
  id: withDynamicVNetAssignmentScope(com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: withDynamicVNetAssignmentScope(DynamicVNetAssignmentScope dynamicVNetAssignmentScope)
  nameWithType: NetworkConfiguration.withDynamicVNetAssignmentScope(DynamicVNetAssignmentScope dynamicVNetAssignmentScope)
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withDynamicVNetAssignmentScope(DynamicVNetAssignmentScope dynamicVNetAssignmentScope)
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withDynamicVNetAssignmentScope*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Set possible values include: 'none', 'job'."
  syntax:
    content: public NetworkConfiguration withDynamicVNetAssignmentScope(DynamicVNetAssignmentScope dynamicVNetAssignmentScope)
    parameters:
    - id: dynamicVNetAssignmentScope
      type: com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope
      description: the dynamicVNetAssignmentScope value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
      description: the NetworkConfiguration object itself.
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withEndpointConfiguration(com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration)
  id: withEndpointConfiguration(com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: withEndpointConfiguration(PoolEndpointConfiguration endpointConfiguration)
  nameWithType: NetworkConfiguration.withEndpointConfiguration(PoolEndpointConfiguration endpointConfiguration)
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withEndpointConfiguration(PoolEndpointConfiguration endpointConfiguration)
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withEndpointConfiguration*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set pool endpoint configuration is only supported on Pools with the virtualMachineConfiguration property.
  syntax:
    content: public NetworkConfiguration withEndpointConfiguration(PoolEndpointConfiguration endpointConfiguration)
    parameters:
    - id: endpointConfiguration
      type: com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration
      description: the endpointConfiguration value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
      description: the NetworkConfiguration object itself.
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withPublicIPAddressConfiguration(com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration)
  id: withPublicIPAddressConfiguration(com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: withPublicIPAddressConfiguration(PublicIPAddressConfiguration publicIPAddressConfiguration)
  nameWithType: NetworkConfiguration.withPublicIPAddressConfiguration(PublicIPAddressConfiguration publicIPAddressConfiguration)
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withPublicIPAddressConfiguration(PublicIPAddressConfiguration publicIPAddressConfiguration)
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withPublicIPAddressConfiguration*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: Set public IP configuration property is only supported on Pools with the virtualMachineConfiguration property.
  syntax:
    content: public NetworkConfiguration withPublicIPAddressConfiguration(PublicIPAddressConfiguration publicIPAddressConfiguration)
    parameters:
    - id: publicIPAddressConfiguration
      type: com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration
      description: the publicIPAddressConfiguration value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
      description: the NetworkConfiguration object itself.
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withSubnetId(java.lang.String)
  id: withSubnetId(java.lang.String)
  artifact: com.microsoft.azure:azure-batch:8.0.0
  parent: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
  langs:
  - java
  name: withSubnetId(String subnetId)
  nameWithType: NetworkConfiguration.withSubnetId(String subnetId)
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withSubnetId(String subnetId)
  overload: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withSubnetId*
  type: Method
  package: com.microsoft.azure.batch.protocol.models
  summary: "Set the virtual network must be in the same region and subscription as the Azure Batch Account. The specified subnet should have enough free IP addresses to accommodate the number of Compute Nodes in the Pool. If the subnet doesn't have enough free IP addresses, the Pool will partially allocate Nodes and a resize error will occur. The 'MicrosoftAzureBatch' service principal must have the 'Classic Virtual Machine Contributor' Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule Tasks on the Nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the Nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the Compute Nodes to unusable. For Pools created with virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks') are supported, but for Pools created with cloudServiceConfiguration both ARM and classic virtual networks are supported. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For Pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For Pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics\\#virtual-network-vnet-and-firewall-configuration."
  syntax:
    content: public NetworkConfiguration withSubnetId(String subnetId)
    parameters:
    - id: subnetId
      type: java.lang.String
      description: the subnetId value to set
    return:
      type: com.microsoft.azure.batch.protocol.models.NetworkConfiguration
      description: the NetworkConfiguration object itself.
references:
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.NetworkConfiguration*
  name: NetworkConfiguration
  nameWithType: NetworkConfiguration.NetworkConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.NetworkConfiguration
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.subnetId*
  name: subnetId
  nameWithType: NetworkConfiguration.subnetId
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.subnetId
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withSubnetId*
  name: withSubnetId
  nameWithType: NetworkConfiguration.withSubnetId
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withSubnetId
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope
  name: DynamicVNetAssignmentScope
  nameWithType: DynamicVNetAssignmentScope
  fullName: com.microsoft.azure.batch.protocol.models.DynamicVNetAssignmentScope
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.dynamicVNetAssignmentScope*
  name: dynamicVNetAssignmentScope
  nameWithType: NetworkConfiguration.dynamicVNetAssignmentScope
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.dynamicVNetAssignmentScope
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withDynamicVNetAssignmentScope*
  name: withDynamicVNetAssignmentScope
  nameWithType: NetworkConfiguration.withDynamicVNetAssignmentScope
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withDynamicVNetAssignmentScope
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration
  name: PoolEndpointConfiguration
  nameWithType: PoolEndpointConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.PoolEndpointConfiguration
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.endpointConfiguration*
  name: endpointConfiguration
  nameWithType: NetworkConfiguration.endpointConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.endpointConfiguration
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withEndpointConfiguration*
  name: withEndpointConfiguration
  nameWithType: NetworkConfiguration.withEndpointConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withEndpointConfiguration
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration
  name: PublicIPAddressConfiguration
  nameWithType: PublicIPAddressConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.PublicIPAddressConfiguration
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.publicIPAddressConfiguration*
  name: publicIPAddressConfiguration
  nameWithType: NetworkConfiguration.publicIPAddressConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.publicIPAddressConfiguration
  package: com.microsoft.azure.batch.protocol.models
- uid: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withPublicIPAddressConfiguration*
  name: withPublicIPAddressConfiguration
  nameWithType: NetworkConfiguration.withPublicIPAddressConfiguration
  fullName: com.microsoft.azure.batch.protocol.models.NetworkConfiguration.withPublicIPAddressConfiguration
  package: com.microsoft.azure.batch.protocol.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
