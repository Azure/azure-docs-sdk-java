### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  id: ImmutableMultiset
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>toImmutableMultiset()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<T,E>toImmutableMultiset(java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString()
  langs:
  - java
  name: ImmutableMultiset<E>
  nameWithType: ImmutableMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset" data-throw-if-not-resolved="false">Multiset</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    **Grouped iteration.** In all current implementations, duplicate elements always appear consecutively when iterating. Elements iterate in order by the *first* appearance of that element when the multiset was created.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableMultiset<E> extends ImmutableMultisetGwtSerializationDependencies<E> implements Multiset<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultisetGwtSerializationDependencies
  implements:
  - com.azure.cosmos.implementation.guava25.collect.Multiset<E>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>builder()
  id: <E>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>builder()
  nameWithType: ImmutableMultiset<E>.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableMultiset.Builder<E> <E>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(E[])
  id: <E>copyOf(E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>copyOf(E[] elements)
  nameWithType: ImmutableMultiset<E>.<E>copyOf(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>copyOf(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>copyOf(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>copyOf(Iterable<? extends E> elements)
  nameWithType: ImmutableMultiset<E>.<E>copyOf(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>copyOf(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>copyOf(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>copyOf(Iterator<? extends E> elements)
  nameWithType: ImmutableMultiset<E>.<E>copyOf(Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>copyOf(Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>copyOf(Iterator<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of()
  id: <E>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of()
  nameWithType: ImmutableMultiset<E>.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty immutable multiset.
  syntax:
    content: public static ImmutableMultiset<E> <E>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E)
  id: <E>of(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of(E element)
  nameWithType: ImmutableMultiset<E>.<E>of(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing a single element.
  syntax:
    content: public static ImmutableMultiset<E> <E>of(E element)
    parameters:
    - id: element
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E)
  id: <E>of(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of(E e1, E e2)
  nameWithType: ImmutableMultiset<E>.<E>of(E e1, E e2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of(E e1, E e2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in order.
  syntax:
    content: public static ImmutableMultiset<E> <E>of(E e1, E e2)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E)
  id: <E>of(E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3)
  nameWithType: ImmutableMultiset<E>.<E>of(E e1, E e2, E e3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of(E e1, E e2, E e3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>of(E e1, E e2, E e3)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E,E)
  id: <E>of(E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4)
  nameWithType: ImmutableMultiset<E>.<E>of(E e1, E e2, E e3, E e4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of(E e1, E e2, E e3, E e4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>of(E e1, E e2, E e3, E e4)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E,E,E)
  id: <E>of(E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5)
  nameWithType: ImmutableMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>of(E e1, E e2, E e3, E e4, E e5)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of(E,E,E,E,E,E,E...)
  id: <E>of(E,E,E,E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
  nameWithType: ImmutableMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing the given elements, in the "grouped iteration order" described in the class documentation.
  syntax:
    content: public static ImmutableMultiset<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: others
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>toImmutableMultiset()
  id: <E>toImmutableMultiset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <E>toImmutableMultiset()
  nameWithType: ImmutableMultiset<E>.<E>toImmutableMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>toImmutableMultiset()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toImmutableMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `Collector` that accumulates the input elements into a new `ImmutableMultiset`. Elements iterate in order by the *first* appearance of that element in encounter order.
  syntax:
    content: public static Collector<E,?,ImmutableMultiset<E>> <E>toImmutableMultiset()
    return:
      type: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<T,E>toImmutableMultiset(java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  id: <T,E>toImmutableMultiset(java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: <T,E>toImmutableMultiset(Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
  nameWithType: ImmutableMultiset<E>.<T,E>toImmutableMultiset(Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<T,E>toImmutableMultiset(Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toImmutableMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that accumulates elements into an `ImmutableMultiset` whose elements are the result of applying `elementFunction` to the inputs, with counts equal to the result of applying `countFunction` to the inputs.


    If the mapped elements contain duplicates (according to <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of `countFunction.applyAsInt(t)` for each `t` mapped to that element.
  syntax:
    content: public static Collector<T,?,ImmutableMultiset<E>> <T,E>toImmutableMultiset(Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
    parameters:
    - id: elementFunction
      type: java.util.function.Function<? super T,? extends E>
    - id: countFunction
      type: java.util.function.ToIntFunction<? super T>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.ImmutableMultiset()
  id: ImmutableMultiset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: ImmutableMultiset()
  nameWithType: ImmutableMultiset<E>.ImmutableMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.ImmutableMultiset()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.ImmutableMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableMultiset()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add(E,int)
  id: add(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: add(E element, int occurrences)
  nameWithType: ImmutableMultiset<E>.add(E element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.add(E element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final int add(E element, int occurrences)
    parameters:
    - id: element
      type: E
    - id: occurrences
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList()
  id: asList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: asList()
  nameWithType: ImmutableMultiset<E>.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.asList()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableList` containing the same elements, in the same order, as this collection.


    **Performance note:** in most cases this method can return quickly without actually copying anything. The exact circumstances under which the copy is performed are undefined and subject to change.
  syntax:
    content: public ImmutableList<E> asList()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains(java.lang.Object)
  id: contains(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: contains(Object object)
  nameWithType: ImmutableMultiset<E>.contains(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.contains(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Determines whether this multiset contains the specified element.


    This method refines <xref uid="java.util.Collection.contains" data-throw-if-not-resolved="false">Collection#contains</xref> to further specify that it **may not** throw an exception in response to `element` being null or of the wrong type.
  syntax:
    content: public boolean contains(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet()
  id: elementSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: elementSet()
  nameWithType: ImmutableMultiset<E>.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.elementSet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the set of distinct elements contained in this multiset. The element set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. The order of the elements in the element set is unspecified.


    If the element set supports any removal operations, these necessarily cause **all** occurrences of the removed element(s) to be removed from the multiset. Implementations are not expected to support the add operations, although this is possible.


    A common use for the element set is to find the number of distinct elements in the multiset: `elementSet().size()`.
  syntax:
    content: public abstract ImmutableSet<E> elementSet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet()
  id: entrySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: entrySet()
  nameWithType: ImmutableMultiset<E>.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.entrySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the contents of this multiset, grouped into `Multiset.Entry` instances, each providing an element of the multiset and the count of that element. This set contains exactly one entry for each distinct element in the multiset (thus it always has the same size as the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet" data-throw-if-not-resolved="false">#elementSet</xref>). The order of the elements in the element set is unspecified.


    The entry set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. However, multiset changes may or may not be reflected in any `Entry` instances already retrieved from the entry set (this is implementation-dependent). Furthermore, implementations are not required to support modifications to the entry set at all, and the `Entry` instances themselves don't even have methods for modification. See the specific implementation class for more details on how its entry set handles modifications.
  syntax:
    content: public ImmutableSet<Multiset.Entry<E>> entrySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: equals(Object object)
  nameWithType: ImmutableMultiset<E>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares the specified object with this multiset for equality. Returns `true` if the given object is also a multiset and contains equal elements with equal counts, regardless of order.
  syntax:
    content: public boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: hashCode()
  nameWithType: ImmutableMultiset<E>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the hash code for this multiset. This is defined as the sum of


    ```java

    ((element == null) ? 0 : element.hashCode()) ^ count(element)

    ```


    over all distinct elements in the multiset. It follows that a multiset and its entry set always have the same hash code.
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: iterator()
  nameWithType: ImmutableMultiset<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable iterator across the elements in this collection.
  syntax:
    content: public UnmodifiableIterator<E> iterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove(java.lang.Object,int)
  id: remove(java.lang.Object,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: remove(Object element, int occurrences)
  nameWithType: ImmutableMultiset<E>.remove(Object element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.remove(Object element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final int remove(Object element, int occurrences)
    parameters:
    - id: element
      type: java.lang.Object
    - id: occurrences
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int)
  id: setCount(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: setCount(E element, int count)
  nameWithType: ImmutableMultiset<E>.setCount(E element, int count)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.setCount(E element, int count)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final int setCount(E element, int count)
    parameters:
    - id: element
      type: E
    - id: count
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int,int)
  id: setCount(E,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: setCount(E element, int oldCount, int newCount)
  nameWithType: ImmutableMultiset<E>.setCount(E element, int oldCount, int newCount)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.setCount(E element, int oldCount, int newCount)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the collection unmodified.
  syntax:
    content: public final boolean setCount(E element, int oldCount, int newCount)
    parameters:
    - id: element
      type: E
    - id: oldCount
      type: int
    - id: newCount
      type: int
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  langs:
  - java
  name: toString()
  nameWithType: ImmutableMultiset<E>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: It is recommended, though not mandatory, that this method return the result of invoking <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString" data-throw-if-not-resolved="false">#toString</xref> on the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet" data-throw-if-not-resolved="false">#entrySet</xref>, yielding a result such as `[a x 3, c, d x 2, e]`.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.ImmutableMultiset*
  name: ImmutableMultiset
  nameWithType: ImmutableMultiset<E>.ImmutableMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.ImmutableMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
    name: ImmutableMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toImmutableMultiset*
  name: <E>toImmutableMultiset
  nameWithType: ImmutableMultiset<E>.<E>toImmutableMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>toImmutableMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,? extends E>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.function.ToIntFunction<? super T>
  spec.java:
  - uid: java.util.function.ToIntFunction
    name: ToIntFunction
    fullName: java.util.function.ToIntFunction
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
    name: ImmutableMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
    name: ImmutableMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.of*
  name: <E>of
  nameWithType: ImmutableMultiset<E>.<E>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.copyOf*
  name: <E>copyOf
  nameWithType: ImmutableMultiset<E>.<E>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<? extends E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator*
  name: iterator
  nameWithType: ImmutableMultiset<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList*
  name: asList
  nameWithType: ImmutableMultiset<E>.asList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.asList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains*
  name: contains
  nameWithType: ImmutableMultiset<E>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add*
  name: add
  nameWithType: ImmutableMultiset<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove*
  name: remove
  nameWithType: ImmutableMultiset<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount*
  name: setCount
  nameWithType: ImmutableMultiset<E>.setCount
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.setCount
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals*
  name: equals
  nameWithType: ImmutableMultiset<E>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode*
  name: hashCode
  nameWithType: ImmutableMultiset<E>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString*
  name: toString
  nameWithType: ImmutableMultiset<E>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet*
  name: elementSet
  nameWithType: ImmutableMultiset<E>.elementSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.elementSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
    name: Entry
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet*
  name: entrySet
  nameWithType: ImmutableMultiset<E>.entrySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.entrySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.builder*
  name: <E>builder
  nameWithType: ImmutableMultiset<E>.<E>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>.<E>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultisetGwtSerializationDependencies<E>
  name: ImmutableMultisetGwtSerializationDependencies<E>
  nameWithType: ImmutableMultisetGwtSerializationDependencies<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultisetGwtSerializationDependencies<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
  name: Multiset<E>
  nameWithType: Multiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  name: ImmutableCollection.removeAll(Collection<?>)
  nameWithType: ImmutableCollection.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  name: ImmutableCollection.add(E)
  nameWithType: ImmutableCollection.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  name: ImmutableCollection.toArray()
  nameWithType: ImmutableCollection.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  name: ImmutableCollection.remove(Object)
  nameWithType: ImmutableCollection.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  name: ImmutableCollection.removeIf(Predicate<? super E>)
  nameWithType: ImmutableCollection.removeIf(Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  name: ImmutableCollection.iterator()
  nameWithType: ImmutableCollection.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  name: ImmutableCollection.<T>toArray(T[])
  nameWithType: ImmutableCollection.<T>toArray(T[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  name: ImmutableCollection.asList()
  nameWithType: ImmutableCollection.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  name: ImmutableCollection.addAll(Collection<? extends E>)
  nameWithType: ImmutableCollection.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  name: ImmutableCollection.retainAll(Collection<?>)
  nameWithType: ImmutableCollection.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  name: ImmutableCollection.spliterator()
  nameWithType: ImmutableCollection.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  name: ImmutableCollection.contains(Object)
  nameWithType: ImmutableCollection.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  name: ImmutableCollection.clear()
  nameWithType: ImmutableCollection.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder
  name: ImmutableMultiset.Builder<E>
  nameWithType: ImmutableMultiset.Builder<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.Builder<E>
- uid: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  name: E,?,ImmutableMultiset
  nameWithType: E,?,ImmutableMultiset
  fullName: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: '? super T,? extends E'
  name: '? super T,? extends E'
  nameWithType: '? super T,? extends E'
  fullName: '? super T,? extends E'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: java.util.function.ToIntFunction
  name: ToIntFunction
  nameWithType: ToIntFunction
  fullName: java.util.function.ToIntFunction
- uid: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  name: T,?,ImmutableMultiset
  nameWithType: T,?,ImmutableMultiset
  fullName: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  name: Multiset.Entry
  nameWithType: Multiset.Entry
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultisetGwtSerializationDependencies
  name: ImmutableMultisetGwtSerializationDependencies
  nameWithType: ImmutableMultisetGwtSerializationDependencies
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultisetGwtSerializationDependencies
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset
  name: Multiset
  nameWithType: Multiset
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
  name: ImmutableCollection.removeAll(Collection
  nameWithType: ImmutableCollection.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
  name: ImmutableCollection.removeIf(Predicate
  nameWithType: ImmutableCollection.removeIf(Predicate
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
  name: ImmutableCollection.
  nameWithType: ImmutableCollection.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
  name: ImmutableCollection.addAll(Collection
  nameWithType: ImmutableCollection.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
  name: ImmutableCollection.retainAll(Collection
  nameWithType: ImmutableCollection.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
