### YamlMime:JavaMember
uid: "com.azure.storage.blob.nio.AzureFileSystemProvider.newOutputStream*"
fullName: "com.azure.storage.blob.nio.AzureFileSystemProvider.newOutputStream"
name: "newOutputStream"
nameWithType: "AzureFileSystemProvider.newOutputStream"
members:
- uid: "com.azure.storage.blob.nio.AzureFileSystemProvider.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)"
  fullName: "com.azure.storage.blob.nio.AzureFileSystemProvider.newOutputStream(Path path, OpenOption[] options)"
  name: "newOutputStream(Path path, OpenOption[] options)"
  nameWithType: "AzureFileSystemProvider.newOutputStream(Path path, OpenOption[] options)"
  summary: "Opens an <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref> to the given path. The resulting file will be stored as a block blob.\n\nThe only supported options are <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardOpenOption#CREATE\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardOpenOption#CREATE_NEW\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardOpenOption#WRITE\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StandardOpenOption#TRUNCATE_EXISTING\"></xref>. Any other options will throw an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref>. `WRITE` and `TRUNCATE_EXISTING` must be specified or an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> will be thrown. Hence, files cannot be updated, only overwritten completely.\n\nThis stream will not attempt to buffer the entire file, however some buffering will be done for potential optimizations and to avoid network thrashing. Specifically, up to <xref uid=\"com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_PUT_BLOB_THRESHOLD\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystem#AZURE_STORAGE_PUT_BLOB_THRESHOLD\"></xref> bytes will be buffered initially. If that threshold is exceeded, the data will be broken into chunks and sent in blocks, and writes will be buffered into sizes of <xref uid=\"com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_UPLOAD_BLOCK_SIZE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystem#AZURE_STORAGE_UPLOAD_BLOCK_SIZE\"></xref>. The maximum number of buffers of this size to be allocated is defined by <xref uid=\"com.azure.storage.blob.nio.AzureFileSystem.AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystem#AZURE_STORAGE_MAX_CONCURRENCY_PER_REQUEST\"></xref>, which also configures the level of parallelism with which we may write and thus may affect write speeds as well.\n\nThe data is only committed when the steam is closed. Hence data cannot be read from the destination until the stream is closed. When the close method returns, it is guaranteed that, barring any errors, the data is finalized and available for reading.\n\nWriting happens asynchronously. Bytes passed for writing are stored until either the threshold or block size are met at which time they are sent to the service. When the write method returns, there is no guarantee about which phase of this process the data is in other than it has been accepted and will be written. Again, closing will guarantee that the data is written and available.\n\nFlush is a no-op as regards data transfers, but it can be used to check the state of the stream for errors. This can be a useful tool because writing happens asynchronously, and therefore an error from a previous write may not otherwise be thrown unless the stream is flushed, closed, or written to again."
  overridden: "java.nio.file.spi.FileSystemProvider.newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)"
  parameters:
  - description: "the path to the file to open or create"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  - description: "options specifying how the file is opened"
    name: "options"
    type: "<xref href=\"java.nio.file.OpenOption?alt=java.nio.file.OpenOption&text=OpenOption\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public OutputStream newOutputStream(Path path, OpenOption[] options)"
  exceptions:
  - description: "if an invalid combination of options is specified"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "a new output stream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.blob.nio"
artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
