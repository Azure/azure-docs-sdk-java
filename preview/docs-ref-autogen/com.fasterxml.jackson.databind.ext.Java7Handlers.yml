### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.ext.Java7Handlers"
fullName: "com.fasterxml.jackson.databind.ext.Java7Handlers"
name: "Java7Handlers"
nameWithType: "Java7Handlers"
summary: "To support Java7-incomplete platforms, we will offer support for JDK 7 datatype(s) (that is, <xref uid=\"java.nio.file.Path\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.nio.file.Path\"></xref> through this class, loaded dynamically; if loading fails, support will be missing. This class is the non-JDK-7-dependent API, and <xref uid=\"com.fasterxml.jackson.databind.ext.Java7HandlersImpl\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Java7HandlersImpl\"></xref> is JDK7-dependent implementation of functionality."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class Java7Handlers"
constructors:
- "com.fasterxml.jackson.databind.ext.Java7Handlers.Java7Handlers()"
methods:
- "com.fasterxml.jackson.databind.ext.Java7Handlers.getClassJavaNioFilePath()"
- "com.fasterxml.jackson.databind.ext.Java7Handlers.getDeserializerForJavaNioFilePath(java.lang.Class<?>)"
- "com.fasterxml.jackson.databind.ext.Java7Handlers.getSerializerForJavaNioFilePath(java.lang.Class<?>)"
- "com.fasterxml.jackson.databind.ext.Java7Handlers.instance()"
type: "class"
metadata: {}
package: "com.fasterxml.jackson.databind.ext"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
