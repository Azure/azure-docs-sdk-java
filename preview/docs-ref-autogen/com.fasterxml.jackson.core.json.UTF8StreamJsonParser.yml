### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  id: UTF8StreamJsonParser
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json
  children:
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,boolean)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,int,boolean)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._bufferRecyclable
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputBuffer
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputStream
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(java.lang.String,int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartCol
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartOffset
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartRow
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._objectCodec
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quadBuffer
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(java.lang.String,int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._symbols
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser._tokenIncomplete
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken()
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName()
  langs:
  - java
  name: UTF8StreamJsonParser
  nameWithType: UTF8StreamJsonParser
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  type: Class
  package: com.fasterxml.jackson.core.json
  summary: This is a concrete implementation of <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>, which is based on a <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">java.io.InputStream</xref> as the input source.
  syntax:
    content: public class UTF8StreamJsonParser extends ParserBase
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonParser
  - com.fasterxml.jackson.core.base.ParserMinimalBase
  - com.fasterxml.jackson.core.base.ParserBase
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  - com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  - com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.finishToken()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.getByteValue()
  - com.fasterxml.jackson.core.JsonParser.getCodec()
  - com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  - com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getInputSource()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.getObjectId()
  - com.fasterxml.jackson.core.JsonParser.getSchema()
  - com.fasterxml.jackson.core.JsonParser.getShortValue()
  - com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.getTypeId()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)
  - com.fasterxml.jackson.core.base.ParserBase._closeInput()
  - com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)
  - com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)
  - com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()
  - com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()
  - com.fasterxml.jackson.core.base.ParserBase._finishString()
  - com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()
  - com.fasterxml.jackson.core.base.ParserBase._getSourceReference()
  - com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserBase._handleEOF()
  - com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)
  - com.fasterxml.jackson.core.base.ParserBase._parseIntValue()
  - com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)
  - com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()
  - com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)
  - com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()
  - com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()
  - com.fasterxml.jackson.core.base.ParserBase.close()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()
  - com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()
  - com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()
  - com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()
  - com.fasterxml.jackson.core.base.ParserBase.getCurrentName()
  - com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()
  - com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()
  - com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()
  - com.fasterxml.jackson.core.base.ParserBase.getFloatValue()
  - com.fasterxml.jackson.core.base.ParserBase.getIntValue()
  - com.fasterxml.jackson.core.base.ParserBase.getLongValue()
  - com.fasterxml.jackson.core.base.ParserBase.getNumberType()
  - com.fasterxml.jackson.core.base.ParserBase.getNumberValue()
  - com.fasterxml.jackson.core.base.ParserBase.getParsingContext()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()
  - com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()
  - com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)
  - com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()
  - com.fasterxml.jackson.core.base.ParserBase.isClosed()
  - com.fasterxml.jackson.core.base.ParserBase.isNaN()
  - com.fasterxml.jackson.core.base.ParserBase.loadMore()
  - com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()
  - com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)
  - com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)
  - com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(java.lang.String,double)
  - com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)
  - com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)
  - com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)
  - com.fasterxml.jackson.core.base.ParserBase.version()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  - com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,boolean)
  id: UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable)
  nameWithType: UTF8StreamJsonParser.UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, boolean bufferRecyclable)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
    - id: in
      type: java.io.InputStream
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: sym
      type: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
    - id: inputBuffer
      type: byte[]
    - id: start
      type: int
    - id: end
      type: int
    - id: bufferRecyclable
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,int,boolean)
  id: UTF8StreamJsonParser(com.fasterxml.jackson.core.io.IOContext,int,java.io.InputStream,com.fasterxml.jackson.core.ObjectCodec,com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer,byte[],int,int,int,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, int bytesPreProcessed, boolean bufferRecyclable)
  nameWithType: UTF8StreamJsonParser.UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, int bytesPreProcessed, boolean bufferRecyclable)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, int bytesPreProcessed, boolean bufferRecyclable)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, ObjectCodec codec, ByteQuadsCanonicalizer sym, byte[] inputBuffer, int start, int end, int bytesPreProcessed, boolean bufferRecyclable)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: features
      type: int
    - id: in
      type: java.io.InputStream
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: sym
      type: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
    - id: inputBuffer
      type: byte[]
    - id: start
      type: int
    - id: end
      type: int
    - id: bytesPreProcessed
      type: int
    - id: bufferRecyclable
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._bufferRecyclable
  id: _bufferRecyclable
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _bufferRecyclable
  nameWithType: UTF8StreamJsonParser._bufferRecyclable
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._bufferRecyclable
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Flag that indicates whether the input buffer is recycable (and needs to be returned to recycler once we are done) or not.


    If it is not, it also means that parser can NOT modify underlying buffer.
  syntax:
    content: protected boolean _bufferRecyclable
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput()
  id: _closeInput()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _closeInput()
  nameWithType: UTF8StreamJsonParser._closeInput()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _closeInput()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64(com.fasterxml.jackson.core.Base64Variant)
  id: _decodeBase64(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _decodeBase64(Base64Variant b64variant)
  nameWithType: UTF8StreamJsonParser._decodeBase64(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64(Base64Variant b64variant)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Efficient handling for incremental parsing of base64-encoded textual content.
  syntax:
    content: protected final byte[] _decodeBase64(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError(int)
  id: _decodeCharForError(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _decodeCharForError(int firstByte)
  nameWithType: UTF8StreamJsonParser._decodeCharForError(int firstByte)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError(int firstByte)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected int _decodeCharForError(int firstByte)
    parameters:
    - id: firstByte
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped()
  id: _decodeEscaped()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _decodeEscaped()
  nameWithType: UTF8StreamJsonParser._decodeEscaped()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that sub-classes must implement to support escaped sequences in base64-encoded sections. Sub-classes that do not need base64 support can leave this as is
  syntax:
    content: protected char _decodeEscaped()
    return:
      type: char
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString()
  id: _finishAndReturnString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _finishAndReturnString()
  nameWithType: UTF8StreamJsonParser._finishAndReturnString()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected String _finishAndReturnString()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString()
  id: _finishString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _finishString()
  nameWithType: UTF8StreamJsonParser._finishString()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _finishString()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2(com.fasterxml.jackson.core.JsonToken)
  id: _getText2(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _getText2(JsonToken t)
  nameWithType: UTF8StreamJsonParser._getText2(JsonToken t)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2(JsonToken t)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final String _getText2(JsonToken t)
    parameters:
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos()
  id: _handleApos()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _handleApos()
  nameWithType: UTF8StreamJsonParser._handleApos()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected JsonToken _handleApos()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int,boolean)
  id: _handleInvalidNumberStart(int,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _handleInvalidNumberStart(int ch, boolean neg)
  nameWithType: UTF8StreamJsonParser._handleInvalidNumberStart(int ch, boolean neg)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart(int ch, boolean neg)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called if expected numeric value (due to leading sign) does not look like a number
  syntax:
    content: protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)
    parameters:
    - id: ch
      type: int
    - id: neg
      type: boolean
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int)
  id: _handleOddName(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _handleOddName(int ch)
  nameWithType: UTF8StreamJsonParser._handleOddName(int ch)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName(int ch)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called when we see non-white space character other than double quote, when expecting a field name. In standard mode will just throw an exception; but in non-standard modes may be able to parse name.
  syntax:
    content: protected String _handleOddName(int ch)
    parameters:
    - id: ch
      type: int
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(int)
  id: _handleUnexpectedValue(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _handleUnexpectedValue(int c)
  nameWithType: UTF8StreamJsonParser._handleUnexpectedValue(int c)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(int c)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for handling cases where first non-space character of an expected value token is not legal for standard JSON content.
  syntax:
    content: protected JsonToken _handleUnexpectedValue(int c)
    parameters:
    - id: c
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1
  id: _icLatin1
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _icLatin1
  nameWithType: UTF8StreamJsonParser._icLatin1
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._icLatin1
  type: Field
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected static final int[] _icLatin1
    return:
      type: int[]
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputBuffer
  id: _inputBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _inputBuffer
  nameWithType: UTF8StreamJsonParser._inputBuffer
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputBuffer
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Current buffer from which data is read; generally data is read into buffer from input source, but in some cases pre-loaded buffer is handed to the parser.
  syntax:
    content: protected byte[] _inputBuffer
    return:
      type: byte[]
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputStream
  id: _inputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _inputStream
  nameWithType: UTF8StreamJsonParser._inputStream
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputStream
  type: Field
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected InputStream _inputStream
    return:
      type: java.io.InputStream
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore()
  id: _loadMore()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _loadMore()
  nameWithType: UTF8StreamJsonParser._loadMore()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final boolean _loadMore()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed()
  id: _loadMoreGuaranteed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _loadMoreGuaranteed()
  nameWithType: UTF8StreamJsonParser._loadMoreGuaranteed()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _loadMoreGuaranteed()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse()
  id: _matchFalse()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _matchFalse()
  nameWithType: UTF8StreamJsonParser._matchFalse()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _matchFalse()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull()
  id: _matchNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _matchNull()
  nameWithType: UTF8StreamJsonParser._matchNull()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _matchNull()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(java.lang.String,int)
  id: _matchToken(java.lang.String,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _matchToken(String matchStr, int i)
  nameWithType: UTF8StreamJsonParser._matchToken(String matchStr, int i)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken(String matchStr, int i)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _matchToken(String matchStr, int i)
    parameters:
    - id: matchStr
      type: java.lang.String
    - id: i
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue()
  id: _matchTrue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _matchTrue()
  nameWithType: UTF8StreamJsonParser._matchTrue()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final void _matchTrue()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartCol
  id: _nameStartCol
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _nameStartCol
  nameWithType: UTF8StreamJsonParser._nameStartCol
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartCol
  type: Field
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected int _nameStartCol
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartOffset
  id: _nameStartOffset
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _nameStartOffset
  nameWithType: UTF8StreamJsonParser._nameStartOffset
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartOffset
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Value of <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser._inputPtr" data-throw-if-not-resolved="false">#_inputPtr</xref> at the time when the first character of name token was read. Used for calculating token location when requested; combined with <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser._currInputProcessed" data-throw-if-not-resolved="false">#_currInputProcessed</xref>, may be updated appropriately as needed.
  syntax:
    content: protected int _nameStartOffset
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartRow
  id: _nameStartRow
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _nameStartRow
  nameWithType: UTF8StreamJsonParser._nameStartRow
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nameStartRow
  type: Field
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected int _nameStartRow
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._objectCodec
  id: _objectCodec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _objectCodec
  nameWithType: UTF8StreamJsonParser._objectCodec
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._objectCodec
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Codec used for data binding when (if) requested; typically full `ObjectMapper`, but that abstract is not part of core package.
  syntax:
    content: protected ObjectCodec _objectCodec
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName()
  id: _parseAposName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _parseAposName()
  nameWithType: UTF8StreamJsonParser._parseAposName()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected String _parseAposName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod()
  id: _parseFloatThatStartsWithPeriod()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _parseFloatThatStartsWithPeriod()
  nameWithType: UTF8StreamJsonParser._parseFloatThatStartsWithPeriod()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final JsonToken _parseFloatThatStartsWithPeriod()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(int)
  id: _parseName(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _parseName(int i)
  nameWithType: UTF8StreamJsonParser._parseName(int i)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName(int i)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final String _parseName(int i)
    parameters:
    - id: i
      type: int
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber()
  id: _parseNegNumber()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _parseNegNumber()
  nameWithType: UTF8StreamJsonParser._parseNegNumber()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected JsonToken _parseNegNumber()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber(int)
  id: _parsePosNumber(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _parsePosNumber(int c)
  nameWithType: UTF8StreamJsonParser._parsePosNumber(int c)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber(int c)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Initial parsing method for number values. It needs to be able to parse enough input to be able to determine whether the value is to be considered a simple integer value, or a more generic decimal value: latter of which needs to be expressed as a floating point number. The basic rule is that if the number has no fractional or exponential part, it is an integer; otherwise a floating point number.


    Because much of input has to be processed in any case, no partial parsing is done: all input text will be stored for further processing. However, actual numeric value conversion will be deferred, since it is usually the most complicated and costliest part of processing.
  syntax:
    content: protected JsonToken _parsePosNumber(int c)
    parameters:
    - id: c
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quadBuffer
  id: _quadBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _quadBuffer
  nameWithType: UTF8StreamJsonParser._quadBuffer
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._quadBuffer
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Temporary buffer used for name parsing.
  syntax:
    content: protected int[] _quadBuffer
    return:
      type: int[]
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])
  id: _readBinary(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream,byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer)
  nameWithType: UTF8StreamJsonParser._readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: out
      type: java.io.OutputStream
    - id: buffer
      type: byte[]
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers()
  id: _releaseBuffers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _releaseBuffers()
  nameWithType: UTF8StreamJsonParser._releaseBuffers()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called to release internal buffers owned by the base reader. This may be called along with <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput*" data-throw-if-not-resolved="false">#_closeInput</xref> (for example, when explicitly closing this reader instance), or separately (if need be).
  syntax:
    content: protected void _releaseBuffers()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(int)
  id: _reportInvalidChar(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidChar(int c)
  nameWithType: UTF8StreamJsonParser._reportInvalidChar(int c)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar(int c)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidChar(int c)
    parameters:
    - id: c
      type: int
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(int)
  id: _reportInvalidInitial(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidInitial(int mask)
  nameWithType: UTF8StreamJsonParser._reportInvalidInitial(int mask)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial(int mask)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidInitial(int mask)
    parameters:
    - id: mask
      type: int
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int)
  id: _reportInvalidOther(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidOther(int mask)
  nameWithType: UTF8StreamJsonParser._reportInvalidOther(int mask)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int mask)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidOther(int mask)
    parameters:
    - id: mask
      type: int
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int,int)
  id: _reportInvalidOther(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidOther(int mask, int ptr)
  nameWithType: UTF8StreamJsonParser._reportInvalidOther(int mask, int ptr)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(int mask, int ptr)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidOther(int mask, int ptr)
    parameters:
    - id: mask
      type: int
    - id: ptr
      type: int
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(java.lang.String)
  id: _reportInvalidToken(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidToken(String matchedPart)
  nameWithType: UTF8StreamJsonParser._reportInvalidToken(String matchedPart)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String matchedPart)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidToken(String matchedPart)
    parameters:
    - id: matchedPart
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(java.lang.String,int)
  id: _reportInvalidToken(java.lang.String,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidToken(String matchedPart, int ptr)
  nameWithType: UTF8StreamJsonParser._reportInvalidToken(String matchedPart, int ptr)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String matchedPart, int ptr)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidToken(String matchedPart, int ptr)
    parameters:
    - id: matchedPart
      type: java.lang.String
    - id: ptr
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(java.lang.String,java.lang.String)
  id: _reportInvalidToken(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _reportInvalidToken(String matchedPart, String msg)
  nameWithType: UTF8StreamJsonParser._reportInvalidToken(String matchedPart, String msg)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(String matchedPart, String msg)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected void _reportInvalidToken(String matchedPart, String msg)
    parameters:
    - id: matchedPart
      type: java.lang.String
    - id: msg
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR()
  id: _skipCR()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _skipCR()
  nameWithType: UTF8StreamJsonParser._skipCR()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: We actually need to check the character value here (to see if we have \\n following \\r).
  syntax:
    content: protected final void _skipCR()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString()
  id: _skipString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _skipString()
  nameWithType: UTF8StreamJsonParser._skipString()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called to skim through rest of unparsed String value, if it is not needed. This can be done bit faster if contents need not be stored for future access.
  syntax:
    content: protected void _skipString()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._symbols
  id: _symbols
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _symbols
  nameWithType: UTF8StreamJsonParser._symbols
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._symbols
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Symbol table that contains field names encountered so far
  syntax:
    content: protected final ByteQuadsCanonicalizer _symbols
    return:
      type: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._tokenIncomplete
  id: _tokenIncomplete
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: _tokenIncomplete
  nameWithType: UTF8StreamJsonParser._tokenIncomplete
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._tokenIncomplete
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: Flag that indicates that the current token has not yet been fully processed, and needs to be finished for some access (or skipped to obtain the next token)
  syntax:
    content: protected boolean _tokenIncomplete
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken()
  id: finishToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: finishToken()
  nameWithType: UTF8StreamJsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that may be used to force full handling of the current token so that even if lazy processing is enabled, the whole contents are read for possible retrieval. This is usually used to ensure that the token end location is available, as well as token contents (similar to what calling, say <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters()" data-throw-if-not-resolved="false">#getTextCharacters()</xref>, would achieve).


    Note that for many dataformat implementations this method will not do anything; this is the default implementation unless overridden by sub-classes.
  syntax:
    content: public void finishToken()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getBinaryValue(Base64Variant b64variant)
  nameWithType: UTF8StreamJsonParser.getBinaryValue(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue(Base64Variant b64variant)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public byte[] getBinaryValue(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getCodec()
  nameWithType: UTF8StreamJsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Accessor for <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readValueAs*" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: UTF8StreamJsonParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that returns location of the last processed character; usually for error reporting purposes
  syntax:
    content: public JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource()
  id: getInputSource()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getInputSource()
  nameWithType: UTF8StreamJsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that can be used to get access to object that is used to access input being parsed; this is usually either <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>, depending on what parser was constructed with. Note that returned value may be null in some cases; including case where parser implementation does not want to exposed raw source to caller. In cases where input has been decorated, object returned here is the decorated version; this allows some level of interaction between users of parser and decorator object.


    In general use of this accessor should be considered as "last effort", i.e. only used if no other mechanism is applicable.
  syntax:
    content: public Object getInputSource()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText()
  id: getText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getText()
  nameWithType: UTF8StreamJsonParser.getText()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method for accessing textual representation of the current token; if no current token (before first call to <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or after encountering end-of-input), returns null. Method can be called for any token type.
  syntax:
    content: public String getText()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(java.io.Writer)
  id: getText(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getText(Writer writer)
  nameWithType: UTF8StreamJsonParser.getText(Writer writer)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(Writer writer)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method to read the textual representation of the current token in chunks and pass it to the given Writer. Conceptually same as calling:


    ```java

    writer.write(parser.getText());

    ```


    but should typically be more efficient as longer content does need to be combined into a single `String` to return, and write can occur directly from intermediate buffers Jackson uses.
  syntax:
    content: public int getText(Writer writer)
    parameters:
    - id: writer
      type: java.io.Writer
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters()
  id: getTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getTextCharacters()
  nameWithType: UTF8StreamJsonParser.getTextCharacters()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref>, but that will return underlying (unmodifiable) character array that contains textual value, instead of constructing a String object to contain this information. Note, however, that:

     *  Textual contents are not guaranteed to start at index 0 (rather, call <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset*" data-throw-if-not-resolved="false">#getTextOffset</xref>) to know the actual offset
     *  Length of textual contents may be less than the length of returned buffer: call <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength*" data-throw-if-not-resolved="false">#getTextLength</xref> for actual length of returned content.

    Note that caller **MUST NOT** modify the returned character array in any way -- doing so may corrupt current parser state and render parser instance useless.


    The only reason to call this method (over <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText*" data-throw-if-not-resolved="false">#getText</xref>) is to avoid construction of a String object (which will make a copy of contents).
  syntax:
    content: public char[] getTextCharacters()
    return:
      type: char[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength()
  id: getTextLength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getTextLength()
  nameWithType: UTF8StreamJsonParser.getTextLength()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know length of String stored in returned buffer.
  syntax:
    content: public int getTextLength()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset()
  id: getTextOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getTextOffset()
  nameWithType: UTF8StreamJsonParser.getTextOffset()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know offset of the first text content character within buffer.
  syntax:
    content: public int getTextOffset()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getTokenLocation()
  nameWithType: UTF8StreamJsonParser.getTokenLocation()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt()
  id: getValueAsInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getValueAsInt()
  nameWithType: UTF8StreamJsonParser.getValueAsInt()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) default value of **0** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int)
  id: getValueAsInt(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getValueAsInt(int defValue)
  nameWithType: UTF8StreamJsonParser.getValueAsInt(int defValue)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt(int defValue)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt(int defValue)
    parameters:
    - id: defValue
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString()
  id: getValueAsString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getValueAsString()
  nameWithType: UTF8StreamJsonParser.getValueAsString()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), default value of **null** will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(java.lang.String)
  id: getValueAsString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: getValueAsString(String defValue)
  nameWithType: UTF8StreamJsonParser.getValueAsString(String defValue)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString(String defValue)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), specified default value will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString(String defValue)
    parameters:
    - id: defValue
      type: java.lang.String
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue()
  id: nextBooleanValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextBooleanValue()
  nameWithType: UTF8StreamJsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_TRUE" data-throw-if-not-resolved="false">JsonToken#VALUE_TRUE</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_FALSE" data-throw-if-not-resolved="false">JsonToken#VALUE_FALSE</xref> returns matching Boolean value; otherwise return null. It is functionally equivalent to:


    ```java

    JsonToken t = nextToken();
      if (t == JsonToken.VALUE_TRUE) return Boolean.TRUE;
      if (t == JsonToken.VALUE_FALSE) return Boolean.FALSE;
      return null;
    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get a Boolean value next from input.
  syntax:
    content: public Boolean nextBooleanValue()
    return:
      type: java.lang.Boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName()
  id: nextFieldName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextFieldName()
  nameWithType: UTF8StreamJsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and verifies whether it is <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>; if it is, returns same as <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentName*" data-throw-if-not-resolved="false">#getCurrentName()</xref>, otherwise null.
  syntax:
    content: public String nextFieldName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  id: nextFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextFieldName(SerializableString str)
  nameWithType: UTF8StreamJsonParser.nextFieldName(SerializableString str)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName(SerializableString str)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and verifies whether it is <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> with specified name and returns result of that comparison. It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.FIELD_NAME) && str.getValue().equals(getCurrentName());

    ```


    but may be faster for parser to verify, and can therefore be used if caller expects to get such a property name from input next.
  syntax:
    content: public boolean nextFieldName(SerializableString str)
    parameters:
    - id: str
      type: com.fasterxml.jackson.core.SerializableString
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int)
  id: nextIntValue(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextIntValue(int defaultValue)
  nameWithType: UTF8StreamJsonParser.nextIntValue(int defaultValue)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue(int defaultValue)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> returns 32-bit int value; otherwise returns specified default value It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;

    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get an int value next from input.
  syntax:
    content: public int nextIntValue(int defaultValue)
    parameters:
    - id: defaultValue
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long)
  id: nextLongValue(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextLongValue(long defaultValue)
  nameWithType: UTF8StreamJsonParser.nextLongValue(long defaultValue)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue(long defaultValue)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> returns 64-bit long value; otherwise returns specified default value It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;

    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get a long value next from input.
  syntax:
    content: public long nextLongValue(long defaultValue)
    parameters:
    - id: defaultValue
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue()
  id: nextTextValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextTextValue()
  nameWithType: UTF8StreamJsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: >-
    Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and if it is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_STRING" data-throw-if-not-resolved="false">JsonToken#VALUE_STRING</xref> returns contained String value; otherwise returns null. It is functionally equivalent to:


    ```java

    return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;

    ```


    but may be faster for parser to process, and can therefore be used if caller expects to get a String value next from input.
  syntax:
    content: public String nextTextValue()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken()
  id: nextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: nextToken()
  nameWithType: UTF8StreamJsonParser.nextToken()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Main iteration method, which will advance stream enough to determine type of the next token, if any. If none remaining (stream has no content other than possible white space before ending), null will be returned.
  syntax:
    content: public JsonToken nextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
      description: >-
        Next token from the stream, if any found, or null
           to indicate end-of-input
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[],int,int,int,int)
  id: parseEscapedName(int[],int,int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes)
  nameWithType: UTF8StreamJsonParser.parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Slower parsing method which is generally branched to when an escape sequence is detected (or alternatively for long names, one crossing input buffer boundary). Needs to be able to handle more exceptional cases, gets slower, and hence is offlined to a separate method.
  syntax:
    content: protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch, int currQuadBytes)
    parameters:
    - id: quads
      type: int[]
    - id: qlen
      type: int
    - id: currQuad
      type: int
    - id: ch
      type: int
    - id: currQuadBytes
      type: int
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int,int,int)
  id: parseLongName(int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: parseLongName(int q, int q2, int q3)
  nameWithType: UTF8StreamJsonParser.parseLongName(int q, int q2, int q3)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName(int q, int q2, int q3)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final String parseLongName(int q, int q2, int q3)
    parameters:
    - id: q
      type: int
    - id: q2
      type: int
    - id: q3
      type: int
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(int)
  id: parseMediumName(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: parseMediumName(int q2)
  nameWithType: UTF8StreamJsonParser.parseMediumName(int q2)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName(int q2)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final String parseMediumName(int q2)
    parameters:
    - id: q2
      type: int
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int,int)
  id: parseMediumName2(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: parseMediumName2(int q3, int q2)
  nameWithType: UTF8StreamJsonParser.parseMediumName2(int q3, int q2)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2(int q3, int q2)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: protected final String parseMediumName2(int q3, int q2)
    parameters:
    - id: q3
      type: int
    - id: q2
      type: int
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  id: readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: readBinaryValue(Base64Variant b64variant, OutputStream out)
  nameWithType: UTF8StreamJsonParser.readBinaryValue(Base64Variant b64variant, OutputStream out)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue(Base64Variant b64variant, OutputStream out)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Similar to <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue*" data-throw-if-not-resolved="false">#readBinaryValue(OutputStream)</xref> but allows explicitly specifying base64 variant to use.
  syntax:
    content: public int readBinaryValue(Base64Variant b64variant, OutputStream out)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: out
      type: java.io.OutputStream
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(java.io.OutputStream)
  id: releaseBuffered(java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: releaseBuffered(OutputStream out)
  nameWithType: UTF8StreamJsonParser.releaseBuffered(OutputStream out)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered(OutputStream out)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that can be called to push back any content that has been read but not consumed by the parser. This is usually done after reading all content of interest using parser. Content is released by writing it to given stream if possible; if underlying input is byte-based it can released, if not (char-based) it can not.
  syntax:
    content: public int releaseBuffered(OutputStream out)
    parameters:
    - id: out
      type: java.io.OutputStream
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: setCodec(ObjectCodec c)
  nameWithType: UTF8StreamJsonParser.setCodec(ObjectCodec c)
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec(ObjectCodec c)
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Setter that allows defining <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readValueAs*" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public void setCodec(ObjectCodec c)
    parameters:
    - id: c
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName()
  id: slowParseName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.UTF8StreamJsonParser
  langs:
  - java
  name: slowParseName()
  nameWithType: UTF8StreamJsonParser.slowParseName()
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName()
  overload: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method called when not even first 8 bytes are guaranteed to come consecutively. Happens rarely, so this is offlined; plus we'll also do full checks for escaping etc.
  syntax:
    content: protected String slowParseName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.io.IOContext
  name: IOContext
  nameWithType: IOContext
  fullName: com.fasterxml.jackson.core.io.IOContext
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
  name: ByteQuadsCanonicalizer
  nameWithType: ByteQuadsCanonicalizer
  fullName: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser*
  name: UTF8StreamJsonParser
  nameWithType: UTF8StreamJsonParser.UTF8StreamJsonParser
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.UTF8StreamJsonParser
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec*
  name: getCodec
  nameWithType: UTF8StreamJsonParser.getCodec
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCodec
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec*
  name: setCodec
  nameWithType: UTF8StreamJsonParser.setCodec
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.setCodec
  package: com.fasterxml.jackson.core.json
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered*
  name: releaseBuffered
  nameWithType: UTF8StreamJsonParser.releaseBuffered
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.releaseBuffered
  package: com.fasterxml.jackson.core.json
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource*
  name: getInputSource
  nameWithType: UTF8StreamJsonParser.getInputSource
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getInputSource
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore*
  name: _loadMore
  nameWithType: UTF8StreamJsonParser._loadMore
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMore
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput*
  name: _closeInput
  nameWithType: UTF8StreamJsonParser._closeInput
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._closeInput
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers*
  name: _releaseBuffers
  nameWithType: UTF8StreamJsonParser._releaseBuffers
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._releaseBuffers
  package: com.fasterxml.jackson.core.json
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText*
  name: getText
  nameWithType: UTF8StreamJsonParser.getText
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText
  package: com.fasterxml.jackson.core.json
- uid: java.io.Writer
  spec.java:
  - uid: java.io.Writer
    name: Writer
    fullName: java.io.Writer
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString*
  name: getValueAsString
  nameWithType: UTF8StreamJsonParser.getValueAsString
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsString
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt*
  name: getValueAsInt
  nameWithType: UTF8StreamJsonParser.getValueAsInt
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getValueAsInt
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2*
  name: _getText2
  nameWithType: UTF8StreamJsonParser._getText2
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._getText2
  package: com.fasterxml.jackson.core.json
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters*
  name: getTextCharacters
  nameWithType: UTF8StreamJsonParser.getTextCharacters
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextCharacters
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength*
  name: getTextLength
  nameWithType: UTF8StreamJsonParser.getTextLength
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextLength
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset*
  name: getTextOffset
  nameWithType: UTF8StreamJsonParser.getTextOffset
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTextOffset
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue*
  name: getBinaryValue
  nameWithType: UTF8StreamJsonParser.getBinaryValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getBinaryValue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue*
  name: readBinaryValue
  nameWithType: UTF8StreamJsonParser.readBinaryValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.readBinaryValue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary*
  name: _readBinary
  nameWithType: UTF8StreamJsonParser._readBinary
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._readBinary
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken*
  name: nextToken
  nameWithType: UTF8StreamJsonParser.nextToken
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken*
  name: finishToken
  nameWithType: UTF8StreamJsonParser.finishToken
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.finishToken
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName*
  name: nextFieldName
  nameWithType: UTF8StreamJsonParser.nextFieldName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextFieldName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue*
  name: nextTextValue
  nameWithType: UTF8StreamJsonParser.nextTextValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextTextValue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue*
  name: nextIntValue
  nameWithType: UTF8StreamJsonParser.nextIntValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextIntValue
  package: com.fasterxml.jackson.core.json
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue*
  name: nextLongValue
  nameWithType: UTF8StreamJsonParser.nextLongValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextLongValue
  package: com.fasterxml.jackson.core.json
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue*
  name: nextBooleanValue
  nameWithType: UTF8StreamJsonParser.nextBooleanValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextBooleanValue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod*
  name: _parseFloatThatStartsWithPeriod
  nameWithType: UTF8StreamJsonParser._parseFloatThatStartsWithPeriod
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseFloatThatStartsWithPeriod
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber*
  name: _parsePosNumber
  nameWithType: UTF8StreamJsonParser._parsePosNumber
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parsePosNumber
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber*
  name: _parseNegNumber
  nameWithType: UTF8StreamJsonParser._parseNegNumber
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseNegNumber
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName*
  name: _parseName
  nameWithType: UTF8StreamJsonParser._parseName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName*
  name: parseMediumName
  nameWithType: UTF8StreamJsonParser.parseMediumName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2*
  name: parseMediumName2
  nameWithType: UTF8StreamJsonParser.parseMediumName2
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseMediumName2
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName*
  name: parseLongName
  nameWithType: UTF8StreamJsonParser.parseLongName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseLongName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName*
  name: slowParseName
  nameWithType: UTF8StreamJsonParser.slowParseName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.slowParseName
  package: com.fasterxml.jackson.core.json
- uid: int[]
  spec.java:
  - uid: int
    name: int
    fullName: int
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName*
  name: parseEscapedName
  nameWithType: UTF8StreamJsonParser.parseEscapedName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.parseEscapedName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName*
  name: _handleOddName
  nameWithType: UTF8StreamJsonParser._handleOddName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleOddName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName*
  name: _parseAposName
  nameWithType: UTF8StreamJsonParser._parseAposName
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._parseAposName
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed*
  name: _loadMoreGuaranteed
  nameWithType: UTF8StreamJsonParser._loadMoreGuaranteed
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._loadMoreGuaranteed
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString*
  name: _finishString
  nameWithType: UTF8StreamJsonParser._finishString
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString*
  name: _finishAndReturnString
  nameWithType: UTF8StreamJsonParser._finishAndReturnString
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString*
  name: _skipString
  nameWithType: UTF8StreamJsonParser._skipString
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipString
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue*
  name: _handleUnexpectedValue
  nameWithType: UTF8StreamJsonParser._handleUnexpectedValue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos*
  name: _handleApos
  nameWithType: UTF8StreamJsonParser._handleApos
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleApos
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart*
  name: _handleInvalidNumberStart
  nameWithType: UTF8StreamJsonParser._handleInvalidNumberStart
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleInvalidNumberStart
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue*
  name: _matchTrue
  nameWithType: UTF8StreamJsonParser._matchTrue
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchTrue
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse*
  name: _matchFalse
  nameWithType: UTF8StreamJsonParser._matchFalse
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchFalse
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull*
  name: _matchNull
  nameWithType: UTF8StreamJsonParser._matchNull
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchNull
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken*
  name: _matchToken
  nameWithType: UTF8StreamJsonParser._matchToken
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._matchToken
  package: com.fasterxml.jackson.core.json
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped*
  name: _decodeEscaped
  nameWithType: UTF8StreamJsonParser._decodeEscaped
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeEscaped
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError*
  name: _decodeCharForError
  nameWithType: UTF8StreamJsonParser._decodeCharForError
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeCharForError
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR*
  name: _skipCR
  nameWithType: UTF8StreamJsonParser._skipCR
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._skipCR
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken*
  name: _reportInvalidToken
  nameWithType: UTF8StreamJsonParser._reportInvalidToken
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar*
  name: _reportInvalidChar
  nameWithType: UTF8StreamJsonParser._reportInvalidChar
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidChar
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial*
  name: _reportInvalidInitial
  nameWithType: UTF8StreamJsonParser._reportInvalidInitial
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidInitial
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther*
  name: _reportInvalidOther
  nameWithType: UTF8StreamJsonParser._reportInvalidOther
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64*
  name: _decodeBase64
  nameWithType: UTF8StreamJsonParser._decodeBase64
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeBase64
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation*
  name: getTokenLocation
  nameWithType: UTF8StreamJsonParser.getTokenLocation
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getTokenLocation
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: UTF8StreamJsonParser.getCurrentLocation
  fullName: com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getCurrentLocation
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.base.ParserBase
  name: ParserBase
  nameWithType: ParserBase
  fullName: com.fasterxml.jackson.core.base.ParserBase
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  name: ParserMinimalBase._asciiBytes(String)
  nameWithType: ParserMinimalBase._asciiBytes(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()
  name: ParserBase.loadMoreGuaranteed()
  nameWithType: ParserBase.loadMoreGuaranteed()
  fullName: com.fasterxml.jackson.core.base.ParserBase.loadMoreGuaranteed()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()
  name: ParserBase.getTokenCharacterOffset()
  nameWithType: ParserBase.getTokenCharacterOffset()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenCharacterOffset()
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  name: JsonParser.canReadTypeId()
  nameWithType: JsonParser.canReadTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  name: ParserMinimalBase._reportInvalidEOFInValue()
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
- uid: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()
  name: ParserBase._getByteArrayBuilder()
  nameWithType: ParserBase._getByteArrayBuilder()
  fullName: com.fasterxml.jackson.core.base.ParserBase._getByteArrayBuilder()
- uid: com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)
  name: ParserBase.resetFloat(boolean,int,int,int)
  nameWithType: ParserBase.resetFloat(boolean,int,int,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetFloat(boolean,int,int,int)
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  name: JsonParser.readBinaryValue(OutputStream)
  nameWithType: JsonParser.readBinaryValue(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  name: ParserMinimalBase.reportOverflowLong()
  nameWithType: ParserMinimalBase.reportOverflowLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId()
  name: JsonParser.getObjectId()
  nameWithType: JsonParser.getObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId()
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  name: JsonParser.canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
- uid: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()
  name: ParserBase.getDoubleValue()
  nameWithType: ParserBase.getDoubleValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getDoubleValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  name: ParserMinimalBase._getCharDesc(int)
  nameWithType: ParserMinimalBase._getCharDesc(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()
  name: ParserBase.convertNumberToBigInteger()
  nameWithType: ParserBase.convertNumberToBigInteger()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigInteger()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  name: ParserMinimalBase.getValueAsInt(int)
  nameWithType: ParserMinimalBase.getValueAsInt(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  name: ParserMinimalBase.getText()
  nameWithType: ParserMinimalBase.getText()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  name: ParserMinimalBase.reportOverflowLong(String)
  nameWithType: ParserMinimalBase.reportOverflowLong(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentName()
  name: ParserBase.getCurrentName()
  nameWithType: ParserBase.getCurrentName()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentName()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()
  name: ParserBase.getCurrentLocation()
  nameWithType: ParserBase.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentLocation()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.base.ParserBase._finishString()
  name: ParserBase._finishString()
  nameWithType: ParserBase._finishString()
  fullName: com.fasterxml.jackson.core.base.ParserBase._finishString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  name: ParserMinimalBase._reportInvalidEOF()
  nameWithType: ParserMinimalBase._reportInvalidEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
- uid: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)
  name: ParserBase._checkStdFeatureChanges(int,int)
  nameWithType: ParserBase._checkStdFeatureChanges(int,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase._checkStdFeatureChanges(int,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  name: ParserMinimalBase.nextValue()
  nameWithType: ParserMinimalBase.nextValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)
  name: ParserBase._decodeBase64Escape(Base64Variant,int,int)
  nameWithType: ParserBase._decodeBase64Escape(Base64Variant,int,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,int,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  name: ParserMinimalBase._longNumberDesc(String)
  nameWithType: ParserMinimalBase._longNumberDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  name: ParserMinimalBase._longIntegerDesc(String)
  nameWithType: ParserMinimalBase._longIntegerDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  name: JsonParser.getBooleanValue()
  nameWithType: JsonParser.getBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
- uid: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()
  name: ParserBase.hasTextCharacters()
  nameWithType: ParserBase.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserBase.hasTextCharacters()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  name: JsonParser.getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  name: JsonParser.canReadObjectId()
  nameWithType: JsonParser.canReadObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)
  name: ParserBase._decodeBase64Escape(Base64Variant,char,int)
  nameWithType: ParserBase._decodeBase64Escape(Base64Variant,char,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeBase64Escape(com.fasterxml.jackson.core.Base64Variant,char,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  name: JsonParser.setRequestPayloadOnError(String)
  nameWithType: JsonParser.setRequestPayloadOnError(String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.getIntValue()
  name: ParserBase.getIntValue()
  nameWithType: ParserBase.getIntValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getIntValue()
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  name: JsonParser.isEnabled(StreamReadFeature)
  nameWithType: JsonParser.isEnabled(StreamReadFeature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
- uid: com.fasterxml.jackson.core.base.ParserBase.getLongValue()
  name: ParserBase.getLongValue()
  nameWithType: ParserBase.getLongValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getLongValue()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  name: JsonParser.<T>readValueAs(TypeReference<?>)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
- uid: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(java.lang.String,double)
  name: ParserBase.resetAsNaN(String,double)
  nameWithType: ParserBase.resetAsNaN(String,double)
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetAsNaN(java.lang.String,double)
- uid: com.fasterxml.jackson.core.base.ParserBase._closeInput()
  name: ParserBase._closeInput()
  nameWithType: ParserBase._closeInput()
  fullName: com.fasterxml.jackson.core.base.ParserBase._closeInput()
- uid: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  name: ParserBase.getBinaryValue(Base64Variant)
  nameWithType: ParserBase.getBinaryValue(Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource()
  name: JsonParser.getInputSource()
  nameWithType: JsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource()
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()
  name: ParserBase.getTokenColumnNr()
  nameWithType: ParserBase.getTokenColumnNr()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenColumnNr()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  name: ParserMinimalBase._throwInternal()
  nameWithType: ParserMinimalBase._throwInternal()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
- uid: com.fasterxml.jackson.core.base.ParserBase._parseIntValue()
  name: ParserBase._parseIntValue()
  nameWithType: ParserBase._parseIntValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase._parseIntValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._wrapError(String,Throwable)
  nameWithType: ParserMinimalBase._wrapError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  name: ParserMinimalBase._reportError(String)
  nameWithType: ParserMinimalBase._reportError(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  name: ParserMinimalBase._reportMissingRootWS(int)
  nameWithType: ParserMinimalBase._reportMissingRootWS(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  name: ParserMinimalBase.getValueAsLong()
  nameWithType: ParserMinimalBase.getValueAsLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  name: ParserMinimalBase.isExpectedStartArrayToken()
  nameWithType: ParserMinimalBase.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  name: ParserMinimalBase.getLastClearedToken()
  nameWithType: ParserMinimalBase.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  name: JsonParser.<T>readValuesAs(Class<T>)
  nameWithType: JsonParser.<T>readValuesAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.base.ParserBase._handleEOF()
  name: ParserBase._handleEOF()
  nameWithType: ParserBase._handleEOF()
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleEOF()
- uid: com.fasterxml.jackson.core.JsonParser.getCodec()
  name: JsonParser.getCodec()
  nameWithType: JsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec()
- uid: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonParser.setCodec(ObjectCodec)
  nameWithType: JsonParser.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  name: JsonParser.currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()
  name: ParserBase.convertNumberToBigDecimal()
  nameWithType: ParserBase.convertNumberToBigDecimal()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToBigDecimal()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  name: ParserMinimalBase.hasCurrentToken()
  nameWithType: ParserMinimalBase.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  name: ParserMinimalBase.clearCurrentToken()
  nameWithType: ParserMinimalBase.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  name: JsonParser.requiresCustomCodec()
  nameWithType: JsonParser.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  name: JsonParser._reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  name: JsonParser.getValueAsDouble()
  nameWithType: JsonParser.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  name: ParserMinimalBase.getValueAsInt()
  nameWithType: ParserMinimalBase.getValueAsInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  name: ParserMinimalBase._reportInvalidEOF(String)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,java.lang.String)
  name: ParserBase._throwUnquotedSpace(int,String)
  nameWithType: ParserBase._throwUnquotedSpace(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserBase._throwUnquotedSpace(int,java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()
  name: ParserBase.getTokenLocation()
  nameWithType: ParserBase.getTokenLocation()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenLocation()
- uid: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)
  name: ParserBase.overrideCurrentName(String)
  nameWithType: ParserBase.overrideCurrentName(String)
  fullName: com.fasterxml.jackson.core.base.ParserBase.overrideCurrentName(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()
  name: ParserBase.getDecimalValue()
  nameWithType: ParserBase.getDecimalValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getDecimalValue()
- uid: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)
  name: ParserBase.reportInvalidBase64Char(Base64Variant,int,int)
  nameWithType: ParserBase.reportInvalidBase64Char(Base64Variant,int,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int)
- uid: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()
  name: ParserBase._validJsonTokenList()
  nameWithType: ParserBase._validJsonTokenList()
  fullName: com.fasterxml.jackson.core.base.ParserBase._validJsonTokenList()
- uid: com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)
  name: ParserBase.reset(boolean,int,int,int)
  nameWithType: ParserBase.reset(boolean,int,int,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.reset(boolean,int,int,int)
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  name: JsonParser.nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  name: ParserMinimalBase.currentToken()
  nameWithType: ParserMinimalBase.currentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  name: JsonParser.<T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  name: ParserMinimalBase.getTextOffset()
  nameWithType: ParserMinimalBase.getTextOffset()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId()
  name: JsonParser.getTypeId()
  nameWithType: JsonParser.getTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  name: ParserMinimalBase.getTextLength()
  nameWithType: ParserMinimalBase.getTextLength()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  name: ParserMinimalBase.skipChildren()
  nameWithType: ParserMinimalBase.skipChildren()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
- uid: com.fasterxml.jackson.core.base.ParserBase.version()
  name: ParserBase.version()
  nameWithType: ParserBase.version()
  fullName: com.fasterxml.jackson.core.base.ParserBase.version()
- uid: com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: ParserBase.enable(JsonParser.Feature)
  nameWithType: ParserBase.enable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.base.ParserBase.enable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  name: JsonParser.getEmbeddedObject()
  nameWithType: JsonParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
- uid: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)
  name: ParserBase._handleUnrecognizedCharacterEscape(char)
  nameWithType: ParserBase._handleUnrecognizedCharacterEscape(char)
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleUnrecognizedCharacterEscape(char)
- uid: com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: ParserBase.disable(JsonParser.Feature)
  nameWithType: ParserBase.disable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.base.ParserBase.disable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  name: JsonParser.nextIntValue(int)
  nameWithType: JsonParser.nextIntValue(int)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.canUseSchema(FormatSchema)
  nameWithType: JsonParser.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.base.ParserBase.isClosed()
  name: ParserBase.isClosed()
  nameWithType: ParserBase.isClosed()
  fullName: com.fasterxml.jackson.core.base.ParserBase.isClosed()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  name: JsonParser.<T>readValueAs(Class<T>)
  nameWithType: JsonParser.<T>readValueAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  name: JsonParser.setRequestPayloadOnError(RequestPayload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
- uid: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()
  name: ParserBase.getBigIntegerValue()
  nameWithType: ParserBase.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getBigIntegerValue()
- uid: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)
  name: ParserBase.setCurrentValue(Object)
  nameWithType: ParserBase.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.base.ParserBase.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)
  name: ParserBase.overrideStdFeatures(int,int)
  nameWithType: ParserBase.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  name: JsonParser.releaseBuffered(OutputStream)
  nameWithType: JsonParser.releaseBuffered(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.isEnabled(JsonParser.Feature)
  nameWithType: JsonParser.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  name: JsonParser.getText(Writer)
  nameWithType: JsonParser.getText(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  name: ParserMinimalBase.getCurrentToken()
  nameWithType: ParserMinimalBase.getCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
- uid: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()
  name: ParserBase.getCurrentValue()
  nameWithType: ParserBase.getCurrentValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getCurrentValue()
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()
  name: ParserBase.convertNumberToDouble()
  nameWithType: ParserBase.convertNumberToDouble()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToDouble()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  name: JsonParser.nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
- uid: com.fasterxml.jackson.core.base.ParserBase.getNumberType()
  name: ParserBase.getNumberType()
  nameWithType: ParserBase.getNumberType()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getNumberType()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()
  name: ParserBase.getTokenLineNr()
  nameWithType: ParserBase.getTokenLineNr()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getTokenLineNr()
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  name: JsonParser._codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  name: JsonParser.nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  name: ParserMinimalBase.currentTokenId()
  nameWithType: ParserMinimalBase.currentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  name: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  nameWithType: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  name: ParserMinimalBase._ascii(byte[])
  nameWithType: ParserMinimalBase._ascii(byte[])
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  nameWithType: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.finishToken()
  name: JsonParser.finishToken()
  nameWithType: JsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  name: ParserMinimalBase.getValueAsBoolean(boolean)
  nameWithType: ParserMinimalBase.getValueAsBoolean(boolean)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  name: JsonParser.nextLongValue(long)
  nameWithType: JsonParser.nextLongValue(long)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
- uid: com.fasterxml.jackson.core.base.ParserBase.loadMore()
  name: ParserBase.loadMore()
  nameWithType: ParserBase.loadMore()
  fullName: com.fasterxml.jackson.core.base.ParserBase.loadMore()
- uid: com.fasterxml.jackson.core.base.ParserBase.close()
  name: ParserBase.close()
  nameWithType: ParserBase.close()
  fullName: com.fasterxml.jackson.core.base.ParserBase.close()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  name: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  nameWithType: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue()
  name: JsonParser.getByteValue()
  nameWithType: JsonParser.getByteValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue()
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  name: JsonParser.getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  name: ParserMinimalBase._throwInvalidSpace(int)
  nameWithType: ParserMinimalBase._throwInvalidSpace(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  name: ParserMinimalBase._hasTextualNull(String)
  nameWithType: ParserMinimalBase._hasTextualNull(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  name: ParserMinimalBase.reportOverflowInt()
  nameWithType: ParserMinimalBase.reportOverflowInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()
  name: ParserBase.convertNumberToLong()
  nameWithType: ParserBase.convertNumberToLong()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToLong()
- uid: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()
  name: ParserBase._eofAsNextChar()
  nameWithType: ParserBase._eofAsNextChar()
  fullName: com.fasterxml.jackson.core.base.ParserBase._eofAsNextChar()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)
  name: ParserBase.resetInt(boolean,int)
  nameWithType: ParserBase.resetInt(boolean,int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.resetInt(boolean,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  name: ParserMinimalBase.getValueAsString(String)
  nameWithType: ParserMinimalBase.getValueAsString(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.getParsingContext()
  name: ParserBase.getParsingContext()
  nameWithType: ParserBase.getParsingContext()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getParsingContext()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  name: ParserMinimalBase.nextToken()
  nameWithType: ParserMinimalBase.nextToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
- uid: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()
  name: ParserBase._releaseBuffers()
  nameWithType: ParserBase._releaseBuffers()
  fullName: com.fasterxml.jackson.core.base.ParserBase._releaseBuffers()
- uid: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)
  name: ParserBase._parseNumericValue(int)
  nameWithType: ParserBase._parseNumericValue(int)
  fullName: com.fasterxml.jackson.core.base.ParserBase._parseNumericValue(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  name: ParserMinimalBase.getTextCharacters()
  nameWithType: ParserMinimalBase.getTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
- uid: com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)
  name: ParserBase.growArrayBy(int[],int)
  nameWithType: ParserBase.growArrayBy(int[],int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.growArrayBy(int[],int)
- uid: com.fasterxml.jackson.core.JsonParser.getSchema()
  name: JsonParser.getSchema()
  nameWithType: JsonParser.getSchema()
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._constructError(String,Throwable)
  nameWithType: ParserMinimalBase._constructError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  name: ParserMinimalBase.getCurrentTokenId()
  nameWithType: ParserMinimalBase.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  name: JsonParser.configure(JsonParser.Feature,boolean)
  nameWithType: JsonParser.configure(JsonParser.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.hasToken(JsonToken)
  nameWithType: ParserMinimalBase.hasToken(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)
  name: ParserBase._reportMismatchedEndMarker(int,char)
  nameWithType: ParserBase._reportMismatchedEndMarker(int,char)
  fullName: com.fasterxml.jackson.core.base.ParserBase._reportMismatchedEndMarker(int,char)
- uid: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)
  name: ParserBase.setFeatureMask(int)
  nameWithType: ParserBase.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.base.ParserBase.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  name: JsonParser.<T>readValuesAs(TypeReference<T>)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  name: JsonParser.overrideFormatFeatures(int,int)
  nameWithType: JsonParser.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  name: ParserMinimalBase.reportOverflowInt(String)
  nameWithType: ParserMinimalBase.reportOverflowInt(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase._getSourceReference()
  name: ParserBase._getSourceReference()
  nameWithType: ParserBase._getSourceReference()
  fullName: com.fasterxml.jackson.core.base.ParserBase._getSourceReference()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  name: ParserMinimalBase.getValueAsString()
  nameWithType: ParserMinimalBase.getValueAsString()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  name: ParserMinimalBase.isExpectedStartObjectToken()
  nameWithType: ParserMinimalBase.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  name: ParserMinimalBase.getValueAsDouble(double)
  nameWithType: ParserMinimalBase.getValueAsDouble(double)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  name: JsonParser.getFeatureMask()
  nameWithType: JsonParser.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
- uid: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()
  name: ParserBase.convertNumberToInt()
  nameWithType: ParserBase.convertNumberToInt()
  fullName: com.fasterxml.jackson.core.base.ParserBase.convertNumberToInt()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  name: ParserMinimalBase.hasTokenId(int)
  nameWithType: ParserMinimalBase.hasTokenId(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  name: ParserMinimalBase.getValueAsLong(long)
  nameWithType: ParserMinimalBase.getValueAsLong(long)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
- uid: com.fasterxml.jackson.core.base.ParserBase.getFloatValue()
  name: ParserBase.getFloatValue()
  nameWithType: ParserBase.getFloatValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getFloatValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  name: ParserMinimalBase.reportInvalidNumber(String)
  nameWithType: ParserMinimalBase.reportInvalidNumber(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.setSchema(FormatSchema)
  nameWithType: JsonParser.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  name: JsonParser.getValueAsBoolean()
  nameWithType: JsonParser.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
- uid: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()
  name: ParserBase._validJsonValueList()
  nameWithType: ParserBase._validJsonValueList()
  fullName: com.fasterxml.jackson.core.base.ParserBase._validJsonValueList()
- uid: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)
  name: ParserBase._handleBase64MissingPadding(Base64Variant)
  nameWithType: ParserBase._handleBase64MissingPadding(Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserBase._handleBase64MissingPadding(com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)
  name: ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)
  nameWithType: ParserBase.reportInvalidBase64Char(Base64Variant,int,int,String)
  fullName: com.fasterxml.jackson.core.base.ParserBase.reportInvalidBase64Char(com.fasterxml.jackson.core.Base64Variant,int,int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonParser.nextFieldName(SerializableString)
  nameWithType: JsonParser.nextFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.base.ParserBase.getNumberValue()
  name: ParserBase.getNumberValue()
  nameWithType: ParserBase.getNumberValue()
  fullName: com.fasterxml.jackson.core.base.ParserBase.getNumberValue()
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue()
  name: JsonParser.getShortValue()
  nameWithType: JsonParser.getShortValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  name: JsonParser.setRequestPayloadOnError(byte[],String)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[],String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  name: ParserMinimalBase._reportUnexpectedChar(int,String)
  nameWithType: ParserMinimalBase._reportUnexpectedChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()
  name: ParserBase._decodeEscaped()
  nameWithType: ParserBase._decodeEscaped()
  fullName: com.fasterxml.jackson.core.base.ParserBase._decodeEscaped()
- uid: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,java.lang.String)
  name: ParserBase._reportTooLongIntegral(int,String)
  nameWithType: ParserBase._reportTooLongIntegral(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserBase._reportTooLongIntegral(int,java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserBase.isNaN()
  name: ParserBase.isNaN()
  nameWithType: ParserBase.isNaN()
  fullName: com.fasterxml.jackson.core.base.ParserBase.isNaN()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  name: JsonParser.releaseBuffered(Writer)
  nameWithType: JsonParser.releaseBuffered(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  name: JsonParser._constructError(String)
  nameWithType: JsonParser._constructError(String)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  name: JsonParser.getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.core.JsonParser.
  name: JsonParser.
  nameWithType: JsonParser.
  fullName: com.fasterxml.jackson.core.JsonParser.
- uid: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValueAs(TypeReference
  nameWithType: T>readValueAs(TypeReference
  fullName: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
- uid: T>readValuesAs(java.lang.Class
  name: T>readValuesAs(Class
  nameWithType: T>readValuesAs(Class
  fullName: T>readValuesAs(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValueAsTree()
  name: T>readValueAsTree()
  nameWithType: T>readValueAsTree()
  fullName: T>readValueAsTree()
- uid: T>readValueAs(java.lang.Class
  name: T>readValueAs(Class
  nameWithType: T>readValueAs(Class
  fullName: T>readValueAs(java.lang.Class
- uid: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValuesAs(TypeReference
  nameWithType: T>readValuesAs(TypeReference
  fullName: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
