### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.EventProcessorClient"
fullName: "com.azure.messaging.eventhubs.EventProcessorClient"
name: "EventProcessorClient"
nameWithType: "EventProcessorClient"
summary: "Event<wbr>Processor<wbr>Client provides a convenient mechanism to consume events from all partitions of an Event Hub in the context of a consumer group."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **EventProcessorClient**"
methods:
- uid: "com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier()"
  fullName: "com.azure.messaging.eventhubs.EventProcessorClient.getIdentifier()"
  name: "getIdentifier()"
  nameWithType: "EventProcessorClient.getIdentifier()"
  summary: "The identifier is a unique name given to this event processor instance."
  syntax: "public String getIdentifier()"
  desc: "The identifier is a unique name given to this event processor instance."
  returns:
    description: "Identifier for this event processor."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.eventhubs.EventProcessorClient.isRunning()"
  fullName: "com.azure.messaging.eventhubs.EventProcessorClient.isRunning()"
  name: "isRunning()"
  nameWithType: "EventProcessorClient.isRunning()"
  summary: "Returns `true` if the event processor is running."
  modifiers:
  - "synchronized"
  syntax: "public synchronized boolean isRunning()"
  desc: "Returns `true` if the event processor is running. If the event processor is already running, calling <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> has no effect."
  returns:
    description: "<code>true</code> if the event processor is running."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.eventhubs.EventProcessorClient.start()"
  fullName: "com.azure.messaging.eventhubs.EventProcessorClient.start()"
  name: "start()"
  nameWithType: "EventProcessorClient.start()"
  summary: "Starts processing of events for all partitions of the Event Hub that this event processor can own, assigning a dedicated <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionProcessor\"></xref> to each partition."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void start()"
  desc: "Starts processing of events for all partitions of the Event Hub that this event processor can own, assigning a dedicated <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionProcessor\"></xref> to each partition. If there are other Event Processors active for the same consumer group on the Event Hub, responsibility for partitions will be shared between them.\n\nSubsequent calls to start will be ignored if this event processor is already running. Calling start after <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient.stop()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#stop()\"></xref> is called will restart this event processor.\n\n**Starting the processor to consume events from all partitions**\n\n```java\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\n\n // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n // \"<<event-hub-name>>\" will be the name of the Event Hub instance you created inside the Event Hubs namespace.\n EventProcessorClient eventProcessorClient = new EventProcessorClientBuilder()\n     .consumerGroup(EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME)\n     .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n         credential)\n     .processEvent(eventContext -> {\n         System.out.printf(\"Partition id = %s and sequence number of event = %s%n\",\n             eventContext.getPartitionContext().getPartitionId(),\n             eventContext.getEventData().getSequenceNumber());\n     })\n     .processError(errorContext -> {\n         System.out.printf(\"Error occurred in partition processor for partition %s, %s%n\",\n             errorContext.getPartitionContext().getPartitionId(),\n             errorContext.getThrowable());\n     })\n     .checkpointStore(new SampleCheckpointStore())\n     .buildEventProcessorClient();\n\n eventProcessorClient.start();\n\n // Continue to perform other tasks while the processor is running in the background.\n //\n // Finally, stop the processor client when application is finished.\n eventProcessorClient.stop();\n```"
- uid: "com.azure.messaging.eventhubs.EventProcessorClient.stop()"
  fullName: "com.azure.messaging.eventhubs.EventProcessorClient.stop()"
  name: "stop()"
  nameWithType: "EventProcessorClient.stop()"
  summary: "Stops processing events for all partitions owned by this event processor."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void stop()"
  desc: "Stops processing events for all partitions owned by this event processor. All <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionProcessor\"></xref> will be shutdown and any open resources will be closed.\n\nSubsequent calls to stop will be ignored if the event processor is not running or is being stopped.\n\nThis method will do the best effort to stop processing gracefully and will block for up to 10 seconds waiting for the processor to stop. Use <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient.stop(java.time.Duration)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#stop(Duration)\"></xref> overload to specify a different timeout.\n\n**Stopping the processor**\n\n```java\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\n\n // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n // \"<<event-hub-name>>\" will be the name of the Event Hub instance you created inside the Event Hubs namespace.\n EventProcessorClient eventProcessorClient = new EventProcessorClientBuilder()\n     .consumerGroup(EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME)\n     .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n         credential)\n     .processEvent(eventContext -> {\n         System.out.printf(\"Partition id = %s and sequence number of event = %s%n\",\n             eventContext.getPartitionContext().getPartitionId(),\n             eventContext.getEventData().getSequenceNumber());\n     })\n     .processError(errorContext -> {\n         System.out.printf(\"Error occurred in partition processor for partition %s, %s%n\",\n             errorContext.getPartitionContext().getPartitionId(),\n             errorContext.getThrowable());\n     })\n     .checkpointStore(new SampleCheckpointStore())\n     .buildEventProcessorClient();\n\n eventProcessorClient.start();\n\n // Continue to perform other tasks while the processor is running in the background.\n //\n // Finally, stop the processor client when application is finished.\n eventProcessorClient.stop();\n```"
- uid: "com.azure.messaging.eventhubs.EventProcessorClient.stop(java.time.Duration)"
  fullName: "com.azure.messaging.eventhubs.EventProcessorClient.stop(Duration timeout)"
  name: "stop(Duration timeout)"
  nameWithType: "EventProcessorClient.stop(Duration timeout)"
  summary: "Stops processing events for all partitions owned by this event processor."
  modifiers:
  - "synchronized"
  parameters:
  - description: "The maximum amount of time to wait for the processor to stop processing."
    name: "timeout"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html\">Duration</a>"
  syntax: "public synchronized void stop(Duration timeout)"
  desc: "Stops processing events for all partitions owned by this event processor. All <xref uid=\"com.azure.messaging.eventhubs.implementation.PartitionProcessor\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PartitionProcessor\"></xref> will be shutdown and any open resources will be closed.\n\nSubsequent calls to stop will be ignored if the event processor is not running or is being stopped."
type: "class"
desc: "EventProcessorClient provides a convenient mechanism to consume events from all partitions of an Event Hub in the context of a consumer group. Event Processor-based application consists of one or more instances of EventProcessorClient(s) which are set up to consume events from the same Event Hub, consumer group to balance the workload across different instances and track progress when events are processed. Based on the number of instances running, each EventProcessorClient may own zero or more partitions to balance the workload among all the instances.\n\n**Sample: Construct an <xref uid=\"com.azure.messaging.eventhubs.EventProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.messaging.eventhubs.EventProcessorClient\"></xref>**\n\nThe sample below uses an in-memory <xref uid=\"com.azure.messaging.eventhubs.CheckpointStore\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.messaging.eventhubs.CheckpointStore\"></xref> but [ azure-messaging-eventhubs-checkpointstore-blob][azure-messaging-eventhubs-checkpointstore-blob] provides a checkpoint store backed by Azure Blob Storage. Additionally, `fullyQualifiedNamespace` is the Event Hubs Namespace's host name. It is listed under the \"Essentials\" panel after navigating to the Event Hubs Namespace via Azure Portal. The credential used is `DefaultAzureCredential` because it combines commonly used credentials in deployment and development and chooses the credential to used based on its running environment. The `consumerGroup` is found by navigating to the Event Hub instance, and selecting \"Consumer groups\" under the \"Entities\" panel. The `consumerGroup` is required. The credential used is `DefaultAzureCredential` because it combines commonly used credentials in deployment and development and chooses the credential to used based on its running environment.\n\n```java\nTokenCredential credential = new DefaultAzureCredentialBuilder().build();\n\n // \"<<fully-qualified-namespace>>\" will look similar to \"{your-namespace}.servicebus.windows.net\"\n // \"<<event-hub-name>>\" will be the name of the Event Hub instance you created inside the Event Hubs namespace.\n EventProcessorClient eventProcessorClient = new EventProcessorClientBuilder()\n     .consumerGroup(\"<< CONSUMER GROUP NAME >>\")\n     .credential(\"<<fully-qualified-namespace>>\", \"<<event-hub-name>>\",\n         credential)\n     .checkpointStore(new SampleCheckpointStore())\n     .processEvent(eventContext -> {\n         System.out.printf(\"Partition id = %s and sequence number of event = %s%n\",\n             eventContext.getPartitionContext().getPartitionId(),\n             eventContext.getEventData().getSequenceNumber());\n     })\n     .processError(errorContext -> {\n         System.out.printf(\"Error occurred in partition processor for partition %s, %s%n\",\n             errorContext.getPartitionContext().getPartitionId(),\n             errorContext.getThrowable());\n     })\n     .buildEventProcessorClient();\n```\n\n\n[azure-messaging-eventhubs-checkpointstore-blob]: https://central.sonatype.com/artifact/com.azure/azure-messaging-eventhubs-checkpointstore-blob"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.19.0-beta.3
