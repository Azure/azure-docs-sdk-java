### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.math.LongMath
  id: LongMath
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math
  children:
  - com.azure.cosmos.implementation.guava25.math.LongMath.binomial(int,int)
  - com.azure.cosmos.implementation.guava25.math.LongMath.ceilingPowerOfTwo(long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.checkedAdd(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.checkedMultiply(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.checkedPow(long,int)
  - com.azure.cosmos.implementation.guava25.math.LongMath.checkedSubtract(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.divide(long,long,java.math.RoundingMode)
  - com.azure.cosmos.implementation.guava25.math.LongMath.factorial(int)
  - com.azure.cosmos.implementation.guava25.math.LongMath.floorPowerOfTwo(long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.gcd(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.isPowerOfTwo(long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.isPrime(long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.log10(long,java.math.RoundingMode)
  - com.azure.cosmos.implementation.guava25.math.LongMath.log2(long,java.math.RoundingMode)
  - com.azure.cosmos.implementation.guava25.math.LongMath.mean(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.mod(long,int)
  - com.azure.cosmos.implementation.guava25.math.LongMath.mod(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.pow(long,int)
  - com.azure.cosmos.implementation.guava25.math.LongMath.saturatedAdd(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.saturatedMultiply(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.saturatedPow(long,int)
  - com.azure.cosmos.implementation.guava25.math.LongMath.saturatedSubtract(long,long)
  - com.azure.cosmos.implementation.guava25.math.LongMath.sqrt(long,java.math.RoundingMode)
  langs:
  - java
  name: LongMath
  nameWithType: LongMath
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath
  type: Class
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    A class for arithmetic on values of type `long`. Where possible, methods are defined and named analogously to their `BigInteger` counterparts.


    The implementations of many methods in this class are based on material from Henry S. Warren, Jr.'s *Hacker's Delight*, (Addison Wesley, 2002).


    Similar functionality for `int` and for <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> can be found in <xref uid="com.azure.cosmos.implementation.guava25.math.IntMath" data-throw-if-not-resolved="false">IntMath</xref> and <xref uid="" data-throw-if-not-resolved="false">BigIntegerMath</xref> respectively. For other common operations on `long` values, see <xref uid="com.azure.cosmos.implementation.guava25.primitives.Longs" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.primitives.Longs</xref>.
  syntax:
    content: public final class LongMath
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.LongMath()
  id: LongMath()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: LongMath()
  nameWithType: LongMath.LongMath()
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.LongMath()
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.LongMath*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.math
  syntax:
    content: private LongMath()
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.binomial(int,int)
  id: binomial(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: binomial(int n, int k)
  nameWithType: LongMath.binomial(int n, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.binomial(int n, int k)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.binomial*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns `n` choose `k`, also known as the binomial coefficient of `n` and `k`, or <xref uid="java.lang.Long.MAX_VALUE" data-throw-if-not-resolved="false">Long#MAX_VALUE</xref> if the result does not fit in a `long`.
  syntax:
    content: public static long binomial(int n, int k)
    parameters:
    - id: n
      type: int
    - id: k
      type: int
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.ceilingPowerOfTwo(long)
  id: ceilingPowerOfTwo(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: ceilingPowerOfTwo(long x)
  nameWithType: LongMath.ceilingPowerOfTwo(long x)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.ceilingPowerOfTwo(long x)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.ceilingPowerOfTwo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the smallest power of two greater than or equal to `x`. This is equivalent to `checkedPow(2, log2(x, CEILING))`.
  syntax:
    content: public static long ceilingPowerOfTwo(long x)
    parameters:
    - id: x
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedAdd(long,long)
  id: checkedAdd(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: checkedAdd(long a, long b)
  nameWithType: LongMath.checkedAdd(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedAdd(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.checkedAdd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the sum of `a` and `b`, provided it does not overflow.
  syntax:
    content: public static long checkedAdd(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedMultiply(long,long)
  id: checkedMultiply(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: checkedMultiply(long a, long b)
  nameWithType: LongMath.checkedMultiply(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedMultiply(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.checkedMultiply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the product of `a` and `b`, provided it does not overflow.
  syntax:
    content: public static long checkedMultiply(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedPow(long,int)
  id: checkedPow(long,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: checkedPow(long b, int k)
  nameWithType: LongMath.checkedPow(long b, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedPow(long b, int k)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.checkedPow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the `b` to the `k`th power, provided it does not overflow.
  syntax:
    content: public static long checkedPow(long b, int k)
    parameters:
    - id: b
      type: long
    - id: k
      type: int
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedSubtract(long,long)
  id: checkedSubtract(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: checkedSubtract(long a, long b)
  nameWithType: LongMath.checkedSubtract(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedSubtract(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.checkedSubtract*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the difference of `a` and `b`, provided it does not overflow.
  syntax:
    content: public static long checkedSubtract(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.divide(long,long,java.math.RoundingMode)
  id: divide(long,long,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: divide(long p, long q, RoundingMode mode)
  nameWithType: LongMath.divide(long p, long q, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.divide(long p, long q, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.divide*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the result of dividing `p` by `q`, rounding using the specified `RoundingMode`.
  syntax:
    content: public static long divide(long p, long q, RoundingMode mode)
    parameters:
    - id: p
      type: long
    - id: q
      type: long
    - id: mode
      type: java.math.RoundingMode
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.factorial(int)
  id: factorial(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: factorial(int n)
  nameWithType: LongMath.factorial(int n)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.factorial(int n)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.factorial*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns `n!`, that is, the product of the first `n` positive integers, `1` if `n == 0`, or <xref uid="java.lang.Long.MAX_VALUE" data-throw-if-not-resolved="false">Long#MAX_VALUE</xref> if the result does not fit in a `long`.
  syntax:
    content: public static long factorial(int n)
    parameters:
    - id: n
      type: int
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.floorPowerOfTwo(long)
  id: floorPowerOfTwo(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: floorPowerOfTwo(long x)
  nameWithType: LongMath.floorPowerOfTwo(long x)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.floorPowerOfTwo(long x)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.floorPowerOfTwo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the largest power of two less than or equal to `x`. This is equivalent to `checkedPow(2, log2(x, FLOOR))`.
  syntax:
    content: public static long floorPowerOfTwo(long x)
    parameters:
    - id: x
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.gcd(long,long)
  id: gcd(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: gcd(long a, long b)
  nameWithType: LongMath.gcd(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.gcd(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.gcd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the greatest common divisor of `a, b`. Returns `0` if `a == 0 && b == 0`.
  syntax:
    content: public static long gcd(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.isPowerOfTwo(long)
  id: isPowerOfTwo(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: isPowerOfTwo(long x)
  nameWithType: LongMath.isPowerOfTwo(long x)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.isPowerOfTwo(long x)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.isPowerOfTwo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `true` if `x` represents a power of two.


    This differs from `Long.bitCount(x) == 1`, because `Long.bitCount(Long.MIN_VALUE) == 1`, but <xref uid="java.lang.Long.MIN_VALUE" data-throw-if-not-resolved="false">Long#MIN_VALUE</xref> is not a power of two.
  syntax:
    content: public static boolean isPowerOfTwo(long x)
    parameters:
    - id: x
      type: long
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.isPrime(long)
  id: isPrime(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: isPrime(long n)
  nameWithType: LongMath.isPrime(long n)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.isPrime(long n)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.isPrime*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `true` if `n` is a [prime number][]: an integer *greater than one* that cannot be factored into a product of *smaller* positive integers. Returns `false` if `n` is zero, one, or a composite number (one which *can* be factored into smaller positive integers).


    To test larger numbers, use <xref uid="java.math.BigInteger.isProbablePrime" data-throw-if-not-resolved="false">BigInteger#isProbablePrime</xref>.



    [prime number]: http://mathworld.wolfram.com/PrimeNumber.html
  syntax:
    content: public static boolean isPrime(long n)
    parameters:
    - id: n
      type: long
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.log10(long,java.math.RoundingMode)
  id: log10(long,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: log10(long x, RoundingMode mode)
  nameWithType: LongMath.log10(long x, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.log10(long x, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.log10*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the base-10 logarithm of `x`, rounded according to the specified rounding mode.
  syntax:
    content: public static int log10(long x, RoundingMode mode)
    parameters:
    - id: x
      type: long
    - id: mode
      type: java.math.RoundingMode
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.log2(long,java.math.RoundingMode)
  id: log2(long,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: log2(long x, RoundingMode mode)
  nameWithType: LongMath.log2(long x, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.log2(long x, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.log2*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the base-2 logarithm of `x`, rounded according to the specified rounding mode.
  syntax:
    content: public static int log2(long x, RoundingMode mode)
    parameters:
    - id: x
      type: long
    - id: mode
      type: java.math.RoundingMode
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.mean(long,long)
  id: mean(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: mean(long x, long y)
  nameWithType: LongMath.mean(long x, long y)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.mean(long x, long y)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.mean*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the arithmetic mean of `x` and `y`, rounded toward negative infinity. This method is resilient to overflow.
  syntax:
    content: public static long mean(long x, long y)
    parameters:
    - id: x
      type: long
    - id: y
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.mod(long,int)
  id: mod(long,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: mod(long x, int m)
  nameWithType: LongMath.mod(long x, int m)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.mod(long x, int m)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.mod*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `x mod m`, a non-negative value less than `m`. This differs from `x % m`, which might be negative.


    For example:


    ```java

    mod(7, 4) == 3
     mod(-7, 4) == 1
     mod(-1, 4) == 3
     mod(-8, 4) == 0
     mod(8, 4) == 0
    ```
  syntax:
    content: public static int mod(long x, int m)
    parameters:
    - id: x
      type: long
    - id: m
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.mod(long,long)
  id: mod(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: mod(long x, long m)
  nameWithType: LongMath.mod(long x, long m)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.mod(long x, long m)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.mod*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `x mod m`, a non-negative value less than `m`. This differs from `x % m`, which might be negative.


    For example:


    ```java

    mod(7, 4) == 3
     mod(-7, 4) == 1
     mod(-1, 4) == 3
     mod(-8, 4) == 0
     mod(8, 4) == 0
    ```
  syntax:
    content: public static long mod(long x, long m)
    parameters:
    - id: x
      type: long
    - id: m
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.pow(long,int)
  id: pow(long,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: pow(long b, int k)
  nameWithType: LongMath.pow(long b, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.pow(long b, int k)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.pow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns `b` to the `k`th power. Even if the result overflows, it will be equal to `BigInteger.valueOf(b).pow(k).longValue()`. This implementation runs in `O(log k)` time.
  syntax:
    content: public static long pow(long b, int k)
    parameters:
    - id: b
      type: long
    - id: k
      type: int
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedAdd(long,long)
  id: saturatedAdd(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: saturatedAdd(long a, long b)
  nameWithType: LongMath.saturatedAdd(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedAdd(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedAdd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the sum of `a` and `b` unless it would overflow or underflow in which case `Long.MAX_VALUE` or `Long.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static long saturatedAdd(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedMultiply(long,long)
  id: saturatedMultiply(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: saturatedMultiply(long a, long b)
  nameWithType: LongMath.saturatedMultiply(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedMultiply(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedMultiply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the product of `a` and `b` unless it would overflow or underflow in which case `Long.MAX_VALUE` or `Long.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static long saturatedMultiply(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedPow(long,int)
  id: saturatedPow(long,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: saturatedPow(long b, int k)
  nameWithType: LongMath.saturatedPow(long b, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedPow(long b, int k)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedPow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the `b` to the `k`th power, unless it would overflow or underflow in which case `Long.MAX_VALUE` or `Long.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static long saturatedPow(long b, int k)
    parameters:
    - id: b
      type: long
    - id: k
      type: int
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedSubtract(long,long)
  id: saturatedSubtract(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: saturatedSubtract(long a, long b)
  nameWithType: LongMath.saturatedSubtract(long a, long b)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedSubtract(long a, long b)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedSubtract*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the difference of `a` and `b` unless it would overflow or underflow in which case `Long.MAX_VALUE` or `Long.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static long saturatedSubtract(long a, long b)
    parameters:
    - id: a
      type: long
    - id: b
      type: long
    return:
      type: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.sqrt(long,java.math.RoundingMode)
  id: sqrt(long,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.LongMath
  langs:
  - java
  name: sqrt(long x, RoundingMode mode)
  nameWithType: LongMath.sqrt(long x, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.sqrt(long x, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.LongMath.sqrt*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the square root of `x`, rounded with the specified rounding mode.
  syntax:
    content: public static long sqrt(long x, RoundingMode mode)
    parameters:
    - id: x
      type: long
    - id: mode
      type: java.math.RoundingMode
    return:
      type: long
references:
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.LongMath*
  name: LongMath
  nameWithType: LongMath.LongMath
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.LongMath
  package: com.azure.cosmos.implementation.guava25.math
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.ceilingPowerOfTwo*
  name: ceilingPowerOfTwo
  nameWithType: LongMath.ceilingPowerOfTwo
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.ceilingPowerOfTwo
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.floorPowerOfTwo*
  name: floorPowerOfTwo
  nameWithType: LongMath.floorPowerOfTwo
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.floorPowerOfTwo
  package: com.azure.cosmos.implementation.guava25.math
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.isPowerOfTwo*
  name: isPowerOfTwo
  nameWithType: LongMath.isPowerOfTwo
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.isPowerOfTwo
  package: com.azure.cosmos.implementation.guava25.math
- uid: java.math.RoundingMode
  spec.java:
  - uid: java.math.RoundingMode
    name: RoundingMode
    fullName: java.math.RoundingMode
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.log2*
  name: log2
  nameWithType: LongMath.log2
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.log2
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.log10*
  name: log10
  nameWithType: LongMath.log10
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.log10
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.pow*
  name: pow
  nameWithType: LongMath.pow
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.pow
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.sqrt*
  name: sqrt
  nameWithType: LongMath.sqrt
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.sqrt
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.divide*
  name: divide
  nameWithType: LongMath.divide
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.divide
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.mod*
  name: mod
  nameWithType: LongMath.mod
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.mod
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.gcd*
  name: gcd
  nameWithType: LongMath.gcd
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.gcd
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedAdd*
  name: checkedAdd
  nameWithType: LongMath.checkedAdd
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedAdd
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedSubtract*
  name: checkedSubtract
  nameWithType: LongMath.checkedSubtract
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedSubtract
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedMultiply*
  name: checkedMultiply
  nameWithType: LongMath.checkedMultiply
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedMultiply
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.checkedPow*
  name: checkedPow
  nameWithType: LongMath.checkedPow
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.checkedPow
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedAdd*
  name: saturatedAdd
  nameWithType: LongMath.saturatedAdd
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedAdd
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedSubtract*
  name: saturatedSubtract
  nameWithType: LongMath.saturatedSubtract
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedSubtract
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedMultiply*
  name: saturatedMultiply
  nameWithType: LongMath.saturatedMultiply
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedMultiply
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedPow*
  name: saturatedPow
  nameWithType: LongMath.saturatedPow
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.saturatedPow
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.factorial*
  name: factorial
  nameWithType: LongMath.factorial
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.factorial
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.binomial*
  name: binomial
  nameWithType: LongMath.binomial
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.binomial
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.mean*
  name: mean
  nameWithType: LongMath.mean
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.mean
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.LongMath.isPrime*
  name: isPrime
  nameWithType: LongMath.isPrime
  fullName: com.azure.cosmos.implementation.guava25.math.LongMath.isPrime
  package: com.azure.cosmos.implementation.guava25.math
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
