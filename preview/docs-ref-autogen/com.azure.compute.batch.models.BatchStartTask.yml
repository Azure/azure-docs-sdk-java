### YamlMime:JavaType
uid: "com.azure.compute.batch.models.BatchStartTask"
fullName: "com.azure.compute.batch.models.BatchStartTask"
name: "BatchStartTask"
nameWithType: "BatchStartTask"
summary: "Batch will retry Tasks when a recovery operation is triggered on a Node."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **BatchStartTask**</br> implements <xref href=\"com.azure.json.JsonSerializable?alt=com.azure.json.JsonSerializable&text=JsonSerializable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.compute.batch.models.BatchStartTask.BatchStartTask(java.lang.String)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.BatchStartTask(String commandLine)"
  name: "BatchStartTask(String commandLine)"
  nameWithType: "BatchStartTask.BatchStartTask(String commandLine)"
  summary: "Creates an instance of Batch<wbr>Start<wbr>Task class."
  parameters:
  - description: "the commandLine value to set."
    name: "commandLine"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BatchStartTask(String commandLine)"
  desc: "Creates an instance of BatchStartTask class."
methods:
- uid: "com.azure.compute.batch.models.BatchStartTask.fromJson(com.azure.json.JsonReader)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.fromJson(JsonReader jsonReader)"
  name: "fromJson(JsonReader jsonReader)"
  nameWithType: "BatchStartTask.fromJson(JsonReader jsonReader)"
  summary: "Reads an instance of Batch<wbr>Start<wbr>Task from the Json<wbr>Reader."
  modifiers:
  - "static"
  parameters:
  - description: "The JsonReader being read."
    name: "jsonReader"
    type: "<xref href=\"com.azure.json.JsonReader?alt=com.azure.json.JsonReader&text=JsonReader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static BatchStartTask fromJson(JsonReader jsonReader)"
  exceptions:
  - description: "If the deserialized JSON object was missing any required properties."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  desc: "Reads an instance of BatchStartTask from the JsonReader."
  returns:
    description: "An instance of BatchStartTask if the JsonReader was pointing to an instance of it, or null if it was\n pointing to JSON null."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.getCommandLine()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.getCommandLine()"
  name: "getCommandLine()"
  nameWithType: "BatchStartTask.getCommandLine()"
  summary: "Get the command<wbr>Line property: The command line of the Start<wbr>Task."
  syntax: "public String getCommandLine()"
  desc: "Get the commandLine property: The command line of the StartTask. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using \"cmd /c MyCommand\" in Windows or \"/bin/sh -c MyCommand\" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables)."
  returns:
    description: "the commandLine value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.compute.batch.models.BatchStartTask.getContainerSettings()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.getContainerSettings()"
  name: "getContainerSettings()"
  nameWithType: "BatchStartTask.getContainerSettings()"
  summary: "Get the container<wbr>Settings property: The settings for the container under which the Start<wbr>Task runs."
  syntax: "public BatchTaskContainerSettings getContainerSettings()"
  desc: "Get the containerSettings property: The settings for the container under which the StartTask runs. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\\_BATCH\\_NODE\\_ROOT\\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
  returns:
    description: "the containerSettings value."
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskContainerSettings?alt=com.azure.compute.batch.models.BatchTaskContainerSettings&text=BatchTaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.getEnvironmentSettings()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.getEnvironmentSettings()"
  name: "getEnvironmentSettings()"
  nameWithType: "BatchStartTask.getEnvironmentSettings()"
  summary: "Get the environment<wbr>Settings property: A list of environment variable settings for the Start<wbr>Task."
  syntax: "public List<EnvironmentSetting> getEnvironmentSettings()"
  desc: "Get the environmentSettings property: A list of environment variable settings for the StartTask."
  returns:
    description: "the environmentSettings value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.EnvironmentSetting?alt=com.azure.compute.batch.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.models.BatchStartTask.getMaxTaskRetryCount()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.getMaxTaskRetryCount()"
  name: "getMaxTaskRetryCount()"
  nameWithType: "BatchStartTask.getMaxTaskRetryCount()"
  summary: "Get the max<wbr>Task<wbr>Retry<wbr>Count property: The maximum number of times the Task may be retried."
  syntax: "public Integer getMaxTaskRetryCount()"
  desc: "Get the maxTaskRetryCount property: The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)."
  returns:
    description: "the maxTaskRetryCount value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.azure.compute.batch.models.BatchStartTask.getResourceFiles()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.getResourceFiles()"
  name: "getResourceFiles()"
  nameWithType: "BatchStartTask.getResourceFiles()"
  summary: "Get the resource<wbr>Files property: A list of files that the Batch service will download to the Compute Node before running the command line."
  syntax: "public List<ResourceFile> getResourceFiles()"
  desc: "Get the resourceFiles property: A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory."
  returns:
    description: "the resourceFiles value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.ResourceFile?alt=com.azure.compute.batch.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.compute.batch.models.BatchStartTask.getUserIdentity()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.getUserIdentity()"
  name: "getUserIdentity()"
  nameWithType: "BatchStartTask.getUserIdentity()"
  summary: "Get the user<wbr>Identity property: The user identity under which the Start<wbr>Task runs."
  syntax: "public UserIdentity getUserIdentity()"
  desc: "Get the userIdentity property: The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the Task."
  returns:
    description: "the userIdentity value."
    type: "<xref href=\"com.azure.compute.batch.models.UserIdentity?alt=com.azure.compute.batch.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.isWaitForSuccess()"
  fullName: "com.azure.compute.batch.models.BatchStartTask.isWaitForSuccess()"
  name: "isWaitForSuccess()"
  nameWithType: "BatchStartTask.isWaitForSuccess()"
  summary: "Get the wait<wbr>For<wbr>Success property: Whether the Batch service should wait for the Start<wbr>Task to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node."
  syntax: "public Boolean isWaitForSuccess()"
  desc: "Get the waitForSuccess property: Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true."
  returns:
    description: "the waitForSuccess value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.compute.batch.models.BatchStartTask.setContainerSettings(com.azure.compute.batch.models.BatchTaskContainerSettings)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.setContainerSettings(BatchTaskContainerSettings containerSettings)"
  name: "setContainerSettings(BatchTaskContainerSettings containerSettings)"
  nameWithType: "BatchStartTask.setContainerSettings(BatchTaskContainerSettings containerSettings)"
  summary: "Set the container<wbr>Settings property: The settings for the container under which the Start<wbr>Task runs."
  parameters:
  - description: "the containerSettings value to set."
    name: "containerSettings"
    type: "<xref href=\"com.azure.compute.batch.models.BatchTaskContainerSettings?alt=com.azure.compute.batch.models.BatchTaskContainerSettings&text=BatchTaskContainerSettings\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchStartTask setContainerSettings(BatchTaskContainerSettings containerSettings)"
  desc: "Set the containerSettings property: The settings for the container under which the StartTask runs. When this is specified, all directories recursively below the AZ\\_BATCH\\_NODE\\_ROOT\\_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ\\_BATCH\\_NODE\\_ROOT\\_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files."
  returns:
    description: "the BatchStartTask object itself."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.setEnvironmentSettings(java.util.List<com.azure.compute.batch.models.EnvironmentSetting>)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.setEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  name: "setEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  nameWithType: "BatchStartTask.setEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  summary: "Set the environment<wbr>Settings property: A list of environment variable settings for the Start<wbr>Task."
  parameters:
  - description: "the environmentSettings value to set."
    name: "environmentSettings"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.EnvironmentSetting?alt=com.azure.compute.batch.models.EnvironmentSetting&text=EnvironmentSetting\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public BatchStartTask setEnvironmentSettings(List<EnvironmentSetting> environmentSettings)"
  desc: "Set the environmentSettings property: A list of environment variable settings for the StartTask."
  returns:
    description: "the BatchStartTask object itself."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.setMaxTaskRetryCount(java.lang.Integer)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.setMaxTaskRetryCount(Integer maxTaskRetryCount)"
  name: "setMaxTaskRetryCount(Integer maxTaskRetryCount)"
  nameWithType: "BatchStartTask.setMaxTaskRetryCount(Integer maxTaskRetryCount)"
  summary: "Set the max<wbr>Task<wbr>Retry<wbr>Count property: The maximum number of times the Task may be retried."
  parameters:
  - description: "the maxTaskRetryCount value to set."
    name: "maxTaskRetryCount"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public BatchStartTask setMaxTaskRetryCount(Integer maxTaskRetryCount)"
  desc: "Set the maxTaskRetryCount property: The maximum number of times the Task may be retried. The Batch service retries a Task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the Task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the Task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the Task. If the maximum retry count is -1, the Batch service retries the Task without limit, however this is not recommended for a start task or any task. The default value is 0 (no retries)."
  returns:
    description: "the BatchStartTask object itself."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.setResourceFiles(java.util.List<com.azure.compute.batch.models.ResourceFile>)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.setResourceFiles(List<ResourceFile> resourceFiles)"
  name: "setResourceFiles(List<ResourceFile> resourceFiles)"
  nameWithType: "BatchStartTask.setResourceFiles(List<ResourceFile> resourceFiles)"
  summary: "Set the resource<wbr>Files property: A list of files that the Batch service will download to the Compute Node before running the command line."
  parameters:
  - description: "the resourceFiles value to set."
    name: "resourceFiles"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.compute.batch.models.ResourceFile?alt=com.azure.compute.batch.models.ResourceFile&text=ResourceFile\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public BatchStartTask setResourceFiles(List<ResourceFile> resourceFiles)"
  desc: "Set the resourceFiles property: A list of files that the Batch service will download to the Compute Node before running the command line. There is a maximum size for the list of resource files. When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. Files listed under this element are located in the Task's working directory."
  returns:
    description: "the BatchStartTask object itself."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.setUserIdentity(com.azure.compute.batch.models.UserIdentity)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.setUserIdentity(UserIdentity userIdentity)"
  name: "setUserIdentity(UserIdentity userIdentity)"
  nameWithType: "BatchStartTask.setUserIdentity(UserIdentity userIdentity)"
  summary: "Set the user<wbr>Identity property: The user identity under which the Start<wbr>Task runs."
  parameters:
  - description: "the userIdentity value to set."
    name: "userIdentity"
    type: "<xref href=\"com.azure.compute.batch.models.UserIdentity?alt=com.azure.compute.batch.models.UserIdentity&text=UserIdentity\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BatchStartTask setUserIdentity(UserIdentity userIdentity)"
  desc: "Set the userIdentity property: The user identity under which the StartTask runs. If omitted, the Task runs as a non-administrative user unique to the Task."
  returns:
    description: "the BatchStartTask object itself."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.setWaitForSuccess(java.lang.Boolean)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.setWaitForSuccess(Boolean waitForSuccess)"
  name: "setWaitForSuccess(Boolean waitForSuccess)"
  nameWithType: "BatchStartTask.setWaitForSuccess(Boolean waitForSuccess)"
  summary: "Set the wait<wbr>For<wbr>Success property: Whether the Batch service should wait for the Start<wbr>Task to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node."
  parameters:
  - description: "the waitForSuccess value to set."
    name: "waitForSuccess"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public BatchStartTask setWaitForSuccess(Boolean waitForSuccess)"
  desc: "Set the waitForSuccess property: Whether the Batch service should wait for the StartTask to complete successfully (that is, to exit with exit code 0) before scheduling any Tasks on the Compute Node. If true and the StartTask fails on a Node, the Batch service retries the StartTask up to its maximum retry count (maxTaskRetryCount). If the Task has still not completed successfully after all retries, then the Batch service marks the Node unusable, and will not schedule Tasks to it. This condition can be detected via the Compute Node state and failure info details. If false, the Batch service will not wait for the StartTask to complete. In this case, other Tasks can start executing on the Compute Node while the StartTask is still running; and even if the StartTask fails, new Tasks will continue to be scheduled on the Compute Node. The default is true."
  returns:
    description: "the BatchStartTask object itself."
    type: "<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.compute.batch.models.BatchStartTask.toJson(com.azure.json.JsonWriter)"
  fullName: "com.azure.compute.batch.models.BatchStartTask.toJson(JsonWriter jsonWriter)"
  name: "toJson(JsonWriter jsonWriter)"
  nameWithType: "BatchStartTask.toJson(JsonWriter jsonWriter)"
  parameters:
  - name: "jsonWriter"
    type: "<xref href=\"com.azure.json.JsonWriter?alt=com.azure.json.JsonWriter&text=JsonWriter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonWriter toJson(JsonWriter jsonWriter)"
  exceptions:
  - type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  returns:
    type: "<xref href=\"com.azure.json.JsonWriter?alt=com.azure.json.JsonWriter&text=JsonWriter\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask."
implements:
- "<xref href=\"com.azure.json.JsonSerializable?alt=com.azure.json.JsonSerializable&text=JsonSerializable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.compute.batch.models.BatchStartTask?alt=com.azure.compute.batch.models.BatchStartTask&text=BatchStartTask\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.compute.batch.models"
artifact: com.azure:azure-compute-batch:1.0.0-beta.1
