### YamlMime:JavaType
uid: "com.azure.security.keyvault.secrets.SecretClient"
fullName: "com.azure.security.keyvault.secrets.SecretClient"
name: "SecretClient"
nameWithType: "SecretClient"
summary: "The Secret<wbr>Client provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secrets\"></xref> in the Azure Key Vault."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SecretClient"
methods:
- uid: "com.azure.security.keyvault.secrets.SecretClient.backupSecret(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.backupSecret(String name)"
  name: "backupSecret(String name)"
  nameWithType: "SecretClient.backupSecret(String name)"
  summary: "Requests a backup of the secret be downloaded to the client."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public byte[] backupSecret(String name)"
  desc: "Requests a backup of the secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.\n\n**Code sample**\n\nBacks up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response\n\n```java\nbyte[] secretBackup = secretClient.backupSecret(\"secretName\");\n System.out.printf(\"Secret's Backup Byte array's length %s\", secretBackup.length);\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the backed up secret blob."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.backupSecretWithResponse(String name, Context context)"
  name: "backupSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.backupSecretWithResponse(String name, Context context)"
  summary: "Requests a backup of the secret be downloaded to the client."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<byte[]> backupSecretWithResponse(String name, Context context)"
  desc: "Requests a backup of the secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the `secrets/backup` permission.\n\n**Code sample**\n\nBacks up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response\n\n```java\nbyte[] secretBackup = secretClient.backupSecretWithResponse(\"secretName\",\n     new Context(key1, value1)).getValue();\n System.out.printf(\"Secret's Backup Byte array's length %s\", secretBackup.length);\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the backed up secret blob."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.beginDeleteSecret(String name)"
  name: "beginDeleteSecret(String name)"
  nameWithType: "SecretClient.beginDeleteSecret(String name)"
  summary: "Deletes a secret from the key vault."
  parameters:
  - description: "The name of the secret to be deleted."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<DeletedSecret,Void> beginDeleteSecret(String name)"
  desc: "Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and for permanent deletion, needs to be purged. Otherwise, the secret is permanently deleted. All versions of a secret are deleted. This cannot be applied to individual versions of a secret. This operation requires the `secrets/delete` permission.\n\n**Code sample**\n\nDeletes the secret from a soft-delete enabled key vault. Prints out the recovery id of the deleted secret returned in the response.\n\n```java\nSyncPoller<DeletedSecret, Void> deleteSecretPoller = secretClient.beginDeleteSecret(\"secretName\");\n\n // Deleted Secret is accessible as soon as polling begins.\n PollResponse<DeletedSecret> deleteSecretPollResponse = deleteSecretPoller.poll();\n\n // Deletion date only works for a SoftDelete-enabled Key Vault.\n System.out.println(\"Deleted Date  %s\" + deleteSecretPollResponse.getValue()\n     .getDeletedOn().toString());\n System.out.printf(\"Deleted Secret's Recovery Id %s\", deleteSecretPollResponse.getValue()\n     .getRecoveryId());\n\n // Secret is being deleted on server.\n deleteSecretPoller.waitForCompletion();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on and retrieve the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secret\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.DeletedSecret?alt=com.azure.security.keyvault.secrets.models.DeletedSecret&text=DeletedSecret\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.beginRecoverDeletedSecret(String name)"
  name: "beginRecoverDeletedSecret(String name)"
  nameWithType: "SecretClient.beginRecoverDeletedSecret(String name)"
  summary: "Recovers the deleted secret in the key vault to its latest version."
  parameters:
  - description: "The name of the deleted secret to be recovered."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<KeyVaultSecret,Void> beginRecoverDeletedSecret(String name)"
  desc: "Recovers the deleted secret in the key vault to its latest version. Can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/recover` permission.\n\n**Code sample**\n\nRecovers the deleted secret from the key vault enabled for **soft-delete**. Prints out the details of the recovered secret returned in the response.\n\n```java\nSyncPoller<KeyVaultSecret, Void> recoverSecretPoller =\n     secretClient.beginRecoverDeletedSecret(\"deletedSecretName\");\n\n // Deleted Secret can be accessed as soon as polling is in progress.\n PollResponse<KeyVaultSecret> recoveredSecretPollResponse = recoverSecretPoller.poll();\n System.out.println(\"Recovered Key Name %s\" + recoveredSecretPollResponse.getValue().getName());\n System.out.printf(\"Recovered Key's Id %s\", recoveredSecretPollResponse.getValue().getId());\n\n // Key is being recovered on server.\n recoverSecretPoller.waitForCompletion();\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on and retrieve the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"recovered secret\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(String name)"
  name: "getDeletedSecret(String name)"
  nameWithType: "SecretClient.getDeletedSecret(String name)"
  summary: "Gets a secret that has been deleted for a soft-delete enabled key vault."
  parameters:
  - description: "The name of the deleted secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DeletedSecret getDeletedSecret(String name)"
  desc: "Gets a secret that has been deleted for a soft-delete enabled key vault. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nGets the deleted secret from the key vault **enabled for soft-delete**. Prints out the details of the deleted secret returned in the response.\n\n```java\nDeletedSecret deletedSecret = secretClient.getDeletedSecret(\"secretName\");\n System.out.printf(\"Deleted Secret's Recovery Id %s\", deletedSecret.getRecoveryId());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.DeletedSecret?alt=com.azure.security.keyvault.secrets.models.DeletedSecret&text=DeletedSecret\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getDeletedSecretWithResponse(String name, Context context)"
  name: "getDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.getDeletedSecretWithResponse(String name, Context context)"
  summary: "Gets a secret that has been deleted for a soft-delete enabled key vault."
  parameters:
  - description: "The name of the deleted secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<DeletedSecret> getDeletedSecretWithResponse(String name, Context context)"
  desc: "Gets a secret that has been deleted for a soft-delete enabled key vault. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nGets the deleted secret from the key vault **enabled for soft-delete**. Prints out the details of the deleted secret returned in the response.\n\n```java\nDeletedSecret deletedSecret = secretClient.getDeletedSecretWithResponse(\"secretName\",\n     new Context(key2, value2)).getValue();\n System.out.printf(\"Deleted Secret's Recovery Id %s\", deletedSecret.getRecoveryId());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted\n secret\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.DeletedSecret?alt=com.azure.security.keyvault.secrets.models.DeletedSecret&text=DeletedSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecret(String name)"
  name: "getSecret(String name)"
  nameWithType: "SecretClient.getSecret(String name)"
  summary: "Gets the latest version of the specified secret from the key vault."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultSecret getSecret(String name)"
  desc: "Gets the latest version of the specified secret from the key vault. This operation requires the `secrets/get` permission.\n\n**Code sample**\n\nGets the latest version of the secret in the key vault. Prints out the details of the returned secret.\n\n```java\nKeyVaultSecret secretWithoutVersion = secretClient.getSecret(\"secretName\", secretVersion);\n System.out.printf(\"Secret is returned with name %s and value %s%n\",\n     secretWithoutVersion.getName(), secretWithoutVersion.getValue());\n```"
  returns:
    description: "The requested <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSecret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecret(String name, String version)"
  name: "getSecret(String name, String version)"
  nameWithType: "SecretClient.getSecret(String name, String version)"
  summary: "Gets the specified secret with specified version from the key vault."
  parameters:
  - description: "The name of the secret, cannot be null."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the secret to retrieve. If this is an empty string or null, this call is\n     equivalent to calling <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getSecret(String)\"></xref>, with the latest version being retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultSecret getSecret(String name, String version)"
  desc: "Gets the specified secret with specified version from the key vault. This operation requires the `secrets/get` permission.\n\n**Code sample**\n\nGets a specific version of the secret in the key vault. Prints out the details of the returned secret.\n\n```java\nString secretVersion = \"6A385B124DEF4096AF1361A85B16C204\";\n KeyVaultSecret secretWithVersion = secretClient.getSecret(\"secretName\", secretVersion);\n System.out.printf(\"Secret is returned with name %s and value %s%n\",\n     secretWithVersion.getName(), secretWithVersion.getValue());\n```"
  returns:
    description: "The requested <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getSecretWithResponse(String name, String version, Context context)"
  name: "getSecretWithResponse(String name, String version, Context context)"
  nameWithType: "SecretClient.getSecretWithResponse(String name, String version, Context context)"
  summary: "Gets the specified secret with specified version from the key vault."
  parameters:
  - description: "The name of the secret, cannot be null"
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the secret to retrieve. If this is an empty string or null, this call is equivalent\n     to calling <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getSecret(String)\"></xref>, with the latest version being retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultSecret> getSecretWithResponse(String name, String version, Context context)"
  desc: "Gets the specified secret with specified version from the key vault. This operation requires the `secrets/get` permission.\n\n**Code sample**\n\nGets a specific version of the secret in the key vault. Prints out the details of the returned secret.\n\n```java\nString secretVersion = \"6A385B124DEF4096AF1361A85B16C204\";\n KeyVaultSecret secretWithVersion = secretClient.getSecretWithResponse(\"secretName\", secretVersion,\n     new Context(key2, value2)).getValue();\n System.out.printf(\"Secret is returned with name %s and value %s%n\",\n     secretWithVersion.getName(), secretWithVersion.getValue());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the requested <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultSecret\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.getVaultUrl()"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.getVaultUrl()"
  name: "getVaultUrl()"
  nameWithType: "SecretClient.getVaultUrl()"
  summary: "Gets the vault endpoint url to which service requests are sent to."
  syntax: "public String getVaultUrl()"
  desc: "Gets the vault endpoint url to which service requests are sent to."
  returns:
    description: "the vault endpoint url."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()"
  name: "listDeletedSecrets()"
  nameWithType: "SecretClient.listDeletedSecrets()"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> of the key vault if it has enabled soft-delete."
  syntax: "public PagedIterable<DeletedSecret> listDeletedSecrets()"
  desc: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> of the key vault if it has enabled soft-delete. This operation requires the `secrets/list` permission.\n\n**Iterate over secrets**\n\nLists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.\n\n```java\nfor (DeletedSecret deletedSecret : secretClient.listDeletedSecrets()) {\n     System.out.printf(\"Deleted secret's recovery Id %s\", deletedSecret.getRecoveryId());\n }\n```\n\n**Iterate over secrets by page**\n\nIterate over Lists the deleted secrets by page in the key vault and for each deleted secret prints out its recovery id.\n\n```java\nsecretClient.listDeletedSecrets().iterableByPage().forEach(resp -> {\n     System.out.printf(\"Got response headers . Url: %s, Status code: %d %n\",\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         System.out.printf(\"Deleted secret's recovery Id %s\", value.getRecoveryId());\n     });\n });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of all of the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.DeletedSecret?alt=com.azure.security.keyvault.secrets.models.DeletedSecret&text=DeletedSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets(Context context)"
  name: "listDeletedSecrets(Context context)"
  nameWithType: "SecretClient.listDeletedSecrets(Context context)"
  summary: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> of the key vault if it has enabled soft-delete."
  parameters:
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<DeletedSecret> listDeletedSecrets(Context context)"
  desc: "Lists <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> of the key vault if it has enabled soft-delete. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nLists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.\n\n```java\nfor (DeletedSecret deletedSecret : secretClient.listDeletedSecrets(new Context(key1, value2))) {\n     System.out.printf(\"Deleted secret's recovery Id %s\", deletedSecret.getRecoveryId());\n }\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of all of the <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.DeletedSecret?alt=com.azure.security.keyvault.secrets.models.DeletedSecret&text=DeletedSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name)"
  name: "listPropertiesOfSecretVersions(String name)"
  nameWithType: "SecretClient.listPropertiesOfSecretVersions(String name)"
  summary: "Lists all versions of the specified secret."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name)"
  desc: "Lists all versions of the specified secret. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nThe sample below fetches all versions of the given secret. For each secret version retrieved, makes a call to <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref> to get the version's value, and then prints it out.\n\n```java\nfor (SecretProperties secret : secretClient.listPropertiesOfSecretVersions(\"secretName\")) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret's version with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the versions of the specified secret in the vault.\n     List is empty if secret with <code>name</code> does not exist in key vault"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name, Context context)"
  name: "listPropertiesOfSecretVersions(String name, Context context)"
  nameWithType: "SecretClient.listPropertiesOfSecretVersions(String name, Context context)"
  summary: "Lists all versions of the specified secret."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name, Context context)"
  desc: "Lists all versions of the specified secret. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and secret versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Code sample**\n\nThe sample below fetches all versions of the given secret. For each secret version retrieved, makes a call to <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref> to get the version's value, and then prints it out.\n\n```java\nfor (SecretProperties secret : secretClient\n     .listPropertiesOfSecretVersions(\"secretName\", new Context(key1, value2))) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret's version with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```\n\n**Iterate over secret versions by page**\n\nThe sample below iterates over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> by each page and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretClient#getSecret(String, String)\"></xref>. This will return the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> with the corresponding version's value.\n\n```java\nsecretClient.listPropertiesOfSecretVersions(\"secretName\", new Context(key1, value2))\n             .iterableByPage().forEach(resp -> {\n                 System.out.printf(\"Got response headers . Url: %s, Status code: %d %n\",\n                     resp.getRequest().getUrl(), resp.getStatusCode());\n                 resp.getItems().forEach(value -> {\n                     KeyVaultSecret secretWithValue = secretClient.getSecret(value.getName(), value.getVersion());\n                     System.out.printf(\"Received secret's version with name %s and value %s\",\n                         secretWithValue.getName(), secretWithValue.getValue());\n                 });\n             });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the versions of the specified secret in the vault.\n     List is empty if secret with <code>name</code> does not exist in key vault"
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets()"
  name: "listPropertiesOfSecrets()"
  nameWithType: "SecretClient.listPropertiesOfSecrets()"
  summary: "Lists secrets in the key vault."
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecrets()"
  desc: "Lists secrets in the key vault. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Iterate through secrets and fetch their latest value**\n\nThe snippet below loops over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref>. This gets the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and the value of its latest version.\n\n```java\nfor (SecretProperties secret : secretClient.listPropertiesOfSecrets()) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```\n\n**Iterate over secrets by page**\n\nThe snippet below loops over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> by page and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref>. This gets the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and the value of its latest version.\n\n```java\nsecretClient.listPropertiesOfSecrets().iterableByPage().forEach(resp -> {\n     System.out.printf(\"Response headers are %s. Url %s  and status code %d %n\", resp.getHeaders(),\n         resp.getRequest().getUrl(), resp.getStatusCode());\n     resp.getItems().forEach(value -> {\n         KeyVaultSecret secretWithValue = secretClient.getSecret(value.getName(), value.getVersion());\n         System.out.printf(\"Received secret with name %s and value %s\",\n             secretWithValue.getName(), secretWithValue.getValue());\n     });\n });\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the secrets in the vault. The\n     <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> contains all the information about the secret, except its value."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecrets(Context context)"
  name: "listPropertiesOfSecrets(Context context)"
  nameWithType: "SecretClient.listPropertiesOfSecrets(Context context)"
  summary: "Lists secrets in the key vault."
  parameters:
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SecretProperties> listPropertiesOfSecrets(Context context)"
  desc: "Lists secrets in the key vault. Each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> returned only has its identifier and attributes populated. The secret values and their versions are not listed in the response. This operation requires the `secrets/list` permission.\n\n**Iterate over secrets and fetch their latest value**\n\nThe snippet below loops over each <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and calls <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getSecret(String, String)\"></xref>. This gets the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret\"></xref> and the value of its latest version.\n\n```java\nfor (SecretProperties secret : secretClient.listPropertiesOfSecrets(new Context(key1, value2))) {\n     KeyVaultSecret secretWithValue = secretClient.getSecret(secret.getName(), secret.getVersion());\n     System.out.printf(\"Received secret with name %s and value %s\",\n         secretWithValue.getName(), secretWithValue.getValue());\n }\n```"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref> of all the secrets in the vault. <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SecretProperties\"></xref>\n     contains all the information about the secret, except its value."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(String name)"
  name: "purgeDeletedSecret(String name)"
  nameWithType: "SecretClient.purgeDeletedSecret(String name)"
  summary: "Permanently removes a deleted secret, without the possibility of recovery."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void purgeDeletedSecret(String name)"
  desc: "Permanently removes a deleted secret, without the possibility of recovery. This operation can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/purge` permission.\n\n**Code sample**\n\nPurges the deleted secret from the key vault enabled for **soft-delete**. Prints out the status code from the server response.\n\n```java\nsecretClient.purgeDeletedSecret(\"secretName\");\n```"
- uid: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecretWithResponse(String name, Context context)"
  name: "purgeDeletedSecretWithResponse(String name, Context context)"
  nameWithType: "SecretClient.purgeDeletedSecretWithResponse(String name, Context context)"
  summary: "Permanently removes a deleted secret, without the possibility of recovery."
  parameters:
  - description: "The name of the secret."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> purgeDeletedSecretWithResponse(String name, Context context)"
  desc: "Permanently removes a deleted secret, without the possibility of recovery. This operation can only be performed on a **soft-delete enabled** vault. This operation requires the `secrets/purge` permission.\n\n**Code sample**\n\nPurges the deleted secret from the key vault enabled for **soft-delete**. Prints out the status code from the server response.\n\n```java\nResponse<Void> purgeResponse = secretClient.purgeDeletedSecretWithResponse(\"secretName\",\n     new Context(key1, value1));\n System.out.printf(\"Purge Status Code: %d\", purgeResponse.getStatusCode());\n```"
  returns:
    description: "A response containing status code and HTTP headers."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup(byte[])"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackup(byte[] backup)"
  name: "restoreSecretBackup(byte[] backup)"
  nameWithType: "SecretClient.restoreSecretBackup(byte[] backup)"
  summary: "Restores a backed up secret, and all its versions, to a vault."
  parameters:
  - description: "The backup blob associated with the secret."
    name: "backup"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public KeyVaultSecret restoreSecretBackup(byte[] backup)"
  desc: "Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.\n\n**Code sample**\n\nRestores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.\n\n```java\n// Pass the secret backup byte array of the secret to be restored.\n byte[] secretBackupByteArray = {};\n KeyVaultSecret restoredSecret = secretClient.restoreSecretBackup(secretBackupByteArray);\n System.out\n     .printf(\"Restored Secret with name %s and value %s\", restoredSecret.getName(), restoredSecret.getValue());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restored secret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse(byte[],com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.restoreSecretBackupWithResponse(byte[] backup, Context context)"
  name: "restoreSecretBackupWithResponse(byte[] backup, Context context)"
  nameWithType: "SecretClient.restoreSecretBackupWithResponse(byte[] backup, Context context)"
  summary: "Restores a backed up secret, and all its versions, to a vault."
  parameters:
  - description: "The backup blob associated with the secret."
    name: "backup"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultSecret> restoreSecretBackupWithResponse(byte[] backup, Context context)"
  desc: "Restores a backed up secret, and all its versions, to a vault. This operation requires the `secrets/restore` permission.\n\n**Code sample**\n\nRestores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.\n\n```java\n// Pass the secret backup byte array of the secret to be restored.\n byte[] secretBackupByteArray = {};\n KeyVaultSecret restoredSecret = secretClient.restoreSecretBackupWithResponse(secretBackupByteArray,\n     new Context(key2, value2)).getValue();\n System.out\n     .printf(\"Restored Secret with name %s and value %s\", restoredSecret.getName(), restoredSecret.getValue());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restored secret\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecret(KeyVaultSecret secret)"
  name: "setSecret(KeyVaultSecret secret)"
  nameWithType: "SecretClient.setSecret(KeyVaultSecret secret)"
  summary: "Adds a secret to the key vault if it does not exist."
  parameters:
  - description: "The Secret object containing information about the secret and its properties. The properties\n     <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret.name\"></xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret.getValue()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret.value\"></xref> cannot be\n     null."
    name: "secret"
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultSecret setSecret(KeyVaultSecret secret)"
  desc: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.\n\nThe <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getExpiresOn()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"expires\"></xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getContentType()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"contentType\"></xref>, and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getNotBefore()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"notBefore\"></xref> values in `secret` are optional. If not specified, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.isEnabled()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"enabled\"></xref> is set to true by key vault.\n\n**Code sample**\n\nCreates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.\n\n```java\nKeyVaultSecret newSecret = new KeyVaultSecret(\"secretName\", \"secretValue\")\n     .setProperties(new SecretProperties().setExpiresOn(OffsetDateTime.now().plusDays(60)));\n KeyVaultSecret returnedSecret = secretClient.setSecret(newSecret);\n System.out.printf(\"Secret is created with name %s and value %s%n\", returnedSecret.getName(),\n     returnedSecret.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"created secret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecret(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecret(String name, String value)"
  name: "setSecret(String name, String value)"
  nameWithType: "SecretClient.setSecret(String name, String value)"
  summary: "Adds a secret to the key vault if it does not exist."
  parameters:
  - description: "The name of the secret. It is required and cannot be null."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value of the secret. It is required and cannot be null."
    name: "value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public KeyVaultSecret setSecret(String name, String value)"
  desc: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.\n\n**Code sample**\n\nCreates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.\n\n```java\nKeyVaultSecret secret = secretClient.setSecret(\"secretName\", \"secretValue\");\n System.out.printf(\"Secret is created with name %s and value %s%n\", secret.getName(), secret.getValue());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"created secret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(com.azure.security.keyvault.secrets.models.KeyVaultSecret,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.setSecretWithResponse(KeyVaultSecret secret, Context context)"
  name: "setSecretWithResponse(KeyVaultSecret secret, Context context)"
  nameWithType: "SecretClient.setSecretWithResponse(KeyVaultSecret secret, Context context)"
  summary: "Adds a secret to the key vault if it does not exist."
  parameters:
  - description: "The Secret object containing information about the secret and its properties. The properties\n     secret.name and secret.value must be non null."
    name: "secret"
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<KeyVaultSecret> setSecretWithResponse(KeyVaultSecret secret, Context context)"
  desc: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is created. This operation requires the `secrets/set` permission.\n\n**Code sample**\n\nCreates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.\n\n```java\nKeyVaultSecret newSecret = new KeyVaultSecret(\"secretName\", \"secretValue\")\n          .setProperties(new SecretProperties().setExpiresOn(OffsetDateTime.now().plusDays(60)));\n KeyVaultSecret secret = secretClient.setSecretWithResponse(newSecret, new Context(key1, value1)).getValue();\n System.out.printf(\"Secret is created with name %s and value %s%n\", secret.getName(), secret.getValue());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"created secret\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(com.azure.security.keyvault.secrets.models.SecretProperties)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.updateSecretProperties(SecretProperties secretProperties)"
  name: "updateSecretProperties(SecretProperties secretProperties)"
  nameWithType: "SecretClient.updateSecretProperties(SecretProperties secretProperties)"
  summary: "Updates the attributes associated with the secret."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret properties\"></xref> object with updated properties."
    name: "secretProperties"
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SecretProperties updateSecretProperties(SecretProperties secretProperties)"
  desc: "Updates the attributes associated with the secret. The value of the secret in the key vault cannot be changed. Only attributes populated in `secretProperties` are changed. Attributes not specified in the request are not changed. This operation requires the `secrets/set` permission.\n\nThe `secret` is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"name\"></xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"version\"></xref> cannot be null.\n\n**Code sample**\n\nGets the latest version of the secret, changes its expiry time, and the updates the secret in the key vault.\n\n```java\nSecretProperties secretProperties = secretClient.getSecret(\"secretName\").getProperties();\n secretProperties.setExpiresOn(OffsetDateTime.now().plusDays(60));\n SecretProperties updatedSecretProperties = secretClient.updateSecretProperties(secretProperties);\n KeyVaultSecret updatedSecret = secretClient.getSecret(updatedSecretProperties.getName());\n System.out.printf(\"Updated Secret is returned with name %s, value %s and expires %s%n\",\n     updatedSecret.getName(), updatedSecret.getValue(), updatedSecret.getProperties().getExpiresOn());\n```"
  returns:
    description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated secret\"></xref>."
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(com.azure.security.keyvault.secrets.models.SecretProperties,com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.secrets.SecretClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  name: "updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  nameWithType: "SecretClient.updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  summary: "Updates the attributes associated with the secret."
  parameters:
  - description: "The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secret properties\"></xref> object with updated properties."
    name: "secretProperties"
    type: "<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SecretProperties> updateSecretPropertiesWithResponse(SecretProperties secretProperties, Context context)"
  desc: "Updates the attributes associated with the secret. The value of the secret in the key vault cannot be changed. Only attributes populated in `secretProperties` are changed. Attributes not specified in the request are not changed. This operation requires the `secrets/set` permission.\n\nThe `secret` is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getName()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"name\"></xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties.getVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"version\"></xref> cannot be null.\n\n**Code sample**\n\nGets the latest version of the secret, changes its expiry time, and the updates the secret in the key vault.\n\n```java\nSecretProperties secretProperties = secretClient.getSecret(\"secretName\").getProperties();\n secretProperties.setExpiresOn(OffsetDateTime.now().plusDays(60));\n SecretProperties updatedSecretBase = secretClient.updateSecretPropertiesWithResponse(secretProperties,\n     new Context(key2, value2)).getValue();\n KeyVaultSecret updatedSecret = secretClient.getSecret(updatedSecretBase.getName());\n System.out.printf(\"Updated Secret is returned with name %s, value %s and expires %s%n\",\n     updatedSecret.getName(), updatedSecret.getValue(), updatedSecret.getProperties().getExpiresOn());\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains the <xref uid=\"com.azure.security.keyvault.secrets.models.SecretProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"updated secret\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "The SecretClient provides synchronous methods to manage <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secrets\"></xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring, and listing the <xref uid=\"com.azure.security.keyvault.secrets.models.KeyVaultSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"secrets\"></xref>. The client also supports listing <xref uid=\"com.azure.security.keyvault.secrets.models.DeletedSecret\" data-throw-if-not-resolved=\"false\" data-raw-source=\"deleted secrets\"></xref> for a soft-delete enabled Azure Key Vault.\n\n**Construct the sync client**\n\n```java\nSecretClient secretClient = new SecretClientBuilder()\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .vaultUrl(\"https://myvault.vault.azure.net/\")\n     .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))\n     .buildClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.secrets"
artifact: com.azure:azure-security-keyvault-secrets:4.4.0-beta.5
