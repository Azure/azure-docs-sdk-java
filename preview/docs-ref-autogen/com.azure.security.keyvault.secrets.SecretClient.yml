### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.secrets.SecretClient
  id: SecretClient
  parent: com.azure.security.keyvault.secrets
  children:
  - com.azure.security.keyvault.secrets.SecretClient.backupSecret(String)
  - com.azure.security.keyvault.secrets.SecretClient.deleteSecret(String)
  - com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(String)
  - com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)
  - com.azure.security.keyvault.secrets.SecretClient.getSecret(String)
  - com.azure.security.keyvault.secrets.SecretClient.getSecret(String,String)
  - com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()
  - com.azure.security.keyvault.secrets.SecretClient.listSecrets()
  - com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String)
  - com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(String)
  - com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret(String)
  - com.azure.security.keyvault.secrets.SecretClient.restoreSecret(byte [])
  - com.azure.security.keyvault.secrets.SecretClient.setSecret(Secret)
  - com.azure.security.keyvault.secrets.SecretClient.setSecret(String,String)
  - com.azure.security.keyvault.secrets.SecretClient.updateSecret(SecretBase)
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: SecretClient
  nameWithType: SecretClient
  fullName: com.azure.security.keyvault.secrets.SecretClient
  type: Class
  source:
    remote: &o0
      path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 28
  package: com.azure.security.keyvault.secrets
  summary: "<p>The SecretClient provides synchronous methods to manage <xref uid=\"\" data-throw-if-not-resolved=\"false\">secrets</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secrets</xref>. The client also supports listing <xref uid=\"\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> for a soft-delete enabled Azure Key Vault.</p>\r\n<p>\r\n  <b>Samples to construct the sync client</b>\r\n</p>\r\n<p>{ com.azure.security.keyvault.secretclient.sync.construct}</p>\r\n<p></p>"
  syntax:
    content: public class SecretClient
  inheritance:
  - java.lang.Object
- uid: com.azure.security.keyvault.secrets.SecretClient.backupSecret(String)
  id: backupSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: backupSecret(String name)
  nameWithType: SecretClient.backupSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.backupSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.backupSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 279
  package: com.azure.security.keyvault.secrets
  summary: "<p>Requests a backup of the specified secret be downloaded to the client. All versions of the secret will be downloaded. This operation requires the<code>secrets/backup \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Backs up the secret from the key vault and prints out the length of the secret's backup byte array returned in the response</p>\r\n<p>\r\n  <pre>\r\nbyte[] secretBackup = secretClient.backupSecret(\"secretName\").value();\r\nSystem.out.printf(\"Secret's Backup Byte array's length %s\", secretBackup.length);\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<byte[]> backupSecret(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret. </p>
    return:
      type: com.azure.core.http.rest.Response260ad3b5
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the backed up secret blob. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a secret with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.deleteSecret(String)
  id: deleteSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: deleteSecret(String name)
  nameWithType: SecretClient.deleteSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.deleteSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.deleteSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 194
  package: com.azure.security.keyvault.secrets
  summary: "<p>Deletes a secret from the key vault. If soft-delete is enabled on the key vault then the secret is placed in the deleted state and requires to be purged for permanent deletion else the secret is permanently deleted. The delete operation applies to any secret stored in Azure Key Vault but it cannot be applied to an individual version of a secret. This operation requires the<code>secrets/delete \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Deletes the secret from the keyvault. Prints out the recovery id of the deleted secret returned in the response.</p>\r\n<p>\r\n  <pre>\r\nDeletedSecret deletedSecret = secretClient.deleteSecret(\"secretName\").value();\r\nSystem.out.printf(\"Deleted Secret's Recovery Id %s\", deletedSecret.recoveryId()));\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<DeletedSecret> deleteSecret(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret to be deleted. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.DeletedSecreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">deleted secret</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a secret with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(String)
  id: getDeletedSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: getDeletedSecret(String name)
  nameWithType: SecretClient.getDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 216
  package: com.azure.security.keyvault.secrets
  summary: "<p>The get deleted secret operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the<code>secrets/list \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the deleted secret from the key vault enabled for soft-delete. Prints out the details of the deleted secret returned in the response.</p>\r\n<p>\r\n  <pre>\r\n//Assuming secret is deleted on a soft-delete enabled key vault.\r\nDeletedSecret deletedSecret = secretClient.getDeletedSecret(\"secretName\").value();\r\nSystem.out.printf(\"Deleted Secret with recovery Id %s \\n\", deletedSecret.recoveryId());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<DeletedSecret> getDeletedSecret(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the deleted secret. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.DeletedSecreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">deleted secret</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a secret with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)
  id: getSecret(SecretBase)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: getSecret(SecretBase secretBase)
  nameWithType: SecretClient.getSecret(SecretBase secretBase)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase secretBase)
  overload: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 127
  package: com.azure.security.keyvault.secrets
  summary: "<p>Get the secret which represents <xref uid=\"\" data-throw-if-not-resolved=\"false\">secretBase</xref> from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the<code>secrets/get \r\n    </code> permission.</p>\r\n<p>The list operations <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecrets()\" data-throw-if-not-resolved=\"false\">SecretClient#listSecrets()</xref> and <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String)\" data-throw-if-not-resolved=\"false\">SecretClient#listSecretVersions(String)</xref> return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"\" data-throw-if-not-resolved=\"false\">base secret</xref> as output excluding the include the value of the secret. This operation can then be used to get the full secret with its value from<code>secretBase \r\n    </code> .</p>\r\n<p>{ com.azure.security.keyvault.secretclient.getSecret::secretBase}</p>\r\n<p></p>"
  syntax: &o4
    content: public Response<Secret> getSecret(SecretBase secretBase)
    parameters:
    - id: secretBase
      type: com.azure.security.keyvault.secrets.models.SecretBase
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">base secret</xref> holding attributes of the secret being requested. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="" data-throw-if-not-resolved="false">secret</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: <p>when a secret with <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.name()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.version()" data-throw-if-not-resolved="false">version</xref> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: <p>if <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.name()" data-throw-if-not-resolved="false">name</xref> or <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.version()" data-throw-if-not-resolved="false">version</xref> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(String)
  id: getSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: getSecret(String name)
  nameWithType: SecretClient.getSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 147
  package: com.azure.security.keyvault.secrets
  summary: "<p>Get the latest version of the specified secret from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the<code>secrets/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the secret in the key vault. Prints out the details of the returned secret.</p>\r\n<p>\r\n  <pre>\r\nSecret secret = secretClient.getSecret(\"secretName\").value();\r\nSystem.out.printf(\"Secret is returned with name %s and value %s \\n\", secret.name(), secret.value());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o1
    content: public Response<Secret> getSecret(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">Response#value()</xref> contains the requested <xref uid="" data-throw-if-not-resolved="false">Secret</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(String,String)
  id: getSecret(String,String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: getSecret(String name, String version)
  nameWithType: SecretClient.getSecret(String name, String version)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(String name, String version)
  overload: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 109
  package: com.azure.security.keyvault.secrets
  summary: "<p>Get the latest version of the specified secret from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the<code>secrets/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets a specific version of the secret in the key vault. Prints out the details of the returned secret.</p>\r\n<p>\r\n  <pre>\r\nString secretVersion = \"6A385B124DEF4096AF1361A85B16C204\";\r\nSecret secretWithVersion = secretClient.getSecret(\"secretName\", secretVersion).value();\r\nSystem.out.printf(\"Secret is returned with name %s and value %s \\n\", secretWithVersion.name(), secretWithVersion.value());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Secret> getSecret(String name, String version)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret, cannot be null. </p>
    - id: version
      type: "26831127"
      description: <p>The version of the secret to retrieve. If this is an empty String or null, this call is equivalent to calling <xref uid="com.azure.security.keyvault.secrets.SecretClient.getSecret(String)" data-throw-if-not-resolved="false">getSecret(String)</xref>, with the latest version being retrieved. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="" data-throw-if-not-resolved="false">secret</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> and<code>version 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> or<code>version 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()
  id: listDeletedSecrets()
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: listDeletedSecrets()
  nameWithType: SecretClient.listDeletedSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets()
  overload: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 338
  package: com.azure.security.keyvault.secrets
  summary: "<p>Lists <xref uid=\"\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> of the key vault. The get deleted secrets operation returns the secrets that have been deleted for a vault enabled for soft-delete. This operation requires the<code>secrets/list \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Lists the deleted secrets in the key vault and for each deleted secret prints out its recovery id.</p>\r\n<p>\r\n  <pre>\r\nfor (DeletedSecret deletedSecret : secretClient.listDeletedSecrets()) {\r\n  System.out.printf(\"Deleted secret's recovery Id %s\", deletedSecret.recoveryId());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Iterable<DeletedSecret> listDeletedSecrets()
    return:
      type: 2a13b5a5com.azure.security.keyvault.secrets.models.DeletedSecreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">List</xref> containing all of the <xref uid="" data-throw-if-not-resolved="false">deleted secrets</xref> in the vault. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.listSecrets()
  id: listSecrets()
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: listSecrets()
  nameWithType: SecretClient.listSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretClient.listSecrets()
  overload: com.azure.security.keyvault.secrets.SecretClient.listSecrets*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 320
  package: com.azure.security.keyvault.secrets
  summary: "<p>List the secrets in the key vault. The list Secrets operation is applicable to the entire vault. The individual secret response in the list is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretBase</xref> as only the base secret identifier and its attributes are provided in the response. The secret values and individual secret versions are not listed in the response. This operation requires the<code>secrets/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full secrets with values from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretBase baseSecret)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secret</xref> with value included of its latest version.</p>\r\n<p>\r\n  <pre>\r\nfor (SecretBase secret : secretClient.listSecrets()) {\r\n  Secret secretWithValue  = secretClient.getSecret(secret).value();\r\n  System.out.printf(\"Received secret with name %s and value %s\", secretWithValue.name(), secretWithValue.value());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o2
    content: public Iterable<SecretBase> listSecrets()
    return:
      type: 2a13b5a5com.azure.security.keyvault.secrets.models.SecretBasea08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">List</xref> containing <xref uid="" data-throw-if-not-resolved="false">SecretBase</xref> of all the secrets in the vault. The <xref uid="" data-throw-if-not-resolved="false">SecretBase</xref> contains all the information about the secret, except its value. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String)
  id: listSecretVersions(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: listSecretVersions(String name)
  nameWithType: SecretClient.listSecretVersions(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 361
  package: com.azure.security.keyvault.secrets
  summary: "<p>List all versions of the specified secret. The individual secret response in the list is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretBase</xref> as only the base secret identifier and its attributes are provided in the response. The secret values are not provided in the response. This operation requires the<code>secrets/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full Secrets with values for each version from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretBase)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Secret</xref> secrets with values included of the specified versions.</p>\r\n<p>\r\n  <pre>\r\nfor (SecretBase secret : secretClient.listSecretVersions(\"secretName\")) {\r\n  Secret secretWithValue  = secretClient.getSecret(secret).value();\r\n  System.out.printf(\"Received secret's version with name %s and value %s\", secretWithValue.name(), secretWithValue.value());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: &o3
    content: public Iterable<SecretBase> listSecretVersions(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret. </p>
    return:
      type: 2a13b5a5com.azure.security.keyvault.secrets.models.SecretBasea08ddfce
      description: >-
        <p>A <xref uid="" data-throw-if-not-resolved="false">List</xref> containing <xref uid="" data-throw-if-not-resolved="false">SecretBase</xref> of all the versions of the specified secret in the vault. List is empty if secret with<code>name 

            </code> does not exist in key vault </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a secret with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(String)
  id: purgeDeletedSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: purgeDeletedSecret(String name)
  nameWithType: SecretClient.purgeDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 237
  package: com.azure.security.keyvault.secrets
  summary: "<p>The purge deleted secret operation removes the secret permanently, without the possibility of recovery. This operation can only be enabled on a soft-delete enabled vault. This operation requires the<code>secrets/purge \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Purges the deleted secret from the key vault enabled for soft-delete. Prints out the status code from the server response.</p>\r\n<p>\r\n  <pre>\r\n//Assuming secret is deleted on a soft-delete enabled key vault.\r\nVoidResponse purgeResponse = secretClient.purgeDeletedSecret(\"deletedSecretName\");\r\nSystem.out.printf(\"Purge Status Code: %d\", purgeResponse.statusCode());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public VoidResponse purgeDeletedSecret(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret. </p>
    return:
      type: com.azure.core.http.rest.VoidResponse
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">VoidResponse</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a secret with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret(String)
  id: recoverDeletedSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: recoverDeletedSecret(String name)
  nameWithType: SecretClient.recoverDeletedSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret(String name)
  overload: com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 259
  package: com.azure.security.keyvault.secrets
  summary: "<p>Recovers the deleted secret in the key vault to its latest version and can only be performed on a soft-delete enabled vault. This operation requires the<code>secrets/recover \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Recovers the deleted secret from the key vault enabled for soft-delete. Prints out the details of the recovered secret returned in the response.</p>\r\n<p>\r\n  <pre>\r\n//Assuming secret is deleted on a soft-delete enabled key vault.\r\nSecret recoveredSecret =  secretClient.recoverDeletedSecret(\"deletedSecretName\").value();\r\nSystem.out.printf(\"Recovered Secret with name %s\", recoveredSecret.name());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Secret> recoverDeletedSecret(String name)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the deleted secret to be recovered. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">recovered secret</xref>. </p>
  exceptions:
  - type: 47b9dbf9
    description: >-
      <p>when a secret with<code>name 

          </code> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: >-
      <p>when a secret with<code>name 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.restoreSecret(byte [])
  id: restoreSecret(byte [])
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: restoreSecret(byte[] backup)
  nameWithType: SecretClient.restoreSecret(byte[] backup)
  fullName: com.azure.security.keyvault.secrets.SecretClient.restoreSecret(byte[] backup)
  overload: com.azure.security.keyvault.secrets.SecretClient.restoreSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 300
  package: com.azure.security.keyvault.secrets
  summary: "<p>Restores a backed up secret, and all its versions, to a vault. This operation requires the<code>secrets/restore \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Restores the secret in the key vault from its backup byte array. Prints out the details of the restored secret returned in the response.</p>\r\n<p>\r\n  <pre>\r\n//Pass the secret backup byte array of the secret to be restored.\r\nSecret restoredSecret = secretClient.restoreSecret(secretBackupByteArray).value();\r\nSystem.out.printf(\"Restored Secret with name %s and value %s\", restoredSecret.name(), restoredSecret.value());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Secret> restoreSecret(byte[] backup)
    parameters:
    - id: backup
      type: ccd9418d
      description: <p>The backup blob associated with the secret. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">restored secret</xref>. </p>
  exceptions:
  - type: 8eb71202
    description: >-
      <p>when<code>backup 

          </code> blob is malformed. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecret(Secret)
  id: setSecret(Secret)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: setSecret(Secret secret)
  nameWithType: SecretClient.setSecret(Secret secret)
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecret(Secret secret)
  overload: com.azure.security.keyvault.secrets.SecretClient.setSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 66
  package: com.azure.security.keyvault.secrets
  summary: "<p>The set operation adds a secret to the Azure Key Vault. If the named secret already exists, a new version of the secret is created in the key vault. This operation requires the<code>secrets/set \r\n    </code> permission.</p>\r\n<p>The <xref uid=\"\" data-throw-if-not-resolved=\"false\">Secret</xref> is required. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase.expires()\" data-throw-if-not-resolved=\"false\">expires</xref>, <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase.contentType()\" data-throw-if-not-resolved=\"false\">contentType</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase.notBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in<code>secret \r\n    </code> are optional. The <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase.enabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true by key vault, if not specified.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Creates a new secret which expires in 60 days in the key vault. Prints out the details of the newly created secret returned in the response.</p>\r\n<p>\r\n  <pre>\r\nSecret secret = new Secret(\"secretName\", \"secretValue\")\r\n  .expires(OffsetDateTime.now.plusDays(60));</pre>\r\n</p>\r\n<p>\r\n  <pre>Secret retSecret = secretClient.setSecret(keySecret).value();\r\nSystem.out.printf(\"Secret is created with name %s and value %s \\n\", retSecret.name(), retSecret.value());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Secret> setSecret(Secret secret)
    parameters:
    - id: secret
      type: com.azure.security.keyvault.secrets.models.Secret
      description: <p>The Secret object containing information about the secret and its properties. The properties secret.name and secret.value must be non null. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">created secret</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>secret 

          </code> is<code>null 

          </code> . </p>
  - type: 8eb71202
    description: >-
      <p>if<code>secret 

          </code> is malformed. </p>
  - type: 409de17b
    description: <p>if <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.name()" data-throw-if-not-resolved="false">name</xref> or <xref uid="com.azure.security.keyvault.secrets.models.Secret.value()" data-throw-if-not-resolved="false">value</xref> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecret(String,String)
  id: setSecret(String,String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: setSecret(String name, String value)
  nameWithType: SecretClient.setSecret(String name, String value)
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecret(String name, String value)
  overload: com.azure.security.keyvault.secrets.SecretClient.setSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 87
  package: com.azure.security.keyvault.secrets
  summary: "<p>The set operation adds a secret to the Azure Key Vault. If the named secret already exists, Azure Key Vault creates a new version of that secret. This operation requires the<code>secrets/set \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Creates a new secret in the key vault. Prints out the details of the newly created secret returned in the response.</p>\r\n<p>\r\n  <pre>\r\nSecret secret = secretClient.setSecret(\"secretName\", \"secretValue\").value();\r\nSystem.out.printf(\"Secret is created with name %s and value %s \\n\", secret.name(), secret.value());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<Secret> setSecret(String name, String value)
    parameters:
    - id: name
      type: "26831127"
      description: <p>The name of the secret. It is required and cannot be null. </p>
    - id: value
      type: "26831127"
      description: <p>The value of the secret. It is required and cannot be null. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">created secret</xref>. </p>
  exceptions:
  - type: 8eb71202
    description: >-
      <p>if invalid<code>name 

          </code> or<code>value 

          </code> is specified. </p>
  - type: 409de17b
    description: >-
      <p>if<code>name 

          </code> or<code>value 

          </code> is empty string. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.updateSecret(SecretBase)
  id: updateSecret(SecretBase)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  langs:
  - java
  name: updateSecret(SecretBase secret)
  nameWithType: SecretClient.updateSecret(SecretBase secret)
  fullName: com.azure.security.keyvault.secrets.SecretClient.updateSecret(SecretBase secret)
  overload: com.azure.security.keyvault.secrets.SecretClient.updateSecret*
  type: Method
  source:
    remote: *o0
    path: sdk/keyvault/azure-keyvault-secrets/src/main/java/com/azure/security/keyvault/secrets/SecretClient.java
    startLine: 173
  package: com.azure.security.keyvault.secrets
  summary: "<p>Updates the attributes associated with the specified secret, but not the value of the specified secret in the key vault. The update operation changes specified attributes of an existing stored secret and attributes that are not specified in the request are left unchanged. The value of a secret itself cannot be changed. This operation requires the<code>secrets/set \r\n    </code> permission.</p>\r\n<p>The<code>secret \r\n    </code> is required and its fields <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase.name()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase.version()\" data-throw-if-not-resolved=\"false\">version</xref> cannot be null.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the secret, changes its expiry time and the updates the secret in the key vault.</p>\r\n<p>\r\n  <pre>\r\nSecret secret = secretClient.getSecret(\"secretName\").value();\r\nsecret.expires(OffsetDateTime.now().plusDays(60));\r\nSecretBase updatedSecretBase = secretClient.updateSecret(secret).value();\r\nSecret updatedSecret = secretClient.getSecret(updatedSecretBase.name()).value();\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax:
    content: public Response<SecretBase> updateSecret(SecretBase secret)
    parameters:
    - id: secret
      type: com.azure.security.keyvault.secrets.models.SecretBase
      description: <p>The <xref uid="" data-throw-if-not-resolved="false">base secret</xref> object with updated properties. </p>
    return:
      type: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.SecretBasea08ddfce
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="" data-throw-if-not-resolved="false">updated secret</xref>. </p>
  exceptions:
  - type: 17c54119
    description: >-
      <p>if<code>secret 

          </code> is<code>null 

          </code> . </p>
  - type: 47b9dbf9
    description: <p>when a secret with <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.name()" data-throw-if-not-resolved="false">name</xref> and <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.version()" data-throw-if-not-resolved="false">version</xref> doesn't exist in the key vault. </p>
  - type: 409de17b
    description: <p>if <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.name()" data-throw-if-not-resolved="false">name</xref> or <xref uid="com.azure.security.keyvault.secrets.models.SecretBase.version()" data-throw-if-not-resolved="false">version</xref> is empty string. </p>
references:
- uid: 17c54119
  spec.java:
  - name: NullPointerException
    fullName: NullPointerException
- uid: 8eb71202
  spec.java:
  - name: ResourceModifiedException
    fullName: ResourceModifiedException
- uid: 409de17b
  spec.java:
  - name: HttpRequestException
    fullName: HttpRequestException
- uid: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.Secreta08ddfce
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.Secret
    name: Secret
    fullName: com.azure.security.keyvault.secrets.models.Secret
    href: com.azure.security.keyvault.secrets.models.Secret.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.setSecret*
  name: setSecret
  nameWithType: SecretClient.setSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.setSecret
  package: com.azure.security.keyvault.secrets
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: 47b9dbf9
  spec.java:
  - name: ResourceNotFoundException
    fullName: ResourceNotFoundException
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret*
  name: getSecret
  nameWithType: SecretClient.getSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.SecretBasea08ddfce
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.SecretBase
    name: SecretBase
    fullName: com.azure.security.keyvault.secrets.models.SecretBase
    href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.updateSecret*
  name: updateSecret
  nameWithType: SecretClient.updateSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.updateSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.Response78504a52com.azure.security.keyvault.secrets.models.DeletedSecreta08ddfce
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
    href: com.azure.security.keyvault.secrets.models.DeletedSecret.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.deleteSecret*
  name: deleteSecret
  nameWithType: SecretClient.deleteSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.deleteSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret*
  name: getDeletedSecret
  nameWithType: SecretClient.getDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.getDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret*
  name: purgeDeletedSecret
  nameWithType: SecretClient.purgeDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.purgeDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret*
  name: recoverDeletedSecret
  nameWithType: SecretClient.recoverDeletedSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.recoverDeletedSecret
  package: com.azure.security.keyvault.secrets
- uid: com.azure.core.http.rest.Response260ad3b5
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
    href: com.azure.core.http.rest.Response.yml
  - name: <byte[]>
    fullName: <byte[]>
- uid: com.azure.security.keyvault.secrets.SecretClient.backupSecret*
  name: backupSecret
  nameWithType: SecretClient.backupSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.backupSecret
  package: com.azure.security.keyvault.secrets
- uid: ccd9418d
  spec.java:
  - name: byte []
    fullName: byte []
- uid: com.azure.security.keyvault.secrets.SecretClient.restoreSecret*
  name: restoreSecret
  nameWithType: SecretClient.restoreSecret
  fullName: com.azure.security.keyvault.secrets.SecretClient.restoreSecret
  package: com.azure.security.keyvault.secrets
- uid: 2a13b5a5com.azure.security.keyvault.secrets.models.SecretBasea08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.azure.security.keyvault.secrets.models.SecretBase
    name: SecretBase
    fullName: com.azure.security.keyvault.secrets.models.SecretBase
    href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.listSecrets*
  name: listSecrets
  nameWithType: SecretClient.listSecrets
  fullName: com.azure.security.keyvault.secrets.SecretClient.listSecrets
  package: com.azure.security.keyvault.secrets
- uid: 2a13b5a5com.azure.security.keyvault.secrets.models.DeletedSecreta08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.azure.security.keyvault.secrets.models.DeletedSecret
    name: DeletedSecret
    fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
    href: com.azure.security.keyvault.secrets.models.DeletedSecret.yml
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets*
  name: listDeletedSecrets
  nameWithType: SecretClient.listDeletedSecrets
  fullName: com.azure.security.keyvault.secrets.SecretClient.listDeletedSecrets
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions*
  name: listSecretVersions
  nameWithType: SecretClient.listSecretVersions
  fullName: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions
  package: com.azure.security.keyvault.secrets
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient
  parent: com.azure.security.keyvault.secrets
  href: com.azure.security.keyvault.secrets.SecretAsyncClient.yml
  name: SecretAsyncClient
  nameWithType: SecretAsyncClient
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient
  type: Class
  summary: "<p>The SecretAsyncClient provides asynchronous methods to manage <xref uid=\"\" data-throw-if-not-resolved=\"false\">secrets</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, deleting, purging, backing up, restoring and listing the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secrets</xref>. The client also supports listing <xref uid=\"\" data-throw-if-not-resolved=\"false\">deleted secrets</xref> for a soft-delete enabled Azure Key Vault.</p>\r\n<p>\r\n  <b>Samples to construct the async client</b>\r\n</p>\r\n<p>{ com.azure.security.keyvault.secretclient.async.construct}</p>\r\n<p></p>"
  syntax:
    content: public class SecretAsyncClient
- uid: com.azure.core.http.rest.Response
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.Response.yml
  name: Response<T>
  nameWithType: Response<T>
  fullName: com.azure.core.http.rest.Response<T>
  type: Interface
  summary: "<p>REST response with a strongly-typed content specified.</p>\r\n<p></p>"
  syntax:
    content: public interface Response<T>
    typeParameters:
    - id: T
      type: 8ce1ecb9
      description: <p>The deserialized type of the response content, available from <xref uid="com.azure.core.http.rest.Response.value()" data-throw-if-not-resolved="false">value()</xref>. </p>
- uid: com.azure.security.keyvault.secrets.models.Secret
  parent: com.azure.security.keyvault.secrets.models
  href: com.azure.security.keyvault.secrets.models.Secret.yml
  name: Secret
  nameWithType: Secret
  fullName: com.azure.security.keyvault.secrets.models.Secret
  type: Class
  summary: "<p>Secret is the resource consisting of name, value and its attributes inherited from <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase\" data-throw-if-not-resolved=\"false\">SecretBase</xref>. It is managed by Secret Service.</p>\r\n<p></p>"
  syntax:
    content: public class Secret extends SecretBase
- uid: com.azure.security.keyvault.secrets.models.SecretBase.expires()
  parent: com.azure.security.keyvault.secrets.models.SecretBase
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: expires()
  nameWithType: SecretBase.expires()
  fullName: com.azure.security.keyvault.secrets.models.SecretBase.expires()
  type: Method
  summary: "<p>Get the Secret Expiry time in UTC.</p>\r\n<p></p>"
  syntax:
    content: public OffsetDateTime expires()
    return:
      type: 583ea9ea
      description: <p>the expires UTC time. </p>
- uid: com.azure.security.keyvault.secrets.models.SecretBase.contentType()
  parent: com.azure.security.keyvault.secrets.models.SecretBase
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: contentType()
  nameWithType: SecretBase.contentType()
  fullName: com.azure.security.keyvault.secrets.models.SecretBase.contentType()
  type: Method
  summary: "<p>Get the content type.</p>\r\n<p></p>"
  syntax:
    content: public String contentType()
    return:
      type: "26831127"
      description: <p>the content type. </p>
- uid: com.azure.security.keyvault.secrets.models.SecretBase.notBefore()
  parent: com.azure.security.keyvault.secrets.models.SecretBase
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: notBefore()
  nameWithType: SecretBase.notBefore()
  fullName: com.azure.security.keyvault.secrets.models.SecretBase.notBefore()
  type: Method
  summary: "<p>Get the notBefore UTC time.</p>\r\n<p></p>"
  syntax:
    content: public OffsetDateTime notBefore()
    return:
      type: 583ea9ea
      description: <p>the notBefore UTC time. </p>
- uid: com.azure.security.keyvault.secrets.models.SecretBase.enabled()
  parent: com.azure.security.keyvault.secrets.models.SecretBase
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: enabled()
  nameWithType: SecretBase.enabled()
  fullName: com.azure.security.keyvault.secrets.models.SecretBase.enabled()
  type: Method
  summary: "<p>Get the enabled value.</p>\r\n<p></p>"
  syntax:
    content: public Boolean enabled()
    return:
      type: 866c2227
      description: <p>the enabled value </p>
- uid: com.azure.security.keyvault.secrets.models.SecretBase.name()
  parent: com.azure.security.keyvault.secrets.models.SecretBase
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: name()
  nameWithType: SecretBase.name()
  fullName: com.azure.security.keyvault.secrets.models.SecretBase.name()
  type: Method
  summary: "<p>Get the secret name.</p>\r\n<p></p>"
  syntax:
    content: public String name()
    return:
      type: "26831127"
      description: <p>the name of the secret. </p>
- uid: com.azure.security.keyvault.secrets.models.Secret.value()
  parent: com.azure.security.keyvault.secrets.models.Secret
  href: com.azure.security.keyvault.secrets.models.Secret.yml
  name: value()
  nameWithType: Secret.value()
  fullName: com.azure.security.keyvault.secrets.models.Secret.value()
  type: Method
  summary: "<p>Get the value of the secret.</p>\r\n<p></p>"
  syntax:
    content: public String value()
    return:
      type: "26831127"
      description: <p>the secret value </p>
- uid: com.azure.core.http.rest.Response.value()
  parent: com.azure.core.http.rest.Response
  href: com.azure.core.http.rest.Response.yml
  name: value()
  nameWithType: Response<T>.value()
  fullName: com.azure.core.http.rest.Response<T>.value()
  type: Method
  syntax:
    content: public T value()
    return:
      type: 8ce1ecb9
      description: <p>the deserialized value of the HTTP response. </p>
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  name: getSecret(String name)
  nameWithType: SecretClient.getSecret(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(String name)
  type: Method
  summary: "<p>Get the latest version of the specified secret from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the<code>secrets/get \r\n    </code> permission.</p>\r\n<p>\r\n  <b>Code Samples</b>\r\n</p>\r\n<p>Gets the latest version of the secret in the key vault. Prints out the details of the returned secret.</p>\r\n<p>\r\n  <pre>\r\nSecret secret = secretClient.getSecret(\"secretName\").value();\r\nSystem.out.printf(\"Secret is returned with name %s and value %s \\n\", secret.name(), secret.value());\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o1
- uid: com.azure.security.keyvault.secrets.models.SecretBase
  parent: com.azure.security.keyvault.secrets.models
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: SecretBase
  nameWithType: SecretBase
  fullName: com.azure.security.keyvault.secrets.models.SecretBase
  type: Class
  summary: "<p>SecretBase is the resource containing all the properties of the secret except its value. It is managed by the Secret Service.</p>\r\n<p></p>"
  syntax:
    content: public class SecretBase
- uid: com.azure.security.keyvault.secrets.SecretClient.listSecrets()
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  name: listSecrets()
  nameWithType: SecretClient.listSecrets()
  fullName: com.azure.security.keyvault.secrets.SecretClient.listSecrets()
  type: Method
  summary: "<p>List the secrets in the key vault. The list Secrets operation is applicable to the entire vault. The individual secret response in the list is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretBase</xref> as only the base secret identifier and its attributes are provided in the response. The secret values and individual secret versions are not listed in the response. This operation requires the<code>secrets/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full secrets with values from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretBase baseSecret)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secret</xref> with value included of its latest version.</p>\r\n<p>\r\n  <pre>\r\nfor (SecretBase secret : secretClient.listSecrets()) {\r\n  Secret secretWithValue  = secretClient.getSecret(secret).value();\r\n  System.out.printf(\"Received secret with name %s and value %s\", secretWithValue.name(), secretWithValue.value());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o2
- uid: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  name: listSecretVersions(String name)
  nameWithType: SecretClient.listSecretVersions(String name)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String name)
  type: Method
  summary: "<p>List all versions of the specified secret. The individual secret response in the list is represented by <xref uid=\"\" data-throw-if-not-resolved=\"false\">SecretBase</xref> as only the base secret identifier and its attributes are provided in the response. The secret values are not provided in the response. This operation requires the<code>secrets/list \r\n    </code> permission.</p>\r\n<p>It is possible to get full Secrets with values for each version from this information. Loop over the <xref uid=\"\" data-throw-if-not-resolved=\"false\">secret</xref> and call <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)\" data-throw-if-not-resolved=\"false\">SecretClient#getSecret(SecretBase)</xref> . This will return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Secret</xref> secrets with values included of the specified versions.</p>\r\n<p>\r\n  <pre>\r\nfor (SecretBase secret : secretClient.listSecretVersions(\"secretName\")) {\r\n  Secret secretWithValue  = secretClient.getSecret(secret).value();\r\n  System.out.printf(\"Received secret's version with name %s and value %s\", secretWithValue.name(), secretWithValue.value());\r\n}\r\n</pre>\r\n</p>\r\n<p></p>"
  syntax: *o3
- uid: com.azure.security.keyvault.secrets.models.SecretBase.version()
  parent: com.azure.security.keyvault.secrets.models.SecretBase
  href: com.azure.security.keyvault.secrets.models.SecretBase.yml
  name: version()
  nameWithType: SecretBase.version()
  fullName: com.azure.security.keyvault.secrets.models.SecretBase.version()
  type: Method
  summary: "<p>Get the version of the secret.</p>\r\n<p></p>"
  syntax:
    content: public String version()
    return:
      type: "26831127"
      description: <p>the version of the secret. </p>
- uid: com.azure.security.keyvault.secrets.models.DeletedSecret
  parent: com.azure.security.keyvault.secrets.models
  href: com.azure.security.keyvault.secrets.models.DeletedSecret.yml
  name: DeletedSecret
  nameWithType: DeletedSecret
  fullName: com.azure.security.keyvault.secrets.models.DeletedSecret
  type: Class
  summary: "<p>Deleted Secret is the resource consisting of name, recovery id, deleted date, scheduled purge date and its attributes inherited from <xref uid=\"com.azure.security.keyvault.secrets.models.SecretBase\" data-throw-if-not-resolved=\"false\">SecretBase</xref>. It is managed by Secret Service.</p>\r\n<p></p>"
  syntax:
    content: public class DeletedSecret extends SecretBase
- uid: com.azure.core.http.rest.VoidResponse
  parent: com.azure.core.http.rest
  href: com.azure.core.http.rest.VoidResponse.yml
  name: VoidResponse
  nameWithType: VoidResponse
  fullName: com.azure.core.http.rest.VoidResponse
  type: Class
  summary: "<p>REST response containing only a status code and raw headers. </p>"
  syntax:
    content: public class VoidResponse
- uid: com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase)
  parent: com.azure.security.keyvault.secrets.SecretClient
  href: com.azure.security.keyvault.secrets.SecretClient.yml
  name: getSecret(SecretBase secretBase)
  nameWithType: SecretClient.getSecret(SecretBase secretBase)
  fullName: com.azure.security.keyvault.secrets.SecretClient.getSecret(SecretBase secretBase)
  type: Method
  summary: "<p>Get the secret which represents <xref uid=\"\" data-throw-if-not-resolved=\"false\">secretBase</xref> from the key vault. The get operation is applicable to any secret stored in Azure Key Vault. This operation requires the<code>secrets/get \r\n    </code> permission.</p>\r\n<p>The list operations <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecrets()\" data-throw-if-not-resolved=\"false\">SecretClient#listSecrets()</xref> and <xref uid=\"com.azure.security.keyvault.secrets.SecretClient.listSecretVersions(String)\" data-throw-if-not-resolved=\"false\">SecretClient#listSecretVersions(String)</xref> return the <xref uid=\"\" data-throw-if-not-resolved=\"false\">List</xref> containing <xref uid=\"\" data-throw-if-not-resolved=\"false\">base secret</xref> as output excluding the include the value of the secret. This operation can then be used to get the full secret with its value from<code>secretBase \r\n    </code> .</p>\r\n<p>{ com.azure.security.keyvault.secretclient.getSecret::secretBase}</p>\r\n<p></p>"
  syntax: *o4
