### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.RangeSet"
fullName: "com.azure.cosmos.implementation.guava25.collect.RangeSet<C>"
name: "RangeSet<C>"
nameWithType: "RangeSet<C>"
summary: "A set comprising zero or more <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.isEmpty\" data-throw-if-not-resolved=\"false\" data-raw-source=\"nonempty\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"disconnected\"></xref> ranges of type `C`.\n\nImplementations that choose to support the <xref uid=\"com.azure.cosmos.implementation.guava25.collect.RangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#add(Range)\"></xref> operation are required to ignore empty ranges and coalesce connected ranges. For example:\n\n```java\nRangeSet rangeSet = TreeRangeSet.create();\n rangeSet.add(Range.closed(1, 10)); // {[1, 10]}\n rangeSet.add(Range.closedOpen(11, 15)); // disconnected range; {[1, 10], [11, 15)}\n rangeSet.add(Range.closedOpen(15, 20)); // connected range; {[1, 10], [11, 20)}\n rangeSet.add(Range.openClosed(0, 0)); // empty range; {[1, 10], [11, 20)}\n rangeSet.remove(Range.open(5, 10)); // splits [1, 10]; {[1, 5], [10, 10], [11, 20)}\n```\n\nNote that the behavior of <xref uid=\"com.azure.cosmos.implementation.routing.Range.isEmpty()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Range#isEmpty()\"></xref> and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Range#isConnected(Range)\"></xref> may not be as expected on discrete ranges. See the Javadoc of those methods for details.\n\nFor a <xref uid=\"java.util.Set\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Set\"></xref> whose contents are specified by a <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Range\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Range\"></xref>, see <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ContiguousSet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ContiguousSet\"></xref>.\n\nSee the Guava User Guide article on [ RangeSets][RangeSets].\n\n\n[RangeSets]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#rangeset"
syntax: "public interface RangeSet<C>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.asDescendingSetOfRanges()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.asRanges()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.clear()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.complement()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.contains(C)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.rangeContaining(C)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.span()"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)"
- "com.azure.cosmos.implementation.guava25.collect.RangeSet.toString()"
type: "interface"
typeParameters:
- name: "C"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
