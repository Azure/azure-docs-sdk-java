### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet
  id: RangeSet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.asDescendingSetOfRanges()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.asRanges()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.clear()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.complement()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.contains(C)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.rangeContaining(C)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.span()
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.RangeSet.toString()
  langs:
  - java
  name: RangeSet<C>
  nameWithType: RangeSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A set comprising zero or more <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isEmpty" data-throw-if-not-resolved="false">nonempty</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">disconnected</xref> ranges of type `C`.


    Implementations that choose to support the <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">#add(Range)</xref> operation are required to ignore empty ranges and coalesce connected ranges. For example:


    ```java

    RangeSet rangeSet = TreeRangeSet.create();
     rangeSet.add(Range.closed(1, 10)); // {[1, 10]}
     rangeSet.add(Range.closedOpen(11, 15)); // disconnected range; {[1, 10], [11, 15)}
     rangeSet.add(Range.closedOpen(15, 20)); // connected range; {[1, 10], [11, 20)}
     rangeSet.add(Range.openClosed(0, 0)); // empty range; {[1, 10], [11, 20)}
     rangeSet.remove(Range.open(5, 10)); // splits [1, 10]; {[1, 5], [10, 10], [11, 20)}
    ```


    Note that the behavior of <xref uid="com.azure.cosmos.implementation.routing.Range.isEmpty()" data-throw-if-not-resolved="false">Range#isEmpty()</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">Range#isConnected(Range)</xref> may not be as expected on discrete ranges. See the Javadoc of those methods for details.


    For a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref> whose contents are specified by a <xref uid="com.azure.cosmos.implementation.guava25.collect.Range" data-throw-if-not-resolved="false">Range</xref>, see <xref uid="com.azure.cosmos.implementation.guava25.collect.ContiguousSet" data-throw-if-not-resolved="false">ContiguousSet</xref>.


    See the Guava User Guide article on [ RangeSets][RangeSets].



    [RangeSets]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#rangeset
  syntax:
    content: public interface RangeSet<C>
    typeParameters:
    - id: C
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: add(Range<C> range)
  nameWithType: RangeSet<C>.add(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.add(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adds the specified range to this `RangeSet` (optional operation). That is, for equal range sets a and b, the result of `a.add(range)` is that `a` will be the minimal range set for which both `a.enclosesAll(b)` and `a.encloses(range)`.


    Note that `range` will be <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.span(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">coalesced</xref> with any ranges in the range set that are <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">connected</xref> with it. Moreover, if `range` is empty, this is a no-op.
  syntax:
    content: public abstract void add(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: addAll(RangeSet<C> other)
  nameWithType: RangeSet<C>.addAll(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.addAll(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adds all of the ranges from the specified range set to this range set (optional operation). After this operation, this range set is the minimal range set that <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet&lt;C&gt;)" data-throw-if-not-resolved="false">encloses</xref> both the original range set and `other`.


    This is equivalent to calling <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.add" data-throw-if-not-resolved="false">#add</xref> on each of the ranges in `other` in turn.
  syntax:
    content: public abstract void addAll(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: addAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: addAll(Iterable<Range<C>> ranges)
  nameWithType: RangeSet<C>.addAll(Iterable<Range<C>> ranges)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.addAll(Iterable<Range<C>> ranges)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adds all of the specified ranges to this range set (optional operation). After this operation, this range set is the minimal range set that <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet&lt;C&gt;)" data-throw-if-not-resolved="false">encloses</xref> both the original range set and each range in `other`.


    This is equivalent to calling <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.add" data-throw-if-not-resolved="false">#add</xref> on each of the ranges in `other` in turn.
  syntax:
    content: public default void addAll(Iterable<Range<C>> ranges)
    parameters:
    - id: ranges
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.asDescendingSetOfRanges()
  id: asDescendingSetOfRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: asDescendingSetOfRanges()
  nameWithType: RangeSet<C>.asDescendingSetOfRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.asDescendingSetOfRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.asDescendingSetOfRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a descending view of the <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected" data-throw-if-not-resolved="false">disconnected</xref> ranges that make up this range set. The returned set may be empty. The iterators returned by its <xref uid="java.lang.Iterable.iterator" data-throw-if-not-resolved="false">Iterable#iterator</xref> method return the ranges in decreasing order of lower bound (equivalently, of upper bound).
  syntax:
    content: public abstract Set<Range<C>> asDescendingSetOfRanges()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.asRanges()
  id: asRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: asRanges()
  nameWithType: RangeSet<C>.asRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.asRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.asRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of the <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected" data-throw-if-not-resolved="false">disconnected</xref> ranges that make up this range set. The returned set may be empty. The iterators returned by its <xref uid="java.lang.Iterable.iterator" data-throw-if-not-resolved="false">Iterable#iterator</xref> method return the ranges in increasing order of lower bound (equivalently, of upper bound).
  syntax:
    content: public abstract Set<Range<C>> asRanges()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: clear()
  nameWithType: RangeSet<C>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all ranges from this `RangeSet` (optional operation). After this operation, `this.contains(c)` will return false for all `c`.


    This is equivalent to `remove(Range.all())`.
  syntax:
    content: public abstract void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.complement()
  id: complement()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: complement()
  nameWithType: RangeSet<C>.complement()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.complement()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.complement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the complement of this `RangeSet`.


    The returned view supports the <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.add" data-throw-if-not-resolved="false">#add</xref> operation if this `RangeSet` supports <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.remove" data-throw-if-not-resolved="false">#remove</xref>, and vice versa.
  syntax:
    content: public abstract RangeSet<C> complement()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.contains(C)
  id: contains(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: contains(C value)
  nameWithType: RangeSet<C>.contains(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.contains(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Determines whether any of this range set's member ranges contains `value`.
  syntax:
    content: public abstract boolean contains(C value)
    parameters:
    - id: value
      type: C
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: encloses(Range<C> otherRange)
  nameWithType: RangeSet<C>.encloses(Range<C> otherRange)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.encloses(Range<C> otherRange)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if there exists a member range in this range set which <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">encloses</xref> the specified range.
  syntax:
    content: public abstract boolean encloses(Range<C> otherRange)
    parameters:
    - id: otherRange
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: enclosesAll(RangeSet<C> other)
  nameWithType: RangeSet<C>.enclosesAll(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.enclosesAll(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if for each member range in `other` there exists a member range in this range set which <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">encloses</xref> it. It follows that `this.contains(value)` whenever `other.contains(value)`. Returns `true` if `other` is empty.


    This is equivalent to checking if this range set <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses" data-throw-if-not-resolved="false">#encloses</xref> each of the ranges in `other`.
  syntax:
    content: public abstract boolean enclosesAll(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: enclosesAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: enclosesAll(Iterable<Range<C>> other)
  nameWithType: RangeSet<C>.enclosesAll(Iterable<Range<C>> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.enclosesAll(Iterable<Range<C>> other)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if for each range in `other` there exists a member range in this range set which <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">encloses</xref> it. Returns `true` if `other` is empty.


    This is equivalent to checking if this range set <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses" data-throw-if-not-resolved="false">#encloses</xref> each range in `other`.
  syntax:
    content: public default boolean enclosesAll(Iterable<Range<C>> other)
    parameters:
    - id: other
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: equals(Object obj)
  nameWithType: RangeSet<C>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.equals(Object obj)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `obj` is another `RangeSet` that contains the same ranges according to <xref uid="com.azure.cosmos.implementation.routing.Range.equals(java.lang.Object)" data-throw-if-not-resolved="false">Range#equals(Object)</xref>.
  syntax:
    content: public abstract boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: hashCode()
  nameWithType: RangeSet<C>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `asRanges().hashCode()`.
  syntax:
    content: public abstract int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: intersects(Range<C> otherRange)
  nameWithType: RangeSet<C>.intersects(Range<C> otherRange)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.intersects(Range<C> otherRange)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.intersects*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if there exists a non-empty range enclosed by both a member range in this range set and the specified range. This is equivalent to calling `subRangeSet(otherRange)` and testing whether the resulting range set is non-empty.
  syntax:
    content: public abstract boolean intersects(Range<C> otherRange)
    parameters:
    - id: otherRange
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: isEmpty()
  nameWithType: RangeSet<C>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this range set contains no ranges.
  syntax:
    content: public abstract boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.rangeContaining(C)
  id: rangeContaining(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: rangeContaining(C value)
  nameWithType: RangeSet<C>.rangeContaining(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.rangeContaining(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.rangeContaining*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the unique range from this range set that <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains" data-throw-if-not-resolved="false">contains</xref> `value`, or `null` if this range set does not contain `value`.
  syntax:
    content: public abstract Range<C> rangeContaining(C value)
    parameters:
    - id: value
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: remove(Range<C> range)
  nameWithType: RangeSet<C>.remove(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.remove(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes the specified range from this `RangeSet` (optional operation). After this operation, if `range.contains(c)`, `this.contains(c)` will return `false`.


    If `range` is empty, this is a no-op.
  syntax:
    content: public abstract void remove(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: removeAll(RangeSet<C> other)
  nameWithType: RangeSet<C>.removeAll(RangeSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.removeAll(RangeSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all of the ranges from the specified range set from this range set (optional operation). After this operation, if `other.contains(c)`, `this.contains(c)` will return `false`.


    This is equivalent to calling <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.remove" data-throw-if-not-resolved="false">#remove</xref> on each of the ranges in `other` in turn.
  syntax:
    content: public abstract void removeAll(RangeSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: removeAll(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: removeAll(Iterable<Range<C>> ranges)
  nameWithType: RangeSet<C>.removeAll(Iterable<Range<C>> ranges)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.removeAll(Iterable<Range<C>> ranges)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all of the specified ranges from this range set (optional operation).


    This is equivalent to calling <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.remove" data-throw-if-not-resolved="false">#remove</xref> on each of the ranges in `other` in turn.
  syntax:
    content: public default void removeAll(Iterable<Range<C>> ranges)
    parameters:
    - id: ranges
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.span()
  id: span()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: span()
  nameWithType: RangeSet<C>.span()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.span()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.span*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the minimal range which <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">encloses</xref> all ranges in this range set.
  syntax:
    content: public abstract Range<C> span()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: subRangeSet(Range<C> view)
  nameWithType: RangeSet<C>.subRangeSet(Range<C> view)
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.subRangeSet(Range<C> view)
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.subRangeSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the intersection of this `RangeSet` with the specified range.


    The returned view supports all optional operations supported by this `RangeSet`, with the caveat that an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> is thrown on an attempt to <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">add</xref> any range not <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">enclosed</xref> by `view`.
  syntax:
    content: public abstract RangeSet<C> subRangeSet(Range<C> view)
    parameters:
    - id: view
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.RangeSet
  langs:
  - java
  name: toString()
  nameWithType: RangeSet<C>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.RangeSet.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a readable string representation of this range set. For example, if this `RangeSet` consisted of `Range.closed(1, 3)` and `Range.greaterThan(4)`, this might return `" [1..3](4..+\u221e)`"\}.
  syntax:
    content: public abstract String toString()
    return:
      type: java.lang.String
references:
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.contains*
  name: contains
  nameWithType: RangeSet<C>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.rangeContaining*
  name: rangeContaining
  nameWithType: RangeSet<C>.rangeContaining
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.rangeContaining
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.intersects*
  name: intersects
  nameWithType: RangeSet<C>.intersects
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.intersects
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.encloses*
  name: encloses
  nameWithType: RangeSet<C>.encloses
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.encloses
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.RangeSet
    name: RangeSet
    fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.enclosesAll*
  name: enclosesAll
  nameWithType: RangeSet<C>.enclosesAll
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.enclosesAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.isEmpty*
  name: isEmpty
  nameWithType: RangeSet<C>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.span*
  name: span
  nameWithType: RangeSet<C>.span
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.span
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.asRanges*
  name: asRanges
  nameWithType: RangeSet<C>.asRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.asRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.asDescendingSetOfRanges*
  name: asDescendingSetOfRanges
  nameWithType: RangeSet<C>.asDescendingSetOfRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.asDescendingSetOfRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.complement*
  name: complement
  nameWithType: RangeSet<C>.complement
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.complement
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.subRangeSet*
  name: subRangeSet
  nameWithType: RangeSet<C>.subRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.subRangeSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.add*
  name: add
  nameWithType: RangeSet<C>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.remove*
  name: remove
  nameWithType: RangeSet<C>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.clear*
  name: clear
  nameWithType: RangeSet<C>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.addAll*
  name: addAll
  nameWithType: RangeSet<C>.addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.removeAll*
  name: removeAll
  nameWithType: RangeSet<C>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.equals*
  name: equals
  nameWithType: RangeSet<C>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.hashCode*
  name: hashCode
  nameWithType: RangeSet<C>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet.toString*
  name: toString
  nameWithType: RangeSet<C>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range
  name: Range
  nameWithType: Range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
