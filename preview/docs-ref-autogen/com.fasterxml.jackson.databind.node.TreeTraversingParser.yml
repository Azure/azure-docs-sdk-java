### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser
  id: TreeTraversingParser
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node
  children:
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser(com.fasterxml.jackson.databind.JsonNode)
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser(com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.databind.node.TreeTraversingParser._closed
  - com.fasterxml.jackson.databind.node.TreeTraversingParser._handleEOF()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser._nodeCursor
  - com.fasterxml.jackson.databind.node.TreeTraversingParser._objectCodec
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.close()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNode()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNumericNode()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getCodec()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentLocation()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentName()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getEmbeddedObject()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getFloatValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberType()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberValue()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getParsingContext()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getText()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.getTokenLocation()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.hasTextCharacters()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.isClosed()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.isNaN()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.skipChildren()
  - com.fasterxml.jackson.databind.node.TreeTraversingParser.version()
  langs:
  - java
  name: TreeTraversingParser
  nameWithType: TreeTraversingParser
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser
  type: Class
  package: com.fasterxml.jackson.databind.node
  summary: Facade over <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> that implements <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> to allow accessing contents of JSON tree in alternate form (stream of tokens). Useful when a streaming source is expected by code, such as data binding functionality.
  syntax:
    content: public class TreeTraversingParser extends ParserMinimalBase
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonParser
  - com.fasterxml.jackson.core.base.ParserMinimalBase
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  - com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  - com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.finishToken()
  - com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.getByteValue()
  - com.fasterxml.jackson.core.JsonParser.getCodec()
  - com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  - com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  - com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  - com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  - com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  - com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  - com.fasterxml.jackson.core.JsonParser.getFloatValue()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getInputSource()
  - com.fasterxml.jackson.core.JsonParser.getIntValue()
  - com.fasterxml.jackson.core.JsonParser.getLongValue()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.getNumberType()
  - com.fasterxml.jackson.core.JsonParser.getNumberValue()
  - com.fasterxml.jackson.core.JsonParser.getObjectId()
  - com.fasterxml.jackson.core.JsonParser.getSchema()
  - com.fasterxml.jackson.core.JsonParser.getShortValue()
  - com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  - com.fasterxml.jackson.core.JsonParser.getTypeId()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.isNaN()
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.version()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  - com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.close()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser(com.fasterxml.jackson.databind.JsonNode)
  id: TreeTraversingParser(com.fasterxml.jackson.databind.JsonNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: TreeTraversingParser(JsonNode n)
  nameWithType: TreeTraversingParser.TreeTraversingParser(JsonNode n)
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser(JsonNode n)
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser*
  type: Constructor
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public TreeTraversingParser(JsonNode n)
    parameters:
    - id: n
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser(com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.ObjectCodec)
  id: TreeTraversingParser(com.fasterxml.jackson.databind.JsonNode,com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: TreeTraversingParser(JsonNode n, ObjectCodec codec)
  nameWithType: TreeTraversingParser.TreeTraversingParser(JsonNode n, ObjectCodec codec)
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser(JsonNode n, ObjectCodec codec)
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser*
  type: Constructor
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public TreeTraversingParser(JsonNode n, ObjectCodec codec)
    parameters:
    - id: n
      type: com.fasterxml.jackson.databind.JsonNode
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser._closed
  id: _closed
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: _closed
  nameWithType: TreeTraversingParser._closed
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser._closed
  type: Field
  package: com.fasterxml.jackson.databind.node
  summary: Flag that indicates whether parser is closed or not. Gets set when parser is either closed by explicit call (<xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.close*" data-throw-if-not-resolved="false">#close</xref>) or when end-of-input is reached.
  syntax:
    content: protected boolean _closed
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser._handleEOF()
  id: _handleEOF()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: _handleEOF()
  nameWithType: TreeTraversingParser._handleEOF()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser._handleEOF()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser._handleEOF*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method sub-classes need to implement
  syntax:
    content: protected void _handleEOF()
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser._nodeCursor
  id: _nodeCursor
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: _nodeCursor
  nameWithType: TreeTraversingParser._nodeCursor
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser._nodeCursor
  type: Field
  package: com.fasterxml.jackson.databind.node
  summary: Traversal context within tree
  syntax:
    content: protected NodeCursor _nodeCursor
    return:
      type: com.fasterxml.jackson.databind.node.NodeCursor
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser._objectCodec
  id: _objectCodec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: _objectCodec
  nameWithType: TreeTraversingParser._objectCodec
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser._objectCodec
  type: Field
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected ObjectCodec _objectCodec
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: close()
  nameWithType: TreeTraversingParser.close()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.close()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.close*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Closes the parser so that no further iteration or data access can be made; will also close the underlying input source if parser either **owns** the input source, or feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_SOURCE</xref> is enabled. Whether parser owns the input source depends on factory method that was used to construct instance (so check <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> for details, but the general idea is that if caller passes in closable resource (such as <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>) parser does NOT own the source; but if it passes a reference (such as <xref uid="java.io.File" data-throw-if-not-resolved="false">java.io.File</xref> or <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> and creates stream or reader it does own them.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNode()
  id: currentNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: currentNode()
  nameWithType: TreeTraversingParser.currentNode()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNode()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected JsonNode currentNode()
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNumericNode()
  id: currentNumericNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: currentNumericNode()
  nameWithType: TreeTraversingParser.currentNumericNode()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNumericNode()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNumericNode*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected JsonNode currentNumericNode()
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue()
  id: getBigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getBigIntegerValue()
  nameWithType: TreeTraversingParser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue*" data-throw-if-not-resolved="false">#getDecimalValue</xref> and then constructing a <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> from that value.
  syntax:
    content: public BigInteger getBigIntegerValue()
    return:
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getBinaryValue(Base64Variant b64variant)
  nameWithType: TreeTraversingParser.getBinaryValue(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue(Base64Variant b64variant)
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getText*" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public byte[] getBinaryValue(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getCodec()
  nameWithType: TreeTraversingParser.getCodec()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCodec()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCodec*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Accessor for <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.readValueAs*" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: TreeTraversingParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentLocation()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that returns location of the last processed character; usually for error reporting purposes.
  syntax:
    content: public JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentName()
  id: getCurrentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getCurrentName()
  nameWithType: TreeTraversingParser.getCurrentName()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentName()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentName*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: 'Method that can be called to get the name associated with the current token: for <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>s it will be the same as what <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getText*" data-throw-if-not-resolved="false">#getText</xref> returns; for field values it will be preceding field name; and for others (array values, root-level values) null.'
  syntax:
    content: public String getCurrentName()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue()
  id: getDecimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getDecimalValue()
  nameWithType: TreeTraversingParser.getDecimalValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>. No under/overflow exceptions are ever thrown.
  syntax:
    content: public BigDecimal getDecimalValue()
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue()
  id: getDoubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getDoubleValue()
  nameWithType: TreeTraversingParser.getDoubleValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java double, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public double getDoubleValue()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getEmbeddedObject()
  id: getEmbeddedObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getEmbeddedObject()
  nameWithType: TreeTraversingParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getEmbeddedObject()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Accessor that can be called if (and only if) the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>. For other token types, null is returned.


    Note: only some specialized parser implementations support embedding of objects (usually ones that are facades on top of non-streaming sources, such as object trees). One exception is access to binary content (whether via base64 encoding or not) which typically is accessible using this method, as well as <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue*" data-throw-if-not-resolved="false">#getBinaryValue()</xref>.
  syntax:
    content: public Object getEmbeddedObject()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getFloatValue()
  id: getFloatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getFloatValue()
  nameWithType: TreeTraversingParser.getFloatValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getFloatValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getFloatValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java float primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java float, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public float getFloatValue()
    return:
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue()
  id: getIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getIntValue()
  nameWithType: TreeTraversingParser.getIntValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java int, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public int getIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue()
  id: getLongValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getLongValue()
  nameWithType: TreeTraversingParser.getLongValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a Java long primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting to int; except for possible overflow/underflow exception.


    Note: if the token is an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public long getLongValue()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberType()
  id: getNumberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getNumberType()
  nameWithType: TreeTraversingParser.getNumberType()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberType()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberType*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: If current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, returns one of <xref uid="" data-throw-if-not-resolved="false">NumberType</xref> constants; otherwise returns null.
  syntax:
    content: public JsonParser.NumberType getNumberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberValue()
  id: getNumberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getNumberValue()
  nameWithType: TreeTraversingParser.getNumberValue()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberValue()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Generic number value accessor method that will work for all kinds of numeric values. It will return the optimal (simplest/smallest possible) wrapper object that can express the numeric value just parsed.
  syntax:
    content: public Number getNumberValue()
    return:
      type: java.lang.Number
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getParsingContext()
  id: getParsingContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getParsingContext()
  nameWithType: TreeTraversingParser.getParsingContext()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getParsingContext()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getParsingContext*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: 'Method that can be used to access current parsing context reader is in. There are 3 different types: root, array and object contexts, with slightly different available information. Contexts are hierarchically nested, and can be used for example for figuring out part of the input document that correspond to specific array or object (for highlighting purposes, or error reporting). Contexts can also be used for simple xpath-like matching of input, if so desired.'
  syntax:
    content: public JsonStreamContext getParsingContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getText()
  id: getText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getText()
  nameWithType: TreeTraversingParser.getText()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getText()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getText*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method for accessing textual representation of the current token; if no current token (before first call to <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or after encountering end-of-input), returns null. Method can be called for any token type.
  syntax:
    content: public String getText()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters()
  id: getTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getTextCharacters()
  nameWithType: TreeTraversingParser.getTextCharacters()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getText*" data-throw-if-not-resolved="false">#getText</xref>, but that will return underlying (unmodifiable) character array that contains textual value, instead of constructing a String object to contain this information. Note, however, that:

     *  Textual contents are not guaranteed to start at index 0 (rather, call <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset*" data-throw-if-not-resolved="false">#getTextOffset</xref>) to know the actual offset
     *  Length of textual contents may be less than the length of returned buffer: call <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength*" data-throw-if-not-resolved="false">#getTextLength</xref> for actual length of returned content.

    Note that caller **MUST NOT** modify the returned character array in any way -- doing so may corrupt current parser state and render parser instance useless.


    The only reason to call this method (over <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getText*" data-throw-if-not-resolved="false">#getText</xref>) is to avoid construction of a String object (which will make a copy of contents).
  syntax:
    content: public char[] getTextCharacters()
    return:
      type: char[]
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength()
  id: getTextLength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getTextLength()
  nameWithType: TreeTraversingParser.getTextLength()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Accessor used with <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know length of String stored in returned buffer.
  syntax:
    content: public int getTextLength()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset()
  id: getTextOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getTextOffset()
  nameWithType: TreeTraversingParser.getTextOffset()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Accessor used with <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know offset of the first text content character within buffer.
  syntax:
    content: public int getTextOffset()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: getTokenLocation()
  nameWithType: TreeTraversingParser.getTokenLocation()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTokenLocation()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.hasTextCharacters()
  id: hasTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: hasTextCharacters()
  nameWithType: TreeTraversingParser.hasTextCharacters()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.hasTextCharacters()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.hasTextCharacters*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that can be used to determine whether calling of <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> would be the most efficient way to access textual content for the event parser currently points to.


    Default implementation simply returns false since only actual implementation class has knowledge of its internal buffering state. Implementations are strongly encouraged to properly override this method, to allow efficient copying of content by other code.
  syntax:
    content: public boolean hasTextCharacters()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: isClosed()
  nameWithType: TreeTraversingParser.isClosed()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.isClosed()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.isClosed*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that can be called to determine whether this parser is closed or not. If it is closed, no new tokens can be retrieved by calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> (and the underlying stream may be closed). Closing may be due to an explicit call to <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.close*" data-throw-if-not-resolved="false">#close</xref> or because parser has encountered end of input.
  syntax:
    content: public boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.isNaN()
  id: isNaN()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: isNaN()
  nameWithType: TreeTraversingParser.isNaN()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.isNaN()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.isNaN*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: 'Access for checking whether current token is a numeric value token, but one that is of "not-a-number" (NaN) variety (including both "NaN" AND positive/negative infinity!): not supported by all formats, but often supported for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>. NOTE: roughly equivalent to calling `!Double.isFinite()` on value you would get from calling <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue()" data-throw-if-not-resolved="false">#getDoubleValue()</xref>.'
  syntax:
    content: public boolean isNaN()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken()
  id: nextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: nextToken()
  nameWithType: TreeTraversingParser.nextToken()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Main iteration method, which will advance stream enough to determine type of the next token, if any. If none remaining (stream has no content other than possible white space before ending), null will be returned.
  syntax:
    content: public JsonToken nextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.overrideCurrentName(java.lang.String)
  id: overrideCurrentName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: overrideCurrentName(String name)
  nameWithType: TreeTraversingParser.overrideCurrentName(String name)
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.overrideCurrentName(String name)
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.overrideCurrentName*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that can be used to change what is considered to be the current (field) name. May be needed to support non-JSON data formats or unusual binding conventions; not needed for typical processing.


    Note that use of this method should only be done as sort of last resort, as it is a work-around for regular operation.
  syntax:
    content: public void overrideCurrentName(String name)
    parameters:
    - id: name
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  id: readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: readBinaryValue(Base64Variant b64variant, OutputStream out)
  nameWithType: TreeTraversingParser.readBinaryValue(Base64Variant b64variant, OutputStream out)
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue(Base64Variant b64variant, OutputStream out)
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Similar to <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue*" data-throw-if-not-resolved="false">#readBinaryValue(OutputStream)</xref> but allows explicitly specifying base64 variant to use.
  syntax:
    content: public int readBinaryValue(Base64Variant b64variant, OutputStream out)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: out
      type: java.io.OutputStream
    return:
      type: int
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: setCodec(ObjectCodec c)
  nameWithType: TreeTraversingParser.setCodec(ObjectCodec c)
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.setCodec(ObjectCodec c)
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.setCodec*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Setter that allows defining <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.readValueAs*" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public void setCodec(ObjectCodec c)
    parameters:
    - id: c
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.skipChildren()
  id: skipChildren()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: skipChildren()
  nameWithType: TreeTraversingParser.skipChildren()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.skipChildren()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.skipChildren*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that will skip all child tokens of an array or object token that the parser currently points to, iff stream points to <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>. If not, it will do nothing. After skipping, stream will point to **matching** <xref uid="com.fasterxml.jackson.core.JsonToken.END_OBJECT" data-throw-if-not-resolved="false">JsonToken#END_OBJECT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref> (possibly skipping nested pairs of START/END OBJECT/ARRAY tokens as well as value tokens). The idea is that after calling this method, application will call <xref uid="com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> to point to the next available token, if any.
  syntax:
    content: public JsonParser skipChildren()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.TreeTraversingParser
  langs:
  - java
  name: version()
  nameWithType: TreeTraversingParser.version()
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.version()
  overload: com.fasterxml.jackson.databind.node.TreeTraversingParser.version*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Accessor for getting version of the core package, given a parser instance. Left for sub-classes to implement.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
references:
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser*
  name: TreeTraversingParser
  nameWithType: TreeTraversingParser.TreeTraversingParser
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.TreeTraversingParser
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.setCodec*
  name: setCodec
  nameWithType: TreeTraversingParser.setCodec
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.setCodec
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCodec*
  name: getCodec
  nameWithType: TreeTraversingParser.getCodec
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCodec
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.version*
  name: version
  nameWithType: TreeTraversingParser.version
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.version
  package: com.fasterxml.jackson.databind.node
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.close*
  name: close
  nameWithType: TreeTraversingParser.close
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.close
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken*
  name: nextToken
  nameWithType: TreeTraversingParser.nextToken
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.nextToken
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.skipChildren*
  name: skipChildren
  nameWithType: TreeTraversingParser.skipChildren
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.skipChildren
  package: com.fasterxml.jackson.databind.node
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.isClosed*
  name: isClosed
  nameWithType: TreeTraversingParser.isClosed
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.isClosed
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentName*
  name: getCurrentName
  nameWithType: TreeTraversingParser.getCurrentName
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentName
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.overrideCurrentName*
  name: overrideCurrentName
  nameWithType: TreeTraversingParser.overrideCurrentName
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.overrideCurrentName
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getParsingContext*
  name: getParsingContext
  nameWithType: TreeTraversingParser.getParsingContext
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getParsingContext
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTokenLocation*
  name: getTokenLocation
  nameWithType: TreeTraversingParser.getTokenLocation
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTokenLocation
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: TreeTraversingParser.getCurrentLocation
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getCurrentLocation
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getText*
  name: getText
  nameWithType: TreeTraversingParser.getText
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getText
  package: com.fasterxml.jackson.databind.node
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters*
  name: getTextCharacters
  nameWithType: TreeTraversingParser.getTextCharacters
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextCharacters
  package: com.fasterxml.jackson.databind.node
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength*
  name: getTextLength
  nameWithType: TreeTraversingParser.getTextLength
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextLength
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset*
  name: getTextOffset
  nameWithType: TreeTraversingParser.getTextOffset
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getTextOffset
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.hasTextCharacters*
  name: hasTextCharacters
  nameWithType: TreeTraversingParser.hasTextCharacters
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.hasTextCharacters
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberType*
  name: getNumberType
  nameWithType: TreeTraversingParser.getNumberType
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberType
  package: com.fasterxml.jackson.databind.node
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue*
  name: getBigIntegerValue
  nameWithType: TreeTraversingParser.getBigIntegerValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBigIntegerValue
  package: com.fasterxml.jackson.databind.node
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue*
  name: getDecimalValue
  nameWithType: TreeTraversingParser.getDecimalValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDecimalValue
  package: com.fasterxml.jackson.databind.node
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue*
  name: getDoubleValue
  nameWithType: TreeTraversingParser.getDoubleValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getDoubleValue
  package: com.fasterxml.jackson.databind.node
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getFloatValue*
  name: getFloatValue
  nameWithType: TreeTraversingParser.getFloatValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getFloatValue
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue*
  name: getIntValue
  nameWithType: TreeTraversingParser.getIntValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getIntValue
  package: com.fasterxml.jackson.databind.node
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue*
  name: getLongValue
  nameWithType: TreeTraversingParser.getLongValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getLongValue
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberValue*
  name: getNumberValue
  nameWithType: TreeTraversingParser.getNumberValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getNumberValue
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getEmbeddedObject*
  name: getEmbeddedObject
  nameWithType: TreeTraversingParser.getEmbeddedObject
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getEmbeddedObject
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.isNaN*
  name: isNaN
  nameWithType: TreeTraversingParser.isNaN
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.isNaN
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue*
  name: getBinaryValue
  nameWithType: TreeTraversingParser.getBinaryValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.getBinaryValue
  package: com.fasterxml.jackson.databind.node
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue*
  name: readBinaryValue
  nameWithType: TreeTraversingParser.readBinaryValue
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.readBinaryValue
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNode*
  name: currentNode
  nameWithType: TreeTraversingParser.currentNode
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNumericNode*
  name: currentNumericNode
  nameWithType: TreeTraversingParser.currentNumericNode
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser.currentNumericNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.TreeTraversingParser._handleEOF*
  name: _handleEOF
  nameWithType: TreeTraversingParser._handleEOF
  fullName: com.fasterxml.jackson.databind.node.TreeTraversingParser._handleEOF
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.NodeCursor
  spec.java:
  - uid: com.fasterxml.jackson.databind.node.NodeCursor
    name: NodeCursor
    fullName: com.fasterxml.jackson.databind.node.NodeCursor
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase
  name: ParserMinimalBase
  nameWithType: ParserMinimalBase
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  name: ParserMinimalBase._asciiBytes(String)
  nameWithType: ParserMinimalBase._asciiBytes(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  name: JsonParser.canReadTypeId()
  nameWithType: JsonParser.canReadTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  name: ParserMinimalBase._reportInvalidEOFInValue()
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  name: JsonParser.readBinaryValue(OutputStream)
  nameWithType: JsonParser.readBinaryValue(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.getNumberType()
  name: JsonParser.getNumberType()
  nameWithType: JsonParser.getNumberType()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberType()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  name: ParserMinimalBase.reportOverflowLong()
  nameWithType: ParserMinimalBase.reportOverflowLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId()
  name: JsonParser.getObjectId()
  nameWithType: JsonParser.getObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId()
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  name: JsonParser.canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  name: ParserMinimalBase._getCharDesc(int)
  nameWithType: ParserMinimalBase._getCharDesc(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  name: ParserMinimalBase.getValueAsInt(int)
  nameWithType: ParserMinimalBase.getValueAsInt(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  name: ParserMinimalBase.getText()
  nameWithType: ParserMinimalBase.getText()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  name: ParserMinimalBase.reportOverflowLong(String)
  nameWithType: ParserMinimalBase.reportOverflowLong(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonParser.getIntValue()
  name: JsonParser.getIntValue()
  nameWithType: JsonParser.getIntValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getIntValue()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  name: ParserMinimalBase._reportInvalidEOF()
  nameWithType: ParserMinimalBase._reportInvalidEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  name: ParserMinimalBase.nextValue()
  nameWithType: ParserMinimalBase.nextValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  name: ParserMinimalBase._longNumberDesc(String)
  nameWithType: ParserMinimalBase._longNumberDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  name: ParserMinimalBase._longIntegerDesc(String)
  nameWithType: ParserMinimalBase._longIntegerDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  name: JsonParser.getBooleanValue()
  nameWithType: JsonParser.getBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  name: JsonParser.getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  name: JsonParser.canReadObjectId()
  nameWithType: JsonParser.canReadObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  name: JsonParser.setRequestPayloadOnError(String)
  nameWithType: JsonParser.setRequestPayloadOnError(String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  name: JsonParser.isEnabled(StreamReadFeature)
  nameWithType: JsonParser.isEnabled(StreamReadFeature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  name: JsonParser.<T>readValueAs(TypeReference<?>)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.close()
  name: ParserMinimalBase.close()
  nameWithType: ParserMinimalBase.close()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.close()
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource()
  name: JsonParser.getInputSource()
  nameWithType: JsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
  name: ParserMinimalBase.hasTextCharacters()
  nameWithType: ParserMinimalBase.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  name: ParserMinimalBase._throwInternal()
  nameWithType: ParserMinimalBase._throwInternal()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._wrapError(String,Throwable)
  nameWithType: ParserMinimalBase._wrapError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  name: ParserMinimalBase._reportError(String)
  nameWithType: ParserMinimalBase._reportError(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.disable(JsonParser.Feature)
  nameWithType: JsonParser.disable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  name: ParserMinimalBase._reportMissingRootWS(int)
  nameWithType: ParserMinimalBase._reportMissingRootWS(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  name: ParserMinimalBase.getValueAsLong()
  nameWithType: ParserMinimalBase.getValueAsLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  name: ParserMinimalBase.isExpectedStartArrayToken()
  nameWithType: ParserMinimalBase.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  name: ParserMinimalBase.getLastClearedToken()
  nameWithType: ParserMinimalBase.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  name: JsonParser.<T>readValuesAs(Class<T>)
  nameWithType: JsonParser.<T>readValuesAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCodec()
  name: JsonParser.getCodec()
  nameWithType: JsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec()
- uid: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonParser.setCodec(ObjectCodec)
  nameWithType: JsonParser.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  name: JsonParser.getCurrentLocation()
  nameWithType: JsonParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  name: JsonParser.currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  name: ParserMinimalBase.hasCurrentToken()
  nameWithType: ParserMinimalBase.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  name: ParserMinimalBase.clearCurrentToken()
  nameWithType: ParserMinimalBase.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  name: JsonParser.requiresCustomCodec()
  nameWithType: JsonParser.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  name: JsonParser._reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  name: JsonParser.getValueAsDouble()
  nameWithType: JsonParser.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  name: ParserMinimalBase.getValueAsInt()
  nameWithType: ParserMinimalBase.getValueAsInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  name: ParserMinimalBase._reportInvalidEOF(String)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  name: JsonParser.getDoubleValue()
  nameWithType: JsonParser.getDoubleValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
  name: ParserMinimalBase.isClosed()
  nameWithType: ParserMinimalBase.isClosed()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  name: JsonParser.nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  name: ParserMinimalBase.currentToken()
  nameWithType: ParserMinimalBase.currentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  name: JsonParser.<T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  name: ParserMinimalBase.getTextOffset()
  nameWithType: ParserMinimalBase.getTextOffset()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId()
  name: JsonParser.getTypeId()
  nameWithType: JsonParser.getTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  name: ParserMinimalBase.getTextLength()
  nameWithType: ParserMinimalBase.getTextLength()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  name: ParserMinimalBase.skipChildren()
  nameWithType: ParserMinimalBase.skipChildren()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  name: JsonParser.getEmbeddedObject()
  nameWithType: JsonParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
- uid: com.fasterxml.jackson.core.JsonParser.version()
  name: JsonParser.version()
  nameWithType: JsonParser.version()
  fullName: com.fasterxml.jackson.core.JsonParser.version()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
  name: ParserMinimalBase.overrideCurrentName(String)
  nameWithType: ParserMinimalBase.overrideCurrentName(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  name: JsonParser.nextIntValue(int)
  nameWithType: JsonParser.nextIntValue(int)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
- uid: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  name: JsonParser.overrideStdFeatures(int,int)
  nameWithType: JsonParser.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  name: JsonParser.setFeatureMask(int)
  nameWithType: JsonParser.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase.getBinaryValue(Base64Variant)
  nameWithType: ParserMinimalBase.getBinaryValue(Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.canUseSchema(FormatSchema)
  nameWithType: JsonParser.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  name: JsonParser.<T>readValueAs(Class<T>)
  nameWithType: JsonParser.<T>readValueAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  name: JsonParser.getCurrentValue()
  nameWithType: JsonParser.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  name: JsonParser.setRequestPayloadOnError(RequestPayload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  name: JsonParser.releaseBuffered(OutputStream)
  nameWithType: JsonParser.releaseBuffered(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.isEnabled(JsonParser.Feature)
  nameWithType: JsonParser.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  name: JsonParser.getText(Writer)
  nameWithType: JsonParser.getText(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  name: ParserMinimalBase.getCurrentToken()
  nameWithType: ParserMinimalBase.getCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  name: JsonParser.nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  name: JsonParser._codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  name: JsonParser.nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  name: ParserMinimalBase.currentTokenId()
  nameWithType: ParserMinimalBase.currentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  name: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  nameWithType: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  name: ParserMinimalBase._ascii(byte[])
  nameWithType: ParserMinimalBase._ascii(byte[])
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
- uid: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  name: JsonParser.getBigIntegerValue()
  nameWithType: JsonParser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  nameWithType: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.finishToken()
  name: JsonParser.finishToken()
  nameWithType: JsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  name: ParserMinimalBase.getValueAsBoolean(boolean)
  nameWithType: ParserMinimalBase.getValueAsBoolean(boolean)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  name: JsonParser.nextLongValue(long)
  nameWithType: JsonParser.nextLongValue(long)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  name: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  nameWithType: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue()
  name: JsonParser.getByteValue()
  nameWithType: JsonParser.getByteValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue()
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  name: JsonParser.getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  name: ParserMinimalBase._throwInvalidSpace(int)
  nameWithType: ParserMinimalBase._throwInvalidSpace(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  name: ParserMinimalBase._hasTextualNull(String)
  nameWithType: ParserMinimalBase._hasTextualNull(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  name: ParserMinimalBase.reportOverflowInt()
  nameWithType: ParserMinimalBase.reportOverflowInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
- uid: com.fasterxml.jackson.core.JsonParser.isNaN()
  name: JsonParser.isNaN()
  nameWithType: JsonParser.isNaN()
  fullName: com.fasterxml.jackson.core.JsonParser.isNaN()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  name: ParserMinimalBase.getValueAsString(String)
  nameWithType: ParserMinimalBase.getValueAsString(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
  name: ParserMinimalBase._handleEOF()
  nameWithType: ParserMinimalBase._handleEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  name: ParserMinimalBase.nextToken()
  nameWithType: ParserMinimalBase.nextToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
- uid: com.fasterxml.jackson.core.JsonParser.getNumberValue()
  name: JsonParser.getNumberValue()
  nameWithType: JsonParser.getNumberValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  name: ParserMinimalBase.getTextCharacters()
  nameWithType: ParserMinimalBase.getTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
- uid: com.fasterxml.jackson.core.JsonParser.getSchema()
  name: JsonParser.getSchema()
  nameWithType: JsonParser.getSchema()
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._constructError(String,Throwable)
  nameWithType: ParserMinimalBase._constructError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
  name: ParserMinimalBase.getCurrentName()
  nameWithType: ParserMinimalBase.getCurrentName()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  name: ParserMinimalBase.getCurrentTokenId()
  nameWithType: ParserMinimalBase.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  name: JsonParser.configure(JsonParser.Feature,boolean)
  nameWithType: JsonParser.configure(JsonParser.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.hasToken(JsonToken)
  nameWithType: ParserMinimalBase.hasToken(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  name: JsonParser.<T>readValuesAs(TypeReference<T>)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getFloatValue()
  name: JsonParser.getFloatValue()
  nameWithType: JsonParser.getFloatValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getFloatValue()
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  name: JsonParser.overrideFormatFeatures(int,int)
  nameWithType: JsonParser.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  name: ParserMinimalBase.reportOverflowInt(String)
  nameWithType: ParserMinimalBase.reportOverflowInt(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getLongValue()
  name: JsonParser.getLongValue()
  nameWithType: JsonParser.getLongValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getLongValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  name: ParserMinimalBase.getValueAsString()
  nameWithType: ParserMinimalBase.getValueAsString()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  name: ParserMinimalBase.isExpectedStartObjectToken()
  nameWithType: ParserMinimalBase.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
  name: ParserMinimalBase.getParsingContext()
  nameWithType: ParserMinimalBase.getParsingContext()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  name: ParserMinimalBase.getValueAsDouble(double)
  nameWithType: ParserMinimalBase.getValueAsDouble(double)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  name: JsonParser.getFeatureMask()
  nameWithType: JsonParser.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  name: ParserMinimalBase.hasTokenId(int)
  nameWithType: ParserMinimalBase.hasTokenId(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  name: ParserMinimalBase.getValueAsLong(long)
  nameWithType: ParserMinimalBase.getValueAsLong(long)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
- uid: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.enable(JsonParser.Feature)
  nameWithType: JsonParser.enable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  name: ParserMinimalBase.reportInvalidNumber(String)
  nameWithType: ParserMinimalBase.reportInvalidNumber(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.setSchema(FormatSchema)
  nameWithType: JsonParser.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  name: JsonParser.setCurrentValue(Object)
  nameWithType: JsonParser.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  name: JsonParser.getValueAsBoolean()
  nameWithType: JsonParser.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonParser.nextFieldName(SerializableString)
  nameWithType: JsonParser.nextFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue()
  name: JsonParser.getShortValue()
  nameWithType: JsonParser.getShortValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  name: JsonParser.setRequestPayloadOnError(byte[],String)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[],String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  name: ParserMinimalBase._reportUnexpectedChar(int,String)
  nameWithType: ParserMinimalBase._reportUnexpectedChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  name: JsonParser.getTokenLocation()
  nameWithType: JsonParser.getTokenLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  name: JsonParser.releaseBuffered(Writer)
  nameWithType: JsonParser.releaseBuffered(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  name: JsonParser.getDecimalValue()
  nameWithType: JsonParser.getDecimalValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  name: JsonParser._constructError(String)
  nameWithType: JsonParser._constructError(String)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  name: JsonParser.getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.core.JsonParser.
  name: JsonParser.
  nameWithType: JsonParser.
  fullName: com.fasterxml.jackson.core.JsonParser.
- uid: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValueAs(TypeReference
  nameWithType: T>readValueAs(TypeReference
  fullName: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
- uid: T>readValuesAs(java.lang.Class
  name: T>readValuesAs(Class
  nameWithType: T>readValuesAs(Class
  fullName: T>readValuesAs(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValueAsTree()
  name: T>readValueAsTree()
  nameWithType: T>readValueAsTree()
  fullName: T>readValueAsTree()
- uid: T>readValueAs(java.lang.Class
  name: T>readValueAs(Class
  nameWithType: T>readValueAs(Class
  fullName: T>readValueAs(java.lang.Class
- uid: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValuesAs(TypeReference
  nameWithType: T>readValuesAs(TypeReference
  fullName: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
