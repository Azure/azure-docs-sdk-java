### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.caches.IPartitionKeyRangeCache"
fullName: "com.azure.cosmos.implementation.caches.IPartitionKeyRangeCache"
name: "IPartitionKeyRangeCache"
nameWithType: "IPartitionKeyRangeCache"
syntax: "public interface IPartitionKeyRangeCache extends IRoutingMapProvider, ICollectionRoutingMapCache"
methods:
- "com.azure.cosmos.implementation.caches.IPartitionKeyRangeCache.tryGetOverlappingRangesAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.Range<java.lang.String>,boolean,java.util.Map<java.lang.String,java.lang.Object>)"
- "com.azure.cosmos.implementation.caches.IPartitionKeyRangeCache.tryGetPartitionKeyRangeByIdAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,java.lang.String,boolean,java.util.Map<java.lang.String,java.lang.Object>)"
- "com.azure.cosmos.implementation.caches.IPartitionKeyRangeCache.tryGetRangeByPartitionKeyRangeId(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)"
- "com.azure.cosmos.implementation.caches.IPartitionKeyRangeCache.tryLookupAsync(com.azure.cosmos.implementation.MetadataDiagnosticsContext,java.lang.String,com.azure.cosmos.implementation.routing.CollectionRoutingMap,java.util.Map<java.lang.String,java.lang.Object>)"
type: "interface"
implements:
- "<xref href=\"com.azure.cosmos.implementation.ICollectionRoutingMapCache?alt=com.azure.cosmos.implementation.ICollectionRoutingMapCache&text=ICollectionRoutingMapCache\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.IRoutingMapProvider?alt=com.azure.cosmos.implementation.IRoutingMapProvider&text=IRoutingMapProvider\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.caches"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
