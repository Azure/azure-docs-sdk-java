### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Predicates
  id: Predicates
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Predicates.<A,B>compose(com.azure.cosmos.implementation.guava25.base.Predicate<B>,com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysFalse()
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysTrue()
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>...)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>equalTo(T)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>in(java.util.Collection<? extends T>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>isNull()
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>not(com.azure.cosmos.implementation.guava25.base.Predicate<T>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>notNull()
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>...)
  - com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.contains(java.util.regex.Pattern)
  - com.azure.cosmos.implementation.guava25.base.Predicates.containsPattern(java.lang.String)
  - com.azure.cosmos.implementation.guava25.base.Predicates.instanceOf(java.lang.Class<?>)
  - com.azure.cosmos.implementation.guava25.base.Predicates.subtypeOf(java.lang.Class<?>)
  langs:
  - java
  name: Predicates
  nameWithType: Predicates
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Static utility methods pertaining to `Predicate` instances.


    All methods return serializable predicates as long as they're given serializable parameters.


    See the Guava User Guide article on [the use of `Predicate`][the use of _Predicate].



    [the use of _Predicate]: https://github.com/google/guava/wiki/FunctionalExplained
  syntax:
    content: public final class Predicates
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<A,B>compose(com.azure.cosmos.implementation.guava25.base.Predicate<B>,com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>)
  id: <A,B>compose(com.azure.cosmos.implementation.guava25.base.Predicate<B>,com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <A,B>compose(Predicate<B> predicate, Function<A,? extends B> function)
  nameWithType: Predicates.<A,B>compose(Predicate<B> predicate, Function<A,? extends B> function)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<A,B>compose(Predicate<B> predicate, Function<A,? extends B> function)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.compose*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the composition of a function and a predicate. For every `x`, the generated predicate returns `predicate(function(x))`.
  syntax:
    content: public static Predicate<A> <A,B>compose(Predicate<B> predicate, Function<A,? extends B> function)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<B>
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<A>
      description: the composition of the provided function and predicate
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysFalse()
  id: <T>alwaysFalse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>alwaysFalse()
  nameWithType: Predicates.<T>alwaysFalse()
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysFalse()
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.alwaysFalse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that always evaluates to `false`.
  syntax:
    content: public static Predicate<T> <T>alwaysFalse()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysTrue()
  id: <T>alwaysTrue()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>alwaysTrue()
  nameWithType: Predicates.<T>alwaysTrue()
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysTrue()
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.alwaysTrue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that always evaluates to `true`.
  syntax:
    content: public static Predicate<T> <T>alwaysTrue()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>and(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>and(Predicate<? super T> first, Predicate<? super T> second)
  nameWithType: Predicates.<T>and(Predicate<? super T> first, Predicate<? super T> second)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(Predicate<? super T> first, Predicate<? super T> second)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.and*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if both of its components evaluate to `true`. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found.
  syntax:
    content: public static Predicate<T> <T>and(Predicate<? super T> first, Predicate<? super T> second)
    parameters:
    - id: first
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    - id: second
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>...)
  id: <T>and(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>and(Predicate<? super T>[] components)
  nameWithType: Predicates.<T>and(Predicate<? super T>[] components)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(Predicate<? super T>[] components)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.and*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if each of its components evaluates to `true`. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found. It defensively copies the array passed in, so future changes to it won't alter the behavior of this predicate. If `components` is empty, the returned predicate will always evaluate to `true`.
  syntax:
    content: public static Predicate<T> <T>and(Predicate<? super T>[] components)
    parameters:
    - id: components
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>[]
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>)
  id: <T>and(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>and(Iterable<? extends Predicate<? super T>> components)
  nameWithType: Predicates.<T>and(Iterable<? extends Predicate<? super T>> components)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and(Iterable<? extends Predicate<? super T>> components)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.and*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if each of its components evaluates to `true`. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a false predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If `components` is empty, the returned predicate will always evaluate to `true`.
  syntax:
    content: public static Predicate<T> <T>and(Iterable<? extends Predicate<? super T>> components)
    parameters:
    - id: components
      type: java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>equalTo(T)
  id: <T>equalTo(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>equalTo(T target)
  nameWithType: Predicates.<T>equalTo(T target)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>equalTo(T target)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.equalTo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if the object being tested `equals()` the given target or both are null.
  syntax:
    content: public static Predicate<T> <T>equalTo(T target)
    parameters:
    - id: target
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>in(java.util.Collection<? extends T>)
  id: <T>in(java.util.Collection<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>in(Collection<? extends T> target)
  nameWithType: Predicates.<T>in(Collection<? extends T> target)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>in(Collection<? extends T> target)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.in*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a predicate that evaluates to `true` if the object reference being tested is a member of the given collection. It does not defensively copy the collection passed in, so future changes to it will alter the behavior of the predicate.


    This method can technically accept any `Collection`, but using a typed collection helps prevent bugs. This approach doesn't block any potential users since it is always possible to use `Predicates.in().`
  syntax:
    content: public static Predicate<T> <T>in(Collection<? extends T> target)
    parameters:
    - id: target
      type: java.util.Collection<? extends T>
      description: the collection that may contain the function input
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>isNull()
  id: <T>isNull()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>isNull()
  nameWithType: Predicates.<T>isNull()
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>isNull()
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.isNull*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if the object reference being tested is null.
  syntax:
    content: public static Predicate<T> <T>isNull()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>not(com.azure.cosmos.implementation.guava25.base.Predicate<T>)
  id: <T>not(com.azure.cosmos.implementation.guava25.base.Predicate<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>not(Predicate<T> predicate)
  nameWithType: Predicates.<T>not(Predicate<T> predicate)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>not(Predicate<T> predicate)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.not*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if the given predicate evaluates to `false`.
  syntax:
    content: public static Predicate<T> <T>not(Predicate<T> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>notNull()
  id: <T>notNull()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>notNull()
  nameWithType: Predicates.<T>notNull()
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>notNull()
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.notNull*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if the object reference being tested is not null.
  syntax:
    content: public static Predicate<T> <T>notNull()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  id: <T>or(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>,com.azure.cosmos.implementation.guava25.base.Predicate<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>or(Predicate<? super T> first, Predicate<? super T> second)
  nameWithType: Predicates.<T>or(Predicate<? super T> first, Predicate<? super T> second)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(Predicate<? super T> first, Predicate<? super T> second)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if either of its components evaluates to `true`. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found.
  syntax:
    content: public static Predicate<T> <T>or(Predicate<? super T> first, Predicate<? super T> second)
    parameters:
    - id: first
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    - id: second
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>...)
  id: <T>or(com.azure.cosmos.implementation.guava25.base.Predicate<? super T>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>or(Predicate<? super T>[] components)
  nameWithType: Predicates.<T>or(Predicate<? super T>[] components)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(Predicate<? super T>[] components)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if any one of its components evaluates to `true`. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found. It defensively copies the array passed in, so future changes to it won't alter the behavior of this predicate. If `components` is empty, the returned predicate will always evaluate to `false`.
  syntax:
    content: public static Predicate<T> <T>or(Predicate<? super T>[] components)
    parameters:
    - id: components
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>[]
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>)
  id: <T>or(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: <T>or(Iterable<? extends Predicate<? super T>> components)
  nameWithType: Predicates.<T>or(Iterable<? extends Predicate<? super T>> components)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or(Iterable<? extends Predicate<? super T>> components)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if any one of its components evaluates to `true`. The components are evaluated in order, and evaluation will be "short-circuited" as soon as a true predicate is found. It defensively copies the iterable passed in, so future changes to it won't alter the behavior of this predicate. If `components` is empty, the returned predicate will always evaluate to `false`.
  syntax:
    content: public static Predicate<T> <T>or(Iterable<? extends Predicate<? super T>> components)
    parameters:
    - id: components
      type: java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<T>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.Predicates()
  id: Predicates()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: Predicates()
  nameWithType: Predicates.Predicates()
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.Predicates()
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.Predicates*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Predicates()
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.contains(java.util.regex.Pattern)
  id: contains(java.util.regex.Pattern)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: contains(Pattern pattern)
  nameWithType: Predicates.contains(Pattern pattern)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.contains(Pattern pattern)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if the `CharSequence` being tested contains any match for the given regular expression pattern. The test used is equivalent to `pattern.matcher(arg).find()`
  syntax:
    content: public static Predicate<CharSequence> contains(Pattern pattern)
    parameters:
    - id: pattern
      type: java.util.regex.Pattern
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.CharSequence>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.containsPattern(java.lang.String)
  id: containsPattern(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: containsPattern(String pattern)
  nameWithType: Predicates.containsPattern(String pattern)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.containsPattern(String pattern)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.containsPattern*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns a predicate that evaluates to `true` if the `CharSequence` being tested contains any match for the given regular expression pattern. The test used is equivalent to `Pattern.compile(pattern).matcher(arg).find()`
  syntax:
    content: public static Predicate<CharSequence> containsPattern(String pattern)
    parameters:
    - id: pattern
      type: java.lang.String
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.CharSequence>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.instanceOf(java.lang.Class<?>)
  id: instanceOf(java.lang.Class<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: instanceOf(Class<?> clazz)
  nameWithType: Predicates.instanceOf(Class<?> clazz)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.instanceOf(Class<?> clazz)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.instanceOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a predicate that evaluates to `true` if the object being tested is an instance of the given class. If the object being tested is `null` this predicate evaluates to `false`.


    If you want to filter an `Iterable` to narrow its type, consider using <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.filter*" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.collect.Iterables#filter(Iterable, Class)</xref> in preference.


    **Warning:** contrary to the typical assumptions about predicates (as documented at <xref uid="com.azure.cosmos.implementation.guava25.base.Predicate.apply" data-throw-if-not-resolved="false">Predicate#apply</xref>), the returned predicate may not be *consistent with equals*. For example, `instanceOf(ArrayList.class)` will yield different results for the two equal instances `Lists.newArrayList(1)` and `Arrays.asList(1)`.
  syntax:
    content: public static Predicate<Object> instanceOf(Class<?> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<?>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Object>
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.subtypeOf(java.lang.Class<?>)
  id: subtypeOf(java.lang.Class<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Predicates
  langs:
  - java
  name: subtypeOf(Class<?> clazz)
  nameWithType: Predicates.subtypeOf(Class<?> clazz)
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.subtypeOf(Class<?> clazz)
  overload: com.azure.cosmos.implementation.guava25.base.Predicates.subtypeOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a predicate that evaluates to `true` if the class being tested is assignable to (is a subtype of) `clazz`. Example:


    ```java

    List> classes = Arrays.asList(
         Object.class, String.class, Number.class, Long.class);
     return Iterables.filter(classes, subtypeOf(Number.class));
    ```


    The code above returns an iterable containing `Number.class` and `Long.class`.
  syntax:
    content: public static Predicate<Class<?>> subtypeOf(Class<?> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<?>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Class<?>>
references:
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.Predicates*
  name: Predicates
  nameWithType: Predicates.Predicates
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.Predicates
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.alwaysTrue*
  name: <T>alwaysTrue
  nameWithType: Predicates.<T>alwaysTrue
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysTrue
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.alwaysFalse*
  name: <T>alwaysFalse
  nameWithType: Predicates.<T>alwaysFalse
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>alwaysFalse
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.isNull*
  name: <T>isNull
  nameWithType: Predicates.<T>isNull
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>isNull
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.notNull*
  name: <T>notNull
  nameWithType: Predicates.<T>notNull
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>notNull
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.not*
  name: <T>not
  nameWithType: Predicates.<T>not
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>not
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Predicate<? super T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends com.azure.cosmos.implementation.guava25.base.Predicate'
    name: Predicate
    fullName: '? extends com.azure.cosmos.implementation.guava25.base.Predicate'
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.and*
  name: <T>and
  nameWithType: Predicates.<T>and
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>and
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>[]
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.or*
  name: <T>or
  nameWithType: Predicates.<T>or
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>or
  package: com.azure.cosmos.implementation.guava25.base
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.equalTo*
  name: <T>equalTo
  nameWithType: Predicates.<T>equalTo
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>equalTo
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Object>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.instanceOf*
  name: instanceOf
  nameWithType: Predicates.instanceOf
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.instanceOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.Class<?>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.subtypeOf*
  name: subtypeOf
  nameWithType: Predicates.subtypeOf
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.subtypeOf
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.Collection<? extends T>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.in*
  name: <T>in
  nameWithType: Predicates.<T>in
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<T>in
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<B>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<A,? extends B>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: A
    name: A
    fullName: A
  - name: ','
    fullName: ','
  - uid: '? extends B'
    name: '? extends B'
    fullName: '? extends B'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<A>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: A
    name: A
    fullName: A
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.compose*
  name: <A,B>compose
  nameWithType: Predicates.<A,B>compose
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.<A,B>compose
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<java.lang.CharSequence>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.containsPattern*
  name: containsPattern
  nameWithType: Predicates.containsPattern
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.containsPattern
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.regex.Pattern
  spec.java:
  - uid: java.util.regex.Pattern
    name: Pattern
    fullName: java.util.regex.Pattern
- uid: com.azure.cosmos.implementation.guava25.base.Predicates.contains*
  name: contains
  nameWithType: Predicates.contains
  fullName: com.azure.cosmos.implementation.guava25.base.Predicates.contains
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: '? extends com.azure.cosmos.implementation.guava25.base.Predicate'
  name: '? extends Predicate'
  nameWithType: '? extends Predicate'
  fullName: '? extends com.azure.cosmos.implementation.guava25.base.Predicate'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? super T>[]'
  name: '? super T>[]'
  nameWithType: '? super T>[]'
  fullName: '? super T>[]'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: B
  name: B
  nameWithType: B
  fullName: B
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: A,? extends B
  name: A,? extends B
  nameWithType: A,? extends B
  fullName: A,? extends B
- uid: A
  name: A
  nameWithType: A
  fullName: A
- uid: java.lang.CharSequence
  name: CharSequence
  nameWithType: CharSequence
  fullName: java.lang.CharSequence
