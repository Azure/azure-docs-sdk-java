### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.databind.SerializationFeature"
fullName: "com.fasterxml.jackson.databind.SerializationFeature"
name: "SerializationFeature"
nameWithType: "SerializationFeature"
summary: "Enumeration that defines simple on/off features that affect the way Java objects are serialized.\n\nNote that features can be set both through <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> (as sort of defaults) and through <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref>. In first case these defaults must follow \"config-then-use\" patterns (i.e. defined once, not changed afterwards); all per-call changes must be done using <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum SerializationFeature extends Enum<SerializationFeature> implements ConfigFeature"
fields:
- uid: "com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE"
  name: "CLOSE_CLOSEABLE"
  nameWithType: "SerializationFeature.CLOSE_CLOSEABLE"
  summary: "Feature that determines whether `close` method of serialized **root level** objects (ones for which `ObjectMapper`'s writeValue() (or equivalent) method is called) that implement <xref uid=\"java.io.Closeable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Closeable\"></xref> is called after serialization or not. If enabled, **close()** will be called after serialization completes (whether succesfully, or due to an error manifested by an exception being thrown). You can think of this as sort of \"finally\" processing.\n\nNOTE: only affects behavior with **root** objects, and not other objects reachable from the root object. Put another way, only one call will be made for each 'writeValue' call.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.EAGER_SERIALIZER_FETCH"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.EAGER_SERIALIZER_FETCH"
  name: "EAGER_SERIALIZER_FETCH"
  nameWithType: "SerializationFeature.EAGER_SERIALIZER_FETCH"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref> should try to eagerly fetch necessary <xref uid=\"com.fasterxml.jackson.databind.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref> when possible. This improves performance in cases where similarly configured <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref> instance is used multiple times; and should not significantly affect single-use cases.\n\nNote that there should not be any need to normally disable this feature: only consider that if there are actual perceived problems.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS"
  name: "FAIL_ON_EMPTY_BEANS"
  nameWithType: "SerializationFeature.FAIL_ON_EMPTY_BEANS"
  summary: "Feature that determines what happens when no accessors are found for a type (and there are no annotations to indicate it is meant to be serialized). If enabled (default), an exception is thrown to indicate these as non-serializable types; if disabled, they are serialized as empty Objects, i.e. without any properties.\n\nNote that empty types that this feature has only effect on those \"empty\" beans that do not have any recognized annotations (like `@JsonSerialize`): ones that do have annotations do not result in an exception being thrown.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES"
  name: "FAIL_ON_SELF_REFERENCES"
  nameWithType: "SerializationFeature.FAIL_ON_SELF_REFERENCES"
  summary: "Feature that determines what happens when a direct self-reference is detected by a POJO (and no Object Id handling is enabled for it): either a <xref uid=\"com.fasterxml.jackson.databind.JsonMappingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonMappingException\"></xref> is thrown (if true), or reference is normally processed (false).\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS"
  name: "FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS"
  nameWithType: "SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS"
  summary: "Feature that determines what happens when an object which normally has type information included by Jackson is used in conjunction with <xref uid=\"com.fasterxml.jackson.annotation.JsonUnwrapped\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.annotation.JsonUnwrapped\"></xref>. In the default (enabled) state, an error will be thrown when an unwrapped object has type information. When disabled, the object will be unwrapped and the type information discarded.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE"
  name: "FLUSH_AFTER_WRITE_VALUE"
  nameWithType: "SerializationFeature.FLUSH_AFTER_WRITE_VALUE"
  summary: "Feature that determines whether `JsonGenerator.flush()` is called after `writeValue()` method **that takes JsonGenerator as an argument** completes (i.e. does NOT affect methods that use other destinations); same for methods in <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref>. This usually makes sense; but there are cases where flushing should not be forced: for example when underlying stream is compressing and flush() causes compression state to be flushed (which occurs with some compression codecs).\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT"
  name: "INDENT_OUTPUT"
  nameWithType: "SerializationFeature.INDENT_OUTPUT"
  summary: "Feature that allows enabling (or disabling) indentation for the underlying generator, using the default pretty printer configured for <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> (and <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref>s created from mapper).\n\nNote that the default pretty printer is only used if no explicit <xref uid=\"com.fasterxml.jackson.core.PrettyPrinter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.PrettyPrinter\"></xref> has been configured for the generator or <xref uid=\"com.fasterxml.jackson.databind.ObjectWriter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectWriter\"></xref>.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS"
  name: "ORDER_MAP_ENTRIES_BY_KEYS"
  nameWithType: "SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS"
  summary: "Feature that determines whether <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> entries are first sorted by key before serialization or not: if enabled, additional sorting step is performed if necessary (not necessary for <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.SortedMap\"></xref>s), if disabled, no additional sorting is needed.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID"
  name: "USE_EQUALITY_FOR_OBJECT_ID"
  nameWithType: "SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID"
  summary: "Feature that determines whether Object Identity is compared using true JVM-level identity of Object (false); or, `equals()` method. Latter is sometimes useful when dealing with Database-bound objects with ORM libraries (like Hibernate). Note that Object itself is actually compared, and NOT Object Id; naming of this feature is somewhat confusing, so it is important that Object **for which identity is to be preserved** are considered equal, above and beyond ids (which are always compared using equality anyway).\n\nNOTE: due to the way functionality is implemented, it is very important that in addition to overriding <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals\"></xref> for Objects to match (to be considered \"same\") it is also necessary to ensure that <xref uid=\"java.lang.Object.hashCode()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#hashCode()\"></xref> is overridden to produce the exact same value for equal instances.\n\nFeature is disabled by default; meaning that strict identity is used, not `equals()`"
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRAP_EXCEPTIONS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRAP_EXCEPTIONS"
  name: "WRAP_EXCEPTIONS"
  nameWithType: "SerializationFeature.WRAP_EXCEPTIONS"
  summary: "Feature that determines whether Jackson code should catch and wrap <xref uid=\"java.lang.Exception\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Exception\"></xref>s (but never <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Error\"></xref>s!) to add additional information about location (within input) of problem or not. If enabled, most exceptions will be caught and re-thrown (exception specifically being that <xref uid=\"java.io.IOException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.IOException\"></xref>s may be passed as is, since they are declared as throwable); this can be convenient both in that all exceptions will be checked and declared, and so there is more contextual information. However, sometimes calling application may just want \"raw\" unchecked exceptions passed as is.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE"
  name: "WRAP_ROOT_VALUE"
  nameWithType: "SerializationFeature.WRAP_ROOT_VALUE"
  summary: "Feature that can be enabled to make root value (usually JSON Object but can be any type) wrapped within a single property JSON object, where key as the \"root name\", as determined by annotation introspector (esp. for JAXB that uses `@XmlRootElement.name`) or fallback (non-qualified class name). Feature is mostly intended for JAXB compatibility.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN"
  name: "WRITE_BIGDECIMAL_AS_PLAIN"
  nameWithType: "SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN"
  summary: "Feature that determines whether <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref> entries are serialized using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal#toPlainString()\"></xref> to prevent values to be written using scientific notation.\n\nNOTE: since this feature typically requires use of <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)\"></xref> it may cause compatibility problems since not all <xref uid=\"com.fasterxml.jackson.core.JsonGenerator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.core.JsonGenerator\"></xref> implementations support such mode of output: usually only text-based formats support it.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS"
  name: "WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS"
  nameWithType: "SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS"
  summary: "Feature that determines how type `char[]` is serialized: when enabled, will be serialized as an explict JSON array (with single-character Strings as values); when disabled, defaults to serializing them as Strings (which is more compact).\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS"
  name: "WRITE_DATES_AS_TIMESTAMPS"
  nameWithType: "SerializationFeature.WRITE_DATES_AS_TIMESTAMPS"
  summary: "Feature that determines whether Date (and date/time) values (and Date-based things like <xref uid=\"java.util.Calendar\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Calendar\"></xref>s) are to be serialized as numeric time stamps (true; the default), or as something else (usually textual representation). If textual representation is used, the actual format depends on configuration settings including possible per-property use of `@JsonFormat` annotation, globally configured <xref uid=\"java.text.DateFormat\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.text.DateFormat\"></xref>.\n\nFor \"classic\" JDK date types (<xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref>, <xref uid=\"java.util.Calendar\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Calendar\"></xref>) the default formatting is provided by <xref uid=\"com.fasterxml.jackson.databind.util.StdDateFormat\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.util.StdDateFormat\"></xref>, and corresponds to format String of \"yyyy-MM-dd'T'HH:mm:ss.SSSX\" (see <xref uid=\"java.text.DateFormat\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.text.DateFormat\"></xref> for details of format Strings). Whether this feature affects handling of other date-related types depend on handlers of those types, although ideally they should use this feature\n\nNote: whether <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> keys are serialized as Strings or not is controlled using <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#WRITE_DATE_KEYS_AS_TIMESTAMPS\"></xref> instead of this feature.\n\nFeature is enabled by default, so that date/time are by default serialized as time stamps."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_ZONE_ID"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_ZONE_ID"
  name: "WRITE_DATES_WITH_ZONE_ID"
  nameWithType: "SerializationFeature.WRITE_DATES_WITH_ZONE_ID"
  summary: "Feature that determines whether date/date-time values should be serialized so that they include timezone id, in cases where type itself contains timezone information. Including this information may lead to compatibility issues because ISO-8601 specification does not define formats that include such information.\n\nIf enabled, Timezone id should be included using format specified with Java 8 `DateTimeFormatter#ISO_ZONED_DATE_TIME` definition (for example, '2011-12-03T10:15:30+01:00\\[Europe/Paris\\]').\n\nNote: setting has no relevance if date/time values are serialized as timestamps.\n\nFeature is disabled by default, so that zone id is NOT included; rather, timezone offset is used for ISO-8601 compatibility (if any timezone information is included in value)."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS"
  name: "WRITE_DATE_KEYS_AS_TIMESTAMPS"
  nameWithType: "SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS"
  summary: "Feature that determines whether <xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref>s (and sub-types) used as <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> keys are serialized as time stamps or not (if not, will be serialized as textual values).\n\nDefault value is 'false', meaning that Date-valued Map keys are serialized as textual (ISO-8601) values.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  name: "WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  nameWithType: "SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS"
  summary: "Feature that controls whether numeric timestamp values are to be written using nanosecond timestamps (enabled) or not (disabled); **if and only if** datatype supports such resolution. Only newer datatypes (such as Java8 Date/Time) support such resolution -- older types (pre-Java8 **java.util.Date** etc) and Joda do not -- and this setting **has no effect** on such types.\n\nIf disabled, standard millisecond timestamps are assumed. This is the counterpart to <xref uid=\"com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#READ_DATE_TIMESTAMPS_AS_NANOSECONDS\"></xref>.\n\nFeature is enabled by default, to support most accurate time values possible."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS"
  name: "WRITE_DURATIONS_AS_TIMESTAMPS"
  nameWithType: "SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS"
  summary: "Feature that determines whether time values that represents time periods (durations, periods, ranges) are to be serialized by default using a numeric (true) or textual (false) representations. Note that numeric representation may mean either simple number, or an array of numbers, depending on type.\n\nNote: whether <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> keys are serialized as Strings or not is controlled using <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#WRITE_DATE_KEYS_AS_TIMESTAMPS\"></xref>.\n\nFeature is enabled by default, so that period/duration are by default serialized as timestamps."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS"
  name: "WRITE_EMPTY_JSON_ARRAYS"
  nameWithType: "SerializationFeature.WRITE_EMPTY_JSON_ARRAYS"
  summary: "Feature that determines whether Container properties (POJO properties with declared value of Collection or array; i.e. things that produce JSON arrays) that are empty (have no elements) will be serialized as empty JSON arrays (true), or suppressed from output (false).\n\nNote that this does not change behavior of <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>s, or \"Collection-like\" types.\n\nNOTE: unlike other <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializationFeature\"></xref>s, this feature **cannot** be dynamically changed on per-call basis, because its effect is considered during construction of serializers and property handlers.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX"
  name: "WRITE_ENUMS_USING_INDEX"
  nameWithType: "SerializationFeature.WRITE_ENUMS_USING_INDEX"
  summary: "Feature that determines whether Java Enum values are serialized as numbers (true), or textual values (false). If textual values are used, other settings are also considered. If this feature is enabled, return value of `Enum.ordinal()` (an integer) will be used as the serialization.\n\nNote that this feature has precedence over <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#WRITE_ENUMS_USING_TO_STRING\"></xref>, which is only considered if this feature is set to false.\n\nNote that since 2.10, this does NOT apply to <xref uid=\"java.lang.Enum\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Enum\"></xref>s written as keys of <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> values, which has separate setting, <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#WRITE_ENUM_KEYS_USING_INDEX\"></xref>.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING"
  name: "WRITE_ENUMS_USING_TO_STRING"
  nameWithType: "SerializationFeature.WRITE_ENUMS_USING_TO_STRING"
  summary: "Feature that determines standard serialization mechanism used for Enum values: if enabled, return value of `Enum.toString()` is used; if disabled, return value of `Enum.name()` is used.\n\nNote: this feature should usually have same value as <xref uid=\"com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#READ_ENUMS_USING_TO_STRING\"></xref>.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX"
  name: "WRITE_ENUM_KEYS_USING_INDEX"
  nameWithType: "SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX"
  summary: "Feature that determines whether \\{link Enum\\}s used as <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref> keys are serialized as using <xref uid=\"java.lang.Enum.ordinal()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Enum#ordinal()\"></xref> or not. Similar to <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#WRITE_ENUMS_USING_INDEX\"></xref> used when writing <xref uid=\"java.lang.Enum\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Enum\"></xref>s as regular values.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES"
  name: "WRITE_NULL_MAP_VALUES"
  nameWithType: "SerializationFeature.WRITE_NULL_MAP_VALUES"
  summary: "Feature that determines whether Map entries with null values are to be serialized (true) or not (false).\n\nNOTE: unlike other <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializationFeature\"></xref>s, this feature **cannot** be dynamically changed on per-call basis, because its effect is considered during construction of serializers and property handlers.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL"
  name: "WRITE_SELF_REFERENCES_AS_NULL"
  nameWithType: "SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL"
  summary: "Feature that determines what happens when a direct self-reference is detected by a POJO (and no Object Id handling is enabled for it): if enabled write that reference as null; if disabled, default behavior is used (which will try to serialize usually resulting in exception). But if <xref uid=\"com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializationFeature#FAIL_ON_SELF_REFERENCES\"></xref> is enabled. this property is ignored.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  name: "WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  nameWithType: "SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED"
  summary: "Feature added for interoperability, to work with oddities of so-called \"BadgerFish\" convention. Feature determines handling of single element <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s and arrays: if enabled, <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s and arrays that contain exactly one element will be serialized as if that element itself was serialized.\n\nWhen enabled, a POJO with array that normally looks like this:\n\n```java\n{ \"arrayProperty\" : [ 1 ] }\n```\n\nwill instead be serialized as\n\n```java\n{ \"arrayProperty\" : 1 }\n```\n\nNote that this feature is counterpart to <xref uid=\"com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationFeature#ACCEPT_SINGLE_VALUE_AS_ARRAY\"></xref> (that is, usually both are enabled, or neither is).\n\nFeature is disabled by default, so that no special handling is done."
methods:
- uid: "com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "SerializationFeature.enabledByDefault()"
  summary: "Accessor for checking whether this feature is enabled by default."
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "SerializationFeature.enabledIn(int flags)"
  summary: "Convenience method for checking whether feature is enabled in given bitmask"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.SerializationFeature.getMask()"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.getMask()"
  name: "getMask()"
  nameWithType: "SerializationFeature.getMask()"
  summary: "Returns bit mask for this feature instance"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.SerializationFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "SerializationFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static SerializationFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializationFeature?alt=com.fasterxml.jackson.databind.SerializationFeature&text=SerializationFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.SerializationFeature.values()"
  fullName: "com.fasterxml.jackson.databind.SerializationFeature.values()"
  name: "values()"
  nameWithType: "SerializationFeature.values()"
  syntax: "public static SerializationFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializationFeature?alt=com.fasterxml.jackson.databind.SerializationFeature&text=SerializationFeature\" data-throw-if-not-resolved=\"False\" />[]"
implements:
- "<xref href=\"com.fasterxml.jackson.databind.cfg.ConfigFeature?alt=com.fasterxml.jackson.databind.cfg.ConfigFeature&text=ConfigFeature\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
