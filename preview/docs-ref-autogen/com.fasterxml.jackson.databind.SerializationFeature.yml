### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.SerializationFeature
  id: SerializationFeature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE
  - com.fasterxml.jackson.databind.SerializationFeature.EAGER_SERIALIZER_FETCH
  - com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS
  - com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES
  - com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
  - com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE
  - com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT
  - com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS
  - com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID
  - com.fasterxml.jackson.databind.SerializationFeature.WRAP_EXCEPTIONS
  - com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_ZONE_ID
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL
  - com.fasterxml.jackson.databind.SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  - com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()
  - com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int)
  - com.fasterxml.jackson.databind.SerializationFeature.getMask()
  - com.fasterxml.jackson.databind.SerializationFeature.valueOf(java.lang.String)
  - com.fasterxml.jackson.databind.SerializationFeature.values()
  langs:
  - java
  name: SerializationFeature
  nameWithType: SerializationFeature
  fullName: com.fasterxml.jackson.databind.SerializationFeature
  type: Enum
  package: com.fasterxml.jackson.databind
  summary: >-
    Enumeration that defines simple on/off features that affect the way Java objects are serialized.


    Note that features can be set both through <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> (as sort of defaults) and through <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>. In first case these defaults must follow "config-then-use" patterns (i.e. defined once, not changed afterwards); all per-call changes must be done using <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>.
  syntax:
    content: public enum SerializationFeature extends Enum<SerializationFeature> implements ConfigFeature
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  implements:
  - com.fasterxml.jackson.databind.cfg.ConfigFeature
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE
  id: CLOSE_CLOSEABLE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: CLOSE_CLOSEABLE
  nameWithType: SerializationFeature.CLOSE_CLOSEABLE
  fullName: com.fasterxml.jackson.databind.SerializationFeature.CLOSE_CLOSEABLE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether `close` method of serialized **root level** objects (ones for which `ObjectMapper`'s writeValue() (or equivalent) method is called) that implement <xref uid="java.io.Closeable" data-throw-if-not-resolved="false">java.io.Closeable</xref> is called after serialization or not. If enabled, **close()** will be called after serialization completes (whether succesfully, or due to an error manifested by an exception being thrown). You can think of this as sort of "finally" processing.


    NOTE: only affects behavior with **root** objects, and not other objects reachable from the root object. Put another way, only one call will be made for each 'writeValue' call.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature CLOSE_CLOSEABLE
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.EAGER_SERIALIZER_FETCH
  id: EAGER_SERIALIZER_FETCH
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: EAGER_SERIALIZER_FETCH
  nameWithType: SerializationFeature.EAGER_SERIALIZER_FETCH
  fullName: com.fasterxml.jackson.databind.SerializationFeature.EAGER_SERIALIZER_FETCH
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> should try to eagerly fetch necessary <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">JsonSerializer</xref> when possible. This improves performance in cases where similarly configured <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> instance is used multiple times; and should not significantly affect single-use cases.


    Note that there should not be any need to normally disable this feature: only consider that if there are actual perceived problems.


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature EAGER_SERIALIZER_FETCH
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS
  id: FAIL_ON_EMPTY_BEANS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: FAIL_ON_EMPTY_BEANS
  nameWithType: SerializationFeature.FAIL_ON_EMPTY_BEANS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when no accessors are found for a type (and there are no annotations to indicate it is meant to be serialized). If enabled (default), an exception is thrown to indicate these as non-serializable types; if disabled, they are serialized as empty Objects, i.e. without any properties.


    Note that empty types that this feature has only effect on those "empty" beans that do not have any recognized annotations (like `@JsonSerialize`): ones that do have annotations do not result in an exception being thrown.


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature FAIL_ON_EMPTY_BEANS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES
  id: FAIL_ON_SELF_REFERENCES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: FAIL_ON_SELF_REFERENCES
  nameWithType: SerializationFeature.FAIL_ON_SELF_REFERENCES
  fullName: com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when a direct self-reference is detected by a POJO (and no Object Id handling is enabled for it): either a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> is thrown (if true), or reference is normally processed (false).


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature FAIL_ON_SELF_REFERENCES
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
  id: FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
  nameWithType: SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when an object which normally has type information included by Jackson is used in conjunction with <xref uid="com.fasterxml.jackson.annotation.JsonUnwrapped" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonUnwrapped</xref>. In the default (enabled) state, an error will be thrown when an unwrapped object has type information. When disabled, the object will be unwrapped and the type information discarded.


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE
  id: FLUSH_AFTER_WRITE_VALUE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: FLUSH_AFTER_WRITE_VALUE
  nameWithType: SerializationFeature.FLUSH_AFTER_WRITE_VALUE
  fullName: com.fasterxml.jackson.databind.SerializationFeature.FLUSH_AFTER_WRITE_VALUE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether `JsonGenerator.flush()` is called after `writeValue()` method **that takes JsonGenerator as an argument** completes (i.e. does NOT affect methods that use other destinations); same for methods in <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>. This usually makes sense; but there are cases where flushing should not be forced: for example when underlying stream is compressing and flush() causes compression state to be flushed (which occurs with some compression codecs).


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature FLUSH_AFTER_WRITE_VALUE
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT
  id: INDENT_OUTPUT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: INDENT_OUTPUT
  nameWithType: SerializationFeature.INDENT_OUTPUT
  fullName: com.fasterxml.jackson.databind.SerializationFeature.INDENT_OUTPUT
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that allows enabling (or disabling) indentation for the underlying generator, using the default pretty printer configured for <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> (and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>s created from mapper).


    Note that the default pretty printer is only used if no explicit <xref uid="com.fasterxml.jackson.core.PrettyPrinter" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.PrettyPrinter</xref> has been configured for the generator or <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref>.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature INDENT_OUTPUT
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS
  id: ORDER_MAP_ENTRIES_BY_KEYS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: ORDER_MAP_ENTRIES_BY_KEYS
  nameWithType: SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> entries are first sorted by key before serialization or not: if enabled, additional sorting step is performed if necessary (not necessary for <xref uid="" data-throw-if-not-resolved="false">java.util.SortedMap</xref>s), if disabled, no additional sorting is needed.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature ORDER_MAP_ENTRIES_BY_KEYS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean)
  id: SerializationFeature(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: SerializationFeature(boolean defaultState)
  nameWithType: SerializationFeature.SerializationFeature(boolean defaultState)
  fullName: com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean defaultState)
  overload: com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: private SerializationFeature(boolean defaultState)
    parameters:
    - id: defaultState
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID
  id: USE_EQUALITY_FOR_OBJECT_ID
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: USE_EQUALITY_FOR_OBJECT_ID
  nameWithType: SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID
  fullName: com.fasterxml.jackson.databind.SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Object Identity is compared using true JVM-level identity of Object (false); or, `equals()` method. Latter is sometimes useful when dealing with Database-bound objects with ORM libraries (like Hibernate). Note that Object itself is actually compared, and NOT Object Id; naming of this feature is somewhat confusing, so it is important that Object **for which identity is to be preserved** are considered equal, above and beyond ids (which are always compared using equality anyway).


    NOTE: due to the way functionality is implemented, it is very important that in addition to overriding <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> for Objects to match (to be considered "same") it is also necessary to ensure that <xref uid="java.lang.Object.hashCode()" data-throw-if-not-resolved="false">Object#hashCode()</xref> is overridden to produce the exact same value for equal instances.


    Feature is disabled by default; meaning that strict identity is used, not `equals()`
  syntax:
    content: public static final SerializationFeature USE_EQUALITY_FOR_OBJECT_ID
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRAP_EXCEPTIONS
  id: WRAP_EXCEPTIONS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRAP_EXCEPTIONS
  nameWithType: SerializationFeature.WRAP_EXCEPTIONS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRAP_EXCEPTIONS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Jackson code should catch and wrap <xref uid="java.lang.Exception" data-throw-if-not-resolved="false">Exception</xref>s (but never <xref uid="" data-throw-if-not-resolved="false">Error</xref>s!) to add additional information about location (within input) of problem or not. If enabled, most exceptions will be caught and re-thrown (exception specifically being that <xref uid="java.io.IOException" data-throw-if-not-resolved="false">java.io.IOException</xref>s may be passed as is, since they are declared as throwable); this can be convenient both in that all exceptions will be checked and declared, and so there is more contextual information. However, sometimes calling application may just want "raw" unchecked exceptions passed as is.


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature WRAP_EXCEPTIONS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE
  id: WRAP_ROOT_VALUE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRAP_ROOT_VALUE
  nameWithType: SerializationFeature.WRAP_ROOT_VALUE
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRAP_ROOT_VALUE
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that can be enabled to make root value (usually JSON Object but can be any type) wrapped within a single property JSON object, where key as the "root name", as determined by annotation introspector (esp. for JAXB that uses `@XmlRootElement.name`) or fallback (non-qualified class name). Feature is mostly intended for JAXB compatibility.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRAP_ROOT_VALUE
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN
  id: WRITE_BIGDECIMAL_AS_PLAIN
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_BIGDECIMAL_AS_PLAIN
  nameWithType: SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">java.math.BigDecimal</xref> entries are serialized using <xref uid="" data-throw-if-not-resolved="false">java.math.BigDecimal#toPlainString()</xref> to prevent values to be written using scientific notation.


    NOTE: since this feature typically requires use of <xref uid="com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator#writeNumber(String)</xref> it may cause compatibility problems since not all <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator</xref> implementations support such mode of output: usually only text-based formats support it.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_BIGDECIMAL_AS_PLAIN
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
  id: WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
  nameWithType: SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines how type `char[]` is serialized: when enabled, will be serialized as an explict JSON array (with single-character Strings as values); when disabled, defaults to serializing them as Strings (which is more compact).


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS
  id: WRITE_DATES_AS_TIMESTAMPS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_DATES_AS_TIMESTAMPS
  nameWithType: SerializationFeature.WRITE_DATES_AS_TIMESTAMPS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Date (and date/time) values (and Date-based things like <xref uid="java.util.Calendar" data-throw-if-not-resolved="false">java.util.Calendar</xref>s) are to be serialized as numeric time stamps (true; the default), or as something else (usually textual representation). If textual representation is used, the actual format depends on configuration settings including possible per-property use of `@JsonFormat` annotation, globally configured <xref uid="java.text.DateFormat" data-throw-if-not-resolved="false">java.text.DateFormat</xref>.


    For "classic" JDK date types (<xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref>, <xref uid="java.util.Calendar" data-throw-if-not-resolved="false">java.util.Calendar</xref>) the default formatting is provided by <xref uid="com.fasterxml.jackson.databind.util.StdDateFormat" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.util.StdDateFormat</xref>, and corresponds to format String of "yyyy-MM-dd'T'HH:mm:ss.SSSX" (see <xref uid="java.text.DateFormat" data-throw-if-not-resolved="false">java.text.DateFormat</xref> for details of format Strings). Whether this feature affects handling of other date-related types depend on handlers of those types, although ideally they should use this feature


    Note: whether <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys are serialized as Strings or not is controlled using <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS" data-throw-if-not-resolved="false">#WRITE_DATE_KEYS_AS_TIMESTAMPS</xref> instead of this feature.


    Feature is enabled by default, so that date/time are by default serialized as time stamps.
  syntax:
    content: public static final SerializationFeature WRITE_DATES_AS_TIMESTAMPS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_ZONE_ID
  id: WRITE_DATES_WITH_ZONE_ID
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_DATES_WITH_ZONE_ID
  nameWithType: SerializationFeature.WRITE_DATES_WITH_ZONE_ID
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_WITH_ZONE_ID
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether date/date-time values should be serialized so that they include timezone id, in cases where type itself contains timezone information. Including this information may lead to compatibility issues because ISO-8601 specification does not define formats that include such information.


    If enabled, Timezone id should be included using format specified with Java 8 `DateTimeFormatter#ISO_ZONED_DATE_TIME` definition (for example, '2011-12-03T10:15:30+01:00\[Europe/Paris\]').


    Note: setting has no relevance if date/time values are serialized as timestamps.


    Feature is disabled by default, so that zone id is NOT included; rather, timezone offset is used for ISO-8601 compatibility (if any timezone information is included in value).
  syntax:
    content: public static final SerializationFeature WRITE_DATES_WITH_ZONE_ID
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS
  id: WRITE_DATE_KEYS_AS_TIMESTAMPS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_DATE_KEYS_AS_TIMESTAMPS
  nameWithType: SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref>s (and sub-types) used as <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys are serialized as time stamps or not (if not, will be serialized as textual values).


    Default value is 'false', meaning that Date-valued Map keys are serialized as textual (ISO-8601) values.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_DATE_KEYS_AS_TIMESTAMPS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  id: WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  nameWithType: SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that controls whether numeric timestamp values are to be written using nanosecond timestamps (enabled) or not (disabled); **if and only if** datatype supports such resolution. Only newer datatypes (such as Java8 Date/Time) support such resolution -- older types (pre-Java8 **java.util.Date** etc) and Joda do not -- and this setting **has no effect** on such types.


    If disabled, standard millisecond timestamps are assumed. This is the counterpart to <xref uid="com.fasterxml.jackson.databind.DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS" data-throw-if-not-resolved="false">DeserializationFeature#READ_DATE_TIMESTAMPS_AS_NANOSECONDS</xref>.


    Feature is enabled by default, to support most accurate time values possible.
  syntax:
    content: public static final SerializationFeature WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS
  id: WRITE_DURATIONS_AS_TIMESTAMPS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_DURATIONS_AS_TIMESTAMPS
  nameWithType: SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether time values that represents time periods (durations, periods, ranges) are to be serialized by default using a numeric (true) or textual (false) representations. Note that numeric representation may mean either simple number, or an array of numbers, depending on type.


    Note: whether <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys are serialized as Strings or not is controlled using <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS" data-throw-if-not-resolved="false">#WRITE_DATE_KEYS_AS_TIMESTAMPS</xref>.


    Feature is enabled by default, so that period/duration are by default serialized as timestamps.
  syntax:
    content: public static final SerializationFeature WRITE_DURATIONS_AS_TIMESTAMPS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS
  id: WRITE_EMPTY_JSON_ARRAYS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_EMPTY_JSON_ARRAYS
  nameWithType: SerializationFeature.WRITE_EMPTY_JSON_ARRAYS
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Container properties (POJO properties with declared value of Collection or array; i.e. things that produce JSON arrays) that are empty (have no elements) will be serialized as empty JSON arrays (true), or suppressed from output (false).


    Note that this does not change behavior of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>s, or "Collection-like" types.


    NOTE: unlike other <xref uid="com.fasterxml.jackson.databind.SerializationFeature" data-throw-if-not-resolved="false">SerializationFeature</xref>s, this feature **cannot** be dynamically changed on per-call basis, because its effect is considered during construction of serializers and property handlers.


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_EMPTY_JSON_ARRAYS
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX
  id: WRITE_ENUMS_USING_INDEX
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_ENUMS_USING_INDEX
  nameWithType: SerializationFeature.WRITE_ENUMS_USING_INDEX
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Java Enum values are serialized as numbers (true), or textual values (false). If textual values are used, other settings are also considered. If this feature is enabled, return value of `Enum.ordinal()` (an integer) will be used as the serialization.


    Note that this feature has precedence over <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING" data-throw-if-not-resolved="false">#WRITE_ENUMS_USING_TO_STRING</xref>, which is only considered if this feature is set to false.


    Note that since 2.10, this does NOT apply to <xref uid="java.lang.Enum" data-throw-if-not-resolved="false">Enum</xref>s written as keys of <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> values, which has separate setting, <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX" data-throw-if-not-resolved="false">#WRITE_ENUM_KEYS_USING_INDEX</xref>.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_ENUMS_USING_INDEX
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING
  id: WRITE_ENUMS_USING_TO_STRING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_ENUMS_USING_TO_STRING
  nameWithType: SerializationFeature.WRITE_ENUMS_USING_TO_STRING
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_TO_STRING
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines standard serialization mechanism used for Enum values: if enabled, return value of `Enum.toString()` is used; if disabled, return value of `Enum.name()` is used.


    Note: this feature should usually have same value as <xref uid="com.fasterxml.jackson.databind.DeserializationFeature.READ_ENUMS_USING_TO_STRING" data-throw-if-not-resolved="false">DeserializationFeature#READ_ENUMS_USING_TO_STRING</xref>.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_ENUMS_USING_TO_STRING
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX
  id: WRITE_ENUM_KEYS_USING_INDEX
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_ENUM_KEYS_USING_INDEX
  nameWithType: SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUM_KEYS_USING_INDEX
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether \{link Enum\}s used as <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> keys are serialized as using <xref uid="java.lang.Enum.ordinal()" data-throw-if-not-resolved="false">Enum#ordinal()</xref> or not. Similar to <xref uid="com.fasterxml.jackson.databind.SerializationFeature.WRITE_ENUMS_USING_INDEX" data-throw-if-not-resolved="false">#WRITE_ENUMS_USING_INDEX</xref> used when writing <xref uid="java.lang.Enum" data-throw-if-not-resolved="false">Enum</xref>s as regular values.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_ENUM_KEYS_USING_INDEX
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES
  id: WRITE_NULL_MAP_VALUES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_NULL_MAP_VALUES
  nameWithType: SerializationFeature.WRITE_NULL_MAP_VALUES
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_NULL_MAP_VALUES
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines whether Map entries with null values are to be serialized (true) or not (false).


    NOTE: unlike other <xref uid="com.fasterxml.jackson.databind.SerializationFeature" data-throw-if-not-resolved="false">SerializationFeature</xref>s, this feature **cannot** be dynamically changed on per-call basis, because its effect is considered during construction of serializers and property handlers.


    Feature is enabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_NULL_MAP_VALUES
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL
  id: WRITE_SELF_REFERENCES_AS_NULL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_SELF_REFERENCES_AS_NULL
  nameWithType: SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_SELF_REFERENCES_AS_NULL
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature that determines what happens when a direct self-reference is detected by a POJO (and no Object Id handling is enabled for it): if enabled write that reference as null; if disabled, default behavior is used (which will try to serialize usually resulting in exception). But if <xref uid="com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_SELF_REFERENCES" data-throw-if-not-resolved="false">SerializationFeature#FAIL_ON_SELF_REFERENCES</xref> is enabled. this property is ignored.


    Feature is disabled by default.
  syntax:
    content: public static final SerializationFeature WRITE_SELF_REFERENCES_AS_NULL
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  id: WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  nameWithType: SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  fullName: com.fasterxml.jackson.databind.SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
  type: Field
  package: com.fasterxml.jackson.databind
  summary: >-
    Feature added for interoperability, to work with oddities of so-called "BadgerFish" convention. Feature determines handling of single element <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s and arrays: if enabled, <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s and arrays that contain exactly one element will be serialized as if that element itself was serialized.


    When enabled, a POJO with array that normally looks like this:


    ```java

    { "arrayProperty" : [ 1 ] }

    ```


    will instead be serialized as


    ```java

    { "arrayProperty" : 1 }

    ```


    Note that this feature is counterpart to <xref uid="com.fasterxml.jackson.databind.DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY" data-throw-if-not-resolved="false">DeserializationFeature#ACCEPT_SINGLE_VALUE_AS_ARRAY</xref> (that is, usually both are enabled, or neither is).


    Feature is disabled by default, so that no special handling is done.
  syntax:
    content: public static final SerializationFeature WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: SerializationFeature.enabledByDefault()
  fullName: com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()
  overload: com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for checking whether this feature is enabled by default.
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: SerializationFeature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int flags)
  overload: com.fasterxml.jackson.databind.SerializationFeature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Convenience method for checking whether feature is enabled in given bitmask
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.SerializationFeature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: getMask()
  nameWithType: SerializationFeature.getMask()
  fullName: com.fasterxml.jackson.databind.SerializationFeature.getMask()
  overload: com.fasterxml.jackson.databind.SerializationFeature.getMask*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Returns bit mask for this feature instance
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.SerializationFeature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: SerializationFeature.valueOf(String name)
  fullName: com.fasterxml.jackson.databind.SerializationFeature.valueOf(String name)
  overload: com.fasterxml.jackson.databind.SerializationFeature.valueOf*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static SerializationFeature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature
- uid: com.fasterxml.jackson.databind.SerializationFeature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.SerializationFeature
  langs:
  - java
  name: values()
  nameWithType: SerializationFeature.values()
  fullName: com.fasterxml.jackson.databind.SerializationFeature.values()
  overload: com.fasterxml.jackson.databind.SerializationFeature.values*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public static SerializationFeature[] values()
    return:
      type: com.fasterxml.jackson.databind.SerializationFeature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature*
  name: SerializationFeature
  nameWithType: SerializationFeature.SerializationFeature
  fullName: com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializationFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.SerializationFeature
    name: SerializationFeature
    fullName: com.fasterxml.jackson.databind.SerializationFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.SerializationFeature.values*
  name: values
  nameWithType: SerializationFeature.values
  fullName: com.fasterxml.jackson.databind.SerializationFeature.values
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.SerializationFeature.valueOf*
  name: valueOf
  nameWithType: SerializationFeature.valueOf
  fullName: com.fasterxml.jackson.databind.SerializationFeature.valueOf
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault*
  name: enabledByDefault
  nameWithType: SerializationFeature.enabledByDefault
  fullName: com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault
  package: com.fasterxml.jackson.databind
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.SerializationFeature.getMask*
  name: getMask
  nameWithType: SerializationFeature.getMask
  fullName: com.fasterxml.jackson.databind.SerializationFeature.getMask
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.SerializationFeature.enabledIn*
  name: enabledIn
  nameWithType: SerializationFeature.enabledIn
  fullName: com.fasterxml.jackson.databind.SerializationFeature.enabledIn
  package: com.fasterxml.jackson.databind
- uid: java.lang.Enum<com.fasterxml.jackson.databind.SerializationFeature>
  name: Enum<SerializationFeature>
  nameWithType: Enum<SerializationFeature>
  fullName: java.lang.Enum<com.fasterxml.jackson.databind.SerializationFeature>
- uid: com.fasterxml.jackson.databind.cfg.ConfigFeature
  name: ConfigFeature
  nameWithType: ConfigFeature
  fullName: com.fasterxml.jackson.databind.cfg.ConfigFeature
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
