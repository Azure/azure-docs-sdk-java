### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  id: "EcdsaSignatureTransform"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform(java.security.KeyPair,java.security.Provider,com.azure.security.keyvault.keys.cryptography.Ecdsa)"
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.sign(byte[])"
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.verify(byte[],byte[])"
  langs:
  - "java"
  name: "Ecdsa.EcdsaSignatureTransform"
  nameWithType: "Ecdsa.EcdsaSignatureTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " class Ecdsa.EcdsaSignatureTransform implements ISignatureTransform"
  inheritance:
  - "java.lang.Object"
  implements:
  - "com.azure.security.keyvault.keys.cryptography.ISignatureTransform"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform(java.security.KeyPair,java.security.Provider,com.azure.security.keyvault.keys.cryptography.Ecdsa)"
  id: "EcdsaSignatureTransform(java.security.KeyPair,java.security.Provider,com.azure.security.keyvault.keys.cryptography.Ecdsa)"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  langs:
  - "java"
  name: "EcdsaSignatureTransform(KeyPair keyPair, Provider provider, Ecdsa algorithm)"
  nameWithType: "Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform(KeyPair keyPair, Provider provider, Ecdsa algorithm)"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform(KeyPair keyPair, Provider provider, Ecdsa algorithm)"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " EcdsaSignatureTransform(KeyPair keyPair, Provider provider, Ecdsa algorithm)"
    parameters:
    - id: "keyPair"
      type: "java.security.KeyPair"
    - id: "provider"
      type: "java.security.Provider"
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.sign(byte[])"
  id: "sign(byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  langs:
  - "java"
  name: "sign(byte[] digest)"
  nameWithType: "Ecdsa.EcdsaSignatureTransform.sign(byte[] digest)"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.sign(byte[] digest)"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.sign*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "public byte[] sign(byte[] digest)"
    parameters:
    - id: "digest"
      type: "byte[]"
    return:
      type: "byte[]"
  exceptions:
  - type: "java.security.GeneralSecurityException"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.verify(byte[],byte[])"
  id: "verify(byte[],byte[])"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  langs:
  - "java"
  name: "verify(byte[] digest, byte[] signature)"
  nameWithType: "Ecdsa.EcdsaSignatureTransform.verify(byte[] digest, byte[] signature)"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.verify(byte[] digest, byte[] signature)"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.verify*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "public boolean verify(byte[] digest, byte[] signature)"
    parameters:
    - id: "digest"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    return:
      type: "boolean"
  exceptions:
  - type: "java.security.GeneralSecurityException"
references:
- uid: "java.security.KeyPair"
  spec.java:
  - uid: "java.security.KeyPair"
    name: "KeyPair"
    fullName: "java.security.KeyPair"
- uid: "java.security.Provider"
  spec.java:
  - uid: "java.security.Provider"
    name: "Provider"
    fullName: "java.security.Provider"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  name: "Ecdsa"
  nameWithType: "Ecdsa"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform*"
  name: "EcdsaSignatureTransform"
  nameWithType: "Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.EcdsaSignatureTransform"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "java.security.GeneralSecurityException"
  spec.java:
  - uid: "java.security.GeneralSecurityException"
    name: "GeneralSecurityException"
    fullName: "java.security.GeneralSecurityException"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.sign*"
  name: "sign"
  nameWithType: "Ecdsa.EcdsaSignatureTransform.sign"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.sign"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.verify*"
  name: "verify"
  nameWithType: "Ecdsa.EcdsaSignatureTransform.verify"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform.verify"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.ISignatureTransform"
  name: "ISignatureTransform"
  nameWithType: "ISignatureTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.ISignatureTransform"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
