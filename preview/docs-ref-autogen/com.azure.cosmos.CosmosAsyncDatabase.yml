### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosAsyncDatabase
  id: CosmosAsyncDatabase
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)
  - com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.delete()
  - com.azure.cosmos.CosmosAsyncDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.getContainer(java.lang.String)
  - com.azure.cosmos.CosmosAsyncDatabase.getId()
  - com.azure.cosmos.CosmosAsyncDatabase.getUser(java.lang.String)
  - com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)
  - com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String)
  - com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)
  - com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String)
  - com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.read()
  - com.azure.cosmos.CosmosAsyncDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()
  - com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()
  - com.azure.cosmos.CosmosAsyncDatabase.readThroughput()
  - com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosAsyncDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)
  langs:
  - java
  name: CosmosAsyncDatabase
  nameWithType: CosmosAsyncDatabase
  fullName: com.azure.cosmos.CosmosAsyncDatabase
  type: Class
  package: com.azure.cosmos
  summary: Perform read and delete databases, update database throughput, and perform operations on child resources
  syntax:
    content: public class CosmosAsyncDatabase
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase(java.lang.String,com.azure.cosmos.CosmosAsyncClient)
  id: CosmosAsyncDatabase(java.lang.String,com.azure.cosmos.CosmosAsyncClient)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: CosmosAsyncDatabase(String id, CosmosAsyncClient client)
  nameWithType: CosmosAsyncDatabase.CosmosAsyncDatabase(String id, CosmosAsyncClient client)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase(String id, CosmosAsyncClient client)
  overload: com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase*
  type: Constructor
  package: com.azure.cosmos
  syntax:
    content: " CosmosAsyncDatabase(String id, CosmosAsyncClient client)"
    parameters:
    - id: id
      type: java.lang.String
    - id: client
      type: com.azure.cosmos.CosmosAsyncClient
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties)
  nameWithType: CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos container response with
         the created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  nameWithType: CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the containerProperties.
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the cosmos container request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  nameWithType: CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container with custom throughput properties.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties for the container.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos container response with
         the created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
  nameWithType: CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Creates a container.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: the mono.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String)
  id: createContainer(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainer(String id, String partitionKeyPath)
  nameWithType: CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainer(String id, String partitionKeyPath)
    parameters:
    - id: id
      type: java.lang.String
      description: the cosmos container id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  id: createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  nameWithType: CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
    parameters:
    - id: id
      type: java.lang.String
      description: the cosmos container id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties for the container.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)
  id: createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainerIfNotExists(CosmosContainerProperties containerProperties)
  nameWithType: CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container if it does not exist on the service.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created or existing container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosContainerProperties containerProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created or existing container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  id: createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  nameWithType: CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container if it does not exist on the service.


    The throughput properties will only be used if the specified container does not exist and therefor a new container will be created. After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created or existing container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties for the container.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created or existing container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)
  id: createContainerIfNotExists(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainerIfNotExists(String id, String partitionKeyPath)
  nameWithType: CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container if it does not exist on the service.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath)
    parameters:
    - id: id
      type: java.lang.String
      description: the cosmos container id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  id: createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  nameWithType: CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container if it does not exist on the service.


    The throughput properties will only be used if the specified container does not exist and therefor a new container will be created. After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
    parameters:
    - id: id
      type: java.lang.String
      description: the cosmos container id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties for the container.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the cosmos container response with the
         created container or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)
  id: createUser(com.azure.cosmos.models.CosmosUserProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: createUser(CosmosUserProperties userProperties)
  nameWithType: CosmosAsyncDatabase.createUser(CosmosUserProperties userProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createUser(CosmosUserProperties userProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.createUser*
  type: Method
  package: com.azure.cosmos
  summary: Creates a user After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosUserResponse> createUser(CosmosUserProperties userProperties)
    parameters:
    - id: userProperties
      type: com.azure.cosmos.models.CosmosUserProperties
      description: the cosmos user properties
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the
         created cosmos user or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.delete()
  id: delete()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: delete()
  nameWithType: CosmosAsyncDatabase.delete()
  fullName: com.azure.cosmos.CosmosAsyncDatabase.delete()
  overload: com.azure.cosmos.CosmosAsyncDatabase.delete*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos database response with the deleted database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosDatabaseResponse> delete()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosDatabaseResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos database response.
- uid: com.azure.cosmos.CosmosAsyncDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  id: delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: delete(CosmosDatabaseRequestOptions options)
  nameWithType: CosmosAsyncDatabase.delete(CosmosDatabaseRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.delete(CosmosDatabaseRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.delete*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Deletes a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos database response with the deleted database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosDatabaseResponse> delete(CosmosDatabaseRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosDatabaseRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosDatabaseResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos database response.
- uid: com.azure.cosmos.CosmosAsyncDatabase.getContainer(java.lang.String)
  id: getContainer(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: getContainer(String id)
  nameWithType: CosmosAsyncDatabase.getContainer(String id)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.getContainer(String id)
  overload: com.azure.cosmos.CosmosAsyncDatabase.getContainer*
  type: Method
  package: com.azure.cosmos
  summary: Gets a CosmosAsyncContainer object without making a service call
  syntax:
    content: public CosmosAsyncContainer getContainer(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: id of the container
    return:
      type: com.azure.cosmos.CosmosAsyncContainer
      description: Cosmos Container
- uid: com.azure.cosmos.CosmosAsyncDatabase.getId()
  id: getId()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: getId()
  nameWithType: CosmosAsyncDatabase.getId()
  fullName: com.azure.cosmos.CosmosAsyncDatabase.getId()
  overload: com.azure.cosmos.CosmosAsyncDatabase.getId*
  type: Method
  package: com.azure.cosmos
  summary: Get the id of the CosmosAsyncDatabase.
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: the id of the CosmosAsyncDatabase.
- uid: com.azure.cosmos.CosmosAsyncDatabase.getUser(java.lang.String)
  id: getUser(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: getUser(String id)
  nameWithType: CosmosAsyncDatabase.getUser(String id)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.getUser(String id)
  overload: com.azure.cosmos.CosmosAsyncDatabase.getUser*
  type: Method
  package: com.azure.cosmos
  summary: Gets user.
  syntax:
    content: public CosmosAsyncUser getUser(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id
    return:
      type: com.azure.cosmos.CosmosAsyncUser
      description: the user
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)
  id: queryContainers(com.azure.cosmos.models.SqlQuerySpec)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryContainers(SqlQuerySpec querySpec)
  nameWithType: CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos containers in a cosmos database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained containers or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos containers in a cosmos database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained containers or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String)
  id: queryContainers(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryContainers(String query)
  nameWithType: CosmosAsyncDatabase.queryContainers(String query)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(String query)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos containers in a cosmos database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained containers or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryContainers(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncDatabase.queryContainers(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryContainers(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos containers in a cosmos database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained containers or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)
  id: queryUsers(com.azure.cosmos.models.SqlQuerySpec)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryUsers(SqlQuerySpec querySpec)
  nameWithType: CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos users in a database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained users or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos users in a database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained users or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String)
  id: queryUsers(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryUsers(String query)
  nameWithType: CosmosAsyncDatabase.queryUsers(String query)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(String query)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos users in a database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: query as string.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained users or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: queryUsers(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncDatabase.queryUsers(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryUsers(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for cosmos users in a database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: query as string.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         obtained users or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.read()
  id: read()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: read()
  nameWithType: CosmosAsyncDatabase.read()
  fullName: com.azure.cosmos.CosmosAsyncDatabase.read()
  overload: com.azure.cosmos.CosmosAsyncDatabase.read*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single cosmos database respone with the read database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosDatabaseResponse> read()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosDatabaseResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos database respone with
         the read database or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  id: read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: read(CosmosDatabaseRequestOptions options)
  nameWithType: CosmosAsyncDatabase.read(CosmosDatabaseRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.read(CosmosDatabaseRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.read*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads a database.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos cosmos database respone with the read database. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosDatabaseResponse> read(CosmosDatabaseRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosDatabaseRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosDatabaseResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos database response with
         the read database or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()
  id: readAllContainers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: readAllContainers()
  nameWithType: CosmosAsyncDatabase.readAllContainers()
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()
  overload: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all cosmos containers.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the read containers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosContainerProperties> readAllContainers()
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of read
         containers or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: readAllContainers(com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: readAllContainers(CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncDatabase.readAllContainers(CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all cosmos containers.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the read containers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosContainerProperties> readAllContainers(CosmosQueryRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: <xref uid="com.azure.cosmos.models.CosmosQueryRequestOptions" data-throw-if-not-resolved="false">CosmosQueryRequestOptions</xref>
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of read
         containers or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()
  id: readAllUsers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: readAllUsers()
  nameWithType: CosmosAsyncDatabase.readAllUsers()
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()
  overload: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all cosmos users in a database.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response of the read cosmos users. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserProperties> readAllUsers()
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the
         read cosmos users or an error.
- uid: com.azure.cosmos.CosmosAsyncDatabase.readThroughput()
  id: readThroughput()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: readThroughput()
  nameWithType: CosmosAsyncDatabase.readThroughput()
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readThroughput()
  overload: com.azure.cosmos.CosmosAsyncDatabase.readThroughput*
  type: Method
  package: com.azure.cosmos
  summary: Gets the throughput of the database.
  syntax:
    content: public Mono<ThroughputResponse> readThroughput()
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.ThroughputResponse>
      description: the mono containing throughput response.
- uid: com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  id: replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: replaceThroughput(ThroughputProperties throughputProperties)
  nameWithType: CosmosAsyncDatabase.replaceThroughput(ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput(ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput*
  type: Method
  package: com.azure.cosmos
  summary: Sets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service.
  syntax:
    content: public Mono<ThroughputResponse> replaceThroughput(ThroughputProperties throughputProperties)
    parameters:
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.ThroughputResponse>
      description: the mono.
- uid: com.azure.cosmos.CosmosAsyncDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)
  id: upsertUser(com.azure.cosmos.models.CosmosUserProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncDatabase
  langs:
  - java
  name: upsertUser(CosmosUserProperties userProperties)
  nameWithType: CosmosAsyncDatabase.upsertUser(CosmosUserProperties userProperties)
  fullName: com.azure.cosmos.CosmosAsyncDatabase.upsertUser(CosmosUserProperties userProperties)
  overload: com.azure.cosmos.CosmosAsyncDatabase.upsertUser*
  type: Method
  package: com.azure.cosmos
  summary: Upsert a user. Upsert will create a new user if it doesn't exist, or replace the existing one if it does. After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosUserResponse> upsertUser(CosmosUserProperties userProperties)
    parameters:
    - id: userProperties
      type: com.azure.cosmos.models.CosmosUserProperties
      description: the cosmos user properties
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the
         upserted user or an error.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.CosmosAsyncClient
  name: CosmosAsyncClient
  nameWithType: CosmosAsyncClient
  fullName: com.azure.cosmos.CosmosAsyncClient
- uid: com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase*
  name: CosmosAsyncDatabase
  nameWithType: CosmosAsyncDatabase.CosmosAsyncDatabase
  fullName: com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncDatabase.getId*
  name: getId
  nameWithType: CosmosAsyncDatabase.getId
  fullName: com.azure.cosmos.CosmosAsyncDatabase.getId
  package: com.azure.cosmos
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosDatabaseResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosDatabaseResponse
    name: CosmosDatabaseResponse
    fullName: com.azure.cosmos.models.CosmosDatabaseResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncDatabase.read*
  name: read
  nameWithType: CosmosAsyncDatabase.read
  fullName: com.azure.cosmos.CosmosAsyncDatabase.read
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosDatabaseRequestOptions
  name: CosmosDatabaseRequestOptions
  nameWithType: CosmosDatabaseRequestOptions
  fullName: com.azure.cosmos.models.CosmosDatabaseRequestOptions
- uid: com.azure.cosmos.CosmosAsyncDatabase.delete*
  name: delete
  nameWithType: CosmosAsyncDatabase.delete
  fullName: com.azure.cosmos.CosmosAsyncDatabase.delete
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosContainerProperties
  name: CosmosContainerProperties
  nameWithType: CosmosContainerProperties
  fullName: com.azure.cosmos.models.CosmosContainerProperties
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosContainerResponse
    name: CosmosContainerResponse
    fullName: com.azure.cosmos.models.CosmosContainerResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainer*
  name: createContainer
  nameWithType: CosmosAsyncDatabase.createContainer
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainer
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.ThroughputProperties
  name: ThroughputProperties
  nameWithType: ThroughputProperties
  fullName: com.azure.cosmos.models.ThroughputProperties
- uid: com.azure.cosmos.models.CosmosContainerRequestOptions
  name: CosmosContainerRequestOptions
  nameWithType: CosmosContainerRequestOptions
  fullName: com.azure.cosmos.models.CosmosContainerRequestOptions
- uid: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*
  name: createContainerIfNotExists
  nameWithType: CosmosAsyncDatabase.createContainerIfNotExists
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosContainerProperties
    name: CosmosContainerProperties
    fullName: com.azure.cosmos.models.CosmosContainerProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers*
  name: readAllContainers
  nameWithType: CosmosAsyncDatabase.readAllContainers
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readAllContainers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryContainers*
  name: queryContainers
  nameWithType: CosmosAsyncDatabase.queryContainers
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryContainers
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.SqlQuerySpec
  name: SqlQuerySpec
  nameWithType: SqlQuerySpec
  fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.cosmos.CosmosAsyncContainer
  name: CosmosAsyncContainer
  nameWithType: CosmosAsyncContainer
  fullName: com.azure.cosmos.CosmosAsyncContainer
- uid: com.azure.cosmos.CosmosAsyncDatabase.getContainer*
  name: getContainer
  nameWithType: CosmosAsyncDatabase.getContainer
  fullName: com.azure.cosmos.CosmosAsyncDatabase.getContainer
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosUserProperties
  name: CosmosUserProperties
  nameWithType: CosmosUserProperties
  fullName: com.azure.cosmos.models.CosmosUserProperties
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosUserResponse
    name: CosmosUserResponse
    fullName: com.azure.cosmos.models.CosmosUserResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncDatabase.createUser*
  name: createUser
  nameWithType: CosmosAsyncDatabase.createUser
  fullName: com.azure.cosmos.CosmosAsyncDatabase.createUser
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncDatabase.upsertUser*
  name: upsertUser
  nameWithType: CosmosAsyncDatabase.upsertUser
  fullName: com.azure.cosmos.CosmosAsyncDatabase.upsertUser
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosUserProperties
    name: CosmosUserProperties
    fullName: com.azure.cosmos.models.CosmosUserProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers*
  name: readAllUsers
  nameWithType: CosmosAsyncDatabase.readAllUsers
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readAllUsers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncDatabase.queryUsers*
  name: queryUsers
  nameWithType: CosmosAsyncDatabase.queryUsers
  fullName: com.azure.cosmos.CosmosAsyncDatabase.queryUsers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncUser
  name: CosmosAsyncUser
  nameWithType: CosmosAsyncUser
  fullName: com.azure.cosmos.CosmosAsyncUser
- uid: com.azure.cosmos.CosmosAsyncDatabase.getUser*
  name: getUser
  nameWithType: CosmosAsyncDatabase.getUser
  fullName: com.azure.cosmos.CosmosAsyncDatabase.getUser
  package: com.azure.cosmos
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.ThroughputResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.ThroughputResponse
    name: ThroughputResponse
    fullName: com.azure.cosmos.models.ThroughputResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput*
  name: replaceThroughput
  nameWithType: CosmosAsyncDatabase.replaceThroughput
  fullName: com.azure.cosmos.CosmosAsyncDatabase.replaceThroughput
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncDatabase.readThroughput*
  name: readThroughput
  nameWithType: CosmosAsyncDatabase.readThroughput
  fullName: com.azure.cosmos.CosmosAsyncDatabase.readThroughput
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.models.CosmosDatabaseResponse
  name: CosmosDatabaseResponse
  nameWithType: CosmosDatabaseResponse
  fullName: com.azure.cosmos.models.CosmosDatabaseResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.cosmos.models.CosmosContainerResponse
  name: CosmosContainerResponse
  nameWithType: CosmosContainerResponse
  fullName: com.azure.cosmos.models.CosmosContainerResponse
- uid: com.azure.cosmos.util.CosmosPagedFlux
  name: CosmosPagedFlux
  nameWithType: CosmosPagedFlux
  fullName: com.azure.cosmos.util.CosmosPagedFlux
- uid: com.azure.cosmos.models.CosmosUserResponse
  name: CosmosUserResponse
  nameWithType: CosmosUserResponse
  fullName: com.azure.cosmos.models.CosmosUserResponse
- uid: com.azure.cosmos.models.ThroughputResponse
  name: ThroughputResponse
  nameWithType: ThroughputResponse
  fullName: com.azure.cosmos.models.ThroughputResponse
