### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncDatabase"
  id: "CosmosAsyncDatabase"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase(java.lang.String,com.azure.cosmos.CosmosAsyncClient)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String,int)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,int)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,int)"
  - "com.azure.cosmos.CosmosAsyncDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)"
  - "com.azure.cosmos.CosmosAsyncDatabase.delete()"
  - "com.azure.cosmos.CosmosAsyncDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.getClient()"
  - "com.azure.cosmos.CosmosAsyncDatabase.getContainer(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncDatabase.getDocClientWrapper()"
  - "com.azure.cosmos.CosmosAsyncDatabase.getId()"
  - "com.azure.cosmos.CosmosAsyncDatabase.getLink()"
  - "com.azure.cosmos.CosmosAsyncDatabase.getParentLink()"
  - "com.azure.cosmos.CosmosAsyncDatabase.getURIPathSegment()"
  - "com.azure.cosmos.CosmosAsyncDatabase.getUser(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.read()"
  - "com.azure.cosmos.CosmosAsyncDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()"
  - "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()"
  - "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers(com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncDatabase.readProvisionedThroughput()"
  - "com.azure.cosmos.CosmosAsyncDatabase.replaceProvisionedThroughput(int)"
  - "com.azure.cosmos.CosmosAsyncDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  langs:
  - "java"
  name: "CosmosAsyncDatabase"
  nameWithType: "CosmosAsyncDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Perform read and delete databases, update database throughput, and perform operations on child resources"
  syntax:
    content: "public class CosmosAsyncDatabase"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase(java.lang.String,com.azure.cosmos.CosmosAsyncClient)"
  id: "CosmosAsyncDatabase(java.lang.String,com.azure.cosmos.CosmosAsyncClient)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "CosmosAsyncDatabase(String id, CosmosAsyncClient client)"
  nameWithType: "CosmosAsyncDatabase.CosmosAsyncDatabase(String id, CosmosAsyncClient client)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase(String id, CosmosAsyncClient client)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncDatabase(String id, CosmosAsyncClient client)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "client"
      type: "com.azure.cosmos.CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainer(CosmosContainerProperties containerProperties)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the container properties."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response with\n the created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the containerProperties."
    - id: "options"
      type: "com.azure.cosmos.models.CosmosContainerRequestOptions"
      description: "the cosmos container request options"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties,int)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties, int throughput)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainer(CosmosContainerProperties containerProperties, int throughput)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the container properties."
    - id: "throughput"
      type: "int"
      description: "the throughput for the container"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos container response with\n the created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties,int,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the containerProperties."
    - id: "throughput"
      type: "int"
      description: "the throughput for the container"
    - id: "options"
      type: "com.azure.cosmos.models.CosmosContainerRequestOptions"
      description: "the cosmos container request options"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String)"
  id: "createContainer(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainer(String id, String partitionKeyPath)"
  nameWithType: "CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainer(String id, String partitionKeyPath)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the cosmos container id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(java.lang.String,java.lang.String,int)"
  id: "createContainer(java.lang.String,java.lang.String,int)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainer(String id, String partitionKeyPath, int throughput)"
  nameWithType: "CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath, int throughput)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer(String id, String partitionKeyPath, int throughput)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainer(String id, String partitionKeyPath, int throughput)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the cosmos container id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    - id: "throughput"
      type: "int"
      description: "the throughput for the container"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  id: "createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container if it does not exist on the service.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created or existing container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainerIfNotExists(CosmosContainerProperties containerProperties)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the container properties"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created or existing container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,int)"
  id: "createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,int)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container if it does not exist on the service.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created or existing container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the container properties"
    - id: "throughput"
      type: "int"
      description: "the throughput for the container"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created or existing container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)"
  id: "createContainerIfNotExists(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(String id, String partitionKeyPath)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container if it does not exist on the service.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the cosmos container id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,int)"
  id: "createContainerIfNotExists(java.lang.String,java.lang.String,int)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a document container if it does not exist on the service.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos container response with the created container. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncContainerResponse> createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the cosmos container id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    - id: "throughput"
      type: "int"
      description: "the throughput for the container"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos container response with the\n created container or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)"
  id: "createUser(com.azure.cosmos.models.CosmosUserProperties)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "createUser(CosmosUserProperties userProperties)"
  nameWithType: "CosmosAsyncDatabase.createUser(CosmosUserProperties userProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createUser(CosmosUserProperties userProperties)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.createUser*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a user After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncUserResponse> createUser(CosmosUserProperties userProperties)"
    parameters:
    - id: "userProperties"
      type: "com.azure.cosmos.models.CosmosUserProperties"
      description: "the cosmos user properties"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the\n created cosmos user or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.delete()"
  id: "delete()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CosmosAsyncDatabase.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.delete()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos database response with the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> delete()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  id: "delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "delete(CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.delete(CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.delete(CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Deletes a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos database response with the deleted database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> delete(CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
      description: "the request options"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getClient()"
  id: "getClient()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getClient()"
  nameWithType: "CosmosAsyncDatabase.getClient()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getClient()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getClient*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncClient getClient()"
    return:
      type: "com.azure.cosmos.CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getContainer(java.lang.String)"
  id: "getContainer(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getContainer(String id)"
  nameWithType: "CosmosAsyncDatabase.getContainer(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getContainer(String id)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a CosmosAsyncContainer object without making a service call"
  syntax:
    content: "public CosmosAsyncContainer getContainer(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the container"
    return:
      type: "com.azure.cosmos.CosmosAsyncContainer"
      description: "Cosmos Container"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getDocClientWrapper()"
  id: "getDocClientWrapper()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getDocClientWrapper()"
  nameWithType: "CosmosAsyncDatabase.getDocClientWrapper()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getDocClientWrapper()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getDocClientWrapper*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " AsyncDocumentClient getDocClientWrapper()"
    return:
      type: "com.azure.cosmos.implementation.AsyncDocumentClient"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getId()"
  id: "getId()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "CosmosAsyncDatabase.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getId()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the CosmosAsyncDatabase"
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
      description: "the id of the CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getLink()"
  id: "getLink()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getLink()"
  nameWithType: "CosmosAsyncDatabase.getLink()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getLink()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getParentLink()"
  id: "getParentLink()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getParentLink()"
  nameWithType: "CosmosAsyncDatabase.getParentLink()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getParentLink()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getParentLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getParentLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getURIPathSegment()"
  id: "getURIPathSegment()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getURIPathSegment()"
  nameWithType: "CosmosAsyncDatabase.getURIPathSegment()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getURIPathSegment()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getURIPathSegment*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getURIPathSegment()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getUser(java.lang.String)"
  id: "getUser(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "getUser(String id)"
  nameWithType: "CosmosAsyncDatabase.getUser(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getUser(String id)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.getUser*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets user."
  syntax:
    content: "public CosmosAsyncUser getUser(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    return:
      type: "com.azure.cosmos.CosmosAsyncUser"
      description: "the user"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  id: "queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryContainers(SqlQuerySpec querySpec)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the SQL query specification."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained containers or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  id: "queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained containers or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String)"
  id: "queryContainers(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryContainers(String query)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(String query)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(String query)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained containers or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  id: "queryContainers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryContainers(String query, FeedOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryContainers(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos containers in a cosmos database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained containers. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosContainerProperties> queryContainers(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained containers or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  id: "queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryUsers(SqlQuerySpec querySpec)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the SQL query specification."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained users or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  id: "queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained users or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String)"
  id: "queryUsers(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryUsers(String query)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(String query)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(String query)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "query as string"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained users or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  id: "queryUsers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "queryUsers(String query, FeedOptions options)"
  nameWithType: "CosmosAsyncDatabase.queryUsers(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the obtained users. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosUserProperties> queryUsers(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "query as string"
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n obtained users or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.read()"
  id: "read()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "read()"
  nameWithType: "CosmosAsyncDatabase.read()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.read()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos database respone with the read database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> read()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database respone with\n the read database or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  id: "read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "read(CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncDatabase.read(CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.read(CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a cosmos cosmos database respone with the read database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> read(CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with\n the read database or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()"
  id: "readAllContainers()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "readAllContainers()"
  nameWithType: "CosmosAsyncDatabase.readAllContainers()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all cosmos containers.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read containers. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosContainerProperties> readAllContainers()"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of read\n containers or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(com.azure.cosmos.models.FeedOptions)"
  id: "readAllContainers(com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "readAllContainers(FeedOptions options)"
  nameWithType: "CosmosAsyncDatabase.readAllContainers(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all cosmos containers.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read containers. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosContainerProperties> readAllContainers(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "<xref uid=\"com.azure.cosmos.models.FeedOptions\" data-throw-if-not-resolved=\"false\">FeedOptions</xref>"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of read\n containers or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()"
  id: "readAllUsers()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "readAllUsers()"
  nameWithType: "CosmosAsyncDatabase.readAllUsers()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read cosmos users. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosUserProperties> readAllUsers()"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n read cosmos users or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers(com.azure.cosmos.models.FeedOptions)"
  id: "readAllUsers(com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "readAllUsers(FeedOptions options)"
  nameWithType: "CosmosAsyncDatabase.readAllUsers(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all cosmos users in a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read cosmos users. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosUserProperties> readAllUsers(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the\n read cosmos users or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readProvisionedThroughput()"
  id: "readProvisionedThroughput()"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "readProvisionedThroughput()"
  nameWithType: "CosmosAsyncDatabase.readProvisionedThroughput()"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readProvisionedThroughput()"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.readProvisionedThroughput*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the throughput of the database"
  syntax:
    content: "public Mono<Integer> readProvisionedThroughput()"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Integer>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing throughput or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.replaceProvisionedThroughput(int)"
  id: "replaceProvisionedThroughput(int)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "replaceProvisionedThroughput(int requestUnitsPerSecond)"
  nameWithType: "CosmosAsyncDatabase.replaceProvisionedThroughput(int requestUnitsPerSecond)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.replaceProvisionedThroughput(int requestUnitsPerSecond)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.replaceProvisionedThroughput*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Sets throughput provisioned for a container in measurement of Requests-per-Unit in the Azure Cosmos service."
  syntax:
    content: "public Mono<Integer> replaceProvisionedThroughput(int requestUnitsPerSecond)"
    parameters:
    - id: "requestUnitsPerSecond"
      type: "int"
      description: "the cosmos container throughput, expressed in\n Request Units per second"
    return:
      type: "reactor.core.publisher.Mono<java.lang.Integer>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing throughput or an error."
- uid: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  id: "upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  parent: "com.azure.cosmos.CosmosAsyncDatabase"
  langs:
  - "java"
  name: "upsertUser(CosmosUserProperties userProperties)"
  nameWithType: "CosmosAsyncDatabase.upsertUser(CosmosUserProperties userProperties)"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser(CosmosUserProperties userProperties)"
  overload: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Upsert a user. Upsert will create a new user if it doesn't exist, or replace the existing one if it does. After subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created user. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncUserResponse> upsertUser(CosmosUserProperties userProperties)"
    parameters:
    - id: "userProperties"
      type: "com.azure.cosmos.models.CosmosUserProperties"
      description: "the cosmos user properties"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the\n upserted user or an error."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncClient"
  name: "CosmosAsyncClient"
  nameWithType: "CosmosAsyncClient"
  fullName: "com.azure.cosmos.CosmosAsyncClient"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase*"
  name: "CosmosAsyncDatabase"
  nameWithType: "CosmosAsyncDatabase.CosmosAsyncDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.CosmosAsyncDatabase"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getId*"
  name: "getId"
  nameWithType: "CosmosAsyncDatabase.getId"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getId"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
    name: "CosmosAsyncDatabaseResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.read*"
  name: "read"
  nameWithType: "CosmosAsyncDatabase.read"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
  name: "CosmosDatabaseRequestOptions"
  nameWithType: "CosmosDatabaseRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.delete*"
  name: "delete"
  nameWithType: "CosmosAsyncDatabase.delete"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosContainerProperties"
  name: "CosmosContainerProperties"
  nameWithType: "CosmosContainerProperties"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
    name: "CosmosAsyncContainerResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainer*"
  name: "createContainer"
  nameWithType: "CosmosAsyncDatabase.createContainer"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainer"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.models.CosmosContainerRequestOptions"
  name: "CosmosContainerRequestOptions"
  nameWithType: "CosmosContainerRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosContainerRequestOptions"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists*"
  name: "createContainerIfNotExists"
  nameWithType: "CosmosAsyncDatabase.createContainerIfNotExists"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createContainerIfNotExists"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.models.FeedOptions"
- uid: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosContainerProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosPagedFlux"
    name: "CosmosPagedFlux"
    fullName: "com.azure.cosmos.CosmosPagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosContainerProperties"
    name: "CosmosContainerProperties"
    fullName: "com.azure.cosmos.models.CosmosContainerProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers*"
  name: "readAllContainers"
  nameWithType: "CosmosAsyncDatabase.readAllContainers"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllContainers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers*"
  name: "queryContainers"
  nameWithType: "CosmosAsyncDatabase.queryContainers"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryContainers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.SqlQuerySpec"
  name: "SqlQuerySpec"
  nameWithType: "SqlQuerySpec"
  fullName: "com.azure.cosmos.models.SqlQuerySpec"
- uid: "com.azure.cosmos.CosmosAsyncContainer"
  name: "CosmosAsyncContainer"
  nameWithType: "CosmosAsyncContainer"
  fullName: "com.azure.cosmos.CosmosAsyncContainer"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getContainer*"
  name: "getContainer"
  nameWithType: "CosmosAsyncDatabase.getContainer"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getContainer"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosUserProperties"
  name: "CosmosUserProperties"
  nameWithType: "CosmosUserProperties"
  fullName: "com.azure.cosmos.models.CosmosUserProperties"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncUserResponse"
    name: "CosmosAsyncUserResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncUserResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.createUser*"
  name: "createUser"
  nameWithType: "CosmosAsyncDatabase.createUser"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.createUser"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser*"
  name: "upsertUser"
  nameWithType: "CosmosAsyncDatabase.upsertUser"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.upsertUser"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosPagedFlux"
    name: "CosmosPagedFlux"
    fullName: "com.azure.cosmos.CosmosPagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosUserProperties"
    name: "CosmosUserProperties"
    fullName: "com.azure.cosmos.models.CosmosUserProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers*"
  name: "readAllUsers"
  nameWithType: "CosmosAsyncDatabase.readAllUsers"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readAllUsers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers*"
  name: "queryUsers"
  nameWithType: "CosmosAsyncDatabase.queryUsers"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.queryUsers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser"
  name: "CosmosAsyncUser"
  nameWithType: "CosmosAsyncUser"
  fullName: "com.azure.cosmos.CosmosAsyncUser"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getUser*"
  name: "getUser"
  nameWithType: "CosmosAsyncDatabase.getUser"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getUser"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<java.lang.Integer>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.readProvisionedThroughput*"
  name: "readProvisionedThroughput"
  nameWithType: "CosmosAsyncDatabase.readProvisionedThroughput"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.readProvisionedThroughput"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.replaceProvisionedThroughput*"
  name: "replaceProvisionedThroughput"
  nameWithType: "CosmosAsyncDatabase.replaceProvisionedThroughput"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.replaceProvisionedThroughput"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getClient*"
  name: "getClient"
  nameWithType: "CosmosAsyncDatabase.getClient"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getClient"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.implementation.AsyncDocumentClient"
  name: "AsyncDocumentClient"
  nameWithType: "AsyncDocumentClient"
  fullName: "com.azure.cosmos.implementation.AsyncDocumentClient"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getDocClientWrapper*"
  name: "getDocClientWrapper"
  nameWithType: "CosmosAsyncDatabase.getDocClientWrapper"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getDocClientWrapper"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getURIPathSegment*"
  name: "getURIPathSegment"
  nameWithType: "CosmosAsyncDatabase.getURIPathSegment"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getURIPathSegment"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getParentLink*"
  name: "getParentLink"
  nameWithType: "CosmosAsyncDatabase.getParentLink"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getParentLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase.getLink*"
  name: "getLink"
  nameWithType: "CosmosAsyncDatabase.getLink"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase.getLink"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
  name: "CosmosAsyncDatabaseResponse"
  nameWithType: "CosmosAsyncDatabaseResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
  name: "CosmosAsyncContainerResponse"
  nameWithType: "CosmosAsyncContainerResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
- uid: "com.azure.cosmos.CosmosPagedFlux"
  name: "CosmosPagedFlux"
  nameWithType: "CosmosPagedFlux"
  fullName: "com.azure.cosmos.CosmosPagedFlux"
- uid: "com.azure.cosmos.models.CosmosAsyncUserResponse"
  name: "CosmosAsyncUserResponse"
  nameWithType: "CosmosAsyncUserResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncUserResponse"
- uid: "java.lang.Integer"
  name: "Integer"
  nameWithType: "Integer"
  fullName: "java.lang.Integer"
