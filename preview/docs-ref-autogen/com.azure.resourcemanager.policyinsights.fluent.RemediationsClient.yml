### YamlMime:JavaType
uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient"
fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient"
name: "RemediationsClient"
nameWithType: "RemediationsClient"
summary: "An instance of this class provides access to all the operations defined in Remediations<wbr>Client."
syntax: "public interface RemediationsClient"
methods:
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtManagementGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtManagementGroup(String managementGroupId, String remediationName)"
  name: "cancelAtManagementGroup(String managementGroupId, String remediationName)"
  nameWithType: "RemediationsClient.cancelAtManagementGroup(String managementGroupId, String remediationName)"
  summary: "Cancels a remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner cancelAtManagementGroup(String managementGroupId, String remediationName)"
  desc: "Cancels a remediation at management group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtManagementGroupWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  name: "cancelAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  nameWithType: "RemediationsClient.cancelAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  summary: "Cancels a remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> cancelAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  desc: "Cancels a remediation at management group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResource(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResource(String resourceId, String remediationName)"
  name: "cancelAtResource(String resourceId, String remediationName)"
  nameWithType: "RemediationsClient.cancelAtResource(String resourceId, String remediationName)"
  summary: "Cancel a remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner cancelAtResource(String resourceId, String remediationName)"
  desc: "Cancel a remediation at resource scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResourceGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResourceGroup(String resourceGroupName, String remediationName)"
  name: "cancelAtResourceGroup(String resourceGroupName, String remediationName)"
  nameWithType: "RemediationsClient.cancelAtResourceGroup(String resourceGroupName, String remediationName)"
  summary: "Cancels a remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner cancelAtResourceGroup(String resourceGroupName, String remediationName)"
  desc: "Cancels a remediation at resource group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResourceGroupWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  name: "cancelAtResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  nameWithType: "RemediationsClient.cancelAtResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  summary: "Cancels a remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> cancelAtResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  desc: "Cancels a remediation at resource group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResourceWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  name: "cancelAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  nameWithType: "RemediationsClient.cancelAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  summary: "Cancel a remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> cancelAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  desc: "Cancel a remediation at resource scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtSubscription(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtSubscription(String remediationName)"
  name: "cancelAtSubscription(String remediationName)"
  nameWithType: "RemediationsClient.cancelAtSubscription(String remediationName)"
  summary: "Cancels a remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner cancelAtSubscription(String remediationName)"
  desc: "Cancels a remediation at subscription scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtSubscriptionWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.cancelAtSubscriptionWithResponse(String remediationName, Context context)"
  name: "cancelAtSubscriptionWithResponse(String remediationName, Context context)"
  nameWithType: "RemediationsClient.cancelAtSubscriptionWithResponse(String remediationName, Context context)"
  summary: "Cancels a remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> cancelAtSubscriptionWithResponse(String remediationName, Context context)"
  desc: "Cancels a remediation at subscription scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtManagementGroup(java.lang.String,java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtManagementGroup(String managementGroupId, String remediationName, RemediationInner parameters)"
  name: "createOrUpdateAtManagementGroup(String managementGroupId, String remediationName, RemediationInner parameters)"
  nameWithType: "RemediationsClient.createOrUpdateAtManagementGroup(String managementGroupId, String remediationName, RemediationInner parameters)"
  summary: "Creates or updates a remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner createOrUpdateAtManagementGroup(String managementGroupId, String remediationName, RemediationInner parameters)"
  desc: "Creates or updates a remediation at management group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtManagementGroupWithResponse(java.lang.String,java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtManagementGroupWithResponse(String managementGroupId, String remediationName, RemediationInner parameters, Context context)"
  name: "createOrUpdateAtManagementGroupWithResponse(String managementGroupId, String remediationName, RemediationInner parameters, Context context)"
  nameWithType: "RemediationsClient.createOrUpdateAtManagementGroupWithResponse(String managementGroupId, String remediationName, RemediationInner parameters, Context context)"
  summary: "Creates or updates a remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> createOrUpdateAtManagementGroupWithResponse(String managementGroupId, String remediationName, RemediationInner parameters, Context context)"
  desc: "Creates or updates a remediation at management group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResource(java.lang.String,java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResource(String resourceId, String remediationName, RemediationInner parameters)"
  name: "createOrUpdateAtResource(String resourceId, String remediationName, RemediationInner parameters)"
  nameWithType: "RemediationsClient.createOrUpdateAtResource(String resourceId, String remediationName, RemediationInner parameters)"
  summary: "Creates or updates a remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner createOrUpdateAtResource(String resourceId, String remediationName, RemediationInner parameters)"
  desc: "Creates or updates a remediation at resource scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResourceGroup(java.lang.String,java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResourceGroup(String resourceGroupName, String remediationName, RemediationInner parameters)"
  name: "createOrUpdateAtResourceGroup(String resourceGroupName, String remediationName, RemediationInner parameters)"
  nameWithType: "RemediationsClient.createOrUpdateAtResourceGroup(String resourceGroupName, String remediationName, RemediationInner parameters)"
  summary: "Creates or updates a remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner createOrUpdateAtResourceGroup(String resourceGroupName, String remediationName, RemediationInner parameters)"
  desc: "Creates or updates a remediation at resource group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResourceGroupWithResponse(java.lang.String,java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResourceGroupWithResponse(String resourceGroupName, String remediationName, RemediationInner parameters, Context context)"
  name: "createOrUpdateAtResourceGroupWithResponse(String resourceGroupName, String remediationName, RemediationInner parameters, Context context)"
  nameWithType: "RemediationsClient.createOrUpdateAtResourceGroupWithResponse(String resourceGroupName, String remediationName, RemediationInner parameters, Context context)"
  summary: "Creates or updates a remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> createOrUpdateAtResourceGroupWithResponse(String resourceGroupName, String remediationName, RemediationInner parameters, Context context)"
  desc: "Creates or updates a remediation at resource group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResourceWithResponse(java.lang.String,java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtResourceWithResponse(String resourceId, String remediationName, RemediationInner parameters, Context context)"
  name: "createOrUpdateAtResourceWithResponse(String resourceId, String remediationName, RemediationInner parameters, Context context)"
  nameWithType: "RemediationsClient.createOrUpdateAtResourceWithResponse(String resourceId, String remediationName, RemediationInner parameters, Context context)"
  summary: "Creates or updates a remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> createOrUpdateAtResourceWithResponse(String resourceId, String remediationName, RemediationInner parameters, Context context)"
  desc: "Creates or updates a remediation at resource scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtSubscription(java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtSubscription(String remediationName, RemediationInner parameters)"
  name: "createOrUpdateAtSubscription(String remediationName, RemediationInner parameters)"
  nameWithType: "RemediationsClient.createOrUpdateAtSubscription(String remediationName, RemediationInner parameters)"
  summary: "Creates or updates a remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner createOrUpdateAtSubscription(String remediationName, RemediationInner parameters)"
  desc: "Creates or updates a remediation at subscription scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtSubscriptionWithResponse(java.lang.String,com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.createOrUpdateAtSubscriptionWithResponse(String remediationName, RemediationInner parameters, Context context)"
  name: "createOrUpdateAtSubscriptionWithResponse(String remediationName, RemediationInner parameters, Context context)"
  nameWithType: "RemediationsClient.createOrUpdateAtSubscriptionWithResponse(String remediationName, RemediationInner parameters, Context context)"
  summary: "Creates or updates a remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The remediation parameters."
    name: "parameters"
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> createOrUpdateAtSubscriptionWithResponse(String remediationName, RemediationInner parameters, Context context)"
  desc: "Creates or updates a remediation at subscription scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.delete(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.delete(String resourceGroupName, String remediationName)"
  name: "delete(String resourceGroupName, String remediationName)"
  nameWithType: "RemediationsClient.delete(String resourceGroupName, String remediationName)"
  summary: "Deletes an existing remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner delete(String resourceGroupName, String remediationName)"
  desc: "Deletes an existing remediation at resource group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtManagementGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtManagementGroup(String managementGroupId, String remediationName)"
  name: "deleteAtManagementGroup(String managementGroupId, String remediationName)"
  nameWithType: "RemediationsClient.deleteAtManagementGroup(String managementGroupId, String remediationName)"
  summary: "Deletes an existing remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner deleteAtManagementGroup(String managementGroupId, String remediationName)"
  desc: "Deletes an existing remediation at management group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtManagementGroupWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  name: "deleteAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  nameWithType: "RemediationsClient.deleteAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  summary: "Deletes an existing remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> deleteAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  desc: "Deletes an existing remediation at management group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtResource(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtResource(String resourceId, String remediationName)"
  name: "deleteAtResource(String resourceId, String remediationName)"
  nameWithType: "RemediationsClient.deleteAtResource(String resourceId, String remediationName)"
  summary: "Deletes an existing remediation at individual resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner deleteAtResource(String resourceId, String remediationName)"
  desc: "Deletes an existing remediation at individual resource scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtResourceWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  name: "deleteAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  nameWithType: "RemediationsClient.deleteAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  summary: "Deletes an existing remediation at individual resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> deleteAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  desc: "Deletes an existing remediation at individual resource scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtSubscription(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtSubscription(String remediationName)"
  name: "deleteAtSubscription(String remediationName)"
  nameWithType: "RemediationsClient.deleteAtSubscription(String remediationName)"
  summary: "Deletes an existing remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner deleteAtSubscription(String remediationName)"
  desc: "Deletes an existing remediation at subscription scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtSubscriptionWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteAtSubscriptionWithResponse(String remediationName, Context context)"
  name: "deleteAtSubscriptionWithResponse(String remediationName, Context context)"
  nameWithType: "RemediationsClient.deleteAtSubscriptionWithResponse(String remediationName, Context context)"
  summary: "Deletes an existing remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> deleteAtSubscriptionWithResponse(String remediationName, Context context)"
  desc: "Deletes an existing remediation at subscription scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.deleteWithResponse(String resourceGroupName, String remediationName, Context context)"
  name: "deleteWithResponse(String resourceGroupName, String remediationName, Context context)"
  nameWithType: "RemediationsClient.deleteWithResponse(String resourceGroupName, String remediationName, Context context)"
  summary: "Deletes an existing remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> deleteWithResponse(String resourceGroupName, String remediationName, Context context)"
  desc: "Deletes an existing remediation at resource group scope."
  returns:
    description: "the remediation definition."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtManagementGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtManagementGroup(String managementGroupId, String remediationName)"
  name: "getAtManagementGroup(String managementGroupId, String remediationName)"
  nameWithType: "RemediationsClient.getAtManagementGroup(String managementGroupId, String remediationName)"
  summary: "Gets an existing remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner getAtManagementGroup(String managementGroupId, String remediationName)"
  desc: "Gets an existing remediation at management group scope."
  returns:
    description: "an existing remediation at management group scope."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtManagementGroupWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  name: "getAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  nameWithType: "RemediationsClient.getAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  summary: "Gets an existing remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> getAtManagementGroupWithResponse(String managementGroupId, String remediationName, Context context)"
  desc: "Gets an existing remediation at management group scope."
  returns:
    description: "an existing remediation at management group scope."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtResource(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtResource(String resourceId, String remediationName)"
  name: "getAtResource(String resourceId, String remediationName)"
  nameWithType: "RemediationsClient.getAtResource(String resourceId, String remediationName)"
  summary: "Gets an existing remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner getAtResource(String resourceId, String remediationName)"
  desc: "Gets an existing remediation at resource scope."
  returns:
    description: "an existing remediation at resource scope."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtResourceWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  name: "getAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  nameWithType: "RemediationsClient.getAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  summary: "Gets an existing remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> getAtResourceWithResponse(String resourceId, String remediationName, Context context)"
  desc: "Gets an existing remediation at resource scope."
  returns:
    description: "an existing remediation at resource scope."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtSubscription(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtSubscription(String remediationName)"
  name: "getAtSubscription(String remediationName)"
  nameWithType: "RemediationsClient.getAtSubscription(String remediationName)"
  summary: "Gets an existing remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner getAtSubscription(String remediationName)"
  desc: "Gets an existing remediation at subscription scope."
  returns:
    description: "an existing remediation at subscription scope."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtSubscriptionWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getAtSubscriptionWithResponse(String remediationName, Context context)"
  name: "getAtSubscriptionWithResponse(String remediationName, Context context)"
  nameWithType: "RemediationsClient.getAtSubscriptionWithResponse(String remediationName, Context context)"
  summary: "Gets an existing remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> getAtSubscriptionWithResponse(String remediationName, Context context)"
  desc: "Gets an existing remediation at subscription scope."
  returns:
    description: "an existing remediation at subscription scope."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getByResourceGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getByResourceGroup(String resourceGroupName, String remediationName)"
  name: "getByResourceGroup(String resourceGroupName, String remediationName)"
  nameWithType: "RemediationsClient.getByResourceGroup(String resourceGroupName, String remediationName)"
  summary: "Gets an existing remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract RemediationInner getByResourceGroup(String resourceGroupName, String remediationName)"
  desc: "Gets an existing remediation at resource group scope."
  returns:
    description: "an existing remediation at resource group scope."
    type: "<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getByResourceGroupWithResponse(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.getByResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  name: "getByResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  nameWithType: "RemediationsClient.getByResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  summary: "Gets an existing remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Response<RemediationInner> getByResourceGroupWithResponse(String resourceGroupName, String remediationName, Context context)"
  desc: "Gets an existing remediation at resource group scope."
  returns:
    description: "an existing remediation at resource group scope."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.list()"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.list()"
  name: "list()"
  nameWithType: "RemediationsClient.list()"
  summary: "Gets all remediations for the subscription."
  modifiers:
  - "abstract"
  syntax: "public abstract PagedIterable<RemediationInner> list()"
  desc: "Gets all remediations for the subscription."
  returns:
    description: "all remediations for the subscription."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.list(java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.list(Integer top, String filter, Context context)"
  name: "list(Integer top, String filter, Context context)"
  nameWithType: "RemediationsClient.list(Integer top, String filter, Context context)"
  summary: "Gets all remediations for the subscription."
  modifiers:
  - "abstract"
  parameters:
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "OData filter expression."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> list(Integer top, String filter, Context context)"
  desc: "Gets all remediations for the subscription."
  returns:
    description: "all remediations for the subscription."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listByResourceGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listByResourceGroup(String resourceGroupName)"
  name: "listByResourceGroup(String resourceGroupName)"
  nameWithType: "RemediationsClient.listByResourceGroup(String resourceGroupName)"
  summary: "Gets all remediations for the subscription."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> listByResourceGroup(String resourceGroupName)"
  desc: "Gets all remediations for the subscription."
  returns:
    description: "all remediations for the subscription."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listByResourceGroup(java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listByResourceGroup(String resourceGroupName, Integer top, String filter, Context context)"
  name: "listByResourceGroup(String resourceGroupName, Integer top, String filter, Context context)"
  nameWithType: "RemediationsClient.listByResourceGroup(String resourceGroupName, Integer top, String filter, Context context)"
  summary: "Gets all remediations for the subscription."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "OData filter expression."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> listByResourceGroup(String resourceGroupName, Integer top, String filter, Context context)"
  desc: "Gets all remediations for the subscription."
  returns:
    description: "all remediations for the subscription."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtManagementGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtManagementGroup(String managementGroupId, String remediationName)"
  name: "listDeploymentsAtManagementGroup(String managementGroupId, String remediationName)"
  nameWithType: "RemediationsClient.listDeploymentsAtManagementGroup(String managementGroupId, String remediationName)"
  summary: "Gets all deployments for a remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtManagementGroup(String managementGroupId, String remediationName)"
  desc: "Gets all deployments for a remediation at management group scope."
  returns:
    description: "all deployments for a remediation at management group scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtManagementGroup(java.lang.String,java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtManagementGroup(String managementGroupId, String remediationName, Integer top, Context context)"
  name: "listDeploymentsAtManagementGroup(String managementGroupId, String remediationName, Integer top, Context context)"
  nameWithType: "RemediationsClient.listDeploymentsAtManagementGroup(String managementGroupId, String remediationName, Integer top, Context context)"
  summary: "Gets all deployments for a remediation at management group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtManagementGroup(String managementGroupId, String remediationName, Integer top, Context context)"
  desc: "Gets all deployments for a remediation at management group scope."
  returns:
    description: "all deployments for a remediation at management group scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResource(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResource(String resourceId, String remediationName)"
  name: "listDeploymentsAtResource(String resourceId, String remediationName)"
  nameWithType: "RemediationsClient.listDeploymentsAtResource(String resourceId, String remediationName)"
  summary: "Gets all deployments for a remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtResource(String resourceId, String remediationName)"
  desc: "Gets all deployments for a remediation at resource scope."
  returns:
    description: "all deployments for a remediation at resource scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResource(java.lang.String,java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResource(String resourceId, String remediationName, Integer top, Context context)"
  name: "listDeploymentsAtResource(String resourceId, String remediationName, Integer top, Context context)"
  nameWithType: "RemediationsClient.listDeploymentsAtResource(String resourceId, String remediationName, Integer top, Context context)"
  summary: "Gets all deployments for a remediation at resource scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtResource(String resourceId, String remediationName, Integer top, Context context)"
  desc: "Gets all deployments for a remediation at resource scope."
  returns:
    description: "all deployments for a remediation at resource scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResourceGroup(java.lang.String,java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName)"
  name: "listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName)"
  nameWithType: "RemediationsClient.listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName)"
  summary: "Gets all deployments for a remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName)"
  desc: "Gets all deployments for a remediation at resource group scope."
  returns:
    description: "all deployments for a remediation at resource group scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResourceGroup(java.lang.String,java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName, Integer top, Context context)"
  name: "listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName, Integer top, Context context)"
  nameWithType: "RemediationsClient.listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName, Integer top, Context context)"
  summary: "Gets all deployments for a remediation at resource group scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource group name."
    name: "resourceGroupName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtResourceGroup(String resourceGroupName, String remediationName, Integer top, Context context)"
  desc: "Gets all deployments for a remediation at resource group scope."
  returns:
    description: "all deployments for a remediation at resource group scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtSubscription(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtSubscription(String remediationName)"
  name: "listDeploymentsAtSubscription(String remediationName)"
  nameWithType: "RemediationsClient.listDeploymentsAtSubscription(String remediationName)"
  summary: "Gets all deployments for a remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtSubscription(String remediationName)"
  desc: "Gets all deployments for a remediation at subscription scope."
  returns:
    description: "all deployments for a remediation at subscription scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtSubscription(java.lang.String,java.lang.Integer,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listDeploymentsAtSubscription(String remediationName, Integer top, Context context)"
  name: "listDeploymentsAtSubscription(String remediationName, Integer top, Context context)"
  nameWithType: "RemediationsClient.listDeploymentsAtSubscription(String remediationName, Integer top, Context context)"
  summary: "Gets all deployments for a remediation at subscription scope."
  modifiers:
  - "abstract"
  parameters:
  - description: "The name of the remediation."
    name: "remediationName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationDeploymentInner> listDeploymentsAtSubscription(String remediationName, Integer top, Context context)"
  desc: "Gets all deployments for a remediation at subscription scope."
  returns:
    description: "all deployments for a remediation at subscription scope."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationDeploymentInner&text=RemediationDeploymentInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForManagementGroup(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForManagementGroup(String managementGroupId)"
  name: "listForManagementGroup(String managementGroupId)"
  nameWithType: "RemediationsClient.listForManagementGroup(String managementGroupId)"
  summary: "Gets all remediations for the management group."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> listForManagementGroup(String managementGroupId)"
  desc: "Gets all remediations for the management group."
  returns:
    description: "all remediations for the management group."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForManagementGroup(java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForManagementGroup(String managementGroupId, Integer top, String filter, Context context)"
  name: "listForManagementGroup(String managementGroupId, Integer top, String filter, Context context)"
  nameWithType: "RemediationsClient.listForManagementGroup(String managementGroupId, Integer top, String filter, Context context)"
  summary: "Gets all remediations for the management group."
  modifiers:
  - "abstract"
  parameters:
  - description: "Management group ID."
    name: "managementGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "OData filter expression."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> listForManagementGroup(String managementGroupId, Integer top, String filter, Context context)"
  desc: "Gets all remediations for the management group."
  returns:
    description: "all remediations for the management group."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForResource(java.lang.String)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForResource(String resourceId)"
  name: "listForResource(String resourceId)"
  nameWithType: "RemediationsClient.listForResource(String resourceId)"
  summary: "Gets all remediations for a resource."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> listForResource(String resourceId)"
  desc: "Gets all remediations for a resource."
  returns:
    description: "all remediations for a resource."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForResource(java.lang.String,java.lang.Integer,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.policyinsights.fluent.RemediationsClient.listForResource(String resourceId, Integer top, String filter, Context context)"
  name: "listForResource(String resourceId, Integer top, String filter, Context context)"
  nameWithType: "RemediationsClient.listForResource(String resourceId, Integer top, String filter, Context context)"
  summary: "Gets all remediations for a resource."
  modifiers:
  - "abstract"
  parameters:
  - description: "Resource ID."
    name: "resourceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Maximum number of records to return."
    name: "top"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "OData filter expression."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract PagedIterable<RemediationInner> listForResource(String resourceId, Integer top, String filter, Context context)"
  desc: "Gets all remediations for a resource."
  returns:
    description: "all remediations for a resource."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner?alt=com.azure.resourcemanager.policyinsights.fluent.models.RemediationInner&text=RemediationInner\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in RemediationsClient."
metadata: {}
package: "com.azure.resourcemanager.policyinsights.fluent"
artifact: com.azure.resourcemanager:azure-resourcemanager-policyinsights:1.0.0-beta.2
