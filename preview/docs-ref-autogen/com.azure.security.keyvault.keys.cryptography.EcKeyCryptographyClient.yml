### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  id: "EcKeyCryptographyClient"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient(com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient(com.azure.security.keyvault.keys.models.JsonWebKey,com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  langs:
  - "java"
  name: "EcKeyCryptographyClient"
  nameWithType: "EcKeyCryptographyClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " class EcKeyCryptographyClient extends LocalKeyCryptographyClient"
  inheritance:
  - "java.lang.Object"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient"
  inheritedMembers:
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.signDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.verifyDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient(com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  id: "EcKeyCryptographyClient(com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "EcKeyCryptographyClient(CryptographyServiceClient serviceClient)"
  nameWithType: "EcKeyCryptographyClient.EcKeyCryptographyClient(CryptographyServiceClient serviceClient)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient(CryptographyServiceClient serviceClient)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  summary: "Creates a EcKeyCryptographyClient that uses `service` to service requests"
  syntax:
    content: " EcKeyCryptographyClient(CryptographyServiceClient serviceClient)"
    parameters:
    - id: "serviceClient"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
      description: "the client to use for service side cryptography operations."
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient(com.azure.security.keyvault.keys.models.JsonWebKey,com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  id: "EcKeyCryptographyClient(com.azure.security.keyvault.keys.models.JsonWebKey,com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "EcKeyCryptographyClient(JsonWebKey key, CryptographyServiceClient serviceClient)"
  nameWithType: "EcKeyCryptographyClient.EcKeyCryptographyClient(JsonWebKey key, CryptographyServiceClient serviceClient)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient(JsonWebKey key, CryptographyServiceClient serviceClient)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " EcKeyCryptographyClient(JsonWebKey key, CryptographyServiceClient serviceClient)"
    parameters:
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    - id: "serviceClient"
      type: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "decryptAsync(EncryptionAlgorithm algorithm, byte[] cipherText, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.decryptAsync(EncryptionAlgorithm algorithm, byte[] cipherText, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.decryptAsync(EncryptionAlgorithm algorithm, byte[] cipherText, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.decryptAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<DecryptResult> decryptAsync(EncryptionAlgorithm algorithm, byte[] cipherText, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
    - id: "cipherText"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.encryptAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<EncryptResult> encryptAsync(EncryptionAlgorithm algorithm, byte[] plaintext, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
    - id: "plaintext"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "signAsync(SignatureAlgorithm algorithm, byte[] digest, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.signAsync(SignatureAlgorithm algorithm, byte[] digest, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signAsync(SignatureAlgorithm algorithm, byte[] digest, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<SignResult> signAsync(SignatureAlgorithm algorithm, byte[] digest, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "digest"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "signDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "signDataAsync(SignatureAlgorithm algorithm, byte[] data, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.signDataAsync(SignatureAlgorithm algorithm, byte[] data, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signDataAsync(SignatureAlgorithm algorithm, byte[] data, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signDataAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<SignResult> signDataAsync(SignatureAlgorithm algorithm, byte[] data, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "data"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.unwrapKeyAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<UnwrapResult> unwrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] encryptedKey, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
    - id: "encryptedKey"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<VerifyResult> verifyAsync(SignatureAlgorithm algorithm, byte[] digest, byte[] signature, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "digest"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "verifyDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "verifyDataAsync(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context, JsonWebKey key)"
  nameWithType: "EcKeyCryptographyClient.verifyDataAsync(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context, JsonWebKey key)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyDataAsync(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context, JsonWebKey key)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyDataAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<VerifyResult> verifyDataAsync(SignatureAlgorithm algorithm, byte[] data, byte[] signature, Context context, JsonWebKey key)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
    - id: "data"
      type: "byte[]"
    - id: "signature"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "key"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  id: "wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  parent: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient"
  langs:
  - "java"
  name: "wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key, Context context, JsonWebKey webKey)"
  nameWithType: "EcKeyCryptographyClient.wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key, Context context, JsonWebKey webKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key, Context context, JsonWebKey webKey)"
  overload: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.wrapKeyAsync*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: " Mono<WrapResult> wrapKeyAsync(KeyWrapAlgorithm algorithm, byte[] key, Context context, JsonWebKey webKey)"
    parameters:
    - id: "algorithm"
      type: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
    - id: "key"
      type: "byte[]"
    - id: "context"
      type: "com.azure.core.util.Context"
    - id: "webKey"
      type: "com.azure.security.keyvault.keys.models.JsonWebKey"
    return:
      type: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
references:
- uid: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
  name: "CryptographyServiceClient"
  nameWithType: "CryptographyServiceClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.CryptographyServiceClient"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient*"
  name: "EcKeyCryptographyClient"
  nameWithType: "EcKeyCryptographyClient.EcKeyCryptographyClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.EcKeyCryptographyClient"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.models.JsonWebKey"
  name: "JsonWebKey"
  nameWithType: "JsonWebKey"
  fullName: "com.azure.security.keyvault.keys.models.JsonWebKey"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
  name: "EncryptionAlgorithm"
  nameWithType: "EncryptionAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "com.azure.core.util.Context"
  spec.java:
  - uid: "com.azure.core.util.Context"
    name: "Context"
    fullName: "com.azure.core.util.Context"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.EncryptResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
    name: "EncryptResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.encryptAsync*"
  name: "encryptAsync"
  nameWithType: "EcKeyCryptographyClient.encryptAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.encryptAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.DecryptResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
    name: "DecryptResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.decryptAsync*"
  name: "decryptAsync"
  nameWithType: "EcKeyCryptographyClient.decryptAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.decryptAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
  name: "SignatureAlgorithm"
  nameWithType: "SignatureAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.SignResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
    name: "SignResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signAsync*"
  name: "signAsync"
  nameWithType: "EcKeyCryptographyClient.signAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.VerifyResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
    name: "VerifyResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyAsync*"
  name: "verifyAsync"
  nameWithType: "EcKeyCryptographyClient.verifyAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
  name: "KeyWrapAlgorithm"
  nameWithType: "KeyWrapAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.WrapResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
    name: "WrapResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.wrapKeyAsync*"
  name: "wrapKeyAsync"
  nameWithType: "EcKeyCryptographyClient.wrapKeyAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.wrapKeyAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "reactor.core.publisher.Mono<com.azure.security.keyvault.keys.cryptography.models.UnwrapResult>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
    name: "UnwrapResult"
    fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  - name: ">"
    fullName: ">"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.unwrapKeyAsync*"
  name: "unwrapKeyAsync"
  nameWithType: "EcKeyCryptographyClient.unwrapKeyAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.unwrapKeyAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signDataAsync*"
  name: "signDataAsync"
  nameWithType: "EcKeyCryptographyClient.signDataAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.signDataAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyDataAsync*"
  name: "verifyDataAsync"
  nameWithType: "EcKeyCryptographyClient.verifyDataAsync"
  fullName: "com.azure.security.keyvault.keys.cryptography.EcKeyCryptographyClient.verifyDataAsync"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient"
  name: "LocalKeyCryptographyClient"
  nameWithType: "LocalKeyCryptographyClient"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.encryptAsync(EncryptionAlgorithm,byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.encryptAsync(EncryptionAlgorithm,byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.encryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.unwrapKeyAsync(KeyWrapAlgorithm,byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.unwrapKeyAsync(KeyWrapAlgorithm,byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.unwrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.verifyDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.verifyDataAsync(SignatureAlgorithm,byte[],byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.verifyDataAsync(SignatureAlgorithm,byte[],byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.verifyDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.decryptAsync(EncryptionAlgorithm,byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.decryptAsync(EncryptionAlgorithm,byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.decryptAsync(com.azure.security.keyvault.keys.cryptography.models.EncryptionAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.wrapKeyAsync(KeyWrapAlgorithm,byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.wrapKeyAsync(KeyWrapAlgorithm,byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.wrapKeyAsync(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.signDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.signDataAsync(SignatureAlgorithm,byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.signDataAsync(SignatureAlgorithm,byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.signDataAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.signAsync(SignatureAlgorithm,byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.signAsync(SignatureAlgorithm,byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.signAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
  name: "LocalKeyCryptographyClient.verifyAsync(SignatureAlgorithm,byte[],byte[],Context,JsonWebKey)"
  nameWithType: "LocalKeyCryptographyClient.verifyAsync(SignatureAlgorithm,byte[],byte[],Context,JsonWebKey)"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalKeyCryptographyClient.verifyAsync(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[],byte[],com.azure.core.util.Context,com.azure.security.keyvault.keys.models.JsonWebKey)"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
  name: "EncryptResult"
  nameWithType: "EncryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.EncryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
  name: "DecryptResult"
  nameWithType: "DecryptResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.DecryptResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
  name: "SignResult"
  nameWithType: "SignResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.SignResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
  name: "VerifyResult"
  nameWithType: "VerifyResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.VerifyResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
  name: "WrapResult"
  nameWithType: "WrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.WrapResult"
- uid: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
  name: "UnwrapResult"
  nameWithType: "UnwrapResult"
  fullName: "com.azure.security.keyvault.keys.cryptography.models.UnwrapResult"
