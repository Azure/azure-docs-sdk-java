### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Splitter.on*"
fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.on"
name: "on"
nameWithType: "Splitter.on"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.on(char)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.on(char separator)"
  name: "on(char separator)"
  nameWithType: "Splitter.on(char separator)"
  summary: "Returns a splitter that uses the given single-character separator. For example, `Splitter.on(',').split(\"foo,,bar\")` returns an iterable containing `[\"foo\", \"\", \"bar\"]`."
  parameters:
  - description: "the character to recognize as a separator"
    name: "separator"
    type: "<xref href=\"char?alt=char&text=char\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Splitter on(char separator)"
  returns:
    description: "a splitter, with default settings, that recognizes that separator"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.on(com.azure.cosmos.implementation.guava25.base.CharMatcher)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.on(CharMatcher separatorMatcher)"
  name: "on(CharMatcher separatorMatcher)"
  nameWithType: "Splitter.on(CharMatcher separatorMatcher)"
  summary: "Returns a splitter that considers any single character matched by the given `CharMatcher` to be a separator. For example, `Splitter.on(CharMatcher.anyOf(\";,\")).split(\"foo,;bar,quux\")` returns an iterable containing `[\"foo\", \"\", \"bar\", \"quux\"]`."
  parameters:
  - description: "a <xref uid=\"com.azure.cosmos.implementation.guava25.base.CharMatcher\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharMatcher\"></xref> that determines whether a character is a\n     separator"
    name: "separatorMatcher"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.CharMatcher?alt=com.azure.cosmos.implementation.guava25.base.CharMatcher&text=CharMatcher\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Splitter on(CharMatcher separatorMatcher)"
  returns:
    description: "a splitter, with default settings, that uses this matcher"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.on(java.lang.String)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.on(String separator)"
  name: "on(String separator)"
  nameWithType: "Splitter.on(String separator)"
  summary: "Returns a splitter that uses the given fixed string as a separator. For example, `Splitter.on(\", \").split(\"foo, bar,baz\")` returns an iterable containing `[\"foo\", \"bar,baz\"]`."
  parameters:
  - description: "the literal, nonempty string to recognize as a separator"
    name: "separator"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Splitter on(String separator)"
  returns:
    description: "a splitter, with default settings, that recognizes that separator"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.on(java.util.regex.Pattern)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.on(Pattern separatorPattern)"
  name: "on(Pattern separatorPattern)"
  nameWithType: "Splitter.on(Pattern separatorPattern)"
  summary: "Returns a splitter that considers any subsequence matching `pattern` to be a separator. For example, `Splitter.on(Pattern.compile(\"\\r?\\n\")).split(entireFile)` splits a string into lines whether it uses DOS-style or UNIX-style line terminators."
  parameters:
  - description: "the pattern that determines whether a subsequence is a separator. This\n     pattern may not match the empty string."
    name: "separatorPattern"
    type: "<xref href=\"java.util.regex.Pattern?alt=java.util.regex.Pattern&text=Pattern\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Splitter on(Pattern separatorPattern)"
  returns:
    description: "a splitter, with default settings, that uses this pattern"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
