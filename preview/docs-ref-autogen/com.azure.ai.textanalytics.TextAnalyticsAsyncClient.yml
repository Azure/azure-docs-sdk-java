### YamlMime:ManagedReference
items:
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  id: TextAnalyticsAsyncClient
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics
  children:
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint()
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage()
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getServiceVersion()
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  langs:
  - java
  name: TextAnalyticsAsyncClient
  nameWithType: TextAnalyticsAsyncClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  type: Class
  package: com.azure.ai.textanalytics
  summary: >-
    This class provides an asynchronous client that contains all the operations that apply to Azure Text Analytics. Operations allowed by the client are language detection, entities recognition, linked entities recognition, key phrases extraction, and sentiment analysis of a document or a list of documents.


    **Instantiating an asynchronous Text Analytics Client**


    ```java

    TextAnalyticsAsyncClient textAnalyticsAsyncClient = new TextAnalyticsClientBuilder()
         .apiKey(new AzureKeyCredential("{api_key}"))
         .endpoint("{endpoint}")
         .buildAsyncClient();
    ```


    View <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder</xref> for additional ways to construct the client.
  syntax:
    content: public final class TextAnalyticsAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient(com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl,com.azure.ai.textanalytics.TextAnalyticsServiceVersion,java.lang.String,java.lang.String)
  id: TextAnalyticsAsyncClient(com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl,com.azure.ai.textanalytics.TextAnalyticsServiceVersion,java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)
  nameWithType: TextAnalyticsAsyncClient.TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient*
  type: Constructor
  package: com.azure.ai.textanalytics
  summary: Create a <xref uid="com.azure.ai.textanalytics.TextAnalyticsAsyncClient" data-throw-if-not-resolved="false">TextAnalyticsAsyncClient</xref> that sends requests to the Text Analytics services's endpoint. Each service call goes through the <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " TextAnalyticsAsyncClient(TextAnalyticsClientImpl service, TextAnalyticsServiceVersion serviceVersion, String defaultCountryHint, String defaultLanguage)"
    parameters:
    - id: service
      type: com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl
      description: The proxy service used to perform REST calls.
    - id: serviceVersion
      type: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
      description: The versions of Azure Text Analytics supported by this client library.
    - id: defaultCountryHint
      type: java.lang.String
      description: The default country hint.
    - id: defaultLanguage
      type: java.lang.String
      description: The default language.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String)
  id: analyzeSentiment(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentiment(String document)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentiment(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\nAnalyze sentiment in a list of documents. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nString document = \"The hotel was dark and unclean.\";\n textAnalyticsAsyncClient.analyzeSentiment(document).subscribe(documentSentiment -> {\n     System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n \n     for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n         System.out.printf(\n             \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n             sentenceSentiment.getSentiment(),\n             sentenceSentiment.getConfidenceScores().getPositive(),\n             sentenceSentiment.getConfidenceScores().getNeutral(),\n             sentenceSentiment.getConfidenceScores().getNegative());\n     }\n });\n```"
  syntax:
    content: public Mono<DocumentSentiment> analyzeSentiment(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DocumentSentiment>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains the <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(java.lang.String,java.lang.String)
  id: analyzeSentiment(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentiment(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentiment(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of documents. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nString document = \"The hotel was dark and unclean.\";\n textAnalyticsAsyncClient.analyzeSentiment(document, \"en\")\n     .subscribe(documentSentiment -> {\n         System.out.printf(\"Recognized sentiment label: %s.%n\", documentSentiment.getSentiment());\n \n         for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n             System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n                     + \"negative score: %.2f.%n\",\n                 sentenceSentiment.getSentiment(),\n                 sentenceSentiment.getConfidenceScores().getPositive(),\n                 sentenceSentiment.getConfidenceScores().getNeutral(),\n                 sentenceSentiment.getConfidenceScores().getNegative());\n         }\n     });\n```"
  syntax:
    content: public Mono<DocumentSentiment> analyzeSentiment(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DocumentSentiment>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains the <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"The hotel was dark and unclean.\"),\n     new TextDocumentInput(\"1\", \"The restaurant had amazing gnocchi.\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(textDocumentInputs1, requestOptions).byPage()\n     .subscribe(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(),\n             batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n             documentSentiment.getSentences().forEach(sentenceSentiment ->\n                 System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, \"\n                         + \"neutral score: %.2f, negative score: %.2f.%n\",\n                     sentenceSentiment.getSentiment(),\n                     sentenceSentiment.getConfidenceScores().getPositive(),\n                     sentenceSentiment.getConfidenceScores().getNeutral(),\n                     sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref>  to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed text sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\nAnalyze sentiment in a list of documents. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean.\", \"The restaurant had amazing gnocchi.\");\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(documents).byPage().subscribe(response -> {\n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     response.getElements().forEach(analyzeSentimentResult -> {\n         System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n         DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n         System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n         documentSentiment.getSentences().forEach(sentenceSentiment ->\n             System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n                     + \"negative score: %.2f.%n\",\n                 sentenceSentiment.getSentiment(),\n                 sentenceSentiment.getConfidenceScores().getPositive(),\n                 sentenceSentiment.getConfidenceScores().getNeutral(),\n                 sentenceSentiment.getConfidenceScores().getNegative()));\n     });\n });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed text sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of documents with provided language code. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean.\",\n     \"The restaurant had amazing gnocchi.\"\n );\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\").byPage().subscribe(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n             documentSentiment.getSentences().forEach(sentenceSentiment ->\n                 System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, \"\n                         + \"neutral score: %.2f, negative score: %.2f.%n\",\n                     sentenceSentiment.getSentiment(),\n                     sentenceSentiment.getConfidenceScores().getPositive(),\n                     sentenceSentiment.getConfidenceScores().getNeutral(),\n                     sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed text sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of documents with provided language code and request options. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean.\",\n     \"The restaurant had amazing gnocchi.\"\n );\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", null).byPage().subscribe(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n             documentSentiment.getSentences().forEach(sentenceSentiment ->\n                 System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, \"\n                         + \"neutral score: %.2f, negative score: %.2f.%n\",\n                     sentenceSentiment.getSentiment(),\n                     sentenceSentiment.getConfidenceScores().getPositive(),\n                     sentenceSentiment.getConfidenceScores().getNeutral(),\n                     sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed text sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String)
  id: detectLanguage(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguage(String document)
  nameWithType: TextAnalyticsAsyncClient.detectLanguage(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true. This method will use the default country hint that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultCountryHint(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultCountryHint(String)</xref>. If none is specified, service will use 'US' as the country hint.


    **Code sample**


    Detects language in a document. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    String document = "Bonjour tout le monde";
     textAnalyticsAsyncClient.detectLanguage(document).subscribe(detectedLanguage ->
         System.out.printf("Detected language name: %s, ISO 6391 Name: %s, score: %f.%n",
             detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore()));
    ```
  syntax:
    content: public Mono<DetectedLanguage> detectLanguage(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DetectedLanguage>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(java.lang.String,java.lang.String)
  id: detectLanguage(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguage(String document, String countryHint)
  nameWithType: TextAnalyticsAsyncClient.detectLanguage(String document, String countryHint)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage(String document, String countryHint)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a <xref uid="" data-throw-if-not-resolved="false">Response</xref> contains the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true.


    **Code sample**


    Detects language with http response in a document with a provided country hint. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    String document = "This text is in English";
     String countryHint = "US";
     textAnalyticsAsyncClient.detectLanguage(document, countryHint).subscribe(detectedLanguage ->
         System.out.printf("Detected language name: %s, ISO 6391 Name: %s, score: %f.%n",
             detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore()));
    ```
  syntax:
    content: public Mono<DetectedLanguage> detectLanguage(String document, String countryHint)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    return:
      type: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DetectedLanguage>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> contains a <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: detectLanguageBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns the detected language for a batch of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code sample**\n\nDetects language in a batch of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. Subscribes to the call asynchronously and prints out the detected language details when a response is received.\n\n```java\nList<DetectLanguageInput> detectLanguageInputs1 = Arrays.asList(\n     new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n     new DetectLanguageInput(\"2\", \"Este es un documento  escrito en Espa�ol.\", \"ES\")\n );\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.detectLanguageBatch(detectLanguageInputs1, requestOptions).byPage()\n     .subscribe(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch result of languages\n         for (DetectLanguageResult detectLanguageResult : response.getElements()) {\n             DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n             System.out.printf(\"Detected language name: %s, ISO 6391 Name: %s, score: %f.%n\",\n                 detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n         }\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<DetectLanguageResult> detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
      description: >-
        The list of <xref uid="com.azure.ai.textanalytics.models.DetectLanguageInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language for each of documents. This method will use the default country hint that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultCountryHint(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultCountryHint(String)</xref>. If none is specified, service will use 'US' as the country hint.


    **Code sample**


    Detects language in a list of documents. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    final List<String> documents = Arrays.asList(
         "This is written in English", "Este es un documento  escrito en Espa�ol.");
     textAnalyticsAsyncClient.detectLanguageBatch(documents).byPage().subscribe(batchResult -> {
         // Batch statistics
         final TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();
         System.out.printf("Batch statistics, transaction count: %s, valid document count: %s.%n",
             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());
         // Batch result of languages
         for (DetectLanguageResult detectLanguageResult : batchResult.getElements()) {
             DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();
             System.out.printf("Detected language name: %s, ISO 6391 Name: %s, score: %f.%n",
                 detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());
         }
     });
    ```
  syntax:
    content: public TextAnalyticsPagedFlux<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents, String countryHint)
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents, String countryHint)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents, String countryHint)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language for each of documents with the provided country hint.


    **Code sample**


    Detects language in a list of documents with a provided country hint for the batch. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    List<String> documents = Arrays.asList(
         "This is written in English",
         "Este es un documento  escrito en Espa�ol."
     );
     textAnalyticsAsyncClient.detectLanguageBatch(documents, "US").byPage().subscribe(
         batchResult -> {
             // Batch statistics
             TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();
             System.out.printf("Batch statistics, transaction count: %s, valid document count: %s.%n",
                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());
             // Batch result of languages
             for (DetectLanguageResult detectLanguageResult : batchResult.getElements()) {
                 DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();
                 System.out.printf("Detected language name: %s, ISO 6391 Name: %s, score: %f.%n",
                     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());
             }
         });
    ```
  syntax:
    content: public TextAnalyticsPagedFlux<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents, String countryHint)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language for each of documents with the provided country hint and request option.


    **Code sample**


    Detects language in a list of documents with a provided country hint and request option for the batch. Subscribes to the call asynchronously and prints out the detected language details when a response is received.


    ```java

    List<String> documents = Arrays.asList(
         "This is written in English",
         "Este es un documento  escrito en Espa�ol."
     );
     textAnalyticsAsyncClient.detectLanguageBatch(documents, "US", null).byPage().subscribe(
         batchResult -> {
             // Batch statistics
             TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();
             System.out.printf("Batch statistics, transaction count: %s, valid document count: %s.%n",
                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());
             // Batch result of languages
             for (DetectLanguageResult detectLanguageResult : batchResult.getElements()) {
                 DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();
                 System.out.printf("Detected language name: %s, ISO 6391 Name: %s, score: %f.%n",
                     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());
             }
         });
    ```
  syntax:
    content: public TextAnalyticsPagedFlux<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String)
  id: extractKeyPhrases(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrases(String document)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrases(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    Extract key phrases in a document. Subscribes to the call asynchronously and prints out the key phrases when a response is received.


    ```java

    System.out.println("Extracted phrases:");
     textAnalyticsAsyncClient.extractKeyPhrases("Bonjour tout le monde").subscribe(keyPhrase ->
         System.out.printf("%s.%n", keyPhrase));
    ```
  syntax:
    content: public TextAnalyticsPagedFlux<String> extractKeyPhrases(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<java.lang.String>
      description: A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of extracted key phrases.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(java.lang.String,java.lang.String)
  id: extractKeyPhrases(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrases(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrases(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. See [this][] for the list of enabled languages.


    Extract key phrases in a document with a provided language code. Subscribes to the call asynchronously and prints out the key phrases when a response is received.


    ```java

    System.out.println("Extracted phrases:");
     textAnalyticsAsyncClient.extractKeyPhrases("Bonjour tout le monde", "fr")
         .subscribe(keyPhrase -> System.out.printf("%s.%n", keyPhrase));
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedFlux<String> extractKeyPhrases(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed. For text length limits, maximum batch size, and supported text
         encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<java.lang.String>
      description: A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of extracted key phrases.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: extractKeyPhrasesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document with provided request options. See [this][] for the list of enabled languages.\n\nExtract key phrases in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. Subscribes to the call asynchronously and prints out the key phrases when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n     new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.extractKeyPhrasesBatch(textDocumentInputs1, requestOptions).byPage()\n     .subscribe(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         for (ExtractKeyPhraseResult extractKeyPhraseResult : response.getElements()) {\n             System.out.println(\"Extracted phrases:\");\n             for (String keyPhrase : extractKeyPhraseResult.getKeyPhrases()) {\n                 System.out.printf(\"%s.%n\", keyPhrase);\n             }\n         }\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref>  to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\nExtract key phrases in a list of documents. Subscribes to the call asynchronously and prints out the key phrases when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Hello world. This is some input text that I love.\",\n     \"Bonjour tout le monde\");\n \n textAnalyticsAsyncClient.extractKeyPhrasesBatch(documents).byPage().subscribe(extractKeyPhraseResults -> {\n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = extractKeyPhraseResults.getStatistics();\n     System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     extractKeyPhraseResults.getElements().forEach(extractKeyPhraseResult -> {\n         System.out.println(\"Extracted phrases:\");\n         extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n     });\n });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document with provided language code. See [this][] for the list of enabled languages.\n\nExtract key phrases in a list of documents with a provided language code. Subscribes to the call asynchronously and prints out the key phrases when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Hello world. This is some input text that I love.\",\n     \"Bonjour tout le monde\");\n \n textAnalyticsAsyncClient.extractKeyPhrasesBatch(documents, \"en\").byPage().subscribe(\n     extractKeyPhraseResults -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = extractKeyPhraseResults.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         extractKeyPhraseResults.getElements().forEach(extractKeyPhraseResult -> {\n             System.out.println(\"Extracted phrases:\");\n             extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n         });\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document with provided language code and request options. See [this][] for the list of enabled languages.\n\nExtract key phrases in a list of documents with a provided language and request options. Subscribes to the call asynchronously and prints out the key phrases when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Hello world. This is some input text that I love.\",\n     \"Bonjour tout le monde\");\n \n textAnalyticsAsyncClient.extractKeyPhrasesBatch(documents, \"en\", null).byPage().subscribe(\n     extractKeyPhraseResults -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = extractKeyPhraseResults.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         extractKeyPhraseResults.getElements().forEach(extractKeyPhraseResult -> {\n             System.out.println(\"Extracted phrases:\");\n             extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n         });\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint()
  id: getDefaultCountryHint()
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: getDefaultCountryHint()
  nameWithType: TextAnalyticsAsyncClient.getDefaultCountryHint()
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint()
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default country hint code.
  syntax:
    content: public String getDefaultCountryHint()
    return:
      type: java.lang.String
      description: the default country hint code
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage()
  id: getDefaultLanguage()
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: getDefaultLanguage()
  nameWithType: TextAnalyticsAsyncClient.getDefaultLanguage()
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage()
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default language when the builder is setup.
  syntax:
    content: public String getDefaultLanguage()
    return:
      type: java.lang.String
      description: the default language
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: TextAnalyticsAsyncClient.getServiceVersion()
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getServiceVersion()
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Gets the service version the client is using.
  syntax:
    content: public TextAnalyticsServiceVersion getServiceVersion()
    return:
      type: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
      description: the service version the client is using.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String)
  id: recognizeEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntities(String document)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of general categorized entities in the provided document. For a list of supported entity types, check: [this][]. For a list of enabled languages, check: [this][this 1]. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code sample**


    Recognize entities in a document. Subscribes to the call asynchronously and prints out the recognized entity details when a response is received.


    ```java

    String document = "Satya Nadella is the CEO of Microsoft";
     textAnalyticsAsyncClient.recognizeEntities(document)
         .subscribe(entity -> System.out.printf("Recognized categorized entity: %s, category: %s, score: %f.%n",
             entity.getText(),
             entity.getCategory(),
             entity.getConfidenceScore()));
    ```



    [this]: https://aka.ms/taner

    [this 1]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedFlux<CategorizedEntity> recognizeEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.CategorizedEntity>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.CategorizedEntity" data-throw-if-not-resolved="false">recognized categorized entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(java.lang.String,java.lang.String)
  id: recognizeEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntities(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of general categorized entities in the provided document. For a list of supported entity types, check: [this][]. For a list of enabled languages, check: [this][this 1].


    **Code sample**


    Recognize entities in a document with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.


    ```java

    String document = "Satya Nadella is the CEO of Microsoft";
     textAnalyticsAsyncClient.recognizeEntities(document, "en")
         .subscribe(entity -> System.out.printf("Recognized categorized entity: %s, category: %s, score: %f.%n",
             entity.getText(),
             entity.getCategory(),
             entity.getConfidenceScore()));
    ```



    [this]: https://aka.ms/taner

    [this 1]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedFlux<CategorizedEntity> recognizeEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        the text to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as
         default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.CategorizedEntity>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.CategorizedEntity" data-throw-if-not-resolved="false">recognized categorized entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code sample**\n\nRecognize entities in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref>. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n     new TextDocumentInput(\"1\", \"I work at Microsoft.\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.recognizeEntitiesBatch(textDocumentInputs1, requestOptions).byPage()\n     .subscribe(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n                 \"Recognized categorized entity: %s, category: %s, score: %f.%n\",\n                 entity.getText(),\n                 entity.getCategory(),\n                 entity.getConfidenceScore())));\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code sample**\n\nRecognize entities in a document. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\",\n     \"I work at Microsoft.\"\n );\n \n textAnalyticsAsyncClient.recognizeEntitiesBatch(documents).byPage().subscribe(batchResult -> {\n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n     System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n     // Batch result of categorized entities\n     batchResult.getElements().forEach(recognizeEntitiesResult ->\n         recognizeEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n             \"Recognized entity: %s, entity category: %s, entity sub-category: %s, score: %f.%n\",\n             entity.getText(), entity.getCategory(), entity.getSubCategory(), entity.getConfidenceScore())));\n });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents with provided language code.\n\n**Code sample**\n\nRecognize entities in a document with the provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n \n textAnalyticsAsyncClient.recognizeEntitiesBatch(documents, \"en\").byPage()\n     .subscribe(batchResult -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch Result of entities\n         batchResult.getElements().forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n                 \"Recognized categorized entity: %s, category: %s, score: %f.%n\",\n                 entity.getText(), entity.getCategory(), entity.getConfidenceScore())));\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as
         default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents with the provided language code and request options.\n\n**Code sample**\n\nRecognize entities in a document with the provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\", \"I work at Microsoft.\");\n \n textAnalyticsAsyncClient.recognizeEntitiesBatch(documents, \"en\", null).byPage()\n     .subscribe(batchResult -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch Result of entities\n         batchResult.getElements().forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> System.out.printf(\n                 \"Recognized categorized entity: %s, category: %s, score: %f.%n\",\n                     entity.getText(), entity.getCategory(), entity.getConfidenceScore())));\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as
         default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String)
  id: recognizeLinkedEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntities(String document)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document. See [this][] for supported languages in Text Analytics API. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    Recognize linked entities in a document. Subscribes to the call asynchronously and prints out the entity details when a response is received.


    ```java

    String document = "Old Faithful is a geyser at Yellowstone Park.";
     textAnalyticsAsyncClient.recognizeLinkedEntities(document).subscribe(linkedEntity -> {
         System.out.println("Linked Entities:");
         System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
             linkedEntity.getDataSource());
         linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(
             "Matched entity: %s, score: %f.%n", entityMatch.getText(), entityMatch.getConfidenceScore()));
     });
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedFlux<LinkedEntity> recognizeLinkedEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.LinkedEntity>
      description: A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  id: recognizeLinkedEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntities(String document, String language)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document. See [this][] for supported languages in Text Analytics API.


    Recognize linked entities in a text with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.


    ```java

    String document = "Old Faithful is a geyser at Yellowstone Park.";
     textAnalyticsAsyncClient.recognizeLinkedEntities(document, "en")
         .subscribe(linkedEntity -> {
             System.out.println("Linked Entities:");
             System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
                 linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
                 linkedEntity.getDataSource());
             linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(
                 "Matched entity: %s, score: %f.%n", entityMatch.getText(), entityMatch.getConfidenceScore()));
         });
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedFlux<LinkedEntity> recognizeLinkedEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.LinkedEntity>
      description: A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options. See [this][] supported languages in Text Analytics API.\n\nRecognize linked entities in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> and provided request options to show statistics. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<TextDocumentInput> textDocumentInputs1 = Arrays.asList(\n     new TextDocumentInput(\"0\", \"Old Faithful is a geyser at Yellowstone Park.\"),\n     new TextDocumentInput(\"1\", \"Mount Shasta has lenticular clouds.\"));\n \n // Request options: show statistics and model version\n TextAnalyticsRequestOptions requestOptions = new TextAnalyticsRequestOptions().setIncludeStatistics(true);\n \n textAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(textDocumentInputs1, requestOptions).byPage()\n     .subscribe(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, score: %.2f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents. See [this][] for supported languages in Text Analytics API. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\nRecognize linked entities in a list of documents. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n textAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(documents).byPage().subscribe(response -> {\n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     response.getElements().forEach(recognizeLinkedEntitiesResult ->\n         recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n             System.out.println(\"Linked Entities:\");\n             System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                 linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                 linkedEntity.getDataSource());\n             linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                 \"Matched entity: %s, score: %f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n         }));\n });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents with provided language code. See [this][] for supported languages in Text Analytics API.\n\nRecognize linked entities in a list of documents with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n textAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(documents, \"en\").byPage()\n     .subscribe(batchResult -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         batchResult.getElements().forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, score: %f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents with provided language code and request options. See [this][] for supported languages in Text Analytics API.\n\nRecognize linked entities in a list of documents with provided language code. Subscribes to the call asynchronously and prints out the entity details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n textAnalyticsAsyncClient.recognizeLinkedEntitiesBatch(documents, \"en\", null).byPage()\n     .subscribe(batchResult -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = batchResult.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         batchResult.getElements().forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, score: %f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedFlux<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the text. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux" data-throw-if-not-resolved="false">TextAnalyticsPagedFlux</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
references:
- uid: com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl
  name: TextAnalyticsClientImpl
  nameWithType: TextAnalyticsClientImpl
  fullName: com.azure.ai.textanalytics.implementation.TextAnalyticsClientImpl
- uid: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
  name: TextAnalyticsServiceVersion
  nameWithType: TextAnalyticsServiceVersion
  fullName: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient*
  name: TextAnalyticsAsyncClient
  nameWithType: TextAnalyticsAsyncClient.TextAnalyticsAsyncClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.TextAnalyticsAsyncClient
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint*
  name: getDefaultCountryHint
  nameWithType: TextAnalyticsAsyncClient.getDefaultCountryHint
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultCountryHint
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage*
  name: getDefaultLanguage
  nameWithType: TextAnalyticsAsyncClient.getDefaultLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getDefaultLanguage
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: TextAnalyticsAsyncClient.getServiceVersion
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.getServiceVersion
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DetectedLanguage>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectedLanguage
    name: DetectedLanguage
    fullName: com.azure.ai.textanalytics.models.DetectedLanguage
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage*
  name: detectLanguage
  nameWithType: TextAnalyticsAsyncClient.detectLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguage
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<java.lang.String>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.DetectLanguageResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectLanguageResult
    name: DetectLanguageResult
    fullName: com.azure.ai.textanalytics.models.DetectLanguageResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch*
  name: detectLanguageBatch
  nameWithType: TextAnalyticsAsyncClient.detectLanguageBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.detectLanguageBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
  name: TextAnalyticsRequestOptions
  nameWithType: TextAnalyticsRequestOptions
  fullName: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectLanguageInput
    name: DetectLanguageInput
    fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.CategorizedEntity>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.CategorizedEntity
    name: CategorizedEntity
    fullName: com.azure.ai.textanalytics.models.CategorizedEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities*
  name: recognizeEntities
  nameWithType: TextAnalyticsAsyncClient.recognizeEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntities
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
    name: RecognizeCategorizedEntitiesResult
    fullName: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch*
  name: recognizeEntitiesBatch
  nameWithType: TextAnalyticsAsyncClient.recognizeEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.TextDocumentInput
    name: TextDocumentInput
    fullName: com.azure.ai.textanalytics.models.TextDocumentInput
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.LinkedEntity>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.LinkedEntity
    name: LinkedEntity
    fullName: com.azure.ai.textanalytics.models.LinkedEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities*
  name: recognizeLinkedEntities
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntities
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
    name: RecognizeLinkedEntitiesResult
    fullName: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch*
  name: recognizeLinkedEntitiesBatch
  nameWithType: TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.recognizeLinkedEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<java.lang.String>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases*
  name: extractKeyPhrases
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrases
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrases
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
    name: ExtractKeyPhraseResult
    fullName: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch*
  name: extractKeyPhrasesBatch
  nameWithType: TextAnalyticsAsyncClient.extractKeyPhrasesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.extractKeyPhrasesBatch
  package: com.azure.ai.textanalytics
- uid: reactor.core.publisher.Mono<com.azure.ai.textanalytics.models.DocumentSentiment>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DocumentSentiment
    name: DocumentSentiment
    fullName: com.azure.ai.textanalytics.models.DocumentSentiment
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment*
  name: analyzeSentiment
  nameWithType: TextAnalyticsAsyncClient.analyzeSentiment
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentiment
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
    name: TextAnalyticsPagedFlux
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
    name: AnalyzeSentimentResult
    fullName: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*
  name: analyzeSentimentBatch
  nameWithType: TextAnalyticsAsyncClient.analyzeSentimentBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.ai.textanalytics.models.DetectedLanguage
  name: DetectedLanguage
  nameWithType: DetectedLanguage
  fullName: com.azure.ai.textanalytics.models.DetectedLanguage
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.ai.textanalytics.models.DetectLanguageResult
  name: DetectLanguageResult
  nameWithType: DetectLanguageResult
  fullName: com.azure.ai.textanalytics.models.DetectLanguageResult
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
  name: TextAnalyticsPagedFlux
  nameWithType: TextAnalyticsPagedFlux
  fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedFlux
- uid: com.azure.ai.textanalytics.models.DetectLanguageInput
  name: DetectLanguageInput
  nameWithType: DetectLanguageInput
  fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
- uid: com.azure.ai.textanalytics.models.CategorizedEntity
  name: CategorizedEntity
  nameWithType: CategorizedEntity
  fullName: com.azure.ai.textanalytics.models.CategorizedEntity
- uid: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
  name: RecognizeCategorizedEntitiesResult
  nameWithType: RecognizeCategorizedEntitiesResult
  fullName: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
- uid: com.azure.ai.textanalytics.models.TextDocumentInput
  name: TextDocumentInput
  nameWithType: TextDocumentInput
  fullName: com.azure.ai.textanalytics.models.TextDocumentInput
- uid: com.azure.ai.textanalytics.models.LinkedEntity
  name: LinkedEntity
  nameWithType: LinkedEntity
  fullName: com.azure.ai.textanalytics.models.LinkedEntity
- uid: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
  name: RecognizeLinkedEntitiesResult
  nameWithType: RecognizeLinkedEntitiesResult
  fullName: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
- uid: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
  name: ExtractKeyPhraseResult
  nameWithType: ExtractKeyPhraseResult
  fullName: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
- uid: com.azure.ai.textanalytics.models.DocumentSentiment
  name: DocumentSentiment
  nameWithType: DocumentSentiment
  fullName: com.azure.ai.textanalytics.models.DocumentSentiment
- uid: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
  name: AnalyzeSentimentResult
  nameWithType: AnalyzeSentimentResult
  fullName: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
