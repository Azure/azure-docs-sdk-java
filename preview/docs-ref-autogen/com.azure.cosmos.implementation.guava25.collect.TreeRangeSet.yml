### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  id: TreeRangeSet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.<C>create()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.<C>create(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.<C>create(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asDescendingSetOfRanges()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asRanges()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.complement()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.rangeContaining(C)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.span()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  langs:
  - java
  name: TreeRangeSet<C>
  nameWithType: TreeRangeSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: An implementation of <xref uid="com.azure.cosmos.implementation.guava25.collect.RangeSet" data-throw-if-not-resolved="false">RangeSet</xref> backed by a <xref uid="java.util.TreeMap" data-throw-if-not-resolved="false">TreeMap</xref>.
  syntax:
    content: public class TreeRangeSet<C> extends AbstractRangeSet<C> implements Serializable
    typeParameters:
    - id: C
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.contains(C)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.rangeContaining(C)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.toString()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.<C>create()
  id: <C>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: <C>create()
  nameWithType: TreeRangeSet<C>.<C>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.<C>create()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates an empty `TreeRangeSet` instance.
  syntax:
    content: public static TreeRangeSet<C> <C>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.<C>create(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  id: <C>create(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: <C>create(RangeSet<C> rangeSet)
  nameWithType: TreeRangeSet<C>.<C>create(RangeSet<C> rangeSet)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.<C>create(RangeSet<C> rangeSet)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `TreeRangeSet` initialized with the ranges in the specified range set.
  syntax:
    content: public static TreeRangeSet<C> <C>create(RangeSet<C> rangeSet)
    parameters:
    - id: rangeSet
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.<C>create(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: <C>create(java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: <C>create(Iterable<Range<C>> ranges)
  nameWithType: TreeRangeSet<C>.<C>create(Iterable<Range<C>> ranges)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.<C>create(Iterable<Range<C>> ranges)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `TreeRangeSet` representing the union of the specified ranges.


    This is the smallest `RangeSet` which encloses each of the specified ranges. An element will be contained in this `RangeSet` if and only if it is contained in at least one `Range` in `ranges`.
  syntax:
    content: public static TreeRangeSet<C> <C>create(Iterable<Range<C>> ranges)
    parameters:
    - id: ranges
      type: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.TreeRangeSet(java.util.NavigableMap<com.azure.cosmos.implementation.guava25.collect.Cut<C>,com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  id: TreeRangeSet(java.util.NavigableMap<com.azure.cosmos.implementation.guava25.collect.Cut<C>,com.azure.cosmos.implementation.guava25.collect.Range<C>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: TreeRangeSet(NavigableMap<Cut<C>,Range<C>> rangesByLowerCut)
  nameWithType: TreeRangeSet<C>.TreeRangeSet(NavigableMap<Cut<C>,Range<C>> rangesByLowerCut)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.TreeRangeSet(NavigableMap<Cut<C>,Range<C>> rangesByLowerCut)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.TreeRangeSet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private TreeRangeSet(NavigableMap<Cut<C>,Range<C>> rangesByLowerCut)
    parameters:
    - id: rangesByLowerCut
      type: java.util.NavigableMap<com.azure.cosmos.implementation.guava25.collect.Cut<C>,com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: add(Range<C> rangeToAdd)
  nameWithType: TreeRangeSet<C>.add(Range<C> rangeToAdd)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.add(Range<C> rangeToAdd)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adds the specified range to this `RangeSet` (optional operation). That is, for equal range sets a and b, the result of `a.add(range)` is that `a` will be the minimal range set for which both `a.enclosesAll(b)` and `a.encloses(range)`.


    Note that `range` will be <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.span(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">coalesced</xref> with any ranges in the range set that are <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">connected</xref> with it. Moreover, if `range` is empty, this is a no-op.
  syntax:
    content: public void add(Range<C> rangeToAdd)
    parameters:
    - id: rangeToAdd
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asDescendingSetOfRanges()
  id: asDescendingSetOfRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: asDescendingSetOfRanges()
  nameWithType: TreeRangeSet<C>.asDescendingSetOfRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.asDescendingSetOfRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asDescendingSetOfRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Set<Range<C>> asDescendingSetOfRanges()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asRanges()
  id: asRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: asRanges()
  nameWithType: TreeRangeSet<C>.asRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.asRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Set<Range<C>> asRanges()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Range<C>>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.complement()
  id: complement()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: complement()
  nameWithType: TreeRangeSet<C>.complement()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.complement()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.complement*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public RangeSet<C> complement()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: encloses(Range<C> range)
  nameWithType: TreeRangeSet<C>.encloses(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.encloses(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.encloses*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if there exists a member range in this range set which <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses" data-throw-if-not-resolved="false">encloses</xref> the specified range.
  syntax:
    content: public boolean encloses(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: intersects(Range<C> range)
  nameWithType: TreeRangeSet<C>.intersects(Range<C> range)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.intersects(Range<C> range)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.intersects*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if there exists a non-empty range enclosed by both a member range in this range set and the specified range. This is equivalent to calling `subRangeSet(otherRange)` and testing whether the resulting range set is non-empty.
  syntax:
    content: public boolean intersects(Range<C> range)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.rangeContaining(C)
  id: rangeContaining(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: rangeContaining(C value)
  nameWithType: TreeRangeSet<C>.rangeContaining(C value)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.rangeContaining(C value)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.rangeContaining*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the unique range from this range set that <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains" data-throw-if-not-resolved="false">contains</xref> `value`, or `null` if this range set does not contain `value`.
  syntax:
    content: public Range<C> rangeContaining(C value)
    parameters:
    - id: value
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: remove(Range<C> rangeToRemove)
  nameWithType: TreeRangeSet<C>.remove(Range<C> rangeToRemove)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.remove(Range<C> rangeToRemove)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes the specified range from this `RangeSet` (optional operation). After this operation, if `range.contains(c)`, `this.contains(c)` will return `false`.


    If `range` is empty, this is a no-op.
  syntax:
    content: public void remove(Range<C> rangeToRemove)
    parameters:
    - id: rangeToRemove
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.span()
  id: span()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: span()
  nameWithType: TreeRangeSet<C>.span()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.span()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.span*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Range<C> span()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  id: subRangeSet(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  langs:
  - java
  name: subRangeSet(Range<C> view)
  nameWithType: TreeRangeSet<C>.subRangeSet(Range<C> view)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.subRangeSet(Range<C> view)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.subRangeSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public RangeSet<C> subRangeSet(Range<C> view)
    parameters:
    - id: view
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
references:
- uid: java.util.NavigableMap<com.azure.cosmos.implementation.guava25.collect.Cut<C>,com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: java.util.NavigableMap
    name: NavigableMap
    fullName: java.util.NavigableMap
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Cut
    name: Cut
    fullName: com.azure.cosmos.implementation.guava25.collect.Cut
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.TreeRangeSet*
  name: TreeRangeSet
  nameWithType: TreeRangeSet<C>.TreeRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.TreeRangeSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
    name: TreeRangeSet
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.create*
  name: <C>create
  nameWithType: TreeRangeSet<C>.<C>create
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.<C>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.RangeSet
    name: RangeSet
    fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Range<C>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asRanges*
  name: asRanges
  nameWithType: TreeRangeSet<C>.asRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.asRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.asDescendingSetOfRanges*
  name: asDescendingSetOfRanges
  nameWithType: TreeRangeSet<C>.asDescendingSetOfRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.asDescendingSetOfRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.Range<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.rangeContaining*
  name: rangeContaining
  nameWithType: TreeRangeSet<C>.rangeContaining
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.rangeContaining
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.intersects*
  name: intersects
  nameWithType: TreeRangeSet<C>.intersects
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.intersects
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.encloses*
  name: encloses
  nameWithType: TreeRangeSet<C>.encloses
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.encloses
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.span*
  name: span
  nameWithType: TreeRangeSet<C>.span
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.span
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.add*
  name: add
  nameWithType: TreeRangeSet<C>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.remove*
  name: remove
  nameWithType: TreeRangeSet<C>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.complement*
  name: complement
  nameWithType: TreeRangeSet<C>.complement
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.complement
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet.subRangeSet*
  name: subRangeSet
  nameWithType: TreeRangeSet<C>.subRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeSet<C>.subRangeSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet<C>
  name: AbstractRangeSet<C>
  nameWithType: AbstractRangeSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet<C>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.hashCode()
  name: AbstractRangeSet.hashCode()
  nameWithType: AbstractRangeSet.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.hashCode()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  name: AbstractRangeSet.enclosesAll(RangeSet<C>)
  nameWithType: AbstractRangeSet.enclosesAll(RangeSet<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.intersects(Range<C>)
  nameWithType: AbstractRangeSet.intersects(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  name: AbstractRangeSet.addAll(RangeSet<C>)
  nameWithType: AbstractRangeSet.addAll(RangeSet<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.isEmpty()
  name: AbstractRangeSet.isEmpty()
  nameWithType: AbstractRangeSet.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.add(Range<C>)
  nameWithType: AbstractRangeSet.add(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.remove(Range<C>)
  nameWithType: AbstractRangeSet.remove(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
  name: AbstractRangeSet.encloses(Range<C>)
  nameWithType: AbstractRangeSet.encloses(Range<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range<C>)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.contains(C)
  name: AbstractRangeSet.contains(C)
  nameWithType: AbstractRangeSet.contains(C)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.contains(C)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.toString()
  name: AbstractRangeSet.toString()
  nameWithType: AbstractRangeSet.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.rangeContaining(C)
  name: AbstractRangeSet.rangeContaining(C)
  nameWithType: AbstractRangeSet.rangeContaining(C)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.rangeContaining(C)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
  name: AbstractRangeSet.removeAll(RangeSet<C>)
  nameWithType: AbstractRangeSet.removeAll(RangeSet<C>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.equals(java.lang.Object)
  name: AbstractRangeSet.equals(Object)
  nameWithType: AbstractRangeSet.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.clear()
  name: AbstractRangeSet.clear()
  nameWithType: AbstractRangeSet.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.Cut
  name: Cut
  nameWithType: Cut
  fullName: com.azure.cosmos.implementation.guava25.collect.Cut
- uid: java.util.NavigableMap
  name: NavigableMap
  nameWithType: NavigableMap
  fullName: java.util.NavigableMap
- uid: C>,com.azure.cosmos.implementation.guava25.collect.Range
  name: C>,Range
  nameWithType: C>,Range
  fullName: C>,com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: RangeSet
  nameWithType: RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeSet
- uid: com.azure.cosmos.implementation.guava25.collect.Range
  name: Range
  nameWithType: Range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet
  name: AbstractRangeSet
  nameWithType: AbstractRangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: AbstractRangeSet.enclosesAll(RangeSet
  nameWithType: AbstractRangeSet.enclosesAll(RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.enclosesAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
- uid: C>)
  name: C>)
  nameWithType: C>)
  fullName: C>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.intersects(Range
  nameWithType: AbstractRangeSet.intersects(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.intersects(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: AbstractRangeSet.addAll(RangeSet
  nameWithType: AbstractRangeSet.addAll(RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.addAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.add(Range
  nameWithType: AbstractRangeSet.add(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.add(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.remove(Range
  nameWithType: AbstractRangeSet.remove(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.remove(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range
  name: AbstractRangeSet.encloses(Range
  nameWithType: AbstractRangeSet.encloses(Range
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.encloses(com.azure.cosmos.implementation.guava25.collect.Range
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
  name: AbstractRangeSet.removeAll(RangeSet
  nameWithType: AbstractRangeSet.removeAll(RangeSet
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractRangeSet.removeAll(com.azure.cosmos.implementation.guava25.collect.RangeSet
