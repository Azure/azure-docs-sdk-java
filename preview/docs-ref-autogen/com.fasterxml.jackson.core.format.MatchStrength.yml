### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.format.MatchStrength"
fullName: "com.fasterxml.jackson.core.format.MatchStrength"
name: "MatchStrength"
nameWithType: "MatchStrength"
summary: "Enumeration used to indicate strength of match between data format and piece of data (typically beginning of a data file). Values are in increasing match strength; and detectors should return \"strongest\" value: that is, it should start with strongest match criteria, and downgrading if criteria is not fulfilled."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum MatchStrength extends Enum<MatchStrength>"
fields:
- uid: "com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH"
  name: "FULL_MATCH"
  nameWithType: "MatchStrength.FULL_MATCH"
  summary: "Value that indicates that given data contains a signature that is deemed specific enough to uniquely indicate data format used.\n\nFor example, when testing for XML data format, seing \"<xml\" as the first data bytes (\"XML declaration\", as per XML specification) could give full confidence that data is indeed in XML format. Not all data formats have unique leading identifiers to allow full matches; for example, JSON only has heuristic matches and can have at most <xref uid=\"com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#SOLID_MATCH\"></xref>) match."
- uid: "com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE"
  name: "INCONCLUSIVE"
  nameWithType: "MatchStrength.INCONCLUSIVE"
  summary: "Value that indicates that detector can not find out whether could be a match or not. This can occur for example for textual data formats t when there are so many leading spaces that detector can not find the first data byte (because detectors typically limit lookahead to some smallish value)."
- uid: "com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH"
  name: "NO_MATCH"
  nameWithType: "MatchStrength.NO_MATCH"
  summary: "Value that indicates that given data can not be in given format."
- uid: "com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH"
  name: "SOLID_MATCH"
  nameWithType: "MatchStrength.SOLID_MATCH"
  summary: "Value that indicates that given data conforms to (one of) canonical form(s) of the data format.\n\nFor example, when testing for XML data format, seeing a less-than character (\"<\") alone (with possible leading spaces) would be a strong indication that data could be in xml format (but see below for <xref uid=\"com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#FULL_MATCH\"></xref> description for more)"
- uid: "com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH"
  name: "WEAK_MATCH"
  nameWithType: "MatchStrength.WEAK_MATCH"
  summary: "Value that indicates that given data could be of specified format (i.e. it can not be ruled out). This can occur for example when seen data is both not in canonical formats (for example: JSON data should be a JSON Array or Object not a scalar value, as per JSON specification) and there are known use case where a format detected is actually used (plain JSON Strings are actually used, even though specification does not indicate that as valid usage: as such, seeing a leading double-quote could indicate a JSON String, which plausibly **could** indicate non-standard JSON usage)."
methods:
- uid: "com.fasterxml.jackson.core.format.MatchStrength.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "MatchStrength.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static MatchStrength valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.format.MatchStrength?alt=com.fasterxml.jackson.core.format.MatchStrength&text=MatchStrength\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.format.MatchStrength.values()"
  fullName: "com.fasterxml.jackson.core.format.MatchStrength.values()"
  name: "values()"
  nameWithType: "MatchStrength.values()"
  syntax: "public static MatchStrength[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.format.MatchStrength?alt=com.fasterxml.jackson.core.format.MatchStrength&text=MatchStrength\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core.format"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
