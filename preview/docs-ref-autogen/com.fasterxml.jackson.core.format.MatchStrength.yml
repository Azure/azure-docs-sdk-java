### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.format.MatchStrength
  id: MatchStrength
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format
  children:
  - com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH
  - com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE
  - com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH
  - com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH
  - com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH
  - com.fasterxml.jackson.core.format.MatchStrength.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.format.MatchStrength.values()
  langs:
  - java
  name: MatchStrength
  nameWithType: MatchStrength
  fullName: com.fasterxml.jackson.core.format.MatchStrength
  type: Enum
  package: com.fasterxml.jackson.core.format
  summary: 'Enumeration used to indicate strength of match between data format and piece of data (typically beginning of a data file). Values are in increasing match strength; and detectors should return "strongest" value: that is, it should start with strongest match criteria, and downgrading if criteria is not fulfilled.'
  syntax:
    content: public enum MatchStrength extends Enum<MatchStrength>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH
  id: FULL_MATCH
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: FULL_MATCH
  nameWithType: MatchStrength.FULL_MATCH
  fullName: com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: >-
    Value that indicates that given data contains a signature that is deemed specific enough to uniquely indicate data format used.


    For example, when testing for XML data format, seing "<xml" as the first data bytes ("XML declaration", as per XML specification) could give full confidence that data is indeed in XML format. Not all data formats have unique leading identifiers to allow full matches; for example, JSON only has heuristic matches and can have at most <xref uid="com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH" data-throw-if-not-resolved="false">#SOLID_MATCH</xref>) match.
  syntax:
    content: public static final MatchStrength FULL_MATCH
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE
  id: INCONCLUSIVE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: INCONCLUSIVE
  nameWithType: MatchStrength.INCONCLUSIVE
  fullName: com.fasterxml.jackson.core.format.MatchStrength.INCONCLUSIVE
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: Value that indicates that detector can not find out whether could be a match or not. This can occur for example for textual data formats t when there are so many leading spaces that detector can not find the first data byte (because detectors typically limit lookahead to some smallish value).
  syntax:
    content: public static final MatchStrength INCONCLUSIVE
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.MatchStrength.MatchStrength()
  id: MatchStrength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: MatchStrength()
  nameWithType: MatchStrength.MatchStrength()
  fullName: com.fasterxml.jackson.core.format.MatchStrength.MatchStrength()
  overload: com.fasterxml.jackson.core.format.MatchStrength.MatchStrength*
  type: Constructor
  package: com.fasterxml.jackson.core.format
  syntax:
    content: private MatchStrength()
- uid: com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH
  id: NO_MATCH
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: NO_MATCH
  nameWithType: MatchStrength.NO_MATCH
  fullName: com.fasterxml.jackson.core.format.MatchStrength.NO_MATCH
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: Value that indicates that given data can not be in given format.
  syntax:
    content: public static final MatchStrength NO_MATCH
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH
  id: SOLID_MATCH
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: SOLID_MATCH
  nameWithType: MatchStrength.SOLID_MATCH
  fullName: com.fasterxml.jackson.core.format.MatchStrength.SOLID_MATCH
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: >-
    Value that indicates that given data conforms to (one of) canonical form(s) of the data format.


    For example, when testing for XML data format, seeing a less-than character ("<") alone (with possible leading spaces) would be a strong indication that data could be in xml format (but see below for <xref uid="com.fasterxml.jackson.core.format.MatchStrength.FULL_MATCH" data-throw-if-not-resolved="false">#FULL_MATCH</xref> description for more)
  syntax:
    content: public static final MatchStrength SOLID_MATCH
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH
  id: WEAK_MATCH
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: WEAK_MATCH
  nameWithType: MatchStrength.WEAK_MATCH
  fullName: com.fasterxml.jackson.core.format.MatchStrength.WEAK_MATCH
  type: Field
  package: com.fasterxml.jackson.core.format
  summary: 'Value that indicates that given data could be of specified format (i.e. it can not be ruled out). This can occur for example when seen data is both not in canonical formats (for example: JSON data should be a JSON Array or Object not a scalar value, as per JSON specification) and there are known use case where a format detected is actually used (plain JSON Strings are actually used, even though specification does not indicate that as valid usage: as such, seeing a leading double-quote could indicate a JSON String, which plausibly **could** indicate non-standard JSON usage).'
  syntax:
    content: public static final MatchStrength WEAK_MATCH
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.MatchStrength.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: valueOf(String name)
  nameWithType: MatchStrength.valueOf(String name)
  fullName: com.fasterxml.jackson.core.format.MatchStrength.valueOf(String name)
  overload: com.fasterxml.jackson.core.format.MatchStrength.valueOf*
  type: Method
  package: com.fasterxml.jackson.core.format
  syntax:
    content: public static MatchStrength valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.format.MatchStrength.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.format.MatchStrength
  langs:
  - java
  name: values()
  nameWithType: MatchStrength.values()
  fullName: com.fasterxml.jackson.core.format.MatchStrength.values()
  overload: com.fasterxml.jackson.core.format.MatchStrength.values*
  type: Method
  package: com.fasterxml.jackson.core.format
  syntax:
    content: public static MatchStrength[] values()
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength[]
references:
- uid: com.fasterxml.jackson.core.format.MatchStrength.MatchStrength*
  name: MatchStrength
  nameWithType: MatchStrength.MatchStrength
  fullName: com.fasterxml.jackson.core.format.MatchStrength.MatchStrength
  package: com.fasterxml.jackson.core.format
- uid: com.fasterxml.jackson.core.format.MatchStrength[]
  spec.java:
  - uid: com.fasterxml.jackson.core.format.MatchStrength
    name: MatchStrength
    fullName: com.fasterxml.jackson.core.format.MatchStrength
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.format.MatchStrength.values*
  name: values
  nameWithType: MatchStrength.values
  fullName: com.fasterxml.jackson.core.format.MatchStrength.values
  package: com.fasterxml.jackson.core.format
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.format.MatchStrength.valueOf*
  name: valueOf
  nameWithType: MatchStrength.valueOf
  fullName: com.fasterxml.jackson.core.format.MatchStrength.valueOf
  package: com.fasterxml.jackson.core.format
- uid: java.lang.Enum<com.fasterxml.jackson.core.format.MatchStrength>
  name: Enum<MatchStrength>
  nameWithType: Enum<MatchStrength>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.format.MatchStrength>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
