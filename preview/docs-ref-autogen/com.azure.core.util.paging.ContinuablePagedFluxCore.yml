### YamlMime:JavaType
uid: "com.azure.core.util.paging.ContinuablePagedFluxCore"
fullName: "com.azure.core.util.paging.ContinuablePagedFluxCore<C,T,P>"
name: "ContinuablePagedFluxCore<C,T,P>"
nameWithType: "ContinuablePagedFluxCore<C,T,P>"
summary: "The default implementation of <xref uid=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"false\">ContinuablePagedFlux</xref>. This type is a Flux that provides the ability to operate on pages of type <xref uid=\"com.azure.core.util.paging.ContinuablePage\" data-throw-if-not-resolved=\"false\">ContinuablePage</xref> and individual items in such pages. This type supports user-provided continuation tokens, allowing for restarting from a previously-retrieved continuation token. The type is backed by the Page Retriever provider provided in it's constructor. The provider is expected to return <xref uid=\"com.azure.core.util.paging.PageRetriever\" data-throw-if-not-resolved=\"false\">PageRetriever</xref> when called. The provider is invoked for each Subscription to this Flux. Given provider is called per Subscription, the provider implementation can create one or more objects to store any state and Page Retriever can capture and use those objects. This indirectly associate the state objects to the Subscription. The Page Retriever can get called multiple times in serial fashion, each time after the completion of the Flux returned by the previous invocation. The final completion signal will be send to the Subscriber when the last Page emitted by the Flux returned by the Page Retriever has `null` continuation token.\n\n**Extending PagedFluxCore for Custom Continuation Token support**\n\n\\{@codesnippet com.azure.core.util.paging.pagedfluxcore.continuationtoken\\}"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.core.util.paging.ContinuablePagedFlux\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.core.util.paging.ContinuablePagedFlux.byPage()"
- "com.azure.core.util.paging.ContinuablePagedFlux.byPage(C)"
- "com.azure.core.util.paging.ContinuablePagedFlux.byPage(C,int)"
- "com.azure.core.util.paging.ContinuablePagedFlux.byPage(int)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "reactor.core.publisher.Flux.<A>reduce(A,java.util.function.BiFunction<A,? super T,A>)"
- "reactor.core.publisher.Flux.<A>reduceWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)"
- "reactor.core.publisher.Flux.<A>scan(A,java.util.function.BiFunction<A,? super T,A>)"
- "reactor.core.publisher.Flux.<A>scanWith(java.util.function.Supplier<A>,java.util.function.BiFunction<A,? super T,A>)"
- "reactor.core.publisher.Flux.<C>buffer(int,int,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<C>buffer(int,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<C>buffer(org.reactivestreams.Publisher<?>,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<C>bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<E>cast(java.lang.Class<E>)"
- "reactor.core.publisher.Flux.<E>collect(java.util.function.Supplier<E>,java.util.function.BiConsumer<E,? super T>)"
- "reactor.core.publisher.Flux.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)"
- "reactor.core.publisher.Flux.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
- "reactor.core.publisher.Flux.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
- "reactor.core.publisher.Flux.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)"
- "reactor.core.publisher.Flux.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<E>onErrorReturn(java.lang.Class<E>,T)"
- "reactor.core.publisher.Flux.<E>subscribeWith(E)"
- "reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,int,org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I,O>zip(java.util.function.Function<? super java.lang.Object[],? extends O>,org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>first(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)"
- "reactor.core.publisher.Flux.<I>first(org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>index(java.util.function.BiFunction<? super java.lang.Long,? super T,? extends I>)"
- "reactor.core.publisher.Flux.<I>merge(int,org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>merge(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)"
- "reactor.core.publisher.Flux.<I>merge(org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>mergeDelayError(int,org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>mergeOrdered(org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>mergeSequential(int,org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>)"
- "reactor.core.publisher.Flux.<I>mergeSequential(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)"
- "reactor.core.publisher.Flux.<I>mergeSequential(org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>mergeSequentialDelayError(int,org.reactivestreams.Publisher<? extends I>...)"
- "reactor.core.publisher.Flux.<I>mergeSequentialDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends I>>,int,int)"
- "reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<K,V>collectMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,V>>)"
- "reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<K,V>collectMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<java.util.Map<K,java.util.Collection<V>>>)"
- "reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<K,V>groupBy(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,int)"
- "reactor.core.publisher.Flux.<K>collectMap(java.util.function.Function<? super T,? extends K>)"
- "reactor.core.publisher.Flux.<K>collectMultimap(java.util.function.Function<? super T,? extends K>)"
- "reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>)"
- "reactor.core.publisher.Flux.<K>groupBy(java.util.function.Function<? super T,? extends K>,int)"
- "reactor.core.publisher.Flux.<O>error(java.lang.Throwable,boolean)"
- "reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,int,java.util.function.Function<? super java.lang.Object[],? extends O>)"
- "reactor.core.publisher.Flux.<O>zip(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super java.lang.Object[],? extends O>)"
- "reactor.core.publisher.Flux.<P>as(java.util.function.Function<? super reactor.core.publisher.Flux<T>,P>)"
- "reactor.core.publisher.Flux.<R,A>collect(java.util.stream.Collector<? super T,A,? extends R>)"
- "reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)"
- "reactor.core.publisher.Flux.<R>concatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)"
- "reactor.core.publisher.Flux.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)"
- "reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)"
- "reactor.core.publisher.Flux.<R>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)"
- "reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)"
- "reactor.core.publisher.Flux.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>,int)"
- "reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)"
- "reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int)"
- "reactor.core.publisher.Flux.<R>flatMapSequential(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)"
- "reactor.core.publisher.Flux.<R>flatMapSequentialDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,int,int)"
- "reactor.core.publisher.Flux.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)"
- "reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>)"
- "reactor.core.publisher.Flux.<R>publish(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<? extends R>>,int)"
- "reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>)"
- "reactor.core.publisher.Flux.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Consumer<? super D>,boolean)"
- "reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>)"
- "reactor.core.publisher.Flux.<T,S>generate(java.util.concurrent.Callable<S>,java.util.function.BiFunction<S,reactor.core.publisher.SynchronousSink<T>,S>,java.util.function.Consumer<? super S>)"
- "reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,int,java.util.function.Function<java.lang.Object[],V>)"
- "reactor.core.publisher.Flux.<T,V>combineLatest(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>,java.util.function.Function<java.lang.Object[],V>)"
- "reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,int,org.reactivestreams.Publisher<? extends T>...)"
- "reactor.core.publisher.Flux.<T,V>combineLatest(java.util.function.Function<java.lang.Object[],V>,org.reactivestreams.Publisher<? extends T>...)"
- "reactor.core.publisher.Flux.<T1,T2,O>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7,T8>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>,org.reactivestreams.Publisher<? extends T8>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,T7>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,org.reactivestreams.Publisher<? extends T7>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>,java.util.function.Function<java.lang.Object[],V>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,T6>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,org.reactivestreams.Publisher<? extends T6>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,T5,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>,java.util.function.Function<java.lang.Object[],V>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,T5>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,org.reactivestreams.Publisher<? extends T5>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>,java.util.function.Function<java.lang.Object[],V>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,T4>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,org.reactivestreams.Publisher<? extends T4>)"
- "reactor.core.publisher.Flux.<T1,T2,T3,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>,java.util.function.Function<java.lang.Object[],V>)"
- "reactor.core.publisher.Flux.<T1,T2,T3>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,org.reactivestreams.Publisher<? extends T3>)"
- "reactor.core.publisher.Flux.<T1,T2,V>combineLatest(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends V>)"
- "reactor.core.publisher.Flux.<T1,T2>zip(org.reactivestreams.Publisher<? extends T1>,org.reactivestreams.Publisher<? extends T2>)"
- "reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,int,java.util.function.BiFunction<? super T,? super T2,? extends V>)"
- "reactor.core.publisher.Flux.<T2,V>zipWith(org.reactivestreams.Publisher<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)"
- "reactor.core.publisher.Flux.<T2,V>zipWithIterable(java.lang.Iterable<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends V>)"
- "reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>)"
- "reactor.core.publisher.Flux.<T2>zipWith(org.reactivestreams.Publisher<? extends T2>,int)"
- "reactor.core.publisher.Flux.<T2>zipWithIterable(java.lang.Iterable<? extends T2>)"
- "reactor.core.publisher.Flux.<T>concat(java.lang.Iterable<? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends T>...)"
- "reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<T>concat(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)"
- "reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends T>...)"
- "reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,boolean,int)"
- "reactor.core.publisher.Flux.<T>concatDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)"
- "reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)"
- "reactor.core.publisher.Flux.<T>create(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)"
- "reactor.core.publisher.Flux.<T>defer(java.util.function.Supplier<? extends org.reactivestreams.Publisher<T>>)"
- "reactor.core.publisher.Flux.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends org.reactivestreams.Publisher<T>>)"
- "reactor.core.publisher.Flux.<T>empty()"
- "reactor.core.publisher.Flux.<T>error(java.lang.Throwable)"
- "reactor.core.publisher.Flux.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)"
- "reactor.core.publisher.Flux.<T>from(org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.<T>fromArray(T[])"
- "reactor.core.publisher.Flux.<T>fromIterable(java.lang.Iterable<? extends T>)"
- "reactor.core.publisher.Flux.<T>fromStream(java.util.function.Supplier<java.util.stream.Stream<? extends T>>)"
- "reactor.core.publisher.Flux.<T>fromStream(java.util.stream.Stream<? extends T>)"
- "reactor.core.publisher.Flux.<T>generate(java.util.function.Consumer<reactor.core.publisher.SynchronousSink<T>>)"
- "reactor.core.publisher.Flux.<T>just(T)"
- "reactor.core.publisher.Flux.<T>just(T...)"
- "reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)"
- "reactor.core.publisher.Flux.<T>merge(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)"
- "reactor.core.publisher.Flux.<T>mergeOrdered(int,java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)"
- "reactor.core.publisher.Flux.<T>mergeOrdered(java.util.Comparator<? super T>,org.reactivestreams.Publisher<? extends T>...)"
- "reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<T>mergeSequential(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)"
- "reactor.core.publisher.Flux.<T>mergeSequentialDelayError(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int,int)"
- "reactor.core.publisher.Flux.<T>never()"
- "reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.ConnectableFlux<T>)"
- "reactor.core.publisher.Flux.<T>onAssembly(reactor.core.publisher.Flux<T>)"
- "reactor.core.publisher.Flux.<T>onLastAssembly(reactor.core.publisher.Flux<T>)"
- "reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>)"
- "reactor.core.publisher.Flux.<T>push(java.util.function.Consumer<? super reactor.core.publisher.FluxSink<T>>,reactor.core.publisher.FluxSink.OverflowStrategy)"
- "reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.<T>switchOnNext(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<? extends T>>,int)"
- "reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>groupJoin(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super reactor.core.publisher.Flux<TRight>,? extends R>)"
- "reactor.core.publisher.Flux.<TRight,TLeftEnd,TRightEnd,R>join(org.reactivestreams.Publisher<? extends TRight>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<TLeftEnd>>,java.util.function.Function<? super TRight,? extends org.reactivestreams.Publisher<TRightEnd>>,java.util.function.BiFunction<? super T,? super TRight,? extends R>)"
- "reactor.core.publisher.Flux.<TUPLE,V>zip(org.reactivestreams.Publisher<? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super TUPLE,? extends V>)"
- "reactor.core.publisher.Flux.<U,R>withLatestFrom(org.reactivestreams.Publisher<? extends U>,java.util.function.BiFunction<? super T,? super U,? extends R>)"
- "reactor.core.publisher.Flux.<U,V,C>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<U,V>bufferWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)"
- "reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>)"
- "reactor.core.publisher.Flux.<U,V>timeout(org.reactivestreams.Publisher<U>,java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<V>>,org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.<U,V>windowWhen(org.reactivestreams.Publisher<U>,java.util.function.Function<? super U,? extends org.reactivestreams.Publisher<V>>)"
- "reactor.core.publisher.Flux.<U>delaySubscription(org.reactivestreams.Publisher<U>)"
- "reactor.core.publisher.Flux.<U>ofType(java.lang.Class<U>)"
- "reactor.core.publisher.Flux.<U>sample(org.reactivestreams.Publisher<U>)"
- "reactor.core.publisher.Flux.<U>sampleFirst(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)"
- "reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>)"
- "reactor.core.publisher.Flux.<U>sampleTimeout(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<U>>,int)"
- "reactor.core.publisher.Flux.<U>timeout(org.reactivestreams.Publisher<U>)"
- "reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>)"
- "reactor.core.publisher.Flux.<V,C>distinct(java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<C>,java.util.function.BiPredicate<C,V>,java.util.function.Consumer<C>)"
- "reactor.core.publisher.Flux.<V>bufferUntilChanged()"
- "reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<V>bufferUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)"
- "reactor.core.publisher.Flux.<V>compose(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)"
- "reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)"
- "reactor.core.publisher.Flux.<V>concatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)"
- "reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>)"
- "reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,boolean,int)"
- "reactor.core.publisher.Flux.<V>concatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)"
- "reactor.core.publisher.Flux.<V>distinct(java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<V>distinctUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)"
- "reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int)"
- "reactor.core.publisher.Flux.<V>flatMap(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)"
- "reactor.core.publisher.Flux.<V>flatMapDelayError(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends V>>,int,int)"
- "reactor.core.publisher.Flux.<V>map(java.util.function.Function<? super T,? extends V>)"
- "reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>)"
- "reactor.core.publisher.Flux.<V>switchMap(java.util.function.Function<? super T,org.reactivestreams.Publisher<? extends V>>,int)"
- "reactor.core.publisher.Flux.<V>switchOnFirst(java.util.function.BiFunction<reactor.core.publisher.Signal<? extends T>,reactor.core.publisher.Flux<T>,org.reactivestreams.Publisher<? extends V>>)"
- "reactor.core.publisher.Flux.<V>then(reactor.core.publisher.Mono<V>)"
- "reactor.core.publisher.Flux.<V>thenMany(org.reactivestreams.Publisher<V>)"
- "reactor.core.publisher.Flux.<V>transform(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)"
- "reactor.core.publisher.Flux.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Flux<T>,? extends org.reactivestreams.Publisher<V>>)"
- "reactor.core.publisher.Flux.<V>windowUntilChanged()"
- "reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? extends V>,java.util.function.BiPredicate<? super V,? super V>)"
- "reactor.core.publisher.Flux.<V>windowUntilChanged(java.util.function.Function<? super T,? super V>)"
- "reactor.core.publisher.Flux.<X>dematerialize()"
- "reactor.core.publisher.Flux.all(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.any(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.blockFirst()"
- "reactor.core.publisher.Flux.blockFirst(java.time.Duration)"
- "reactor.core.publisher.Flux.blockLast()"
- "reactor.core.publisher.Flux.blockLast(java.time.Duration)"
- "reactor.core.publisher.Flux.buffer()"
- "reactor.core.publisher.Flux.buffer(int)"
- "reactor.core.publisher.Flux.buffer(int,int)"
- "reactor.core.publisher.Flux.buffer(java.time.Duration)"
- "reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration)"
- "reactor.core.publisher.Flux.buffer(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.buffer(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.buffer(org.reactivestreams.Publisher<?>)"
- "reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration)"
- "reactor.core.publisher.Flux.bufferTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.bufferUntil(java.util.function.Predicate<? super T>,boolean)"
- "reactor.core.publisher.Flux.bufferWhile(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.cache()"
- "reactor.core.publisher.Flux.cache(int)"
- "reactor.core.publisher.Flux.cache(int,java.time.Duration)"
- "reactor.core.publisher.Flux.cache(int,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.cache(java.time.Duration)"
- "reactor.core.publisher.Flux.cache(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.cancelOn(reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.checkpoint()"
- "reactor.core.publisher.Flux.checkpoint(java.lang.String)"
- "reactor.core.publisher.Flux.checkpoint(java.lang.String,boolean)"
- "reactor.core.publisher.Flux.collectList()"
- "reactor.core.publisher.Flux.collectSortedList()"
- "reactor.core.publisher.Flux.collectSortedList(java.util.Comparator<? super T>)"
- "reactor.core.publisher.Flux.concatWith(org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.concatWithValues(T...)"
- "reactor.core.publisher.Flux.count()"
- "reactor.core.publisher.Flux.defaultIfEmpty(T)"
- "reactor.core.publisher.Flux.delayElements(java.time.Duration)"
- "reactor.core.publisher.Flux.delayElements(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.delaySequence(java.time.Duration)"
- "reactor.core.publisher.Flux.delaySequence(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.delaySubscription(java.time.Duration)"
- "reactor.core.publisher.Flux.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.distinct()"
- "reactor.core.publisher.Flux.distinctUntilChanged()"
- "reactor.core.publisher.Flux.doAfterTerminate(java.lang.Runnable)"
- "reactor.core.publisher.Flux.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)"
- "reactor.core.publisher.Flux.doFirst(java.lang.Runnable)"
- "reactor.core.publisher.Flux.doOnCancel(java.lang.Runnable)"
- "reactor.core.publisher.Flux.doOnComplete(java.lang.Runnable)"
- "reactor.core.publisher.Flux.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)"
- "reactor.core.publisher.Flux.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)"
- "reactor.core.publisher.Flux.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)"
- "reactor.core.publisher.Flux.doOnNext(java.util.function.Consumer<? super T>)"
- "reactor.core.publisher.Flux.doOnRequest(java.util.function.LongConsumer)"
- "reactor.core.publisher.Flux.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
- "reactor.core.publisher.Flux.doOnTerminate(java.lang.Runnable)"
- "reactor.core.publisher.Flux.elapsed()"
- "reactor.core.publisher.Flux.elapsed(reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.elementAt(int)"
- "reactor.core.publisher.Flux.elementAt(int,T)"
- "reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
- "reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
- "reactor.core.publisher.Flux.filter(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)"
- "reactor.core.publisher.Flux.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>,int)"
- "reactor.core.publisher.Flux.getPrefetch()"
- "reactor.core.publisher.Flux.hasElement(T)"
- "reactor.core.publisher.Flux.hasElements()"
- "reactor.core.publisher.Flux.hide()"
- "reactor.core.publisher.Flux.ignoreElements()"
- "reactor.core.publisher.Flux.index()"
- "reactor.core.publisher.Flux.interval(java.time.Duration)"
- "reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration)"
- "reactor.core.publisher.Flux.interval(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.interval(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.last()"
- "reactor.core.publisher.Flux.last(T)"
- "reactor.core.publisher.Flux.limitRate(int)"
- "reactor.core.publisher.Flux.limitRate(int,int)"
- "reactor.core.publisher.Flux.limitRequest(long)"
- "reactor.core.publisher.Flux.log()"
- "reactor.core.publisher.Flux.log(java.lang.String)"
- "reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
- "reactor.core.publisher.Flux.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)"
- "reactor.core.publisher.Flux.log(reactor.util.Logger)"
- "reactor.core.publisher.Flux.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
- "reactor.core.publisher.Flux.materialize()"
- "reactor.core.publisher.Flux.mergeOrderedWith(org.reactivestreams.Publisher<? extends T>,java.util.Comparator<? super T>)"
- "reactor.core.publisher.Flux.mergeWith(org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.metrics()"
- "reactor.core.publisher.Flux.name(java.lang.String)"
- "reactor.core.publisher.Flux.next()"
- "reactor.core.publisher.Flux.onBackpressureBuffer()"
- "reactor.core.publisher.Flux.onBackpressureBuffer(int)"
- "reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>)"
- "reactor.core.publisher.Flux.onBackpressureBuffer(int,java.util.function.Consumer<? super T>,reactor.core.publisher.BufferOverflowStrategy)"
- "reactor.core.publisher.Flux.onBackpressureBuffer(int,reactor.core.publisher.BufferOverflowStrategy)"
- "reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>)"
- "reactor.core.publisher.Flux.onBackpressureBuffer(java.time.Duration,int,java.util.function.Consumer<? super T>,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.onBackpressureDrop()"
- "reactor.core.publisher.Flux.onBackpressureDrop(java.util.function.Consumer<? super T>)"
- "reactor.core.publisher.Flux.onBackpressureError()"
- "reactor.core.publisher.Flux.onBackpressureLatest()"
- "reactor.core.publisher.Flux.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
- "reactor.core.publisher.Flux.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
- "reactor.core.publisher.Flux.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
- "reactor.core.publisher.Flux.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends T>>)"
- "reactor.core.publisher.Flux.onErrorReturn(T)"
- "reactor.core.publisher.Flux.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)"
- "reactor.core.publisher.Flux.onErrorStop()"
- "reactor.core.publisher.Flux.onTerminateDetach()"
- "reactor.core.publisher.Flux.or(org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.parallel()"
- "reactor.core.publisher.Flux.parallel(int)"
- "reactor.core.publisher.Flux.parallel(int,int)"
- "reactor.core.publisher.Flux.publish()"
- "reactor.core.publisher.Flux.publish(int)"
- "reactor.core.publisher.Flux.publishNext()"
- "reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,boolean,int)"
- "reactor.core.publisher.Flux.publishOn(reactor.core.scheduler.Scheduler,int)"
- "reactor.core.publisher.Flux.range(int,int)"
- "reactor.core.publisher.Flux.reduce(java.util.function.BiFunction<T,T,T>)"
- "reactor.core.publisher.Flux.repeat()"
- "reactor.core.publisher.Flux.repeat(java.util.function.BooleanSupplier)"
- "reactor.core.publisher.Flux.repeat(long)"
- "reactor.core.publisher.Flux.repeat(long,java.util.function.BooleanSupplier)"
- "reactor.core.publisher.Flux.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.replay()"
- "reactor.core.publisher.Flux.replay(int)"
- "reactor.core.publisher.Flux.replay(int,java.time.Duration)"
- "reactor.core.publisher.Flux.replay(int,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.replay(java.time.Duration)"
- "reactor.core.publisher.Flux.replay(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.retry()"
- "reactor.core.publisher.Flux.retry(java.util.function.Predicate<? super java.lang.Throwable>)"
- "reactor.core.publisher.Flux.retry(long)"
- "reactor.core.publisher.Flux.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)"
- "reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration)"
- "reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration)"
- "reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double)"
- "reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)"
- "reactor.core.publisher.Flux.sample(java.time.Duration)"
- "reactor.core.publisher.Flux.sampleFirst(java.time.Duration)"
- "reactor.core.publisher.Flux.scan(java.util.function.BiFunction<T,T,T>)"
- "reactor.core.publisher.Flux.share()"
- "reactor.core.publisher.Flux.single()"
- "reactor.core.publisher.Flux.single(T)"
- "reactor.core.publisher.Flux.singleOrEmpty()"
- "reactor.core.publisher.Flux.skip(java.time.Duration)"
- "reactor.core.publisher.Flux.skip(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.skip(long)"
- "reactor.core.publisher.Flux.skipLast(int)"
- "reactor.core.publisher.Flux.skipUntil(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.skipUntilOther(org.reactivestreams.Publisher<?>)"
- "reactor.core.publisher.Flux.skipWhile(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.sort()"
- "reactor.core.publisher.Flux.sort(java.util.Comparator<? super T>)"
- "reactor.core.publisher.Flux.startWith(T...)"
- "reactor.core.publisher.Flux.startWith(java.lang.Iterable<? extends T>)"
- "reactor.core.publisher.Flux.startWith(org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.subscribe()"
- "reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>)"
- "reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)"
- "reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)"
- "reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
- "reactor.core.publisher.Flux.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)"
- "reactor.core.publisher.Flux.subscribe(org.reactivestreams.Subscriber<? super T>)"
- "reactor.core.publisher.Flux.subscribe(reactor.core.CoreSubscriber<? super T>)"
- "reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.subscribeOn(reactor.core.scheduler.Scheduler,boolean)"
- "reactor.core.publisher.Flux.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)"
- "reactor.core.publisher.Flux.subscriberContext(reactor.util.context.Context)"
- "reactor.core.publisher.Flux.switchIfEmpty(org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.tag(java.lang.String,java.lang.String)"
- "reactor.core.publisher.Flux.take(java.time.Duration)"
- "reactor.core.publisher.Flux.take(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.take(long)"
- "reactor.core.publisher.Flux.takeLast(int)"
- "reactor.core.publisher.Flux.takeUntil(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.takeUntilOther(org.reactivestreams.Publisher<?>)"
- "reactor.core.publisher.Flux.takeWhile(java.util.function.Predicate<? super T>)"
- "reactor.core.publisher.Flux.then()"
- "reactor.core.publisher.Flux.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)"
- "reactor.core.publisher.Flux.timeout(java.time.Duration)"
- "reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>)"
- "reactor.core.publisher.Flux.timeout(java.time.Duration,org.reactivestreams.Publisher<? extends T>,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.timestamp()"
- "reactor.core.publisher.Flux.timestamp(reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.toIterable()"
- "reactor.core.publisher.Flux.toIterable(int)"
- "reactor.core.publisher.Flux.toIterable(int,java.util.function.Supplier<java.util.Queue<T>>)"
- "reactor.core.publisher.Flux.toStream()"
- "reactor.core.publisher.Flux.toStream(int)"
- "reactor.core.publisher.Flux.toString()"
- "reactor.core.publisher.Flux.window(int)"
- "reactor.core.publisher.Flux.window(int,int)"
- "reactor.core.publisher.Flux.window(java.time.Duration)"
- "reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration)"
- "reactor.core.publisher.Flux.window(java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.window(java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.window(org.reactivestreams.Publisher<?>)"
- "reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration)"
- "reactor.core.publisher.Flux.windowTimeout(int,java.time.Duration,reactor.core.scheduler.Scheduler)"
- "reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>)"
- "reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean)"
- "reactor.core.publisher.Flux.windowUntil(java.util.function.Predicate<T>,boolean,int)"
- "reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>)"
- "reactor.core.publisher.Flux.windowWhile(java.util.function.Predicate<T>,int)"
syntax: "public abstract class ContinuablePagedFluxCore<C,T,P> extends ContinuablePagedFlux<C,T,P>"
constructors:
- "com.azure.core.util.paging.ContinuablePagedFluxCore.ContinuablePagedFluxCore(java.util.function.Supplier<com.azure.core.util.paging.PageRetriever<C,P>>)"
- "com.azure.core.util.paging.ContinuablePagedFluxCore.ContinuablePagedFluxCore(java.util.function.Supplier<com.azure.core.util.paging.PageRetriever<C,P>>,int)"
methods:
- "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage()"
- "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(C)"
- "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(C,int)"
- "com.azure.core.util.paging.ContinuablePagedFluxCore.byPage(int)"
- "com.azure.core.util.paging.ContinuablePagedFluxCore.getPageSize()"
- "com.azure.core.util.paging.ContinuablePagedFluxCore.subscribe(reactor.core.CoreSubscriber<? super T>)"
type: "class"
typeParameters:
- name: "C"
- name: "T"
- name: "P"
metadata: {}
package: "com.azure.core.util.paging"
artifact: com.azure:azure-core:1.3.0-beta.1
