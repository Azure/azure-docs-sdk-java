### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.io.MergedStream
  id: MergedStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io
  children:
  - com.fasterxml.jackson.core.io.MergedStream.MergedStream(com.fasterxml.jackson.core.io.IOContext,java.io.InputStream,byte[],int,int)
  - com.fasterxml.jackson.core.io.MergedStream.available()
  - com.fasterxml.jackson.core.io.MergedStream.close()
  - com.fasterxml.jackson.core.io.MergedStream.mark(int)
  - com.fasterxml.jackson.core.io.MergedStream.markSupported()
  - com.fasterxml.jackson.core.io.MergedStream.read()
  - com.fasterxml.jackson.core.io.MergedStream.read(byte[])
  - com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int)
  - com.fasterxml.jackson.core.io.MergedStream.reset()
  - com.fasterxml.jackson.core.io.MergedStream.skip(long)
  langs:
  - java
  name: MergedStream
  nameWithType: MergedStream
  fullName: com.fasterxml.jackson.core.io.MergedStream
  type: Class
  package: com.fasterxml.jackson.core.io
  summary: Simple <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> implementation that is used to "unwind" some data previously read from an input stream; so that as long as some of that data remains, it's returned; but as long as it's read, we'll just use data from the underlying original stream. This is similar to <xref uid="" data-throw-if-not-resolved="false">java.io.PushbackInputStream</xref>, but here there's only one implicit pushback, when instance is constructed.
  syntax:
    content: public final class MergedStream extends InputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  inheritedMembers:
  - java.io.InputStream.available()
  - java.io.InputStream.close()
  - java.io.InputStream.mark(int)
  - java.io.InputStream.markSupported()
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.read()
  - java.io.InputStream.read(byte[])
  - java.io.InputStream.read(byte[],int,int)
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.reset()
  - java.io.InputStream.skip(long)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.io.MergedStream.MergedStream(com.fasterxml.jackson.core.io.IOContext,java.io.InputStream,byte[],int,int)
  id: MergedStream(com.fasterxml.jackson.core.io.IOContext,java.io.InputStream,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: MergedStream(IOContext ctxt, InputStream in, byte[] buf, int start, int end)
  nameWithType: MergedStream.MergedStream(IOContext ctxt, InputStream in, byte[] buf, int start, int end)
  fullName: com.fasterxml.jackson.core.io.MergedStream.MergedStream(IOContext ctxt, InputStream in, byte[] buf, int start, int end)
  overload: com.fasterxml.jackson.core.io.MergedStream.MergedStream*
  type: Constructor
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public MergedStream(IOContext ctxt, InputStream in, byte[] buf, int start, int end)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: in
      type: java.io.InputStream
    - id: buf
      type: byte[]
    - id: start
      type: int
    - id: end
      type: int
- uid: com.fasterxml.jackson.core.io.MergedStream.available()
  id: available()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: available()
  nameWithType: MergedStream.available()
  fullName: com.fasterxml.jackson.core.io.MergedStream.available()
  overload: com.fasterxml.jackson.core.io.MergedStream.available*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public int available()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: close()
  nameWithType: MergedStream.close()
  fullName: com.fasterxml.jackson.core.io.MergedStream.close()
  overload: com.fasterxml.jackson.core.io.MergedStream.close*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.mark(int)
  id: mark(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: mark(int readlimit)
  nameWithType: MergedStream.mark(int readlimit)
  fullName: com.fasterxml.jackson.core.io.MergedStream.mark(int readlimit)
  overload: com.fasterxml.jackson.core.io.MergedStream.mark*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public void mark(int readlimit)
    parameters:
    - id: readlimit
      type: int
- uid: com.fasterxml.jackson.core.io.MergedStream.markSupported()
  id: markSupported()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: markSupported()
  nameWithType: MergedStream.markSupported()
  fullName: com.fasterxml.jackson.core.io.MergedStream.markSupported()
  overload: com.fasterxml.jackson.core.io.MergedStream.markSupported*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public boolean markSupported()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.io.MergedStream.read()
  id: read()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: read()
  nameWithType: MergedStream.read()
  fullName: com.fasterxml.jackson.core.io.MergedStream.read()
  overload: com.fasterxml.jackson.core.io.MergedStream.read*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public int read()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.read(byte[])
  id: read(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: read(byte[] b)
  nameWithType: MergedStream.read(byte[] b)
  fullName: com.fasterxml.jackson.core.io.MergedStream.read(byte[] b)
  overload: com.fasterxml.jackson.core.io.MergedStream.read*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public int read(byte[] b)
    parameters:
    - id: b
      type: byte[]
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: read(byte[] b, int off, int len)
  nameWithType: MergedStream.read(byte[] b, int off, int len)
  fullName: com.fasterxml.jackson.core.io.MergedStream.read(byte[] b, int off, int len)
  overload: com.fasterxml.jackson.core.io.MergedStream.read*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public int read(byte[] b, int off, int len)
    parameters:
    - id: b
      type: byte[]
    - id: off
      type: int
    - id: len
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.reset()
  id: reset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: reset()
  nameWithType: MergedStream.reset()
  fullName: com.fasterxml.jackson.core.io.MergedStream.reset()
  overload: com.fasterxml.jackson.core.io.MergedStream.reset*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public void reset()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.skip(long)
  id: skip(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.MergedStream
  langs:
  - java
  name: skip(long n)
  nameWithType: MergedStream.skip(long n)
  fullName: com.fasterxml.jackson.core.io.MergedStream.skip(long n)
  overload: com.fasterxml.jackson.core.io.MergedStream.skip*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public long skip(long n)
    parameters:
    - id: n
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.io.IOContext
  name: IOContext
  nameWithType: IOContext
  fullName: com.fasterxml.jackson.core.io.IOContext
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.io.MergedStream.MergedStream*
  name: MergedStream
  nameWithType: MergedStream.MergedStream
  fullName: com.fasterxml.jackson.core.io.MergedStream.MergedStream
  package: com.fasterxml.jackson.core.io
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.io.MergedStream.available*
  name: available
  nameWithType: MergedStream.available
  fullName: com.fasterxml.jackson.core.io.MergedStream.available
  package: com.fasterxml.jackson.core.io
- uid: com.fasterxml.jackson.core.io.MergedStream.close*
  name: close
  nameWithType: MergedStream.close
  fullName: com.fasterxml.jackson.core.io.MergedStream.close
  package: com.fasterxml.jackson.core.io
- uid: com.fasterxml.jackson.core.io.MergedStream.mark*
  name: mark
  nameWithType: MergedStream.mark
  fullName: com.fasterxml.jackson.core.io.MergedStream.mark
  package: com.fasterxml.jackson.core.io
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.io.MergedStream.markSupported*
  name: markSupported
  nameWithType: MergedStream.markSupported
  fullName: com.fasterxml.jackson.core.io.MergedStream.markSupported
  package: com.fasterxml.jackson.core.io
- uid: com.fasterxml.jackson.core.io.MergedStream.read*
  name: read
  nameWithType: MergedStream.read
  fullName: com.fasterxml.jackson.core.io.MergedStream.read
  package: com.fasterxml.jackson.core.io
- uid: com.fasterxml.jackson.core.io.MergedStream.reset*
  name: reset
  nameWithType: MergedStream.reset
  fullName: com.fasterxml.jackson.core.io.MergedStream.reset
  package: com.fasterxml.jackson.core.io
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.io.MergedStream.skip*
  name: skip
  nameWithType: MergedStream.skip
  fullName: com.fasterxml.jackson.core.io.MergedStream.skip
  package: com.fasterxml.jackson.core.io
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.InputStream.mark(int)
  name: InputStream.mark(int)
  nameWithType: InputStream.mark(int)
  fullName: java.io.InputStream.mark(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.InputStream.close()
  name: InputStream.close()
  nameWithType: InputStream.close()
  fullName: java.io.InputStream.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.io.InputStream.markSupported()
  name: InputStream.markSupported()
  nameWithType: InputStream.markSupported()
  fullName: java.io.InputStream.markSupported()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.io.InputStream.read(byte[])
  name: InputStream.read(byte[])
  nameWithType: InputStream.read(byte[])
  fullName: java.io.InputStream.read(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.available()
  name: InputStream.available()
  nameWithType: InputStream.available()
  fullName: java.io.InputStream.available()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.InputStream.skip(long)
  name: InputStream.skip(long)
  nameWithType: InputStream.skip(long)
  fullName: java.io.InputStream.skip(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.InputStream.read()
  name: InputStream.read()
  nameWithType: InputStream.read()
  fullName: java.io.InputStream.read()
- uid: java.io.InputStream.read(byte[],int,int)
  name: InputStream.read(byte[],int,int)
  nameWithType: InputStream.read(byte[],int,int)
  fullName: java.io.InputStream.read(byte[],int,int)
- uid: java.io.InputStream.reset()
  name: InputStream.reset()
  nameWithType: InputStream.reset()
  fullName: java.io.InputStream.reset()
