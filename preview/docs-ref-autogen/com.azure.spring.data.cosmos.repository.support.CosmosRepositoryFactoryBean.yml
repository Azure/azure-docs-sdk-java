### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  id: CosmosRepositoryFactoryBean
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support
  children:
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.CosmosRepositoryFactoryBean(java.lang.Class<? extends T>)
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.afterPropertiesSet()
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.createRepositoryFactory()
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.getFactoryInstance()
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setCosmosOperations(com.azure.spring.data.cosmos.core.CosmosOperations)
  - com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)
  langs:
  - java
  name: CosmosRepositoryFactoryBean<T,S,ID>
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>
  type: Class
  package: com.azure.spring.data.cosmos.repository.support
  summary: Adapter for Springs <xref uid="" data-throw-if-not-resolved="false">FactoryBean</xref> interface to allow easy setup of cosmos repository factories via Spring configuration.
  syntax:
    content: public class CosmosRepositoryFactoryBean<T,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID>
    typeParameters:
    - id: T
    - id: S
    - id: ID
  inheritance:
  - java.lang.Object
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createRepositoryFactory()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getEntityInformation()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObjectType()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getPersistentEntity()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getQueryMethods()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getRepositoryInformation()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.isSingleton()
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanClassLoader(java.lang.ClassLoader)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setCustomImplementation(java.lang.Object)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setLazyInit(boolean)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass(java.lang.Class<?>)
  - org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryFragments(org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.CosmosRepositoryFactoryBean(java.lang.Class<? extends T>)
  id: CosmosRepositoryFactoryBean(java.lang.Class<? extends T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  langs:
  - java
  name: CosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.CosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.CosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.CosmosRepositoryFactoryBean*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.support
  summary: Creates a new <xref uid="org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport" data-throw-if-not-resolved="false">RepositoryFactoryBeanSupport</xref> for the given repository interface.
  syntax:
    content: public CosmosRepositoryFactoryBean(Class<? extends T> repositoryInterface)
    parameters:
    - id: repositoryInterface
      type: java.lang.Class<? extends T>
      description: must not be null.
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.afterPropertiesSet()
  id: afterPropertiesSet()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  langs:
  - java
  name: afterPropertiesSet()
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.afterPropertiesSet()
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.afterPropertiesSet()
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.afterPropertiesSet*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: public void afterPropertiesSet()
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.createRepositoryFactory()
  id: createRepositoryFactory()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  langs:
  - java
  name: createRepositoryFactory()
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.createRepositoryFactory()
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.createRepositoryFactory()
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.createRepositoryFactory*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: protected final RepositoryFactorySupport createRepositoryFactory()
    return:
      type: org.springframework.data.repository.core.support.RepositoryFactorySupport
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.getFactoryInstance()
  id: getFactoryInstance()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  langs:
  - java
  name: getFactoryInstance()
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.getFactoryInstance()
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.getFactoryInstance()
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.getFactoryInstance*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: protected RepositoryFactorySupport getFactoryInstance()
    return:
      type: org.springframework.data.repository.core.support.RepositoryFactorySupport
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setCosmosOperations(com.azure.spring.data.cosmos.core.CosmosOperations)
  id: setCosmosOperations(com.azure.spring.data.cosmos.core.CosmosOperations)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  langs:
  - java
  name: setCosmosOperations(CosmosOperations operations)
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.setCosmosOperations(CosmosOperations operations)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.setCosmosOperations(CosmosOperations operations)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setCosmosOperations*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  summary: Set cosmos operation
  syntax:
    content: public void setCosmosOperations(CosmosOperations operations)
    parameters:
    - id: operations
      type: com.azure.spring.data.cosmos.core.CosmosOperations
      description: for cosmos operations
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)
  id: setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean
  langs:
  - java
  name: setMappingContext(MappingContext<?,?> mappingContext)
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.setMappingContext(MappingContext<?,?> mappingContext)
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.setMappingContext(MappingContext<?,?> mappingContext)
  overload: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setMappingContext*
  type: Method
  package: com.azure.spring.data.cosmos.repository.support
  syntax:
    content: protected void setMappingContext(MappingContext<?,?> mappingContext)
    parameters:
    - id: mappingContext
      type: org.springframework.data.mapping.context.MappingContext<?,?>
references:
- uid: java.lang.Class<? extends T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.CosmosRepositoryFactoryBean*
  name: CosmosRepositoryFactoryBean
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.CosmosRepositoryFactoryBean
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.CosmosRepositoryFactoryBean
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.spring.data.cosmos.core.CosmosOperations
  name: CosmosOperations
  nameWithType: CosmosOperations
  fullName: com.azure.spring.data.cosmos.core.CosmosOperations
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setCosmosOperations*
  name: setCosmosOperations
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.setCosmosOperations
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.setCosmosOperations
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.repository.core.support.RepositoryFactorySupport
  spec.java:
  - uid: org.springframework.data.repository.core.support.RepositoryFactorySupport
    name: RepositoryFactorySupport
    fullName: org.springframework.data.repository.core.support.RepositoryFactorySupport
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.createRepositoryFactory*
  name: createRepositoryFactory
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.createRepositoryFactory
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.createRepositoryFactory
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.getFactoryInstance*
  name: getFactoryInstance
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.getFactoryInstance
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.getFactoryInstance
  package: com.azure.spring.data.cosmos.repository.support
- uid: org.springframework.data.mapping.context.MappingContext<?,?>
  spec.java:
  - uid: org.springframework.data.mapping.context.MappingContext
    name: MappingContext
    fullName: org.springframework.data.mapping.context.MappingContext
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.setMappingContext*
  name: setMappingContext
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.setMappingContext
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.setMappingContext
  package: com.azure.spring.data.cosmos.repository.support
- uid: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean.afterPropertiesSet*
  name: afterPropertiesSet
  nameWithType: CosmosRepositoryFactoryBean<T,S,ID>.afterPropertiesSet
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosRepositoryFactoryBean<T,S,ID>.afterPropertiesSet
  package: com.azure.spring.data.cosmos.repository.support
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: S
  name: S
  nameWithType: S
  fullName: S
- uid: ID
  name: ID
  nameWithType: ID
  fullName: ID
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport<T,S,ID>
  name: RepositoryFactoryBeanSupport<T,S,ID>
  nameWithType: RepositoryFactoryBeanSupport<T,S,ID>
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport<T,S,ID>
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass(java.lang.Class<?>)
  name: RepositoryFactoryBeanSupport.setRepositoryBaseClass(Class<?>)
  nameWithType: RepositoryFactoryBeanSupport.setRepositoryBaseClass(Class<?>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass(java.lang.Class<?>)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)
  name: RepositoryFactoryBeanSupport.setQueryLookupStrategyKey(QueryLookupStrategy.Key)
  nameWithType: RepositoryFactoryBeanSupport.setQueryLookupStrategyKey(QueryLookupStrategy.Key)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setQueryLookupStrategyKey(org.springframework.data.repository.query.QueryLookupStrategy.Key)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
  name: RepositoryFactoryBeanSupport.setApplicationEventPublisher(ApplicationEventPublisher)
  nameWithType: RepositoryFactoryBeanSupport.setApplicationEventPublisher(ApplicationEventPublisher)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getRepositoryInformation()
  name: RepositoryFactoryBeanSupport.getRepositoryInformation()
  nameWithType: RepositoryFactoryBeanSupport.getRepositoryInformation()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getRepositoryInformation()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.isSingleton()
  name: RepositoryFactoryBeanSupport.isSingleton()
  nameWithType: RepositoryFactoryBeanSupport.isSingleton()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.isSingleton()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setCustomImplementation(java.lang.Object)
  name: RepositoryFactoryBeanSupport.setCustomImplementation(Object)
  nameWithType: RepositoryFactoryBeanSupport.setCustomImplementation(Object)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setCustomImplementation(java.lang.Object)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getQueryMethods()
  name: RepositoryFactoryBeanSupport.getQueryMethods()
  nameWithType: RepositoryFactoryBeanSupport.getQueryMethods()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getQueryMethods()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObjectType()
  name: RepositoryFactoryBeanSupport.getObjectType()
  nameWithType: RepositoryFactoryBeanSupport.getObjectType()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObjectType()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)
  name: RepositoryFactoryBeanSupport.setNamedQueries(NamedQueries)
  nameWithType: RepositoryFactoryBeanSupport.setNamedQueries(NamedQueries)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setNamedQueries(org.springframework.data.repository.core.NamedQueries)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)
  name: RepositoryFactoryBeanSupport.setBeanFactory(BeanFactory)
  nameWithType: RepositoryFactoryBeanSupport.setBeanFactory(BeanFactory)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanFactory(org.springframework.beans.factory.BeanFactory)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createRepositoryFactory()
  name: RepositoryFactoryBeanSupport.createRepositoryFactory()
  nameWithType: RepositoryFactoryBeanSupport.createRepositoryFactory()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.createRepositoryFactory()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)
  name: RepositoryFactoryBeanSupport.setMappingContext(MappingContext<?,?>)
  nameWithType: RepositoryFactoryBeanSupport.setMappingContext(MappingContext<?,?>)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext<?,?>)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet()
  name: RepositoryFactoryBeanSupport.afterPropertiesSet()
  nameWithType: RepositoryFactoryBeanSupport.afterPropertiesSet()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
  name: RepositoryFactoryBeanSupport.setEvaluationContextProvider(QueryMethodEvaluationContextProvider)
  nameWithType: RepositoryFactoryBeanSupport.setEvaluationContextProvider(QueryMethodEvaluationContextProvider)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setEvaluationContextProvider(org.springframework.data.repository.query.QueryMethodEvaluationContextProvider)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject()
  name: RepositoryFactoryBeanSupport.getObject()
  nameWithType: RepositoryFactoryBeanSupport.getObject()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getObject()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getPersistentEntity()
  name: RepositoryFactoryBeanSupport.getPersistentEntity()
  nameWithType: RepositoryFactoryBeanSupport.getPersistentEntity()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getPersistentEntity()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getEntityInformation()
  name: RepositoryFactoryBeanSupport.getEntityInformation()
  nameWithType: RepositoryFactoryBeanSupport.getEntityInformation()
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.getEntityInformation()
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setLazyInit(boolean)
  name: RepositoryFactoryBeanSupport.setLazyInit(boolean)
  nameWithType: RepositoryFactoryBeanSupport.setLazyInit(boolean)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setLazyInit(boolean)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryFragments(org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
  name: RepositoryFactoryBeanSupport.setRepositoryFragments(RepositoryComposition.RepositoryFragments)
  nameWithType: RepositoryFactoryBeanSupport.setRepositoryFragments(RepositoryComposition.RepositoryFragments)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryFragments(org.springframework.data.repository.core.support.RepositoryComposition.RepositoryFragments)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanClassLoader(java.lang.ClassLoader)
  name: RepositoryFactoryBeanSupport.setBeanClassLoader(ClassLoader)
  nameWithType: RepositoryFactoryBeanSupport.setBeanClassLoader(ClassLoader)
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setBeanClassLoader(java.lang.ClassLoader)
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: org.springframework.data.mapping.context.MappingContext
  name: MappingContext
  nameWithType: MappingContext
  fullName: org.springframework.data.mapping.context.MappingContext
- uid: T,S,ID
  name: T,S,ID
  nameWithType: T,S,ID
  fullName: T,S,ID
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport
  name: RepositoryFactoryBeanSupport
  nameWithType: RepositoryFactoryBeanSupport
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass(java.lang.Class
  name: RepositoryFactoryBeanSupport.setRepositoryBaseClass(Class
  nameWithType: RepositoryFactoryBeanSupport.setRepositoryBaseClass(Class
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setRepositoryBaseClass(java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: ?,?>)
  name: ?,?>)
  nameWithType: ?,?>)
  fullName: ?,?>)
- uid: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext
  name: RepositoryFactoryBeanSupport.setMappingContext(MappingContext
  nameWithType: RepositoryFactoryBeanSupport.setMappingContext(MappingContext
  fullName: org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.setMappingContext(org.springframework.data.mapping.context.MappingContext
