### YamlMime:JavaType
uid: "com.azure.messaging.eventhubs.EventHubClientBuilder"
fullName: "com.azure.messaging.eventhubs.EventHubClientBuilder"
name: "EventHubClientBuilder"
nameWithType: "EventHubClientBuilder"
summary: "This class provides a fluent builder API to aid the instantiation of <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref>, <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerClient\"></xref>, <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubConsumerAsyncClient\"></xref>, and <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubConsumerClient\"></xref>. Calling any of the `.build*Client()` methods will create an instance of the respective client.\n\n**Credentials are required** to perform operations against Azure Event Hubs. They can be set by using one of the following methods:\n\n *  <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.connectionString(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"connectionString(String)\"></xref> with a connection string to a specific Event Hub.\n *  <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.connectionString(java.lang.String,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"connectionString(String, String)\"></xref> with an Event Hub *namespace* connection string and the Event Hub name.\n *  <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.credential(java.lang.String,java.lang.String,com.azure.core.credential.TokenCredential)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"credential(String, String, TokenCredential)\"></xref> with the fully qualified namespace, Event Hub name, and a set of credentials authorized to use the Event Hub.\n\nIn addition, **consumer group** is required when creating <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubConsumerAsyncClient\"></xref> or <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubConsumerClient\"></xref>.\n\n**Creating an asynchronous <xref uid=\"com.azure.messaging.eventhubs.EventHubProducerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubProducerAsyncClient\"></xref> using Event Hubs namespace connection string** \n\nIn the sample, the namespace connection string is used to create an asynchronous Event Hub producer. Notice that `\"EntityPath\"` **is not** a component in the connection string.\n\n```java\n// The required parameter is a way to authenticate with Event Hubs using credentials.\n // The connectionString provides a way to authenticate with Event Hub.\n EventHubProducerAsyncClient producer = new EventHubClientBuilder()\n     .connectionString(\n         \"Endpoint={fully-qualified-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key}\",\n         \"event-hub-name\")\n     .buildAsyncProducerClient();\n```\n\n**Creating a synchronous <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumerClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"EventHubConsumerClient\"></xref> using an Event Hub instance connection string** \n\nIn the sample, the namespace connection string is used to create a synchronous Event Hub consumer. Notice that `\"EntityPath\"` **is** in the connection string.\n\n```java\n// The required parameters are `consumerGroup`, and a way to authenticate with Event Hubs using credentials.\n EventHubConsumerClient consumer = new EventHubClientBuilder()\n     .connectionString(\n         \"Endpoint={eh-namespace};SharedAccessKeyName={policy-name};SharedAccessKey={key};Entity-Path={hub-name}\")\n     .consumerGroup(\"$DEFAULT\")\n     .buildConsumerClient();\n```\n\n**Creating producers and consumers that share the same connection**\n\nBy default, a dedicated connection is created for each producer and consumer created from the builder. If users wish to use the same underlying connection, they can toggle <xref uid=\"com.azure.messaging.eventhubs.EventHubClientBuilder.shareConnection()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"shareConnection()\"></xref>.\n\n```java\n// Toggling `shareConnection` instructs the builder to use the same underlying connection\n // for each consumer or producer created using the same builder instance.\n EventHubClientBuilder builder = new EventHubClientBuilder()\n     .connectionString(\"event-hubs-instance-connection-string\")\n     .shareConnection();\n \n // Both the producer and consumer created share the same underlying connection.\n EventHubProducerAsyncClient producer = builder.buildAsyncProducerClient();\n EventHubConsumerAsyncClient consumer = builder\n     .consumerGroup(\"my-consumer-group\")\n     .buildAsyncConsumerClient();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class EventHubClientBuilder"
constructors:
- "com.azure.messaging.eventhubs.EventHubClientBuilder.EventHubClientBuilder()"
fields:
- "com.azure.messaging.eventhubs.EventHubClientBuilder.DEFAULT_CONSUMER_GROUP_NAME"
methods:
- "com.azure.messaging.eventhubs.EventHubClientBuilder.buildAsyncConsumerClient()"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.buildAsyncProducerClient()"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.buildConsumerClient()"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.buildProducerClient()"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.configuration(com.azure.core.util.Configuration)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.connectionString(java.lang.String)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.connectionString(java.lang.String,java.lang.String)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.consumerGroup(java.lang.String)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.credential(java.lang.String,java.lang.String,com.azure.core.credential.TokenCredential)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.enableIdempotentPartitionPublishing()"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.initialPartitionPublishingStates(java.util.Map<java.lang.String,com.azure.messaging.eventhubs.PartitionPublishingProperties>)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.prefetchCount(int)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.proxyOptions(com.azure.core.amqp.ProxyOptions)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.retry(com.azure.core.amqp.AmqpRetryOptions)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.serializer(com.azure.core.util.serializer.ObjectSerializer)"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.shareConnection()"
- "com.azure.messaging.eventhubs.EventHubClientBuilder.transportType(com.azure.core.amqp.AmqpTransportType)"
type: "class"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.4.0-beta.1
