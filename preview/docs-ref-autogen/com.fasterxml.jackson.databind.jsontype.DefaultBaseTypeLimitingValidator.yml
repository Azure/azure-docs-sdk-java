### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  id: DefaultBaseTypeLimitingValidator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype
  children:
  - com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator()
  - com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  langs:
  - java
  name: DefaultBaseTypeLimitingValidator
  nameWithType: DefaultBaseTypeLimitingValidator
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  type: Class
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    <xref uid="com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator" data-throw-if-not-resolved="false">PolymorphicTypeValidator</xref> that will only allow polymorphic handling if the base type is NOT one of potential dangerous base types (see <xref uid="com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType*" data-throw-if-not-resolved="false">#isUnsafeBaseType</xref> for specific list of such base types). No further validation is performed on subtype.


    Note that when using potentially unsafe base type like <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref> a custom implementation (or subtype with override) is needed. Most commonly subclasses would override both <xref uid="com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType*" data-throw-if-not-resolved="false">#isUnsafeBaseType</xref> and <xref uid="com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType*" data-throw-if-not-resolved="false">#isSafeSubType</xref>: former to allow all (or just more) base types, and latter to add actual validation of subtype.
  syntax:
    content: public class DefaultBaseTypeLimitingValidator extends PolymorphicTypeValidator implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator()
  id: DefaultBaseTypeLimitingValidator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  langs:
  - java
  name: DefaultBaseTypeLimitingValidator()
  nameWithType: DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator()
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator()
  overload: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator*
  type: Constructor
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public DefaultBaseTypeLimitingValidator()
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  id: isSafeSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  langs:
  - java
  name: isSafeSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
  nameWithType: DefaultBaseTypeLimitingValidator.isSafeSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
  overload: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: 'Helper called to determine whether given actual subtype is considered safe to process: this will only be called if subtype was considered acceptable earlier.'
  syntax:
    content: protected boolean isSafeSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<?>
      description: Current mapper configuration
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Base type of sub type (validated earlier)
    - id: subType
      type: com.fasterxml.jackson.databind.JavaType
      description: Sub type to test
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  id: isUnsafeBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  langs:
  - java
  name: isUnsafeBaseType(MapperConfig<?> config, JavaType baseType)
  nameWithType: DefaultBaseTypeLimitingValidator.isUnsafeBaseType(MapperConfig<?> config, JavaType baseType)
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType(MapperConfig<?> config, JavaType baseType)
  overload: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Helper method called to determine if the given base type is known to be problematic regarding possible "gadget types". Currently includes following types:

     *  <xref uid="java.lang.Object" data-throw-if-not-resolved="false">java.lang.Object</xref>
     *  <xref uid="java.io.Closeable" data-throw-if-not-resolved="false">java.io.Closeable</xref>
     *  <xref uid="java.io.Serializable" data-throw-if-not-resolved="false">java.io.Serializable</xref>
     *  <xref uid="" data-throw-if-not-resolved="false">java.lang.AutoCloseable</xref>
     *  <xref uid="java.lang.Cloneable" data-throw-if-not-resolved="false">java.lang.Cloneable</xref>
     *  <xref uid="" data-throw-if-not-resolved="false">java.util.logging.Handler</xref>
     *  <xref uid="" data-throw-if-not-resolved="false">javax.naming.Referenceable</xref>
     *  <xref uid="" data-throw-if-not-resolved="false">javax.sql.DataSource</xref>

    which are JDK-included super types of at least one gadget type (not necessarily included in JDK)
  syntax:
    content: protected boolean isUnsafeBaseType(MapperConfig<?> config, JavaType baseType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<?>
      description: Current mapper configuration
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Base type to test
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  id: validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  langs:
  - java
  name: validateBaseType(MapperConfig<?> config, JavaType baseType)
  nameWithType: DefaultBaseTypeLimitingValidator.validateBaseType(MapperConfig<?> config, JavaType baseType)
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateBaseType(MapperConfig<?> config, JavaType baseType)
  overload: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateBaseType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called when a property with polymorphic value is encountered, and a `TypeResolverBuilder` is needed. Intent is to allow early determination of cases where subtyping is completely denied (for example for security reasons), or, conversely, allowed for allow subtypes (when base type guarantees that all subtypes are known to be safe). Check can be thought of as both optimization (for latter case) and eager-fail (for former case) to give better feedback.
  syntax:
    content: public PolymorphicTypeValidator.Validity validateBaseType(MapperConfig<?> config, JavaType baseType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<?>
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
  id: validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  langs:
  - java
  name: validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)
  nameWithType: DefaultBaseTypeLimitingValidator.validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)
  overload: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method called after intended class name for subtype has been read (and in case of minimal class name, expanded to fully-qualified class name) but before attempt is made to look up actual <xref uid="java.lang.Class" data-throw-if-not-resolved="false">java.lang.Class</xref> or <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref>. Validator may be able to determine validity of eventual type (and return <xref uid="" data-throw-if-not-resolved="false">Validity#ALLOWED</xref> or <xref uid="" data-throw-if-not-resolved="false">Validity#DENIED</xref>) or, if not able to, can defer validation to actual resolved type by returning <xref uid="" data-throw-if-not-resolved="false">Validity#INDETERMINATE</xref>.


    Validator may also choose to indicate denial by throwing a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> (such as <xref uid="com.fasterxml.jackson.databind.exc.InvalidTypeIdException" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.exc.InvalidTypeIdException</xref>)
  syntax:
    content: public PolymorphicTypeValidator.Validity validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<?>
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: subClassName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  id: validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator
  langs:
  - java
  name: validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
  nameWithType: DefaultBaseTypeLimitingValidator.validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
  overload: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubType*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Method called after class name has been resolved to actual type, in cases where previous call to <xref uid="com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName*" data-throw-if-not-resolved="false">#validateSubClassName</xref> returned <xref uid="" data-throw-if-not-resolved="false">Validity#INDETERMINATE</xref>. Validator should be able to determine validity and return appropriate <xref uid="" data-throw-if-not-resolved="false">Validity</xref> value, although it may also


    Validator may also choose to indicate denial by throwing a <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> (such as <xref uid="com.fasterxml.jackson.databind.exc.InvalidTypeIdException" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.exc.InvalidTypeIdException</xref>)
  syntax:
    content: public PolymorphicTypeValidator.Validity validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.cfg.MapperConfig<?>
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: subType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity
references:
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator*
  name: DefaultBaseTypeLimitingValidator
  nameWithType: DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.DefaultBaseTypeLimitingValidator
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.cfg.MapperConfig
    name: MapperConfig
    fullName: com.fasterxml.jackson.databind.cfg.MapperConfig
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity
  name: PolymorphicTypeValidator.Validity
  nameWithType: PolymorphicTypeValidator.Validity
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.Validity
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateBaseType*
  name: validateBaseType
  nameWithType: DefaultBaseTypeLimitingValidator.validateBaseType
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateBaseType
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName*
  name: validateSubClassName
  nameWithType: DefaultBaseTypeLimitingValidator.validateSubClassName
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubClassName
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubType*
  name: validateSubType
  nameWithType: DefaultBaseTypeLimitingValidator.validateSubType
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.validateSubType
  package: com.fasterxml.jackson.databind.jsontype
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType*
  name: isUnsafeBaseType
  nameWithType: DefaultBaseTypeLimitingValidator.isUnsafeBaseType
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isUnsafeBaseType
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType*
  name: isSafeSubType
  nameWithType: DefaultBaseTypeLimitingValidator.isSafeSubType
  fullName: com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.isSafeSubType
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
  name: PolymorphicTypeValidator
  nameWithType: PolymorphicTypeValidator
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
  name: PolymorphicTypeValidator.validateBaseType(MapperConfig<?>,JavaType)
  nameWithType: PolymorphicTypeValidator.validateBaseType(MapperConfig<?>,JavaType)
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: PolymorphicTypeValidator.validateSubClassName(MapperConfig<?>,JavaType,String)
  nameWithType: PolymorphicTypeValidator.validateSubClassName(MapperConfig<?>,JavaType,String)
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  name: PolymorphicTypeValidator.validateSubType(MapperConfig<?>,JavaType,JavaType)
  nameWithType: PolymorphicTypeValidator.validateSubType(MapperConfig<?>,JavaType,JavaType)
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.cfg.MapperConfig
  name: MapperConfig
  nameWithType: MapperConfig
  fullName: com.fasterxml.jackson.databind.cfg.MapperConfig
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: ?>,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType)
  nameWithType: ?>,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig
  name: PolymorphicTypeValidator.validateBaseType(MapperConfig
  nameWithType: PolymorphicTypeValidator.validateBaseType(MapperConfig
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateBaseType(com.fasterxml.jackson.databind.cfg.MapperConfig
- uid: ?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: ?>,JavaType,String)
  nameWithType: ?>,JavaType,String)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig
  name: PolymorphicTypeValidator.validateSubClassName(MapperConfig
  nameWithType: PolymorphicTypeValidator.validateSubClassName(MapperConfig
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig
- uid: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig
  name: PolymorphicTypeValidator.validateSubType(MapperConfig
  nameWithType: PolymorphicTypeValidator.validateSubType(MapperConfig
  fullName: com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator.validateSubType(com.fasterxml.jackson.databind.cfg.MapperConfig
- uid: ?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType,JavaType)
  nameWithType: ?>,JavaType,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
