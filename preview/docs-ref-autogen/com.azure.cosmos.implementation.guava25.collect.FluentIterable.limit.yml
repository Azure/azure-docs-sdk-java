### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit*"
fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.limit"
name: "limit"
nameWithType: "FluentIterable<E>.limit"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit(int)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.limit(int maxSize)"
  name: "limit(int maxSize)"
  nameWithType: "FluentIterable<E>.limit(int maxSize)"
  summary: "Creates a fluent iterable with the first `size` elements of this fluent iterable. If this fluent iterable does not contain that many elements, the returned fluent iterable will have the same behavior as this fluent iterable. The returned fluent iterable's iterator supports `remove()` if this fluent iterable's iterator does.\n\n**`Stream` equivalent:** <xref uid=\"java.util.stream.Stream.limit\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream#limit\"></xref> (same)."
  parameters:
  - description: "the maximum number of elements in the returned fluent iterable"
    name: "maxSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public final FluentIterable<E> limit(int maxSize)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
