### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  id: ReactiveCosmosOperations
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core
  children:
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>deleteEntity(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(java.lang.String,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(T,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert(T)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert(java.lang.String,T)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count(java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteAll(java.lang.String,java.lang.Class<?>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteContainer(java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.existsById(java.lang.Object,java.lang.Class<?>,java.lang.String)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getContainerName(java.lang.Class<?>)
  - com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getConverter()
  langs:
  - java
  name: ReactiveCosmosOperations
  nameWithType: ReactiveCosmosOperations
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  type: Interface
  package: com.azure.spring.data.cosmos.core
  summary: Operation class of reactive cosmos
  syntax:
    content: public interface ReactiveCosmosOperations
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>delete(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: ReactiveCosmosOperations.<T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>delete(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.delete*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete items matching query
  syntax:
    content: public abstract Flux<T> <T>delete(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: reactor.core.publisher.Flux<T>
      description: Flux of results
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>deleteEntity(java.lang.String,T)
  id: <T>deleteEntity(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>deleteEntity(String containerName, T entity)
  nameWithType: ReactiveCosmosOperations.<T>deleteEntity(String containerName, T entity)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>deleteEntity(String containerName, T entity)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteEntity*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete using entity
  syntax:
    content: public abstract Mono<Void> <T>deleteEntity(String containerName, T entity)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: entity
      type: T
      description: the entity object
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void Mono
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  id: <T>find(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<T>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>find(CosmosQuery query, Class<T> domainType, String containerName)
  nameWithType: ReactiveCosmosOperations.<T>find(CosmosQuery query, Class<T> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>find(CosmosQuery query, Class<T> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.find*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find items
  syntax:
    content: public abstract Flux<T> <T>find(CosmosQuery query, Class<T> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: reactor.core.publisher.Flux<T>
      description: Flux of results
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  id: <T>findAll(com.azure.cosmos.models.PartitionKey,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>findAll(PartitionKey partitionKey, Class<T> domainType)
  nameWithType: ReactiveCosmosOperations.<T>findAll(PartitionKey partitionKey, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(PartitionKey partitionKey, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find all items in a given container with partition key
  syntax:
    content: public abstract Flux<T> <T>findAll(PartitionKey partitionKey, Class<T> domainType)
    parameters:
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: partition Key
    - id: domainType
      type: java.lang.Class<T>
      description: the domainType
    return:
      type: reactor.core.publisher.Flux<T>
      description: Flux of results
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(java.lang.Class<T>)
  id: <T>findAll(java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>findAll(Class<T> domainType)
  nameWithType: ReactiveCosmosOperations.<T>findAll(Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find all items in a given container
  syntax:
    content: public abstract Flux<T> <T>findAll(Class<T> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<T>
      description: the domainType
    return:
      type: reactor.core.publisher.Flux<T>
      description: Flux of results
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(java.lang.String,java.lang.Class<T>)
  id: <T>findAll(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>findAll(String containerName, Class<T> domainType)
  nameWithType: ReactiveCosmosOperations.<T>findAll(String containerName, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll(String containerName, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find all items in a given container
  syntax:
    content: public abstract Flux<T> <T>findAll(String containerName, Class<T> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the containerName
    - id: domainType
      type: java.lang.Class<T>
      description: the domainType
    return:
      type: reactor.core.publisher.Flux<T>
      description: Flux of results
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>)
  id: <T>findById(java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>findById(Object id, Class<T> domainType)
  nameWithType: ReactiveCosmosOperations.<T>findById(Object id, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(Object id, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find by id
  syntax:
    content: public abstract Mono<T> <T>findById(Object id, Class<T> domainType)
    parameters:
    - id: id
      type: java.lang.Object
      description: the id
    - id: domainType
      type: java.lang.Class<T>
      description: the domainType
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  id: <T>findById(java.lang.Object,java.lang.Class<T>,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  nameWithType: ReactiveCosmosOperations.<T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find by id
  syntax:
    content: public abstract Mono<T> <T>findById(Object id, Class<T> domainType, PartitionKey partitionKey)
    parameters:
    - id: id
      type: java.lang.Object
      description: the id
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: partition Key
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  id: <T>findById(java.lang.String,java.lang.Object,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>findById(String containerName, Object id, Class<T> domainType)
  nameWithType: ReactiveCosmosOperations.<T>findById(String containerName, Object id, Class<T> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById(String containerName, Object id, Class<T> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Find by id
  syntax:
    content: public abstract Mono<T> <T>findById(String containerName, Object id, Class<T> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the containername
    - id: id
      type: java.lang.Object
      description: the id
    - id: domainType
      type: java.lang.Class<T>
      description: type class
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(T,com.azure.cosmos.models.PartitionKey)
  id: <T>insert(T,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>insert(T objectToSave, PartitionKey partitionKey)
  nameWithType: ReactiveCosmosOperations.<T>insert(T objectToSave, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(T objectToSave, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Insert
  syntax:
    content: public abstract Mono<T> <T>insert(T objectToSave, PartitionKey partitionKey)
    parameters:
    - id: objectToSave
      type: T
      description: the object to save
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(java.lang.String,T)
  id: <T>insert(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>insert(String containerName, T objectToSave)
  nameWithType: ReactiveCosmosOperations.<T>insert(String containerName, T objectToSave)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(String containerName, T objectToSave)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Insert
  syntax:
    content: public abstract Mono<T> <T>insert(String containerName, T objectToSave)
    parameters:
    - id: containerName
      type: java.lang.String
      description: must not be null
    - id: objectToSave
      type: T
      description: must not be null
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  id: <T>insert(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>insert(String containerName, Object objectToSave, PartitionKey partitionKey)
  nameWithType: ReactiveCosmosOperations.<T>insert(String containerName, Object objectToSave, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert(String containerName, Object objectToSave, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.insert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Insert
  syntax:
    content: public abstract Mono<T> <T>insert(String containerName, Object objectToSave, PartitionKey partitionKey)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: objectToSave
      type: java.lang.Object
      description: the object to save
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  id: <T>runQuery(com.azure.cosmos.models.SqlQuerySpec,java.lang.Class<?>,java.lang.Class<T>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  nameWithType: ReactiveCosmosOperations.<T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.runQuery*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Run the query.
  syntax:
    content: public abstract Flux<T> <T>runQuery(SqlQuerySpec querySpec, Class<?> domainType, Class<T> returnType)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query spec
    - id: domainType
      type: java.lang.Class<?>
      description: the domain type
    - id: returnType
      type: java.lang.Class<T>
      description: the return type
    return:
      type: reactor.core.publisher.Flux<T>
      description: the flux
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert(T)
  id: <T>upsert(T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>upsert(T object)
  nameWithType: ReactiveCosmosOperations.<T>upsert(T object)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert(T object)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.upsert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upsert an item with partition key
  syntax:
    content: public abstract Mono<T> <T>upsert(T object)
    parameters:
    - id: object
      type: T
      description: the object to upsert
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert(java.lang.String,T)
  id: <T>upsert(java.lang.String,T)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: <T>upsert(String containerName, T object)
  nameWithType: ReactiveCosmosOperations.<T>upsert(String containerName, T object)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert(String containerName, T object)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.upsert*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Upsert an item to container with partition key
  syntax:
    content: public abstract Mono<T> <T>upsert(String containerName, T object)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: object
      type: T
      description: the object to save
    return:
      type: reactor.core.publisher.Mono<T>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  id: count(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: count(CosmosQuery query, String containerName)
  nameWithType: ReactiveCosmosOperations.count(CosmosQuery query, String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count(CosmosQuery query, String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Count
  syntax:
    content: public abstract Mono<Long> count(CosmosQuery query, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: reactor.core.publisher.Mono<java.lang.Long>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count(java.lang.String)
  id: count(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: count(String containerName)
  nameWithType: ReactiveCosmosOperations.count(String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count(String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Count
  syntax:
    content: public abstract Mono<Long> count(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: reactor.core.publisher.Mono<java.lang.Long>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  id: createContainerIfNotExists(com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  nameWithType: ReactiveCosmosOperations.createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.createContainerIfNotExists(CosmosEntityInformation<?,?> information)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.createContainerIfNotExists*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Creates a container if it doesn't already exist
  syntax:
    content: public abstract Mono<CosmosContainerResponse> createContainerIfNotExists(CosmosEntityInformation<?,?> information)
    parameters:
    - id: information
      type: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>
      description: the CosmosEntityInformation
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
      description: Mono of CosmosContainerResponse
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteAll(java.lang.String,java.lang.Class<?>)
  id: deleteAll(java.lang.String,java.lang.Class<?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: deleteAll(String containerName, Class<?> domainType)
  nameWithType: ReactiveCosmosOperations.deleteAll(String containerName, Class<?> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteAll(String containerName, Class<?> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteAll*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete all items in a container
  syntax:
    content: public abstract Mono<Void> deleteAll(String containerName, Class<?> domainType)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: domainType
      type: java.lang.Class<?>
      description: the domainType
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void Mono
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  id: deleteById(java.lang.String,java.lang.Object,com.azure.cosmos.models.PartitionKey)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: deleteById(String containerName, Object id, PartitionKey partitionKey)
  nameWithType: ReactiveCosmosOperations.deleteById(String containerName, Object id, PartitionKey partitionKey)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteById(String containerName, Object id, PartitionKey partitionKey)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete an item by id
  syntax:
    content: public abstract Mono<Void> deleteById(String containerName, Object id, PartitionKey partitionKey)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
    - id: id
      type: java.lang.Object
      description: the id
    - id: partitionKey
      type: com.azure.cosmos.models.PartitionKey
      description: the partition key
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void Mono
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteContainer(java.lang.String)
  id: deleteContainer(java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: deleteContainer(String containerName)
  nameWithType: ReactiveCosmosOperations.deleteContainer(String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteContainer(String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteContainer*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Delete container
  syntax:
    content: public abstract void deleteContainer(String containerName)
    parameters:
    - id: containerName
      type: java.lang.String
      description: the container name
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  id: exists(com.azure.spring.data.cosmos.core.query.CosmosQuery,java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: exists(CosmosQuery query, Class<?> domainType, String containerName)
  nameWithType: ReactiveCosmosOperations.exists(CosmosQuery query, Class<?> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.exists(CosmosQuery query, Class<?> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.exists*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Exists
  syntax:
    content: public abstract Mono<Boolean> exists(CosmosQuery query, Class<?> domainType, String containerName)
    parameters:
    - id: query
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
      description: the document query
    - id: domainType
      type: java.lang.Class<?>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.existsById(java.lang.Object,java.lang.Class<?>,java.lang.String)
  id: existsById(java.lang.Object,java.lang.Class<?>,java.lang.String)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: existsById(Object id, Class<?> domainType, String containerName)
  nameWithType: ReactiveCosmosOperations.existsById(Object id, Class<?> domainType, String containerName)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.existsById(Object id, Class<?> domainType, String containerName)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.existsById*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Exists
  syntax:
    content: public abstract Mono<Boolean> existsById(Object id, Class<?> domainType, String containerName)
    parameters:
    - id: id
      type: java.lang.Object
      description: the id
    - id: domainType
      type: java.lang.Class<?>
      description: type class
    - id: containerName
      type: java.lang.String
      description: the container name
    return:
      type: reactor.core.publisher.Mono<java.lang.Boolean>
      description: Mono of result
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getContainerName(java.lang.Class<?>)
  id: getContainerName(java.lang.Class<?>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: getContainerName(Class<?> domainType)
  nameWithType: ReactiveCosmosOperations.getContainerName(Class<?> domainType)
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getContainerName(Class<?> domainType)
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getContainerName*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: Get container name
  syntax:
    content: public abstract String getContainerName(Class<?> domainType)
    parameters:
    - id: domainType
      type: java.lang.Class<?>
      description: the domainType
    return:
      type: java.lang.String
      description: container name
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getConverter()
  id: getConverter()
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations
  langs:
  - java
  name: getConverter()
  nameWithType: ReactiveCosmosOperations.getConverter()
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getConverter()
  overload: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getConverter*
  type: Method
  package: com.azure.spring.data.cosmos.core
  summary: To get converter
  syntax:
    content: public abstract MappingCosmosConverter getConverter()
    return:
      type: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
      description: MappingCosmosConverter
references:
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getContainerName*
  name: getContainerName
  nameWithType: ReactiveCosmosOperations.getContainerName
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getContainerName
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation<?,?>
  spec.java:
  - uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
    name: CosmosEntityInformation
    fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosContainerResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosContainerResponse
    name: CosmosContainerResponse
    fullName: com.azure.cosmos.models.CosmosContainerResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.createContainerIfNotExists*
  name: createContainerIfNotExists
  nameWithType: ReactiveCosmosOperations.createContainerIfNotExists
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.createContainerIfNotExists
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Flux<T>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findAll*
  name: <T>findAll
  nameWithType: ReactiveCosmosOperations.<T>findAll
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findAll
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.cosmos.models.PartitionKey
  spec.java:
  - uid: com.azure.cosmos.models.PartitionKey
    name: PartitionKey
    fullName: com.azure.cosmos.models.PartitionKey
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.findById*
  name: <T>findById
  nameWithType: ReactiveCosmosOperations.<T>findById
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>findById
  package: com.azure.spring.data.cosmos.core
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.insert*
  name: <T>insert
  nameWithType: ReactiveCosmosOperations.<T>insert
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>insert
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.upsert*
  name: <T>upsert
  nameWithType: ReactiveCosmosOperations.<T>upsert
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>upsert
  package: com.azure.spring.data.cosmos.core
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteById*
  name: deleteById
  nameWithType: ReactiveCosmosOperations.deleteById
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteById
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteEntity*
  name: <T>deleteEntity
  nameWithType: ReactiveCosmosOperations.<T>deleteEntity
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>deleteEntity
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteAll*
  name: deleteAll
  nameWithType: ReactiveCosmosOperations.deleteAll
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteAll
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteContainer*
  name: deleteContainer
  nameWithType: ReactiveCosmosOperations.deleteContainer
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.deleteContainer
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.delete*
  name: <T>delete
  nameWithType: ReactiveCosmosOperations.<T>delete
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>delete
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.find*
  name: <T>find
  nameWithType: ReactiveCosmosOperations.<T>find
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>find
  package: com.azure.spring.data.cosmos.core
- uid: reactor.core.publisher.Mono<java.lang.Boolean>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.exists*
  name: exists
  nameWithType: ReactiveCosmosOperations.exists
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.exists
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.existsById*
  name: existsById
  nameWithType: ReactiveCosmosOperations.existsById
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.existsById
  package: com.azure.spring.data.cosmos.core
- uid: reactor.core.publisher.Mono<java.lang.Long>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count*
  name: count
  nameWithType: ReactiveCosmosOperations.count
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.count
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
  name: MappingCosmosConverter
  nameWithType: MappingCosmosConverter
  fullName: com.azure.spring.data.cosmos.core.convert.MappingCosmosConverter
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getConverter*
  name: getConverter
  nameWithType: ReactiveCosmosOperations.getConverter
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.getConverter
  package: com.azure.spring.data.cosmos.core
- uid: com.azure.cosmos.models.SqlQuerySpec
  spec.java:
  - uid: com.azure.cosmos.models.SqlQuerySpec
    name: SqlQuerySpec
    fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.runQuery*
  name: <T>runQuery
  nameWithType: ReactiveCosmosOperations.<T>runQuery
  fullName: com.azure.spring.data.cosmos.core.ReactiveCosmosOperations.<T>runQuery
  package: com.azure.spring.data.cosmos.core
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
  name: CosmosEntityInformation
  nameWithType: CosmosEntityInformation
  fullName: com.azure.spring.data.cosmos.repository.support.CosmosEntityInformation
- uid: com.azure.cosmos.models.CosmosContainerResponse
  name: CosmosContainerResponse
  nameWithType: CosmosContainerResponse
  fullName: com.azure.cosmos.models.CosmosContainerResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
