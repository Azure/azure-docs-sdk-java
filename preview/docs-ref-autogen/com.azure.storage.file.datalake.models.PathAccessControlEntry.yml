### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry"
fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry"
name: "PathAccessControlEntry"
nameWithType: "PathAccessControlEntry"
summary: "POSIX access control rights on files and directories."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class PathAccessControlEntry"
constructors:
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.PathAccessControlEntry()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.PathAccessControlEntry()"
  name: "PathAccessControlEntry()"
  nameWithType: "PathAccessControlEntry.PathAccessControlEntry()"
  summary: "Initializes an empty instance of `PathAccessControlEntry`."
  syntax: "public PathAccessControlEntry()"
  desc: "Initializes an empty instance of `PathAccessControlEntry`. Constructs an empty instance of <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for the permissions field."
methods:
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.equals(java.lang.Object)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.equals(Object o)"
  name: "equals(Object o)"
  nameWithType: "PathAccessControlEntry.equals(Object o)"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "o"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object o)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.getAccessControlType()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.getAccessControlType()"
  name: "getAccessControlType()"
  nameWithType: "PathAccessControlEntry.getAccessControlType()"
  summary: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType\"></xref> for this entry."
  syntax: "public AccessControlType getAccessControlType()"
  desc: "Returns the <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType\"></xref> for this entry."
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType\"></xref> for this entry."
    type: "<xref href=\"com.azure.storage.file.datalake.models.AccessControlType?alt=com.azure.storage.file.datalake.models.AccessControlType&text=AccessControlType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.getEntityId()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.getEntityId()"
  name: "getEntityId()"
  nameWithType: "PathAccessControlEntry.getEntityId()"
  summary: "The Azure AAD Object ID or User Principal Name that is associated with this entry."
  syntax: "public String getEntityId()"
  desc: "The Azure AAD Object ID or User Principal Name that is associated with this entry."
  returns:
    description: "The entity for which this entry applies."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.getPermissions()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.getPermissions()"
  name: "getPermissions()"
  nameWithType: "PathAccessControlEntry.getPermissions()"
  summary: "Returns the symbolic form of the permissions for this entry."
  syntax: "public RolePermissions getPermissions()"
  desc: "Returns the symbolic form of the permissions for this entry."
  returns:
    description: "The <xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> for this entry."
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.hashCode()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.hashCode()"
  name: "hashCode()"
  nameWithType: "PathAccessControlEntry.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.isInDefaultScope()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.isInDefaultScope()"
  name: "isInDefaultScope()"
  nameWithType: "PathAccessControlEntry.isInDefaultScope()"
  summary: "Returns whether this ACE is in the default scope."
  syntax: "public boolean isInDefaultScope()"
  desc: "Returns whether this ACE is in the default scope."
  returns:
    description: "<code>true</code> if in the default scope and <code>false</code> otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.parse(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.parse(String str)"
  name: "parse(String str)"
  nameWithType: "PathAccessControlEntry.parse(String str)"
  summary: "Parses the provided string into a `List<{@link PathAccessControlEntry}>`."
  modifiers:
  - "static"
  parameters:
  - description: "The string representation of the ACL."
    name: "str"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static PathAccessControlEntry parse(String str)"
  desc: "Parses the provided string into a `List<{@link PathAccessControlEntry}>`. Must be of the format \"\\[scope:\\]\\[type\\]:\\[id\\]:\\[permissions\\]\"."
  returns:
    description: "The deserialized list."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.parseList(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.parseList(String str)"
  name: "parseList(String str)"
  nameWithType: "PathAccessControlEntry.parseList(String str)"
  summary: "Deserializes an ACL to the format \"user::rwx,user:john.<wbr>doe@contoso:rwx,group::r--,other::---,mask=rwx\""
  modifiers:
  - "static"
  parameters:
  - description: "The <code>String</code> representation of the ACL."
    name: "str"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static List<PathAccessControlEntry> parseList(String str)"
  desc: "Deserializes an ACL to the format \"user::rwx,user:john.doe@contoso:rwx,group::r--,other::---,mask=rwx\""
  returns:
    description: "The ACL deserialized into a <code>java.util.List</code>"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.serializeList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.serializeList(List<PathAccessControlEntry> acl)"
  name: "serializeList(List<PathAccessControlEntry> acl)"
  nameWithType: "PathAccessControlEntry.serializeList(List<PathAccessControlEntry> acl)"
  summary: "Converts the Access Control List to a `String`."
  modifiers:
  - "static"
  parameters:
  - description: "The Access Control List to serialize."
    name: "acl"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static String serializeList(List<PathAccessControlEntry> acl)"
  desc: "Converts the Access Control List to a `String`. The format is specified in the description of this type."
  returns:
    description: "A <code>String</code> representing the serialized Access Control List"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setAccessControlType(com.azure.storage.file.datalake.models.AccessControlType)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setAccessControlType(AccessControlType accessControlType)"
  name: "setAccessControlType(AccessControlType accessControlType)"
  nameWithType: "PathAccessControlEntry.setAccessControlType(AccessControlType accessControlType)"
  summary: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType\"></xref> for this entry."
  parameters:
  - description: "The <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType\"></xref> for this entry."
    name: "accessControlType"
    type: "<xref href=\"com.azure.storage.file.datalake.models.AccessControlType?alt=com.azure.storage.file.datalake.models.AccessControlType&text=AccessControlType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathAccessControlEntry setAccessControlType(AccessControlType accessControlType)"
  desc: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType\"></xref> for this entry."
  returns:
    description: "The updated PathAccessControlEntry object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setDefaultScope(boolean)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setDefaultScope(boolean defaultScope)"
  name: "setDefaultScope(boolean defaultScope)"
  nameWithType: "PathAccessControlEntry.setDefaultScope(boolean defaultScope)"
  summary: "Sets whether or not this entry is the default for a directory."
  parameters:
  - description: "<code>true</code> to set as the default scope and <code>false</code> otherwise."
    name: "defaultScope"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathAccessControlEntry setDefaultScope(boolean defaultScope)"
  desc: "Sets whether or not this entry is the default for a directory."
  returns:
    description: "The updated PathAccessControlEntry object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setEntityId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setEntityId(String entityId)"
  name: "setEntityId(String entityId)"
  nameWithType: "PathAccessControlEntry.setEntityId(String entityId)"
  summary: "Sets the entity ID to which this entry will apply."
  parameters:
  - description: "The entity to which this entry will apply."
    name: "entityId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathAccessControlEntry setEntityId(String entityId)"
  desc: "Sets the entity ID to which this entry will apply. Must be null if the type is <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType.MASK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType#MASK\"></xref> or <xref uid=\"com.azure.storage.file.datalake.models.AccessControlType.OTHER\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessControlType#OTHER\"></xref> or if the user is the owner or the group is the owning group. Must be a valid Azure AAD Object ID or User Principal Name."
  returns:
    description: "The updated PathAccessControlEntry object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setPermissions(com.azure.storage.file.datalake.models.RolePermissions)"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.setPermissions(RolePermissions permissions)"
  name: "setPermissions(RolePermissions permissions)"
  nameWithType: "PathAccessControlEntry.setPermissions(RolePermissions permissions)"
  summary: "Sets the permissions for this entry."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.models.RolePermissions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RolePermissions\"></xref> to set for this entry."
    name: "permissions"
    type: "<xref href=\"com.azure.storage.file.datalake.models.RolePermissions?alt=com.azure.storage.file.datalake.models.RolePermissions&text=RolePermissions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PathAccessControlEntry setPermissions(RolePermissions permissions)"
  desc: "Sets the permissions for this entry."
  returns:
    description: "The updated PathAccessControlEntry object."
    type: "<xref href=\"com.azure.storage.file.datalake.models.PathAccessControlEntry?alt=com.azure.storage.file.datalake.models.PathAccessControlEntry&text=PathAccessControlEntry\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.models.PathAccessControlEntry.toString()"
  fullName: "com.azure.storage.file.datalake.models.PathAccessControlEntry.toString()"
  name: "toString()"
  nameWithType: "PathAccessControlEntry.toString()"
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "POSIX access control rights on files and directories.\n\nThe value is a comma-separated list of access control entries, each access control entry (ACE) consists of four elements in the format \"\\[scope:\\]\\[type\\]:\\[id\\]:\\[permissions\\]\":\n\n *  Scope\n *  Type\n *  User or Group Identifier (AAD ObjectId)\n *  Permissions\n\nThe scope must be \"default\" to indicate the ACE belongs to the default Access Control List (ACL) for a directory; otherwise scope is implicit and the ACE belongs to the access ACL.\n\nThere are four ACE types:\n\n *  \"user\": grants rights to the owner or a named user\n *  \"group\" grants rights to the owning group or a named group\n *  \"mask\" restricts rights granted to named users and the members of groups\n *  \"other\" grants rights to all users not found in any of the other entries\n\nThe user or group identifier is omitted for entries of type \"mask\" and \"other\". The user or group identifier is also omitted for the owner and owning group.\n\nThe permission field is a 3-character sequence where the first character is 'r' to grant read access, the second character is 'w' to grant write access, and the third character is 'x' to grant execute permission. If access is not granted, the '-' character is used to denote that the permission is denied.\n\nFor example, the following ACL grants read, write, and execute rights to the file owner and john.doe@contoso, the read right to the owning group, and nothing to everyone else: \"user::rwx,user:john.doe@contoso:rwx,group::r--,other::---,mask::rwx\"."
metadata: {}
package: "com.azure.storage.file.datalake.models"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
