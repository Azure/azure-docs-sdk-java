### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.share.ShareServiceAsyncClient
  id: ShareServiceAsyncClient
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share
  children:
  - com.azure.storage.file.share.ShareServiceAsyncClient.createShare(java.lang.String)
  - com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)
  - com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare(java.lang.String)
  - com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse(java.lang.String,java.lang.String)
  - com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  - com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName()
  - com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl()
  - com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline()
  - com.azure.storage.file.share.ShareServiceAsyncClient.getProperties()
  - com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse()
  - com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion()
  - com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(java.lang.String)
  - com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(java.lang.String,java.lang.String)
  - com.azure.storage.file.share.ShareServiceAsyncClient.listShares()
  - com.azure.storage.file.share.ShareServiceAsyncClient.listShares(com.azure.storage.file.share.models.ListSharesOptions)
  - com.azure.storage.file.share.ShareServiceAsyncClient.setProperties(com.azure.storage.file.share.models.ShareServiceProperties)
  - com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.models.ShareServiceProperties)
  - com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare(java.lang.String,java.lang.String)
  - com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse(java.lang.String,java.lang.String)
  langs:
  - java
  name: ShareServiceAsyncClient
  nameWithType: ShareServiceAsyncClient
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient
  type: Class
  package: com.azure.storage.file.share
  summary: >-
    This class provides a azureFileStorageClient that contains all the operations for interacting with a file account in Azure Storage. Operations allowed by the azureFileStorageClient are creating, listing, and deleting shares and retrieving and updating properties of the account.


    **Instantiating an Asynchronous File Service Client**


    ```java

    ShareAsyncClient client = new ShareClientBuilder()
         .connectionString("${connectionString}")
         .endpoint("${endpoint}")
         .buildAsyncClient();
    ```


    View <xref uid="com.azure.storage.file.share.ShareServiceClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the azureFileStorageClient.
  syntax:
    content: public final class ShareServiceAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.ShareServiceAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  id: ShareServiceAsyncClient(com.azure.storage.file.share.implementation.AzureFileStorageImpl,java.lang.String,com.azure.storage.file.share.ShareServiceVersion)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: ShareServiceAsyncClient(AzureFileStorageImpl azureFileStorage, String accountName, ShareServiceVersion serviceVersion)
  nameWithType: ShareServiceAsyncClient.ShareServiceAsyncClient(AzureFileStorageImpl azureFileStorage, String accountName, ShareServiceVersion serviceVersion)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.ShareServiceAsyncClient(AzureFileStorageImpl azureFileStorage, String accountName, ShareServiceVersion serviceVersion)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.ShareServiceAsyncClient*
  type: Constructor
  package: com.azure.storage.file.share
  summary: Creates a ShareServiceClient from the passed <xref uid="com.azure.storage.file.share.implementation.AzureFileStorageImpl" data-throw-if-not-resolved="false">implementation client</xref>.
  syntax:
    content: " ShareServiceAsyncClient(AzureFileStorageImpl azureFileStorage, String accountName, ShareServiceVersion serviceVersion)"
    parameters:
    - id: azureFileStorage
      type: com.azure.storage.file.share.implementation.AzureFileStorageImpl
      description: Client that interacts with the service interfaces.
    - id: accountName
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.createShare(java.lang.String)
  id: createShare(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: createShare(String shareName)
  nameWithType: ShareServiceAsyncClient.createShare(String shareName)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.createShare(String shareName)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.createShare*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a share in the storage account with the specified name and returns a ShareAsyncClient to interact with it.


    **Code Samples**


    Create the share "test"


    ```java

    fileServiceAsyncClient.createShare("myshare").subscribe(
         response -> { },
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete creating the share!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-share
  syntax:
    content: public Mono<ShareAsyncClient> createShare(String shareName)
    parameters:
    - id: shareName
      type: java.lang.String
      description: Name of the share
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareAsyncClient>
      description: The <xref uid="com.azure.storage.file.share.ShareAsyncClient" data-throw-if-not-resolved="false">ShareAsyncClient</xref>
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)
  id: createShareWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)
  nameWithType: ShareServiceAsyncClient.createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Creates a share in the storage account with the specified name, metadata, and quota and returns a ShareAsyncClient to interact with it.


    **Code Samples**


    Create the share "test" with metadata "share:metadata"


    ```java

    fileServiceAsyncClient.createShareWithResponse("test", Collections.singletonMap("share", "metadata"), null)
         .subscribe(
             response -> System.out.printf("Creating the share completed with status code %d", response.getStatusCode()),
             error -> System.err.print(error.toString()),
             () -> System.out.println("Complete creating the share!")
         );
    ```


    Create the share "test" with a quota of 10 GB


    ```java

    fileServiceAsyncClient.createShareWithResponse("test", null, 10)
         .subscribe(
             response -> System.out.printf("Creating the share completed with status code %d",
                 response.getStatusCode()),
             error -> System.err.print(error.toString()),
             () -> System.out.println("Complete creating the share!")
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/create-share
  syntax:
    content: public Mono<Response<ShareAsyncClient>> createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)
    parameters:
    - id: shareName
      type: java.lang.String
      description: Name of the share
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Optional metadata to associate with the share
    - id: quotaInGB
      type: java.lang.Integer
      description: >-
        Optional maximum size the share is allowed to grow to in GB. This must be greater than 0 and
         less than or equal to 5120. The default value is 5120.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareAsyncClient>>
      description: A response containing the <xref uid="com.azure.storage.file.share.ShareAsyncClient" data-throw-if-not-resolved="false">ShareAsyncClient</xref> and the status of creating the share.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare(java.lang.String)
  id: deleteShare(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: deleteShare(String shareName)
  nameWithType: ShareServiceAsyncClient.deleteShare(String shareName)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare(String shareName)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the share in the storage account with the given name.


    **Code Samples**


    Delete the share "test"


    ```java

    fileServiceAsyncClient.deleteShare("test").doOnSuccess(
         response -> System.out.println("Deleting the share completed.")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share
  syntax:
    content: public Mono<Void> deleteShare(String shareName)
    parameters:
    - id: shareName
      type: java.lang.String
      description: Name of the share
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse(java.lang.String,java.lang.String)
  id: deleteShareWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: deleteShareWithResponse(String shareName, String snapshot)
  nameWithType: ShareServiceAsyncClient.deleteShareWithResponse(String shareName, String snapshot)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse(String shareName, String snapshot)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Deletes the specific snapshot of the share in the storage account with the given name. Snapshot are identified by the time they were created.


    **Code Samples**


    Delete the snapshot of share "test" that was created at current time.


    ```java

    OffsetDateTime midnight = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);
     fileServiceAsyncClient.deleteShareWithResponse("test", midnight.toString())
         .subscribe(response -> System.out.printf("Deleting the snapshot completed with status code %d",
             response.getStatusCode()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-share
  syntax:
    content: public Mono<Response<Void>> deleteShareWithResponse(String shareName, String snapshot)
    parameters:
    - id: shareName
      type: java.lang.String
      description: Name of the share
    - id: snapshot
      type: java.lang.String
      description: Identifier of the snapshot
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  id: generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  nameWithType: ShareServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas*
  type: Method
  package: com.azure.storage.file.share
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref>. Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to blob containers and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n \n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n \n // Client must be authenticated via StorageSharedKeyCredential\n String sas = fileServiceAsyncClient.generateAccountSas(sasValues);\n```"
  syntax:
    content: public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
    parameters:
    - id: accountSasSignatureValues
      type: com.azure.storage.common.sas.AccountSasSignatureValues
      description: <xref uid="com.azure.storage.common.sas.AccountSasSignatureValues" data-throw-if-not-resolved="false">AccountSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: ShareServiceAsyncClient.getAccountName()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.share
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl()
  id: getFileServiceUrl()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getFileServiceUrl()
  nameWithType: ShareServiceAsyncClient.getFileServiceUrl()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl*
  type: Method
  package: com.azure.storage.file.share
  summary: Get the url of the storage file service client.
  syntax:
    content: public String getFileServiceUrl()
    return:
      type: java.lang.String
      description: the url of the Storage File service.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: ShareServiceAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getProperties()
  nameWithType: ShareServiceAsyncClient.getProperties()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getProperties()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the storage account's File service. The properties range from storage analytics and metrics to CORS (Cross-Origin Resource Sharing).


    **Code Samples**


    Retrieve File service properties


    ```java

    fileServiceAsyncClient.getProperties()
         .subscribe(properties -> {
             System.out.printf("Hour metrics enabled: %b, Minute metrics enabled: %b",
                 properties.getHourMetrics().isEnabled(), properties.getMinuteMetrics().isEnabled());
         });
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-service-properties
  syntax:
    content: public Mono<ShareServiceProperties> getProperties()
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareServiceProperties>
      description: Storage account <xref uid="com.azure.storage.file.share.models.ShareServiceProperties" data-throw-if-not-resolved="false">File service properties</xref>
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse()
  id: getPropertiesWithResponse()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getPropertiesWithResponse()
  nameWithType: ShareServiceAsyncClient.getPropertiesWithResponse()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Retrieves the properties of the storage account's File service. The properties range from storage analytics and metrics to CORS (Cross-Origin Resource Sharing).


    **Code Samples**


    Retrieve File service properties


    ```java

    fileServiceAsyncClient.getPropertiesWithResponse()
         .subscribe(properties -> System.out.printf("Hour metrics enabled: %b, Minute metrics enabled: %b",
             properties.getValue().getHourMetrics().isEnabled(),
             properties.getValue().getMinuteMetrics().isEnabled()));
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-file-service-properties
  syntax:
    content: public Mono<Response<ShareServiceProperties>> getPropertiesWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareServiceProperties>>
      description: A response containing the Storage account <xref uid="com.azure.storage.file.share.models.ShareServiceProperties" data-throw-if-not-resolved="false">File service properties</xref>
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: ShareServiceAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.share
  summary: Gets the service version the client is using.
  syntax:
    content: public ShareServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.share.ShareServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(java.lang.String)
  id: getShareAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getShareAsyncClient(String shareName)
  nameWithType: ShareServiceAsyncClient.getShareAsyncClient(String shareName)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(String shareName)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a ShareAsyncClient that interacts with the specified share.


    If the share doesn't exist in the storage account <xref uid="com.azure.storage.file.share.ShareAsyncClient.create()" data-throw-if-not-resolved="false">create</xref> in the azureFileStorageClient will need to be called before interaction with the share can happen.
  syntax:
    content: public ShareAsyncClient getShareAsyncClient(String shareName)
    parameters:
    - id: shareName
      type: java.lang.String
      description: Name of the share
    return:
      type: com.azure.storage.file.share.ShareAsyncClient
      description: a ShareAsyncClient that interacts with the specified share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(java.lang.String,java.lang.String)
  id: getShareAsyncClient(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: getShareAsyncClient(String shareName, String snapshot)
  nameWithType: ShareServiceAsyncClient.getShareAsyncClient(String shareName, String snapshot)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(String shareName, String snapshot)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Constructs a ShareAsyncClient that interacts with the specified share.


    If the share doesn't exist in the storage account <xref uid="com.azure.storage.file.share.ShareAsyncClient.create()" data-throw-if-not-resolved="false">create</xref> in the azureFileStorageClient will need to be called before interaction with the share can happen.
  syntax:
    content: public ShareAsyncClient getShareAsyncClient(String shareName, String snapshot)
    parameters:
    - id: shareName
      type: java.lang.String
      description: Name of the share
    - id: snapshot
      type: java.lang.String
      description: Snapshot ID of the share
    return:
      type: com.azure.storage.file.share.ShareAsyncClient
      description: a ShareAsyncClient that interacts with the specified share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.listShares()
  id: listShares()
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: listShares()
  nameWithType: ShareServiceAsyncClient.listShares()
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.listShares()
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.listShares*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Lists all shares in the storage account without their metadata or snapshots.


    **Code Samples**


    List all shares in the account


    ```java

    fileServiceAsyncClient.listShares().subscribe(
         shareItem -> System.out.printf("Share %s exists in the account", shareItem.getName()),
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete listing the shares!")
     );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-shares
  syntax:
    content: public PagedFlux<ShareItem> listShares()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareItem>
      description: <xref uid="com.azure.storage.file.share.models.ShareItem" data-throw-if-not-resolved="false">Shares</xref> in the storage account without their metadata or snapshots
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.listShares(com.azure.storage.file.share.models.ListSharesOptions)
  id: listShares(com.azure.storage.file.share.models.ListSharesOptions)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: listShares(ListSharesOptions options)
  nameWithType: ShareServiceAsyncClient.listShares(ListSharesOptions options)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.listShares(ListSharesOptions options)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.listShares*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Lists the shares in the Storage account that pass the options filter.


    Set starts with name filter using <xref uid="com.azure.storage.file.share.models.ListSharesOptions.setPrefix(java.lang.String)" data-throw-if-not-resolved="false">prefix</xref> to filter shares that are listed.


    Pass true to <xref uid="com.azure.storage.file.share.models.ListSharesOptions.setIncludeMetadata(boolean)" data-throw-if-not-resolved="false">includeMetadata</xref> to have metadata returned for the shares.


    Pass true to <xref uid="com.azure.storage.file.share.models.ListSharesOptions.setIncludeSnapshots(boolean)" data-throw-if-not-resolved="false">includeSnapshots</xref> to have snapshots of the shares listed.


    **Code Samples**


    List all shares that begin with "azure"


    ```java

    fileServiceAsyncClient.listShares(new ListSharesOptions().setPrefix("azure")).subscribe(
         shareItem -> System.out.printf("Share %s exists in the account", shareItem.getName()),
         error -> System.err.print(error.toString()),
         () -> System.out.println("Complete listing the shares!")
     );
    ```


    List all shares including their snapshots and metadata


    ```java

    fileServiceAsyncClient.listShares(new ListSharesOptions().setIncludeMetadata(true).setIncludeSnapshots(true))
         .subscribe(
             shareItem -> System.out.printf("Share %s exists in the account", shareItem.getName()),
             error -> System.err.print(error.toString()),
             () -> System.out.println("Complete listing the shares!")
         );
    ```


    For more information, see the [Azure Docs][].



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/list-shares
  syntax:
    content: public PagedFlux<ShareItem> listShares(ListSharesOptions options)
    parameters:
    - id: options
      type: com.azure.storage.file.share.models.ListSharesOptions
      description: Options for listing shares
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareItem>
      description: <xref uid="com.azure.storage.file.share.models.ShareItem" data-throw-if-not-resolved="false">Shares</xref> in the storage account that satisfy the filter requirements
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.setProperties(com.azure.storage.file.share.models.ShareServiceProperties)
  id: setProperties(com.azure.storage.file.share.models.ShareServiceProperties)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: setProperties(ShareServiceProperties properties)
  nameWithType: ShareServiceAsyncClient.setProperties(ShareServiceProperties properties)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.setProperties(ShareServiceProperties properties)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.setProperties*
  type: Method
  package: com.azure.storage.file.share
  summary: "Sets the properties for the storage account's File service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing). To maintain the CORS in the Queue service pass a `null` value for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\">CORS</xref>. To disable all CORS in the Queue service pass an empty list for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\">CORS</xref>.\n\n**Code Sample**\n\nEnable Minute and Hour Metrics\n\n```java\nfileServiceAsyncClient.getProperties().subscribe(properties -> {\n     properties.getMinuteMetrics().setEnabled(true);\n     properties.getHourMetrics().setEnabled(true);\n \n     fileServiceAsyncClient.setProperties(properties)\n         .subscribe(r -> System.out.println(\"Setting File service properties completed.\"));\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-service-properties"
  syntax:
    content: public Mono<Void> setProperties(ShareServiceProperties properties)
    parameters:
    - id: properties
      type: com.azure.storage.file.share.models.ShareServiceProperties
      description: Storage account File service properties
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty response
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.models.ShareServiceProperties)
  id: setPropertiesWithResponse(com.azure.storage.file.share.models.ShareServiceProperties)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: setPropertiesWithResponse(ShareServiceProperties properties)
  nameWithType: ShareServiceAsyncClient.setPropertiesWithResponse(ShareServiceProperties properties)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse(ShareServiceProperties properties)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: "Sets the properties for the storage account's File service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing). To maintain the CORS in the Queue service pass a `null` value for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\">CORS</xref>. To disable all CORS in the Queue service pass an empty list for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\">CORS</xref>.\n\n**Code Sample**\n\nClear CORS in the File service\n\n```java\nfileServiceAsyncClient.getProperties().subscribe(properties -> {\n     properties.setCors(Collections.emptyList());\n \n     fileServiceAsyncClient.setPropertiesWithResponse(properties).subscribe(response ->\n         System.out.printf(\"Setting File service properties completed with status code %d\",\n             response.getStatusCode()));\n });\n```\n\nEnable Minute and Hour Metrics\n\n```java\nfileServiceAsyncClient.getPropertiesWithResponse().subscribe(response -> {\n     ShareServiceProperties properties = response.getValue();\n     properties.getMinuteMetrics().setEnabled(true);\n     properties.getHourMetrics().setEnabled(true);\n \n     fileServiceAsyncClient.setPropertiesWithResponse(properties).subscribe(r ->\n         System.out.printf(\"Setting File service properties completed with status code %d\", r.getStatusCode()));\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-service-properties"
  syntax:
    content: public Mono<Response<Void>> setPropertiesWithResponse(ShareServiceProperties properties)
    parameters:
    - id: properties
      type: com.azure.storage.file.share.models.ShareServiceProperties
      description: Storage account File service properties
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A response that only contains headers and response status code
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare(java.lang.String,java.lang.String)
  id: undeleteShare(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: undeleteShare(String deletedShareName, String deletedShareVersion)
  nameWithType: ShareServiceAsyncClient.undeleteShare(String deletedShareName, String deletedShareVersion)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare(String deletedShareName, String deletedShareVersion)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Restores a previously deleted share.


    If the share associated with provided `deletedShareName` already exists, this call will result in a 409 (conflict).


    This API is only functional if Share Soft Delete is enabled for the storage account associated with the share. For more information, see the Azure Docs.


    **Code Samples**


    ```java

    ListSharesOptions listSharesOptions = new ListSharesOptions();
     listSharesOptions.setIncludeDeleted(true);
     fileServiceAsyncClient.listShares(listSharesOptions).flatMap(
         deletedShare -> {
             Mono<ShareAsyncClient> shareAsyncClient = fileServiceAsyncClient.undeleteShare(
                 deletedShare.getName(), deletedShare.getVersion());
             return shareAsyncClient;
         }
     ).blockFirst();
    ```
  syntax:
    content: public Mono<ShareAsyncClient> undeleteShare(String deletedShareName, String deletedShareVersion)
    parameters:
    - id: deletedShareName
      type: java.lang.String
      description: The name of the previously deleted share.
    - id: deletedShareVersion
      type: java.lang.String
      description: The version of the previously deleted share.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.share.ShareAsyncClient" data-throw-if-not-resolved="false">ShareAsyncClient</xref> used
         to interact with the restored share.
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse(java.lang.String,java.lang.String)
  id: undeleteShareWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
  parent: com.azure.storage.file.share.ShareServiceAsyncClient
  langs:
  - java
  name: undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)
  nameWithType: ShareServiceAsyncClient.undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)
  overload: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse*
  type: Method
  package: com.azure.storage.file.share
  summary: >-
    Restores a previously deleted share.


    If the share associated with provided `deletedShareName` already exists, this call will result in a 409 (conflict).


    This API is only functional if Share Soft Delete is enabled for the storage account associated with the share. For more information, see the Azure Docs.


    **Code Samples**


    ```java

    ListSharesOptions listSharesOptions = new ListSharesOptions();
     listSharesOptions.setIncludeDeleted(true);
     fileServiceAsyncClient.listShares(listSharesOptions).flatMap(
         deletedShare -> {
             Mono<ShareAsyncClient> shareAsyncClient = fileServiceAsyncClient.undeleteShareWithResponse(
                 deletedShare.getName(), deletedShare.getVersion()).map(Response::getValue);
             return shareAsyncClient;
         }
     ).blockFirst();
    ```
  syntax:
    content: public Mono<Response<ShareAsyncClient>> undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)
    parameters:
    - id: deletedShareName
      type: java.lang.String
      description: The name of the previously deleted share.
    - id: deletedShareVersion
      type: java.lang.String
      description: The version of the previously deleted share.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.share.ShareAsyncClient" data-throw-if-not-resolved="false">ShareAsyncClient</xref> used to interact with the restored share.
references:
- uid: com.azure.storage.file.share.implementation.AzureFileStorageImpl
  name: AzureFileStorageImpl
  nameWithType: AzureFileStorageImpl
  fullName: com.azure.storage.file.share.implementation.AzureFileStorageImpl
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.share.ShareServiceVersion
  name: ShareServiceVersion
  nameWithType: ShareServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceVersion
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.ShareServiceAsyncClient*
  name: ShareServiceAsyncClient
  nameWithType: ShareServiceAsyncClient.ShareServiceAsyncClient
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.ShareServiceAsyncClient
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl*
  name: getFileServiceUrl
  nameWithType: ShareServiceAsyncClient.getFileServiceUrl
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: ShareServiceAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareAsyncClient
  name: ShareAsyncClient
  nameWithType: ShareAsyncClient
  fullName: com.azure.storage.file.share.ShareAsyncClient
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient*
  name: getShareAsyncClient
  nameWithType: ShareServiceAsyncClient.getShareAsyncClient
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient
  package: com.azure.storage.file.share
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.share.models.ShareItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareItem
    name: ShareItem
    fullName: com.azure.storage.file.share.models.ShareItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.listShares*
  name: listShares
  nameWithType: ShareServiceAsyncClient.listShares
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.listShares
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ListSharesOptions
  name: ListSharesOptions
  nameWithType: ListSharesOptions
  fullName: com.azure.storage.file.share.models.ListSharesOptions
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.models.ShareServiceProperties>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareServiceProperties
    name: ShareServiceProperties
    fullName: com.azure.storage.file.share.models.ShareServiceProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getProperties*
  name: getProperties
  nameWithType: ShareServiceAsyncClient.getProperties
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getProperties
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.models.ShareServiceProperties>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.models.ShareServiceProperties
    name: ShareServiceProperties
    fullName: com.azure.storage.file.share.models.ShareServiceProperties
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: ShareServiceAsyncClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.models.ShareServiceProperties
  name: ShareServiceProperties
  nameWithType: ShareServiceProperties
  fullName: com.azure.storage.file.share.models.ShareServiceProperties
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.setProperties*
  name: setProperties
  nameWithType: ShareServiceAsyncClient.setProperties
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.setProperties
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse*
  name: setPropertiesWithResponse
  nameWithType: ShareServiceAsyncClient.setPropertiesWithResponse
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse
  package: com.azure.storage.file.share
- uid: reactor.core.publisher.Mono<com.azure.storage.file.share.ShareAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareAsyncClient
    name: ShareAsyncClient
    fullName: com.azure.storage.file.share.ShareAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.createShare*
  name: createShare
  nameWithType: ShareServiceAsyncClient.createShare
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.createShare
  package: com.azure.storage.file.share
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: java.lang.Integer
  spec.java:
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.share.ShareAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.share.ShareAsyncClient
    name: ShareAsyncClient
    fullName: com.azure.storage.file.share.ShareAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse*
  name: createShareWithResponse
  nameWithType: ShareServiceAsyncClient.createShareWithResponse
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare*
  name: deleteShare
  nameWithType: ShareServiceAsyncClient.deleteShare
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse*
  name: deleteShareWithResponse
  nameWithType: ShareServiceAsyncClient.deleteShareWithResponse
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: ShareServiceAsyncClient.getAccountName
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName
  package: com.azure.storage.file.share
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: ShareServiceAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline
  package: com.azure.storage.file.share
- uid: com.azure.storage.common.sas.AccountSasSignatureValues
  spec.java:
  - uid: com.azure.storage.common.sas.AccountSasSignatureValues
    name: AccountSasSignatureValues
    fullName: com.azure.storage.common.sas.AccountSasSignatureValues
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas*
  name: generateAccountSas
  nameWithType: ShareServiceAsyncClient.generateAccountSas
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare*
  name: undeleteShare
  nameWithType: ShareServiceAsyncClient.undeleteShare
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare
  package: com.azure.storage.file.share
- uid: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse*
  name: undeleteShareWithResponse
  nameWithType: ShareServiceAsyncClient.undeleteShareWithResponse
  fullName: com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse
  package: com.azure.storage.file.share
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.file.share.models.ShareItem
  name: ShareItem
  nameWithType: ShareItem
  fullName: com.azure.storage.file.share.models.ShareItem
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
