### YamlMime:JavaType
uid: "com.azure.storage.file.share.ShareServiceAsyncClient"
fullName: "com.azure.storage.file.share.ShareServiceAsyncClient"
name: "ShareServiceAsyncClient"
nameWithType: "ShareServiceAsyncClient"
summary: "This class provides a azure<wbr>File<wbr>Storage<wbr>Client that contains all the operations for interacting with a file account in Azure Storage."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ShareServiceAsyncClient"
methods:
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.createShare(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.createShare(String shareName)"
  name: "createShare(String shareName)"
  nameWithType: "ShareServiceAsyncClient.createShare(String shareName)"
  summary: "Creates a share in the storage account with the specified name and returns a Share<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareAsyncClient> createShare(String shareName)"
  desc: "Creates a share in the storage account with the specified name and returns a ShareAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the share \"test\"\n\n```java\nfileServiceAsyncClient.createShare(\"myshare\").subscribe(\n     response -> { },\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete creating the share!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "The <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(java.lang.String,com.azure.storage.file.share.options.ShareCreateOptions)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(String shareName, ShareCreateOptions options)"
  name: "createShareWithResponse(String shareName, ShareCreateOptions options)"
  nameWithType: "ShareServiceAsyncClient.createShareWithResponse(String shareName, ShareCreateOptions options)"
  summary: "Creates a share in the storage account with the specified name, and options and returns a Share<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.file.share.options.ShareCreateOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareCreateOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.options.ShareCreateOptions?alt=com.azure.storage.file.share.options.ShareCreateOptions&text=ShareCreateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareAsyncClient>> createShareWithResponse(String shareName, ShareCreateOptions options)"
  desc: "Creates a share in the storage account with the specified name, and options and returns a ShareAsyncClient to interact with it.\n\n**Code Samples**\n\n```java\nfileServiceAsyncClient.createShareWithResponse(\"test\", new ShareCreateOptions()\n     .setMetadata(Collections.singletonMap(\"share\", \"metadata\")).setQuotaInGb(1)\n     .setAccessTier(ShareAccessTier.HOT)).subscribe(\n         response -> System.out.printf(\"Creating the share completed with status code %d\",\n             response.getStatusCode()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete creating the share!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> and the status of creating the share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,java.lang.Integer)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)"
  name: "createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)"
  nameWithType: "ShareServiceAsyncClient.createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)"
  summary: "Creates a share in the storage account with the specified name, metadata, and quota and returns a Share<wbr>Async<wbr>Client to interact with it."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional metadata to associate with the share"
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Optional maximum size the share is allowed to grow to in GB. This must be greater than 0 and\n less than or equal to 5120. The default value is 5120."
    name: "quotaInGB"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareAsyncClient>> createShareWithResponse(String shareName, Map<String,String> metadata, Integer quotaInGB)"
  desc: "Creates a share in the storage account with the specified name, metadata, and quota and returns a ShareAsyncClient to interact with it.\n\n**Code Samples**\n\nCreate the share \"test\" with metadata \"share:metadata\"\n\n```java\nfileServiceAsyncClient.createShareWithResponse(\"test\", Collections.singletonMap(\"share\", \"metadata\"), null)\n     .subscribe(\n         response -> System.out.printf(\"Creating the share completed with status code %d\", response.getStatusCode()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete creating the share!\")\n     );\n```\n\nCreate the share \"test\" with a quota of 10 GB\n\n```java\nfileServiceAsyncClient.createShareWithResponse(\"test\", null, 10)\n     .subscribe(\n         response -> System.out.printf(\"Creating the share completed with status code %d\",\n             response.getStatusCode()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete creating the share!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-share"
  returns:
    description: "A response containing the <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> and the status of creating the share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.deleteShare(String shareName)"
  name: "deleteShare(String shareName)"
  nameWithType: "ShareServiceAsyncClient.deleteShare(String shareName)"
  summary: "Deletes the share in the storage account with the given name."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteShare(String shareName)"
  desc: "Deletes the share in the storage account with the given name.\n\n**Code Samples**\n\nDelete the share \"test\"\n\n```java\nfileServiceAsyncClient.deleteShare(\"test\").doOnSuccess(\n     response -> System.out.println(\"Deleting the share completed.\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.deleteShareWithResponse(String shareName, String snapshot)"
  name: "deleteShareWithResponse(String shareName, String snapshot)"
  nameWithType: "ShareServiceAsyncClient.deleteShareWithResponse(String shareName, String snapshot)"
  summary: "Deletes the specific snapshot of the share in the storage account with the given name."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Identifier of the snapshot"
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteShareWithResponse(String shareName, String snapshot)"
  desc: "Deletes the specific snapshot of the share in the storage account with the given name. Snapshot are identified by the time they were created.\n\n**Code Samples**\n\nDelete the snapshot of share \"test\" that was created at current time.\n\n```java\nOffsetDateTime midnight = OffsetDateTime.of(LocalDateTime.now(), ZoneOffset.UTC);\n fileServiceAsyncClient.deleteShareWithResponse(\"test\", midnight.toString())\n     .subscribe(response -> System.out.printf(\"Deleting the snapshot completed with status code %d\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-share"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  nameWithType: "ShareServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to blob containers and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = fileServiceAsyncClient.generateAccountSas(sasValues);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  name: "generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  nameWithType: "ShareServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>"
    name: "accountSasSignatureValues"
    type: "<xref href=\"com.azure.storage.common.sas.AccountSasSignatureValues?alt=com.azure.storage.common.sas.AccountSasSignatureValues&text=AccountSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues, Context context)"
  desc: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref>.\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccountSasSignatureValues\"></xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to blob containers and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n\n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n\n // Client must be authenticated via StorageSharedKeyCredential\n String sas = fileServiceAsyncClient.generateAccountSas(sasValues, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "ShareServiceAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getFileServiceUrl()"
  name: "getFileServiceUrl()"
  nameWithType: "ShareServiceAsyncClient.getFileServiceUrl()"
  summary: "Get the url of the storage file service client."
  syntax: "public String getFileServiceUrl()"
  desc: "Get the url of the storage file service client."
  returns:
    description: "the url of the Storage File service."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "ShareServiceAsyncClient.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getProperties()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getProperties()"
  name: "getProperties()"
  nameWithType: "ShareServiceAsyncClient.getProperties()"
  summary: "Retrieves the properties of the storage account's File service."
  syntax: "public Mono<ShareServiceProperties> getProperties()"
  desc: "Retrieves the properties of the storage account's File service. The properties range from storage analytics and metrics to CORS (Cross-Origin Resource Sharing).\n\n**Code Samples**\n\nRetrieve File service properties\n\n```java\nfileServiceAsyncClient.getProperties()\n     .subscribe(properties -> {\n         System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b\",\n             properties.getHourMetrics().isEnabled(), properties.getMinuteMetrics().isEnabled());\n     });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file-service-properties"
  returns:
    description: "Storage account <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File service properties\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareServiceProperties?alt=com.azure.storage.file.share.models.ShareServiceProperties&text=ShareServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getPropertiesWithResponse()"
  name: "getPropertiesWithResponse()"
  nameWithType: "ShareServiceAsyncClient.getPropertiesWithResponse()"
  summary: "Retrieves the properties of the storage account's File service."
  syntax: "public Mono<Response<ShareServiceProperties>> getPropertiesWithResponse()"
  desc: "Retrieves the properties of the storage account's File service. The properties range from storage analytics and metrics to CORS (Cross-Origin Resource Sharing).\n\n**Code Samples**\n\nRetrieve File service properties\n\n```java\nfileServiceAsyncClient.getPropertiesWithResponse()\n     .subscribe(properties -> System.out.printf(\"Hour metrics enabled: %b, Minute metrics enabled: %b\",\n         properties.getValue().getHourMetrics().isEnabled(),\n         properties.getValue().getMinuteMetrics().isEnabled()));\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-file-service-properties"
  returns:
    description: "A response containing the Storage account <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties\" data-throw-if-not-resolved=\"false\" data-raw-source=\"File service properties\"></xref>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareServiceProperties?alt=com.azure.storage.file.share.models.ShareServiceProperties&text=ShareServiceProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "ShareServiceAsyncClient.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public ShareServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.file.share.ShareServiceVersion?alt=com.azure.storage.file.share.ShareServiceVersion&text=ShareServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(String shareName)"
  name: "getShareAsyncClient(String shareName)"
  nameWithType: "ShareServiceAsyncClient.getShareAsyncClient(String shareName)"
  summary: "Constructs a Share<wbr>Async<wbr>Client that interacts with the specified share."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareAsyncClient getShareAsyncClient(String shareName)"
  desc: "Constructs a ShareAsyncClient that interacts with the specified share.\n\nIf the share doesn't exist in the storage account <xref uid=\"com.azure.storage.file.share.ShareAsyncClient.create()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"create\"></xref> in the azureFileStorageClient will need to be called before interaction with the share can happen."
  returns:
    description: "a ShareAsyncClient that interacts with the specified share"
    type: "<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.getShareAsyncClient(String shareName, String snapshot)"
  name: "getShareAsyncClient(String shareName, String snapshot)"
  nameWithType: "ShareServiceAsyncClient.getShareAsyncClient(String shareName, String snapshot)"
  summary: "Constructs a Share<wbr>Async<wbr>Client that interacts with the specified share."
  parameters:
  - description: "Name of the share"
    name: "shareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Snapshot ID of the share"
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ShareAsyncClient getShareAsyncClient(String shareName, String snapshot)"
  desc: "Constructs a ShareAsyncClient that interacts with the specified share.\n\nIf the share doesn't exist in the storage account <xref uid=\"com.azure.storage.file.share.ShareAsyncClient.create()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"create\"></xref> in the azureFileStorageClient will need to be called before interaction with the share can happen."
  returns:
    description: "a ShareAsyncClient that interacts with the specified share"
    type: "<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.listShares()"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.listShares()"
  name: "listShares()"
  nameWithType: "ShareServiceAsyncClient.listShares()"
  summary: "Lists all shares in the storage account without their metadata or snapshots."
  syntax: "public PagedFlux<ShareItem> listShares()"
  desc: "Lists all shares in the storage account without their metadata or snapshots.\n\n**Code Samples**\n\nList all shares in the account\n\n```java\nfileServiceAsyncClient.listShares().subscribe(\n     shareItem -> System.out.printf(\"Share %s exists in the account\", shareItem.getName()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete listing the shares!\")\n );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-shares"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Shares\"></xref> in the storage account without their metadata or snapshots"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareItem?alt=com.azure.storage.file.share.models.ShareItem&text=ShareItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.listShares(com.azure.storage.file.share.models.ListSharesOptions)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.listShares(ListSharesOptions options)"
  name: "listShares(ListSharesOptions options)"
  nameWithType: "ShareServiceAsyncClient.listShares(ListSharesOptions options)"
  summary: "Lists the shares in the Storage account that pass the options filter."
  parameters:
  - description: "Options for listing shares"
    name: "options"
    type: "<xref href=\"com.azure.storage.file.share.models.ListSharesOptions?alt=com.azure.storage.file.share.models.ListSharesOptions&text=ListSharesOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<ShareItem> listShares(ListSharesOptions options)"
  desc: "Lists the shares in the Storage account that pass the options filter.\n\nSet starts with name filter using <xref uid=\"com.azure.storage.file.share.models.ListSharesOptions.setPrefix(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"prefix\"></xref> to filter shares that are listed.\n\nPass true to <xref uid=\"com.azure.storage.file.share.models.ListSharesOptions.setIncludeMetadata(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"includeMetadata\"></xref> to have metadata returned for the shares.\n\nPass true to <xref uid=\"com.azure.storage.file.share.models.ListSharesOptions.setIncludeSnapshots(boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"includeSnapshots\"></xref> to have snapshots of the shares listed.\n\n**Code Samples**\n\nList all shares that begin with \"azure\"\n\n```java\nfileServiceAsyncClient.listShares(new ListSharesOptions().setPrefix(\"azure\")).subscribe(\n     shareItem -> System.out.printf(\"Share %s exists in the account\", shareItem.getName()),\n     error -> System.err.print(error.toString()),\n     () -> System.out.println(\"Complete listing the shares!\")\n );\n```\n\nList all shares including their snapshots and metadata\n\n```java\nfileServiceAsyncClient.listShares(new ListSharesOptions().setIncludeMetadata(true).setIncludeSnapshots(true))\n     .subscribe(\n         shareItem -> System.out.printf(\"Share %s exists in the account\", shareItem.getName()),\n         error -> System.err.print(error.toString()),\n         () -> System.out.println(\"Complete listing the shares!\")\n     );\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-shares"
  returns:
    description: "<xref uid=\"com.azure.storage.file.share.models.ShareItem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Shares\"></xref> in the storage account that satisfy the filter requirements"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.models.ShareItem?alt=com.azure.storage.file.share.models.ShareItem&text=ShareItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.setProperties(com.azure.storage.file.share.models.ShareServiceProperties)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.setProperties(ShareServiceProperties properties)"
  name: "setProperties(ShareServiceProperties properties)"
  nameWithType: "ShareServiceAsyncClient.setProperties(ShareServiceProperties properties)"
  summary: "Sets the properties for the storage account's File service."
  parameters:
  - description: "Storage account File service properties"
    name: "properties"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareServiceProperties?alt=com.azure.storage.file.share.models.ShareServiceProperties&text=ShareServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> setProperties(ShareServiceProperties properties)"
  desc: "Sets the properties for the storage account's File service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing). To maintain the CORS in the Queue service pass a `null` value for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>. To disable all CORS in the Queue service pass an empty list for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>.\n\n**Code Sample**\n\nEnable Minute and Hour Metrics\n\n```java\nfileServiceAsyncClient.getProperties().subscribe(properties -> {\n     properties.getMinuteMetrics().setEnabled(true);\n     properties.getHourMetrics().setEnabled(true);\n\n     fileServiceAsyncClient.setProperties(properties)\n         .subscribe(r -> System.out.println(\"Setting File service properties completed.\"));\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-service-properties"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse(com.azure.storage.file.share.models.ShareServiceProperties)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.setPropertiesWithResponse(ShareServiceProperties properties)"
  name: "setPropertiesWithResponse(ShareServiceProperties properties)"
  nameWithType: "ShareServiceAsyncClient.setPropertiesWithResponse(ShareServiceProperties properties)"
  summary: "Sets the properties for the storage account's File service."
  parameters:
  - description: "Storage account File service properties"
    name: "properties"
    type: "<xref href=\"com.azure.storage.file.share.models.ShareServiceProperties?alt=com.azure.storage.file.share.models.ShareServiceProperties&text=ShareServiceProperties\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setPropertiesWithResponse(ShareServiceProperties properties)"
  desc: "Sets the properties for the storage account's File service. The properties range from storage analytics and metric to CORS (Cross-Origin Resource Sharing). To maintain the CORS in the Queue service pass a `null` value for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>. To disable all CORS in the Queue service pass an empty list for <xref uid=\"com.azure.storage.file.share.models.ShareServiceProperties.getCors()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CORS\"></xref>.\n\n**Code Sample**\n\nClear CORS in the File service\n\n```java\nfileServiceAsyncClient.getProperties().subscribe(properties -> {\n     properties.setCors(Collections.emptyList());\n\n     fileServiceAsyncClient.setPropertiesWithResponse(properties).subscribe(response ->\n         System.out.printf(\"Setting File service properties completed with status code %d\",\n             response.getStatusCode()));\n });\n```\n\nEnable Minute and Hour Metrics\n\n```java\nfileServiceAsyncClient.getPropertiesWithResponse().subscribe(response -> {\n     ShareServiceProperties properties = response.getValue();\n     properties.getMinuteMetrics().setEnabled(true);\n     properties.getHourMetrics().setEnabled(true);\n\n     fileServiceAsyncClient.setPropertiesWithResponse(properties).subscribe(r ->\n         System.out.printf(\"Setting File service properties completed with status code %d\", r.getStatusCode()));\n });\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-file-service-properties"
  returns:
    description: "A response that only contains headers and response status code"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShare(String deletedShareName, String deletedShareVersion)"
  name: "undeleteShare(String deletedShareName, String deletedShareVersion)"
  nameWithType: "ShareServiceAsyncClient.undeleteShare(String deletedShareName, String deletedShareVersion)"
  summary: "Restores a previously deleted share."
  parameters:
  - description: "The name of the previously deleted share."
    name: "deletedShareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the previously deleted share."
    name: "deletedShareVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ShareAsyncClient> undeleteShare(String deletedShareName, String deletedShareVersion)"
  desc: "Restores a previously deleted share.\n\nIf the share associated with provided `deletedShareName` already exists, this call will result in a 409 (conflict).\n\nThis API is only functional if Share Soft Delete is enabled for the storage account associated with the share. For more information, see the Azure Docs.\n\n**Code Samples**\n\n```java\nListSharesOptions listSharesOptions = new ListSharesOptions();\n listSharesOptions.setIncludeDeleted(true);\n fileServiceAsyncClient.listShares(listSharesOptions).flatMap(\n     deletedShare -> {\n         Mono<ShareAsyncClient> shareAsyncClient = fileServiceAsyncClient.undeleteShare(\n             deletedShare.getName(), deletedShare.getVersion());\n         return shareAsyncClient;\n     }\n ).blockFirst();\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/restore-share"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> used\n to interact with the restored share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.file.share.ShareServiceAsyncClient.undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)"
  name: "undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)"
  nameWithType: "ShareServiceAsyncClient.undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)"
  summary: "Restores a previously deleted share."
  parameters:
  - description: "The name of the previously deleted share."
    name: "deletedShareName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the previously deleted share."
    name: "deletedShareVersion"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ShareAsyncClient>> undeleteShareWithResponse(String deletedShareName, String deletedShareVersion)"
  desc: "Restores a previously deleted share.\n\nIf the share associated with provided `deletedShareName` already exists, this call will result in a 409 (conflict).\n\nThis API is only functional if Share Soft Delete is enabled for the storage account associated with the share. For more information, see the Azure Docs.\n\n**Code Samples**\n\n```java\nListSharesOptions listSharesOptions = new ListSharesOptions();\n listSharesOptions.setIncludeDeleted(true);\n fileServiceAsyncClient.listShares(listSharesOptions).flatMap(\n     deletedShare -> {\n         Mono<ShareAsyncClient> shareAsyncClient = fileServiceAsyncClient.undeleteShareWithResponse(\n             deletedShare.getName(), deletedShare.getVersion()).map(Response::getValue);\n         return shareAsyncClient;\n     }\n ).blockFirst();\n```\n\nFor more information, see the [Azure Docs][].\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/restore-share"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"value\"></xref> contains a <xref uid=\"com.azure.storage.file.share.ShareAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ShareAsyncClient\"></xref> used to interact with the restored share."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.share.ShareAsyncClient?alt=com.azure.storage.file.share.ShareAsyncClient&text=ShareAsyncClient\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a azureFileStorageClient that contains all the operations for interacting with a file account in Azure Storage. Operations allowed by the azureFileStorageClient are creating, listing, and deleting shares and retrieving and updating properties of the account.\n\n**Instantiating an Asynchronous File Service Client**\n\n```java\nShareAsyncClient client = new ShareClientBuilder()\n     .connectionString(\"${connectionString}\")\n     .endpoint(\"${endpoint}\")\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.share.ShareServiceClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the azureFileStorageClient."
metadata: {}
package: "com.azure.storage.file.share"
artifact: com.azure:azure-storage-file-share:12.14.0-beta.1
