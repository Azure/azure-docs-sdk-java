### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray*"
fullName: "com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray"
name: "toByteArray"
nameWithType: "Ints.toByteArray"
members:
- uid: "com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int)"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int value)"
  name: "toByteArray(int value)"
  nameWithType: "Ints.toByteArray(int value)"
  summary: "Returns a big-endian representation of `value` in a 4-element byte array; equivalent to `ByteBuffer.allocate(4).putInt(value).array()`. For example, the input value `0x12131415` would yield the byte array `{0x12, 0x13, 0x14, 0x15}`.\n\nIf you need to convert and concatenate several values (possibly even of different types), use a shared <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.nio.ByteBuffer\"></xref> instance, or use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.io.ByteStreams#newDataOutput()\"></xref> to get a growable buffer."
  parameters:
  - name: "value"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static byte[] toByteArray(int value)"
  returns:
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.primitives"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
