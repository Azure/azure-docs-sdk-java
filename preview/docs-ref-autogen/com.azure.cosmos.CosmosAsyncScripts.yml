### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosAsyncScripts
  id: CosmosAsyncScripts
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties)
  - com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties,com.azure.cosmos.models.CosmosStoredProcedureRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.createTrigger(com.azure.cosmos.models.CosmosTriggerProperties)
  - com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)
  - com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure(java.lang.String)
  - com.azure.cosmos.CosmosAsyncScripts.getTrigger(java.lang.String)
  - com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction(java.lang.String)
  - com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.queryTriggers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.queryTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures()
  - com.azure.cosmos.CosmosAsyncScripts.readAllTriggers()
  - com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions()
  langs:
  - java
  name: CosmosAsyncScripts
  nameWithType: CosmosAsyncScripts
  fullName: com.azure.cosmos.CosmosAsyncScripts
  type: Class
  package: com.azure.cosmos
  summary: The type Cosmos async scripts. This contains async methods to operate on cosmos scripts like UDFs, StoredProcedures and Triggers
  syntax:
    content: public class CosmosAsyncScripts
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosAsyncScripts.CosmosAsyncScripts(com.azure.cosmos.CosmosAsyncContainer)
  id: CosmosAsyncScripts(com.azure.cosmos.CosmosAsyncContainer)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: CosmosAsyncScripts(CosmosAsyncContainer container)
  nameWithType: CosmosAsyncScripts.CosmosAsyncScripts(CosmosAsyncContainer container)
  fullName: com.azure.cosmos.CosmosAsyncScripts.CosmosAsyncScripts(CosmosAsyncContainer container)
  overload: com.azure.cosmos.CosmosAsyncScripts.CosmosAsyncScripts*
  type: Constructor
  package: com.azure.cosmos
  syntax:
    content: " CosmosAsyncScripts(CosmosAsyncContainer container)"
    parameters:
    - id: container
      type: com.azure.cosmos.CosmosAsyncContainer
- uid: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties)
  id: createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: createStoredProcedure(CosmosStoredProcedureProperties properties)
  nameWithType: CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties)
  fullName: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties)
  overload: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a cosmos stored procedure.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single cosmos stored procedure response with the created cosmos stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosStoredProcedureResponse> createStoredProcedure(CosmosStoredProcedureProperties properties)
    parameters:
    - id: properties
      type: com.azure.cosmos.models.CosmosStoredProcedureProperties
      description: the cosmos stored procedure properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosStoredProcedureResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos stored procedure resource response or an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties,com.azure.cosmos.models.CosmosStoredProcedureRequestOptions)
  id: createStoredProcedure(com.azure.cosmos.models.CosmosStoredProcedureProperties,com.azure.cosmos.models.CosmosStoredProcedureRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)
  nameWithType: CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a cosmos stored procedure.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single cosmos stored procedure response with the created cosmos stored procedure. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosStoredProcedureResponse> createStoredProcedure(CosmosStoredProcedureProperties properties, CosmosStoredProcedureRequestOptions options)
    parameters:
    - id: properties
      type: com.azure.cosmos.models.CosmosStoredProcedureProperties
      description: the cosmos stored procedure properties.
    - id: options
      type: com.azure.cosmos.models.CosmosStoredProcedureRequestOptions
      description: the stored procedure request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosStoredProcedureResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single cosmos stored procedure resource response or an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.createTrigger(com.azure.cosmos.models.CosmosTriggerProperties)
  id: createTrigger(com.azure.cosmos.models.CosmosTriggerProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: createTrigger(CosmosTriggerProperties properties)
  nameWithType: CosmosAsyncScripts.createTrigger(CosmosTriggerProperties properties)
  fullName: com.azure.cosmos.CosmosAsyncScripts.createTrigger(CosmosTriggerProperties properties)
  overload: com.azure.cosmos.CosmosAsyncScripts.createTrigger*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos trigger.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a cosmos trigger response In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosTriggerResponse> createTrigger(CosmosTriggerProperties properties)
    parameters:
    - id: properties
      type: com.azure.cosmos.models.CosmosTriggerProperties
      description: the cosmos trigger properties
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosTriggerResponse>
      description: an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created trigger or an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)
  id: createUserDefinedFunction(com.azure.cosmos.models.CosmosUserDefinedFunctionProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)
  nameWithType: CosmosAsyncScripts.createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)
  fullName: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)
  overload: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a cosmos user defined function.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single cosmos user defined function response. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosUserDefinedFunctionResponse> createUserDefinedFunction(CosmosUserDefinedFunctionProperties properties)
    parameters:
    - id: properties
      type: com.azure.cosmos.models.CosmosUserDefinedFunctionProperties
      description: the cosmos user defined function properties
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserDefinedFunctionResponse>
      description: >-
        an <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the created user defined function or an
         error.
- uid: com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure(java.lang.String)
  id: getStoredProcedure(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: getStoredProcedure(String id)
  nameWithType: CosmosAsyncScripts.getStoredProcedure(String id)
  fullName: com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure(String id)
  overload: com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure*
  type: Method
  package: com.azure.cosmos
  summary: Gets a CosmosAsyncStoredProcedure object without making a service call
  syntax:
    content: public CosmosAsyncStoredProcedure getStoredProcedure(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: id of the stored procedure
    return:
      type: com.azure.cosmos.CosmosAsyncStoredProcedure
      description: a cosmos stored procedure
- uid: com.azure.cosmos.CosmosAsyncScripts.getTrigger(java.lang.String)
  id: getTrigger(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: getTrigger(String id)
  nameWithType: CosmosAsyncScripts.getTrigger(String id)
  fullName: com.azure.cosmos.CosmosAsyncScripts.getTrigger(String id)
  overload: com.azure.cosmos.CosmosAsyncScripts.getTrigger*
  type: Method
  package: com.azure.cosmos
  summary: Gets a CosmosAsyncTrigger object without making a service call
  syntax:
    content: public CosmosAsyncTrigger getTrigger(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: id of the cosmos trigger
    return:
      type: com.azure.cosmos.CosmosAsyncTrigger
      description: a cosmos trigger
- uid: com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction(java.lang.String)
  id: getUserDefinedFunction(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: getUserDefinedFunction(String id)
  nameWithType: CosmosAsyncScripts.getUserDefinedFunction(String id)
  fullName: com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction(String id)
  overload: com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction*
  type: Method
  package: com.azure.cosmos
  summary: Gets a CosmosAsyncUserDefinedFunction object without making a service call
  syntax:
    content: public CosmosAsyncUserDefinedFunction getUserDefinedFunction(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: id of the user defined function
    return:
      type: com.azure.cosmos.CosmosAsyncUserDefinedFunction
      description: a cosmos user defined function
- uid: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryStoredProcedures(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncScripts.queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for stored procedures in a container.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosStoredProcedureProperties> queryStoredProcedures(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosStoredProcedureProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained stored
         procedures or
         an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryStoredProcedures(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: queryStoredProcedures(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncScripts.queryStoredProcedures(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for stored procedures in a container.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained stored procedures. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosStoredProcedureProperties> queryStoredProcedures(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosStoredProcedureProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained stored
         procedures or
         an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.queryTriggers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryTriggers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncScripts.queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.queryTriggers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for triggers in the container


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosTriggerProperties> queryTriggers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosTriggerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained triggers or an
         error.
- uid: com.azure.cosmos.CosmosAsyncScripts.queryTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryTriggers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: queryTriggers(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncScripts.queryTriggers(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryTriggers(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.queryTriggers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for triggers in the container


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained triggers. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosTriggerProperties> queryTriggers(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosTriggerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained triggers or an
         error.
- uid: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUserDefinedFunctions(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncScripts.queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for user defined functions in the container.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserDefinedFunctionProperties> queryUserDefinedFunctions(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the SQL query specification.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserDefinedFunctionProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained user defined
         functions
         or an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUserDefinedFunctions(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosAsyncScripts.queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Query for user defined functions in the container.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained user defined functions. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserDefinedFunctionProperties> queryUserDefinedFunctions(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the query request options.
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserDefinedFunctionProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained user defined
         functions
         or an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures()
  id: readAllStoredProcedures()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: readAllStoredProcedures()
  nameWithType: CosmosAsyncScripts.readAllStoredProcedures()
  fullName: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures()
  overload: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all cosmos stored procedures in a container.


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the read cosmos stored procedure properties. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosStoredProcedureProperties> readAllStoredProcedures()
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosStoredProcedureProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the read cosmos stored
         procedures
         properties or an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers()
  id: readAllTriggers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: readAllTriggers()
  nameWithType: CosmosAsyncScripts.readAllTriggers()
  fullName: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers()
  overload: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all triggers in a container


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the read cosmos trigger properties. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosTriggerProperties> readAllTriggers()
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosTriggerProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the read cosmos rigger
         properties or
         an error.
- uid: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions()
  id: readAllUserDefinedFunctions()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncScripts
  langs:
  - java
  name: readAllUserDefinedFunctions()
  nameWithType: CosmosAsyncScripts.readAllUserDefinedFunctions()
  fullName: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions()
  overload: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all cosmos user defined functions in the container


    After subscription the operation will be performed. The <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will contain one or several feed response pages of the read user defined functions. In case of failure the <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> will error.
  syntax:
    content: public CosmosPagedFlux<CosmosUserDefinedFunctionProperties> readAllUserDefinedFunctions()
    return:
      type: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserDefinedFunctionProperties>
      description: >-
        a <xref uid="com.azure.cosmos.util.CosmosPagedFlux" data-throw-if-not-resolved="false">CosmosPagedFlux</xref> containing one or several feed response pages of the read user defined
         functions or an
         error.
references:
- uid: com.azure.cosmos.CosmosAsyncContainer
  name: CosmosAsyncContainer
  nameWithType: CosmosAsyncContainer
  fullName: com.azure.cosmos.CosmosAsyncContainer
- uid: com.azure.cosmos.CosmosAsyncScripts.CosmosAsyncScripts*
  name: CosmosAsyncScripts
  nameWithType: CosmosAsyncScripts.CosmosAsyncScripts
  fullName: com.azure.cosmos.CosmosAsyncScripts.CosmosAsyncScripts
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosStoredProcedureProperties
  name: CosmosStoredProcedureProperties
  nameWithType: CosmosStoredProcedureProperties
  fullName: com.azure.cosmos.models.CosmosStoredProcedureProperties
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosStoredProcedureResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosStoredProcedureResponse
    name: CosmosStoredProcedureResponse
    fullName: com.azure.cosmos.models.CosmosStoredProcedureResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure*
  name: createStoredProcedure
  nameWithType: CosmosAsyncScripts.createStoredProcedure
  fullName: com.azure.cosmos.CosmosAsyncScripts.createStoredProcedure
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosStoredProcedureRequestOptions
  name: CosmosStoredProcedureRequestOptions
  nameWithType: CosmosStoredProcedureRequestOptions
  fullName: com.azure.cosmos.models.CosmosStoredProcedureRequestOptions
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosStoredProcedureProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosStoredProcedureProperties
    name: CosmosStoredProcedureProperties
    fullName: com.azure.cosmos.models.CosmosStoredProcedureProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures*
  name: readAllStoredProcedures
  nameWithType: CosmosAsyncScripts.readAllStoredProcedures
  fullName: com.azure.cosmos.CosmosAsyncScripts.readAllStoredProcedures
  package: com.azure.cosmos
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures*
  name: queryStoredProcedures
  nameWithType: CosmosAsyncScripts.queryStoredProcedures
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryStoredProcedures
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.SqlQuerySpec
  name: SqlQuerySpec
  nameWithType: SqlQuerySpec
  fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.cosmos.CosmosAsyncStoredProcedure
  name: CosmosAsyncStoredProcedure
  nameWithType: CosmosAsyncStoredProcedure
  fullName: com.azure.cosmos.CosmosAsyncStoredProcedure
- uid: com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure*
  name: getStoredProcedure
  nameWithType: CosmosAsyncScripts.getStoredProcedure
  fullName: com.azure.cosmos.CosmosAsyncScripts.getStoredProcedure
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosUserDefinedFunctionProperties
  name: CosmosUserDefinedFunctionProperties
  nameWithType: CosmosUserDefinedFunctionProperties
  fullName: com.azure.cosmos.models.CosmosUserDefinedFunctionProperties
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosUserDefinedFunctionResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosUserDefinedFunctionResponse
    name: CosmosUserDefinedFunctionResponse
    fullName: com.azure.cosmos.models.CosmosUserDefinedFunctionResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction*
  name: createUserDefinedFunction
  nameWithType: CosmosAsyncScripts.createUserDefinedFunction
  fullName: com.azure.cosmos.CosmosAsyncScripts.createUserDefinedFunction
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosUserDefinedFunctionProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosUserDefinedFunctionProperties
    name: CosmosUserDefinedFunctionProperties
    fullName: com.azure.cosmos.models.CosmosUserDefinedFunctionProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions*
  name: readAllUserDefinedFunctions
  nameWithType: CosmosAsyncScripts.readAllUserDefinedFunctions
  fullName: com.azure.cosmos.CosmosAsyncScripts.readAllUserDefinedFunctions
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions*
  name: queryUserDefinedFunctions
  nameWithType: CosmosAsyncScripts.queryUserDefinedFunctions
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryUserDefinedFunctions
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncUserDefinedFunction
  name: CosmosAsyncUserDefinedFunction
  nameWithType: CosmosAsyncUserDefinedFunction
  fullName: com.azure.cosmos.CosmosAsyncUserDefinedFunction
- uid: com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction*
  name: getUserDefinedFunction
  nameWithType: CosmosAsyncScripts.getUserDefinedFunction
  fullName: com.azure.cosmos.CosmosAsyncScripts.getUserDefinedFunction
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosTriggerProperties
  name: CosmosTriggerProperties
  nameWithType: CosmosTriggerProperties
  fullName: com.azure.cosmos.models.CosmosTriggerProperties
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosTriggerResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosTriggerResponse
    name: CosmosTriggerResponse
    fullName: com.azure.cosmos.models.CosmosTriggerResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncScripts.createTrigger*
  name: createTrigger
  nameWithType: CosmosAsyncScripts.createTrigger
  fullName: com.azure.cosmos.CosmosAsyncScripts.createTrigger
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedFlux<com.azure.cosmos.models.CosmosTriggerProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedFlux
    name: CosmosPagedFlux
    fullName: com.azure.cosmos.util.CosmosPagedFlux
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosTriggerProperties
    name: CosmosTriggerProperties
    fullName: com.azure.cosmos.models.CosmosTriggerProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers*
  name: readAllTriggers
  nameWithType: CosmosAsyncScripts.readAllTriggers
  fullName: com.azure.cosmos.CosmosAsyncScripts.readAllTriggers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncScripts.queryTriggers*
  name: queryTriggers
  nameWithType: CosmosAsyncScripts.queryTriggers
  fullName: com.azure.cosmos.CosmosAsyncScripts.queryTriggers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncTrigger
  name: CosmosAsyncTrigger
  nameWithType: CosmosAsyncTrigger
  fullName: com.azure.cosmos.CosmosAsyncTrigger
- uid: com.azure.cosmos.CosmosAsyncScripts.getTrigger*
  name: getTrigger
  nameWithType: CosmosAsyncScripts.getTrigger
  fullName: com.azure.cosmos.CosmosAsyncScripts.getTrigger
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.cosmos.models.CosmosStoredProcedureResponse
  name: CosmosStoredProcedureResponse
  nameWithType: CosmosStoredProcedureResponse
  fullName: com.azure.cosmos.models.CosmosStoredProcedureResponse
- uid: com.azure.cosmos.util.CosmosPagedFlux
  name: CosmosPagedFlux
  nameWithType: CosmosPagedFlux
  fullName: com.azure.cosmos.util.CosmosPagedFlux
- uid: com.azure.cosmos.models.CosmosUserDefinedFunctionResponse
  name: CosmosUserDefinedFunctionResponse
  nameWithType: CosmosUserDefinedFunctionResponse
  fullName: com.azure.cosmos.models.CosmosUserDefinedFunctionResponse
- uid: com.azure.cosmos.models.CosmosTriggerResponse
  name: CosmosTriggerResponse
  nameWithType: CosmosTriggerResponse
  fullName: com.azure.cosmos.models.CosmosTriggerResponse
