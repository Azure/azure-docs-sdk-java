### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range
  id: Range
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang
  children:
  - com.azure.cosmos.implementation.apachecommons.lang.Range.<T>between(T,T)
  - com.azure.cosmos.implementation.apachecommons.lang.Range.<T>between(T,T,java.util.Comparator<T>)
  - com.azure.cosmos.implementation.apachecommons.lang.Range.<T>is(T)
  - com.azure.cosmos.implementation.apachecommons.lang.Range.<T>is(T,java.util.Comparator<T>)
  - com.azure.cosmos.implementation.apachecommons.lang.Range.contains(T)
  - com.azure.cosmos.implementation.apachecommons.lang.Range.equals(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.lang.Range.getComparator()
  - com.azure.cosmos.implementation.apachecommons.lang.Range.getMaximum()
  - com.azure.cosmos.implementation.apachecommons.lang.Range.getMinimum()
  - com.azure.cosmos.implementation.apachecommons.lang.Range.hashCode()
  - com.azure.cosmos.implementation.apachecommons.lang.Range.toString()
  - com.azure.cosmos.implementation.apachecommons.lang.Range.toString(java.lang.String)
  langs:
  - java
  name: Range<T>
  nameWithType: Range<T>
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>
  type: Class
  package: com.azure.cosmos.implementation.apachecommons.lang
  syntax:
    content: public final class Range<T> implements Serializable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.<T>between(T,T)
  id: <T>between(T,T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: <T>between(T fromInclusive, T toInclusive)
  nameWithType: Range<T>.<T>between(T fromInclusive, T toInclusive)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>between(T fromInclusive, T toInclusive)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.between*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Obtains a range with the specified minimum and maximum values (both inclusive).


    The range uses the natural ordering of the elements to determine where values lie in the range.


    The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
  syntax:
    content: public static Range<T> <T>between(T fromInclusive, T toInclusive)
    parameters:
    - id: fromInclusive
      type: T
      description: the first value that defines the edge of the range, inclusive
    - id: toInclusive
      type: T
      description: the second value that defines the edge of the range, inclusive
    return:
      type: com.azure.cosmos.implementation.apachecommons.lang.Range<T>
      description: the range object, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.<T>between(T,T,java.util.Comparator<T>)
  id: <T>between(T,T,java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: <T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)
  nameWithType: Range<T>.<T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.between*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Obtains a range with the specified minimum and maximum values (both inclusive).


    The range uses the specified `Comparator` to determine where values lie in the range.


    The arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values.
  syntax:
    content: public static Range<T> <T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)
    parameters:
    - id: fromInclusive
      type: T
      description: the first value that defines the edge of the range, inclusive
    - id: toInclusive
      type: T
      description: the second value that defines the edge of the range, inclusive
    - id: comparator
      type: java.util.Comparator<T>
      description: the comparator to be used, null for natural ordering
    return:
      type: com.azure.cosmos.implementation.apachecommons.lang.Range<T>
      description: the range object, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.<T>is(T)
  id: <T>is(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: <T>is(T element)
  nameWithType: Range<T>.<T>is(T element)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>is(T element)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.is*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Obtains a range using the specified element as both the minimum and maximum in this range.


    The range uses the natural ordering of the elements to determine where values lie in the range.
  syntax:
    content: public static Range<T> <T>is(T element)
    parameters:
    - id: element
      type: T
      description: the value to use for this range, not null
    return:
      type: com.azure.cosmos.implementation.apachecommons.lang.Range<T>
      description: the range object, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.<T>is(T,java.util.Comparator<T>)
  id: <T>is(T,java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: <T>is(T element, Comparator<T> comparator)
  nameWithType: Range<T>.<T>is(T element, Comparator<T> comparator)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>is(T element, Comparator<T> comparator)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.is*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Obtains a range using the specified element as both the minimum and maximum in this range.


    The range uses the specified `Comparator` to determine where values lie in the range.
  syntax:
    content: public static Range<T> <T>is(T element, Comparator<T> comparator)
    parameters:
    - id: element
      type: T
      description: the value to use for this range, must not be <code>null</code>
    - id: comparator
      type: java.util.Comparator<T>
      description: the comparator to be used, null for natural ordering
    return:
      type: com.azure.cosmos.implementation.apachecommons.lang.Range<T>
      description: the range object, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.Range(T,T,java.util.Comparator<T>)
  id: Range(T,T,java.util.Comparator<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: Range(T element1, T element2, Comparator<T> comp)
  nameWithType: Range<T>.Range(T element1, T element2, Comparator<T> comp)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.Range(T element1, T element2, Comparator<T> comp)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.Range*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Creates an instance.
  syntax:
    content: private Range(T element1, T element2, Comparator<T> comp)
    parameters:
    - id: element1
      type: T
      description: the first element, not null
    - id: element2
      type: T
      description: the second element, not null
    - id: comp
      type: java.util.Comparator<T>
      description: the comparator to be used, null for natural ordering
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.contains(T)
  id: contains(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: contains(T element)
  nameWithType: Range<T>.contains(T element)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.contains(T element)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.contains*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Checks whether the specified element occurs within this range.
  syntax:
    content: public boolean contains(T element)
    parameters:
    - id: element
      type: T
      description: the element to check for, null returns false
    return:
      type: boolean
      description: true if the specified element occurs within this range
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: equals(Object obj)
  nameWithType: Range<T>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.equals(Object obj)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.equals*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Compares this range to another object to test if they are equal.


    .


    To be equal, the minimum and maximum values must be equal, which ignores any differences in the comparator.
  syntax:
    content: public boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: the reference object with which to compare
    return:
      type: boolean
      description: true if this object is equal
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.getComparator()
  id: getComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: getComparator()
  nameWithType: Range<T>.getComparator()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.getComparator()
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.getComparator*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Gets the comparator being used to determine if objects are within the range.


    Natural ordering uses an internal comparator implementation, thus this method never returns null.
  syntax:
    content: public Comparator<T> getComparator()
    return:
      type: java.util.Comparator<T>
      description: the comparator being used, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.getMaximum()
  id: getMaximum()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: getMaximum()
  nameWithType: Range<T>.getMaximum()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.getMaximum()
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.getMaximum*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Gets the maximum value in this range.
  syntax:
    content: public T getMaximum()
    return:
      type: T
      description: the maximum value in this range, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.getMinimum()
  id: getMinimum()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: getMinimum()
  nameWithType: Range<T>.getMinimum()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.getMinimum()
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.getMinimum*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Gets the minimum value in this range.
  syntax:
    content: public T getMinimum()
    return:
      type: T
      description: the minimum value in this range, not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: hashCode()
  nameWithType: Range<T>.hashCode()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.hashCode()
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Gets a suitable hash code for the range.
  syntax:
    content: public int hashCode()
    return:
      type: int
      description: a hash code value for this object
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: toString()
  nameWithType: Range<T>.toString()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.toString()
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.toString*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Gets the range as a `String`.


    The format of the String is '\[*min*..*max*\]'.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
      description: the <code>String</code> representation of this range
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.toString(java.lang.String)
  id: toString(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.Range
  langs:
  - java
  name: toString(String format)
  nameWithType: Range<T>.toString(String format)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.toString(String format)
  overload: com.azure.cosmos.implementation.apachecommons.lang.Range.toString*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Formats the receiver using the given format.


    This uses <xref uid="" data-throw-if-not-resolved="false">java.util.Formattable</xref> to perform the formatting. Three variables may be used to embed the minimum, maximum and comparator. Use `%1$s` for the minimum element, `%2$s` for the maximum element and `%3$s` for the comparator. The default format used by `toString()` is `[%1$s..%2$s]`.
  syntax:
    content: public String toString(String format)
    parameters:
    - id: format
      type: java.lang.String
      description: the format string, optionally containing <code>%1$s</code>, <code>%2$s</code> and  <code>%3$s</code>, not null
    return:
      type: java.lang.String
      description: the formatted string, not null
references:
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: java.util.Comparator<T>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.Range*
  name: Range
  nameWithType: Range<T>.Range
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.Range
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.apachecommons.lang.Range
    name: Range
    fullName: com.azure.cosmos.implementation.apachecommons.lang.Range
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.is*
  name: <T>is
  nameWithType: Range<T>.<T>is
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>is
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.between*
  name: <T>between
  nameWithType: Range<T>.<T>between
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>between
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.getMinimum*
  name: getMinimum
  nameWithType: Range<T>.getMinimum
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.getMinimum
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.getMaximum*
  name: getMaximum
  nameWithType: Range<T>.getMaximum
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.getMaximum
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.getComparator*
  name: getComparator
  nameWithType: Range<T>.getComparator
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.getComparator
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.contains*
  name: contains
  nameWithType: Range<T>.contains
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.contains
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.equals*
  name: equals
  nameWithType: Range<T>.equals
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.equals
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.hashCode*
  name: hashCode
  nameWithType: Range<T>.hashCode
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.hashCode
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.lang.Range.toString*
  name: toString
  nameWithType: Range<T>.toString
  fullName: com.azure.cosmos.implementation.apachecommons.lang.Range<T>.toString
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
