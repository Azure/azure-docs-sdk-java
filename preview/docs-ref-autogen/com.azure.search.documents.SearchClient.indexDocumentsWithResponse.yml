### YamlMime:JavaMember
uid: "com.azure.search.documents.SearchClient.indexDocumentsWithResponse*"
fullName: "com.azure.search.documents.SearchClient.indexDocumentsWithResponse"
name: "indexDocumentsWithResponse"
nameWithType: "SearchClient.indexDocumentsWithResponse"
members:
- uid: "com.azure.search.documents.SearchClient.indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.SearchClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)"
  name: "indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)"
  nameWithType: "SearchClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)"
  summary: "Sends a batch of upload, merge, and/or delete actions to the search index.\n\n**Code Sample**\n\nIndex batch operation on dynamic SearchDocument.\n\n```java\nSearchDocument searchDocument1 = new SearchDocument();\n searchDocument1.put(\"hotelId\", \"1\");\n searchDocument1.put(\"hotelName\", \"test1\");\n SearchDocument searchDocument2 = new SearchDocument();\n searchDocument2.put(\"hotelId\", \"2\");\n searchDocument2.put(\"hotelName\", \"test2\");\n IndexDocumentsBatch<SearchDocument> indexDocumentsBatch = new IndexDocumentsBatch<>();\n indexDocumentsBatch.addUploadActions(Collections.singletonList(searchDocument1));\n indexDocumentsBatch.addDeleteActions(Collections.singletonList(searchDocument2));\n Response<IndexDocumentsResult> resultResponse = searchClient.indexDocumentsWithResponse(indexDocumentsBatch,\n     null, new Context(key1, value1));\n System.out.println(\"The status code of the response is \" + resultResponse.getStatusCode());\n for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {\n     System.out.printf(\"Does document with key %s finish successfully? %b%n\", indexingResult.getKey(),\n         indexingResult.isSucceeded());\n }\n```"
  parameters:
  - description: "The batch of index actions"
    name: "batch"
    type: "<xref href=\"com.azure.search.documents.indexes.models.IndexDocumentsBatch?alt=com.azure.search.documents.indexes.models.IndexDocumentsBatch&text=IndexDocumentsBatch\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Options that allow specifying document indexing behavior."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.models.IndexDocumentsOptions?alt=com.azure.search.documents.models.IndexDocumentsOptions&text=IndexDocumentsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the Http pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<IndexDocumentsResult> indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)"
  returns:
    description: "Response containing the status of operations for all actions in the batch"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.models.IndexDocumentsResult?alt=com.azure.search.documents.models.IndexDocumentsResult&text=IndexDocumentsResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.search.documents"
artifact: com.azure:azure-search-documents:11.2.0-beta.3
