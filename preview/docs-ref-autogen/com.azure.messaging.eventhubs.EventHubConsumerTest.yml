### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest
  id: EventHubConsumerTest
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventHubConsumerTest.canHaveMultipleSubscribers()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.canLimitRequestsBackpressure()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.canResubscribeToConsumer()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.receivesNumberOfEvents()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.returnsCorrectCreditRequest()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.setup()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesCreditsWhenSubscribers()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers()
  - com.azure.messaging.eventhubs.EventHubConsumerTest.teardown()
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: EventHubConsumerTest
  nameWithType: EventHubConsumerTest
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 51
  package: com.azure.messaging.eventhubs
  summary: "<p>Unit tests to verify functionality of <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref>. </p>"
  syntax:
    content: public class EventHubConsumerTest
  inheritance:
  - java.lang.Object
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.canHaveMultipleSubscribers()
  id: canHaveMultipleSubscribers()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: canHaveMultipleSubscribers()
  nameWithType: EventHubConsumerTest.canHaveMultipleSubscribers()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.canHaveMultipleSubscribers()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.canHaveMultipleSubscribers*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 147
  package: com.azure.messaging.eventhubs
  summary: "<p>Verify that receive can have multiple subscribers. </p>"
  syntax:
    content: public void canHaveMultipleSubscribers()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.canLimitRequestsBackpressure()
  id: canLimitRequestsBackpressure()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: canLimitRequestsBackpressure()
  nameWithType: EventHubConsumerTest.canLimitRequestsBackpressure()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.canLimitRequestsBackpressure()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.canLimitRequestsBackpressure*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 185
  package: com.azure.messaging.eventhubs
  summary: "<p>Verifies that we can limit the number of deliveries added on the link at a given time. </p>"
  syntax:
    content: public void canLimitRequestsBackpressure()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.canResubscribeToConsumer()
  id: canResubscribeToConsumer()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: canResubscribeToConsumer()
  nameWithType: EventHubConsumerTest.canResubscribeToConsumer()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.canResubscribeToConsumer()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.canResubscribeToConsumer*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 120
  package: com.azure.messaging.eventhubs
  summary: "<p>Verifies that we can resubscribe to the receiver multiple times. </p>"
  syntax:
    content: public void canResubscribeToConsumer()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.receivesNumberOfEvents()
  id: receivesNumberOfEvents()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: receivesNumberOfEvents()
  nameWithType: EventHubConsumerTest.receivesNumberOfEvents()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.receivesNumberOfEvents()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.receivesNumberOfEvents*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 103
  package: com.azure.messaging.eventhubs
  summary: "<p>Verifies that this receives a number of events. Verifies that the initial credits we add are equal to the prefetch value. </p>"
  syntax:
    content: public void receivesNumberOfEvents()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.returnsCorrectCreditRequest()
  id: returnsCorrectCreditRequest()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: returnsCorrectCreditRequest()
  nameWithType: EventHubConsumerTest.returnsCorrectCreditRequest()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.returnsCorrectCreditRequest()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.returnsCorrectCreditRequest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 227
  package: com.azure.messaging.eventhubs
  summary: "<p>Verifies that if we have limited the request, the number of credits added is the same as that limit. </p>"
  syntax:
    content: public void returnsCorrectCreditRequest()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.setup()
  id: setup()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: setup()
  nameWithType: EventHubConsumerTest.setup()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.setup()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.setup*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 75
  package: com.azure.messaging.eventhubs
  syntax:
    content: public void setup()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesCreditsWhenSubscribers()
  id: suppliesCreditsWhenSubscribers()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: suppliesCreditsWhenSubscribers()
  nameWithType: EventHubConsumerTest.suppliesCreditsWhenSubscribers()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesCreditsWhenSubscribers()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesCreditsWhenSubscribers*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 269
  package: com.azure.messaging.eventhubs
  summary: "<p>Verify that the correct number of credits are returned when the link is empty, and there are subscribers. </p>"
  syntax:
    content: public void suppliesCreditsWhenSubscribers()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers()
  id: suppliesNoCreditsWhenNoSubscribers()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: suppliesNoCreditsWhenNoSubscribers()
  nameWithType: EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 300
  package: com.azure.messaging.eventhubs
  summary: "<p>Verify that 0 credits are returned when there are no subscribers for this link anymore. </p>"
  syntax:
    content: public void suppliesNoCreditsWhenNoSubscribers()
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.teardown()
  id: teardown()
  parent: com.azure.messaging.eventhubs.EventHubConsumerTest
  href: com.azure.messaging.eventhubs.EventHubConsumerTest.yml
  langs:
  - java
  name: teardown()
  nameWithType: EventHubConsumerTest.teardown()
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.teardown()
  overload: com.azure.messaging.eventhubs.EventHubConsumerTest.teardown*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/EventHubConsumerTest.java
    startLine: 92
  package: com.azure.messaging.eventhubs
  syntax:
    content: public void teardown()
references:
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.setup*
  name: setup
  nameWithType: EventHubConsumerTest.setup
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.setup
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.teardown*
  name: teardown
  nameWithType: EventHubConsumerTest.teardown
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.teardown
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.receivesNumberOfEvents*
  name: receivesNumberOfEvents
  nameWithType: EventHubConsumerTest.receivesNumberOfEvents
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.receivesNumberOfEvents
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.canResubscribeToConsumer*
  name: canResubscribeToConsumer
  nameWithType: EventHubConsumerTest.canResubscribeToConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.canResubscribeToConsumer
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.canHaveMultipleSubscribers*
  name: canHaveMultipleSubscribers
  nameWithType: EventHubConsumerTest.canHaveMultipleSubscribers
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.canHaveMultipleSubscribers
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.canLimitRequestsBackpressure*
  name: canLimitRequestsBackpressure
  nameWithType: EventHubConsumerTest.canLimitRequestsBackpressure
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.canLimitRequestsBackpressure
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.returnsCorrectCreditRequest*
  name: returnsCorrectCreditRequest
  nameWithType: EventHubConsumerTest.returnsCorrectCreditRequest
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.returnsCorrectCreditRequest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesCreditsWhenSubscribers*
  name: suppliesCreditsWhenSubscribers
  nameWithType: EventHubConsumerTest.suppliesCreditsWhenSubscribers
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesCreditsWhenSubscribers
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers*
  name: suppliesNoCreditsWhenNoSubscribers
  nameWithType: EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers
  fullName: com.azure.messaging.eventhubs.EventHubConsumerTest.suppliesNoCreditsWhenNoSubscribers
  package: com.azure.messaging.eventhubs
- uid: com.azure.core.util.logging.ClientLogger
  parent: com.azure.core.util.logging
  href: com.azure.core.util.logging.ClientLogger.yml
  name: ClientLogger
  nameWithType: ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger
  type: Class
  summary: "<p>This is a fluent logger helper class that wraps a plug-able <xref uid=\"\" data-throw-if-not-resolved=\"false\">Logger</xref>.</p>\r\n<p>This logger logs formattable messages that use<code>{} \r\n    </code> as the placeholder. When a throwable is the last argument of the format varargs and the logger is enabled for <xref uid=\"\" data-throw-if-not-resolved=\"false\">verbose</xref> logging the stack trace for the throwable will be included in the log message.</p>\r\n<p>A minimum logging level threshold is determined by the <xref uid=\"com.azure.core.util.configuration.BaseConfigurations.AZURE_LOG_LEVEL\" data-throw-if-not-resolved=\"false\">AZURE_LOG_LEVEL</xref> environment configuration, by default logging is disabled.</p>\r\n<p>\r\n  <b>Log level hierarchy</b>\r\n</p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Error</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Warning</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Info</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Verbose</xref>\r\n      </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p></p>"
  syntax:
    content: public class ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.AmqpReceiveLink
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.AmqpReceiveLink.yml
  name: AmqpReceiveLink
  nameWithType: AmqpReceiveLink
  fullName: com.azure.messaging.eventhubs.implementation.AmqpReceiveLink
  type: Interface
  summary: "<p>A unidirectional link from the client to the message broker that listens for messages.</p>\r\n<p></p>"
  syntax:
    content: public interface AmqpReceiveLink extends AmqpLink
- uid: com.azure.messaging.eventhubs.models.EventHubConsumerOptions
  parent: com.azure.messaging.eventhubs.models
  href: com.azure.messaging.eventhubs.models.EventHubConsumerOptions.yml
  name: EventHubConsumerOptions
  nameWithType: EventHubConsumerOptions
  fullName: com.azure.messaging.eventhubs.models.EventHubConsumerOptions
  type: Class
  summary: "<p>The baseline set of options that can be specified when creating a <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> to configure its behavior.</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumerOptions
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumer
- uid: com.azure.core.amqp.AmqpEndpointState
  parent: com.azure.core.amqp
  href: com.azure.core.amqp.AmqpEndpointState.yml
  name: AmqpEndpointState
  nameWithType: AmqpEndpointState
  fullName: com.azure.core.amqp.AmqpEndpointState
  type: Enum
  summary: "<p>Represents a state for a connection, session, or link. </p>"
  syntax:
    content: public enum AmqpEndpointState
