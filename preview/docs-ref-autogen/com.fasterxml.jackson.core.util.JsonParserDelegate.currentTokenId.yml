### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId*"
fullName: "com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId"
name: "currentTokenId"
nameWithType: "JsonParserDelegate.currentTokenId"
members:
- uid: "com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()"
  fullName: "com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()"
  name: "currentTokenId()"
  nameWithType: "JsonParserDelegate.currentTokenId()"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getCurrentToken()\"></xref> but that returns an `int` instead of <xref uid=\"com.fasterxml.jackson.core.JsonToken\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken\"></xref> (enum value).\n\nUse of int directly is typically more efficient on switch statements, so this method may be useful when building low-overhead codecs. Note, however, that effect may not be big enough to matter: make sure to profile performance before deciding to use this method."
  overridden: "com.fasterxml.jackson.core.JsonParser.currentTokenId()"
  syntax: "public int currentTokenId()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
