### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Optional
  id: Optional
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Optional.<T>absent()
  - com.azure.cosmos.implementation.guava25.base.Optional.<T>fromJavaUtil(java.util.Optional<T>)
  - com.azure.cosmos.implementation.guava25.base.Optional.<T>fromNullable(T)
  - com.azure.cosmos.implementation.guava25.base.Optional.<T>of(T)
  - com.azure.cosmos.implementation.guava25.base.Optional.<T>presentInstances(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Optional<? extends T>>)
  - com.azure.cosmos.implementation.guava25.base.Optional.<T>toJavaUtil(com.azure.cosmos.implementation.guava25.base.Optional<T>)
  - com.azure.cosmos.implementation.guava25.base.Optional.<V>transform(com.azure.cosmos.implementation.guava25.base.Function<? super T,V>)
  - com.azure.cosmos.implementation.guava25.base.Optional.asSet()
  - com.azure.cosmos.implementation.guava25.base.Optional.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.base.Optional.get()
  - com.azure.cosmos.implementation.guava25.base.Optional.hashCode()
  - com.azure.cosmos.implementation.guava25.base.Optional.isPresent()
  - com.azure.cosmos.implementation.guava25.base.Optional.or(T)
  - com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Optional<? extends T>)
  - com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>)
  - com.azure.cosmos.implementation.guava25.base.Optional.orNull()
  - com.azure.cosmos.implementation.guava25.base.Optional.toJavaUtil()
  - com.azure.cosmos.implementation.guava25.base.Optional.toString()
  langs:
  - java
  name: Optional<T>
  nameWithType: Optional<T>
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    An immutable object that may contain a non-null reference to another object. Each instance of this type either contains a non-null reference, or contains nothing (in which case we say that the reference is "absent"); it is never said to "contain `null`".


    A non-null `Optional` reference can be used as a replacement for a nullable `T` reference. It allows you to represent "a `T` that must be present" and a "a `T` that might be absent" as two distinct types in your program, which can aid clarity.


    Some uses of this class include

     *  As a method return type, as an alternative to returning `null` to indicate that no value was available
     *  To distinguish between "unknown" (for example, not present in a map) and "known to have no value" (present in the map, with value `Optional.absent()`)
     *  To wrap nullable references for storage in a collection that does not support `null` (though there are [several other approaches to this][] that should be considered first)

    A common alternative to using this class is to find or create a suitable [null object][] for the type in question.


    This class is not intended as a direct analogue of any existing "option" or "maybe" construct from other programming environments, though it may bear some similarities.


    **Comparison to `java.util.Optional` (JDK 8 and higher):** A new `Optional` class was added for Java 8. The two classes are extremely similar, but incompatible (they cannot share a common supertype). *All* known differences are listed either here or with the relevant methods below.

     *  This class is serializable; `java.util.Optional` is not.
     *  `java.util.Optional` has the additional methods `ifPresent`, `filter`, `flatMap`, and `orElseThrow`.
     *  `java.util` offers the primitive-specialized versions `OptionalInt`, `OptionalLong` and `OptionalDouble`, the use of which is recommended; Guava does not have these.

    **There are no plans to deprecate this class in the foreseeable future.** However, we do gently recommend that you prefer the new, standard Java class whenever possible.


    See the Guava User Guide article on [using `Optional`][using _Optional].



    [several other approaches to this]: https://github.com/google/guava/wiki/LivingWithNullHostileCollections

    [null object]: http://en.wikipedia.org/wiki/Null_Object_pattern

    [using _Optional]: https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional
  syntax:
    content: public abstract class Optional<T> implements Serializable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<T>absent()
  id: <T>absent()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <T>absent()
  nameWithType: Optional<T>.<T>absent()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>absent()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.absent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns an `Optional` instance with no contained reference.


    **Comparison to `java.util.Optional`:** this method is equivalent to Java 8's `Optional.empty`.
  syntax:
    content: public static Optional<T> <T>absent()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<T>fromJavaUtil(java.util.Optional<T>)
  id: <T>fromJavaUtil(java.util.Optional<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <T>fromJavaUtil(Optional<T> javaUtilOptional)
  nameWithType: Optional<T>.<T>fromJavaUtil(Optional<T> javaUtilOptional)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>fromJavaUtil(Optional<T> javaUtilOptional)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.fromJavaUtil*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the equivalent `com.google.common.base.Optional` value to the given `java.util.Optional`, or `null` if the argument is null.
  syntax:
    content: public static Optional<T> <T>fromJavaUtil(Optional<T> javaUtilOptional)
    parameters:
    - id: javaUtilOptional
      type: java.util.Optional<T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<T>fromNullable(T)
  id: <T>fromNullable(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <T>fromNullable(T nullableReference)
  nameWithType: Optional<T>.<T>fromNullable(T nullableReference)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>fromNullable(T nullableReference)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.fromNullable*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    If `nullableReference` is non-null, returns an `Optional` instance containing that reference; otherwise returns <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.absent" data-throw-if-not-resolved="false">Optional#absent</xref>.


    **Comparison to `java.util.Optional`:** this method is equivalent to Java 8's `Optional.ofNullable`.
  syntax:
    content: public static Optional<T> <T>fromNullable(T nullableReference)
    parameters:
    - id: nullableReference
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<T>of(T)
  id: <T>of(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <T>of(T reference)
  nameWithType: Optional<T>.<T>of(T reference)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>of(T reference)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns an `Optional` instance containing the given non-null reference. To have `null` treated as <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.absent" data-throw-if-not-resolved="false">#absent</xref>, use <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.fromNullable" data-throw-if-not-resolved="false">#fromNullable</xref> instead.


    **Comparison to `java.util.Optional`:** no differences.
  syntax:
    content: public static Optional<T> <T>of(T reference)
    parameters:
    - id: reference
      type: T
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<T>presentInstances(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Optional<? extends T>>)
  id: <T>presentInstances(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Optional<? extends T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <T>presentInstances(Iterable<? extends Optional<? extends T>> optionals)
  nameWithType: Optional<T>.<T>presentInstances(Iterable<? extends Optional<? extends T>> optionals)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>presentInstances(Iterable<? extends Optional<? extends T>> optionals)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.presentInstances*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the value of each present instance from the supplied `optionals`, in order, skipping over occurrences of <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.absent" data-throw-if-not-resolved="false">Optional#absent</xref>. Iterators are unmodifiable and are evaluated lazily.


    **Comparison to `java.util.Optional`:** this method has no equivalent in Java 8's `Optional` class; use `optionals.stream().filter(Optional::isPresent).map(Optional::get)` instead.
  syntax:
    content: public static Iterable<T> <T>presentInstances(Iterable<? extends Optional<? extends T>> optionals)
    parameters:
    - id: optionals
      type: java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Optional<? extends T>>
    return:
      type: java.lang.Iterable<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<T>toJavaUtil(com.azure.cosmos.implementation.guava25.base.Optional<T>)
  id: <T>toJavaUtil(com.azure.cosmos.implementation.guava25.base.Optional<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <T>toJavaUtil(Optional<T> googleOptional)
  nameWithType: Optional<T>.<T>toJavaUtil(Optional<T> googleOptional)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>toJavaUtil(Optional<T> googleOptional)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.toJavaUtil*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the equivalent `java.util.Optional` value to the given `com.google.common.base.Optional`, or `null` if the argument is null.


    If `googleOptional` is known to be non-null, use `googleOptional.toJavaUtil()` instead.


    Unfortunately, the method reference `Optional::toJavaUtil` will not work, because it could refer to either the static or instance version of this method. Write out the lambda expression `o -> Optional.toJavaUtil(o)` instead.
  syntax:
    content: public static Optional<T> <T>toJavaUtil(Optional<T> googleOptional)
    parameters:
    - id: googleOptional
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
    return:
      type: java.util.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.<V>transform(com.azure.cosmos.implementation.guava25.base.Function<? super T,V>)
  id: <V>transform(com.azure.cosmos.implementation.guava25.base.Function<? super T,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: <V>transform(Function<? super T,V> function)
  nameWithType: Optional<T>.<V>transform(Function<? super T,V> function)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<V>transform(Function<? super T,V> function)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.transform*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    If the instance is present, it is transformed with the given <xref uid="com.azure.cosmos.implementation.guava25.base.Function" data-throw-if-not-resolved="false">Function</xref>; otherwise, <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.absent" data-throw-if-not-resolved="false">Optional#absent</xref> is returned.


    **Comparison to `java.util.Optional`:** this method is similar to Java 8's `Optional.map`, except when `function` returns `null`. In this case this method throws an exception, whereas the Java 8 method returns `Optional.absent()`.
  syntax:
    content: public abstract Optional<V> <V>transform(Function<? super T,V> function)
    parameters:
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super T,V>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<V>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.Optional()
  id: Optional()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: Optional()
  nameWithType: Optional<T>.Optional()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.Optional()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.Optional*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: " Optional()"
- uid: com.azure.cosmos.implementation.guava25.base.Optional.asSet()
  id: asSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: asSet()
  nameWithType: Optional<T>.asSet()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.asSet()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.asSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns an immutable singleton <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref> whose only element is the contained instance if it is present; an empty immutable <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref> otherwise.


    **Comparison to `java.util.Optional`:** this method has no equivalent in Java 8's `Optional` class. However, this common usage:


    ```java

    for (Foo foo : possibleFoo.asSet()) {
       doSomethingWith(foo);
     }
    ```


    ... can be replaced with:


    ```java

    possibleFoo.ifPresent(foo -> doSomethingWith(foo));

    ```
  syntax:
    content: public abstract Set<T> asSet()
    return:
      type: java.util.Set<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: equals(Object object)
  nameWithType: Optional<T>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if `object` is an `Optional` instance, and either the contained references are <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equal</xref> to each other or both are absent. Note that `Optional` instances of differing parameterized types can be equal.


    **Comparison to `java.util.Optional`:** no differences.
  syntax:
    content: public abstract boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Optional.get()
  id: get()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: get()
  nameWithType: Optional<T>.get()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.get()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the contained instance, which must be present. If the instance might be absent, use <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.or*" data-throw-if-not-resolved="false">#or(Object)</xref> or <xref uid="? extends com.azure.cosmos.implementation.guava25.base.Optional.orNull" data-throw-if-not-resolved="false">#orNull</xref> instead.


    **Comparison to `java.util.Optional`:** when the value is absent, this method throws <xref uid="" data-throw-if-not-resolved="false">IllegalStateException</xref>, whereas the Java 8 counterpart throws <xref uid="" data-throw-if-not-resolved="false">NoSuchElementException</xref>.
  syntax:
    content: public abstract T get()
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.base.Optional.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: hashCode()
  nameWithType: Optional<T>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a hash code for this instance.


    **Comparison to `java.util.Optional`:** this class leaves the specific choice of hash code unspecified, unlike the Java 8 equivalent.
  syntax:
    content: public abstract int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.base.Optional.isPresent()
  id: isPresent()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: isPresent()
  nameWithType: Optional<T>.isPresent()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.isPresent()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.isPresent*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if this holder contains a (non-null) instance.


    **Comparison to `java.util.Optional`:** no differences.
  syntax:
    content: public abstract boolean isPresent()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Optional.or(T)
  id: or(T)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: or(T defaultValue)
  nameWithType: Optional<T>.or(T defaultValue)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.or(T defaultValue)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: "Returns the contained instance if it is present; `defaultValue` otherwise. If no default value should be required because the instance is known to be present, use <xref uid=\"com.azure.cosmos.implementation.guava25.base.Optional.get()\" data-throw-if-not-resolved=\"false\">#get()</xref> instead. For a default value of `null`, use <xref uid=\"? extends com.azure.cosmos.implementation.guava25.base.Optional.orNull\" data-throw-if-not-resolved=\"false\">#orNull</xref>.\n\nNote about generics: The signature `public T or(T defaultValue)` is overly restrictive. However, the ideal signature, `public S or(S)`~~, is not legal Java. As a result, some sensible operations involving subtypes are compile errors:~~ \n\n```java\nOptional optionalInt = getSomeOptionalInt();\n Number value = optionalInt.or(0.5); // error\n\n FluentIterable numbers = getSomeNumbers();\n Optional first = numbers.first();\n Number value = first.or(0.5); // error\n```\n\nAs a workaround, it is always safe to cast an `Optional` to `Optional`. Casting either of the above example `Optional` instances to `Optional` (where `Number` is the desired output type) solves the problem:\n\n```java\nOptional optionalInt = (Optional) getSomeOptionalInt();\n Number value = optionalInt.or(0.5); // fine\n\n FluentIterable numbers = getSomeNumbers();\n Optional first = (Optional) numbers.first();\n Number value = first.or(0.5); // fine\n```\n\n**Comparison to `java.util.Optional`:** this method is similar to Java 8's `Optional.orElse`, but will not accept `null` as a `defaultValue` (<xref uid=\"? extends com.azure.cosmos.implementation.guava25.base.Optional.orNull\" data-throw-if-not-resolved=\"false\">#orNull</xref> must be used instead). As a result, the value returned by this method is guaranteed non-null, which is not the case for the `java.util` equivalent."
  syntax:
    content: public abstract T or(T defaultValue)
    parameters:
    - id: defaultValue
      type: T
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Optional<? extends T>)
  id: or(com.azure.cosmos.implementation.guava25.base.Optional<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: or(Optional<? extends T> secondChoice)
  nameWithType: Optional<T>.or(Optional<? extends T> secondChoice)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.or(Optional<? extends T> secondChoice)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns this `Optional` if it has a value present; `secondChoice` otherwise.


    **Comparison to `java.util.Optional`:** this method has no equivalent in Java 8's `Optional` class; write `thisOptional.isPresent() ? thisOptional : secondChoice` instead.
  syntax:
    content: public abstract Optional<T> or(Optional<? extends T> secondChoice)
    parameters:
    - id: secondChoice
      type: com.azure.cosmos.implementation.guava25.base.Optional<? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>)
  id: or(com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: or(Supplier<? extends T> supplier)
  nameWithType: Optional<T>.or(Supplier<? extends T> supplier)
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.or(Supplier<? extends T> supplier)
  overload: com.azure.cosmos.implementation.guava25.base.Optional.or*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the contained instance if it is present; `supplier.get()` otherwise.


    **Comparison to `java.util.Optional`:** this method is similar to Java 8's `Optional.orElseGet`, except when `supplier` returns `null`. In this case this method throws an exception, whereas the Java 8 method returns the `null` to the caller.
  syntax:
    content: public abstract T or(Supplier<? extends T> supplier)
    parameters:
    - id: supplier
      type: com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.base.Optional.orNull()
  id: orNull()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: orNull()
  nameWithType: Optional<T>.orNull()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.orNull()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.orNull*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the contained instance if it is present; `null` otherwise. If the instance is known to be present, use <xref uid="com.azure.cosmos.implementation.guava25.base.Optional.get()" data-throw-if-not-resolved="false">#get()</xref> instead.


    **Comparison to `java.util.Optional`:** this method is equivalent to Java 8's `Optional.orElse(null)`.
  syntax:
    content: public abstract T orNull()
    return:
      type: T
- uid: com.azure.cosmos.implementation.guava25.base.Optional.toJavaUtil()
  id: toJavaUtil()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: toJavaUtil()
  nameWithType: Optional<T>.toJavaUtil()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.toJavaUtil()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.toJavaUtil*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns the equivalent `java.util.Optional` value to this optional.


    Unfortunately, the method reference `Optional::toJavaUtil` will not work, because it could refer to either the static or instance version of this method. Write out the lambda expression `o -> o.toJavaUtil()` instead.
  syntax:
    content: public Optional<T> toJavaUtil()
    return:
      type: java.util.Optional<T>
- uid: com.azure.cosmos.implementation.guava25.base.Optional.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Optional
  langs:
  - java
  name: toString()
  nameWithType: Optional<T>.toString()
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.toString()
  overload: com.azure.cosmos.implementation.guava25.base.Optional.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns a string representation for this instance.


    **Comparison to `java.util.Optional`:** this class leaves the specific string representation unspecified, unlike the Java 8 equivalent.
  syntax:
    content: public abstract String toString()
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.base.Optional.Optional*
  name: Optional
  nameWithType: Optional<T>.Optional
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.Optional
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Optional<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional.absent*
  name: <T>absent
  nameWithType: Optional<T>.<T>absent
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>absent
  package: com.azure.cosmos.implementation.guava25.base
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.cosmos.implementation.guava25.base.Optional.of*
  name: <T>of
  nameWithType: Optional<T>.<T>of
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>of
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Optional.fromNullable*
  name: <T>fromNullable
  nameWithType: Optional<T>.<T>fromNullable
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>fromNullable
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.Optional<T>
  spec.java:
  - uid: java.util.Optional
    name: Optional
    fullName: java.util.Optional
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional.fromJavaUtil*
  name: <T>fromJavaUtil
  nameWithType: Optional<T>.<T>fromJavaUtil
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>fromJavaUtil
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Optional.toJavaUtil*
  name: <T>toJavaUtil
  nameWithType: Optional<T>.<T>toJavaUtil
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>toJavaUtil
  package: com.azure.cosmos.implementation.guava25.base
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Optional.isPresent*
  name: isPresent
  nameWithType: Optional<T>.isPresent
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.isPresent
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Optional.get*
  name: get
  nameWithType: Optional<T>.get
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.get
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Optional.or*
  name: or
  nameWithType: Optional<T>.or
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.or
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Optional<? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Supplier
    name: Supplier
    fullName: com.azure.cosmos.implementation.guava25.base.Supplier
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional.orNull*
  name: orNull
  nameWithType: Optional<T>.orNull
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.orNull
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.util.Set<T>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional.asSet*
  name: asSet
  nameWithType: Optional<T>.asSet
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.asSet
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super T,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional.transform*
  name: <V>transform
  nameWithType: Optional<T>.<V>transform
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<V>transform
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.base.Optional.equals*
  name: equals
  nameWithType: Optional<T>.equals
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.equals
  package: com.azure.cosmos.implementation.guava25.base
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.base.Optional.hashCode*
  name: hashCode
  nameWithType: Optional<T>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.hashCode
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.base.Optional.toString*
  name: toString
  nameWithType: Optional<T>.toString
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.toString
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Optional<? extends T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends com.azure.cosmos.implementation.guava25.base.Optional'
    name: Optional
    fullName: '? extends com.azure.cosmos.implementation.guava25.base.Optional'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Optional.presentInstances*
  name: <T>presentInstances
  nameWithType: Optional<T>.<T>presentInstances
  fullName: com.azure.cosmos.implementation.guava25.base.Optional<T>.<T>presentInstances
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Optional
  name: Optional
  nameWithType: Optional
  fullName: java.util.Optional
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: com.azure.cosmos.implementation.guava25.base.Supplier
  name: Supplier
  nameWithType: Supplier
  fullName: com.azure.cosmos.implementation.guava25.base.Supplier
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super T,V'
  name: '? super T,V'
  nameWithType: '? super T,V'
  fullName: '? super T,V'
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? extends com.azure.cosmos.implementation.guava25.base.Optional'
  name: '? extends Optional'
  nameWithType: '? extends Optional'
  fullName: '? extends com.azure.cosmos.implementation.guava25.base.Optional'
