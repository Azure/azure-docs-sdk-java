### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.Optional"
fullName: "com.azure.cosmos.implementation.guava25.base.Optional<T>"
name: "Optional<T>"
nameWithType: "Optional<T>"
summary: "An immutable object that may contain a non-null reference to another object. Each instance of this type either contains a non-null reference, or contains nothing (in which case we say that the reference is \"absent\"); it is never said to \"contain `null`\".\n\nA non-null `Optional` reference can be used as a replacement for a nullable `T` reference. It allows you to represent \"a `T` that must be present\" and a \"a `T` that might be absent\" as two distinct types in your program, which can aid clarity.\n\nSome uses of this class include\n\n *  As a method return type, as an alternative to returning `null` to indicate that no value was available\n *  To distinguish between \"unknown\" (for example, not present in a map) and \"known to have no value\" (present in the map, with value `Optional.absent()`)\n *  To wrap nullable references for storage in a collection that does not support `null` (though there are [several other approaches to this][] that should be considered first)\n\nA common alternative to using this class is to find or create a suitable [null object][] for the type in question.\n\nThis class is not intended as a direct analogue of any existing \"option\" or \"maybe\" construct from other programming environments, though it may bear some similarities.\n\n**Comparison to `java.util.Optional` (JDK 8 and higher):** A new `Optional` class was added for Java 8. The two classes are extremely similar, but incompatible (they cannot share a common supertype). *All* known differences are listed either here or with the relevant methods below.\n\n *  This class is serializable; `java.util.Optional` is not.\n *  `java.util.Optional` has the additional methods `ifPresent`, `filter`, `flatMap`, and `orElseThrow`.\n *  `java.util` offers the primitive-specialized versions `OptionalInt`, `OptionalLong` and `OptionalDouble`, the use of which is recommended; Guava does not have these.\n\n**There are no plans to deprecate this class in the foreseeable future.** However, we do gently recommend that you prefer the new, standard Java class whenever possible.\n\nSee the Guava User Guide article on [using `Optional`][using _Optional].\n\n\n[several other approaches to this]: https://github.com/google/guava/wiki/LivingWithNullHostileCollections\n[null object]: http://en.wikipedia.org/wiki/Null_Object_pattern\n[using _Optional]: https://github.com/google/guava/wiki/UsingAndAvoidingNullExplained#optional"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class Optional<T> implements Serializable"
methods:
- "com.azure.cosmos.implementation.guava25.base.Optional.<T>absent()"
- "com.azure.cosmos.implementation.guava25.base.Optional.<T>fromJavaUtil(java.util.Optional<T>)"
- "com.azure.cosmos.implementation.guava25.base.Optional.<T>fromNullable(T)"
- "com.azure.cosmos.implementation.guava25.base.Optional.<T>of(T)"
- "com.azure.cosmos.implementation.guava25.base.Optional.<T>presentInstances(java.lang.Iterable<? extends com.azure.cosmos.implementation.guava25.base.Optional<? extends T>>)"
- "com.azure.cosmos.implementation.guava25.base.Optional.<T>toJavaUtil(com.azure.cosmos.implementation.guava25.base.Optional<T>)"
- "com.azure.cosmos.implementation.guava25.base.Optional.<V>transform(com.azure.cosmos.implementation.guava25.base.Function<? super T,V>)"
- "com.azure.cosmos.implementation.guava25.base.Optional.asSet()"
- "com.azure.cosmos.implementation.guava25.base.Optional.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Optional.get()"
- "com.azure.cosmos.implementation.guava25.base.Optional.hashCode()"
- "com.azure.cosmos.implementation.guava25.base.Optional.isPresent()"
- "com.azure.cosmos.implementation.guava25.base.Optional.or(T)"
- "com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Optional<? extends T>)"
- "com.azure.cosmos.implementation.guava25.base.Optional.or(com.azure.cosmos.implementation.guava25.base.Supplier<? extends T>)"
- "com.azure.cosmos.implementation.guava25.base.Optional.orNull()"
- "com.azure.cosmos.implementation.guava25.base.Optional.toJavaUtil()"
- "com.azure.cosmos.implementation.guava25.base.Optional.toString()"
type: "class"
typeParameters:
- name: "T"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
