### YamlMime:ManagedReference
items:
- uid: "com.azure.core.http.MatchConditions"
  id: "MatchConditions"
  parent: "com.azure.core.http"
  children:
  - "com.azure.core.http.MatchConditions.MatchConditions()"
  - "com.azure.core.http.MatchConditions.getIfMatch()"
  - "com.azure.core.http.MatchConditions.getIfNoneMatch()"
  - "com.azure.core.http.MatchConditions.setIfMatch(java.lang.String)"
  - "com.azure.core.http.MatchConditions.setIfNoneMatch(java.lang.String)"
  langs:
  - "java"
  name: "MatchConditions"
  nameWithType: "MatchConditions"
  fullName: "com.azure.core.http.MatchConditions"
  type: "Class"
  package: "com.azure.core.http"
  summary: "Specifies HTTP options for conditional requests."
  syntax:
    content: "public class MatchConditions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.http.MatchConditions.MatchConditions()"
  id: "MatchConditions()"
  parent: "com.azure.core.http.MatchConditions"
  langs:
  - "java"
  name: "MatchConditions()"
  nameWithType: "MatchConditions.MatchConditions()"
  fullName: "com.azure.core.http.MatchConditions.MatchConditions()"
  overload: "com.azure.core.http.MatchConditions.MatchConditions*"
  type: "Constructor"
  package: "com.azure.core.http"
  syntax:
    content: "public MatchConditions()"
- uid: "com.azure.core.http.MatchConditions.getIfMatch()"
  id: "getIfMatch()"
  parent: "com.azure.core.http.MatchConditions"
  langs:
  - "java"
  name: "getIfMatch()"
  nameWithType: "MatchConditions.getIfMatch()"
  fullName: "com.azure.core.http.MatchConditions.getIfMatch()"
  overload: "com.azure.core.http.MatchConditions.getIfMatch*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Gets the ETag that resources must match."
  syntax:
    content: "public String getIfMatch()"
    return:
      type: "java.lang.String"
      description: "The ETag that resources must match."
- uid: "com.azure.core.http.MatchConditions.getIfNoneMatch()"
  id: "getIfNoneMatch()"
  parent: "com.azure.core.http.MatchConditions"
  langs:
  - "java"
  name: "getIfNoneMatch()"
  nameWithType: "MatchConditions.getIfNoneMatch()"
  fullName: "com.azure.core.http.MatchConditions.getIfNoneMatch()"
  overload: "com.azure.core.http.MatchConditions.getIfNoneMatch*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Gets the ETag that resources must not match."
  syntax:
    content: "public String getIfNoneMatch()"
    return:
      type: "java.lang.String"
      description: "The ETag that resources must not match."
- uid: "com.azure.core.http.MatchConditions.setIfMatch(java.lang.String)"
  id: "setIfMatch(java.lang.String)"
  parent: "com.azure.core.http.MatchConditions"
  langs:
  - "java"
  name: "setIfMatch(String ifMatch)"
  nameWithType: "MatchConditions.setIfMatch(String ifMatch)"
  fullName: "com.azure.core.http.MatchConditions.setIfMatch(String ifMatch)"
  overload: "com.azure.core.http.MatchConditions.setIfMatch*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Optionally limit requests to resources that match the passed ETag."
  syntax:
    content: "public MatchConditions setIfMatch(String ifMatch)"
    parameters:
    - id: "ifMatch"
      type: "java.lang.String"
      description: "ETag that resources must match."
    return:
      type: "com.azure.core.http.MatchConditions"
      description: "The updated MatchConditions object."
- uid: "com.azure.core.http.MatchConditions.setIfNoneMatch(java.lang.String)"
  id: "setIfNoneMatch(java.lang.String)"
  parent: "com.azure.core.http.MatchConditions"
  langs:
  - "java"
  name: "setIfNoneMatch(String ifNoneMatch)"
  nameWithType: "MatchConditions.setIfNoneMatch(String ifNoneMatch)"
  fullName: "com.azure.core.http.MatchConditions.setIfNoneMatch(String ifNoneMatch)"
  overload: "com.azure.core.http.MatchConditions.setIfNoneMatch*"
  type: "Method"
  package: "com.azure.core.http"
  summary: "Optionally limit requests to resources that do not match the passed ETag."
  syntax:
    content: "public MatchConditions setIfNoneMatch(String ifNoneMatch)"
    parameters:
    - id: "ifNoneMatch"
      type: "java.lang.String"
      description: "ETag that resources must not match."
    return:
      type: "com.azure.core.http.MatchConditions"
      description: "The updated MatchConditions object."
references:
- uid: "com.azure.core.http.MatchConditions.MatchConditions*"
  name: "MatchConditions"
  nameWithType: "MatchConditions.MatchConditions"
  fullName: "com.azure.core.http.MatchConditions.MatchConditions"
  package: "com.azure.core.http"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.http.MatchConditions.getIfMatch*"
  name: "getIfMatch"
  nameWithType: "MatchConditions.getIfMatch"
  fullName: "com.azure.core.http.MatchConditions.getIfMatch"
  package: "com.azure.core.http"
- uid: "com.azure.core.http.MatchConditions.setIfMatch*"
  name: "setIfMatch"
  nameWithType: "MatchConditions.setIfMatch"
  fullName: "com.azure.core.http.MatchConditions.setIfMatch"
  package: "com.azure.core.http"
- uid: "com.azure.core.http.MatchConditions.getIfNoneMatch*"
  name: "getIfNoneMatch"
  nameWithType: "MatchConditions.getIfNoneMatch"
  fullName: "com.azure.core.http.MatchConditions.getIfNoneMatch"
  package: "com.azure.core.http"
- uid: "com.azure.core.http.MatchConditions.setIfNoneMatch*"
  name: "setIfNoneMatch"
  nameWithType: "MatchConditions.setIfNoneMatch"
  fullName: "com.azure.core.http.MatchConditions.setIfNoneMatch"
  package: "com.azure.core.http"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
