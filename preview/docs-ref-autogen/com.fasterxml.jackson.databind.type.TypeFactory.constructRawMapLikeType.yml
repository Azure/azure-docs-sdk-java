### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType"
name: "constructRawMapLikeType"
nameWithType: "TypeFactory.constructRawMapLikeType"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(Class<?> mapClass)"
  name: "constructRawMapLikeType(Class<?> mapClass)"
  nameWithType: "TypeFactory.constructRawMapLikeType(Class<?> mapClass)"
  summary: "Method that can be used to construct \"raw\" Map-like type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:\n\n```java\ntypeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());\n```\n\nThis method should only be used if parameterization is completely unavailable."
  parameters:
  - name: "mapClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public MapLikeType constructRawMapLikeType(Class<?> mapClass)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.MapLikeType?alt=com.fasterxml.jackson.databind.type.MapLikeType&text=MapLikeType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
