### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap
  id: SortedSetMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.valueComparator()
  langs:
  - java
  name: SortedSetMultimap<K,V>
  nameWithType: SortedSetMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A `SetMultimap` whose set of values for a given key are kept sorted; that is, they comprise a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref>. It cannot hold duplicate key-value pairs; adding a key-value pair that's already in the multimap has no effect. This interface does not specify the ordering of the multimap's keys. See the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> documentation for information common to all multimaps.


    The <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.get" data-throw-if-not-resolved="false">#get</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.removeAll" data-throw-if-not-resolved="false">#removeAll</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.replaceValues" data-throw-if-not-resolved="false">#replaceValues</xref> methods each return a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref> of values, while <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.entries()" data-throw-if-not-resolved="false">Multimap#entries()</xref> returns a <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref> of map entries. Though the method signature doesn't say so explicitly, the map returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> has `SortedSet` values.


    See the Guava User Guide article on [ `Multimap`][_Multimap].



    [_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap
  syntax:
    content: public interface SortedSetMultimap<K,V> extends SetMultimap<K,V>
    typeParameters:
    - id: K
    - id: V
  implements:
  - com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.asMap()
  id: asMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap
  langs:
  - java
  name: asMap()
  nameWithType: SortedSetMultimap<K,V>.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.asMap()
  overload: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.asMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a map view that associates each key with the corresponding values in the multimap. Changes to the returned map, such as element removal, will update the underlying multimap. The map does not support `setValue()` on its entries, `put`, or `putAll`.


    When passed a key that is present in the map, `asMap().get(Object)` has the same behavior as <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.get" data-throw-if-not-resolved="false">#get</xref>, returning a live collection. When passed a key that is not present, however, `asMap().get(Object)` returns `null` instead of an empty collection.


    **Note:** The returned map's values are guaranteed to be of type <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref>. To obtain this map with the more specific generic type `Map>`, call <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimaps.&lt;K,V&gt;asMap(com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap&lt;K,V&gt;)" data-throw-if-not-resolved="false">Multimaps#asMap(SortedSetMultimap)</xref> instead.
  syntax:
    content: public abstract Map<K,Collection<V>> asMap()
    return:
      type: java.util.Map<K,java.util.Collection<V>>
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: SortedSetMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a collection view of all values associated with a key. If no mappings in the multimap have the provided key, an empty collection is returned.


    Changes to the returned collection will update the underlying multimap, and vice versa.


    Because a `SortedSetMultimap` has unique sorted values for a given key, this method returns a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract SortedSet<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.SortedSet<V>
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: SortedSetMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all values associated with a given key.


    Because a `SortedSetMultimap` has unique sorted values for a given key, this method returns a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract SortedSet<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.util.SortedSet<V>
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: SortedSetMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a collection of values with the same key, replacing any existing values for that key.


    Because a `SortedSetMultimap` has unique sorted values for a given key, this method returns a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.


    Any duplicates in `values` will be stored in the multimap once.
  syntax:
    content: public abstract SortedSet<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: java.util.SortedSet<V>
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.valueComparator()
  id: valueComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap
  langs:
  - java
  name: valueComparator()
  nameWithType: SortedSetMultimap<K,V>.valueComparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.valueComparator()
  overload: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.valueComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the comparator that orders the multimap values, with `null` indicating that natural ordering is used.
  syntax:
    content: public abstract Comparator<? super V> valueComparator()
    return:
      type: java.util.Comparator<? super V>
references:
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: java.util.SortedSet<V>
  spec.java:
  - uid: java.util.SortedSet
    name: SortedSet
    fullName: java.util.SortedSet
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.get*
  name: get
  nameWithType: SortedSetMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.removeAll*
  name: removeAll
  nameWithType: SortedSetMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.replaceValues*
  name: replaceValues
  nameWithType: SortedSetMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<K,java.util.Collection<V>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.asMap*
  name: asMap
  nameWithType: SortedSetMultimap<K,V>.asMap
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.asMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super V>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap.valueComparator*
  name: valueComparator
  nameWithType: SortedSetMultimap<K,V>.valueComparator
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedSetMultimap<K,V>.valueComparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>
  name: SetMultimap<K,V>
  nameWithType: SetMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>
- uid: java.util.SortedSet
  name: SortedSet
  nameWithType: SortedSet
  fullName: java.util.SortedSet
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: '? super V'
  name: '? super V'
  nameWithType: '? super V'
  fullName: '? super V'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.SetMultimap
  name: SetMultimap
  nameWithType: SetMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.SetMultimap
