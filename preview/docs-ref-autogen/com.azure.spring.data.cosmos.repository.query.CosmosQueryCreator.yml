### YamlMime:ManagedReference
items:
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  id: CosmosQueryCreator
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query
  children:
  - com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.CosmosQueryCreator(org.springframework.data.repository.query.parser.PartTree,com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>)
  - com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.and(org.springframework.data.repository.query.parser.Part,com.azure.spring.data.cosmos.core.query.Criteria,java.util.Iterator<java.lang.Object>)
  - com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.complete(com.azure.spring.data.cosmos.core.query.Criteria,org.springframework.data.domain.Sort)
  - com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  - com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.or(com.azure.spring.data.cosmos.core.query.Criteria,com.azure.spring.data.cosmos.core.query.Criteria)
  langs:
  - java
  name: CosmosQueryCreator
  nameWithType: CosmosQueryCreator
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  type: Class
  package: com.azure.spring.data.cosmos.repository.query
  summary: 'TODO: String based query, based on how cosmosDB provides. StringCosmosQuery class, How to bind values to the query. if CosmosDb already has binding capability, if not we would have to do it here in some creative way.query creator are associated with part tree queries,'
  syntax:
    content: public class CosmosQueryCreator extends AbstractQueryCreator<CosmosQuery,Criteria>
  inheritance:
  - java.lang.Object
  - org.springframework.data.repository.query.parser.AbstractQueryCreator
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator<java.lang.Object>)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.complete(S,org.springframework.data.domain.Sort)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery()
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(org.springframework.data.domain.Sort)
  - org.springframework.data.repository.query.parser.AbstractQueryCreator.or(S,S)
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.CosmosQueryCreator(org.springframework.data.repository.query.parser.PartTree,com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>)
  id: CosmosQueryCreator(org.springframework.data.repository.query.parser.PartTree,com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor,org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  langs:
  - java
  name: CosmosQueryCreator(PartTree tree, CosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
  nameWithType: CosmosQueryCreator.CosmosQueryCreator(PartTree tree, CosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.CosmosQueryCreator(PartTree tree, CosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.CosmosQueryCreator*
  type: Constructor
  package: com.azure.spring.data.cosmos.repository.query
  summary: Creates a new <xref uid="com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator" data-throw-if-not-resolved="false">CosmosQueryCreator</xref>. <xref uid="com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor" data-throw-if-not-resolved="false">CosmosParameterAccessor</xref> is used to hand actual parameter values into the callback methods as well as to apply dynamic sorting via a <xref uid="org.springframework.data.domain.Sort" data-throw-if-not-resolved="false">Sort</xref> parameter.
  syntax:
    content: public CosmosQueryCreator(PartTree tree, CosmosParameterAccessor accessor, MappingContext<?,CosmosPersistentProperty> mappingContext)
    parameters:
    - id: tree
      type: org.springframework.data.repository.query.parser.PartTree
      description: must not be null.
    - id: accessor
      type: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
      description: must not be null.
    - id: mappingContext
      type: org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>
      description: must not be null.
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.and(org.springframework.data.repository.query.parser.Part,com.azure.spring.data.cosmos.core.query.Criteria,java.util.Iterator<java.lang.Object>)
  id: and(org.springframework.data.repository.query.parser.Part,com.azure.spring.data.cosmos.core.query.Criteria,java.util.Iterator<java.lang.Object>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  langs:
  - java
  name: and(Part part, Criteria base, Iterator<Object> parameters)
  nameWithType: CosmosQueryCreator.and(Part part, Criteria base, Iterator<Object> parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.and(Part part, Criteria base, Iterator<Object> parameters)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.and*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected Criteria and(Part part, Criteria base, Iterator<Object> parameters)
    parameters:
    - id: part
      type: org.springframework.data.repository.query.parser.Part
    - id: base
      type: com.azure.spring.data.cosmos.core.query.Criteria
    - id: parameters
      type: java.util.Iterator<java.lang.Object>
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.complete(com.azure.spring.data.cosmos.core.query.Criteria,org.springframework.data.domain.Sort)
  id: complete(com.azure.spring.data.cosmos.core.query.Criteria,org.springframework.data.domain.Sort)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  langs:
  - java
  name: complete(Criteria criteria, Sort sort)
  nameWithType: CosmosQueryCreator.complete(Criteria criteria, Sort sort)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.complete(Criteria criteria, Sort sort)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.complete*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected CosmosQuery complete(Criteria criteria, Sort sort)
    parameters:
    - id: criteria
      type: com.azure.spring.data.cosmos.core.query.Criteria
    - id: sort
      type: org.springframework.data.domain.Sort
    return:
      type: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  id: create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  langs:
  - java
  name: create(Part part, Iterator<Object> parameters)
  nameWithType: CosmosQueryCreator.create(Part part, Iterator<Object> parameters)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.create(Part part, Iterator<Object> parameters)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.create*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected Criteria create(Part part, Iterator<Object> parameters)
    parameters:
    - id: part
      type: org.springframework.data.repository.query.parser.Part
    - id: parameters
      type: java.util.Iterator<java.lang.Object>
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.or(com.azure.spring.data.cosmos.core.query.Criteria,com.azure.spring.data.cosmos.core.query.Criteria)
  id: or(com.azure.spring.data.cosmos.core.query.Criteria,com.azure.spring.data.cosmos.core.query.Criteria)
  artifact: com.azure:azure-spring-data-cosmos:3.0.0-beta.2
  parent: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator
  langs:
  - java
  name: or(Criteria base, Criteria criteria)
  nameWithType: CosmosQueryCreator.or(Criteria base, Criteria criteria)
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.or(Criteria base, Criteria criteria)
  overload: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.or*
  type: Method
  package: com.azure.spring.data.cosmos.repository.query
  syntax:
    content: protected Criteria or(Criteria base, Criteria criteria)
    parameters:
    - id: base
      type: com.azure.spring.data.cosmos.core.query.Criteria
    - id: criteria
      type: com.azure.spring.data.cosmos.core.query.Criteria
    return:
      type: com.azure.spring.data.cosmos.core.query.Criteria
references:
- uid: org.springframework.data.repository.query.parser.PartTree
  spec.java:
  - uid: org.springframework.data.repository.query.parser.PartTree
    name: PartTree
    fullName: org.springframework.data.repository.query.parser.PartTree
- uid: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
  name: CosmosParameterAccessor
  nameWithType: CosmosParameterAccessor
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosParameterAccessor
- uid: org.springframework.data.mapping.context.MappingContext<?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty>
  spec.java:
  - uid: org.springframework.data.mapping.context.MappingContext
    name: MappingContext
    fullName: org.springframework.data.mapping.context.MappingContext
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
    name: CosmosPersistentProperty
    fullName: com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.CosmosQueryCreator*
  name: CosmosQueryCreator
  nameWithType: CosmosQueryCreator.CosmosQueryCreator
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.CosmosQueryCreator
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.repository.query.parser.Part
  spec.java:
  - uid: org.springframework.data.repository.query.parser.Part
    name: Part
    fullName: org.springframework.data.repository.query.parser.Part
- uid: java.util.Iterator<java.lang.Object>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.azure.spring.data.cosmos.core.query.Criteria
  name: Criteria
  nameWithType: Criteria
  fullName: com.azure.spring.data.cosmos.core.query.Criteria
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.create*
  name: create
  nameWithType: CosmosQueryCreator.create
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.create
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.and*
  name: and
  nameWithType: CosmosQueryCreator.and
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.and
  package: com.azure.spring.data.cosmos.repository.query
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.or*
  name: or
  nameWithType: CosmosQueryCreator.or
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.or
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.domain.Sort
  spec.java:
  - uid: org.springframework.data.domain.Sort
    name: Sort
    fullName: org.springframework.data.domain.Sort
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery
  name: CosmosQuery
  nameWithType: CosmosQuery
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery
- uid: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.complete*
  name: complete
  nameWithType: CosmosQueryCreator.complete
  fullName: com.azure.spring.data.cosmos.repository.query.CosmosQueryCreator.complete
  package: com.azure.spring.data.cosmos.repository.query
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator<com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria>
  name: AbstractQueryCreator<CosmosQuery,Criteria>
  nameWithType: AbstractQueryCreator<CosmosQuery,Criteria>
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator<com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
  name: AbstractQueryCreator.create(Part,Iterator<Object>)
  nameWithType: AbstractQueryCreator.create(Part,Iterator<Object>)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator<java.lang.Object>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.or(S,S)
  name: AbstractQueryCreator.or(S,S)
  nameWithType: AbstractQueryCreator.or(S,S)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.or(S,S)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery()
  name: AbstractQueryCreator.createQuery()
  nameWithType: AbstractQueryCreator.createQuery()
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(org.springframework.data.domain.Sort)
  name: AbstractQueryCreator.createQuery(Sort)
  nameWithType: AbstractQueryCreator.createQuery(Sort)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.createQuery(org.springframework.data.domain.Sort)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.complete(S,org.springframework.data.domain.Sort)
  name: AbstractQueryCreator.complete(S,Sort)
  nameWithType: AbstractQueryCreator.complete(S,Sort)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.complete(S,org.springframework.data.domain.Sort)
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator<java.lang.Object>)
  name: AbstractQueryCreator.and(Part,S,Iterator<Object>)
  nameWithType: AbstractQueryCreator.and(Part,S,Iterator<Object>)
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator<java.lang.Object>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.springframework.data.mapping.context.MappingContext
  name: MappingContext
  nameWithType: MappingContext
  fullName: org.springframework.data.mapping.context.MappingContext
- uid: ?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
  name: ?,CosmosPersistentProperty
  nameWithType: ?,CosmosPersistentProperty
  fullName: ?,com.azure.spring.data.cosmos.core.mapping.CosmosPersistentProperty
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator
  name: AbstractQueryCreator
  nameWithType: AbstractQueryCreator
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator
- uid: com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria
  name: CosmosQuery,Criteria
  nameWithType: CosmosQuery,Criteria
  fullName: com.azure.spring.data.cosmos.core.query.CosmosQuery,com.azure.spring.data.cosmos.core.query.Criteria
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator
  name: AbstractQueryCreator.create(Part,Iterator
  nameWithType: AbstractQueryCreator.create(Part,Iterator
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.create(org.springframework.data.repository.query.parser.Part,java.util.Iterator
- uid: java.lang.Object>)
  name: Object>)
  nameWithType: Object>)
  fullName: java.lang.Object>)
- uid: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator
  name: AbstractQueryCreator.and(Part,S,Iterator
  nameWithType: AbstractQueryCreator.and(Part,S,Iterator
  fullName: org.springframework.data.repository.query.parser.AbstractQueryCreator.and(org.springframework.data.repository.query.parser.Part,S,java.util.Iterator
