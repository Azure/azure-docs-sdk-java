### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.caches.AsyncCache
  id: AsyncCache
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches
  children:
  - com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache()
  - com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache(com.azure.cosmos.implementation.caches.IEqualityComparer<TValue>)
  - com.azure.cosmos.implementation.caches.AsyncCache.clear()
  - com.azure.cosmos.implementation.caches.AsyncCache.getAsync(TKey,TValue,java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)
  - com.azure.cosmos.implementation.caches.AsyncCache.refresh(TKey,java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)
  - com.azure.cosmos.implementation.caches.AsyncCache.remove(TKey)
  - com.azure.cosmos.implementation.caches.AsyncCache.removeAsync(TKey)
  - com.azure.cosmos.implementation.caches.AsyncCache.set(TKey,TValue)
  langs:
  - java
  name: AsyncCache<TKey,TValue>
  nameWithType: AsyncCache<TKey,TValue>
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>
  type: Class
  package: com.azure.cosmos.implementation.caches
  syntax:
    content: public class AsyncCache<TKey,TValue>
    typeParameters:
    - id: TKey
    - id: TValue
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache()
  id: AsyncCache()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: AsyncCache()
  nameWithType: AsyncCache<TKey,TValue>.AsyncCache()
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.AsyncCache()
  overload: com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache*
  type: Constructor
  package: com.azure.cosmos.implementation.caches
  syntax:
    content: public AsyncCache()
- uid: com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache(com.azure.cosmos.implementation.caches.IEqualityComparer<TValue>)
  id: AsyncCache(com.azure.cosmos.implementation.caches.IEqualityComparer<TValue>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: AsyncCache(IEqualityComparer<TValue> equalityComparer)
  nameWithType: AsyncCache<TKey,TValue>.AsyncCache(IEqualityComparer<TValue> equalityComparer)
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.AsyncCache(IEqualityComparer<TValue> equalityComparer)
  overload: com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache*
  type: Constructor
  package: com.azure.cosmos.implementation.caches
  syntax:
    content: public AsyncCache(IEqualityComparer<TValue> equalityComparer)
    parameters:
    - id: equalityComparer
      type: com.azure.cosmos.implementation.caches.IEqualityComparer<TValue>
- uid: com.azure.cosmos.implementation.caches.AsyncCache.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: clear()
  nameWithType: AsyncCache<TKey,TValue>.clear()
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.clear()
  overload: com.azure.cosmos.implementation.caches.AsyncCache.clear*
  type: Method
  package: com.azure.cosmos.implementation.caches
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.caches.AsyncCache.getAsync(TKey,TValue,java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)
  id: getAsync(TKey,TValue,java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: getAsync(TKey key, TValue obsoleteValue, Callable<Mono<TValue>> singleValueInitFunc)
  nameWithType: AsyncCache<TKey,TValue>.getAsync(TKey key, TValue obsoleteValue, Callable<Mono<TValue>> singleValueInitFunc)
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.getAsync(TKey key, TValue obsoleteValue, Callable<Mono<TValue>> singleValueInitFunc)
  overload: com.azure.cosmos.implementation.caches.AsyncCache.getAsync*
  type: Method
  package: com.azure.cosmos.implementation.caches
  summary: >-
    Gets value corresponding to `key`


    If another initialization function is already running, new initialization function will not be started. The result will be result of currently running initialization function.


    If previous initialization function is successfully completed - value returned by it will be returned unless it is equal to `obsoleteValue`, in which case new initialization function will be started.


    If previous initialization function failed - new one will be launched.
  syntax:
    content: public Mono<TValue> getAsync(TKey key, TValue obsoleteValue, Callable<Mono<TValue>> singleValueInitFunc)
    parameters:
    - id: key
      type: TKey
      description: Key for which to get a value.
    - id: obsoleteValue
      type: TValue
      description: Value which is obsolete and needs to be refreshed.
    - id: singleValueInitFunc
      type: java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>
      description: Initialization function.
    return:
      type: reactor.core.publisher.Mono<TValue>
      description: Cached value or value returned by initialization function.
- uid: com.azure.cosmos.implementation.caches.AsyncCache.refresh(TKey,java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)
  id: refresh(TKey,java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: refresh(TKey key, Callable<Mono<TValue>> singleValueInitFunc)
  nameWithType: AsyncCache<TKey,TValue>.refresh(TKey key, Callable<Mono<TValue>> singleValueInitFunc)
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.refresh(TKey key, Callable<Mono<TValue>> singleValueInitFunc)
  overload: com.azure.cosmos.implementation.caches.AsyncCache.refresh*
  type: Method
  package: com.azure.cosmos.implementation.caches
  summary: Forces refresh of the cached item if it is not being refreshed at the moment.
  syntax:
    content: public void refresh(TKey key, Callable<Mono<TValue>> singleValueInitFunc)
    parameters:
    - id: key
      type: TKey
    - id: singleValueInitFunc
      type: java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>
- uid: com.azure.cosmos.implementation.caches.AsyncCache.remove(TKey)
  id: remove(TKey)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: remove(TKey key)
  nameWithType: AsyncCache<TKey,TValue>.remove(TKey key)
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.remove(TKey key)
  overload: com.azure.cosmos.implementation.caches.AsyncCache.remove*
  type: Method
  package: com.azure.cosmos.implementation.caches
  syntax:
    content: public void remove(TKey key)
    parameters:
    - id: key
      type: TKey
- uid: com.azure.cosmos.implementation.caches.AsyncCache.removeAsync(TKey)
  id: removeAsync(TKey)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: removeAsync(TKey key)
  nameWithType: AsyncCache<TKey,TValue>.removeAsync(TKey key)
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.removeAsync(TKey key)
  overload: com.azure.cosmos.implementation.caches.AsyncCache.removeAsync*
  type: Method
  package: com.azure.cosmos.implementation.caches
  summary: Remove value from cache and return it if present
  syntax:
    content: public Mono<TValue> removeAsync(TKey key)
    parameters:
    - id: key
      type: TKey
    return:
      type: reactor.core.publisher.Mono<TValue>
      description: Value if present, default value if not present
- uid: com.azure.cosmos.implementation.caches.AsyncCache.set(TKey,TValue)
  id: set(TKey,TValue)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.caches.AsyncCache
  langs:
  - java
  name: set(TKey key, TValue value)
  nameWithType: AsyncCache<TKey,TValue>.set(TKey key, TValue value)
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.set(TKey key, TValue value)
  overload: com.azure.cosmos.implementation.caches.AsyncCache.set*
  type: Method
  package: com.azure.cosmos.implementation.caches
  syntax:
    content: public void set(TKey key, TValue value)
    parameters:
    - id: key
      type: TKey
    - id: value
      type: TValue
references:
- uid: com.azure.cosmos.implementation.caches.IEqualityComparer<TValue>
  spec.java:
  - uid: com.azure.cosmos.implementation.caches.IEqualityComparer
    name: IEqualityComparer
    fullName: com.azure.cosmos.implementation.caches.IEqualityComparer
  - name: <
    fullName: <
  - uid: TValue
    name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.caches.AsyncCache.AsyncCache*
  name: AsyncCache
  nameWithType: AsyncCache<TKey,TValue>.AsyncCache
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.AsyncCache
  package: com.azure.cosmos.implementation.caches
- uid: TKey
  spec.java:
  - uid: TKey
    name: TKey
    fullName: TKey
- uid: TValue
  spec.java:
  - uid: TValue
    name: TValue
    fullName: TValue
- uid: com.azure.cosmos.implementation.caches.AsyncCache.set*
  name: set
  nameWithType: AsyncCache<TKey,TValue>.set
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.set
  package: com.azure.cosmos.implementation.caches
- uid: java.util.concurrent.Callable<reactor.core.publisher.Mono<TValue>>
  spec.java:
  - uid: java.util.concurrent.Callable
    name: Callable
    fullName: java.util.concurrent.Callable
  - name: <
    fullName: <
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: TValue
    name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<TValue>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: TValue
    name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.caches.AsyncCache.getAsync*
  name: getAsync
  nameWithType: AsyncCache<TKey,TValue>.getAsync
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.getAsync
  package: com.azure.cosmos.implementation.caches
- uid: com.azure.cosmos.implementation.caches.AsyncCache.remove*
  name: remove
  nameWithType: AsyncCache<TKey,TValue>.remove
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.remove
  package: com.azure.cosmos.implementation.caches
- uid: com.azure.cosmos.implementation.caches.AsyncCache.removeAsync*
  name: removeAsync
  nameWithType: AsyncCache<TKey,TValue>.removeAsync
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.removeAsync
  package: com.azure.cosmos.implementation.caches
- uid: com.azure.cosmos.implementation.caches.AsyncCache.clear*
  name: clear
  nameWithType: AsyncCache<TKey,TValue>.clear
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.clear
  package: com.azure.cosmos.implementation.caches
- uid: com.azure.cosmos.implementation.caches.AsyncCache.refresh*
  name: refresh
  nameWithType: AsyncCache<TKey,TValue>.refresh
  fullName: com.azure.cosmos.implementation.caches.AsyncCache<TKey,TValue>.refresh
  package: com.azure.cosmos.implementation.caches
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.caches.IEqualityComparer
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: com.azure.cosmos.implementation.caches.IEqualityComparer
- uid: java.util.concurrent.Callable
  name: Callable
  nameWithType: Callable
  fullName: java.util.concurrent.Callable
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
