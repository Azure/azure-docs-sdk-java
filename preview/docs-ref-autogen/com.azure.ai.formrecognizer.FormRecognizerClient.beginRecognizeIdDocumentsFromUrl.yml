### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl"
name: "beginRecognizeIdDocumentsFromUrl"
nameWithType: "FormRecognizerClient.beginRecognizeIdDocumentsFromUrl"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl)"
  name: "beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl)"
  nameWithType: "FormRecognizerClient.beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl)"
  summary: "Analyze ID documents using optical character recognition (OCR) and a prebuilt model trained on ID documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an ID document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString licenseDocumentUrl = \"licenseDocumentUrl\";\n // if training polling operation completed, retrieve the final result.\n formRecognizerClient.beginRecognizeIdDocumentsFromUrl(licenseDocumentUrl)\n     .getFinalResult()\n     .stream()\n     .map(RecognizedForm::getFields)\n     .forEach(recognizedFields -> {\n         FormField firstNameField = recognizedFields.get(\"FirstName\");\n         if (firstNameField != null) {\n             if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                 String firstName = firstNameField.getValue().asString();\n                 System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                     firstName, firstNameField.getConfidence());\n             }\n         }\n \n         FormField lastNameField = recognizedFields.get(\"LastName\");\n         if (lastNameField != null) {\n             if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                 String lastName = lastNameField.getValue().asString();\n                 System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                     lastName, lastNameField.getConfidence());\n             }\n         }\n \n         FormField countryFormField = recognizedFields.get(\"Country\");\n         if (countryFormField != null) {\n             if (FieldValueType.STRING == countryFormField.getValue().getValueType()) {\n                 String country = countryFormField.getValue().asCountry();\n                 System.out.printf(\"Country: %s, confidence: %.2f%n\",\n                     country, countryFormField.getConfidence());\n             }\n         }\n \n         FormField dateOfBirthField = recognizedFields.get(\"DateOfBirth\");\n         if (dateOfBirthField != null) {\n             if (FieldValueType.DATE == dateOfBirthField.getValue().getValueType()) {\n                 LocalDate dateOfBirth = dateOfBirthField.getValue().asDate();\n                 System.out.printf(\"Date of Birth: %s, confidence: %.2f%n\",\n                     dateOfBirth, dateOfBirthField.getConfidence());\n             }\n         }\n \n         FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n         if (dateOfExpirationField != null) {\n             if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                 LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                 System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                     expirationDate, dateOfExpirationField.getConfidence());\n             }\n         }\n \n         FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n         if (documentNumberField != null) {\n             if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                 String documentNumber = documentNumberField.getValue().asString();\n                 System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                     documentNumber, documentNumberField.getConfidence());\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  parameters:
  - description: "The source URL to the input ID Document."
    name: "iDDocumentUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll the progress of the recognize ID Document operation until it has\n completed, has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeIdDocumentOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl, RecognizeIdDocumentOptions recognizeIdDocumentOptions, Context context)"
  name: "beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl, RecognizeIdDocumentOptions recognizeIdDocumentOptions, Context context)"
  nameWithType: "FormRecognizerClient.beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl, RecognizeIdDocumentOptions recognizeIdDocumentOptions, Context context)"
  summary: "Analyze ID documents using optical character recognition (OCR) and a prebuilt model trained on ID documents model to extract key information from passports and US driver licenses. See [here][] for fields found on an ID document.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString licenseDocumentUrl = \"licenseDocumentUrl\";\n boolean includeFieldElements = true;\n // if training polling operation completed, retrieve the final result.\n formRecognizerClient.beginRecognizeIdDocumentsFromUrl(licenseDocumentUrl,\n     new RecognizeIdDocumentOptions()\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)), Context.NONE)\n     .getFinalResult()\n     .stream()\n     .map(RecognizedForm::getFields)\n     .forEach(recognizedFields -> {\n         FormField firstNameField = recognizedFields.get(\"FirstName\");\n         if (firstNameField != null) {\n             if (FieldValueType.STRING == firstNameField.getValue().getValueType()) {\n                 String firstName = firstNameField.getValue().asString();\n                 System.out.printf(\"First Name: %s, confidence: %.2f%n\",\n                     firstName, firstNameField.getConfidence());\n             }\n         }\n \n         FormField lastNameField = recognizedFields.get(\"LastName\");\n         if (lastNameField != null) {\n             if (FieldValueType.STRING == lastNameField.getValue().getValueType()) {\n                 String lastName = lastNameField.getValue().asString();\n                 System.out.printf(\"Last name: %s, confidence: %.2f%n\",\n                     lastName, lastNameField.getConfidence());\n             }\n         }\n \n         FormField countryFormField = recognizedFields.get(\"Country\");\n         if (countryFormField != null) {\n             if (FieldValueType.STRING == countryFormField.getValue().getValueType()) {\n                 String country = countryFormField.getValue().asCountry();\n                 System.out.printf(\"Country: %s, confidence: %.2f%n\",\n                     country, countryFormField.getConfidence());\n             }\n         }\n \n         FormField dateOfExpirationField = recognizedFields.get(\"DateOfExpiration\");\n         if (dateOfExpirationField != null) {\n             if (FieldValueType.DATE == dateOfExpirationField.getValue().getValueType()) {\n                 LocalDate expirationDate = dateOfExpirationField.getValue().asDate();\n                 System.out.printf(\"Document date of expiration: %s, confidence: %.2f%n\",\n                     expirationDate, dateOfExpirationField.getConfidence());\n             }\n         }\n \n         FormField documentNumberField = recognizedFields.get(\"DocumentNumber\");\n         if (documentNumberField != null) {\n             if (FieldValueType.STRING == documentNumberField.getValue().getValueType()) {\n                 String documentNumber = documentNumberField.getValue().asString();\n                 System.out.printf(\"Document number: %s, confidence: %.2f%n\",\n                     documentNumber, documentNumberField.getConfidence());\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/iddocumentfields"
  parameters:
  - description: "The source URL to the input ID Document."
    name: "iDDocumentUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeIdDocumentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing an ID Document."
    name: "recognizeIdDocumentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeIdDocumentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeIdDocumentOptions&text=RecognizeIdDocumentOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeIdDocumentsFromUrl(String iDDocumentUrl, RecognizeIdDocumentOptions recognizeIdDocumentOptions, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll the progress of the recognize ID Document operation until it has\n completed, has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.3
