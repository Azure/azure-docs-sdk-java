### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusClientBuilder"
fullName: "com.azure.messaging.servicebus.ServiceBusClientBuilder"
name: "ServiceBusClientBuilder"
nameWithType: "ServiceBusClientBuilder"
summary: "The builder to create Service Bus clients:\n\n**Instantiate a synchronous sender**\n\n```java\n// Retrieve 'connectionString' and 'queueName' from your configuration.\n ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n     .connectionString(connectionString);\n ServiceBusSenderClient sender = builder\n     .sender()\n     .queueName(queueName)\n     .buildClient();\n```\n\n**Instantiate an asynchronous receiver**\n\n```java\n// Retrieve 'connectionString', 'topicName' and 'subscriptionName' from your configuration.\n ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n     .connectionString(connectionString);\n ServiceBusReceiverAsyncClient receiver = builder\n     .receiver()\n     .disableAutoComplete() // Allows user to take control of settling a message.\n     .topicName(topicName)\n     .subscriptionName(subscriptionName)\n     .buildAsyncClient();\n```\n\n**Instantiate an asynchronous session receiver**\n\n```java\n// Retrieve 'connectionString', 'topicName' and 'subscriptionName' from your configuration.\n ServiceBusSessionReceiverAsyncClient sessionReceiver = new ServiceBusClientBuilder()\n     .connectionString(connectionString)\n     .sessionReceiver()\n     .receiveMode(ServiceBusReceiveMode.PEEK_LOCK)\n     .topicName(topicName)\n     .subscriptionName(subscriptionName)\n     .buildAsyncClient();\n \n // Receiving messages from the first available sessions. It waits up to the AmqpRetryOptions.getTryTimeout().\n // If no session is available within that operation timeout, it completes with an error. Otherwise, a receiver\n // is returned when a lock on the session is acquired.\n Mono<ServiceBusReceiverAsyncClient> receiverMono = sessionReceiver.acceptNextSession();\n \n Flux.usingWhen(receiverMono,\n     receiver -> receiver.receiveMessages(),\n     receiver -> Mono.fromRunnable(receiver::close))\n     .subscribe(message -> System.out.println(message.getBody().toString()));\n```\n\n**Instantiate the processor**\n\n```java\n// Retrieve 'connectionString' and 'queueName' from your configuration.\n ServiceBusClientBuilder builder = new ServiceBusClientBuilder()\n     .connectionString(connectionString);\n ServiceBusProcessorClient processor = builder\n     .processor()\n     .queueName(queueName)\n     .processMessage(System.out::println)\n     .processError(context -> System.err.println(context.getErrorSource()))\n     .buildProcessorClient();\n```\n\n**Sharing a connection between clients**\n\nThe creation of physical connection to Service Bus requires resources. If your architecture allows, an application should share connection between clients which can be achieved by sharing the top level builder as shown below.\n\n```java\n// Retrieve 'connectionString' and 'queueName' from your configuration.\n // Create shared builder.\n ServiceBusClientBuilder sharedConnectionBuilder = new ServiceBusClientBuilder()\n     .connectionString(connectionString);\n // Create receiver and sender which will share the connection.\n ServiceBusReceiverClient receiver = sharedConnectionBuilder\n     .receiver()\n     .queueName(queueName)\n     .buildClient();\n ServiceBusSenderClient sender = sharedConnectionBuilder\n     .sender()\n     .queueName(queueName)\n     .buildClient();\n```\n\n**Clients for sending messages**\n\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusSenderAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSenderAsyncClient\"></xref>\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusSenderClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSenderClient\"></xref>\n\n**Clients for receiving messages**\n\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceiverAsyncClient\"></xref>\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusReceiverClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusReceiverClient\"></xref>\n\n**Clients for receiving messages from a session-enabled Service Bus entity**\n\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusSessionReceiverAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSessionReceiverAsyncClient\"></xref>\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusSessionReceiverClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusSessionReceiverClient\"></xref>\n\n**Client for receiving messages using a callback-based processor**\n\n *  <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusClientBuilder"
constructors:
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.ServiceBusClientBuilder()"
methods:
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.configuration(com.azure.core.util.Configuration)"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.connectionString(java.lang.String)"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.credential(java.lang.String,com.azure.core.credential.TokenCredential)"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.enableCrossEntityTransactions()"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.processor()"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.proxyOptions(com.azure.core.amqp.ProxyOptions)"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.receiver()"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.retryOptions(com.azure.core.amqp.AmqpRetryOptions)"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.sender()"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.sessionProcessor()"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.sessionReceiver()"
- "com.azure.messaging.servicebus.ServiceBusClientBuilder.transportType(com.azure.core.amqp.AmqpTransportType)"
type: "class"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.3.0-beta.1
