### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  id: SimpleAbstractTypeResolver
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module
  children:
  - com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.<T>addMapping(java.lang.Class<T>,java.lang.Class<? extends T>)
  - com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver()
  - com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver._mappings
  - com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  langs:
  - java
  name: SimpleAbstractTypeResolver
  nameWithType: SimpleAbstractTypeResolver
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  type: Class
  package: com.fasterxml.jackson.databind.module
  summary: >-
    Simple <xref uid="com.fasterxml.jackson.databind.AbstractTypeResolver" data-throw-if-not-resolved="false">AbstractTypeResolver</xref> implementation, which is based on static mapping from abstract super types into sub types (concrete or abstract), but retaining generic parameterization. Can be used for things like specifying which implementation of <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> to use:


    ```java

    SimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver();
      // To make all properties declared as Collection, List, to LinkedList
      resolver.addMapping(Collection.class, LinkedList.class);
      resolver.addMapping(List.class, LinkedList.class);
    ```


    Can also be used as an alternative to per-class annotations when defining concrete implementations; however, only works with abstract types (since this is only called for abstract types)
  syntax:
    content: public class SimpleAbstractTypeResolver extends AbstractTypeResolver implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.AbstractTypeResolver
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.<T>addMapping(java.lang.Class<T>,java.lang.Class<? extends T>)
  id: <T>addMapping(java.lang.Class<T>,java.lang.Class<? extends T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  langs:
  - java
  name: <T>addMapping(Class<T> superType, Class<? extends T> subType)
  nameWithType: SimpleAbstractTypeResolver.<T>addMapping(Class<T> superType, Class<? extends T> subType)
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.<T>addMapping(Class<T> superType, Class<? extends T> subType)
  overload: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.addMapping*
  type: Method
  package: com.fasterxml.jackson.databind.module
  summary: Method for adding a mapping from super type to specific subtype. Arguments will be checked by method, to ensure that `superType` is abstract (since resolver is never called for concrete classes); as well as to ensure that there is supertype/subtype relationship (to ensure there won't be cycles during resolution).
  syntax:
    content: public SimpleAbstractTypeResolver <T>addMapping(Class<T> superType, Class<? extends T> subType)
    parameters:
    - id: superType
      type: java.lang.Class<T>
      description: Abstract type to resolve
    - id: subType
      type: java.lang.Class<? extends T>
      description: Sub-class of superType, to map superTo to
    return:
      type: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
      description: This resolver, to allow chaining of initializations
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver()
  id: SimpleAbstractTypeResolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  langs:
  - java
  name: SimpleAbstractTypeResolver()
  nameWithType: SimpleAbstractTypeResolver.SimpleAbstractTypeResolver()
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver()
  overload: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver*
  type: Constructor
  package: com.fasterxml.jackson.databind.module
  syntax:
    content: public SimpleAbstractTypeResolver()
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver._mappings
  id: _mappings
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  langs:
  - java
  name: _mappings
  nameWithType: SimpleAbstractTypeResolver._mappings
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver._mappings
  type: Field
  package: com.fasterxml.jackson.databind.module
  summary: Mappings from super types to subtypes
  syntax:
    content: protected final HashMap<ClassKey,Class<?>> _mappings
    return:
      type: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<?>>
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  id: findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  langs:
  - java
  name: findTypeMapping(DeserializationConfig config, JavaType type)
  nameWithType: SimpleAbstractTypeResolver.findTypeMapping(DeserializationConfig config, JavaType type)
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping(DeserializationConfig config, JavaType type)
  overload: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping*
  type: Method
  package: com.fasterxml.jackson.databind.module
  summary: >-
    Try to locate a subtype for given abstract type, to either resolve to a concrete type, or at least to a more-specific (and hopefully supported) abstract type, one which may have registered deserializers. Method is called before trying to locate registered deserializers (as well as standard abstract type defaulting that core Jackson does), so it is typically implemented to add custom mappings of common abstract types (like specify which concrete implementation to use for binding <xref uid="java.util.List" data-throw-if-not-resolved="false">java.util.List</xref>s).


    Note that this method does not necessarily have to do full resolution of bindings; that is, it is legal to return type that could be further resolved: caller is expected to keep calling this method on registered resolvers, until a concrete type is located.
  syntax:
    content: public JavaType findTypeMapping(DeserializationConfig config, JavaType type)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  id: resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  langs:
  - java
  name: resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
  nameWithType: SimpleAbstractTypeResolver.resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
  overload: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType*
  type: Method
  package: com.fasterxml.jackson.databind.module
  summary: Method called to try to resolve an abstract type into concrete type (usually for purposes of deserializing), when no concrete implementation was found. It will be called after checking all other possibilities, including defaulting.
  syntax:
    content: public JavaType resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: typeDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  id: resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver
  langs:
  - java
  name: resolveAbstractType(DeserializationConfig config, JavaType type)
  nameWithType: SimpleAbstractTypeResolver.resolveAbstractType(DeserializationConfig config, JavaType type)
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(DeserializationConfig config, JavaType type)
  overload: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType*
  type: Method
  package: com.fasterxml.jackson.databind.module
  summary: Older variant of <xref uid="com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)" data-throw-if-not-resolved="false">#resolveAbstractType(DeserializationConfig, BeanDescription)</xref>; obsoleted in 2.7
  syntax:
    content: public JavaType resolveAbstractType(DeserializationConfig config, JavaType type)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JavaType
references:
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver*
  name: SimpleAbstractTypeResolver
  nameWithType: SimpleAbstractTypeResolver.SimpleAbstractTypeResolver
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver
  package: com.fasterxml.jackson.databind.module
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: java.lang.Class<? extends T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.addMapping*
  name: <T>addMapping
  nameWithType: SimpleAbstractTypeResolver.<T>addMapping
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.<T>addMapping
  package: com.fasterxml.jackson.databind.module
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping*
  name: findTypeMapping
  nameWithType: SimpleAbstractTypeResolver.findTypeMapping
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping
  package: com.fasterxml.jackson.databind.module
- uid: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType*
  name: resolveAbstractType
  nameWithType: SimpleAbstractTypeResolver.resolveAbstractType
  fullName: com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType
  package: com.fasterxml.jackson.databind.module
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: java.util.HashMap<com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class<?>>
  spec.java:
  - uid: java.util.HashMap
    name: HashMap
    fullName: java.util.HashMap
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.type.ClassKey
    name: ClassKey
    fullName: com.fasterxml.jackson.databind.type.ClassKey
  - name: ','
    fullName: ','
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver
  name: AbstractTypeResolver
  nameWithType: AbstractTypeResolver
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
  name: AbstractTypeResolver.resolveAbstractType(DeserializationConfig,BeanDescription)
  nameWithType: AbstractTypeResolver.resolveAbstractType(DeserializationConfig,BeanDescription)
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  name: AbstractTypeResolver.resolveAbstractType(DeserializationConfig,JavaType)
  nameWithType: AbstractTypeResolver.resolveAbstractType(DeserializationConfig,JavaType)
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
  name: AbstractTypeResolver.findTypeMapping(DeserializationConfig,JavaType)
  nameWithType: AbstractTypeResolver.findTypeMapping(DeserializationConfig,JavaType)
  fullName: com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class
  name: ClassKey,Class
  nameWithType: ClassKey,Class
  fullName: com.fasterxml.jackson.databind.type.ClassKey,java.lang.Class
- uid: java.util.HashMap
  name: HashMap
  nameWithType: HashMap
  fullName: java.util.HashMap
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
