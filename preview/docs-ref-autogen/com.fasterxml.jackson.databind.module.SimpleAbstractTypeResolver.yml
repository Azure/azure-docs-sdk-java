### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"
fullName: "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver"
name: "SimpleAbstractTypeResolver"
nameWithType: "SimpleAbstractTypeResolver"
summary: "Simple <xref uid=\"com.fasterxml.jackson.databind.AbstractTypeResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AbstractTypeResolver\"></xref> implementation, which is based on static mapping from abstract super types into sub types (concrete or abstract), but retaining generic parameterization. Can be used for things like specifying which implementation of <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> to use:\n\n```java\nSimpleAbstractTypeResolver resolver = new SimpleAbstractTypeResolver();\n  // To make all properties declared as Collection, List, to LinkedList\n  resolver.addMapping(Collection.class, LinkedList.class);\n  resolver.addMapping(List.class, LinkedList.class);\n```\n\nCan also be used as an alternative to per-class annotations when defining concrete implementations; however, only works with abstract types (since this is only called for abstract types)"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.fasterxml.jackson.databind.AbstractTypeResolver\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.fasterxml.jackson.databind.AbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)"
- "com.fasterxml.jackson.databind.AbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class SimpleAbstractTypeResolver extends AbstractTypeResolver implements Serializable"
constructors:
- "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.SimpleAbstractTypeResolver()"
fields:
- "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver._mappings"
methods:
- "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.<T>addMapping(java.lang.Class<T>,java.lang.Class<? extends T>)"
- "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.findTypeMapping(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription)"
- "com.fasterxml.jackson.databind.module.SimpleAbstractTypeResolver.resolveAbstractType(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.JavaType)"
type: "class"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind.module"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
