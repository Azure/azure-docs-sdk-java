### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Sets.newLinkedHashSetWithExpectedSize*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newLinkedHashSetWithExpectedSize"
name: "<E>newLinkedHashSetWithExpectedSize"
nameWithType: "Sets.<E>newLinkedHashSetWithExpectedSize"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newLinkedHashSetWithExpectedSize(int)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>newLinkedHashSetWithExpectedSize(int expectedSize)"
  name: "<E>newLinkedHashSetWithExpectedSize(int expectedSize)"
  nameWithType: "Sets.<E>newLinkedHashSetWithExpectedSize(int expectedSize)"
  summary: "Creates a `LinkedHashSet` instance, with a high enough \"initial capacity\" that it *should* hold `expectedSize` elements without growth. This behavior cannot be broadly guaranteed, but it is observed to be true for OpenJDK 1.7. It also can't be guaranteed that the method isn't inadvertently *oversizing* the returned set."
  parameters:
  - description: "the number of elements you expect to add to the returned set"
    name: "expectedSize"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static LinkedHashSet<E> <E>newLinkedHashSetWithExpectedSize(int expectedSize)"
  returns:
    description: "a new, empty <code>LinkedHashSet</code> with enough capacity to hold <code>expectedSize</code>\n     elements without resizing"
    type: "<xref href=\"java.util.LinkedHashSet?alt=java.util.LinkedHashSet&text=LinkedHashSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
