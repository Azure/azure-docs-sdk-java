### YamlMime:JavaType
uid: "com.azure.storage.blob.nio.AzurePath"
fullName: "com.azure.storage.blob.nio.AzurePath"
name: "AzurePath"
nameWithType: "AzurePath"
summary: "An object that may be used to locate a file in a file system."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AzurePath implements Path"
methods:
- uid: "com.azure.storage.blob.nio.AzurePath.compareTo(java.nio.file.Path)"
  fullName: "com.azure.storage.blob.nio.AzurePath.compareTo(Path path)"
  name: "compareTo(Path path)"
  nameWithType: "AzurePath.compareTo(Path path)"
  summary: "Compares two abstract paths lexicographically."
  parameters:
  - name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int compareTo(Path path)"
  desc: "Compares two abstract paths lexicographically. This method does not access the file system and neither file is required to exist.\n\nThis method may not be used to compare paths that are associated with different file system providers.\n\nThis result of this method is identical to a string comparison on the underlying path strings."
  returns:
    description: "zero if the argument is equal to this path, a value less than zero if this path is lexicographically less\n than the argument, or a value greater than zero if this path is lexicographically greater than the argument"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.endsWith(java.lang.String)"
  fullName: "com.azure.storage.blob.nio.AzurePath.endsWith(String path)"
  name: "endsWith(String path)"
  nameWithType: "AzurePath.endsWith(String path)"
  summary: "Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the ends<wbr>With(Path) method."
  parameters:
  - description: "the given path string"
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean endsWith(String path)"
  desc: "Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the endsWith(Path) method."
  returns:
    description: "true if this path starts with the given path; otherwise false"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.endsWith(java.nio.file.Path)"
  fullName: "com.azure.storage.blob.nio.AzurePath.endsWith(Path path)"
  name: "endsWith(Path path)"
  nameWithType: "AzurePath.endsWith(Path path)"
  summary: "Tests if this path ends with the given path."
  parameters:
  - description: "the given path"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean endsWith(Path path)"
  desc: "Tests if this path ends with the given path.\n\nIf the given path has N elements, and no root component, and this path has N or more elements, then this path ends with the given path if the last N elements of each path, starting at the element farthest from the root, are equal.\n\nIf the given path has a root component then this path ends with the given path if the root component of this path ends with the root component of the given path, and the corresponding elements of both paths are equal. If this path does not have a root component and the given path has a root component then this path does not end with the given path.\n\nIf the given path is associated with a different FileSystem to this path then false is returned.\n\nIn this implementation, a root component ends with another root component if the two root components are equivalent strings. In other words, if the files are stored in the same container."
  returns:
    description: "true if this path ends with the given path; otherwise false"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.equals(java.lang.Object)"
  fullName: "com.azure.storage.blob.nio.AzurePath.equals(Object o)"
  name: "equals(Object o)"
  nameWithType: "AzurePath.equals(Object o)"
  summary: "A path is considered equal to another path if it is associated with the same file system instance and if the path strings are equivalent."
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "o"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object o)"
  desc: "A path is considered equal to another path if it is associated with the same file system instance and if the path strings are equivalent."
  returns:
    description: "true if, and only if, the given object is a Path that is identical to this Path"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.fromBlobUrl(com.azure.storage.blob.nio.AzureFileSystemProvider,java.lang.String)"
  fullName: "com.azure.storage.blob.nio.AzurePath.fromBlobUrl(AzureFileSystemProvider provider, String url)"
  name: "fromBlobUrl(AzureFileSystemProvider provider, String url)"
  nameWithType: "AzurePath.fromBlobUrl(AzureFileSystemProvider provider, String url)"
  summary: "A utility method to conveniently convert from a URL to a storage resource to an `AzurePath` pointing to the same resource."
  modifiers:
  - "static"
  parameters:
  - description: "The installed <xref uid=\"com.azure.storage.blob.nio.AzureFileSystemProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystemProvider\"></xref> that manages open file systems for this jvm."
    name: "provider"
    type: "<xref href=\"com.azure.storage.blob.nio.AzureFileSystemProvider?alt=com.azure.storage.blob.nio.AzureFileSystemProvider&text=AzureFileSystemProvider\" data-throw-if-not-resolved=\"False\" />"
  - description: "The url to the desired resource."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static AzurePath fromBlobUrl(AzureFileSystemProvider provider, String url)"
  exceptions:
  - description: "If the url contains elements which are not well formatted."
    type: "<xref href=\"java.net.URISyntaxException?alt=java.net.URISyntaxException&text=URISyntaxException\" data-throw-if-not-resolved=\"False\" />"
  desc: "A utility method to conveniently convert from a URL to a storage resource to an `AzurePath` pointing to the same resource. The url must be well formatted. There must be an open filesystem corresponding to the account which contains the blob. Otherwise, a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.nio.file.FileSystemNotFoundException\"></xref> will be thrown. The url may point to either an account, container, or blob. If it points to an account, the path will be empty, but it will have an internal reference to the file system containing it, meaning instance methods may be performed on the path to construct a reference to another object. If it points to a container, there will be one element, which is the root element. Everything after the container, that is the blob name, will then be appended after the root element. IP style urls are not currently supported. The <xref uid=\"com.azure.storage.blob.nio.AzureFileSystemProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystemProvider\"></xref> can typically be obtained via <xref uid=\"com.azure.storage.blob.nio.AzureFileSystem.provider()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystem#provider()\"></xref>."
  returns:
    description: "An <xref uid=\"com.azure.storage.blob.nio.AzurePath\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzurePath\"></xref> which points to the resource identified by the url."
    type: "<xref href=\"com.azure.storage.blob.nio.AzurePath?alt=com.azure.storage.blob.nio.AzurePath&text=AzurePath\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.getFileName()"
  fullName: "com.azure.storage.blob.nio.AzurePath.getFileName()"
  name: "getFileName()"
  nameWithType: "AzurePath.getFileName()"
  summary: "Returns the name of the file or directory denoted by this path as a Path object."
  syntax: "public Path getFileName()"
  desc: "Returns the name of the file or directory denoted by this path as a Path object. The file name is the farthest element from the root in the directory hierarchy."
  returns:
    description: "a path representing the name of the file or directory, or null if this path has zero elements"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.getFileSystem()"
  fullName: "com.azure.storage.blob.nio.AzurePath.getFileSystem()"
  name: "getFileSystem()"
  nameWithType: "AzurePath.getFileSystem()"
  summary: "Returns the file system that created this object."
  syntax: "public FileSystem getFileSystem()"
  desc: "Returns the file system that created this object."
  returns:
    description: "the file system that created this object"
    type: "<xref href=\"java.nio.file.FileSystem?alt=java.nio.file.FileSystem&text=FileSystem\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.getName(int)"
  fullName: "com.azure.storage.blob.nio.AzurePath.getName(int index)"
  name: "getName(int index)"
  nameWithType: "AzurePath.getName(int index)"
  summary: "Returns a name element of this path as a Path object."
  parameters:
  - description: "the index of the element"
    name: "index"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path getName(int index)"
  desc: "Returns a name element of this path as a Path object.\n\nThe index parameter is the index of the name element to return. The element that is closest to the root in the directory hierarchy has index 0. The element that is farthest from the root has index `count-1`."
  returns:
    description: "the name element"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.getNameCount()"
  fullName: "com.azure.storage.blob.nio.AzurePath.getNameCount()"
  name: "getNameCount()"
  nameWithType: "AzurePath.getNameCount()"
  summary: "Returns the number of name elements in the path."
  syntax: "public int getNameCount()"
  desc: "Returns the number of name elements in the path."
  returns:
    description: "the number of elements in the path, or 0 if this path only represents a root component"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.getParent()"
  fullName: "com.azure.storage.blob.nio.AzurePath.getParent()"
  name: "getParent()"
  nameWithType: "AzurePath.getParent()"
  summary: "Returns the parent path, or null if this path does not have a parent."
  syntax: "public Path getParent()"
  desc: "Returns the parent path, or null if this path does not have a parent.\n\nThe parent of this path object consists of this path's root component, if any, and each element in the path except for the farthest from the root in the directory hierarchy. This method does not access the file system; the path or its parent may not exist. Furthermore, this method does not eliminate special names such as \".\" and \"..\" that may be used in some implementations. On UNIX for example, the parent of \"/a/b/c\" is \"/a/b\", and the parent of \"x/y/.\" is \"x/y\". This method may be used with the normalize method, to eliminate redundant names, for cases where shell-like navigation is required.\n\nIf this path has one or more elements, and no root component, then this method is equivalent to evaluating the expression: `subpath(0, getNameCount()-1);`"
  returns:
    description: "a path representing the path's parent"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.getRoot()"
  fullName: "com.azure.storage.blob.nio.AzurePath.getRoot()"
  name: "getRoot()"
  nameWithType: "AzurePath.getRoot()"
  summary: "Returns the root component of this path as a Path object, or null if this path does not have a root component."
  syntax: "public Path getRoot()"
  desc: "Returns the root component of this path as a Path object, or null if this path does not have a root component.\n\nThe root component of this path also identifies the Azure Storage Container in which the file is stored. This method will not validate that the root component corresponds to an actual file store/container in this file system. It will simply return the root component of the path if one is present and syntactically valid."
  returns:
    description: "a path representing the root component of this path, or null"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.hashCode()"
  fullName: "com.azure.storage.blob.nio.AzurePath.hashCode()"
  name: "hashCode()"
  nameWithType: "AzurePath.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.isAbsolute()"
  fullName: "com.azure.storage.blob.nio.AzurePath.isAbsolute()"
  name: "isAbsolute()"
  nameWithType: "AzurePath.isAbsolute()"
  summary: "Tells whether this path is absolute."
  syntax: "public boolean isAbsolute()"
  desc: "Tells whether this path is absolute.\n\nAn absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file. A path is considered absolute in this file system if it contains a root component."
  returns:
    description: "whether the path is absolute"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.iterator()"
  fullName: "com.azure.storage.blob.nio.AzurePath.iterator()"
  name: "iterator()"
  nameWithType: "AzurePath.iterator()"
  summary: "Returns an iterator over the name elements of this path."
  syntax: "public Iterator<Path> iterator()"
  desc: "Returns an iterator over the name elements of this path.\n\nThe first element returned by the iterator represents the name element that is closest to the root in the directory hierarchy, the second element is the next closest, and so on. The last element returned is the name of the file or directory denoted by this path. The root component, if present, is not returned by the iterator."
  returns:
    description: "an iterator over the name elements of this path."
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.nio.AzurePath.normalize()"
  fullName: "com.azure.storage.blob.nio.AzurePath.normalize()"
  name: "normalize()"
  nameWithType: "AzurePath.normalize()"
  summary: "Returns a path that is this path with redundant name elements eliminated."
  syntax: "public Path normalize()"
  desc: "Returns a path that is this path with redundant name elements eliminated.\n\nIt derives from this path, a path that does not contain redundant name elements. The \".\" and \"..\" are special names used to indicate the current directory and parent directory. All occurrences of \".\" are considered redundant. If a \"..\" is preceded by a non-\"..\" name then both names are considered redundant (the process to identify such names is repeated until is it no longer applicable).\n\nThis method does not access the file system; the path may not locate a file that exists. Eliminating \"..\" and a preceding name from a path may result in the path that locates a different file than the original path"
  returns:
    description: "the resulting path or this path if it does not contain redundant name elements; an empty path is returned\n if this path does have a root component and all name elements are redundant"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)"
  fullName: "com.azure.storage.blob.nio.AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds)"
  name: "register(WatchService watchService, WatchEvent.Kind<?>[] kinds)"
  nameWithType: "AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds)"
  summary: "Unsupported."
  parameters:
  - description: "watchService"
    name: "watchService"
    type: "<xref href=\"java.nio.file.WatchService?alt=java.nio.file.WatchService&text=WatchService\" data-throw-if-not-resolved=\"False\" />"
  - description: "kinds"
    name: "kinds"
    type: "<xref href=\"java.nio.file.WatchEvent.Kind?alt=java.nio.file.WatchEvent.Kind&text=Kind\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;[]"
  syntax: "public WatchKey register(WatchService watchService, WatchEvent.Kind<?>[] kinds)"
  exceptions:
  - description: "operation not supported."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Unsupported."
  returns:
    description: "the watch key"
    type: "<xref href=\"java.nio.file.WatchKey?alt=java.nio.file.WatchKey&text=WatchKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)"
  fullName: "com.azure.storage.blob.nio.AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)"
  name: "register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)"
  nameWithType: "AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)"
  summary: "Unsupported."
  parameters:
  - description: "watchService"
    name: "watchService"
    type: "<xref href=\"java.nio.file.WatchService?alt=java.nio.file.WatchService&text=WatchService\" data-throw-if-not-resolved=\"False\" />"
  - description: "kinds"
    name: "kinds"
    type: "<xref href=\"java.nio.file.WatchEvent.Kind?alt=java.nio.file.WatchEvent.Kind&text=Kind\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;[]"
  - description: "modifiers"
    name: "modifiers"
    type: "<xref href=\"java.nio.file.WatchEvent.Modifier?alt=java.nio.file.WatchEvent.Modifier&text=Modifier\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public WatchKey register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)"
  exceptions:
  - description: "operation not supported."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Unsupported."
  returns:
    description: "the watch key"
    type: "<xref href=\"java.nio.file.WatchKey?alt=java.nio.file.WatchKey&text=WatchKey\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.relativize(java.nio.file.Path)"
  fullName: "com.azure.storage.blob.nio.AzurePath.relativize(Path path)"
  name: "relativize(Path path)"
  nameWithType: "AzurePath.relativize(Path path)"
  summary: "Constructs a relative path between this path and a given path."
  parameters:
  - description: "the path to relativize against this path"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path relativize(Path path)"
  desc: "Constructs a relative path between this path and a given path.\n\nRelativization is the inverse of resolution. This method attempts to construct a relative path that when resolved against this path, yields a path that locates the same file as the given path.\n\nA relative path cannot be constructed if only one of the paths have a root component. If both paths have a root component, it is still possible to relativize one against the other. If this path and the given path are equal then an empty path is returned.\n\nFor any two normalized paths p and q, where q does not have a root component, `p.relativize(p.resolve(q)).equals(q)`"
  returns:
    description: "the resulting relative path, or an empty path if both paths are equal"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.resolve(java.lang.String)"
  fullName: "com.azure.storage.blob.nio.AzurePath.resolve(String path)"
  name: "resolve(String path)"
  nameWithType: "AzurePath.resolve(String path)"
  summary: "Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the <xref uid=\"com.azure.storage.blob.nio.AzurePath.resolve(java.nio.file.Path)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"resolve\"></xref> method."
  parameters:
  - description: "the path string to resolve against this path"
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path resolve(String path)"
  desc: "Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the <xref uid=\"com.azure.storage.blob.nio.AzurePath.resolve(java.nio.file.Path)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"resolve\"></xref> method."
  returns:
    description: "the resulting path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.resolve(java.nio.file.Path)"
  fullName: "com.azure.storage.blob.nio.AzurePath.resolve(Path path)"
  name: "resolve(Path path)"
  nameWithType: "AzurePath.resolve(Path path)"
  summary: "Resolve the given path against this path."
  parameters:
  - description: "the path to resolve against this path"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path resolve(Path path)"
  desc: "Resolve the given path against this path.\n\nIf the other parameter is an absolute path then this method trivially returns other. If other is an empty path then this method trivially returns this path. Otherwise, this method considers this path to be a directory and resolves the given path against this path. In the simplest case, the given path does not have a root component, in which case this method joins the given path to this path and returns a resulting path that ends with the given path. Where the given path has a root component then resolution is highly implementation dependent and therefore unspecified."
  returns:
    description: "the resulting path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.resolveSibling(java.lang.String)"
  fullName: "com.azure.storage.blob.nio.AzurePath.resolveSibling(String path)"
  name: "resolveSibling(String path)"
  nameWithType: "AzurePath.resolveSibling(String path)"
  summary: "Converts a given path string to a Path and resolves it against this path's parent path in exactly the manner specified by the resolve<wbr>Sibling method."
  parameters:
  - description: "the path string to resolve against this path's parent"
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path resolveSibling(String path)"
  desc: "Converts a given path string to a Path and resolves it against this path's parent path in exactly the manner specified by the resolveSibling method."
  returns:
    description: "the resulting path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.resolveSibling(java.nio.file.Path)"
  fullName: "com.azure.storage.blob.nio.AzurePath.resolveSibling(Path path)"
  name: "resolveSibling(Path path)"
  nameWithType: "AzurePath.resolveSibling(Path path)"
  summary: "Resolves the given path against this path's parent path."
  parameters:
  - description: "the path to resolve against this path's parent"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path resolveSibling(Path path)"
  desc: "Resolves the given path against this path's parent path. This is useful where a file name needs to be replaced with another file name. For example, suppose that the name separator is \"/\" and a path represents \"dir1/dir2/foo\", then invoking this method with the Path \"bar\" will result in the Path \"dir1/dir2/bar\". If this path does not have a parent path, or other is absolute, then this method returns other. If other is an empty path then this method returns this path's parent, or where this path doesn't have a parent, the empty path."
  returns:
    description: "the resulting path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.startsWith(java.lang.String)"
  fullName: "com.azure.storage.blob.nio.AzurePath.startsWith(String path)"
  name: "startsWith(String path)"
  nameWithType: "AzurePath.startsWith(String path)"
  summary: "Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the starts<wbr>With(Path) method."
  parameters:
  - description: "the given path string"
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean startsWith(String path)"
  desc: "Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the startsWith(Path) method."
  returns:
    description: "true if this path starts with the given path; otherwise false"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.startsWith(java.nio.file.Path)"
  fullName: "com.azure.storage.blob.nio.AzurePath.startsWith(Path path)"
  name: "startsWith(Path path)"
  nameWithType: "AzurePath.startsWith(Path path)"
  summary: "Tests if this path starts with the given path."
  parameters:
  - description: "the given path"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean startsWith(Path path)"
  desc: "Tests if this path starts with the given path.\n\nThis path starts with the given path if this path's root component starts with the root component of the given path, and this path starts with the same name elements as the given path. If the given path has more name elements than this path then false is returned.\n\nIf this path does not have a root component and the given path has a root component then this path does not start with the given path.\n\nIf the given path is associated with a different FileSystem to this path then false is returned.\n\nIn this implementation, a root component starts with another root component if the two root components are equivalent strings. In other words, if the files are stored in the same container."
  returns:
    description: "true if this path starts with the given path; otherwise false"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.subpath(int,int)"
  fullName: "com.azure.storage.blob.nio.AzurePath.subpath(int begin, int end)"
  name: "subpath(int begin, int end)"
  nameWithType: "AzurePath.subpath(int begin, int end)"
  summary: "Returns a relative Path that is a subsequence of the name elements of this path."
  parameters:
  - description: "the index of the first element, inclusive"
    name: "begin"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "the index of the last element, exclusive"
    name: "end"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Path subpath(int begin, int end)"
  desc: "Returns a relative Path that is a subsequence of the name elements of this path.\n\nThe beginIndex and endIndex parameters specify the subsequence of name elements. The name that is closest to the root in the directory hierarchy has index 0. The name that is farthest from the root has index `count-1`. The returned Path object has the name elements that begin at beginIndex and extend to the element at index `endIndex-1`."
  returns:
    description: "a new Path object that is a subsequence of the name elements in this Path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.toAbsolutePath()"
  fullName: "com.azure.storage.blob.nio.AzurePath.toAbsolutePath()"
  name: "toAbsolutePath()"
  nameWithType: "AzurePath.toAbsolutePath()"
  summary: "Returns a Path object representing the absolute path of this path."
  syntax: "public Path toAbsolutePath()"
  desc: "Returns a Path object representing the absolute path of this path.\n\nIf this path is already absolute then this method simply returns this path. Otherwise, this method resolves the path against the default directory."
  returns:
    description: "a Path object representing the absolute path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.toBlobClient()"
  fullName: "com.azure.storage.blob.nio.AzurePath.toBlobClient()"
  name: "toBlobClient()"
  nameWithType: "AzurePath.toBlobClient()"
  summary: "Returns a <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref> which references a blob pointed to by this path."
  syntax: "public BlobClient toBlobClient()"
  exceptions:
  - description: "If the path only contains a root component or is empty"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Returns a <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref> which references a blob pointed to by this path. Note that this does not guarantee the existence of the blob at this location."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.BlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClient\"></xref>."
    type: "<xref href=\"com.azure.storage.blob.BlobClient?alt=com.azure.storage.blob.BlobClient&text=BlobClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.toFile()"
  fullName: "com.azure.storage.blob.nio.AzurePath.toFile()"
  name: "toFile()"
  nameWithType: "AzurePath.toFile()"
  summary: "Unsupported."
  syntax: "public File toFile()"
  desc: "Unsupported."
  returns:
    description: "the file"
    type: "<xref href=\"java.io.File?alt=java.io.File&text=File\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.toRealPath(java.nio.file.LinkOption...)"
  fullName: "com.azure.storage.blob.nio.AzurePath.toRealPath(LinkOption[] linkOptions)"
  name: "toRealPath(LinkOption[] linkOptions)"
  nameWithType: "AzurePath.toRealPath(LinkOption[] linkOptions)"
  summary: "Unsupported."
  parameters:
  - description: "options"
    name: "linkOptions"
    type: "<xref href=\"java.nio.file.LinkOption?alt=java.nio.file.LinkOption&text=LinkOption\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public Path toRealPath(LinkOption[] linkOptions)"
  exceptions:
  - description: "operation not supported."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Unsupported."
  returns:
    description: "the real path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.toString()"
  fullName: "com.azure.storage.blob.nio.AzurePath.toString()"
  name: "toString()"
  nameWithType: "AzurePath.toString()"
  summary: "Returns the string representation of this path."
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  desc: "Returns the string representation of this path.\n\nIf this path was created by converting a path string using the getPath method then the path string returned by this method may differ from the original String used to create the path.\n\nThe returned path string uses the default name separator to separate names in the path."
  returns:
    description: "the string representation of this path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.AzurePath.toUri()"
  fullName: "com.azure.storage.blob.nio.AzurePath.toUri()"
  name: "toUri()"
  nameWithType: "AzurePath.toUri()"
  summary: "Returns a URI to represent this path."
  syntax: "public URI toUri()"
  desc: "Returns a URI to represent this path.\n\nThis method constructs an absolute URI with a scheme equal to the URI scheme that identifies the provider.\n\nNo authority component is defined for the `URI` returned by this method. This implementation offers the same equivalence guarantee as the default provider."
  returns:
    description: "the URI representing this path"
    type: "<xref href=\"java.net.URI?alt=java.net.URI&text=URI\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "An object that may be used to locate a file in a file system.\n\nThe root component, if it is present, is the first element of the path and is denoted by a `':'` as the last character. Hence, only one instance of `':'` may appear in a path string, and it may only be the last character of the first element in the path. The root component is used to identify which container a path belongs to. All other path elements, including separators, are considered as the blob name. <xref uid=\"com.azure.storage.blob.nio.AzurePath.fromBlobUrl*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzurePath#fromBlobUrl\"></xref> may be used to convert a typical http url pointing to a blob into an `AzurePath` object pointing to the same resource.\n\nConstructing a syntactically valid path does not ensure a resource exists at the given path. An error will not be thrown until trying to access an invalid resource, e.g. trying to access a resource that does not exist.\n\nPath names are case-sensitive.\n\nIf a resource is accessed via a relative path, it will be resolved against the default directory of the file system. The default directory is as defined in the <xref uid=\"com.azure.storage.blob.nio.AzureFileSystem\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystem\"></xref> docs.\n\nLeading and trailing separators will be stripped from each component passed to <xref uid=\"com.azure.storage.blob.nio.AzureFileSystem.getPath*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureFileSystem#getPath(String, String...)\"></xref>. This has the effect of treating \"foo/\" as though it were simply \"foo\"."
implements:
- "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.storage.blob.nio"
artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.19
