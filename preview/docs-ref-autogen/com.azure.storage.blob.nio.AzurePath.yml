### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.nio.AzurePath
  id: AzurePath
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio
  children:
  - com.azure.storage.blob.nio.AzurePath.compareTo(java.nio.file.Path)
  - com.azure.storage.blob.nio.AzurePath.endsWith(java.lang.String)
  - com.azure.storage.blob.nio.AzurePath.endsWith(java.nio.file.Path)
  - com.azure.storage.blob.nio.AzurePath.equals(java.lang.Object)
  - com.azure.storage.blob.nio.AzurePath.getFileName()
  - com.azure.storage.blob.nio.AzurePath.getFileSystem()
  - com.azure.storage.blob.nio.AzurePath.getName(int)
  - com.azure.storage.blob.nio.AzurePath.getNameCount()
  - com.azure.storage.blob.nio.AzurePath.getParent()
  - com.azure.storage.blob.nio.AzurePath.getRoot()
  - com.azure.storage.blob.nio.AzurePath.hashCode()
  - com.azure.storage.blob.nio.AzurePath.isAbsolute()
  - com.azure.storage.blob.nio.AzurePath.iterator()
  - com.azure.storage.blob.nio.AzurePath.normalize()
  - com.azure.storage.blob.nio.AzurePath.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)
  - com.azure.storage.blob.nio.AzurePath.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)
  - com.azure.storage.blob.nio.AzurePath.relativize(java.nio.file.Path)
  - com.azure.storage.blob.nio.AzurePath.resolve(java.lang.String)
  - com.azure.storage.blob.nio.AzurePath.resolve(java.nio.file.Path)
  - com.azure.storage.blob.nio.AzurePath.resolveSibling(java.lang.String)
  - com.azure.storage.blob.nio.AzurePath.resolveSibling(java.nio.file.Path)
  - com.azure.storage.blob.nio.AzurePath.startsWith(java.lang.String)
  - com.azure.storage.blob.nio.AzurePath.startsWith(java.nio.file.Path)
  - com.azure.storage.blob.nio.AzurePath.subpath(int,int)
  - com.azure.storage.blob.nio.AzurePath.toAbsolutePath()
  - com.azure.storage.blob.nio.AzurePath.toFile()
  - com.azure.storage.blob.nio.AzurePath.toRealPath(java.nio.file.LinkOption...)
  - com.azure.storage.blob.nio.AzurePath.toString()
  - com.azure.storage.blob.nio.AzurePath.toUri()
  langs:
  - java
  name: AzurePath
  nameWithType: AzurePath
  fullName: com.azure.storage.blob.nio.AzurePath
  type: Class
  package: com.azure.storage.blob.nio
  summary: >-
    An object that may be used to locate a file in a file system.


    The root component, if it is present, is the first element of the path and is denoted by a `':'` as the last character. Hence, only one instance of `':'` may appear in a path string and it may only be the last character of the first element in the path. The root component is used to identify which container a path belongs to.


    Constructing a syntactically valid path does not ensure a resource exists at the given path. An error will not be thrown until trying to access an invalid resource, e.g. trying to access a resource that does not exist.


    Path names are case sensitive.


    If a resource is accessed via a relative path, it will be resolved against the default directory of the file system. The default directory is as defined in the <xref uid="com.azure.storage.blob.nio.AzureFileSystem" data-throw-if-not-resolved="false">AzureFileSystem</xref> docs.


    Leading and trailing separators will be stripped from each component passed to <xref uid="com.azure.storage.blob.nio.AzureFileSystem.getPath*" data-throw-if-not-resolved="false">AzureFileSystem#getPath(String, String...)</xref>. This has the effect of treating "foo/" as though it were simply "foo".
  syntax:
    content: public final class AzurePath implements Path
  inheritance:
  - java.lang.Object
  implements:
  - java.nio.file.Path
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.nio.AzurePath.AzurePath(com.azure.storage.blob.nio.AzureFileSystem,java.lang.String,java.lang.String...)
  id: AzurePath(com.azure.storage.blob.nio.AzureFileSystem,java.lang.String,java.lang.String...)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: AzurePath(AzureFileSystem parentFileSystem, String first, String[] more)
  nameWithType: AzurePath.AzurePath(AzureFileSystem parentFileSystem, String first, String[] more)
  fullName: com.azure.storage.blob.nio.AzurePath.AzurePath(AzureFileSystem parentFileSystem, String first, String[] more)
  overload: com.azure.storage.blob.nio.AzurePath.AzurePath*
  type: Constructor
  package: com.azure.storage.blob.nio
  syntax:
    content: " AzurePath(AzureFileSystem parentFileSystem, String first, String[] more)"
    parameters:
    - id: parentFileSystem
      type: com.azure.storage.blob.nio.AzureFileSystem
    - id: first
      type: java.lang.String
    - id: more
      type: java.lang.String[]
- uid: com.azure.storage.blob.nio.AzurePath.compareTo(java.nio.file.Path)
  id: compareTo(java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: compareTo(Path path)
  nameWithType: AzurePath.compareTo(Path path)
  fullName: com.azure.storage.blob.nio.AzurePath.compareTo(Path path)
  overload: com.azure.storage.blob.nio.AzurePath.compareTo*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Compares two abstract paths lexicographically. This method does not access the file system and neither file is required to exist.


    This method may not be used to compare paths that are associated with different file system providers.


    This result of this method is identical to a string comparison on the underlying path strings.
  syntax:
    content: public int compareTo(Path path)
    parameters:
    - id: path
      type: java.nio.file.Path
    return:
      type: int
      description: >-
        zero if the argument is equal to this path, a value less than zero if this path is lexicographically less
         than the argument, or a value greater than zero if this path is lexicographically greater than the argument
- uid: com.azure.storage.blob.nio.AzurePath.endsWith(java.lang.String)
  id: endsWith(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: endsWith(String path)
  nameWithType: AzurePath.endsWith(String path)
  fullName: com.azure.storage.blob.nio.AzurePath.endsWith(String path)
  overload: com.azure.storage.blob.nio.AzurePath.endsWith*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the endsWith(Path) method.
  syntax:
    content: public boolean endsWith(String path)
    parameters:
    - id: path
      type: java.lang.String
      description: the given path string
    return:
      type: boolean
      description: true if this path starts with the given path; otherwise false
- uid: com.azure.storage.blob.nio.AzurePath.endsWith(java.nio.file.Path)
  id: endsWith(java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: endsWith(Path path)
  nameWithType: AzurePath.endsWith(Path path)
  fullName: com.azure.storage.blob.nio.AzurePath.endsWith(Path path)
  overload: com.azure.storage.blob.nio.AzurePath.endsWith*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Tests if this path ends with the given path.


    If the given path has N elements, and no root component, and this path has N or more elements, then this path ends with the given path if the last N elements of each path, starting at the element farthest from the root, are equal.


    If the given path has a root component then this path ends with the given path if the root component of this path ends with the root component of the given path, and the corresponding elements of both paths are equal. If this path does not have a root component and the given path has a root component then this path does not end with the given path.


    If the given path is associated with a different FileSystem to this path then false is returned.


    In this implementation, a root component ends with another root component if the two root components are equivalent strings. In other words, if the files are stored in the same container.
  syntax:
    content: public boolean endsWith(Path path)
    parameters:
    - id: path
      type: java.nio.file.Path
      description: the given path
    return:
      type: boolean
      description: true if this path ends with the given path; otherwise false
- uid: com.azure.storage.blob.nio.AzurePath.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: equals(Object o)
  nameWithType: AzurePath.equals(Object o)
  fullName: com.azure.storage.blob.nio.AzurePath.equals(Object o)
  overload: com.azure.storage.blob.nio.AzurePath.equals*
  type: Method
  package: com.azure.storage.blob.nio
  summary: A path is considered equal to another path if it is associated with the same file system instance and if the path strings are equivalent.
  syntax:
    content: public boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
      description: true if, and only if, the given object is a Path that is identical to this Path
- uid: com.azure.storage.blob.nio.AzurePath.getFileName()
  id: getFileName()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: getFileName()
  nameWithType: AzurePath.getFileName()
  fullName: com.azure.storage.blob.nio.AzurePath.getFileName()
  overload: com.azure.storage.blob.nio.AzurePath.getFileName*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns the name of the file or directory denoted by this path as a Path object. The file name is the farthest element from the root in the directory hierarchy.
  syntax:
    content: public Path getFileName()
    return:
      type: java.nio.file.Path
      description: a path representing the name of the file or directory, or null if this path has zero elements
- uid: com.azure.storage.blob.nio.AzurePath.getFileSystem()
  id: getFileSystem()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: getFileSystem()
  nameWithType: AzurePath.getFileSystem()
  fullName: com.azure.storage.blob.nio.AzurePath.getFileSystem()
  overload: com.azure.storage.blob.nio.AzurePath.getFileSystem*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns the file system that created this object.
  syntax:
    content: public FileSystem getFileSystem()
    return:
      type: java.nio.file.FileSystem
      description: the file system that created this object
- uid: com.azure.storage.blob.nio.AzurePath.getName(int)
  id: getName(int)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: getName(int index)
  nameWithType: AzurePath.getName(int index)
  fullName: com.azure.storage.blob.nio.AzurePath.getName(int index)
  overload: com.azure.storage.blob.nio.AzurePath.getName*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns a name element of this path as a Path object.


    The index parameter is the index of the name element to return. The element that is closest to the root in the directory hierarchy has index 0. The element that is farthest from the root has index `count-1`.
  syntax:
    content: public Path getName(int index)
    parameters:
    - id: index
      type: int
      description: the index of the element
    return:
      type: java.nio.file.Path
      description: the name element
- uid: com.azure.storage.blob.nio.AzurePath.getNameCount()
  id: getNameCount()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: getNameCount()
  nameWithType: AzurePath.getNameCount()
  fullName: com.azure.storage.blob.nio.AzurePath.getNameCount()
  overload: com.azure.storage.blob.nio.AzurePath.getNameCount*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns the number of name elements in the path.
  syntax:
    content: public int getNameCount()
    return:
      type: int
      description: the number of elements in the path, or 0 if this path only represents a root component
- uid: com.azure.storage.blob.nio.AzurePath.getParent()
  id: getParent()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: getParent()
  nameWithType: AzurePath.getParent()
  fullName: com.azure.storage.blob.nio.AzurePath.getParent()
  overload: com.azure.storage.blob.nio.AzurePath.getParent*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the parent path, or null if this path does not have a parent.


    The parent of this path object consists of this path's root component, if any, and each element in the path except for the farthest from the root in the directory hierarchy. This method does not access the file system; the path or its parent may not exist. Furthermore, this method does not eliminate special names such as "." and ".." that may be used in some implementations. On UNIX for example, the parent of "/a/b/c" is "/a/b", and the parent of "x/y/." is "x/y". This method may be used with the normalize method, to eliminate redundant names, for cases where shell-like navigation is required.


    If this path has one or more elements, and no root component, then this method is equivalent to evaluating the expression: `subpath(0, getNameCount()-1);`
  syntax:
    content: public Path getParent()
    return:
      type: java.nio.file.Path
      description: a path representing the path's parent
- uid: com.azure.storage.blob.nio.AzurePath.getRoot()
  id: getRoot()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: getRoot()
  nameWithType: AzurePath.getRoot()
  fullName: com.azure.storage.blob.nio.AzurePath.getRoot()
  overload: com.azure.storage.blob.nio.AzurePath.getRoot*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the root component of this path as a Path object, or null if this path does not have a root component.


    The root component of this path also identifies the Azure Storage Container in which the file is stored. This method will not validate that the root component corresponds to an actual file store/container in this file system. It will simply return the root component of the path if one is present and syntactically valid.
  syntax:
    content: public Path getRoot()
    return:
      type: java.nio.file.Path
      description: a path representing the root component of this path, or null
- uid: com.azure.storage.blob.nio.AzurePath.hashCode()
  id: hashCode()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: hashCode()
  nameWithType: AzurePath.hashCode()
  fullName: com.azure.storage.blob.nio.AzurePath.hashCode()
  overload: com.azure.storage.blob.nio.AzurePath.hashCode*
  type: Method
  package: com.azure.storage.blob.nio
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.storage.blob.nio.AzurePath.isAbsolute()
  id: isAbsolute()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: isAbsolute()
  nameWithType: AzurePath.isAbsolute()
  fullName: com.azure.storage.blob.nio.AzurePath.isAbsolute()
  overload: com.azure.storage.blob.nio.AzurePath.isAbsolute*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Tells whether or not this path is absolute.


    An absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file. A path is considered absolute in this file system if it contains a root component.
  syntax:
    content: public boolean isAbsolute()
    return:
      type: boolean
      description: whether the path is absolute
- uid: com.azure.storage.blob.nio.AzurePath.iterator()
  id: iterator()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: iterator()
  nameWithType: AzurePath.iterator()
  fullName: com.azure.storage.blob.nio.AzurePath.iterator()
  overload: com.azure.storage.blob.nio.AzurePath.iterator*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns an iterator over the name elements of this path.


    The first element returned by the iterator represents the name element that is closest to the root in the directory hierarchy, the second element is the next closest, and so on. The last element returned is the name of the file or directory denoted by this path. The root component, if present, is not returned by the iterator.
  syntax:
    content: public Iterator<Path> iterator()
    return:
      type: java.util.Iterator<java.nio.file.Path>
      description: an iterator over the name elements of this path.
- uid: com.azure.storage.blob.nio.AzurePath.normalize()
  id: normalize()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: normalize()
  nameWithType: AzurePath.normalize()
  fullName: com.azure.storage.blob.nio.AzurePath.normalize()
  overload: com.azure.storage.blob.nio.AzurePath.normalize*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns a path that is this path with redundant name elements eliminated.


    It derives from this path, a path that does not contain redundant name elements. The "." and ".." are special names used to indicate the current directory and parent directory. All occurrences of "." are considered redundant. If a ".." is preceded by a non-".." name then both names are considered redundant (the process to identify such names is repeated until is it no longer applicable).


    This method does not access the file system; the path may not locate a file that exists. Eliminating ".." and a preceding name from a path may result in the path that locates a different file than the original path
  syntax:
    content: public Path normalize()
    return:
      type: java.nio.file.Path
      description: >-
        the resulting path or this path if it does not contain redundant name elements; an empty path is returned
         if this path does have a root component and all name elements are redundant
- uid: com.azure.storage.blob.nio.AzurePath.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)
  id: register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: register(WatchService watchService, WatchEvent.Kind<?>[] kinds)
  nameWithType: AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds)
  fullName: com.azure.storage.blob.nio.AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds)
  overload: com.azure.storage.blob.nio.AzurePath.register*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public WatchKey register(WatchService watchService, WatchEvent.Kind<?>[] kinds)
    parameters:
    - id: watchService
      type: java.nio.file.WatchService
      description: watchService
    - id: kinds
      type: java.nio.file.WatchEvent.Kind<?>[]
      description: kinds
    return:
      type: java.nio.file.WatchKey
      description: the watch key
  exceptions:
  - type: java.io.IOException
    description: operation not suported.
- uid: com.azure.storage.blob.nio.AzurePath.register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)
  id: register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)
  nameWithType: AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)
  fullName: com.azure.storage.blob.nio.AzurePath.register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)
  overload: com.azure.storage.blob.nio.AzurePath.register*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public WatchKey register(WatchService watchService, WatchEvent.Kind<?>[] kinds, WatchEvent.Modifier[] modifiers)
    parameters:
    - id: watchService
      type: java.nio.file.WatchService
      description: watchService
    - id: kinds
      type: java.nio.file.WatchEvent.Kind<?>[]
      description: kinds
    - id: modifiers
      type: java.nio.file.WatchEvent.Modifier[]
      description: modifiers
    return:
      type: java.nio.file.WatchKey
      description: the watch key
  exceptions:
  - type: java.io.IOException
    description: operation not suported.
- uid: com.azure.storage.blob.nio.AzurePath.relativize(java.nio.file.Path)
  id: relativize(java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: relativize(Path path)
  nameWithType: AzurePath.relativize(Path path)
  fullName: com.azure.storage.blob.nio.AzurePath.relativize(Path path)
  overload: com.azure.storage.blob.nio.AzurePath.relativize*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Constructs a relative path between this path and a given path.


    Relativization is the inverse of resolution. This method attempts to construct a relative path that when resolved against this path, yields a path that locates the same file as the given path.


    A relative path cannot be constructed if only one of the paths have a root component. If both paths have a root component, it is still possible to relativize one against the other. If this path and the given path are equal then an empty path is returned.


    For any two normalized paths p and q, where q does not have a root component, `p.relativize(p.resolve(q)).equals(q)`
  syntax:
    content: public Path relativize(Path path)
    parameters:
    - id: path
      type: java.nio.file.Path
      description: the path to relativize against this path
    return:
      type: java.nio.file.Path
      description: the resulting relative path, or an empty path if both paths are equal
- uid: com.azure.storage.blob.nio.AzurePath.resolve(java.lang.String)
  id: resolve(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: resolve(String path)
  nameWithType: AzurePath.resolve(String path)
  fullName: com.azure.storage.blob.nio.AzurePath.resolve(String path)
  overload: com.azure.storage.blob.nio.AzurePath.resolve*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the <xref uid="com.azure.storage.blob.nio.AzurePath.resolve(java.nio.file.Path)" data-throw-if-not-resolved="false">resolve</xref> method.
  syntax:
    content: public Path resolve(String path)
    parameters:
    - id: path
      type: java.lang.String
      description: the path string to resolve against this path
    return:
      type: java.nio.file.Path
      description: the resulting path
- uid: com.azure.storage.blob.nio.AzurePath.resolve(java.nio.file.Path)
  id: resolve(java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: resolve(Path path)
  nameWithType: AzurePath.resolve(Path path)
  fullName: com.azure.storage.blob.nio.AzurePath.resolve(Path path)
  overload: com.azure.storage.blob.nio.AzurePath.resolve*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Resolve the given path against this path.


    If the other parameter is an absolute path then this method trivially returns other. If other is an empty path then this method trivially returns this path. Otherwise this method considers this path to be a directory and resolves the given path against this path. In the simplest case, the given path does not have a root component, in which case this method joins the given path to this path and returns a resulting path that ends with the given path. Where the given path has a root component then resolution is highly implementation dependent and therefore unspecified.
  syntax:
    content: public Path resolve(Path path)
    parameters:
    - id: path
      type: java.nio.file.Path
      description: the path to resolve against this path
    return:
      type: java.nio.file.Path
      description: the resulting path
- uid: com.azure.storage.blob.nio.AzurePath.resolveSibling(java.lang.String)
  id: resolveSibling(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: resolveSibling(String path)
  nameWithType: AzurePath.resolveSibling(String path)
  fullName: com.azure.storage.blob.nio.AzurePath.resolveSibling(String path)
  overload: com.azure.storage.blob.nio.AzurePath.resolveSibling*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Converts a given path string to a Path and resolves it against this path's parent path in exactly the manner specified by the resolveSibling method.
  syntax:
    content: public Path resolveSibling(String path)
    parameters:
    - id: path
      type: java.lang.String
      description: the path string to resolve against this path's parent
    return:
      type: java.nio.file.Path
      description: the resulting path
- uid: com.azure.storage.blob.nio.AzurePath.resolveSibling(java.nio.file.Path)
  id: resolveSibling(java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: resolveSibling(Path path)
  nameWithType: AzurePath.resolveSibling(Path path)
  fullName: com.azure.storage.blob.nio.AzurePath.resolveSibling(Path path)
  overload: com.azure.storage.blob.nio.AzurePath.resolveSibling*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Resolves the given path against this path's parent path. This is useful where a file name needs to be replaced with another file name. For example, suppose that the name separator is "/" and a path represents "dir1/dir2/foo", then invoking this method with the Path "bar" will result in the Path "dir1/dir2/bar". If this path does not have a parent path, or other is absolute, then this method returns other. If other is an empty path then this method returns this path's parent, or where this path doesn't have a parent, the empty path.
  syntax:
    content: public Path resolveSibling(Path path)
    parameters:
    - id: path
      type: java.nio.file.Path
      description: the path to resolve against this path's parent
    return:
      type: java.nio.file.Path
      description: the resulting path
- uid: com.azure.storage.blob.nio.AzurePath.startsWith(java.lang.String)
  id: startsWith(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: startsWith(String path)
  nameWithType: AzurePath.startsWith(String path)
  fullName: com.azure.storage.blob.nio.AzurePath.startsWith(String path)
  overload: com.azure.storage.blob.nio.AzurePath.startsWith*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the startsWith(Path) method.
  syntax:
    content: public boolean startsWith(String path)
    parameters:
    - id: path
      type: java.lang.String
      description: the given path string
    return:
      type: boolean
      description: true if this path starts with the given path; otherwise false
- uid: com.azure.storage.blob.nio.AzurePath.startsWith(java.nio.file.Path)
  id: startsWith(java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: startsWith(Path path)
  nameWithType: AzurePath.startsWith(Path path)
  fullName: com.azure.storage.blob.nio.AzurePath.startsWith(Path path)
  overload: com.azure.storage.blob.nio.AzurePath.startsWith*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Tests if this path starts with the given path.


    This path starts with the given path if this path's root component starts with the root component of the given path, and this path starts with the same name elements as the given path. If the given path has more name elements than this path then false is returned.


    If this path does not have a root component and the given path has a root component then this path does not start with the given path.


    If the given path is associated with a different FileSystem to this path then false is returned.


    In this implementation, a root component starts with another root component if the two root components are equivalent strings. In other words, if the files are stored in the same container.
  syntax:
    content: public boolean startsWith(Path path)
    parameters:
    - id: path
      type: java.nio.file.Path
      description: the given path
    return:
      type: boolean
      description: true if this path starts with the given path; otherwise false
- uid: com.azure.storage.blob.nio.AzurePath.subpath(int,int)
  id: subpath(int,int)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: subpath(int begin, int end)
  nameWithType: AzurePath.subpath(int begin, int end)
  fullName: com.azure.storage.blob.nio.AzurePath.subpath(int begin, int end)
  overload: com.azure.storage.blob.nio.AzurePath.subpath*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns a relative Path that is a subsequence of the name elements of this path.


    The beginIndex and endIndex parameters specify the subsequence of name elements. The name that is closest to the root in the directory hierarchy has index 0. The name that is farthest from the root has index `count-1`. The returned Path object has the name elements that begin at beginIndex and extend to the element at index `endIndex-1`.
  syntax:
    content: public Path subpath(int begin, int end)
    parameters:
    - id: begin
      type: int
      description: the index of the first element, inclusive
    - id: end
      type: int
      description: the index of the last element, exclusive
    return:
      type: java.nio.file.Path
      description: a new Path object that is a subsequence of the name elements in this Path
- uid: com.azure.storage.blob.nio.AzurePath.toAbsolutePath()
  id: toAbsolutePath()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: toAbsolutePath()
  nameWithType: AzurePath.toAbsolutePath()
  fullName: com.azure.storage.blob.nio.AzurePath.toAbsolutePath()
  overload: com.azure.storage.blob.nio.AzurePath.toAbsolutePath*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns a Path object representing the absolute path of this path.


    If this path is already absolute then this method simply returns this path. Otherwise, this method resolves the path against the default directory.
  syntax:
    content: public Path toAbsolutePath()
    return:
      type: java.nio.file.Path
      description: a Path object representing the absolute path
- uid: com.azure.storage.blob.nio.AzurePath.toFile()
  id: toFile()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: toFile()
  nameWithType: AzurePath.toFile()
  fullName: com.azure.storage.blob.nio.AzurePath.toFile()
  overload: com.azure.storage.blob.nio.AzurePath.toFile*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public File toFile()
    return:
      type: java.io.File
      description: the file
- uid: com.azure.storage.blob.nio.AzurePath.toRealPath(java.nio.file.LinkOption...)
  id: toRealPath(java.nio.file.LinkOption...)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: toRealPath(LinkOption[] linkOptions)
  nameWithType: AzurePath.toRealPath(LinkOption[] linkOptions)
  fullName: com.azure.storage.blob.nio.AzurePath.toRealPath(LinkOption[] linkOptions)
  overload: com.azure.storage.blob.nio.AzurePath.toRealPath*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Unsupported.
  syntax:
    content: public Path toRealPath(LinkOption[] linkOptions)
    parameters:
    - id: linkOptions
      type: java.nio.file.LinkOption[]
      description: options
    return:
      type: java.nio.file.Path
      description: the real path
  exceptions:
  - type: java.io.IOException
    description: operation not suported.
- uid: com.azure.storage.blob.nio.AzurePath.toString()
  id: toString()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: toString()
  nameWithType: AzurePath.toString()
  fullName: com.azure.storage.blob.nio.AzurePath.toString()
  overload: com.azure.storage.blob.nio.AzurePath.toString*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the string representation of this path.


    If this path was created by converting a path string using the getPath method then the path string returned by this method may differ from the original String used to create the path.


    The returned path string uses the default name separator to separate names in the path.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
      description: the string representation of this path
- uid: com.azure.storage.blob.nio.AzurePath.toUri()
  id: toUri()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzurePath
  langs:
  - java
  name: toUri()
  nameWithType: AzurePath.toUri()
  fullName: com.azure.storage.blob.nio.AzurePath.toUri()
  overload: com.azure.storage.blob.nio.AzurePath.toUri*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns a URI to represent this path.


    This method constructs an absolute URI with a scheme equal to the URI scheme that identifies the provider.


    No authority component is defined for the `URI` returned by this method. This implementation offers the same equivalence guarantee as the default provider.
  syntax:
    content: public URI toUri()
    return:
      type: java.net.URI
      description: the URI representing this path
references:
- uid: com.azure.storage.blob.nio.AzureFileSystem
  name: AzureFileSystem
  nameWithType: AzureFileSystem
  fullName: com.azure.storage.blob.nio.AzureFileSystem
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: com.azure.storage.blob.nio.AzurePath.AzurePath*
  name: AzurePath
  nameWithType: AzurePath.AzurePath
  fullName: com.azure.storage.blob.nio.AzurePath.AzurePath
  package: com.azure.storage.blob.nio
- uid: java.nio.file.FileSystem
  spec.java:
  - uid: java.nio.file.FileSystem
    name: FileSystem
    fullName: java.nio.file.FileSystem
- uid: com.azure.storage.blob.nio.AzurePath.getFileSystem*
  name: getFileSystem
  nameWithType: AzurePath.getFileSystem
  fullName: com.azure.storage.blob.nio.AzurePath.getFileSystem
  package: com.azure.storage.blob.nio
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.nio.AzurePath.isAbsolute*
  name: isAbsolute
  nameWithType: AzurePath.isAbsolute
  fullName: com.azure.storage.blob.nio.AzurePath.isAbsolute
  package: com.azure.storage.blob.nio
- uid: java.nio.file.Path
  spec.java:
  - uid: java.nio.file.Path
    name: Path
    fullName: java.nio.file.Path
- uid: com.azure.storage.blob.nio.AzurePath.getRoot*
  name: getRoot
  nameWithType: AzurePath.getRoot
  fullName: com.azure.storage.blob.nio.AzurePath.getRoot
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.getFileName*
  name: getFileName
  nameWithType: AzurePath.getFileName
  fullName: com.azure.storage.blob.nio.AzurePath.getFileName
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.getParent*
  name: getParent
  nameWithType: AzurePath.getParent
  fullName: com.azure.storage.blob.nio.AzurePath.getParent
  package: com.azure.storage.blob.nio
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.nio.AzurePath.getNameCount*
  name: getNameCount
  nameWithType: AzurePath.getNameCount
  fullName: com.azure.storage.blob.nio.AzurePath.getNameCount
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.getName*
  name: getName
  nameWithType: AzurePath.getName
  fullName: com.azure.storage.blob.nio.AzurePath.getName
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.subpath*
  name: subpath
  nameWithType: AzurePath.subpath
  fullName: com.azure.storage.blob.nio.AzurePath.subpath
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.startsWith*
  name: startsWith
  nameWithType: AzurePath.startsWith
  fullName: com.azure.storage.blob.nio.AzurePath.startsWith
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.endsWith*
  name: endsWith
  nameWithType: AzurePath.endsWith
  fullName: com.azure.storage.blob.nio.AzurePath.endsWith
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.normalize*
  name: normalize
  nameWithType: AzurePath.normalize
  fullName: com.azure.storage.blob.nio.AzurePath.normalize
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.resolve*
  name: resolve
  nameWithType: AzurePath.resolve
  fullName: com.azure.storage.blob.nio.AzurePath.resolve
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.resolveSibling*
  name: resolveSibling
  nameWithType: AzurePath.resolveSibling
  fullName: com.azure.storage.blob.nio.AzurePath.resolveSibling
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.relativize*
  name: relativize
  nameWithType: AzurePath.relativize
  fullName: com.azure.storage.blob.nio.AzurePath.relativize
  package: com.azure.storage.blob.nio
- uid: java.net.URI
  spec.java:
  - uid: java.net.URI
    name: URI
    fullName: java.net.URI
- uid: com.azure.storage.blob.nio.AzurePath.toUri*
  name: toUri
  nameWithType: AzurePath.toUri
  fullName: com.azure.storage.blob.nio.AzurePath.toUri
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.toAbsolutePath*
  name: toAbsolutePath
  nameWithType: AzurePath.toAbsolutePath
  fullName: com.azure.storage.blob.nio.AzurePath.toAbsolutePath
  package: com.azure.storage.blob.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.nio.file.LinkOption[]
  spec.java:
  - uid: java.nio.file.LinkOption
    name: LinkOption
    fullName: java.nio.file.LinkOption
  - name: '[]'
    fullName: '[]'
- uid: com.azure.storage.blob.nio.AzurePath.toRealPath*
  name: toRealPath
  nameWithType: AzurePath.toRealPath
  fullName: com.azure.storage.blob.nio.AzurePath.toRealPath
  package: com.azure.storage.blob.nio
- uid: java.io.File
  spec.java:
  - uid: java.io.File
    name: File
    fullName: java.io.File
- uid: com.azure.storage.blob.nio.AzurePath.toFile*
  name: toFile
  nameWithType: AzurePath.toFile
  fullName: com.azure.storage.blob.nio.AzurePath.toFile
  package: com.azure.storage.blob.nio
- uid: java.nio.file.WatchService
  spec.java:
  - uid: java.nio.file.WatchService
    name: WatchService
    fullName: java.nio.file.WatchService
- uid: java.nio.file.WatchEvent.Kind<?>[]
  spec.java:
  - uid: java.nio.file.WatchEvent.Kind
    name: Kind
    fullName: java.nio.file.WatchEvent.Kind
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: java.nio.file.WatchEvent.Modifier[]
  spec.java:
  - uid: java.nio.file.WatchEvent.Modifier
    name: Modifier
    fullName: java.nio.file.WatchEvent.Modifier
  - name: '[]'
    fullName: '[]'
- uid: java.nio.file.WatchKey
  spec.java:
  - uid: java.nio.file.WatchKey
    name: WatchKey
    fullName: java.nio.file.WatchKey
- uid: com.azure.storage.blob.nio.AzurePath.register*
  name: register
  nameWithType: AzurePath.register
  fullName: com.azure.storage.blob.nio.AzurePath.register
  package: com.azure.storage.blob.nio
- uid: java.util.Iterator<java.nio.file.Path>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.nio.file.Path
    name: Path
    fullName: java.nio.file.Path
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzurePath.iterator*
  name: iterator
  nameWithType: AzurePath.iterator
  fullName: com.azure.storage.blob.nio.AzurePath.iterator
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.compareTo*
  name: compareTo
  nameWithType: AzurePath.compareTo
  fullName: com.azure.storage.blob.nio.AzurePath.compareTo
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.toString*
  name: toString
  nameWithType: AzurePath.toString
  fullName: com.azure.storage.blob.nio.AzurePath.toString
  package: com.azure.storage.blob.nio
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.storage.blob.nio.AzurePath.equals*
  name: equals
  nameWithType: AzurePath.equals
  fullName: com.azure.storage.blob.nio.AzurePath.equals
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzurePath.hashCode*
  name: hashCode
  nameWithType: AzurePath.hashCode
  fullName: com.azure.storage.blob.nio.AzurePath.hashCode
  package: com.azure.storage.blob.nio
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.nio.file.WatchEvent.Kind
  name: WatchEvent.Kind
  nameWithType: WatchEvent.Kind
  fullName: java.nio.file.WatchEvent.Kind
- uid: ?>[]
  name: ?>[]
  nameWithType: ?>[]
  fullName: ?>[]
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
