### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosAsyncConflict
  id: CosmosAsyncConflict
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosAsyncConflict.delete(com.azure.cosmos.models.CosmosConflictRequestOptions)
  - com.azure.cosmos.CosmosAsyncConflict.getId()
  - com.azure.cosmos.CosmosAsyncConflict.read(com.azure.cosmos.models.CosmosConflictRequestOptions)
  langs:
  - java
  name: CosmosAsyncConflict
  nameWithType: CosmosAsyncConflict
  fullName: com.azure.cosmos.CosmosAsyncConflict
  type: Class
  package: com.azure.cosmos
  summary: Read and delete conflicts
  syntax:
    content: public final class CosmosAsyncConflict
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosAsyncConflict.CosmosAsyncConflict(java.lang.String,com.azure.cosmos.CosmosAsyncContainer)
  id: CosmosAsyncConflict(java.lang.String,com.azure.cosmos.CosmosAsyncContainer)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncConflict
  langs:
  - java
  name: CosmosAsyncConflict(String id, CosmosAsyncContainer container)
  nameWithType: CosmosAsyncConflict.CosmosAsyncConflict(String id, CosmosAsyncContainer container)
  fullName: com.azure.cosmos.CosmosAsyncConflict.CosmosAsyncConflict(String id, CosmosAsyncContainer container)
  overload: com.azure.cosmos.CosmosAsyncConflict.CosmosAsyncConflict*
  type: Constructor
  package: com.azure.cosmos
  summary: Constructor
  syntax:
    content: " CosmosAsyncConflict(String id, CosmosAsyncContainer container)"
    parameters:
    - id: id
      type: java.lang.String
      description: the conflict id
    - id: container
      type: com.azure.cosmos.CosmosAsyncContainer
      description: the container
- uid: com.azure.cosmos.CosmosAsyncConflict.delete(com.azure.cosmos.models.CosmosConflictRequestOptions)
  id: delete(com.azure.cosmos.models.CosmosConflictRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncConflict
  langs:
  - java
  name: delete(CosmosConflictRequestOptions options)
  nameWithType: CosmosAsyncConflict.delete(CosmosConflictRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncConflict.delete(CosmosConflictRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncConflict.delete*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads all conflicts in a container.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will contain one or several feed response pages of the read conflicts. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosConflictResponse> delete(CosmosConflictRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosConflictRequestOptions
      description: the feed options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosConflictResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing one or several feed response pages of the
         read conflicts or an error.
- uid: com.azure.cosmos.CosmosAsyncConflict.getId()
  id: getId()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncConflict
  langs:
  - java
  name: getId()
  nameWithType: CosmosAsyncConflict.getId()
  fullName: com.azure.cosmos.CosmosAsyncConflict.getId()
  overload: com.azure.cosmos.CosmosAsyncConflict.getId*
  type: Method
  package: com.azure.cosmos
  summary: Get the id of the <xref uid="com.azure.cosmos.CosmosAsyncConflict" data-throw-if-not-resolved="false">CosmosAsyncConflict</xref>
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: the id of the <xref uid="com.azure.cosmos.CosmosAsyncConflict" data-throw-if-not-resolved="false">CosmosAsyncConflict</xref>
- uid: com.azure.cosmos.CosmosAsyncConflict.read(com.azure.cosmos.models.CosmosConflictRequestOptions)
  id: read(com.azure.cosmos.models.CosmosConflictRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosAsyncConflict
  langs:
  - java
  name: read(CosmosConflictRequestOptions options)
  nameWithType: CosmosAsyncConflict.read(CosmosConflictRequestOptions options)
  fullName: com.azure.cosmos.CosmosAsyncConflict.read(CosmosConflictRequestOptions options)
  overload: com.azure.cosmos.CosmosAsyncConflict.read*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Reads a conflict.


    After subscription the operation will be performed. The <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> upon successful completion will contain a single resource response with the read conflict. In case of failure the <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> will error.
  syntax:
    content: public Mono<CosmosConflictResponse> read(CosmosConflictRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosConflictRequestOptions
      description: the request options.
    return:
      type: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosConflictResponse>
      description: >-
        a <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the single resource response with the read
         conflict or an error.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.CosmosAsyncContainer
  name: CosmosAsyncContainer
  nameWithType: CosmosAsyncContainer
  fullName: com.azure.cosmos.CosmosAsyncContainer
- uid: com.azure.cosmos.CosmosAsyncConflict.CosmosAsyncConflict*
  name: CosmosAsyncConflict
  nameWithType: CosmosAsyncConflict.CosmosAsyncConflict
  fullName: com.azure.cosmos.CosmosAsyncConflict.CosmosAsyncConflict
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncConflict.getId*
  name: getId
  nameWithType: CosmosAsyncConflict.getId
  fullName: com.azure.cosmos.CosmosAsyncConflict.getId
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosConflictRequestOptions
  name: CosmosConflictRequestOptions
  nameWithType: CosmosConflictRequestOptions
  fullName: com.azure.cosmos.models.CosmosConflictRequestOptions
- uid: reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosConflictResponse>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosConflictResponse
    name: CosmosConflictResponse
    fullName: com.azure.cosmos.models.CosmosConflictResponse
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosAsyncConflict.read*
  name: read
  nameWithType: CosmosAsyncConflict.read
  fullName: com.azure.cosmos.CosmosAsyncConflict.read
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosAsyncConflict.delete*
  name: delete
  nameWithType: CosmosAsyncConflict.delete
  fullName: com.azure.cosmos.CosmosAsyncConflict.delete
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.models.CosmosConflictResponse
  name: CosmosConflictResponse
  nameWithType: CosmosConflictResponse
  fullName: com.azure.cosmos.models.CosmosConflictResponse
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
