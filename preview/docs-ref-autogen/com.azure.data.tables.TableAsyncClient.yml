### YamlMime:ManagedReference
items:
- uid: com.azure.data.tables.TableAsyncClient
  id: TableAsyncClient
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables
  children:
  - com.azure.data.tables.TableAsyncClient.create()
  - com.azure.data.tables.TableAsyncClient.createEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.createWithResponse()
  - com.azure.data.tables.TableAsyncClient.delete()
  - com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.deleteWithResponse()
  - com.azure.data.tables.TableAsyncClient.getAccountName()
  - com.azure.data.tables.TableAsyncClient.getApiVersion()
  - com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.getEntityWithResponse(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.getTableName()
  - com.azure.data.tables.TableAsyncClient.getTableUrl()
  - com.azure.data.tables.TableAsyncClient.listEntities()
  - com.azure.data.tables.TableAsyncClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  - com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,boolean,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,boolean,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  langs:
  - java
  name: TableAsyncClient
  nameWithType: TableAsyncClient
  fullName: com.azure.data.tables.TableAsyncClient
  type: Class
  package: com.azure.data.tables
  summary: class for the table async client
  syntax:
    content: public class TableAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.data.tables.TableAsyncClient.TableAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,java.lang.String,com.azure.data.tables.TablesServiceVersion,com.azure.core.util.serializer.SerializerAdapter)
  id: TableAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,java.lang.String,com.azure.data.tables.TablesServiceVersion,com.azure.core.util.serializer.SerializerAdapter)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: TableAsyncClient(String tableName, HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  nameWithType: TableAsyncClient.TableAsyncClient(String tableName, HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  fullName: com.azure.data.tables.TableAsyncClient.TableAsyncClient(String tableName, HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  overload: com.azure.data.tables.TableAsyncClient.TableAsyncClient*
  type: Constructor
  package: com.azure.data.tables
  syntax:
    content: " TableAsyncClient(String tableName, HttpPipeline pipeline, String url, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)"
    parameters:
    - id: tableName
      type: java.lang.String
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
    - id: url
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.data.tables.TablesServiceVersion
    - id: serializerAdapter
      type: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableAsyncClient.TableAsyncClient(java.lang.String,com.azure.data.tables.implementation.AzureTableImpl)
  id: TableAsyncClient(java.lang.String,com.azure.data.tables.implementation.AzureTableImpl)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: TableAsyncClient(String tableName, AzureTableImpl implementation)
  nameWithType: TableAsyncClient.TableAsyncClient(String tableName, AzureTableImpl implementation)
  fullName: com.azure.data.tables.TableAsyncClient.TableAsyncClient(String tableName, AzureTableImpl implementation)
  overload: com.azure.data.tables.TableAsyncClient.TableAsyncClient*
  type: Constructor
  package: com.azure.data.tables
  syntax:
    content: " TableAsyncClient(String tableName, AzureTableImpl implementation)"
    parameters:
    - id: tableName
      type: java.lang.String
    - id: implementation
      type: com.azure.data.tables.implementation.AzureTableImpl
- uid: com.azure.data.tables.TableAsyncClient.create()
  id: create()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: create()
  nameWithType: TableAsyncClient.create()
  fullName: com.azure.data.tables.TableAsyncClient.create()
  overload: com.azure.data.tables.TableAsyncClient.create*
  type: Method
  package: com.azure.data.tables
  summary: creates new table with the name of this client
  syntax:
    content: public Mono<Void> create()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.createEntity(com.azure.data.tables.models.TableEntity)
  id: createEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createEntity(TableEntity entity)
  nameWithType: TableAsyncClient.createEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.createEntity(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.createEntity*
  type: Method
  package: com.azure.data.tables
  summary: insert a TableEntity with the given properties and return that TableEntity. Property map must include rowKey and partitionKey
  syntax:
    content: public Mono<Void> createEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: the entity
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: the created TableEntity
- uid: com.azure.data.tables.TableAsyncClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity)
  id: createEntityWithResponse(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createEntityWithResponse(TableEntity entity)
  nameWithType: TableAsyncClient.createEntityWithResponse(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.createEntityWithResponse(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.createEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: insert a TableEntity with the given properties and return that TableEntity. Property map must include rowKey and partitionKey
  syntax:
    content: public Mono<Response<Void>> createEntityWithResponse(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: the entity
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a mono of the response with the TableEntity
- uid: com.azure.data.tables.TableAsyncClient.createWithResponse()
  id: createWithResponse()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createWithResponse()
  nameWithType: TableAsyncClient.createWithResponse()
  fullName: com.azure.data.tables.TableAsyncClient.createWithResponse()
  overload: com.azure.data.tables.TableAsyncClient.createWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: creates a new table with the name of this client
  syntax:
    content: public Mono<Response<Void>> createWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: TableAsyncClient.delete()
  fullName: com.azure.data.tables.TableAsyncClient.delete()
  overload: com.azure.data.tables.TableAsyncClient.delete*
  type: Method
  package: com.azure.data.tables
  summary: deletes the table with the name of this client
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String)
  id: deleteEntity(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey)
  nameWithType: TableAsyncClient.deleteEntity(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntity(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableAsyncClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: deletes the given entity
  syntax:
    content: public Mono<Void> deleteEntity(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: the partition key
    - id: rowKey
      type: java.lang.String
      description: the row key
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  id: deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey, String eTag)
  nameWithType: TableAsyncClient.deleteEntity(String partitionKey, String rowKey, String eTag)
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntity(String partitionKey, String rowKey, String eTag)
  overload: com.azure.data.tables.TableAsyncClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: deletes the given entity
  syntax:
    content: public Mono<Void> deleteEntity(String partitionKey, String rowKey, String eTag)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: the partition key
    - id: rowKey
      type: java.lang.String
      description: the row key
    - id: eTag
      type: java.lang.String
      description: the eTag of the entity, the delete will only occur if this matches the entity in the service
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  id: deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
  nameWithType: TableAsyncClient.deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
  overload: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: deletes the given entity
  syntax:
    content: public Mono<Response<Void>> deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: the partition key
    - id: rowKey
      type: java.lang.String
      description: the row key
    - id: eTag
      type: java.lang.String
      description: the eTag of the entity, the delete will only occur if this matches the entity in the service
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response
- uid: com.azure.data.tables.TableAsyncClient.deleteWithResponse()
  id: deleteWithResponse()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteWithResponse()
  nameWithType: TableAsyncClient.deleteWithResponse()
  fullName: com.azure.data.tables.TableAsyncClient.deleteWithResponse()
  overload: com.azure.data.tables.TableAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: deletes the table with the name of this client
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: TableAsyncClient.getAccountName()
  fullName: com.azure.data.tables.TableAsyncClient.getAccountName()
  overload: com.azure.data.tables.TableAsyncClient.getAccountName*
  type: Method
  package: com.azure.data.tables
  summary: returns the account for this table
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: returns the account name
- uid: com.azure.data.tables.TableAsyncClient.getApiVersion()
  id: getApiVersion()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getApiVersion()
  nameWithType: TableAsyncClient.getApiVersion()
  fullName: com.azure.data.tables.TableAsyncClient.getApiVersion()
  overload: com.azure.data.tables.TableAsyncClient.getApiVersion*
  type: Method
  package: com.azure.data.tables
  summary: returns the version
  syntax:
    content: public TablesServiceVersion getApiVersion()
    return:
      type: com.azure.data.tables.TablesServiceVersion
      description: the version
- uid: com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String)
  id: getEntity(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getEntity(String partitionKey, String rowKey)
  nameWithType: TableAsyncClient.getEntity(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableAsyncClient.getEntity(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableAsyncClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: gets the entity which fits the given criteria
  syntax:
    content: public Mono<TableEntity> getEntity(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: the partition key of the entity
    - id: rowKey
      type: java.lang.String
      description: the row key of the entity
    return:
      type: reactor.core.publisher.Mono<com.azure.data.tables.models.TableEntity>
      description: a mono of the table entity
- uid: com.azure.data.tables.TableAsyncClient.getEntityWithResponse(java.lang.String,java.lang.String)
  id: getEntityWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getEntityWithResponse(String partitionKey, String rowKey)
  nameWithType: TableAsyncClient.getEntityWithResponse(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableAsyncClient.getEntityWithResponse(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableAsyncClient.getEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: gets the entity which fits the given criteria
  syntax:
    content: public Mono<Response<TableEntity>> getEntityWithResponse(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: the partition key of the entity
    - id: rowKey
      type: java.lang.String
      description: the row key of the entity
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.tables.models.TableEntity>>
      description: a mono of the response with the table entity
- uid: com.azure.data.tables.TableAsyncClient.getTableName()
  id: getTableName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getTableName()
  nameWithType: TableAsyncClient.getTableName()
  fullName: com.azure.data.tables.TableAsyncClient.getTableName()
  overload: com.azure.data.tables.TableAsyncClient.getTableName*
  type: Method
  package: com.azure.data.tables
  summary: returns the table name associated with the client
  syntax:
    content: public String getTableName()
    return:
      type: java.lang.String
      description: table name
- uid: com.azure.data.tables.TableAsyncClient.getTableUrl()
  id: getTableUrl()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getTableUrl()
  nameWithType: TableAsyncClient.getTableUrl()
  fullName: com.azure.data.tables.TableAsyncClient.getTableUrl()
  overload: com.azure.data.tables.TableAsyncClient.getTableUrl*
  type: Method
  package: com.azure.data.tables
  summary: returns Url of this table
  syntax:
    content: public String getTableUrl()
    return:
      type: java.lang.String
      description: Url
- uid: com.azure.data.tables.TableAsyncClient.listEntities()
  id: listEntities()
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: listEntities()
  nameWithType: TableAsyncClient.listEntities()
  fullName: com.azure.data.tables.TableAsyncClient.listEntities()
  overload: com.azure.data.tables.TableAsyncClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Queries and returns all entities in the given table
  syntax:
    content: public PagedFlux<TableEntity> listEntities()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableEntity>
      description: a paged flux of all the entities in the table
- uid: com.azure.data.tables.TableAsyncClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  id: listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: listEntities(ListEntitiesOptions options)
  nameWithType: TableAsyncClient.listEntities(ListEntitiesOptions options)
  fullName: com.azure.data.tables.TableAsyncClient.listEntities(ListEntitiesOptions options)
  overload: com.azure.data.tables.TableAsyncClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Queries and returns entities in the given table using the odata query options
  syntax:
    content: public PagedFlux<TableEntity> listEntities(ListEntitiesOptions options)
    parameters:
    - id: options
      type: com.azure.data.tables.models.ListEntitiesOptions
      description: the odata query object
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableEntity>
      description: a paged flux of all the entities which fit this criteria
- uid: com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity)
  id: updateEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntity(TableEntity entity)
  nameWithType: TableAsyncClient.updateEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: if UpdateMode is MERGE, merges or fails if the entity doesn't exist. If UpdateMode is REPLACE replaces or fails if the entity doesn't exist
  syntax:
    content: public Mono<Void> updateEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: the entity to update
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,boolean,com.azure.data.tables.models.UpdateMode)
  id: updateEntity(com.azure.data.tables.models.TableEntity,boolean,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntity(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
  nameWithType: TableAsyncClient.updateEntity(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: if UpdateMode is MERGE, merges or fails if the entity doesn't exist. If UpdateMode is REPLACE replaces or fails if the entity doesn't exist
  syntax:
    content: public Mono<Void> updateEntity(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: the entity to update
    - id: ifUnchanged
      type: boolean
      description: if the eTag of the entity must match the entity in the service or not
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: which type of update to execute
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntity(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableAsyncClient.updateEntity(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: updates the entity
  syntax:
    content: public Mono<Void> updateEntity(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: the entity to update
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: which type of mode to execute
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,boolean,com.azure.data.tables.models.UpdateMode)
  id: updateEntityWithResponse(com.azure.data.tables.models.TableEntity,boolean,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntityWithResponse(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
  nameWithType: TableAsyncClient.updateEntityWithResponse(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: if UpdateMode is MERGE, merges or fails if the entity doesn't exist. If UpdateMode is REPLACE replaces or fails if the entity doesn't exist
  syntax:
    content: public Mono<Response<Void>> updateEntityWithResponse(TableEntity entity, boolean ifUnchanged, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: the entity to update
    - id: ifUnchanged
      type: boolean
      description: if the eTag of the entity must match the entity in the service or not
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: which type of update to execute
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response
- uid: com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity)
  id: upsertEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: upsertEntity(TableEntity entity)
  nameWithType: TableAsyncClient.upsertEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntity(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: based on Mode it either inserts or merges if exists or inserts or merges if exists
  syntax:
    content: public Mono<Void> upsertEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: entity to upsert
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: upsertEntity(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableAsyncClient.upsertEntity(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntity(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: based on Mode it either inserts or merges if exists or inserts or merges if exists
  syntax:
    content: public Mono<Void> upsertEntity(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: entity to upsert
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: type of upsert
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: void
- uid: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.1
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableAsyncClient.upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: based on Mode it either inserts or merges if exists or inserts or merges if exists
  syntax:
    content: public Mono<Response<Void>> upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: entity to upsert
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: type of upsert
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.data.tables.implementation.AzureTableImpl
  name: AzureTableImpl
  nameWithType: AzureTableImpl
  fullName: com.azure.data.tables.implementation.AzureTableImpl
- uid: com.azure.data.tables.TableAsyncClient.TableAsyncClient*
  name: TableAsyncClient
  nameWithType: TableAsyncClient.TableAsyncClient
  fullName: com.azure.data.tables.TableAsyncClient.TableAsyncClient
  package: com.azure.data.tables
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.data.tables.TablesServiceVersion
  name: TablesServiceVersion
  nameWithType: TablesServiceVersion
  fullName: com.azure.data.tables.TablesServiceVersion
- uid: com.azure.core.util.serializer.SerializerAdapter
  spec.java:
  - uid: com.azure.core.util.serializer.SerializerAdapter
    name: SerializerAdapter
    fullName: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableAsyncClient.getTableName*
  name: getTableName
  nameWithType: TableAsyncClient.getTableName
  fullName: com.azure.data.tables.TableAsyncClient.getTableName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: TableAsyncClient.getAccountName
  fullName: com.azure.data.tables.TableAsyncClient.getAccountName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.getTableUrl*
  name: getTableUrl
  nameWithType: TableAsyncClient.getTableUrl
  fullName: com.azure.data.tables.TableAsyncClient.getTableUrl
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.getApiVersion*
  name: getApiVersion
  nameWithType: TableAsyncClient.getApiVersion
  fullName: com.azure.data.tables.TableAsyncClient.getApiVersion
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.create*
  name: create
  nameWithType: TableAsyncClient.create
  fullName: com.azure.data.tables.TableAsyncClient.create
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: TableAsyncClient.createWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.createWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.TableEntity
  name: TableEntity
  nameWithType: TableEntity
  fullName: com.azure.data.tables.models.TableEntity
- uid: com.azure.data.tables.TableAsyncClient.createEntity*
  name: createEntity
  nameWithType: TableAsyncClient.createEntity
  fullName: com.azure.data.tables.TableAsyncClient.createEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.createEntityWithResponse*
  name: createEntityWithResponse
  nameWithType: TableAsyncClient.createEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.createEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.upsertEntity*
  name: upsertEntity
  nameWithType: TableAsyncClient.upsertEntity
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.UpdateMode
  name: UpdateMode
  nameWithType: UpdateMode
  fullName: com.azure.data.tables.models.UpdateMode
- uid: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse*
  name: upsertEntityWithResponse
  nameWithType: TableAsyncClient.upsertEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.updateEntity*
  name: updateEntity
  nameWithType: TableAsyncClient.updateEntity
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity
  package: com.azure.data.tables
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse*
  name: updateEntityWithResponse
  nameWithType: TableAsyncClient.updateEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.delete*
  name: delete
  nameWithType: TableAsyncClient.delete
  fullName: com.azure.data.tables.TableAsyncClient.delete
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: TableAsyncClient.deleteWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.deleteWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.deleteEntity*
  name: deleteEntity
  nameWithType: TableAsyncClient.deleteEntity
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse*
  name: deleteEntityWithResponse
  nameWithType: TableAsyncClient.deleteEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableEntity>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.listEntities*
  name: listEntities
  nameWithType: TableAsyncClient.listEntities
  fullName: com.azure.data.tables.TableAsyncClient.listEntities
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.ListEntitiesOptions
  name: ListEntitiesOptions
  nameWithType: ListEntitiesOptions
  fullName: com.azure.data.tables.models.ListEntitiesOptions
- uid: reactor.core.publisher.Mono<com.azure.data.tables.models.TableEntity>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.getEntity*
  name: getEntity
  nameWithType: TableAsyncClient.getEntity
  fullName: com.azure.data.tables.TableAsyncClient.getEntity
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.tables.models.TableEntity>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.getEntityWithResponse*
  name: getEntityWithResponse
  nameWithType: TableAsyncClient.getEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.getEntityWithResponse
  package: com.azure.data.tables
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
