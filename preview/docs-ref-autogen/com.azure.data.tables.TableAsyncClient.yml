### YamlMime:ManagedReference
items:
- uid: com.azure.data.tables.TableAsyncClient
  id: TableAsyncClient
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables
  children:
  - com.azure.data.tables.TableAsyncClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.data.tables.TableAsyncClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.data.tables.TableAsyncClient.<T>getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  - com.azure.data.tables.TableAsyncClient.<T>listEntities(com.azure.data.tables.models.ListEntitiesOptions,java.lang.Class<T>)
  - com.azure.data.tables.TableAsyncClient.<T>listEntities(java.lang.Class<T>)
  - com.azure.data.tables.TableAsyncClient.create()
  - com.azure.data.tables.TableAsyncClient.createBatch(java.lang.String)
  - com.azure.data.tables.TableAsyncClient.createEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.createWithResponse()
  - com.azure.data.tables.TableAsyncClient.delete()
  - com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.deleteWithResponse()
  - com.azure.data.tables.TableAsyncClient.getAccountName()
  - com.azure.data.tables.TableAsyncClient.getApiVersion()
  - com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.data.tables.TableAsyncClient.getTableName()
  - com.azure.data.tables.TableAsyncClient.getTableUrl()
  - com.azure.data.tables.TableAsyncClient.listEntities()
  - com.azure.data.tables.TableAsyncClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  - com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  - com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  - com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity)
  - com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  - com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  langs:
  - java
  name: TableAsyncClient
  nameWithType: TableAsyncClient
  fullName: com.azure.data.tables.TableAsyncClient
  type: Class
  package: com.azure.data.tables
  summary: Provides an asynchronous service client for accessing a table in the Azure Tables service. The client encapsulates the URL for the table within the Tables service endpoint, the name of the table, and the credentials for accessing the storage or CosmosDB table API account. It provides methods to create and delete the table itself, as well as methods to create, upsert, update, delete, list, and get entities within the table. These methods invoke REST API operations to make the requests and obtain the results that are returned. Instances of this client are obtained by calling the <xref uid="com.azure.data.tables.TableClientBuilder.buildAsyncClient()" data-throw-if-not-resolved="false">TableClientBuilder#buildAsyncClient()</xref> method on a <xref uid="com.azure.data.tables.TableClientBuilder" data-throw-if-not-resolved="false">TableClientBuilder</xref> object.
  syntax:
    content: public final class TableAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.data.tables.TableAsyncClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getEntity(java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: <T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
  nameWithType: TableAsyncClient.<T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
  fullName: com.azure.data.tables.TableAsyncClient.<T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
  overload: com.azure.data.tables.TableAsyncClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Mono<T> <T>getEntity(String partitionKey, String rowKey, Class<T> resultType)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: reactor.core.publisher.Mono<T>
      description: A reactive result containing the entity.
- uid: com.azure.data.tables.TableAsyncClient.<T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getEntity(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: <T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
  nameWithType: TableAsyncClient.<T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
  fullName: com.azure.data.tables.TableAsyncClient.<T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
  overload: com.azure.data.tables.TableAsyncClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Mono<T> <T>getEntity(String partitionKey, String rowKey, String select, Class<T> resultType)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: reactor.core.publisher.Mono<T>
      description: A reactive result containing the entity.
- uid: com.azure.data.tables.TableAsyncClient.<T>getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  id: <T>getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: <T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType)
  nameWithType: TableAsyncClient.<T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType)
  fullName: com.azure.data.tables.TableAsyncClient.<T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType)
  overload: com.azure.data.tables.TableAsyncClient.getEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Mono<Response<T>> <T>getEntityWithResponse(String partitionKey, String rowKey, String select, Class<T> resultType)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<T>>
      description: A reactive result containing the response and entity.
- uid: com.azure.data.tables.TableAsyncClient.<T>listEntities(com.azure.data.tables.models.ListEntitiesOptions,java.lang.Class<T>)
  id: <T>listEntities(com.azure.data.tables.models.ListEntitiesOptions,java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: <T>listEntities(ListEntitiesOptions options, Class<T> resultType)
  nameWithType: TableAsyncClient.<T>listEntities(ListEntitiesOptions options, Class<T> resultType)
  fullName: com.azure.data.tables.TableAsyncClient.<T>listEntities(ListEntitiesOptions options, Class<T> resultType)
  overload: com.azure.data.tables.TableAsyncClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists entities using the parameters in the provided options. If the \`filter\` parameter in the options is set, only entities matching the filter will be returned. If the \`select\` parameter is set, only the properties included in the select parameter will be returned for each entity. If the \`top\` parameter is set, the number of returned entities will be limited to that value.
  syntax:
    content: public PagedFlux<T> <T>listEntities(ListEntitiesOptions options, Class<T> resultType)
    parameters:
    - id: options
      type: com.azure.data.tables.models.ListEntitiesOptions
      description: The `filter`, `select`, and `top` OData query options to apply to this operation.
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A paged reactive result containing matching entities within the table.
- uid: com.azure.data.tables.TableAsyncClient.<T>listEntities(java.lang.Class<T>)
  id: <T>listEntities(java.lang.Class<T>)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: <T>listEntities(Class<T> resultType)
  nameWithType: TableAsyncClient.<T>listEntities(Class<T> resultType)
  fullName: com.azure.data.tables.TableAsyncClient.<T>listEntities(Class<T> resultType)
  overload: com.azure.data.tables.TableAsyncClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists all entities within the table.
  syntax:
    content: public PagedFlux<T> <T>listEntities(Class<T> resultType)
    parameters:
    - id: resultType
      type: java.lang.Class<T>
      description: The type of the result value, which must be a subclass of TableEntity.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A paged reactive result containing all entities within the table.
- uid: com.azure.data.tables.TableAsyncClient.TableAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,java.lang.String,com.azure.data.tables.TablesServiceVersion,com.azure.core.util.serializer.SerializerAdapter)
  id: TableAsyncClient(java.lang.String,com.azure.core.http.HttpPipeline,java.lang.String,com.azure.data.tables.TablesServiceVersion,com.azure.core.util.serializer.SerializerAdapter)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: TableAsyncClient(String tableName, HttpPipeline pipeline, String serviceUrl, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  nameWithType: TableAsyncClient.TableAsyncClient(String tableName, HttpPipeline pipeline, String serviceUrl, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  fullName: com.azure.data.tables.TableAsyncClient.TableAsyncClient(String tableName, HttpPipeline pipeline, String serviceUrl, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)
  overload: com.azure.data.tables.TableAsyncClient.TableAsyncClient*
  type: Constructor
  package: com.azure.data.tables
  syntax:
    content: " TableAsyncClient(String tableName, HttpPipeline pipeline, String serviceUrl, TablesServiceVersion serviceVersion, SerializerAdapter serializerAdapter)"
    parameters:
    - id: tableName
      type: java.lang.String
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
    - id: serviceUrl
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.data.tables.TablesServiceVersion
    - id: serializerAdapter
      type: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableAsyncClient.TableAsyncClient(java.lang.String,com.azure.data.tables.implementation.AzureTableImpl,com.azure.core.util.serializer.SerializerAdapter)
  id: TableAsyncClient(java.lang.String,com.azure.data.tables.implementation.AzureTableImpl,com.azure.core.util.serializer.SerializerAdapter)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: TableAsyncClient(String tableName, AzureTableImpl implementation, SerializerAdapter serializerAdapter)
  nameWithType: TableAsyncClient.TableAsyncClient(String tableName, AzureTableImpl implementation, SerializerAdapter serializerAdapter)
  fullName: com.azure.data.tables.TableAsyncClient.TableAsyncClient(String tableName, AzureTableImpl implementation, SerializerAdapter serializerAdapter)
  overload: com.azure.data.tables.TableAsyncClient.TableAsyncClient*
  type: Constructor
  package: com.azure.data.tables
  syntax:
    content: private TableAsyncClient(String tableName, AzureTableImpl implementation, SerializerAdapter serializerAdapter)
    parameters:
    - id: tableName
      type: java.lang.String
    - id: implementation
      type: com.azure.data.tables.implementation.AzureTableImpl
    - id: serializerAdapter
      type: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableAsyncClient.create()
  id: create()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: create()
  nameWithType: TableAsyncClient.create()
  fullName: com.azure.data.tables.TableAsyncClient.create()
  overload: com.azure.data.tables.TableAsyncClient.create*
  type: Method
  package: com.azure.data.tables
  summary: Creates the table within the Tables service.
  syntax:
    content: public Mono<Void> create()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.createBatch(java.lang.String)
  id: createBatch(java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createBatch(String partitionKey)
  nameWithType: TableAsyncClient.createBatch(String partitionKey)
  fullName: com.azure.data.tables.TableAsyncClient.createBatch(String partitionKey)
  overload: com.azure.data.tables.TableAsyncClient.createBatch*
  type: Method
  package: com.azure.data.tables
  summary: Creates a new <xref uid="com.azure.data.tables.TableAsyncBatch" data-throw-if-not-resolved="false">TableAsyncBatch</xref> object. Batch objects allow you to enqueue multiple create, update, upsert, and/or delete operations on entities that share the same partition key. When the batch is executed, all of the operations will be performed as part of a single transaction. As a result, either all operations in the batch will succeed, or if a failure occurs, all operations in the batch will be rolled back. Each operation in a batch must operate on a distinct row key. Attempting to add multiple operations to a batch that share the same row key will cause an exception to be thrown.
  syntax:
    content: public TableAsyncBatch createBatch(String partitionKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key shared by all operations in the batch.
    return:
      type: com.azure.data.tables.TableAsyncBatch
      description: An object representing the batch, to which operations can be added.
- uid: com.azure.data.tables.TableAsyncClient.createEntity(com.azure.data.tables.models.TableEntity)
  id: createEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createEntity(TableEntity entity)
  nameWithType: TableAsyncClient.createEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.createEntity(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.createEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table.
  syntax:
    content: public Mono<Void> createEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to insert.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.createEntityWithResponse(com.azure.data.tables.models.TableEntity)
  id: createEntityWithResponse(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createEntityWithResponse(TableEntity entity)
  nameWithType: TableAsyncClient.createEntityWithResponse(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.createEntityWithResponse(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.createEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table.
  syntax:
    content: public Mono<Response<Void>> createEntityWithResponse(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to insert.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
- uid: com.azure.data.tables.TableAsyncClient.createWithResponse()
  id: createWithResponse()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: createWithResponse()
  nameWithType: TableAsyncClient.createWithResponse()
  fullName: com.azure.data.tables.TableAsyncClient.createWithResponse()
  overload: com.azure.data.tables.TableAsyncClient.createWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Creates the table within the Tables service.
  syntax:
    content: public Mono<Response<Void>> createWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
- uid: com.azure.data.tables.TableAsyncClient.delete()
  id: delete()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: delete()
  nameWithType: TableAsyncClient.delete()
  fullName: com.azure.data.tables.TableAsyncClient.delete()
  overload: com.azure.data.tables.TableAsyncClient.delete*
  type: Method
  package: com.azure.data.tables
  summary: Deletes the table within the Tables service.
  syntax:
    content: public Mono<Void> delete()
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String)
  id: deleteEntity(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey)
  nameWithType: TableAsyncClient.deleteEntity(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntity(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableAsyncClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public Mono<Void> deleteEntity(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  id: deleteEntity(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteEntity(String partitionKey, String rowKey, String eTag)
  nameWithType: TableAsyncClient.deleteEntity(String partitionKey, String rowKey, String eTag)
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntity(String partitionKey, String rowKey, String eTag)
  overload: com.azure.data.tables.TableAsyncClient.deleteEntity*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public Mono<Void> deleteEntity(String partitionKey, String rowKey, String eTag)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
    - id: eTag
      type: java.lang.String
      description: >-
        The value to compare with the eTag of the entity in the Tables service. If the values do not match,
                     the delete will not occur and an exception will be thrown.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  id: deleteEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
  nameWithType: TableAsyncClient.deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
  overload: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Deletes an entity from the table.
  syntax:
    content: public Mono<Response<Void>> deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The row key of the entity.
    - id: eTag
      type: java.lang.String
      description: >-
        The value to compare with the eTag of the entity in the Tables service. If the values do not match,
                     the delete will not occur and an exception will be thrown.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the response.
- uid: com.azure.data.tables.TableAsyncClient.deleteWithResponse()
  id: deleteWithResponse()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: deleteWithResponse()
  nameWithType: TableAsyncClient.deleteWithResponse()
  fullName: com.azure.data.tables.TableAsyncClient.deleteWithResponse()
  overload: com.azure.data.tables.TableAsyncClient.deleteWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Deletes the table within the Tables service.
  syntax:
    content: public Mono<Response<Void>> deleteWithResponse()
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the response.
- uid: com.azure.data.tables.TableAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: TableAsyncClient.getAccountName()
  fullName: com.azure.data.tables.TableAsyncClient.getAccountName()
  overload: com.azure.data.tables.TableAsyncClient.getAccountName*
  type: Method
  package: com.azure.data.tables
  summary: Gets the name of the account containing the table.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: The name of the account containing the table.
- uid: com.azure.data.tables.TableAsyncClient.getApiVersion()
  id: getApiVersion()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getApiVersion()
  nameWithType: TableAsyncClient.getApiVersion()
  fullName: com.azure.data.tables.TableAsyncClient.getApiVersion()
  overload: com.azure.data.tables.TableAsyncClient.getApiVersion*
  type: Method
  package: com.azure.data.tables
  summary: Gets the REST API version used by this client.
  syntax:
    content: public TablesServiceVersion getApiVersion()
    return:
      type: com.azure.data.tables.TablesServiceVersion
      description: The REST API version used by this client.
- uid: com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String)
  id: getEntity(java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getEntity(String partitionKey, String rowKey)
  nameWithType: TableAsyncClient.getEntity(String partitionKey, String rowKey)
  fullName: com.azure.data.tables.TableAsyncClient.getEntity(String partitionKey, String rowKey)
  overload: com.azure.data.tables.TableAsyncClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Mono<TableEntity> getEntity(String partitionKey, String rowKey)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.tables.models.TableEntity>
      description: A reactive result containing the entity.
- uid: com.azure.data.tables.TableAsyncClient.getEntity(java.lang.String,java.lang.String,java.lang.String)
  id: getEntity(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getEntity(String partitionKey, String rowKey, String select)
  nameWithType: TableAsyncClient.getEntity(String partitionKey, String rowKey, String select)
  fullName: com.azure.data.tables.TableAsyncClient.getEntity(String partitionKey, String rowKey, String select)
  overload: com.azure.data.tables.TableAsyncClient.getEntity*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Mono<TableEntity> getEntity(String partitionKey, String rowKey, String select)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    return:
      type: reactor.core.publisher.Mono<com.azure.data.tables.models.TableEntity>
      description: A reactive result containing the entity.
- uid: com.azure.data.tables.TableAsyncClient.getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  id: getEntityWithResponse(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getEntityWithResponse(String partitionKey, String rowKey, String select)
  nameWithType: TableAsyncClient.getEntityWithResponse(String partitionKey, String rowKey, String select)
  fullName: com.azure.data.tables.TableAsyncClient.getEntityWithResponse(String partitionKey, String rowKey, String select)
  overload: com.azure.data.tables.TableAsyncClient.getEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Gets a single entity from the table.
  syntax:
    content: public Mono<Response<TableEntity>> getEntityWithResponse(String partitionKey, String rowKey, String select)
    parameters:
    - id: partitionKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: rowKey
      type: java.lang.String
      description: The partition key of the entity.
    - id: select
      type: java.lang.String
      description: An OData `select` expression to limit the set of properties included in the returned entity.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.tables.models.TableEntity>>
      description: A reactive result containing the response and entity.
- uid: com.azure.data.tables.TableAsyncClient.getTableName()
  id: getTableName()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getTableName()
  nameWithType: TableAsyncClient.getTableName()
  fullName: com.azure.data.tables.TableAsyncClient.getTableName()
  overload: com.azure.data.tables.TableAsyncClient.getTableName*
  type: Method
  package: com.azure.data.tables
  summary: Gets the name of the table.
  syntax:
    content: public String getTableName()
    return:
      type: java.lang.String
      description: The name of the table.
- uid: com.azure.data.tables.TableAsyncClient.getTableUrl()
  id: getTableUrl()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: getTableUrl()
  nameWithType: TableAsyncClient.getTableUrl()
  fullName: com.azure.data.tables.TableAsyncClient.getTableUrl()
  overload: com.azure.data.tables.TableAsyncClient.getTableUrl*
  type: Method
  package: com.azure.data.tables
  summary: Gets the absolute URL for this table.
  syntax:
    content: public String getTableUrl()
    return:
      type: java.lang.String
      description: The absolute URL for this table.
- uid: com.azure.data.tables.TableAsyncClient.listEntities()
  id: listEntities()
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: listEntities()
  nameWithType: TableAsyncClient.listEntities()
  fullName: com.azure.data.tables.TableAsyncClient.listEntities()
  overload: com.azure.data.tables.TableAsyncClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists all entities within the table.
  syntax:
    content: public PagedFlux<TableEntity> listEntities()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableEntity>
      description: A paged reactive result containing all entities within the table.
- uid: com.azure.data.tables.TableAsyncClient.listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  id: listEntities(com.azure.data.tables.models.ListEntitiesOptions)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: listEntities(ListEntitiesOptions options)
  nameWithType: TableAsyncClient.listEntities(ListEntitiesOptions options)
  fullName: com.azure.data.tables.TableAsyncClient.listEntities(ListEntitiesOptions options)
  overload: com.azure.data.tables.TableAsyncClient.listEntities*
  type: Method
  package: com.azure.data.tables
  summary: Lists entities using the parameters in the provided options. If the \`filter\` parameter in the options is set, only entities matching the filter will be returned. If the \`select\` parameter is set, only the properties included in the select parameter will be returned for each entity. If the \`top\` parameter is set, the number of returned entities will be limited to that value.
  syntax:
    content: public PagedFlux<TableEntity> listEntities(ListEntitiesOptions options)
    parameters:
    - id: options
      type: com.azure.data.tables.models.ListEntitiesOptions
      description: The `filter`, `select`, and `top` OData query options to apply to this operation.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableEntity>
      description: A paged reactive result containing matching entities within the table.
- uid: com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity)
  id: updateEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntity(TableEntity entity)
  nameWithType: TableAsyncClient.updateEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity by merging the provided entity with the existing entity.
  syntax:
    content: public Mono<Void> updateEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntity(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableAsyncClient.updateEntity(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Mono<Void> updateEntity(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  id: updateEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  nameWithType: TableAsyncClient.updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  overload: com.azure.data.tables.TableAsyncClient.updateEntity*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Mono<Void> updateEntity(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform.
    - id: ifUnchanged
      type: boolean
      description: >-
        When true, the eTag of the provided entity must match the eTag of the entity in the Table
                            service. If the values do not match, the update will not occur and an exception will be
                            thrown.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  id: updateEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode,boolean)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  nameWithType: TableAsyncClient.updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  fullName: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
  overload: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Updates an existing entity using the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Mono<Response<Void>> updateEntityWithResponse(TableEntity entity, UpdateMode updateMode, boolean ifUnchanged)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to update.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform.
    - id: ifUnchanged
      type: boolean
      description: >-
        When true, the eTag of the provided entity must match the eTag of the entity in the Table
                            service. If the values do not match, the update will not occur and an exception will be
                            thrown.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
- uid: com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity)
  id: upsertEntity(com.azure.data.tables.models.TableEntity)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: upsertEntity(TableEntity entity)
  nameWithType: TableAsyncClient.upsertEntity(TableEntity entity)
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntity(TableEntity entity)
  overload: com.azure.data.tables.TableAsyncClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or merges the entity with the existing entity otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the provided entity's properties will be merged into the existing entity.
  syntax:
    content: public Mono<Void> upsertEntity(TableEntity entity)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: upsertEntity(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: upsertEntity(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableAsyncClient.upsertEntity(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntity(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.upsertEntity*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or updates the existing entity using the specified update mode otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the existing entity will be updated according to the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Mono<Void> upsertEntity(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform if the entity already exits.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty reactive result.
- uid: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  id: upsertEntityWithResponse(com.azure.data.tables.models.TableEntity,com.azure.data.tables.models.UpdateMode)
  artifact: com.azure:azure-data-tables:12.0.0-beta.3
  parent: com.azure.data.tables.TableAsyncClient
  langs:
  - java
  name: upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
  nameWithType: TableAsyncClient.upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
  overload: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse*
  type: Method
  package: com.azure.data.tables
  summary: Inserts an entity into the table if it does not exist, or updates the existing entity using the specified update mode otherwise. If no entity exists within the table having the same partition key and row key as the provided entity, it will be inserted. Otherwise, the existing entity will be updated according to the specified update mode. When the update mode is 'MERGE', the provided entity's properties will be merged into the existing entity. When the update mode is 'REPLACE', the provided entity's properties will completely replace those in the existing entity.
  syntax:
    content: public Mono<Response<Void>> upsertEntityWithResponse(TableEntity entity, UpdateMode updateMode)
    parameters:
    - id: entity
      type: com.azure.data.tables.models.TableEntity
      description: The entity to upsert.
    - id: updateMode
      type: com.azure.data.tables.models.UpdateMode
      description: The type of update to perform if the entity already exits.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A reactive result containing the HTTP response.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.data.tables.implementation.AzureTableImpl
  name: AzureTableImpl
  nameWithType: AzureTableImpl
  fullName: com.azure.data.tables.implementation.AzureTableImpl
- uid: com.azure.core.util.serializer.SerializerAdapter
  spec.java:
  - uid: com.azure.core.util.serializer.SerializerAdapter
    name: SerializerAdapter
    fullName: com.azure.core.util.serializer.SerializerAdapter
- uid: com.azure.data.tables.TableAsyncClient.TableAsyncClient*
  name: TableAsyncClient
  nameWithType: TableAsyncClient.TableAsyncClient
  fullName: com.azure.data.tables.TableAsyncClient.TableAsyncClient
  package: com.azure.data.tables
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.data.tables.TablesServiceVersion
  name: TablesServiceVersion
  nameWithType: TablesServiceVersion
  fullName: com.azure.data.tables.TablesServiceVersion
- uid: com.azure.data.tables.TableAsyncClient.getTableName*
  name: getTableName
  nameWithType: TableAsyncClient.getTableName
  fullName: com.azure.data.tables.TableAsyncClient.getTableName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: TableAsyncClient.getAccountName
  fullName: com.azure.data.tables.TableAsyncClient.getAccountName
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.getTableUrl*
  name: getTableUrl
  nameWithType: TableAsyncClient.getTableUrl
  fullName: com.azure.data.tables.TableAsyncClient.getTableUrl
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.getApiVersion*
  name: getApiVersion
  nameWithType: TableAsyncClient.getApiVersion
  fullName: com.azure.data.tables.TableAsyncClient.getApiVersion
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncBatch
  name: TableAsyncBatch
  nameWithType: TableAsyncBatch
  fullName: com.azure.data.tables.TableAsyncBatch
- uid: com.azure.data.tables.TableAsyncClient.createBatch*
  name: createBatch
  nameWithType: TableAsyncClient.createBatch
  fullName: com.azure.data.tables.TableAsyncClient.createBatch
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.create*
  name: create
  nameWithType: TableAsyncClient.create
  fullName: com.azure.data.tables.TableAsyncClient.create
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.createWithResponse*
  name: createWithResponse
  nameWithType: TableAsyncClient.createWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.createWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.TableEntity
  name: TableEntity
  nameWithType: TableEntity
  fullName: com.azure.data.tables.models.TableEntity
- uid: com.azure.data.tables.TableAsyncClient.createEntity*
  name: createEntity
  nameWithType: TableAsyncClient.createEntity
  fullName: com.azure.data.tables.TableAsyncClient.createEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.createEntityWithResponse*
  name: createEntityWithResponse
  nameWithType: TableAsyncClient.createEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.createEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.upsertEntity*
  name: upsertEntity
  nameWithType: TableAsyncClient.upsertEntity
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.UpdateMode
  name: UpdateMode
  nameWithType: UpdateMode
  fullName: com.azure.data.tables.models.UpdateMode
- uid: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse*
  name: upsertEntityWithResponse
  nameWithType: TableAsyncClient.upsertEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.upsertEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.updateEntity*
  name: updateEntity
  nameWithType: TableAsyncClient.updateEntity
  fullName: com.azure.data.tables.TableAsyncClient.updateEntity
  package: com.azure.data.tables
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse*
  name: updateEntityWithResponse
  nameWithType: TableAsyncClient.updateEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.updateEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.delete*
  name: delete
  nameWithType: TableAsyncClient.delete
  fullName: com.azure.data.tables.TableAsyncClient.delete
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.deleteWithResponse*
  name: deleteWithResponse
  nameWithType: TableAsyncClient.deleteWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.deleteWithResponse
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.deleteEntity*
  name: deleteEntity
  nameWithType: TableAsyncClient.deleteEntity
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntity
  package: com.azure.data.tables
- uid: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse*
  name: deleteEntityWithResponse
  nameWithType: TableAsyncClient.deleteEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.deleteEntityWithResponse
  package: com.azure.data.tables
- uid: com.azure.core.http.rest.PagedFlux<com.azure.data.tables.models.TableEntity>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.listEntities*
  name: listEntities
  nameWithType: TableAsyncClient.listEntities
  fullName: com.azure.data.tables.TableAsyncClient.listEntities
  package: com.azure.data.tables
- uid: com.azure.data.tables.models.ListEntitiesOptions
  name: ListEntitiesOptions
  nameWithType: ListEntitiesOptions
  fullName: com.azure.data.tables.models.ListEntitiesOptions
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.PagedFlux<T>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.data.tables.models.TableEntity>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.getEntity*
  name: getEntity
  nameWithType: TableAsyncClient.getEntity
  fullName: com.azure.data.tables.TableAsyncClient.getEntity
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.data.tables.models.TableEntity>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.data.tables.models.TableEntity
    name: TableEntity
    fullName: com.azure.data.tables.models.TableEntity
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.data.tables.TableAsyncClient.getEntityWithResponse*
  name: getEntityWithResponse
  nameWithType: TableAsyncClient.getEntityWithResponse
  fullName: com.azure.data.tables.TableAsyncClient.getEntityWithResponse
  package: com.azure.data.tables
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<T>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
