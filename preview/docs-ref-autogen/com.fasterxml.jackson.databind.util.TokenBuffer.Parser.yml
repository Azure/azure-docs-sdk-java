### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  id: Parser
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util
  children:
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,com.fasterxml.jackson.core.JsonStreamContext)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._byteBuilder
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._checkIsNumber()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._closed
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._codec
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToInt(java.lang.Number)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToLong(java.lang.Number)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._currentObject()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._handleEOF()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeIds
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeObjectIds
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeTypeIds
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._location
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._parsingContext
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._segment
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser._segmentPtr
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBigIntegerValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCodec()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentLocation()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getEmbeddedObject()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getFloatValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberType()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberValue()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getObjectId()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getParsingContext()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTokenLocation()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTypeId()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.hasTextCharacters()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isClosed()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isNaN()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextFieldName()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.peekNextToken()
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setLocation(com.fasterxml.jackson.core.JsonLocation)
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser.version()
  langs:
  - java
  name: TokenBuffer.Parser
  nameWithType: TokenBuffer.Parser
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  type: Class
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected static final class TokenBuffer.Parser extends ParserMinimalBase
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonParser
  - com.fasterxml.jackson.core.base.ParserMinimalBase
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  - com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  - com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.finishToken()
  - com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.getByteValue()
  - com.fasterxml.jackson.core.JsonParser.getCodec()
  - com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  - com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  - com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  - com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  - com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  - com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  - com.fasterxml.jackson.core.JsonParser.getFloatValue()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getInputSource()
  - com.fasterxml.jackson.core.JsonParser.getIntValue()
  - com.fasterxml.jackson.core.JsonParser.getLongValue()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.getNumberType()
  - com.fasterxml.jackson.core.JsonParser.getNumberValue()
  - com.fasterxml.jackson.core.JsonParser.getObjectId()
  - com.fasterxml.jackson.core.JsonParser.getSchema()
  - com.fasterxml.jackson.core.JsonParser.getShortValue()
  - com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  - com.fasterxml.jackson.core.JsonParser.getTypeId()
  - com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  - com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.isNaN()
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonParser.version()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  - com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  - com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.close()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  - com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean)
  id: Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds)
  nameWithType: TokenBuffer.Parser.Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds)
    parameters:
    - id: firstSeg
      type: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: hasNativeTypeIds
      type: boolean
    - id: hasNativeObjectIds
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,com.fasterxml.jackson.core.JsonStreamContext)
  id: Parser(com.fasterxml.jackson.databind.util.TokenBuffer.Segment,com.fasterxml.jackson.core.ObjectCodec,boolean,boolean,com.fasterxml.jackson.core.JsonStreamContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds, JsonStreamContext parentContext)
  nameWithType: TokenBuffer.Parser.Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds, JsonStreamContext parentContext)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds, JsonStreamContext parentContext)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public Parser(TokenBuffer.Segment firstSeg, ObjectCodec codec, boolean hasNativeTypeIds, boolean hasNativeObjectIds, JsonStreamContext parentContext)
    parameters:
    - id: firstSeg
      type: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
    - id: hasNativeTypeIds
      type: boolean
    - id: hasNativeObjectIds
      type: boolean
    - id: parentContext
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._byteBuilder
  id: _byteBuilder
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _byteBuilder
  nameWithType: TokenBuffer.Parser._byteBuilder
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._byteBuilder
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected transient ByteArrayBuilder _byteBuilder
    return:
      type: com.fasterxml.jackson.core.util.ByteArrayBuilder
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._checkIsNumber()
  id: _checkIsNumber()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _checkIsNumber()
  nameWithType: TokenBuffer.Parser._checkIsNumber()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._checkIsNumber()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._checkIsNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final void _checkIsNumber()
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._closed
  id: _closed
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _closed
  nameWithType: TokenBuffer.Parser._closed
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._closed
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected boolean _closed
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._codec
  id: _codec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _codec
  nameWithType: TokenBuffer.Parser._codec
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._codec
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected ObjectCodec _codec
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToInt(java.lang.Number)
  id: _convertNumberToInt(java.lang.Number)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _convertNumberToInt(Number n)
  nameWithType: TokenBuffer.Parser._convertNumberToInt(Number n)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToInt(Number n)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToInt*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected int _convertNumberToInt(Number n)
    parameters:
    - id: n
      type: java.lang.Number
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToLong(java.lang.Number)
  id: _convertNumberToLong(java.lang.Number)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _convertNumberToLong(Number n)
  nameWithType: TokenBuffer.Parser._convertNumberToLong(Number n)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToLong(Number n)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToLong*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected long _convertNumberToLong(Number n)
    parameters:
    - id: n
      type: java.lang.Number
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._currentObject()
  id: _currentObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _currentObject()
  nameWithType: TokenBuffer.Parser._currentObject()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._currentObject()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._currentObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final Object _currentObject()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._handleEOF()
  id: _handleEOF()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _handleEOF()
  nameWithType: TokenBuffer.Parser._handleEOF()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._handleEOF()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._handleEOF*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method sub-classes need to implement
  syntax:
    content: protected void _handleEOF()
  exceptions:
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeIds
  id: _hasNativeIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _hasNativeIds
  nameWithType: TokenBuffer.Parser._hasNativeIds
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeIds
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final boolean _hasNativeIds
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeObjectIds
  id: _hasNativeObjectIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _hasNativeObjectIds
  nameWithType: TokenBuffer.Parser._hasNativeObjectIds
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeObjectIds
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final boolean _hasNativeObjectIds
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeTypeIds
  id: _hasNativeTypeIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _hasNativeTypeIds
  nameWithType: TokenBuffer.Parser._hasNativeTypeIds
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._hasNativeTypeIds
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected final boolean _hasNativeTypeIds
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._location
  id: _location
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _location
  nameWithType: TokenBuffer.Parser._location
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._location
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected JsonLocation _location
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._parsingContext
  id: _parsingContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _parsingContext
  nameWithType: TokenBuffer.Parser._parsingContext
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._parsingContext
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Information about parser context, context in which the next token is to be parsed (root, array, object).
  syntax:
    content: protected TokenBufferReadContext _parsingContext
    return:
      type: com.fasterxml.jackson.databind.util.TokenBufferReadContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._segment
  id: _segment
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _segment
  nameWithType: TokenBuffer.Parser._segment
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._segment
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Currently active segment
  syntax:
    content: protected TokenBuffer.Segment _segment
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._segmentPtr
  id: _segmentPtr
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: _segmentPtr
  nameWithType: TokenBuffer.Parser._segmentPtr
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._segmentPtr
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Pointer to current token within current segment
  syntax:
    content: protected int _segmentPtr
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId()
  id: canReadObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: canReadObjectId()
  nameWithType: TokenBuffer.Parser.canReadObjectId()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Object Ids natively (many do not; for example, JSON doesn't).


    Default implementation returns true; overridden by data formats that do support native Object Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native object ids.
  syntax:
    content: public boolean canReadObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId()
  id: canReadTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: canReadTypeId()
  nameWithType: TokenBuffer.Parser.canReadTypeId()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Type Ids natively (many do not; for example, JSON doesn't).


    Default implementation returns true; overridden by data formats that do support native Type Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native type ids.
  syntax:
    content: public boolean canReadTypeId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: close()
  nameWithType: TokenBuffer.Parser.close()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Closes the parser so that no further iteration or data access can be made; will also close the underlying input source if parser either **owns** the input source, or feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_SOURCE</xref> is enabled. Whether parser owns the input source depends on factory method that was used to construct instance (so check <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonFactory</xref> for details, but the general idea is that if caller passes in closable resource (such as <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> or <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref>) parser does NOT own the source; but if it passes a reference (such as <xref uid="java.io.File" data-throw-if-not-resolved="false">java.io.File</xref> or <xref uid="java.net.URL" data-throw-if-not-resolved="false">java.net.URL</xref> and creates stream or reader it does own them.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBigIntegerValue()
  id: getBigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getBigIntegerValue()
  nameWithType: TokenBuffer.Parser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBigIntegerValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue*" data-throw-if-not-resolved="false">#getDecimalValue</xref> and then constructing a <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> from that value.
  syntax:
    content: public BigInteger getBigIntegerValue()
    return:
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getBinaryValue(Base64Variant b64variant)
  nameWithType: TokenBuffer.Parser.getBinaryValue(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBinaryValue(Base64Variant b64variant)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText*" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public byte[] getBinaryValue(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getCodec()
  nameWithType: TokenBuffer.Parser.getCodec()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCodec()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCodec*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Accessor for <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: TokenBuffer.Parser.getCurrentLocation()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentLocation()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that returns location of the last processed character; usually for error reporting purposes.
  syntax:
    content: public JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName()
  id: getCurrentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getCurrentName()
  nameWithType: TokenBuffer.Parser.getCurrentName()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: 'Method that can be called to get the name associated with the current token: for <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>s it will be the same as what <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText*" data-throw-if-not-resolved="false">#getText</xref> returns; for field values it will be preceding field name; and for others (array values, root-level values) null.'
  syntax:
    content: public String getCurrentName()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue()
  id: getDecimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getDecimalValue()
  nameWithType: TokenBuffer.Parser.getDecimalValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>. No under/overflow exceptions are ever thrown.
  syntax:
    content: public BigDecimal getDecimalValue()
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue()
  id: getDoubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getDoubleValue()
  nameWithType: TokenBuffer.Parser.getDoubleValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java double, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public double getDoubleValue()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getEmbeddedObject()
  id: getEmbeddedObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getEmbeddedObject()
  nameWithType: TokenBuffer.Parser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getEmbeddedObject()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Accessor that can be called if (and only if) the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>. For other token types, null is returned.


    Note: only some specialized parser implementations support embedding of objects (usually ones that are facades on top of non-streaming sources, such as object trees). One exception is access to binary content (whether via base64 encoding or not) which typically is accessible using this method, as well as <xref uid="" data-throw-if-not-resolved="false">#getBinaryValue()</xref>.
  syntax:
    content: public Object getEmbeddedObject()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getFloatValue()
  id: getFloatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getFloatValue()
  nameWithType: TokenBuffer.Parser.getFloatValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getFloatValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getFloatValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java float primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java float, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public float getFloatValue()
    return:
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue()
  id: getIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getIntValue()
  nameWithType: TokenBuffer.Parser.getIntValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java int, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public int getIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue()
  id: getLongValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getLongValue()
  nameWithType: TokenBuffer.Parser.getLongValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a Java long primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting to int; except for possible overflow/underflow exception.


    Note: if the token is an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public long getLongValue()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberType()
  id: getNumberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getNumberType()
  nameWithType: TokenBuffer.Parser.getNumberType()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberType()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberType*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: If current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, returns one of <xref uid="" data-throw-if-not-resolved="false">NumberType</xref> constants; otherwise returns null.
  syntax:
    content: public JsonParser.NumberType getNumberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberValue()
  id: getNumberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getNumberValue()
  nameWithType: TokenBuffer.Parser.getNumberValue()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberValue()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Generic number value accessor method that will work for all kinds of numeric values. It will return the optimal (simplest/smallest possible) wrapper object that can express the numeric value just parsed.
  syntax:
    content: public final Number getNumberValue()
    return:
      type: java.lang.Number
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getObjectId()
  id: getObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getObjectId()
  nameWithType: TokenBuffer.Parser.getObjectId()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getObjectId()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that can be called to check whether current token (one that was just read) has an associated Object id, and if so, return it. Note that while typically caller should check with <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId*" data-throw-if-not-resolved="false">#canReadObjectId</xref> first, it is not illegal to call this method even if that method returns true; but if so, it will return null. This may be used to simplify calling code.


    Default implementation will simply return null.
  syntax:
    content: public Object getObjectId()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getParsingContext()
  id: getParsingContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getParsingContext()
  nameWithType: TokenBuffer.Parser.getParsingContext()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getParsingContext()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getParsingContext*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: 'Method that can be used to access current parsing context reader is in. There are 3 different types: root, array and object contexts, with slightly different available information. Contexts are hierarchically nested, and can be used for example for figuring out part of the input document that correspond to specific array or object (for highlighting purposes, or error reporting). Contexts can also be used for simple xpath-like matching of input, if so desired.'
  syntax:
    content: public JsonStreamContext getParsingContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText()
  id: getText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getText()
  nameWithType: TokenBuffer.Parser.getText()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for accessing textual representation of the current token; if no current token (before first call to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or after encountering end-of-input), returns null. Method can be called for any token type.
  syntax:
    content: public String getText()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters()
  id: getTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getTextCharacters()
  nameWithType: TokenBuffer.Parser.getTextCharacters()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText*" data-throw-if-not-resolved="false">#getText</xref>, but that will return underlying (unmodifiable) character array that contains textual value, instead of constructing a String object to contain this information. Note, however, that:

     *  Textual contents are not guaranteed to start at index 0 (rather, call <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset*" data-throw-if-not-resolved="false">#getTextOffset</xref>) to know the actual offset
     *  Length of textual contents may be less than the length of returned buffer: call <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength*" data-throw-if-not-resolved="false">#getTextLength</xref> for actual length of returned content.

    Note that caller **MUST NOT** modify the returned character array in any way -- doing so may corrupt current parser state and render parser instance useless.


    The only reason to call this method (over <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText*" data-throw-if-not-resolved="false">#getText</xref>) is to avoid construction of a String object (which will make a copy of contents).
  syntax:
    content: public char[] getTextCharacters()
    return:
      type: char[]
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength()
  id: getTextLength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getTextLength()
  nameWithType: TokenBuffer.Parser.getTextLength()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Accessor used with <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know length of String stored in returned buffer.
  syntax:
    content: public int getTextLength()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset()
  id: getTextOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getTextOffset()
  nameWithType: TokenBuffer.Parser.getTextOffset()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Accessor used with <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know offset of the first text content character within buffer.
  syntax:
    content: public int getTextOffset()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getTokenLocation()
  nameWithType: TokenBuffer.Parser.getTokenLocation()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTokenLocation()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTypeId()
  id: getTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: getTypeId()
  nameWithType: TokenBuffer.Parser.getTypeId()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTypeId()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that can be called to check whether current token (one that was just read) has an associated type id, and if so, return it. Note that while typically caller should check with <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId*" data-throw-if-not-resolved="false">#canReadTypeId</xref> first, it is not illegal to call this method even if that method returns true; but if so, it will return null. This may be used to simplify calling code.


    Default implementation will simply return null.
  syntax:
    content: public Object getTypeId()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.hasTextCharacters()
  id: hasTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: hasTextCharacters()
  nameWithType: TokenBuffer.Parser.hasTextCharacters()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.hasTextCharacters()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.hasTextCharacters*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that can be used to determine whether calling of <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> would be the most efficient way to access textual content for the event parser currently points to.


    Default implementation simply returns false since only actual implementation class has knowledge of its internal buffering state. Implementations are strongly encouraged to properly override this method, to allow efficient copying of content by other code.
  syntax:
    content: public boolean hasTextCharacters()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: isClosed()
  nameWithType: TokenBuffer.Parser.isClosed()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isClosed()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isClosed*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that can be called to determine whether this parser is closed or not. If it is closed, no new tokens can be retrieved by calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref> (and the underlying stream may be closed). Closing may be due to an explicit call to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close*" data-throw-if-not-resolved="false">#close</xref> or because parser has encountered end of input.
  syntax:
    content: public boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isNaN()
  id: isNaN()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: isNaN()
  nameWithType: TokenBuffer.Parser.isNaN()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isNaN()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isNaN*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: 'Access for checking whether current token is a numeric value token, but one that is of "not-a-number" (NaN) variety (including both "NaN" AND positive/negative infinity!): not supported by all formats, but often supported for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>. NOTE: roughly equivalent to calling `!Double.isFinite()` on value you would get from calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue()" data-throw-if-not-resolved="false">#getDoubleValue()</xref>.'
  syntax:
    content: public boolean isNaN()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextFieldName()
  id: nextFieldName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: nextFieldName()
  nameWithType: TokenBuffer.Parser.nextFieldName()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextFieldName()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextFieldName*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that fetches next token (as if calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>) and verifies whether it is <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>; if it is, returns same as <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName()" data-throw-if-not-resolved="false">#getCurrentName()</xref>, otherwise null.
  syntax:
    content: public String nextFieldName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken()
  id: nextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: nextToken()
  nameWithType: TokenBuffer.Parser.nextToken()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Main iteration method, which will advance stream enough to determine type of the next token, if any. If none remaining (stream has no content other than possible white space before ending), null will be returned.
  syntax:
    content: public JsonToken nextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.overrideCurrentName(java.lang.String)
  id: overrideCurrentName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: overrideCurrentName(String name)
  nameWithType: TokenBuffer.Parser.overrideCurrentName(String name)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.overrideCurrentName(String name)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.overrideCurrentName*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that can be used to change what is considered to be the current (field) name. May be needed to support non-JSON data formats or unusual binding conventions; not needed for typical processing.


    Note that use of this method should only be done as sort of last resort, as it is a work-around for regular operation.
  syntax:
    content: public void overrideCurrentName(String name)
    parameters:
    - id: name
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.peekNextToken()
  id: peekNextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: peekNextToken()
  nameWithType: TokenBuffer.Parser.peekNextToken()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.peekNextToken()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.peekNextToken*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public JsonToken peekNextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  id: readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: readBinaryValue(Base64Variant b64variant, OutputStream out)
  nameWithType: TokenBuffer.Parser.readBinaryValue(Base64Variant b64variant, OutputStream out)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.readBinaryValue(Base64Variant b64variant, OutputStream out)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Similar to <xref uid="" data-throw-if-not-resolved="false">#readBinaryValue(OutputStream)</xref> but allows explicitly specifying base64 variant to use.
  syntax:
    content: public int readBinaryValue(Base64Variant b64variant, OutputStream out)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: out
      type: java.io.OutputStream
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: setCodec(ObjectCodec c)
  nameWithType: TokenBuffer.Parser.setCodec(ObjectCodec c)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setCodec(ObjectCodec c)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setCodec*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Setter that allows defining <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> associated with this parser, if any. Codec is used by <xref uid="" data-throw-if-not-resolved="false">#readValueAs(Class)</xref> method (and its variants).
  syntax:
    content: public void setCodec(ObjectCodec c)
    parameters:
    - id: c
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setLocation(com.fasterxml.jackson.core.JsonLocation)
  id: setLocation(com.fasterxml.jackson.core.JsonLocation)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: setLocation(JsonLocation l)
  nameWithType: TokenBuffer.Parser.setLocation(JsonLocation l)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setLocation(JsonLocation l)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setLocation*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public void setLocation(JsonLocation l)
    parameters:
    - id: l
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  langs:
  - java
  name: version()
  nameWithType: TokenBuffer.Parser.version()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.version()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.version*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Accessor for getting version of the core package, given a parser instance. Left for sub-classes to implement.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
references:
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
  name: TokenBuffer.Segment
  nameWithType: TokenBuffer.Segment
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser*
  name: Parser
  nameWithType: TokenBuffer.Parser.Parser
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.Parser
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setLocation*
  name: setLocation
  nameWithType: TokenBuffer.Parser.setLocation
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setLocation
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCodec*
  name: getCodec
  nameWithType: TokenBuffer.Parser.getCodec
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCodec
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setCodec*
  name: setCodec
  nameWithType: TokenBuffer.Parser.setCodec
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.setCodec
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.version*
  name: version
  nameWithType: TokenBuffer.Parser.version
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.version
  package: com.fasterxml.jackson.databind.util
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.peekNextToken*
  name: peekNextToken
  nameWithType: TokenBuffer.Parser.peekNextToken
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.peekNextToken
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close*
  name: close
  nameWithType: TokenBuffer.Parser.close
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.close
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken*
  name: nextToken
  nameWithType: TokenBuffer.Parser.nextToken
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextToken
  package: com.fasterxml.jackson.databind.util
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextFieldName*
  name: nextFieldName
  nameWithType: TokenBuffer.Parser.nextFieldName
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.nextFieldName
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isClosed*
  name: isClosed
  nameWithType: TokenBuffer.Parser.isClosed
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isClosed
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getParsingContext*
  name: getParsingContext
  nameWithType: TokenBuffer.Parser.getParsingContext
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getParsingContext
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTokenLocation*
  name: getTokenLocation
  nameWithType: TokenBuffer.Parser.getTokenLocation
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTokenLocation
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: TokenBuffer.Parser.getCurrentLocation
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentLocation
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName*
  name: getCurrentName
  nameWithType: TokenBuffer.Parser.getCurrentName
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getCurrentName
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.overrideCurrentName*
  name: overrideCurrentName
  nameWithType: TokenBuffer.Parser.overrideCurrentName
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.overrideCurrentName
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText*
  name: getText
  nameWithType: TokenBuffer.Parser.getText
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getText
  package: com.fasterxml.jackson.databind.util
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters*
  name: getTextCharacters
  nameWithType: TokenBuffer.Parser.getTextCharacters
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextCharacters
  package: com.fasterxml.jackson.databind.util
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength*
  name: getTextLength
  nameWithType: TokenBuffer.Parser.getTextLength
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextLength
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset*
  name: getTextOffset
  nameWithType: TokenBuffer.Parser.getTextOffset
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTextOffset
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.hasTextCharacters*
  name: hasTextCharacters
  nameWithType: TokenBuffer.Parser.hasTextCharacters
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.hasTextCharacters
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isNaN*
  name: isNaN
  nameWithType: TokenBuffer.Parser.isNaN
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.isNaN
  package: com.fasterxml.jackson.databind.util
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBigIntegerValue*
  name: getBigIntegerValue
  nameWithType: TokenBuffer.Parser.getBigIntegerValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBigIntegerValue
  package: com.fasterxml.jackson.databind.util
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue*
  name: getDecimalValue
  nameWithType: TokenBuffer.Parser.getDecimalValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDecimalValue
  package: com.fasterxml.jackson.databind.util
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue*
  name: getDoubleValue
  nameWithType: TokenBuffer.Parser.getDoubleValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue
  package: com.fasterxml.jackson.databind.util
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getFloatValue*
  name: getFloatValue
  nameWithType: TokenBuffer.Parser.getFloatValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getFloatValue
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue*
  name: getIntValue
  nameWithType: TokenBuffer.Parser.getIntValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue
  package: com.fasterxml.jackson.databind.util
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue*
  name: getLongValue
  nameWithType: TokenBuffer.Parser.getLongValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getLongValue
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberType*
  name: getNumberType
  nameWithType: TokenBuffer.Parser.getNumberType
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberType
  package: com.fasterxml.jackson.databind.util
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberValue*
  name: getNumberValue
  nameWithType: TokenBuffer.Parser.getNumberValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getNumberValue
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToInt*
  name: _convertNumberToInt
  nameWithType: TokenBuffer.Parser._convertNumberToInt
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToInt
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToLong*
  name: _convertNumberToLong
  nameWithType: TokenBuffer.Parser._convertNumberToLong
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._convertNumberToLong
  package: com.fasterxml.jackson.databind.util
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getEmbeddedObject*
  name: getEmbeddedObject
  nameWithType: TokenBuffer.Parser.getEmbeddedObject
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getEmbeddedObject
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBinaryValue*
  name: getBinaryValue
  nameWithType: TokenBuffer.Parser.getBinaryValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getBinaryValue
  package: com.fasterxml.jackson.databind.util
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.readBinaryValue*
  name: readBinaryValue
  nameWithType: TokenBuffer.Parser.readBinaryValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.readBinaryValue
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId*
  name: canReadObjectId
  nameWithType: TokenBuffer.Parser.canReadObjectId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadObjectId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId*
  name: canReadTypeId
  nameWithType: TokenBuffer.Parser.canReadTypeId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.canReadTypeId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTypeId*
  name: getTypeId
  nameWithType: TokenBuffer.Parser.getTypeId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getTypeId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getObjectId*
  name: getObjectId
  nameWithType: TokenBuffer.Parser.getObjectId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getObjectId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._currentObject*
  name: _currentObject
  nameWithType: TokenBuffer.Parser._currentObject
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._currentObject
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._checkIsNumber*
  name: _checkIsNumber
  nameWithType: TokenBuffer.Parser._checkIsNumber
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._checkIsNumber
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._handleEOF*
  name: _handleEOF
  nameWithType: TokenBuffer.Parser._handleEOF
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser._handleEOF
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBufferReadContext
  name: TokenBufferReadContext
  nameWithType: TokenBufferReadContext
  fullName: com.fasterxml.jackson.databind.util.TokenBufferReadContext
- uid: com.fasterxml.jackson.core.util.ByteArrayBuilder
  name: ByteArrayBuilder
  nameWithType: ByteArrayBuilder
  fullName: com.fasterxml.jackson.core.util.ByteArrayBuilder
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase
  name: ParserMinimalBase
  nameWithType: ParserMinimalBase
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
  name: ParserMinimalBase._asciiBytes(String)
  nameWithType: ParserMinimalBase._asciiBytes(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._asciiBytes(java.lang.String)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
  name: JsonParser.canReadTypeId()
  nameWithType: JsonParser.canReadTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
  name: ParserMinimalBase._reportInvalidEOFInValue()
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  name: JsonParser.readBinaryValue(OutputStream)
  nameWithType: JsonParser.readBinaryValue(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.getNumberType()
  name: JsonParser.getNumberType()
  nameWithType: JsonParser.getNumberType()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberType()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
  name: ParserMinimalBase.reportOverflowLong()
  nameWithType: ParserMinimalBase.reportOverflowLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong()
- uid: com.fasterxml.jackson.core.JsonParser.getObjectId()
  name: JsonParser.getObjectId()
  nameWithType: JsonParser.getObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.getObjectId()
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  name: JsonParser.canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
  name: ParserMinimalBase._getCharDesc(int)
  nameWithType: ParserMinimalBase._getCharDesc(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._getCharDesc(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
  name: ParserMinimalBase.getValueAsInt(int)
  nameWithType: ParserMinimalBase.getValueAsInt(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
  name: ParserMinimalBase.getText()
  nameWithType: ParserMinimalBase.getText()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getText()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOFInValue(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOFInValue(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
  name: ParserMinimalBase.reportOverflowLong(String)
  nameWithType: ParserMinimalBase.reportOverflowLong(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonParser.getIntValue()
  name: JsonParser.getIntValue()
  nameWithType: JsonParser.getIntValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getIntValue()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
  name: ParserMinimalBase._reportInvalidEOF()
  nameWithType: ParserMinimalBase._reportInvalidEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
  name: ParserMinimalBase.nextValue()
  nameWithType: ParserMinimalBase.nextValue()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
  name: ParserMinimalBase._longNumberDesc(String)
  nameWithType: ParserMinimalBase._longNumberDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longNumberDesc(java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
  name: ParserMinimalBase._longIntegerDesc(String)
  nameWithType: ParserMinimalBase._longIntegerDesc(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._longIntegerDesc(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
  name: JsonParser.getBooleanValue()
  nameWithType: JsonParser.getBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  name: JsonParser.getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
- uid: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
  name: JsonParser.canReadObjectId()
  nameWithType: JsonParser.canReadObjectId()
  fullName: com.fasterxml.jackson.core.JsonParser.canReadObjectId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class<?>)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class<?>)
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  name: JsonParser.setRequestPayloadOnError(String)
  nameWithType: JsonParser.setRequestPayloadOnError(String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  name: JsonParser.isEnabled(StreamReadFeature)
  nameWithType: JsonParser.isEnabled(StreamReadFeature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  name: JsonParser.<T>readValueAs(TypeReference<?>)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.close()
  name: ParserMinimalBase.close()
  nameWithType: ParserMinimalBase.close()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.close()
- uid: com.fasterxml.jackson.core.JsonParser.getInputSource()
  name: JsonParser.getInputSource()
  nameWithType: JsonParser.getInputSource()
  fullName: com.fasterxml.jackson.core.JsonParser.getInputSource()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
  name: ParserMinimalBase.hasTextCharacters()
  nameWithType: ParserMinimalBase.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTextCharacters()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
  name: ParserMinimalBase._throwInternal()
  nameWithType: ParserMinimalBase._throwInternal()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInternal()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._wrapError(String,Throwable)
  nameWithType: ParserMinimalBase._wrapError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._wrapError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
  name: ParserMinimalBase._reportError(String)
  nameWithType: ParserMinimalBase._reportError(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.disable(JsonParser.Feature)
  nameWithType: JsonParser.disable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.disable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
  name: ParserMinimalBase._reportMissingRootWS(int)
  nameWithType: ParserMinimalBase._reportMissingRootWS(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportMissingRootWS(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
  name: ParserMinimalBase.getValueAsLong()
  nameWithType: ParserMinimalBase.getValueAsLong()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
  name: ParserMinimalBase.isExpectedStartArrayToken()
  nameWithType: ParserMinimalBase.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartArrayToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
  name: ParserMinimalBase.getLastClearedToken()
  nameWithType: ParserMinimalBase.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getLastClearedToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  name: JsonParser.<T>readValuesAs(Class<T>)
  nameWithType: JsonParser.<T>readValuesAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCodec()
  name: JsonParser.getCodec()
  nameWithType: JsonParser.getCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.getCodec()
- uid: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonParser.setCodec(ObjectCodec)
  nameWithType: JsonParser.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonParser.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
  name: JsonParser.getCurrentLocation()
  nameWithType: JsonParser.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentLocation()
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  name: JsonParser.currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
  name: ParserMinimalBase.hasCurrentToken()
  nameWithType: ParserMinimalBase.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasCurrentToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
  name: ParserMinimalBase.clearCurrentToken()
  nameWithType: ParserMinimalBase.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
  name: JsonParser.requiresCustomCodec()
  nameWithType: JsonParser.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonParser.requiresCustomCodec()
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  name: JsonParser._reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
  name: JsonParser.getValueAsDouble()
  nameWithType: JsonParser.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsDouble()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
  name: ParserMinimalBase.getValueAsInt()
  nameWithType: ParserMinimalBase.getValueAsInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsInt()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
  name: ParserMinimalBase._reportInvalidEOF(String)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
  name: JsonParser.getDoubleValue()
  nameWithType: JsonParser.getDoubleValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDoubleValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
  name: ParserMinimalBase.isClosed()
  nameWithType: ParserMinimalBase.isClosed()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isClosed()
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  name: JsonParser.nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
  name: ParserMinimalBase.currentToken()
  nameWithType: ParserMinimalBase.currentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentToken()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  name: JsonParser.<T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
  name: ParserMinimalBase.getTextOffset()
  nameWithType: ParserMinimalBase.getTextOffset()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextOffset()
- uid: com.fasterxml.jackson.core.JsonParser.getTypeId()
  name: JsonParser.getTypeId()
  nameWithType: JsonParser.getTypeId()
  fullName: com.fasterxml.jackson.core.JsonParser.getTypeId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
  name: ParserMinimalBase.getTextLength()
  nameWithType: ParserMinimalBase.getTextLength()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextLength()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
  name: ParserMinimalBase.skipChildren()
  nameWithType: ParserMinimalBase.skipChildren()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.skipChildren()
- uid: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
  name: JsonParser.getEmbeddedObject()
  nameWithType: JsonParser.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.JsonParser.getEmbeddedObject()
- uid: com.fasterxml.jackson.core.JsonParser.version()
  name: JsonParser.version()
  nameWithType: JsonParser.version()
  fullName: com.fasterxml.jackson.core.JsonParser.version()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
  name: ParserMinimalBase.overrideCurrentName(String)
  nameWithType: ParserMinimalBase.overrideCurrentName(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.overrideCurrentName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  name: JsonParser.nextIntValue(int)
  nameWithType: JsonParser.nextIntValue(int)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
- uid: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
  name: JsonParser.overrideStdFeatures(int,int)
  nameWithType: JsonParser.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
  name: JsonParser.setFeatureMask(int)
  nameWithType: JsonParser.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.JsonParser.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase.getBinaryValue(Base64Variant)
  nameWithType: ParserMinimalBase.getBinaryValue(Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.canUseSchema(FormatSchema)
  nameWithType: JsonParser.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  name: JsonParser.<T>readValueAs(Class<T>)
  nameWithType: JsonParser.<T>readValueAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
  name: JsonParser.getCurrentValue()
  nameWithType: JsonParser.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getCurrentValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  name: JsonParser.setRequestPayloadOnError(RequestPayload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  name: JsonParser.releaseBuffered(OutputStream)
  nameWithType: JsonParser.releaseBuffered(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.isEnabled(JsonParser.Feature)
  nameWithType: JsonParser.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
  name: JsonParser.getText(Writer)
  nameWithType: JsonParser.getText(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.getText(java.io.Writer)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
  name: ParserMinimalBase.getCurrentToken()
  nameWithType: ParserMinimalBase.getCurrentToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  name: JsonParser.nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  name: JsonParser._codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  name: JsonParser.nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
  name: ParserMinimalBase._reportError(String,Object)
  nameWithType: ParserMinimalBase._reportError(String,Object)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
  name: ParserMinimalBase.currentTokenId()
  nameWithType: ParserMinimalBase.currentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.currentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  name: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  nameWithType: JsonParser.readBinaryValue(Base64Variant,OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
  name: ParserMinimalBase._ascii(byte[])
  nameWithType: ParserMinimalBase._ascii(byte[])
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._ascii(byte[])
- uid: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
  name: JsonParser.getBigIntegerValue()
  nameWithType: JsonParser.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
  name: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  nameWithType: ParserMinimalBase._decodeBase64(String,ByteArrayBuilder,Base64Variant)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._decodeBase64(java.lang.String,com.fasterxml.jackson.core.util.ByteArrayBuilder,com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.JsonParser.finishToken()
  name: JsonParser.finishToken()
  nameWithType: JsonParser.finishToken()
  fullName: com.fasterxml.jackson.core.JsonParser.finishToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
  name: ParserMinimalBase.getValueAsBoolean(boolean)
  nameWithType: ParserMinimalBase.getValueAsBoolean(boolean)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  name: JsonParser.nextLongValue(long)
  nameWithType: JsonParser.nextLongValue(long)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
  name: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  nameWithType: ParserMinimalBase.reportUnexpectedNumberChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportUnexpectedNumberChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getByteValue()
  name: JsonParser.getByteValue()
  nameWithType: JsonParser.getByteValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getByteValue()
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  name: JsonParser.getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
  name: ParserMinimalBase._throwInvalidSpace(int)
  nameWithType: ParserMinimalBase._throwInvalidSpace(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
  name: ParserMinimalBase._hasTextualNull(String)
  nameWithType: ParserMinimalBase._hasTextualNull(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._hasTextualNull(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
  name: ParserMinimalBase.reportOverflowInt()
  nameWithType: ParserMinimalBase.reportOverflowInt()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt()
- uid: com.fasterxml.jackson.core.JsonParser.isNaN()
  name: JsonParser.isNaN()
  nameWithType: JsonParser.isNaN()
  fullName: com.fasterxml.jackson.core.JsonParser.isNaN()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  nameWithType: ParserMinimalBase._reportInvalidEOF(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInvalidEOF(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
  name: ParserMinimalBase.getValueAsString(String)
  nameWithType: ParserMinimalBase.getValueAsString(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString(java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
  name: ParserMinimalBase._handleEOF()
  nameWithType: ParserMinimalBase._handleEOF()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._handleEOF()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
  name: ParserMinimalBase.nextToken()
  nameWithType: ParserMinimalBase.nextToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.nextToken()
- uid: com.fasterxml.jackson.core.JsonParser.getNumberValue()
  name: JsonParser.getNumberValue()
  nameWithType: JsonParser.getNumberValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getNumberValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
  name: ParserMinimalBase.getTextCharacters()
  nameWithType: ParserMinimalBase.getTextCharacters()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getTextCharacters()
- uid: com.fasterxml.jackson.core.JsonParser.getSchema()
  name: JsonParser.getSchema()
  nameWithType: JsonParser.getSchema()
  fullName: com.fasterxml.jackson.core.JsonParser.getSchema()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
  name: ParserMinimalBase._constructError(String,Throwable)
  nameWithType: ParserMinimalBase._constructError(String,Throwable)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._constructError(java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
  name: ParserMinimalBase.getCurrentName()
  nameWithType: ParserMinimalBase.getCurrentName()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentName()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
  name: ParserMinimalBase.getCurrentTokenId()
  nameWithType: ParserMinimalBase.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getCurrentTokenId()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowInt(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  name: JsonParser.configure(JsonParser.Feature,boolean)
  nameWithType: JsonParser.configure(JsonParser.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.hasToken(JsonToken)
  nameWithType: ParserMinimalBase.hasToken(JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasToken(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  name: JsonParser.<T>readValuesAs(TypeReference<T>)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.JsonParser.getFloatValue()
  name: JsonParser.getFloatValue()
  nameWithType: JsonParser.getFloatValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getFloatValue()
- uid: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
  name: JsonParser.overrideFormatFeatures(int,int)
  nameWithType: JsonParser.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonParser.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
  name: ParserMinimalBase.reportOverflowInt(String)
  nameWithType: ParserMinimalBase.reportOverflowInt(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowInt(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getLongValue()
  name: JsonParser.getLongValue()
  nameWithType: JsonParser.getLongValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getLongValue()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
  name: ParserMinimalBase.getValueAsString()
  nameWithType: ParserMinimalBase.getValueAsString()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsString()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
  name: ParserMinimalBase.isExpectedStartObjectToken()
  nameWithType: ParserMinimalBase.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.isExpectedStartObjectToken()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
  name: ParserMinimalBase.getParsingContext()
  nameWithType: ParserMinimalBase.getParsingContext()
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getParsingContext()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
  name: ParserMinimalBase.getValueAsDouble(double)
  nameWithType: ParserMinimalBase.getValueAsDouble(double)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsDouble(double)
- uid: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
  name: JsonParser.getFeatureMask()
  nameWithType: JsonParser.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonParser.getFeatureMask()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
  name: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  nameWithType: ParserMinimalBase.reportOverflowLong(String,JsonToken)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportOverflowLong(java.lang.String,com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
  name: ParserMinimalBase.hasTokenId(int)
  nameWithType: ParserMinimalBase.hasTokenId(int)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.hasTokenId(int)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
  name: ParserMinimalBase.getValueAsLong(long)
  nameWithType: ParserMinimalBase.getValueAsLong(long)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.getValueAsLong(long)
- uid: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParser.enable(JsonParser.Feature)
  nameWithType: JsonParser.enable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.JsonParser.enable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
  name: ParserMinimalBase.reportInvalidNumber(String)
  nameWithType: ParserMinimalBase.reportInvalidNumber(String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase.reportInvalidNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParser.setSchema(FormatSchema)
  nameWithType: JsonParser.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonParser.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
  name: JsonParser.setCurrentValue(Object)
  nameWithType: JsonParser.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.JsonParser.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
  name: JsonParser.getValueAsBoolean()
  nameWithType: JsonParser.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.JsonParser.getValueAsBoolean()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonParser.nextFieldName(SerializableString)
  nameWithType: JsonParser.nextFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonParser.getShortValue()
  name: JsonParser.getShortValue()
  nameWithType: JsonParser.getShortValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getShortValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  name: JsonParser.setRequestPayloadOnError(byte[],String)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[],String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
  name: ParserMinimalBase._reportUnexpectedChar(int,String)
  nameWithType: ParserMinimalBase._reportUnexpectedChar(int,String)
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportUnexpectedChar(int,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
  name: JsonParser.getTokenLocation()
  nameWithType: JsonParser.getTokenLocation()
  fullName: com.fasterxml.jackson.core.JsonParser.getTokenLocation()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  name: JsonParser.releaseBuffered(Writer)
  nameWithType: JsonParser.releaseBuffered(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
  name: JsonParser.getDecimalValue()
  nameWithType: JsonParser.getDecimalValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getDecimalValue()
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  name: JsonParser._constructError(String)
  nameWithType: JsonParser._constructError(String)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  name: JsonParser.getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
- uid: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
  name: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  nameWithType: ParserMinimalBase._reportInputCoercion(String,JsonToken,Class
  fullName: com.fasterxml.jackson.core.base.ParserMinimalBase._reportInputCoercion(java.lang.String,com.fasterxml.jackson.core.JsonToken,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.core.JsonParser.
  name: JsonParser.
  nameWithType: JsonParser.
  fullName: com.fasterxml.jackson.core.JsonParser.
- uid: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValueAs(TypeReference
  nameWithType: T>readValueAs(TypeReference
  fullName: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
- uid: T>readValuesAs(java.lang.Class
  name: T>readValuesAs(Class
  nameWithType: T>readValuesAs(Class
  fullName: T>readValuesAs(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValueAsTree()
  name: T>readValueAsTree()
  nameWithType: T>readValueAsTree()
  fullName: T>readValueAsTree()
- uid: T>readValueAs(java.lang.Class
  name: T>readValueAs(Class
  nameWithType: T>readValueAs(Class
  fullName: T>readValueAs(java.lang.Class
- uid: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValuesAs(TypeReference
  nameWithType: T>readValuesAs(TypeReference
  fullName: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
