### YamlMime:ManagedReference
items:
- uid: com.azure.core.util.FluxUtil
  id: FluxUtil
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util
  children:
  - com.azure.core.util.FluxUtil.<T>fluxContext(java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Flux<T>>)
  - com.azure.core.util.FluxUtil.<T>fluxError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  - com.azure.core.util.FluxUtil.<T>monoError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  - com.azure.core.util.FluxUtil.<T>pagedFluxError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  - com.azure.core.util.FluxUtil.<T>toMono(com.azure.core.http.rest.Response<T>)
  - com.azure.core.util.FluxUtil.<T>withContext(java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Mono<T>>)
  - com.azure.core.util.FluxUtil.byteBufferToArray(java.nio.ByteBuffer)
  - com.azure.core.util.FluxUtil.collectBytesInByteBufferStream(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  - com.azure.core.util.FluxUtil.isFluxByteBuffer(java.lang.reflect.Type)
  - com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel)
  - com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel,int,long,long)
  - com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel,long,long)
  - com.azure.core.util.FluxUtil.toReactorContext(com.azure.core.util.Context)
  - com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel)
  - com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel,long)
  langs:
  - java
  name: FluxUtil
  nameWithType: FluxUtil
  fullName: com.azure.core.util.FluxUtil
  type: Class
  package: com.azure.core.util
  summary: Utility type exposing methods to deal with <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref>.
  syntax:
    content: public final class FluxUtil
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.core.util.FluxUtil.<T>fluxContext(java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Flux<T>>)
  id: <T>fluxContext(java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Flux<T>>)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: <T>fluxContext(Function<Context,Flux<T>> serviceCall)
  nameWithType: FluxUtil.<T>fluxContext(Function<Context,Flux<T>> serviceCall)
  fullName: com.azure.core.util.FluxUtil.<T>fluxContext(Function<Context,Flux<T>> serviceCall)
  overload: com.azure.core.util.FluxUtil.fluxContext*
  type: Method
  package: com.azure.core.util
  summary: >-
    This method converts the incoming `subscriberContext` from <xref uid="reactor.util.context.Context" data-throw-if-not-resolved="false">Reactor
     Context</xref> to <xref uid="reactor.util.context.Context" data-throw-if-not-resolved="false">Azure Context</xref> and calls the given lambda function with this context and returns a collection of type `T`

    If the reactor context is empty, <xref uid="com.azure.core.util.Context.NONE" data-throw-if-not-resolved="false">Context#NONE</xref> will be used to call the lambda function


    **Code samples**


    \{@codesnippet com.azure.core.implementation.util.fluxutil.fluxcontext\}
  syntax:
    content: public static Flux<T> <T>fluxContext(Function<Context,Flux<T>> serviceCall)
    parameters:
    - id: serviceCall
      type: java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Flux<T>>
      description: The lambda function that makes the service call into which the context will be passed
    return:
      type: reactor.core.publisher.Flux<T>
      description: The response from service call
- uid: com.azure.core.util.FluxUtil.<T>fluxError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  id: <T>fluxError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: <T>fluxError(ClientLogger logger, RuntimeException ex)
  nameWithType: FluxUtil.<T>fluxError(ClientLogger logger, RuntimeException ex)
  fullName: com.azure.core.util.FluxUtil.<T>fluxError(ClientLogger logger, RuntimeException ex)
  overload: com.azure.core.util.FluxUtil.fluxError*
  type: Method
  package: com.azure.core.util
  summary: Propagates a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> through the error channel of <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref>.
  syntax:
    content: public static Flux<T> <T>fluxError(ClientLogger logger, RuntimeException ex)
    parameters:
    - id: logger
      type: com.azure.core.util.logging.ClientLogger
      description: The <xref uid="com.azure.core.util.logging.ClientLogger" data-throw-if-not-resolved="false">ClientLogger</xref> to log the exception.
    - id: ex
      type: java.lang.RuntimeException
      description: The <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
    return:
      type: reactor.core.publisher.Flux<T>
      description: A <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> that terminates with error wrapping the <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
- uid: com.azure.core.util.FluxUtil.<T>monoError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  id: <T>monoError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: <T>monoError(ClientLogger logger, RuntimeException ex)
  nameWithType: FluxUtil.<T>monoError(ClientLogger logger, RuntimeException ex)
  fullName: com.azure.core.util.FluxUtil.<T>monoError(ClientLogger logger, RuntimeException ex)
  overload: com.azure.core.util.FluxUtil.monoError*
  type: Method
  package: com.azure.core.util
  summary: Propagates a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> through the error channel of <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>.
  syntax:
    content: public static Mono<T> <T>monoError(ClientLogger logger, RuntimeException ex)
    parameters:
    - id: logger
      type: com.azure.core.util.logging.ClientLogger
      description: The <xref uid="com.azure.core.util.logging.ClientLogger" data-throw-if-not-resolved="false">ClientLogger</xref> to log the exception.
    - id: ex
      type: java.lang.RuntimeException
      description: The <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
    return:
      type: reactor.core.publisher.Mono<T>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> that terminates with error wrapping the <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
- uid: com.azure.core.util.FluxUtil.<T>pagedFluxError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  id: <T>pagedFluxError(com.azure.core.util.logging.ClientLogger,java.lang.RuntimeException)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: <T>pagedFluxError(ClientLogger logger, RuntimeException ex)
  nameWithType: FluxUtil.<T>pagedFluxError(ClientLogger logger, RuntimeException ex)
  fullName: com.azure.core.util.FluxUtil.<T>pagedFluxError(ClientLogger logger, RuntimeException ex)
  overload: com.azure.core.util.FluxUtil.pagedFluxError*
  type: Method
  package: com.azure.core.util
  summary: Propagates a <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> through the error channel of <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref>.
  syntax:
    content: public static PagedFlux<T> <T>pagedFluxError(ClientLogger logger, RuntimeException ex)
    parameters:
    - id: logger
      type: com.azure.core.util.logging.ClientLogger
      description: The <xref uid="com.azure.core.util.logging.ClientLogger" data-throw-if-not-resolved="false">ClientLogger</xref> to log the exception.
    - id: ex
      type: java.lang.RuntimeException
      description: The <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
    return:
      type: com.azure.core.http.rest.PagedFlux<T>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> that terminates with error wrapping the <xref uid="java.lang.RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref>.
- uid: com.azure.core.util.FluxUtil.<T>toMono(com.azure.core.http.rest.Response<T>)
  id: <T>toMono(com.azure.core.http.rest.Response<T>)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: <T>toMono(Response<T> response)
  nameWithType: FluxUtil.<T>toMono(Response<T> response)
  fullName: com.azure.core.util.FluxUtil.<T>toMono(Response<T> response)
  overload: com.azure.core.util.FluxUtil.toMono*
  type: Method
  package: com.azure.core.util
  summary: Converts the incoming content to Mono.
  syntax:
    content: public static Mono<T> <T>toMono(Response<T> response)
    parameters:
    - id: response
      type: com.azure.core.http.rest.Response<T>
      description: whose <xref uid="com.azure.core.http.rest.Response.getValue()" data-throw-if-not-resolved="false">value</xref> is to be converted
    return:
      type: reactor.core.publisher.Mono<T>
      description: The converted <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>
- uid: com.azure.core.util.FluxUtil.<T>withContext(java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Mono<T>>)
  id: <T>withContext(java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Mono<T>>)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: <T>withContext(Function<Context,Mono<T>> serviceCall)
  nameWithType: FluxUtil.<T>withContext(Function<Context,Mono<T>> serviceCall)
  fullName: com.azure.core.util.FluxUtil.<T>withContext(Function<Context,Mono<T>> serviceCall)
  overload: com.azure.core.util.FluxUtil.withContext*
  type: Method
  package: com.azure.core.util
  summary: >-
    This method converts the incoming `subscriberContext` from <xref uid="reactor.util.context.Context" data-throw-if-not-resolved="false">Reactor
     Context</xref> to <xref uid="reactor.util.context.Context" data-throw-if-not-resolved="false">Azure Context</xref> and calls the given lambda function with this context and returns a single entity of type `T`

    If the reactor context is empty, <xref uid="com.azure.core.util.Context.NONE" data-throw-if-not-resolved="false">Context#NONE</xref> will be used to call the lambda function


    **Code samples**


    \{@codesnippet com.azure.core.implementation.util.fluxutil.withcontext\}
  syntax:
    content: public static Mono<T> <T>withContext(Function<Context,Mono<T>> serviceCall)
    parameters:
    - id: serviceCall
      type: java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Mono<T>>
      description: The lambda function that makes the service call into which azure context will be passed
    return:
      type: reactor.core.publisher.Mono<T>
      description: The response from service call
- uid: com.azure.core.util.FluxUtil.FluxUtil()
  id: FluxUtil()
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: FluxUtil()
  nameWithType: FluxUtil.FluxUtil()
  fullName: com.azure.core.util.FluxUtil.FluxUtil()
  overload: com.azure.core.util.FluxUtil.FluxUtil*
  type: Constructor
  package: com.azure.core.util
  syntax:
    content: private FluxUtil()
- uid: com.azure.core.util.FluxUtil.byteBufferToArray(java.nio.ByteBuffer)
  id: byteBufferToArray(java.nio.ByteBuffer)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: byteBufferToArray(ByteBuffer byteBuffer)
  nameWithType: FluxUtil.byteBufferToArray(ByteBuffer byteBuffer)
  fullName: com.azure.core.util.FluxUtil.byteBufferToArray(ByteBuffer byteBuffer)
  overload: com.azure.core.util.FluxUtil.byteBufferToArray*
  type: Method
  package: com.azure.core.util
  summary: Gets the content of the provided ByteBuffer as a byte array. This method will create a new byte array even if the ByteBuffer can have optionally backing array.
  syntax:
    content: public static byte[] byteBufferToArray(ByteBuffer byteBuffer)
    parameters:
    - id: byteBuffer
      type: java.nio.ByteBuffer
      description: the byte buffer
    return:
      type: byte[]
      description: the byte array
- uid: com.azure.core.util.FluxUtil.collectBytesInByteBufferStream(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  id: collectBytesInByteBufferStream(reactor.core.publisher.Flux<java.nio.ByteBuffer>)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: collectBytesInByteBufferStream(Flux<ByteBuffer> stream)
  nameWithType: FluxUtil.collectBytesInByteBufferStream(Flux<ByteBuffer> stream)
  fullName: com.azure.core.util.FluxUtil.collectBytesInByteBufferStream(Flux<ByteBuffer> stream)
  overload: com.azure.core.util.FluxUtil.collectBytesInByteBufferStream*
  type: Method
  package: com.azure.core.util
  summary: Collects ByteBuffer emitted by a Flux into a byte array.
  syntax:
    content: public static Mono<byte[]> collectBytesInByteBufferStream(Flux<ByteBuffer> stream)
    parameters:
    - id: stream
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: A stream which emits ByteBuffer instances.
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: A Mono which emits the concatenation of all the ByteBuffer instances given by the source Flux.
- uid: com.azure.core.util.FluxUtil.isFluxByteBuffer(java.lang.reflect.Type)
  id: isFluxByteBuffer(java.lang.reflect.Type)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: isFluxByteBuffer(Type entityType)
  nameWithType: FluxUtil.isFluxByteBuffer(Type entityType)
  fullName: com.azure.core.util.FluxUtil.isFluxByteBuffer(Type entityType)
  overload: com.azure.core.util.FluxUtil.isFluxByteBuffer*
  type: Method
  package: com.azure.core.util
  summary: Checks if a type is Flux<ByteBuffer>.
  syntax:
    content: public static boolean isFluxByteBuffer(Type entityType)
    parameters:
    - id: entityType
      type: java.lang.reflect.Type
      description: the type to check
    return:
      type: boolean
      description: whether the type represents a Flux that emits ByteBuffer
- uid: com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel)
  id: readFile(java.nio.channels.AsynchronousFileChannel)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: readFile(AsynchronousFileChannel fileChannel)
  nameWithType: FluxUtil.readFile(AsynchronousFileChannel fileChannel)
  fullName: com.azure.core.util.FluxUtil.readFile(AsynchronousFileChannel fileChannel)
  overload: com.azure.core.util.FluxUtil.readFile*
  type: Method
  package: com.azure.core.util
  summary: Creates a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> from an <xref uid="java.nio.channels.AsynchronousFileChannel" data-throw-if-not-resolved="false">AsynchronousFileChannel</xref> which reads the entire file.
  syntax:
    content: public static Flux<ByteBuffer> readFile(AsynchronousFileChannel fileChannel)
    parameters:
    - id: fileChannel
      type: java.nio.channels.AsynchronousFileChannel
      description: The file channel.
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: The AsyncInputStream.
- uid: com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel,int,long,long)
  id: readFile(java.nio.channels.AsynchronousFileChannel,int,long,long)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
  nameWithType: FluxUtil.readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
  fullName: com.azure.core.util.FluxUtil.readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
  overload: com.azure.core.util.FluxUtil.readFile*
  type: Method
  package: com.azure.core.util
  summary: Creates a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> from an <xref uid="java.nio.channels.AsynchronousFileChannel" data-throw-if-not-resolved="false">AsynchronousFileChannel</xref> which reads part of a file into chunks of the given size.
  syntax:
    content: public static Flux<ByteBuffer> readFile(AsynchronousFileChannel fileChannel, int chunkSize, long offset, long length)
    parameters:
    - id: fileChannel
      type: java.nio.channels.AsynchronousFileChannel
      description: The file channel.
    - id: chunkSize
      type: int
      description: the size of file chunks to read.
    - id: offset
      type: long
      description: The offset in the file to begin reading.
    - id: length
      type: long
      description: The number of bytes to read from the file.
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: the Flux.
- uid: com.azure.core.util.FluxUtil.readFile(java.nio.channels.AsynchronousFileChannel,long,long)
  id: readFile(java.nio.channels.AsynchronousFileChannel,long,long)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: readFile(AsynchronousFileChannel fileChannel, long offset, long length)
  nameWithType: FluxUtil.readFile(AsynchronousFileChannel fileChannel, long offset, long length)
  fullName: com.azure.core.util.FluxUtil.readFile(AsynchronousFileChannel fileChannel, long offset, long length)
  overload: com.azure.core.util.FluxUtil.readFile*
  type: Method
  package: com.azure.core.util
  summary: Creates a <xref uid="reactor.core.publisher.Flux" data-throw-if-not-resolved="false">Flux</xref> from an <xref uid="java.nio.channels.AsynchronousFileChannel" data-throw-if-not-resolved="false">AsynchronousFileChannel</xref> which reads part of a file.
  syntax:
    content: public static Flux<ByteBuffer> readFile(AsynchronousFileChannel fileChannel, long offset, long length)
    parameters:
    - id: fileChannel
      type: java.nio.channels.AsynchronousFileChannel
      description: The file channel.
    - id: offset
      type: long
      description: The offset in the file to begin reading.
    - id: length
      type: long
      description: The number of bytes to read from the file.
    return:
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: the Flux.
- uid: com.azure.core.util.FluxUtil.toReactorContext(com.azure.core.util.Context)
  id: toReactorContext(com.azure.core.util.Context)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: toReactorContext(Context context)
  nameWithType: FluxUtil.toReactorContext(Context context)
  fullName: com.azure.core.util.FluxUtil.toReactorContext(Context context)
  overload: com.azure.core.util.FluxUtil.toReactorContext*
  type: Method
  package: com.azure.core.util
  summary: Converts an Azure context to Reactor context. If the Azure context is `null` or empty, <xref uid="reactor.util.context.Context.empty*" data-throw-if-not-resolved="false">reactor.util.context.Context#empty()</xref> will be returned.
  syntax:
    content: public static Context toReactorContext(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: The Azure context.
    return:
      type: reactor.util.context.Context
      description: The Reactor context.
- uid: com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel)
  id: writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)
  nameWithType: FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)
  fullName: com.azure.core.util.FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)
  overload: com.azure.core.util.FluxUtil.writeFile*
  type: Method
  package: com.azure.core.util
  summary: Writes the bytes emitted by a Flux to an AsynchronousFileChannel.
  syntax:
    content: public static Mono<Void> writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile)
    parameters:
    - id: content
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: the Flux content
    - id: outFile
      type: java.nio.channels.AsynchronousFileChannel
      description: the file channel
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a Mono which performs the write operation when subscribed
- uid: com.azure.core.util.FluxUtil.writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel,long)
  id: writeFile(reactor.core.publisher.Flux<java.nio.ByteBuffer>,java.nio.channels.AsynchronousFileChannel,long)
  artifact: com.azure:azure-core:1.3.0-beta.1
  parent: com.azure.core.util.FluxUtil
  langs:
  - java
  name: writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)
  nameWithType: FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)
  fullName: com.azure.core.util.FluxUtil.writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)
  overload: com.azure.core.util.FluxUtil.writeFile*
  type: Method
  package: com.azure.core.util
  summary: Writes the bytes emitted by a Flux to an AsynchronousFileChannel starting at the given position in the file.
  syntax:
    content: public static Mono<Void> writeFile(Flux<ByteBuffer> content, AsynchronousFileChannel outFile, long position)
    parameters:
    - id: content
      type: reactor.core.publisher.Flux<java.nio.ByteBuffer>
      description: the Flux content
    - id: outFile
      type: java.nio.channels.AsynchronousFileChannel
      description: the file channel
    - id: position
      type: long
      description: the position in the file to begin writing
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a Mono which performs the write operation when subscribed
references:
- uid: com.azure.core.util.FluxUtil.FluxUtil*
  name: FluxUtil
  nameWithType: FluxUtil.FluxUtil
  fullName: com.azure.core.util.FluxUtil.FluxUtil
  package: com.azure.core.util
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.util.FluxUtil.isFluxByteBuffer*
  name: isFluxByteBuffer
  nameWithType: FluxUtil.isFluxByteBuffer
  fullName: com.azure.core.util.FluxUtil.isFluxByteBuffer
  package: com.azure.core.util
- uid: reactor.core.publisher.Flux<java.nio.ByteBuffer>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.collectBytesInByteBufferStream*
  name: collectBytesInByteBufferStream
  nameWithType: FluxUtil.collectBytesInByteBufferStream
  fullName: com.azure.core.util.FluxUtil.collectBytesInByteBufferStream
  package: com.azure.core.util
- uid: java.nio.ByteBuffer
  spec.java:
  - uid: java.nio.ByteBuffer
    name: ByteBuffer
    fullName: java.nio.ByteBuffer
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.core.util.FluxUtil.byteBufferToArray*
  name: byteBufferToArray
  nameWithType: FluxUtil.byteBufferToArray
  fullName: com.azure.core.util.FluxUtil.byteBufferToArray
  package: com.azure.core.util
- uid: java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Mono<T>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
  - name: ','
    fullName: ','
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: reactor.core.publisher.Mono<T>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.withContext*
  name: <T>withContext
  nameWithType: FluxUtil.<T>withContext
  fullName: com.azure.core.util.FluxUtil.<T>withContext
  package: com.azure.core.util
- uid: com.azure.core.http.rest.Response<T>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.toMono*
  name: <T>toMono
  nameWithType: FluxUtil.<T>toMono
  fullName: com.azure.core.util.FluxUtil.<T>toMono
  package: com.azure.core.util
- uid: com.azure.core.util.logging.ClientLogger
  name: ClientLogger
  nameWithType: ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger
- uid: java.lang.RuntimeException
  spec.java:
  - uid: java.lang.RuntimeException
    name: RuntimeException
    fullName: java.lang.RuntimeException
- uid: com.azure.core.util.FluxUtil.monoError*
  name: <T>monoError
  nameWithType: FluxUtil.<T>monoError
  fullName: com.azure.core.util.FluxUtil.<T>monoError
  package: com.azure.core.util
- uid: reactor.core.publisher.Flux<T>
  spec.java:
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.fluxError*
  name: <T>fluxError
  nameWithType: FluxUtil.<T>fluxError
  fullName: com.azure.core.util.FluxUtil.<T>fluxError
  package: com.azure.core.util
- uid: com.azure.core.http.rest.PagedFlux<T>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.pagedFluxError*
  name: <T>pagedFluxError
  nameWithType: FluxUtil.<T>pagedFluxError
  fullName: com.azure.core.util.FluxUtil.<T>pagedFluxError
  package: com.azure.core.util
- uid: java.util.function.Function<com.azure.core.util.Context,reactor.core.publisher.Flux<T>>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
  - name: ','
    fullName: ','
  - uid: reactor.core.publisher.Flux
    name: Flux
    fullName: reactor.core.publisher.Flux
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.fluxContext*
  name: <T>fluxContext
  nameWithType: FluxUtil.<T>fluxContext
  fullName: com.azure.core.util.FluxUtil.<T>fluxContext
  package: com.azure.core.util
- uid: com.azure.core.util.Context
  name: Context
  nameWithType: Context
  fullName: com.azure.core.util.Context
- uid: reactor.util.context.Context
  spec.java:
  - uid: reactor.util.context.Context
    name: Context
    fullName: reactor.util.context.Context
- uid: com.azure.core.util.FluxUtil.toReactorContext*
  name: toReactorContext
  nameWithType: FluxUtil.toReactorContext
  fullName: com.azure.core.util.FluxUtil.toReactorContext
  package: com.azure.core.util
- uid: java.nio.channels.AsynchronousFileChannel
  spec.java:
  - uid: java.nio.channels.AsynchronousFileChannel
    name: AsynchronousFileChannel
    fullName: java.nio.channels.AsynchronousFileChannel
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.FluxUtil.writeFile*
  name: writeFile
  nameWithType: FluxUtil.writeFile
  fullName: com.azure.core.util.FluxUtil.writeFile
  package: com.azure.core.util
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.core.util.FluxUtil.readFile*
  name: readFile
  nameWithType: FluxUtil.readFile
  fullName: com.azure.core.util.FluxUtil.readFile
  package: com.azure.core.util
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Flux
  name: Flux
  nameWithType: Flux
  fullName: reactor.core.publisher.Flux
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: com.azure.core.util.Context,reactor.core.publisher.Mono
  name: Context,Mono
  nameWithType: Context,Mono
  fullName: com.azure.core.util.Context,reactor.core.publisher.Mono
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.core.util.Context,reactor.core.publisher.Flux
  name: Context,Flux
  nameWithType: Context,Flux
  fullName: com.azure.core.util.Context,reactor.core.publisher.Flux
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
