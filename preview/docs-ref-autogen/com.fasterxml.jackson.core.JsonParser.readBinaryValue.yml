### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.JsonParser.readBinaryValue*"
fullName: "com.fasterxml.jackson.core.JsonParser.readBinaryValue"
name: "readBinaryValue"
nameWithType: "JsonParser.readBinaryValue"
members:
- uid: "com.fasterxml.jackson.core.JsonParser.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)"
  fullName: "com.fasterxml.jackson.core.JsonParser.readBinaryValue(Base64Variant bv, OutputStream out)"
  name: "readBinaryValue(Base64Variant bv, OutputStream out)"
  nameWithType: "JsonParser.readBinaryValue(Base64Variant bv, OutputStream out)"
  summary: "Similar to <xref uid=\"com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#readBinaryValue(OutputStream)\"></xref> but allows explicitly specifying base64 variant to use."
  parameters:
  - description: "base64 variant to use"
    name: "bv"
    type: "<xref href=\"com.fasterxml.jackson.core.Base64Variant?alt=com.fasterxml.jackson.core.Base64Variant&text=Base64Variant\" data-throw-if-not-resolved=\"False\" />"
  - description: "Output stream to use for passing decoded binary data"
    name: "out"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int readBinaryValue(Base64Variant bv, OutputStream out)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Number of bytes that were decoded and written via <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref>"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)"
  fullName: "com.fasterxml.jackson.core.JsonParser.readBinaryValue(OutputStream out)"
  name: "readBinaryValue(OutputStream out)"
  nameWithType: "JsonParser.readBinaryValue(OutputStream out)"
  summary: "Method that can be used as an alternative to <xref uid=\"com.fasterxml.jackson.core.JsonParser.getBigIntegerValue()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getBigIntegerValue()\"></xref>, especially when value can be large. The main difference (beyond method of returning content using <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref> instead of as byte array) is that content will NOT remain accessible after method returns: any content processed will be consumed and is not buffered in any way. If caller needs buffering, it has to implement it."
  parameters:
  - description: "Output stream to use for passing decoded binary data"
    name: "out"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int readBinaryValue(OutputStream out)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "Number of bytes that were decoded and written via <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref>"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
