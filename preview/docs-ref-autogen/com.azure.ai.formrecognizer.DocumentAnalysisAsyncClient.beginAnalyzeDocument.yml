### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.DocumentAnalysisAsyncClient.beginAnalyzeDocument*"
fullName: "com.azure.ai.formrecognizer.DocumentAnalysisAsyncClient.beginAnalyzeDocument"
name: "beginAnalyzeDocument"
nameWithType: "DocumentAnalysisAsyncClient.beginAnalyzeDocument"
members:
- uid: "com.azure.ai.formrecognizer.DocumentAnalysisAsyncClient.beginAnalyzeDocument(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)"
  fullName: "com.azure.ai.formrecognizer.DocumentAnalysisAsyncClient.beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length)"
  name: "beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length)"
  nameWithType: "DocumentAnalysisAsyncClient.beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length)"
  summary: "Analyzes data from documents with optical character recognition (OCR) and semantic values from a given document using any of the prebuilt models or a custom-built analysis model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\nAnalyze a document.\n\n```java\nFile document = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{model_id}\";\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer =\n     Utility.toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(document.toPath())));\n\n documentAnalysisAsyncClient.beginAnalyzeDocument(modelId, buffer, document.length())\n     // if polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(analyzeResult ->\n         analyzeResult.getDocuments()\n             .stream()\n             .forEach(analyzedDocument ->\n                 analyzedDocument.getFields()\n                     .forEach((key, documentField) -> {\n                         System.out.printf(\"Field text: %s%n\", key);\n                         System.out.printf(\"Field value data content: %s%n\", documentField.getContent());\n                         System.out.printf(\"Confidence score: %.2f%n\", documentField.getConfidence());\n                     })));\n```"
  parameters:
  - description: "The unique model ID to be used. Use this to specify the custom model ID or prebuilt model ID.\n Prebuilt model IDs supported can be found <a href=\"https://aka.ms/azsdk/formrecognizer/models\">here</a>"
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data of the document to analyze information from."
    name: "document"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<DocumentOperationResult,AnalyzeResult> beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the progress of the analyze document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns an <xref uid=\"com.azure.ai.formrecognizer.models.AnalyzeResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeResult\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.models.AnalyzeResult?alt=com.azure.ai.formrecognizer.models.AnalyzeResult&text=AnalyzeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.DocumentAnalysisAsyncClient.beginAnalyzeDocument(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.AnalyzeDocumentOptions)"
  fullName: "com.azure.ai.formrecognizer.DocumentAnalysisAsyncClient.beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length, AnalyzeDocumentOptions analyzeDocumentOptions)"
  name: "beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length, AnalyzeDocumentOptions analyzeDocumentOptions)"
  nameWithType: "DocumentAnalysisAsyncClient.beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length, AnalyzeDocumentOptions analyzeDocumentOptions)"
  summary: "Analyzes data from documents with optical character recognition (OCR) and semantic values from a given document using any of the prebuilt models or a custom-built analysis model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nNote that the `data` passed must be replayable if retries are enabled (the default). In other words, the `Flux` must produce the same data each time it is subscribed to.\n\n**Code sample**\n\nAnalyze a document with configurable options. .\n\n```java\nFile document = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{model_id}\";\n\n // Utility method to convert input stream to Byte buffer\n Flux<ByteBuffer> buffer =\n     Utility.toFluxByteBuffer(new ByteArrayInputStream(Files.readAllBytes(document.toPath())));\n\n documentAnalysisAsyncClient.beginAnalyzeDocument(modelId, buffer, document.length(),\n         new AnalyzeDocumentOptions().setPages(Arrays.asList(\"1\", \"3\")))\n     // if polling operation completed, retrieve the final result.\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(analyzeResult -> {\n         System.out.println(analyzeResult.getModelId());\n         analyzeResult.getDocuments()\n             .stream()\n             .forEach(analyzedDocument ->\n                 analyzedDocument.getFields()\n                     .forEach((key, documentField) -> {\n                         System.out.printf(\"Field text: %s%n\", key);\n                         System.out.printf(\"Field value data content: %s%n\", documentField.getContent());\n                         System.out.printf(\"Confidence score: %.2f%n\", documentField.getConfidence());\n                     }));\n     });\n```"
  parameters:
  - description: "The unique model ID to be used. Use this to specify the custom model ID or prebuilt model ID.\n Prebuilt model IDs supported can be found <a href=\"https://aka.ms/azsdk/formrecognizer/models\">here</a>"
    name: "modelId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The data of the document to analyze information from."
    name: "document"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The exact length of the data."
    name: "length"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.AnalyzeDocumentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be\n passed when analyzing documents."
    name: "analyzeDocumentOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.AnalyzeDocumentOptions?alt=com.azure.ai.formrecognizer.models.AnalyzeDocumentOptions&text=AnalyzeDocumentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<DocumentOperationResult,AnalyzeResult> beginAnalyzeDocument(String modelId, Flux<ByteBuffer> document, long length, AnalyzeDocumentOptions analyzeDocumentOptions)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the progress of the analyze document operation until it has completed,\n has failed, or has been cancelled. The completed operation returns an <xref uid=\"com.azure.ai.formrecognizer.models.AnalyzeResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeResult\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.DocumentOperationResult?alt=com.azure.ai.formrecognizer.models.DocumentOperationResult&text=DocumentOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.ai.formrecognizer.models.AnalyzeResult?alt=com.azure.ai.formrecognizer.models.AnalyzeResult&text=AnalyzeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:4.0.0-beta.3
