### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava27.Strings
  id: Strings
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava27
  children:
  - com.azure.cosmos.implementation.guava27.Strings.Strings()
  - com.azure.cosmos.implementation.guava27.Strings.lenientFormat(java.lang.String,java.lang.Object...)
  langs:
  - java
  name: Strings
  nameWithType: Strings
  fullName: com.azure.cosmos.implementation.guava27.Strings
  type: Class
  package: com.azure.cosmos.implementation.guava27
  syntax:
    content: public class Strings
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava27.Strings.Strings()
  id: Strings()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava27.Strings
  langs:
  - java
  name: Strings()
  nameWithType: Strings.Strings()
  fullName: com.azure.cosmos.implementation.guava27.Strings.Strings()
  overload: com.azure.cosmos.implementation.guava27.Strings.Strings*
  type: Constructor
  package: com.azure.cosmos.implementation.guava27
  syntax:
    content: public Strings()
- uid: com.azure.cosmos.implementation.guava27.Strings.lenientFormat(java.lang.String,java.lang.Object...)
  id: lenientFormat(java.lang.String,java.lang.Object...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava27.Strings
  langs:
  - java
  name: lenientFormat(String template, Object[] args)
  nameWithType: Strings.lenientFormat(String template, Object[] args)
  fullName: com.azure.cosmos.implementation.guava27.Strings.lenientFormat(String template, Object[] args)
  overload: com.azure.cosmos.implementation.guava27.Strings.lenientFormat*
  type: Method
  package: com.azure.cosmos.implementation.guava27
  summary: >-
    Returns the given `template` string with each occurrence of `"%s"` replaced with the corresponding argument value from `args`; or, if the placeholder and argument counts do not match, returns a best-effort form of that string. Will not throw an exception under normal conditions.


    **Note:** For most string-formatting needs, use <xref uid="java.lang.String.format" data-throw-if-not-resolved="false">String.format</xref>, <xref uid="" data-throw-if-not-resolved="false">PrintWriter.format</xref>, and related methods. These support the full range of [format specifiers][], and alert you to usage errors by throwing <xref uid="" data-throw-if-not-resolved="false">java.util.IllegalFormatException</xref>.


    In certain cases, such as outputting debugging information or constructing a message to be used for another unchecked exception, an exception during string formatting would serve little purpose except to supplant the real information you were trying to provide. These are the cases this method is made for; it instead generates a best-effort string with all supplied argument values present. This method is also useful in environments such as GWT where `String.format` is not available. As an example, method implementations of the <xref uid="" data-throw-if-not-resolved="false">com.google.common.base.Preconditions</xref> class use this formatter, for both of the reasons just discussed.


    **Warning:** Only the exact two-character placeholder sequence `"%s"` is recognized.



    [format specifiers]: https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax
  syntax:
    content: public static String lenientFormat(String template, Object[] args)
    parameters:
    - id: template
      type: java.lang.String
      description: >-
        a string containing zero or more <code>"%s"</code> placeholder sequences. <code>
             null</code> is treated as the four-character string <code>"null"</code>.
    - id: args
      type: java.lang.Object[]
      description: >-
        the arguments to be substituted into the message template. The first argument
             specified is substituted for the first occurrence of <code>"%s"</code> in the template, and so
             forth. A <code>null</code> argument is converted to the four-character string <code>"null"</code>;
             non-null values are converted to strings using <xref uid="java.lang.Object.toString()" data-throw-if-not-resolved="false">Object#toString()</xref>.
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava27.Strings.Strings*
  name: Strings
  nameWithType: Strings.Strings
  fullName: com.azure.cosmos.implementation.guava27.Strings.Strings
  package: com.azure.cosmos.implementation.guava27
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava27.Strings.lenientFormat*
  name: lenientFormat
  nameWithType: Strings.lenientFormat
  fullName: com.azure.cosmos.implementation.guava27.Strings.lenientFormat
  package: com.azure.cosmos.implementation.guava27
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
