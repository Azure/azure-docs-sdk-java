### YamlMime:JavaType
uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest"
fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest"
name: "CheckPrincipalAccessRequest"
nameWithType: "CheckPrincipalAccessRequest"
summary: "Check access request details."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CheckPrincipalAccessRequest"
constructors:
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.CheckPrincipalAccessRequest()"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.CheckPrincipalAccessRequest()"
  name: "CheckPrincipalAccessRequest()"
  nameWithType: "CheckPrincipalAccessRequest.CheckPrincipalAccessRequest()"
  syntax: "public CheckPrincipalAccessRequest()"
methods:
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.getActions()"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.getActions()"
  name: "getActions()"
  nameWithType: "CheckPrincipalAccessRequest.getActions()"
  summary: "Get the actions property: List of actions."
  syntax: "public List<RequiredAction> getActions()"
  desc: "Get the actions property: List of actions."
  returns:
    description: "the actions value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.accesscontrol.models.RequiredAction?alt=com.azure.analytics.synapse.accesscontrol.models.RequiredAction&text=RequiredAction\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.getScope()"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.getScope()"
  name: "getScope()"
  nameWithType: "CheckPrincipalAccessRequest.getScope()"
  summary: "Get the scope property: Scope at which the check access is done."
  syntax: "public String getScope()"
  desc: "Get the scope property: Scope at which the check access is done."
  returns:
    description: "the scope value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.getSubject()"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.getSubject()"
  name: "getSubject()"
  nameWithType: "CheckPrincipalAccessRequest.getSubject()"
  summary: "Get the subject property: Subject details."
  syntax: "public SubjectInfo getSubject()"
  desc: "Get the subject property: Subject details."
  returns:
    description: "the subject value."
    type: "<xref href=\"com.azure.analytics.synapse.accesscontrol.models.SubjectInfo?alt=com.azure.analytics.synapse.accesscontrol.models.SubjectInfo&text=SubjectInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.setActions(java.util.List<com.azure.analytics.synapse.accesscontrol.models.RequiredAction>)"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.setActions(List<RequiredAction> actions)"
  name: "setActions(List<RequiredAction> actions)"
  nameWithType: "CheckPrincipalAccessRequest.setActions(List<RequiredAction> actions)"
  summary: "Set the actions property: List of actions."
  parameters:
  - description: "the actions value to set."
    name: "actions"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.analytics.synapse.accesscontrol.models.RequiredAction?alt=com.azure.analytics.synapse.accesscontrol.models.RequiredAction&text=RequiredAction\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public CheckPrincipalAccessRequest setActions(List<RequiredAction> actions)"
  desc: "Set the actions property: List of actions."
  returns:
    description: "the CheckPrincipalAccessRequest object itself."
    type: "<xref href=\"com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest?alt=com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest&text=CheckPrincipalAccessRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.setScope(java.lang.String)"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.setScope(String scope)"
  name: "setScope(String scope)"
  nameWithType: "CheckPrincipalAccessRequest.setScope(String scope)"
  summary: "Set the scope property: Scope at which the check access is done."
  parameters:
  - description: "the scope value to set."
    name: "scope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CheckPrincipalAccessRequest setScope(String scope)"
  desc: "Set the scope property: Scope at which the check access is done."
  returns:
    description: "the CheckPrincipalAccessRequest object itself."
    type: "<xref href=\"com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest?alt=com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest&text=CheckPrincipalAccessRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.setSubject(com.azure.analytics.synapse.accesscontrol.models.SubjectInfo)"
  fullName: "com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest.setSubject(SubjectInfo subject)"
  name: "setSubject(SubjectInfo subject)"
  nameWithType: "CheckPrincipalAccessRequest.setSubject(SubjectInfo subject)"
  summary: "Set the subject property: Subject details."
  parameters:
  - description: "the subject value to set."
    name: "subject"
    type: "<xref href=\"com.azure.analytics.synapse.accesscontrol.models.SubjectInfo?alt=com.azure.analytics.synapse.accesscontrol.models.SubjectInfo&text=SubjectInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CheckPrincipalAccessRequest setSubject(SubjectInfo subject)"
  desc: "Set the subject property: Subject details."
  returns:
    description: "the CheckPrincipalAccessRequest object itself."
    type: "<xref href=\"com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest?alt=com.azure.analytics.synapse.accesscontrol.models.CheckPrincipalAccessRequest&text=CheckPrincipalAccessRequest\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Check access request details."
metadata: {}
package: "com.azure.analytics.synapse.accesscontrol.models"
artifact: com.azure:azure-analytics-synapse-accesscontrol:1.0.0-beta.4
