### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice"
fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice"
name: "ExportImportDevice"
nameWithType: "ExportImportDevice"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ExportImportDevice"
constructors:
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.ExportImportDevice()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.ExportImportDevice()"
  name: "ExportImportDevice()"
  nameWithType: "ExportImportDevice.ExportImportDevice()"
  summary: "Default constructor for an Export<wbr>Import<wbr>Device object."
  syntax: "public ExportImportDevice()"
  desc: "Default constructor for an ExportImportDevice object. Randomly generates a device ID and uses a randomly generated shared access signature for authentication"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.ExportImportDevice(java.lang.String,com.microsoft.azure.sdk.iot.service.auth.AuthenticationType)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.ExportImportDevice(String deviceId, AuthenticationType authenticationType)"
  name: "ExportImportDevice(String deviceId, AuthenticationType authenticationType)"
  nameWithType: "ExportImportDevice.ExportImportDevice(String deviceId, AuthenticationType authenticationType)"
  summary: "Constructor for an Export<wbr>Import<wbr>Device object."
  parameters:
  - description: "the id of the new device"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the type of authentication to be used. For shared access signature and self signed x.509, all keys shall be generated automatically."
    name: "authenticationType"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.auth.AuthenticationType?alt=com.microsoft.azure.sdk.iot.service.auth.AuthenticationType&text=AuthenticationType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ExportImportDevice(String deviceId, AuthenticationType authenticationType)"
  exceptions:
  - description: "if the provided deviceId or authenticationType is null or empty"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Constructor for an ExportImportDevice object."
methods:
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.equals(java.lang.Object)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.equals(Object other)"
  name: "equals(Object other)"
  nameWithType: "ExportImportDevice.equals(Object other)"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  parameters:
  - name: "other"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean equals(Object other)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getAuthenticationFinal()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getAuthenticationFinal()"
  name: "getAuthenticationFinal()"
  nameWithType: "ExportImportDevice.getAuthenticationFinal()"
  summary: "Getter for device authentication mechanism."
  syntax: "public AuthenticationMechanism getAuthenticationFinal()"
  desc: "Getter for device authentication mechanism."
  returns:
    description: "The device authentication mechanism."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.auth.AuthenticationMechanism?alt=com.microsoft.azure.sdk.iot.service.auth.AuthenticationMechanism&text=AuthenticationMechanism\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getDesiredProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getDesiredProperties()"
  name: "getDesiredProperties()"
  nameWithType: "ExportImportDevice.getDesiredProperties()"
  syntax: "public TwinCollection getDesiredProperties()"
  returns:
    description: "the desiredProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getId()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getId()"
  name: "getId()"
  nameWithType: "ExportImportDevice.getId()"
  summary: "Getter for device id."
  syntax: "public String getId()"
  desc: "Getter for device id."
  returns:
    description: "The device id."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getImportMode()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getImportMode()"
  name: "getImportMode()"
  nameWithType: "ExportImportDevice.getImportMode()"
  summary: "Getter for device import mode."
  syntax: "public ImportMode getImportMode()"
  desc: "Getter for device import mode."
  returns:
    description: "The device import mode."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.ImportMode?alt=com.microsoft.azure.sdk.iot.service.ImportMode&text=ImportMode\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getReportedProperties()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getReportedProperties()"
  name: "getReportedProperties()"
  nameWithType: "ExportImportDevice.getReportedProperties()"
  syntax: "public TwinCollection getReportedProperties()"
  returns:
    description: "the reportedProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getStatus()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getStatus()"
  name: "getStatus()"
  nameWithType: "ExportImportDevice.getStatus()"
  summary: "Getter for device status."
  syntax: "public DeviceStatus getStatus()"
  desc: "Getter for device status."
  returns:
    description: "The device status."
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.DeviceStatus?alt=com.microsoft.azure.sdk.iot.service.DeviceStatus&text=DeviceStatus\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getStatusReason()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getStatusReason()"
  name: "getStatusReason()"
  nameWithType: "ExportImportDevice.getStatusReason()"
  summary: "Getter for device status reason."
  syntax: "public String getStatusReason()"
  desc: "Getter for device status reason."
  returns:
    description: "The device status reason."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getTags()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.getTags()"
  name: "getTags()"
  nameWithType: "ExportImportDevice.getTags()"
  syntax: "public TwinCollection getTags()"
  returns:
    description: "the tags"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.geteTag()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.geteTag()"
  name: "geteTag()"
  nameWithType: "ExportImportDevice.geteTag()"
  summary: "Getter for device e<wbr>Tag."
  syntax: "public String geteTag()"
  desc: "Getter for device eTag."
  returns:
    description: "The device eTag."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.hashCode()"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.hashCode()"
  name: "hashCode()"
  nameWithType: "ExportImportDevice.hashCode()"
  overridden: "java.lang.Object.hashCode()"
  syntax: "public int hashCode()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setAuthentication(com.microsoft.azure.sdk.iot.service.auth.AuthenticationMechanism)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setAuthentication(AuthenticationMechanism authentication)"
  name: "setAuthentication(AuthenticationMechanism authentication)"
  nameWithType: "ExportImportDevice.setAuthentication(AuthenticationMechanism authentication)"
  summary: "Setter for device authentication mechanism."
  parameters:
  - description: "The device authentication mechanism."
    name: "authentication"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.auth.AuthenticationMechanism?alt=com.microsoft.azure.sdk.iot.service.auth.AuthenticationMechanism&text=AuthenticationMechanism\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setAuthentication(AuthenticationMechanism authentication)"
  exceptions:
  - description: "if the provided authentication is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Setter for device authentication mechanism."
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setDesiredProperties(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setDesiredProperties(TwinCollection desiredProperties)"
  name: "setDesiredProperties(TwinCollection desiredProperties)"
  nameWithType: "ExportImportDevice.setDesiredProperties(TwinCollection desiredProperties)"
  parameters:
  - description: "the desiredProperties to set"
    name: "desiredProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setDesiredProperties(TwinCollection desiredProperties)"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setId(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setId(String id)"
  name: "setId(String id)"
  nameWithType: "ExportImportDevice.setId(String id)"
  summary: "Setter for device id."
  parameters:
  - description: "The device id."
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setId(String id)"
  exceptions:
  - description: "if the provided id is null"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Setter for device id."
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setImportMode(com.microsoft.azure.sdk.iot.service.ImportMode)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setImportMode(ImportMode importMode)"
  name: "setImportMode(ImportMode importMode)"
  nameWithType: "ExportImportDevice.setImportMode(ImportMode importMode)"
  summary: "Setter for device import mode."
  parameters:
  - description: "The device import mode."
    name: "importMode"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.ImportMode?alt=com.microsoft.azure.sdk.iot.service.ImportMode&text=ImportMode\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setImportMode(ImportMode importMode)"
  desc: "Setter for device import mode."
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setReportedProperties(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setReportedProperties(TwinCollection reportedProperties)"
  name: "setReportedProperties(TwinCollection reportedProperties)"
  nameWithType: "ExportImportDevice.setReportedProperties(TwinCollection reportedProperties)"
  parameters:
  - description: "the reportedProperties to set"
    name: "reportedProperties"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setReportedProperties(TwinCollection reportedProperties)"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setStatus(com.microsoft.azure.sdk.iot.service.DeviceStatus)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setStatus(DeviceStatus status)"
  name: "setStatus(DeviceStatus status)"
  nameWithType: "ExportImportDevice.setStatus(DeviceStatus status)"
  summary: "Setter for device status."
  parameters:
  - description: "The device status."
    name: "status"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.DeviceStatus?alt=com.microsoft.azure.sdk.iot.service.DeviceStatus&text=DeviceStatus\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setStatus(DeviceStatus status)"
  desc: "Setter for device status."
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setStatusReason(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setStatusReason(String statusReason)"
  name: "setStatusReason(String statusReason)"
  nameWithType: "ExportImportDevice.setStatusReason(String statusReason)"
  summary: "Setter for device status reason."
  parameters:
  - description: "The device status reason."
    name: "statusReason"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setStatusReason(String statusReason)"
  desc: "Setter for device status reason."
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setTags(com.microsoft.azure.sdk.iot.deps.twin.TwinCollection)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.setTags(TwinCollection tags)"
  name: "setTags(TwinCollection tags)"
  nameWithType: "ExportImportDevice.setTags(TwinCollection tags)"
  parameters:
  - description: "the tags to set"
    name: "tags"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.deps.twin.TwinCollection?alt=com.microsoft.azure.sdk.iot.deps.twin.TwinCollection&text=TwinCollection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setTags(TwinCollection tags)"
- uid: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.seteTag(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.ExportImportDevice.seteTag(String eTag)"
  name: "seteTag(String eTag)"
  nameWithType: "ExportImportDevice.seteTag(String eTag)"
  summary: "Setter for device e<wbr>Tag."
  parameters:
  - description: "The device eTag."
    name: "eTag"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void seteTag(String eTag)"
  desc: "Setter for device eTag."
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.service"
artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
