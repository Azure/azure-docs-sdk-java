### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer"
fullName: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer"
name: "LuceneStandardTokenizer"
nameWithType: "LuceneStandardTokenizer"
summary: "Breaks text following the Unicode Text Segmentation rules."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizer?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.search.documents.indexes.models.LexicalTokenizer.getName()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class LuceneStandardTokenizer extends LexicalTokenizer"
constructors:
- uid: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer.LuceneStandardTokenizer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer.LuceneStandardTokenizer(String name)"
  name: "LuceneStandardTokenizer(String name)"
  nameWithType: "LuceneStandardTokenizer.LuceneStandardTokenizer(String name)"
  summary: "Constructor of <xref uid=\"com.azure.search.documents.indexes.models.LuceneStandardTokenizer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LuceneStandardTokenizer\"></xref>."
  parameters:
  - description: "The name of the tokenizer. It must only contain letters, digits, spaces,\n dashes or underscores, can only start and end with alphanumeric\n characters, and is limited to 128 characters."
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public LuceneStandardTokenizer(String name)"
  desc: "Constructor of <xref uid=\"com.azure.search.documents.indexes.models.LuceneStandardTokenizer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LuceneStandardTokenizer\"></xref>."
methods:
- uid: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer.getMaxTokenLength()"
  fullName: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer.getMaxTokenLength()"
  name: "getMaxTokenLength()"
  nameWithType: "LuceneStandardTokenizer.getMaxTokenLength()"
  summary: "Get the max<wbr>Token<wbr>Length property: The maximum token length."
  syntax: "public Integer getMaxTokenLength()"
  desc: "Get the maxTokenLength property: The maximum token length. Default is 255. Tokens longer than the maximum length are split."
  returns:
    description: "the maxTokenLength value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer.setMaxTokenLength(java.lang.Integer)"
  fullName: "com.azure.search.documents.indexes.models.LuceneStandardTokenizer.setMaxTokenLength(Integer maxTokenLength)"
  name: "setMaxTokenLength(Integer maxTokenLength)"
  nameWithType: "LuceneStandardTokenizer.setMaxTokenLength(Integer maxTokenLength)"
  summary: "Set the max<wbr>Token<wbr>Length property: The maximum token length."
  parameters:
  - description: "the maxTokenLength value to set."
    name: "maxTokenLength"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public LuceneStandardTokenizer setMaxTokenLength(Integer maxTokenLength)"
  desc: "Set the maxTokenLength property: The maximum token length. Default is 255. Tokens longer than the maximum length are split."
  returns:
    description: "the LuceneStandardTokenizer object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LuceneStandardTokenizer?alt=com.azure.search.documents.indexes.models.LuceneStandardTokenizer&text=LuceneStandardTokenizer\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Breaks text following the Unicode Text Segmentation rules. This tokenizer is implemented using Apache Lucene."
metadata: {}
package: "com.azure.search.documents.indexes.models"
artifact: com.azure:azure-search-documents:11.5.0-beta.12
