### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex*"
fullName: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex"
name: "nextEscapeIndex"
nameWithType: "ArrayBasedUnicodeEscaper.nextEscapeIndex"
members:
- uid: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)"
  fullName: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(CharSequence csq, int index, int end)"
  name: "nextEscapeIndex(CharSequence csq, int index, int end)"
  nameWithType: "ArrayBasedUnicodeEscaper.nextEscapeIndex(CharSequence csq, int index, int end)"
  summary: "Scans a sub-sequence of characters from a given <xref uid=\"java.lang.CharSequence\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharSequence\"></xref>, returning the index of the next character that requires escaping.\n\n**Note:** When implementing an escaper, it is a good idea to override this method for efficiency. The base class implementation determines successive Unicode code points and invokes <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#escape(int)\"></xref> for each of them. If the semantics of your escaper are such that code points in the supplementary range are either all escaped or all unescaped, this method can be implemented more efficiently using <xref uid=\"java.lang.CharSequence.charAt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CharSequence#charAt(int)\"></xref>.\n\nNote however that if your escaper does not escape characters in the supplementary range, you should either continue to validate the correctness of any surrogate characters encountered or provide a clear warning to users that your escaper does not validate its input.\n\nSee <xref uid=\"com.azure.cosmos.implementation.guava25.net.PercentEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.implementation.guava25.net.PercentEscaper\"></xref> for an example."
  overridden: "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)"
  parameters:
  - name: "csq"
    type: "<xref href=\"java.lang.CharSequence?alt=java.lang.CharSequence&text=CharSequence\" data-throw-if-not-resolved=\"False\" />"
  - name: "index"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "end"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final int nextEscapeIndex(CharSequence csq, int index, int end)"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.escape"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
