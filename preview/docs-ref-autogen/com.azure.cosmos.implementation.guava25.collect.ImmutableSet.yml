### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  id: ImmutableSet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>toImmutableSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator()
  langs:
  - java
  name: ImmutableSet<E>
  nameWithType: ImmutableSet<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: A <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.
  syntax:
    content: public abstract class ImmutableSet<E> extends ImmutableCollection<E> implements Set<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  implements:
  - java.util.Set<E>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>builder()
  id: <E>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>builder()
  nameWithType: ImmutableSet<E>.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableSet.Builder<E> <E>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>builderWithExpectedSize(int)
  id: <E>builderWithExpectedSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>builderWithExpectedSize(int expectedSize)
  nameWithType: ImmutableSet<E>.<E>builderWithExpectedSize(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>builderWithExpectedSize(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.builderWithExpectedSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new builder, expecting the specified number of distinct elements to be added.


    If `expectedSize` is exactly the number of distinct elements added to the builder before <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder.build" data-throw-if-not-resolved="false">Builder#build</xref> is called, the builder is likely to perform better than an unsized <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet.&lt;E&gt;builder()" data-throw-if-not-resolved="false">#builder()</xref> would have.


    It is not specified if any performance benefits apply if `expectedSize` is close to, but not exactly, the number of distinct elements added to the builder.
  syntax:
    content: public static ImmutableSet.Builder<E> <E>builderWithExpectedSize(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(E[])
  id: <E>copyOf(E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>copyOf(E[] elements)
  nameWithType: ImmutableSet<E>.<E>copyOf(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>copyOf(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing each of `elements`, minus duplicates, in the order each appears first in the source array.
  syntax:
    content: public static ImmutableSet<E> <E>copyOf(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>copyOf(Iterable<? extends E> elements)
  nameWithType: ImmutableSet<E>.<E>copyOf(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>copyOf(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable set containing each of `elements`, minus duplicates, in the order each appears first in the source iterable. This method iterates over `elements` only once.


    **Performance note:** This method will sometimes recognize that the actual copy operation is unnecessary; for example, `copyOf(copyOf(anArrayList))` should copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined.
  syntax:
    content: public static ImmutableSet<E> <E>copyOf(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Collection<? extends E>)
  id: <E>copyOf(java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>copyOf(Collection<? extends E> elements)
  nameWithType: ImmutableSet<E>.<E>copyOf(Collection<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>copyOf(Collection<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable set containing each of `elements`, minus duplicates, in the order each appears first in the source collection.


    **Performance note:** This method will sometimes recognize that the actual copy operation is unnecessary; for example, `copyOf(copyOf(anArrayList))` will copy the data only once. This reduces the expense of habitually making defensive copies at API boundaries. However, the precise conditions for skipping the copy operation are undefined.
  syntax:
    content: public static ImmutableSet<E> <E>copyOf(Collection<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Collection<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>copyOf(Iterator<? extends E> elements)
  nameWithType: ImmutableSet<E>.<E>copyOf(Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>copyOf(Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing each of `elements`, minus duplicates, in the order each appears first in the source iterator.
  syntax:
    content: public static ImmutableSet<E> <E>copyOf(Iterator<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of()
  id: <E>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of()
  nameWithType: ImmutableSet<E>.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty immutable set. Preferred over <xref uid="" data-throw-if-not-resolved="false">Collections#emptySet</xref> for code consistency, and because the return type conveys the immutability guarantee.
  syntax:
    content: public static ImmutableSet<E> <E>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E)
  id: <E>of(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of(E element)
  nameWithType: ImmutableSet<E>.<E>of(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing `element`. Preferred over <xref uid="" data-throw-if-not-resolved="false">Collections#singleton</xref> for code consistency, `null` rejection, and because the return type conveys the immutability guarantee.
  syntax:
    content: public static ImmutableSet<E> <E>of(E element)
    parameters:
    - id: element
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E)
  id: <E>of(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of(E e1, E e2)
  nameWithType: ImmutableSet<E>.<E>of(E e1, E e2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of(E e1, E e2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equal</xref>, all except the first are ignored.
  syntax:
    content: public static ImmutableSet<E> <E>of(E e1, E e2)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E)
  id: <E>of(E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3)
  nameWithType: ImmutableSet<E>.<E>of(E e1, E e2, E e3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of(E e1, E e2, E e3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equal</xref>, all except the first are ignored.
  syntax:
    content: public static ImmutableSet<E> <E>of(E e1, E e2, E e3)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E,E)
  id: <E>of(E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4)
  nameWithType: ImmutableSet<E>.<E>of(E e1, E e2, E e3, E e4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of(E e1, E e2, E e3, E e4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equal</xref>, all except the first are ignored.
  syntax:
    content: public static ImmutableSet<E> <E>of(E e1, E e2, E e3, E e4)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E,E,E)
  id: <E>of(E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5)
  nameWithType: ImmutableSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equal</xref>, all except the first are ignored.
  syntax:
    content: public static ImmutableSet<E> <E>of(E e1, E e2, E e3, E e4, E e5)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of(E,E,E,E,E,E,E...)
  id: <E>of(E,E,E,E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
  nameWithType: ImmutableSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable set containing the given elements, minus duplicates, in the order each was first specified. That is, if multiple elements are <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">equal</xref>, all except the first are ignored.


    The array `others` must not be longer than `Integer.MAX_VALUE - 6`.
  syntax:
    content: public static ImmutableSet<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] others)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: others
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>toImmutableSet()
  id: <E>toImmutableSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: <E>toImmutableSet()
  nameWithType: ImmutableSet<E>.<E>toImmutableSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>toImmutableSet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.toImmutableSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `Collector` that accumulates the input elements into a new `ImmutableSet`. Elements appear in the resulting set in the encounter order of the stream; if the stream contains duplicates (according to <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>), only the first duplicate in encounter order will appear in the result.
  syntax:
    content: public static Collector<E,?,ImmutableSet<E>> <E>toImmutableSet()
    return:
      type: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.ImmutableSet()
  id: ImmutableSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: ImmutableSet()
  nameWithType: ImmutableSet<E>.ImmutableSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.ImmutableSet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.ImmutableSet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableSet()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
  id: asList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: asList()
  nameWithType: ImmutableSet<E>.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.asList()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableList` containing the same elements, in the same order, as this collection.


    **Performance note:** in most cases this method can return quickly without actually copying anything. The exact circumstances under which the copy is performed are undefined and subject to change.
  syntax:
    content: public ImmutableList<E> asList()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: equals(Object object)
  nameWithType: ImmutableSet<E>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: hashCode()
  nameWithType: ImmutableSet<E>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  langs:
  - java
  name: iterator()
  nameWithType: ImmutableSet<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable iterator across the elements in this collection.
  syntax:
    content: public abstract UnmodifiableIterator<E> iterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.ImmutableSet*
  name: ImmutableSet
  nameWithType: ImmutableSet<E>.ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.ImmutableSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.toImmutableSet*
  name: <E>toImmutableSet
  nameWithType: ImmutableSet<E>.<E>toImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>toImmutableSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.of*
  name: <E>of
  nameWithType: ImmutableSet<E>.<E>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: java.util.Collection<? extends E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.copyOf*
  name: <E>copyOf
  nameWithType: ImmutableSet<E>.<E>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<? extends E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals*
  name: equals
  nameWithType: ImmutableSet<E>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode*
  name: hashCode
  nameWithType: ImmutableSet<E>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator*
  name: iterator
  nameWithType: ImmutableSet<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList*
  name: asList
  nameWithType: ImmutableSet<E>.asList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.asList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.builder*
  name: <E>builder
  nameWithType: ImmutableSet<E>.<E>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.builderWithExpectedSize*
  name: <E>builderWithExpectedSize
  nameWithType: ImmutableSet<E>.<E>builderWithExpectedSize
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>.<E>builderWithExpectedSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
  name: ImmutableCollection<E>
  nameWithType: ImmutableCollection<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
- uid: java.util.Set<E>
  name: Set<E>
  nameWithType: Set<E>
  fullName: java.util.Set<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  name: ImmutableCollection.removeAll(Collection<?>)
  nameWithType: ImmutableCollection.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  name: ImmutableCollection.add(E)
  nameWithType: ImmutableCollection.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  name: ImmutableCollection.toArray()
  nameWithType: ImmutableCollection.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  name: ImmutableCollection.remove(Object)
  nameWithType: ImmutableCollection.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  name: ImmutableCollection.removeIf(Predicate<? super E>)
  nameWithType: ImmutableCollection.removeIf(Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  name: ImmutableCollection.iterator()
  nameWithType: ImmutableCollection.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  name: ImmutableCollection.<T>toArray(T[])
  nameWithType: ImmutableCollection.<T>toArray(T[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  name: ImmutableCollection.asList()
  nameWithType: ImmutableCollection.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  name: ImmutableCollection.addAll(Collection<? extends E>)
  nameWithType: ImmutableCollection.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  name: ImmutableCollection.retainAll(Collection<?>)
  nameWithType: ImmutableCollection.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  name: ImmutableCollection.spliterator()
  nameWithType: ImmutableCollection.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  name: ImmutableCollection.contains(Object)
  nameWithType: ImmutableCollection.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  name: ImmutableCollection.clear()
  nameWithType: ImmutableCollection.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder
  name: ImmutableSet.Builder<E>
  nameWithType: ImmutableSet.Builder<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.Builder<E>
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: E,?,ImmutableSet
  nameWithType: E,?,ImmutableSet
  fullName: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: ImmutableCollection
  nameWithType: ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
  name: ImmutableCollection.removeAll(Collection
  nameWithType: ImmutableCollection.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
  name: ImmutableCollection.removeIf(Predicate
  nameWithType: ImmutableCollection.removeIf(Predicate
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
  name: ImmutableCollection.
  nameWithType: ImmutableCollection.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
  name: ImmutableCollection.addAll(Collection
  nameWithType: ImmutableCollection.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
  name: ImmutableCollection.retainAll(Collection
  nameWithType: ImmutableCollection.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
