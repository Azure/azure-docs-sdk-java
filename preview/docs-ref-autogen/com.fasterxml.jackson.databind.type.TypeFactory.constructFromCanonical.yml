### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical"
name: "constructFromCanonical"
nameWithType: "TypeFactory.constructFromCanonical"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(String canonical)"
  name: "constructFromCanonical(String canonical)"
  nameWithType: "TypeFactory.constructFromCanonical(String canonical)"
  summary: "Factory method for constructing a <xref uid=\"com.fasterxml.jackson.databind.JavaType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JavaType\"></xref> out of its canonical representation (see <xref uid=\"com.fasterxml.jackson.databind.JavaType.toCanonical*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JavaType#toCanonical()\"></xref>)."
  parameters:
  - description: "Canonical string representation of a type"
    name: "canonical"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JavaType constructFromCanonical(String canonical)"
  exceptions:
  - description: "If canonical representation is malformed,\n   or class that type represents (including its generic parameters) is\n   not found"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
