### YamlMime:JavaType
uid: "com.azure.security.keyvault.administration.KeyVaultBackupClient"
fullName: "com.azure.security.keyvault.administration.KeyVaultBackupClient"
name: "KeyVaultBackupClient"
nameWithType: "KeyVaultBackupClient"
summary: "The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupClient\"></xref> provides synchronous methods to perform backup and restore operations of an Azure Key Vault."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class KeyVaultBackupClient"
methods:
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupClient.beginBackup(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupClient.beginBackup(String blobStorageUrl, String sasToken)"
  name: "beginBackup(String blobStorageUrl, String sasToken)"
  nameWithType: "KeyVaultBackupClient.beginBackup(String blobStorageUrl, String sasToken)"
  summary: "Initiates a full backup of the Key Vault."
  parameters:
  - description: "The URL for the Blob Storage resource where the backup will be located."
    name: "blobStorageUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A Shared Access Signature (SAS) token to authorize access to the blob."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<KeyVaultBackupOperation,String> beginBackup(String blobStorageUrl, String sasToken)"
  desc: "Initiates a full backup of the Key Vault.\n\n**Code Samples**\n\nStarts a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultBackupOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"backup operation\"></xref>, polls for its status and waits for it to complete. Prints out the details of the operation's final result in case of success or prints out error details in case the operation fails.\n\n```java\nString blobStorageUrl = \"https://myaccount.blob.core.windows.net/myContainer\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\n SyncPoller<KeyVaultBackupOperation, String> backupPoller = client.beginBackup(blobStorageUrl, sasToken);\n\n PollResponse<KeyVaultBackupOperation> pollResponse = backupPoller.poll();\n\n System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\n PollResponse<KeyVaultBackupOperation> finalPollResponse = backupPoller.waitForCompletion();\n\n if (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     String folderUrl = backupPoller.getFinalResult();\n\n     System.out.printf(\"Backup completed. The storage location of this backup is: %s.%n\", folderUrl);\n } else {\n     KeyVaultBackupOperation operation = backupPoller.poll().getValue();\n\n     System.out.printf(\"Backup failed with error: %s.%n\", operation.getError().getMessage());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> polling on the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultBackupOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"backup operation\"></xref> status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultBackupOperation?alt=com.azure.security.keyvault.administration.models.KeyVaultBackupOperation&text=KeyVaultBackupOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupClient.beginRestore(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupClient.beginRestore(String folderUrl, String sasToken)"
  name: "beginRestore(String folderUrl, String sasToken)"
  nameWithType: "KeyVaultBackupClient.beginRestore(String folderUrl, String sasToken)"
  summary: "Initiates a full restore of the Key Vault."
  parameters:
  - description: "The URL for the Blob Storage resource where the backup is located, including the path to\n the blob container where the backup resides. This would be the exact value that is returned as the result of a\n backup operation. An example of such a URL may look like the following:\n https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313."
    name: "folderUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A Shared Access Signature (SAS) token to authorize access to the blob."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<KeyVaultRestoreOperation,KeyVaultRestoreResult> beginRestore(String folderUrl, String sasToken)"
  desc: "Initiates a full restore of the Key Vault.\n\n**Code Samples**\n\nStarts a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restore operation\"></xref>, polls for its status and waits for it to complete. Prints out error details in case the operation fails.\n\n```java\nString blobStorageUrl = \"https://myaccount.blob.core.windows.net/myContainer\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n\n SyncPoller<KeyVaultBackupOperation, String> backupPoller = client.beginBackup(blobStorageUrl, sasToken);\n\n PollResponse<KeyVaultBackupOperation> pollResponse = backupPoller.poll();\n\n System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\n PollResponse<KeyVaultBackupOperation> finalPollResponse = backupPoller.waitForCompletion();\n\n if (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     String folderUrl = backupPoller.getFinalResult();\n\n     System.out.printf(\"Backup completed. The storage location of this backup is: %s.%n\", folderUrl);\n } else {\n     KeyVaultBackupOperation operation = backupPoller.poll().getValue();\n\n     System.out.printf(\"Backup failed with error: %s.%n\", operation.getError().getMessage());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restore operation\"></xref> status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation?alt=com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation&text=KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreResult?alt=com.azure.security.keyvault.administration.models.KeyVaultRestoreResult&text=KeyVaultRestoreResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupClient.beginSelectiveKeyRestore(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupClient.beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  name: "beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  nameWithType: "KeyVaultBackupClient.beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  summary: "Restores all versions of a given key using the supplied SAS token pointing to a previously stored Azure Blob storage backup folder."
  parameters:
  - description: "The name of the key to be restored."
    name: "keyName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The URL for the Blob Storage resource where the backup is located, including the path to\n the blob container where the backup resides. This would be the exact value that is returned as the result of a\n backup operation. An example of such a URL may look like the following:\n https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313."
    name: "folderUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "A Shared Access Signature (SAS) token to authorize access to the blob."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<KeyVaultSelectiveKeyRestoreOperation,KeyVaultSelectiveKeyRestoreResult> beginSelectiveKeyRestore(String keyName, String folderUrl, String sasToken)"
  desc: "Restores all versions of a given key using the supplied SAS token pointing to a previously stored Azure Blob storage backup folder.\n\n**Code Samples**\n\nStarts a <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"selective key restore operation\"></xref>, polls for its status and waits for it to complete. Prints out error details in case the operation fails.\n\n```java\nString folderUrl = \"https://myaccount.blob.core.windows.net/myContainer/mhsm-myaccount-2020090117323313\";\n String sasToken = \"sv=2020-02-10&ss=b&srt=o&sp=rwdlactfx&se=2021-06-17T07:13:07Z&st=2021-06-16T23:13:07Z\"\n     + \"&spr=https&sig=n5V6fnlkViEF9b7ij%2FttTHNwO2BdFIHKHppRxGAyJdc%3D\";\n String keyName = \"myKey\";\n\n SyncPoller<KeyVaultSelectiveKeyRestoreOperation, KeyVaultSelectiveKeyRestoreResult> backupPoller =\n     client.beginSelectiveKeyRestore(folderUrl, sasToken, keyName);\n\n PollResponse<KeyVaultSelectiveKeyRestoreOperation> pollResponse = backupPoller.poll();\n\n System.out.printf(\"The current status of the operation is: %s.%n\", pollResponse.getStatus());\n\n PollResponse<KeyVaultSelectiveKeyRestoreOperation> finalPollResponse = backupPoller.waitForCompletion();\n\n if (finalPollResponse.getStatus() == LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {\n     System.out.printf(\"Key restored successfully.%n\");\n } else {\n     KeyVaultSelectiveKeyRestoreOperation operation = backupPoller.poll().getValue();\n\n     System.out.printf(\"Key restore failed with error: %s.%n\", operation.getError().getMessage());\n }\n```"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll on the <xref uid=\"com.azure.security.keyvault.administration.models.KeyVaultRestoreOperation\" data-throw-if-not-resolved=\"false\" data-raw-source=\"restore operation\"></xref> status."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreOperation?alt=com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreOperation&text=KeyVaultSelectiveKeyRestoreOperation\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreResult?alt=com.azure.security.keyvault.administration.models.KeyVaultSelectiveKeyRestoreResult&text=KeyVaultSelectiveKeyRestoreResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.administration.KeyVaultBackupClient.getVaultUrl()"
  fullName: "com.azure.security.keyvault.administration.KeyVaultBackupClient.getVaultUrl()"
  name: "getVaultUrl()"
  nameWithType: "KeyVaultBackupClient.getVaultUrl()"
  summary: "Get the vault endpoint URL."
  syntax: "public String getVaultUrl()"
  desc: "Get the vault endpoint URL."
  returns:
    description: "The vault endpoint URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupClient\"></xref> provides synchronous methods to perform backup and restore operations of an Azure Key Vault.\n\nInstances of this client are obtained by calling the <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClientBuilder.buildClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupClientBuilder#buildClient()\"></xref> method on a <xref uid=\"com.azure.security.keyvault.administration.KeyVaultBackupClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"KeyVaultBackupClientBuilder\"></xref> object.\n\n**Samples to construct a sync client**\n\n```java\nKeyVaultBackupClient keyVaultBackupClient = new KeyVaultBackupClientBuilder()\n     .vaultUrl(\"https://myaccount.managedhsm.azure.net/\")\n     .credential(new DefaultAzureCredentialBuilder().build())\n     .buildClient();\n```"
metadata: {}
package: "com.azure.security.keyvault.administration"
artifact: com.azure:azure-security-keyvault-administration:4.1.0-beta.5
