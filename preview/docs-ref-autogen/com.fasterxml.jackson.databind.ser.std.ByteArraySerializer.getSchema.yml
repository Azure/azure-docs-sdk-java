### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.std.ByteArraySerializer.getSchema*"
fullName: "com.fasterxml.jackson.databind.ser.std.ByteArraySerializer.getSchema"
name: "getSchema"
nameWithType: "ByteArraySerializer.getSchema"
members:
- uid: "com.fasterxml.jackson.databind.ser.std.ByteArraySerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)"
  fullName: "com.fasterxml.jackson.databind.ser.std.ByteArraySerializer.getSchema(SerializerProvider provider, Type typeHint)"
  name: "getSchema(SerializerProvider provider, Type typeHint)"
  nameWithType: "ByteArraySerializer.getSchema(SerializerProvider provider, Type typeHint)"
  summary: "Default implementation simply claims type is \"string\"; usually overriden by custom serializers."
  overridden: "com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)"
  parameters:
  - name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  - name: "typeHint"
    type: "<xref href=\"java.lang.reflect.Type?alt=java.lang.reflect.Type&text=Type\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonNode getSchema(SerializerProvider provider, Type typeHint)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonNode?alt=com.fasterxml.jackson.databind.JsonNode&text=JsonNode\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser.std"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
