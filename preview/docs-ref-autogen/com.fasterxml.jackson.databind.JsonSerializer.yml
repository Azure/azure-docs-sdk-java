### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.JsonSerializer"
fullName: "com.fasterxml.jackson.databind.JsonSerializer<T>"
name: "JsonSerializer<T>"
nameWithType: "JsonSerializer<T>"
summary: "Abstract class that defines API used by <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> (and other chained <xref uid=\"com.fasterxml.jackson.databind.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref>s too) to serialize Objects of arbitrary types into JSON, using provided <xref uid=\"com.fasterxml.jackson.core.JsonGenerator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator\"></xref>. <xref uid=\"com.fasterxml.jackson.databind.ser.std.StdSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.std.StdSerializer\"></xref> instead of this class, since it will implement many of optional methods of this class.\n\nNOTE: various `serialize` methods are never (to be) called with null values -- caller **must** handle null values, usually by calling <xref uid=\"com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SerializerProvider#findNullValueSerializer\"></xref> to obtain serializer to use. This also means that custom serializers cannot be directly used to change the output to produce when serializing null values.\n\nIf serializer is an aggregate one -- meaning it delegates handling of some of its contents by using other serializer(s) -- it typically also needs to implement <xref uid=\"com.fasterxml.jackson.databind.ser.ResolvableSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.ResolvableSerializer\"></xref>, which can locate secondary serializers needed. This is important to allow dynamic overrides of serializers; separate call interface is needed to separate resolution of secondary serializers (which may have cyclic link back to serializer itself, directly or indirectly).\n\nIn addition, to support per-property annotations (to configure aspects of serialization on per-property basis), serializers may want to implement <xref uid=\"com.fasterxml.jackson.databind.ser.ContextualSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.ContextualSerializer\"></xref>, which allows specialization of serializers: call to <xref uid=\"com.fasterxml.jackson.databind.ser.ContextualSerializer.createContextual\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual\"></xref> is passed information on property, and can create a newly configured serializer for handling that particular property.\n\nIf both <xref uid=\"com.fasterxml.jackson.databind.ser.ResolvableSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.ResolvableSerializer\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.ser.ContextualSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.ser.ContextualSerializer\"></xref> are implemented, resolution of serializers occurs before contextualization."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class JsonSerializer<T> implements jsonFormatVisitors.JsonFormatVisitable"
constructors:
- "com.fasterxml.jackson.databind.JsonSerializer.JsonSerializer()"
methods:
- "com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()"
- "com.fasterxml.jackson.databind.JsonSerializer.handledType()"
- "com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)"
- "com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)"
- "com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()"
- "com.fasterxml.jackson.databind.JsonSerializer.properties()"
- "com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)"
- "com.fasterxml.jackson.databind.JsonSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)"
- "com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)"
- "com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)"
- "com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()"
- "com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)"
type: "class"
typeParameters:
- name: "T"
implements:
- "<xref href=\"com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable?alt=com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable&text=JsonFormatVisitable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
