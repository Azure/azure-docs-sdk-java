### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.JsonSerializer
  id: JsonSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.JsonSerializer.JsonSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.None
  - com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.handledType()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  langs:
  - java
  name: JsonSerializer<T>
  nameWithType: JsonSerializer<T>
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>
  type: Class
  package: com.fasterxml.jackson.databind
  summary: >-
    Abstract class that defines API used by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> (and other chained <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">JsonSerializer</xref>s too) to serialize Objects of arbitrary types into JSON, using provided <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>. <xref uid="com.fasterxml.jackson.databind.ser.std.StdSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.std.StdSerializer</xref> instead of this class, since it will implement many of optional methods of this class.


    NOTE: various `serialize` methods are never (to be) called with null values -- caller **must** handle null values, usually by calling <xref uid="com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer*" data-throw-if-not-resolved="false">SerializerProvider#findNullValueSerializer</xref> to obtain serializer to use. This also means that custom serializers cannot be directly used to change the output to produce when serializing null values.


    If serializer is an aggregate one -- meaning it delegates handling of some of its contents by using other serializer(s) -- it typically also needs to implement <xref uid="com.fasterxml.jackson.databind.ser.ResolvableSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ResolvableSerializer</xref>, which can locate secondary serializers needed. This is important to allow dynamic overrides of serializers; separate call interface is needed to separate resolution of secondary serializers (which may have cyclic link back to serializer itself, directly or indirectly).


    In addition, to support per-property annotations (to configure aspects of serialization on per-property basis), serializers may want to implement <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ContextualSerializer</xref>, which allows specialization of serializers: call to <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer.createContextual" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ContextualSerializer#createContextual</xref> is passed information on property, and can create a newly configured serializer for handling that particular property.


    If both <xref uid="com.fasterxml.jackson.databind.ser.ResolvableSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ResolvableSerializer</xref> and <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ContextualSerializer</xref> are implemented, resolution of serializers occurs before contextualization.
  syntax:
    content: public abstract class JsonSerializer<T> implements jsonFormatVisitors.JsonFormatVisitable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonSerializer.JsonSerializer()
  id: JsonSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: JsonSerializer()
  nameWithType: JsonSerializer<T>.JsonSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.JsonSerializer()
  overload: com.fasterxml.jackson.databind.JsonSerializer.JsonSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonSerializer()
- uid: com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType type)
  nameWithType: JsonSerializer<T>.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType type)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType type)
  overload: com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Default implementation simply calls <xref uid="com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper.expectAnyFormat(com.fasterxml.jackson.databind.JavaType)" data-throw-if-not-resolved="false">JsonFormatVisitorWrapper#expectAnyFormat(JavaType)</xref>.
  syntax:
    content: public void acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType type)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  id: getDelegatee()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: getDelegatee()
  nameWithType: JsonSerializer<T>.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.getDelegatee()
  overload: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor that can be used to determine if this serializer uses another serializer for actual serialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further serializers); otherwise will return null.
  syntax:
    content: public JsonSerializer<?> getDelegatee()
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
      description: >-
        Serializer this serializer delegates calls to, if null;
           null otherwise.
- uid: com.fasterxml.jackson.databind.JsonSerializer.handledType()
  id: handledType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: handledType()
  nameWithType: JsonSerializer<T>.handledType()
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.handledType()
  overload: com.fasterxml.jackson.databind.JsonSerializer.handledType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing type of Objects this serializer can handle. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type).


    Default implementation will return null, which essentially means same as returning `Object.class` would; that is, that nothing is known about handled type.
  syntax:
    content: public Class<T> handledType()
    return:
      type: java.lang.Class<T>
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  id: isEmpty(T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: isEmpty(T value)
  nameWithType: JsonSerializer<T>.isEmpty(T value)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.isEmpty(T value)
  overload: com.fasterxml.jackson.databind.JsonSerializer.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to check whether given serializable value is considered "empty" value (for purposes of suppressing serialization of empty values).


    Default implementation will consider only null values to be empty.
  syntax:
    content: public boolean isEmpty(T value)
    parameters:
    - id: value
      type: T
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  id: isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: isEmpty(SerializerProvider provider, T value)
  nameWithType: JsonSerializer<T>.isEmpty(SerializerProvider provider, T value)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.isEmpty(SerializerProvider provider, T value)
  overload: com.fasterxml.jackson.databind.JsonSerializer.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to check whether given serializable value is considered "empty" value (for purposes of suppressing serialization of empty values).


    Default implementation will consider only null values to be empty.


    NOTE: replaces <xref uid="com.fasterxml.jackson.databind.JsonSerializer.isEmpty*" data-throw-if-not-resolved="false">#isEmpty(Object)</xref>, which was deprecated in 2.5
  syntax:
    content: public boolean isEmpty(SerializerProvider provider, T value)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: value
      type: T
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  id: isUnwrappingSerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: isUnwrappingSerializer()
  nameWithType: JsonSerializer<T>.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.isUnwrappingSerializer()
  overload: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for checking whether this serializer is an "unwrapping" serializer; this is necessary to know since it may also require caller to suppress writing of the leading property name.
  syntax:
    content: public boolean isUnwrappingSerializer()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  id: properties()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: properties()
  nameWithType: JsonSerializer<T>.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.properties()
  overload: com.fasterxml.jackson.databind.JsonSerializer.properties*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor for iterating over logical properties that the type handled by this serializer has, from serialization perspective. Actual type of properties, if any, will be <xref uid="com.fasterxml.jackson.databind.ser.BeanPropertyWriter" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</xref>. Of standard Jackson serializers, only <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.BeanSerializer</xref> exposes properties.
  syntax:
    content: public Iterator<PropertyWriter> properties()
    return:
      type: java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: replaceDelegatee(JsonSerializer<?> delegatee)
  nameWithType: JsonSerializer<T>.replaceDelegatee(JsonSerializer<?> delegatee)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.replaceDelegatee(JsonSerializer<?> delegatee)
  overload: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to try to replace serializer this serializer delegates calls to. If not supported (either this serializer does not delegate anything; or it does not want any changes), should either throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> (if operation does not make sense or is not allowed); or return this serializer as is.
  syntax:
    content: public JsonSerializer<T> replaceDelegatee(JsonSerializer<?> delegatee)
    parameters:
    - id: delegatee
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<T>
- uid: com.fasterxml.jackson.databind.JsonSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: serialize(T value, JsonGenerator gen, SerializerProvider serializers)
  nameWithType: JsonSerializer<T>.serialize(T value, JsonGenerator gen, SerializerProvider serializers)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.serialize(T value, JsonGenerator gen, SerializerProvider serializers)
  overload: com.fasterxml.jackson.databind.JsonSerializer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public abstract void serialize(T value, JsonGenerator gen, SerializerProvider serializers)
    parameters:
    - id: value
      type: T
      description: Value to serialize; can <b>not</b> be null.
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
      description: Generator used to output resulting Json content
    - id: serializers
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that can be used to get serializers for
           serializing Objects value contains, if any.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)
  nameWithType: JsonSerializer<T>.serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.


    Default implementation will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> to indicate that proper type handling needs to be implemented.


    For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:


    ```java

    // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
      typeSer.writeTypePrefixForScalar(value, gen);
      serialize(value, gen, provider);
      typeSer.writeTypeSuffixForScalar(value, gen);
    ```


    and implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents.
  syntax:
    content: public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer)
    parameters:
    - id: value
      type: T
      description: Value to serialize; can <b>not</b> be null.
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
      description: Generator used to output resulting Json content
    - id: serializers
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that can be used to get serializers for
           serializing Objects value contains, if any.
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
      description: Type serializer to use for including type information
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  id: unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: unwrappingSerializer(NameTransformer unwrapper)
  nameWithType: JsonSerializer<T>.unwrappingSerializer(NameTransformer unwrapper)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.unwrappingSerializer(NameTransformer unwrapper)
  overload: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will return serializer instance that produces "unwrapped" serialization, if applicable for type being serialized (which is the case for some serializers that produce JSON Objects as output). If no unwrapped serializer can be constructed, will simply return serializer as-is.


    Default implementation just returns serializer as-is, indicating that no unwrapped variant exists
  syntax:
    content: public JsonSerializer<T> unwrappingSerializer(NameTransformer unwrapper)
    parameters:
    - id: unwrapper
      type: com.fasterxml.jackson.databind.util.NameTransformer
      description: >-
        Name transformation to use to convert between names
           of unwrapper properties
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<T>
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  id: usesObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: usesObjectId()
  nameWithType: JsonSerializer<T>.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.usesObjectId()
  overload: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to see whether this serializer instance will use Object Id to handle cyclic references.
  syntax:
    content: public boolean usesObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  id: withFilterId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonSerializer
  langs:
  - java
  name: withFilterId(Object filterId)
  nameWithType: JsonSerializer<T>.withFilterId(Object filterId)
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.withFilterId(Object filterId)
  overload: com.fasterxml.jackson.databind.JsonSerializer.withFilterId*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Mutant factory method that is called if contextual configuration indicates that a specific filter (as specified by `filterId`) is to be used for serialization.


    Default implementation simply returns `this`; sub-classes that do support filtering will need to create and return new instance if filter changes.
  syntax:
    content: public JsonSerializer<?> withFilterId(Object filterId)
    parameters:
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
references:
- uid: com.fasterxml.jackson.databind.JsonSerializer.JsonSerializer*
  name: JsonSerializer
  nameWithType: JsonSerializer<T>.JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.JsonSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.util.NameTransformer
  name: NameTransformer
  nameWithType: NameTransformer
  fullName: com.fasterxml.jackson.databind.util.NameTransformer
- uid: com.fasterxml.jackson.databind.JsonSerializer<T>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer*
  name: unwrappingSerializer
  nameWithType: JsonSerializer<T>.unwrappingSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.unwrappingSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee*
  name: replaceDelegatee
  nameWithType: JsonSerializer<T>.replaceDelegatee
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.replaceDelegatee
  package: com.fasterxml.jackson.databind
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId*
  name: withFilterId
  nameWithType: JsonSerializer<T>.withFilterId
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.withFilterId
  package: com.fasterxml.jackson.databind
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.JsonSerializer.serialize*
  name: serialize
  nameWithType: JsonSerializer<T>.serialize
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.serialize
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType*
  name: serializeWithType
  nameWithType: JsonSerializer<T>.serializeWithType
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.serializeWithType
  package: com.fasterxml.jackson.databind
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer.handledType*
  name: handledType
  nameWithType: JsonSerializer<T>.handledType
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.handledType
  package: com.fasterxml.jackson.databind
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty*
  name: isEmpty
  nameWithType: JsonSerializer<T>.isEmpty
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.isEmpty
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId*
  name: usesObjectId
  nameWithType: JsonSerializer<T>.usesObjectId
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.usesObjectId
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer*
  name: isUnwrappingSerializer
  nameWithType: JsonSerializer<T>.isUnwrappingSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.isUnwrappingSerializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee*
  name: getDelegatee
  nameWithType: JsonSerializer<T>.getDelegatee
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.getDelegatee
  package: com.fasterxml.jackson.databind
- uid: java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.ser.PropertyWriter
    name: PropertyWriter
    fullName: com.fasterxml.jackson.databind.ser.PropertyWriter
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties*
  name: properties
  nameWithType: JsonSerializer<T>.properties
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.properties
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: JsonSerializer<T>.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  name: jsonFormatVisitors.JsonFormatVisitable
  nameWithType: jsonFormatVisitors.JsonFormatVisitable
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonSerializer.None
  name: JsonSerializer.None
  nameWithType: JsonSerializer.None
  fullName: com.fasterxml.jackson.databind.JsonSerializer.None
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.fasterxml.jackson.databind.ser.PropertyWriter
  name: PropertyWriter
  nameWithType: PropertyWriter
  fullName: com.fasterxml.jackson.databind.ser.PropertyWriter
