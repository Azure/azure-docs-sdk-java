### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.Receiver"
fullName: "com.microsoft.azure.sdk.iot.service.Receiver"
name: "Receiver"
nameWithType: "Receiver"
summary: "A receiver is a class abstracting the methods to receive messages, in order to use it for multiple endpoints, e.<wbr>g."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class Receiver"
constructors:
- uid: "com.microsoft.azure.sdk.iot.service.Receiver.Receiver()"
  fullName: "com.microsoft.azure.sdk.iot.service.Receiver.Receiver()"
  name: "Receiver()"
  nameWithType: "Receiver.Receiver()"
  syntax: "public Receiver()"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()"
  fullName: "com.microsoft.azure.sdk.iot.service.Receiver.closeAsync()"
  name: "closeAsync()"
  nameWithType: "Receiver.closeAsync()"
  modifiers:
  - "protected"
  - "abstract"
  syntax: "protected abstract CompletableFuture<Void> closeAsync()"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.Receiver.openAsync()"
  fullName: "com.microsoft.azure.sdk.iot.service.Receiver.openAsync()"
  name: "openAsync()"
  nameWithType: "Receiver.openAsync()"
  modifiers:
  - "protected"
  - "abstract"
  syntax: "protected abstract CompletableFuture<Void> openAsync()"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()"
  fullName: "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync()"
  name: "receiveAsync()"
  nameWithType: "Receiver.receiveAsync()"
  modifiers:
  - "protected"
  - "abstract"
  syntax: "protected abstract CompletableFuture<?> receiveAsync()"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long)"
  fullName: "com.microsoft.azure.sdk.iot.service.Receiver.receiveAsync(long timeoutSeconds)"
  name: "receiveAsync(long timeoutSeconds)"
  nameWithType: "Receiver.receiveAsync(long timeoutSeconds)"
  modifiers:
  - "protected"
  - "abstract"
  parameters:
  - name: "timeoutSeconds"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected abstract CompletableFuture<?> receiveAsync(long timeoutSeconds)"
  returns:
    type: "<xref href=\"java.util.concurrent.CompletableFuture?alt=java.util.concurrent.CompletableFuture&text=CompletableFuture\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
type: "class"
desc: "A receiver is a class abstracting the methods to receive messages, in order to use it for multiple endpoints, e.g. feedback endpoint, \"alerts\" (i.e. D2C)."
metadata: {}
package: "com.microsoft.azure.sdk.iot.service"
artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
