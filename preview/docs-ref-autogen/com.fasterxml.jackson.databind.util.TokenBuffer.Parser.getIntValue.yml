### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue*"
fullName: "com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue"
name: "getIntValue"
nameWithType: "TokenBuffer.Parser.getIntValue"
members:
- uid: "com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue()"
  fullName: "com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getIntValue()"
  name: "getIntValue()"
  nameWithType: "TokenBuffer.Parser.getIntValue()"
  summary: "Numeric accessor that can be called when the current token is of type <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref>; if so, it is equivalent to calling <xref uid=\"com.fasterxml.jackson.databind.util.TokenBuffer.Parser.getDoubleValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getDoubleValue\"></xref> and then casting; except for possible overflow/underflow exception.\n\nNote: if the resulting integer value falls outside range of Java int, a <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParseException\"></xref> may be thrown to indicate numeric overflow/underflow."
  overridden: "com.fasterxml.jackson.core.JsonParser.getIntValue()"
  syntax: "public int getIntValue()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
