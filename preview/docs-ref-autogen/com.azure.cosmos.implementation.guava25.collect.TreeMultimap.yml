### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.TreeMultimap"
fullName: "com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>"
name: "TreeMultimap<K,V>"
nameWithType: "TreeMultimap<K,V>"
summary: "Implementation of `Multimap` whose keys and values are ordered by their natural ordering or by supplied comparators. In all cases, this implementation uses <xref uid=\"java.lang.Comparable.compareTo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparable#compareTo\"></xref> or <xref uid=\"java.util.Comparator.compare\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator#compare\"></xref> instead of <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals\"></xref> to determine equivalence of instances.\n\n**Warning:** The comparators or comparables used must be *consistent with equals* as explained by the <xref uid=\"java.lang.Comparable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparable\"></xref> class specification. Otherwise, the resulting multiset will violate the general contract of <xref uid=\"com.azure.cosmos.implementation.guava25.collect.SetMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SetMultimap\"></xref>, which it is specified in terms of <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals\"></xref>.\n\nThe collections returned by `keySet` and `asMap` iterate through the keys according to the key comparator ordering or the natural ordering of the keys. Similarly, `get`, `removeAll`, and `replaceValues` return collections that iterate through the values according to the value comparator ordering or the natural ordering of the values. The collections generated by `entries`, `keys`, and `values` iterate across the keys according to the above key ordering, and for each key they iterate across the values according to the value ordering.\n\nThe multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an existing key-value pair has no effect.\n\nNull keys and values are permitted (provided, of course, that the respective comparators support them). All optional multimap methods are supported, and all returned views are modifiable.\n\nThis class is not threadsafe when any concurrent operations update the multimap. Concurrent read operations will work correctly. To allow concurrent update operations, wrap your multimap with a call to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.synchronizedSortedSetMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimaps#synchronizedSortedSetMultimap\"></xref>.\n\nSee the Guava User Guide article on [ `Multimap`][_Multimap].\n\n\n[_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.asMap()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.get(K)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.values()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class TreeMultimap<K,V> extends AbstractSortedKeySortedSetMultimap<K,V>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create()"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create(java.util.Comparator<? super K>,java.util.Comparator<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.asMap()"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.get(K)"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keyComparator()"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.TreeMultimap.valueComparator()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
