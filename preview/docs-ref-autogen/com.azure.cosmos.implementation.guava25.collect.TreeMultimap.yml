### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  id: TreeMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create(java.util.Comparator<? super K>,java.util.Comparator<? super V>)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keyComparator()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.TreeMultimap.valueComparator()
  langs:
  - java
  name: TreeMultimap<K,V>
  nameWithType: TreeMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Implementation of `Multimap` whose keys and values are ordered by their natural ordering or by supplied comparators. In all cases, this implementation uses <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref> or <xref uid="java.util.Comparator.compare" data-throw-if-not-resolved="false">Comparator#compare</xref> instead of <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> to determine equivalence of instances.


    **Warning:** The comparators or comparables used must be *consistent with equals* as explained by the <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> class specification. Otherwise, the resulting multiset will violate the general contract of <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap" data-throw-if-not-resolved="false">SetMultimap</xref>, which it is specified in terms of <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>.


    The collections returned by `keySet` and `asMap` iterate through the keys according to the key comparator ordering or the natural ordering of the keys. Similarly, `get`, `removeAll`, and `replaceValues` return collections that iterate through the values according to the value comparator ordering or the natural ordering of the values. The collections generated by `entries`, `keys`, and `values` iterate across the keys according to the above key ordering, and for each key they iterate across the values according to the value ordering.


    The multimap does not store duplicate key-value pairs. Adding a new key-value pair equal to an existing key-value pair has no effect.


    Null keys and values are permitted (provided, of course, that the respective comparators support them). All optional multimap methods are supported, and all returned views are modifiable.


    This class is not threadsafe when any concurrent operations update the multimap. Concurrent read operations will work correctly. To allow concurrent update operations, wrap your multimap with a call to <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimaps.synchronizedSortedSetMultimap" data-throw-if-not-resolved="false">Multimaps#synchronizedSortedSetMultimap</xref>.


    See the Guava User Guide article on [ `Multimap`][_Multimap].



    [_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap
  syntax:
    content: public class TreeMultimap<K,V> extends AbstractSortedKeySortedSetMultimap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.values()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create()
  id: <K,V>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: <K,V>create()
  nameWithType: TreeMultimap<K,V>.<K,V>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.<K,V>create()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates an empty `TreeMultimap` ordered by the natural ordering of its keys and values.
  syntax:
    content: public static TreeMultimap<K,V> <K,V>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: <K,V>create(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: <K,V>create(Multimap<? extends K,? extends V> multimap)
  nameWithType: TreeMultimap<K,V>.<K,V>create(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.<K,V>create(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructs a `TreeMultimap`, ordered by the natural ordering of its keys and values, with the same mappings as the specified multimap.
  syntax:
    content: public static TreeMultimap<K,V> <K,V>create(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
      description: the multimap whose contents are copied to this multimap
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.<K,V>create(java.util.Comparator<? super K>,java.util.Comparator<? super V>)
  id: <K,V>create(java.util.Comparator<? super K>,java.util.Comparator<? super V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: <K,V>create(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
  nameWithType: TreeMultimap<K,V>.<K,V>create(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.<K,V>create(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates an empty `TreeMultimap` instance using explicit comparators. Neither comparator may be null; use <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> to specify natural order.
  syntax:
    content: public static TreeMultimap<K,V> <K,V>create(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
    parameters:
    - id: keyComparator
      type: java.util.Comparator<? super K>
      description: the comparator that determines the key ordering
    - id: valueComparator
      type: java.util.Comparator<? super V>
      description: the comparator that determines the value ordering
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.TreeMultimap(java.util.Comparator<? super K>,java.util.Comparator<? super V>)
  id: TreeMultimap(java.util.Comparator<? super K>,java.util.Comparator<? super V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
  nameWithType: TreeMultimap<K,V>.TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.TreeMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator)"
    parameters:
    - id: keyComparator
      type: java.util.Comparator<? super K>
    - id: valueComparator
      type: java.util.Comparator<? super V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.TreeMultimap(java.util.Comparator<? super K>,java.util.Comparator<? super V>,com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: TreeMultimap(java.util.Comparator<? super K>,java.util.Comparator<? super V>,com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator, Multimap<? extends K,? extends V> multimap)
  nameWithType: TreeMultimap<K,V>.TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator, Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator, Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.TreeMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private TreeMultimap(Comparator<? super K> keyComparator, Comparator<? super V> valueComparator, Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: keyComparator
      type: java.util.Comparator<? super K>
    - id: valueComparator
      type: java.util.Comparator<? super V>
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.asMap()
  id: asMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: asMap()
  nameWithType: TreeMultimap<K,V>.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.asMap()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.asMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a map view that associates each key with the corresponding values in the multimap. Changes to the returned map, such as element removal, will update the underlying multimap. The map does not support `setValue` on its entries, `put`, or `putAll`.


    When passed a key that is present in the map, `asMap().get(Object)` has the same behavior as <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeMultimap.get" data-throw-if-not-resolved="false">#get</xref>, returning a live collection. When passed a key that is not present, however, `asMap().get(Object)` returns `null` instead of an empty collection.


    Though the method signature doesn't say so explicitly, the returned map has <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref> values.


    Because a `TreeMultimap` has unique sorted keys, this method returns a <xref uid="java.util.NavigableMap" data-throw-if-not-resolved="false">NavigableMap</xref>, instead of the <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public NavigableMap<K,Collection<V>> asMap()
    return:
      type: java.util.NavigableMap<K,java.util.Collection<V>>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: TreeMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a collection view of all values associated with a key. If no mappings in the multimap have the provided key, an empty collection is returned.


    Changes to the returned collection will update the underlying multimap, and vice versa.


    Because a `SortedSetMultimap` has unique sorted values for a given key, this method returns a <xref uid="java.util.SortedSet" data-throw-if-not-resolved="false">SortedSet</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public NavigableSet<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.NavigableSet<V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keyComparator()
  id: keyComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: keyComparator()
  nameWithType: TreeMultimap<K,V>.keyComparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.keyComparator()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keyComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the comparator that orders the multimap keys.
  syntax:
    content: public Comparator<? super K> keyComparator()
    return:
      type: java.util.Comparator<? super K>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: keySet()
  nameWithType: TreeMultimap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of all *distinct* keys contained in this multimap. Note that the key set contains a key if and only if this multimap maps that key to at least one value.


    Changes to the returned set will update the underlying multimap, and vice versa. However, *adding* to the returned set is not possible.


    Because a `TreeMultimap` has unique sorted keys, this method returns a <xref uid="java.util.NavigableSet" data-throw-if-not-resolved="false">NavigableSet</xref>, instead of the <xref uid="java.util.Set" data-throw-if-not-resolved="false">java.util.Set</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public NavigableSet<K> keySet()
    return:
      type: java.util.NavigableSet<K>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.valueComparator()
  id: valueComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  langs:
  - java
  name: valueComparator()
  nameWithType: TreeMultimap<K,V>.valueComparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.valueComparator()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.valueComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Comparator<? super V> valueComparator()
    return:
      type: java.util.Comparator<? super V>
references:
- uid: java.util.Comparator<? super K>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: '>'
    fullName: '>'
- uid: java.util.Comparator<? super V>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.TreeMultimap*
  name: TreeMultimap
  nameWithType: TreeMultimap<K,V>.TreeMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.TreeMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
    name: TreeMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.create*
  name: <K,V>create
  nameWithType: TreeMultimap<K,V>.<K,V>create
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.<K,V>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keyComparator*
  name: keyComparator
  nameWithType: TreeMultimap<K,V>.keyComparator
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.keyComparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.valueComparator*
  name: valueComparator
  nameWithType: TreeMultimap<K,V>.valueComparator
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.valueComparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: java.util.NavigableSet<V>
  spec.java:
  - uid: java.util.NavigableSet
    name: NavigableSet
    fullName: java.util.NavigableSet
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.get*
  name: get
  nameWithType: TreeMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.NavigableSet<K>
  spec.java:
  - uid: java.util.NavigableSet
    name: NavigableSet
    fullName: java.util.NavigableSet
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.keySet*
  name: keySet
  nameWithType: TreeMultimap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.NavigableMap<K,java.util.Collection<V>>
  spec.java:
  - uid: java.util.NavigableMap
    name: NavigableMap
    fullName: java.util.NavigableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeMultimap.asMap*
  name: asMap
  nameWithType: TreeMultimap<K,V>.asMap
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeMultimap<K,V>.asMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap<K,V>
  name: AbstractSortedKeySortedSetMultimap<K,V>
  nameWithType: AbstractSortedKeySortedSetMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  name: AbstractMapBasedMultimap.forEach(BiConsumer<? super K,? super V>)
  nameWithType: AbstractMapBasedMultimap.forEach(BiConsumer<? super K,? super V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  name: AbstractMultimap.isEmpty()
  nameWithType: AbstractMultimap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  name: AbstractMultimap.containsValue(Object)
  nameWithType: AbstractMultimap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()
  name: AbstractMapBasedMultimap.clear()
  nameWithType: AbstractMapBasedMultimap.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  name: AbstractMultimap.toString()
  nameWithType: AbstractMultimap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.asMap()
  name: AbstractSortedKeySortedSetMultimap.asMap()
  nameWithType: AbstractSortedKeySortedSetMultimap.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.asMap()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.keySet()
  name: AbstractSortedKeySortedSetMultimap.keySet()
  nameWithType: AbstractSortedKeySortedSetMultimap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap.keySet()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  name: AbstractMultimap.putAll(K,Iterable<? extends V>)
  nameWithType: AbstractMultimap.putAll(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.values()
  name: AbstractSortedSetMultimap.values()
  nameWithType: AbstractSortedSetMultimap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.values()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)
  name: AbstractSortedSetMultimap.removeAll(Object)
  nameWithType: AbstractSortedSetMultimap.removeAll(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.remove(Object,Object)
  nameWithType: AbstractMultimap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)
  name: AbstractSetMultimap.put(K,V)
  nameWithType: AbstractSetMultimap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.put(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()
  name: AbstractMapBasedMultimap.size()
  nameWithType: AbstractMapBasedMultimap.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.size()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  name: AbstractMultimap.keys()
  nameWithType: AbstractMultimap.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  name: AbstractMultimap.hashCode()
  nameWithType: AbstractMultimap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)
  name: AbstractSetMultimap.equals(Object)
  nameWithType: AbstractSetMultimap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)
  name: AbstractMapBasedMultimap.containsKey(Object)
  nameWithType: AbstractMapBasedMultimap.containsKey(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  name: AbstractSortedSetMultimap.replaceValues(K,Iterable<? extends V>)
  nameWithType: AbstractSortedSetMultimap.replaceValues(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  name: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  nameWithType: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.containsEntry(Object,Object)
  nameWithType: AbstractMultimap.containsEntry(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.get(K)
  name: AbstractSortedSetMultimap.get(K)
  nameWithType: AbstractSortedSetMultimap.get(K)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.get(K)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()
  name: AbstractSetMultimap.entries()
  nameWithType: AbstractSetMultimap.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSetMultimap.entries()
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: '? super K'
  name: '? super K'
  nameWithType: '? super K'
  fullName: '? super K'
- uid: '? super V'
  name: '? super V'
  nameWithType: '? super V'
  fullName: '? super V'
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.NavigableSet
  name: NavigableSet
  nameWithType: NavigableSet
  fullName: java.util.NavigableSet
- uid: java.util.NavigableMap
  name: NavigableMap
  nameWithType: NavigableMap
  fullName: java.util.NavigableMap
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap
  name: AbstractSortedKeySortedSetMultimap
  nameWithType: AbstractSortedKeySortedSetMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedKeySortedSetMultimap
- uid: '? super K,? super V>)'
  name: '? super K,? super V>)'
  nameWithType: '? super K,? super V>)'
  fullName: '? super K,? super V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer
  name: AbstractMapBasedMultimap.forEach(BiConsumer
  nameWithType: AbstractMapBasedMultimap.forEach(BiConsumer
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer
- uid: '? extends V>)'
  name: '? extends V>)'
  nameWithType: '? extends V>)'
  fullName: '? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
  name: AbstractMultimap.putAll(K,Iterable
  nameWithType: AbstractMultimap.putAll(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.replaceValues(K,java.lang.Iterable
  name: AbstractSortedSetMultimap.replaceValues(K,Iterable
  nameWithType: AbstractSortedSetMultimap.replaceValues(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractSortedSetMultimap.replaceValues(K,java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
  name: AbstractMultimap.putAll(Multimap
  nameWithType: AbstractMultimap.putAll(Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
