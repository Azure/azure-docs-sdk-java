### YamlMime:JavaMember
uid: "com.azure.core.tracing.opentelemetry.implementation.OpenTelemetrySpanSuppressionHelper.registerClientSpan*"
fullName: "com.azure.core.tracing.opentelemetry.implementation.OpenTelemetrySpanSuppressionHelper.registerClientSpan"
name: "registerClientSpan"
nameWithType: "OpenTelemetrySpanSuppressionHelper.registerClientSpan"
members:
- uid: "com.azure.core.tracing.opentelemetry.implementation.OpenTelemetrySpanSuppressionHelper.registerClientSpan(io.opentelemetry.context.Context)"
  fullName: "com.azure.core.tracing.opentelemetry.implementation.OpenTelemetrySpanSuppressionHelper.registerClientSpan(Context traceContext)"
  name: "registerClientSpan(Context traceContext)"
  nameWithType: "OpenTelemetrySpanSuppressionHelper.registerClientSpan(Context traceContext)"
  summary: "Registers span from given trace context as client span for opentelemetry agent to avoid duplication."
  parameters:
  - description: "OpenTelemetry context with client span"
    name: "traceContext"
    type: "<xref href=\"io.opentelemetry.context.Context?alt=io.opentelemetry.context.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Object registerClientSpan(Context traceContext)"
  returns:
    description: "Agent context or null when agent is not running or doesn't behave as expected."
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.core.tracing.opentelemetry.implementation"
artifact: com.azure:azure-core-tracing-opentelemetry:1.0.0-beta.19
