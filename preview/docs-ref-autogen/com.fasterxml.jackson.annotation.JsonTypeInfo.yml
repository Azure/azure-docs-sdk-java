### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo
  id: JsonTypeInfo
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonTypeInfo.As
  - com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  - com.fasterxml.jackson.annotation.JsonTypeInfo.None
  - com.fasterxml.jackson.annotation.JsonTypeInfo.defaultImpl()
  - com.fasterxml.jackson.annotation.JsonTypeInfo.include()
  - com.fasterxml.jackson.annotation.JsonTypeInfo.property()
  - com.fasterxml.jackson.annotation.JsonTypeInfo.use()
  - com.fasterxml.jackson.annotation.JsonTypeInfo.visible()
  langs:
  - java
  name: JsonTypeInfo
  nameWithType: JsonTypeInfo
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: "Annotation used for configuring details of if and how type information is used with JSON serialization and deserialization, to preserve information about actual class of Object instances. This is necessarily for polymorphic types, and may also be needed to link abstract declared types and matching concrete implementation.\n\nSome examples of typical annotations:\n\n```java\n// Include Java class name (\"com.myempl.ImplClass\") as JSON property \"class\"\n  @JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\n  \n  // Include logical type name (defined in impl classes) as wrapper; 2 annotations\n  @JsonTypeInfo(use=Id.NAME, include=As.WRAPPER_OBJECT)\n  @JsonSubTypes({com.myemp.Impl1.class, com.myempl.Impl2.class})\n```\n\nAlternatively you can also define fully customized type handling by using `@JsonTypeResolver` annotation (from databind package).\n\nThis annotation can be used both for types (classes) and properties. If both exist, annotation on property has precedence, as it is considered more specific.\n\nWhen used for properties (fields, methods), this annotation applies to **values**: so when applied to structure types (like <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\">java.util.Collection</xref>, <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\">java.util.Map</xref>, arrays), will apply to contained values, not the container; for non-structured types there is no difference. This is identical to how JAXB handles type information annotations; and is chosen since it is the dominant use case. There is no per-property way to force type information to be included for type of container (structured type); for container types one has to use annotation for type declaration.\n\nNote on visibility of type identifier: by default, deserialization (use during reading of JSON) of type identifier is completely handled by Jackson, and is **not passed to** deserializers. However, if so desired, it is possible to define property `visible = true` in which case property will be passed as-is to deserializers (and set via setter or field) on deserialization.\n\nOn serialization side, Jackson will generate type id by itself, except if there is a property with name that matches <xref uid=\"com.fasterxml.jackson.annotation.JsonTypeInfo.property()\" data-throw-if-not-resolved=\"false\">#property()</xref>, in which case value of that property is used instead.\n\nNOTE: use of type id of \"class name\" with very general base type (such as <xref uid=\"java.lang.Object\" data-throw-if-not-resolved=\"false\">java.lang.Object</xref> or <xref uid=\"java.io.Serializable\" data-throw-if-not-resolved=\"false\">java.io.Serializable</xref>) can potentially open up security holes if deserializing content generated by untrusted sources. If content can not be trusted, it is necessary to either use \"type name\" as type id, or to limit possible types using other means."
  syntax:
    content: public interface JsonTypeInfo implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.defaultImpl()
  id: defaultImpl()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo
  langs:
  - java
  name: defaultImpl()
  nameWithType: JsonTypeInfo.defaultImpl()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.defaultImpl()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.defaultImpl*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Optional property that can be used to specify default implementation class to use for deserialization if type identifier is either not present, or can not be mapped to a registered type (which can occur for ids, but not when specifying explicit class to use). Property has no effect on choice of type id used for serialization; it is only used in deciding what to do for otherwise unmappable cases.


    Note that while this property allows specification of the default implementation to use, it does not help with structural issues that may arise if type information is missing. This means that most often this is used with type-name -based resolution, to cover cases where new sub-types are added, but base type is not changed to reference new sub-types.


    There are certain special values that indicate alternate behavior:

     *  <xref uid="java.lang.Void" data-throw-if-not-resolved="false">java.lang.Void</xref> means that objects with unmappable (or missing) type are to be mapped to null references. For backwards compatibility (2.5 and below), value of `com.fasterxml.jackson.databind.annotation.NoClass` is also allowed for such usage.
     *  Placeholder value of <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo" data-throw-if-not-resolved="false">JsonTypeInfo</xref> (that is, this annotation type itself\} means "there is no default implementation" (in which case an error results from unmappable type). For backwards compatibility with earlier versions (2.5 and below), value of <xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo.None" data-throw-if-not-resolved="false">JsonTypeInfo.None</xref> may also be used.
  syntax:
    content: public abstract Class<?> defaultImpl()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.include()
  id: include()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo
  langs:
  - java
  name: include()
  nameWithType: JsonTypeInfo.include()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.include()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.include*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Specifies mechanism to use for including type metadata (if any; for <xref uid="" data-throw-if-not-resolved="false">Id#NONE</xref> nothing is included); used when serializing, and expected when deserializing.


    Note that for type metadata type of <xref uid="" data-throw-if-not-resolved="false">Id#CUSTOM</xref>, this setting may or may not have any effect.
  syntax:
    content: public abstract JsonTypeInfo.As include()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.property()
  id: property()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo
  langs:
  - java
  name: property()
  nameWithType: JsonTypeInfo.property()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.property()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.property*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Property names used when type inclusion method (<xref uid="" data-throw-if-not-resolved="false">As#PROPERTY</xref>) is used (or possibly when using type metadata of type <xref uid="" data-throw-if-not-resolved="false">Id#CUSTOM</xref>). If POJO itself has a property with same name, value of property will be set with type id metadata: if no such property exists, type id is only used for determining actual type.


    Default property name used if this property is not explicitly defined (or is set to empty `String`) is based on type metadata type (<xref uid="com.fasterxml.jackson.annotation.JsonTypeInfo.use*" data-throw-if-not-resolved="false">#use</xref>) used.
  syntax:
    content: public abstract String property()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.use()
  id: use()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo
  langs:
  - java
  name: use()
  nameWithType: JsonTypeInfo.use()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.use()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.use*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Specifies kind of type metadata to use when serializing type information for instances of annotated type and its subtypes; as well as what is expected during deserialization.
  syntax:
    content: public abstract JsonTypeInfo.Id use()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.visible()
  id: visible()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonTypeInfo
  langs:
  - java
  name: visible()
  nameWithType: JsonTypeInfo.visible()
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.visible()
  overload: com.fasterxml.jackson.annotation.JsonTypeInfo.visible*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Property that defines whether type identifier value will be passed as part of JSON stream to deserializer (true), or handled and removed by `TypeDeserializer` (false). Property has no effect on serialization.


    Default value is false, meaning that Jackson handles and removes the type identifier from JSON content that is passed to `JsonDeserializer`.
  syntax:
    content: public abstract boolean visible()
    return:
      type: boolean
references:
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
  name: JsonTypeInfo.Id
  nameWithType: JsonTypeInfo.Id
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.Id
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.use*
  name: use
  nameWithType: JsonTypeInfo.use
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.use
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  name: JsonTypeInfo.As
  nameWithType: JsonTypeInfo.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.include*
  name: include
  nameWithType: JsonTypeInfo.include
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.include
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.property*
  name: property
  nameWithType: JsonTypeInfo.property
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.property
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.defaultImpl*
  name: defaultImpl
  nameWithType: JsonTypeInfo.defaultImpl
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.defaultImpl
  package: com.fasterxml.jackson.annotation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.visible*
  name: visible
  nameWithType: JsonTypeInfo.visible
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.visible
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.None
  name: JsonTypeInfo.None
  nameWithType: JsonTypeInfo.None
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.None
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
