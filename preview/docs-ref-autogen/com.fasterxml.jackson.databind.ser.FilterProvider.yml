### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.FilterProvider
  id: FilterProvider
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.FilterProvider.FilterProvider()
  - com.fasterxml.jackson.databind.ser.FilterProvider.findFilter(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
  langs:
  - java
  name: FilterProvider
  nameWithType: FilterProvider
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider
  type: Class
  package: com.fasterxml.jackson.databind.ser
  summary: Interface for objects that providers instances of <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref> that match given ids. A provider is configured to be used during serialization, to find filter to used based on id specified by <xref uid="com.fasterxml.jackson.annotation.JsonFilter" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonFilter</xref> annotation on bean class.
  syntax:
    content: public abstract class FilterProvider
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.FilterProvider()
  id: FilterProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.FilterProvider
  langs:
  - java
  name: FilterProvider()
  nameWithType: FilterProvider.FilterProvider()
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.FilterProvider()
  overload: com.fasterxml.jackson.databind.ser.FilterProvider.FilterProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: public FilterProvider()
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter(java.lang.Object)
  id: findFilter(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.FilterProvider
  langs:
  - java
  name: findFilter(Object filterId)
  nameWithType: FilterProvider.findFilter(Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter(Object filterId)
  overload: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Lookup method used to find <xref uid="com.fasterxml.jackson.databind.ser.BeanPropertyFilter" data-throw-if-not-resolved="false">BeanPropertyFilter</xref> that has specified id. Note that id is typically a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>, but is not necessarily limited to that; that is, while standard components use String, custom implementation can choose other kinds of keys.
  syntax:
    content: public abstract BeanPropertyFilter findFilter(Object filterId)
    parameters:
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
      description: >-
        Filter registered with specified id, if one defined; null if
           none found.
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter(java.lang.Object,java.lang.Object)
  id: findPropertyFilter(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.FilterProvider
  langs:
  - java
  name: findPropertyFilter(Object filterId, Object valueToFilter)
  nameWithType: FilterProvider.findPropertyFilter(Object filterId, Object valueToFilter)
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter(Object filterId, Object valueToFilter)
  overload: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Lookup method used to find <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref> that has specified id. Note that id is typically a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>, but is not necessarily limited to that; that is, while standard components use String, custom implementation can choose other kinds of keys.


    This method is the replacement for <xref uid="com.fasterxml.jackson.databind.ser.FilterProvider.findFilter*" data-throw-if-not-resolved="false">#findFilter</xref> starting with 2.3.


    Note that the default implementation is designed to support short-term backwards compatibility, and will call the deprecated `findFilter` method, then wrap filter if one found as <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref>. It should be overridden by up-to-date implementations
  syntax:
    content: public PropertyFilter findPropertyFilter(Object filterId, Object valueToFilter)
    parameters:
    - id: filterId
      type: java.lang.Object
      description: Id of the filter to fetch
    - id: valueToFilter
      type: java.lang.Object
      description: >-
        Object being filtered (usually POJO, but may be a <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>,
           or in future a container), <b>if available</b>; not available when generating
           schemas.
    return:
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
      description: Filter to use, if any.
references:
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.FilterProvider*
  name: FilterProvider
  nameWithType: FilterProvider.FilterProvider
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.FilterProvider
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  name: BeanPropertyFilter
  nameWithType: BeanPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter*
  name: findFilter
  nameWithType: FilterProvider.findFilter
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.findFilter
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.PropertyFilter
  name: PropertyFilter
  nameWithType: PropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter*
  name: findPropertyFilter
  nameWithType: FilterProvider.findPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.FilterProvider.findPropertyFilter
  package: com.fasterxml.jackson.databind.ser
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
