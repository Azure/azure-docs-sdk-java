### YamlMime:JavaType
uid: "com.azure.core.models.JsonPatchDocument"
fullName: "com.azure.core.models.JsonPatchDocument"
name: "JsonPatchDocument"
nameWithType: "JsonPatchDocument"
summary: "Represents a JSON Patch document."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class JsonPatchDocument"
constructors:
- uid: "com.azure.core.models.JsonPatchDocument.JsonPatchDocument()"
  fullName: "com.azure.core.models.JsonPatchDocument.JsonPatchDocument()"
  name: "JsonPatchDocument()"
  nameWithType: "JsonPatchDocument.JsonPatchDocument()"
  summary: "Creates a new JSON Patch document."
  syntax: "public JsonPatchDocument()"
  desc: "Creates a new JSON Patch document."
- uid: "com.azure.core.models.JsonPatchDocument.JsonPatchDocument(com.azure.core.util.serializer.JsonSerializer)"
  fullName: "com.azure.core.models.JsonPatchDocument.JsonPatchDocument(JsonSerializer serializer)"
  name: "JsonPatchDocument(JsonSerializer serializer)"
  nameWithType: "JsonPatchDocument.JsonPatchDocument(JsonSerializer serializer)"
  summary: "Creates a new JSON Patch document."
  parameters:
  - description: "The <xref uid=\"com.azure.core.util.serializer.JsonSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonSerializer\"></xref> that will be used to serialize patch operation values."
    name: "serializer"
    type: "<xref href=\"com.azure.core.util.serializer.JsonSerializer?alt=com.azure.core.util.serializer.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument(JsonSerializer serializer)"
  desc: "Creates a new JSON Patch document.\n\nIf `serializer` isn't specified <xref uid=\"com.azure.core.util.serializer.JacksonAdapter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JacksonAdapter\"></xref> will be used."
methods:
- uid: "com.azure.core.models.JsonPatchDocument.appendAdd(java.lang.String,java.lang.Object)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendAdd(String path, Object value)"
  name: "appendAdd(String path, Object value)"
  nameWithType: "JsonPatchDocument.appendAdd(String path, Object value)"
  summary: "Appends an \"add\" operation to this JSON Patch document."
  parameters:
  - description: "The path to apply the addition."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value that will be serialized and added to the path."
    name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendAdd(String path, Object value)"
  desc: "Appends an \"add\" operation to this JSON Patch document.\n\nIf the `path` doesn't exist a new member is added to the object. If the `path` does exist the previous value is replaced. If the `path` specifies an array index the value is inserted at the specified.\n\nSee [JSON Patch Add][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Add an object member to the JSON document { \"foo\" : \"bar\" } to get the JSON document\n  * { \"bar\": \"foo\", \"foo\": \"bar\" }.\n  */\n jsonPatchDocument.appendAdd(\"/bar\", \"foo\");\n\n /*\n  * Add an array element to the JSON document { \"foo\": [ \"fizz\", \"fizzbuzz\" ] } to get the JSON document\n  * { \"foo\": [ \"fizz\", \"buzz\", \"fizzbuzz\" ] }.\n  */\n jsonPatchDocument.appendAdd(\"/foo/1\", \"buzz\");\n\n /*\n  * Add a nested member to the JSON document { \"foo\": \"bar\" } to get the JSON document\n  * { \"foo\": \"bar\", \"child\": { \"grandchild\": { } } }.\n  */\n jsonPatchDocument.appendAdd(\"/child\", Collections.singletonMap(\"grandchild\", Collections.emptyMap()));\n\n /*\n  * Add an array element to the JSON document { \"foo\": [ \"fizz\", \"buzz\" ] } to get the JSON document\n  * { \"foo\": [ \"fizz\", \"buzz\", \"fizzbuzz\" ] }.\n  */\n jsonPatchDocument.appendAdd(\"/foo/-\", \"fizzbuzz\");\n```\n\n\n[JSON Patch Add]: https://tools.ietf.org/html/rfc6902#section-4.1"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendAddRaw(java.lang.String,java.lang.String)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendAddRaw(String path, String rawJson)"
  name: "appendAddRaw(String path, String rawJson)"
  nameWithType: "JsonPatchDocument.appendAddRaw(String path, String rawJson)"
  summary: "Appends an \"add\" operation to this JSON Patch document."
  parameters:
  - description: "The path to apply the addition."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The raw JSON value that will be added to the path."
    name: "rawJson"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendAddRaw(String path, String rawJson)"
  desc: "Appends an \"add\" operation to this JSON Patch document.\n\nIf the `path` doesn't exist a new member is added to the object. If the `path` does exist the previous value is replaced. If the `path` specifies an array index the value is inserted at the specified.\n\nSee [JSON Patch Add][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Add an object member to the JSON document { \"foo\" : \"bar\" } to get the JSON document\n  * { \"bar\": \"foo\", \"foo\": \"bar\" }.\n  */\n jsonPatchDocument.appendAddRaw(\"/bar\", \"\\\"foo\\\"\");\n\n /*\n  * Add an array element to the JSON document { \"foo\": [ \"fizz\", \"fizzbuzz\" ] } to get the JSON document\n  * { \"foo\": [ \"fizz\", \"buzz\", \"fizzbuzz\" ] }.\n  */\n jsonPatchDocument.appendAddRaw(\"/foo/1\", \"\\\"buzz\\\"\");\n\n /*\n  * Add a nested member to the JSON document { \"foo\": \"bar\" } to get the JSON document\n  * { \"foo\": \"bar\", \"child\": { \"grandchild\": { } } }.\n  */\n jsonPatchDocument.appendAddRaw(\"/child\", \"\\\"child\\\": { \\\"grandchild\\\": { } }\");\n\n /*\n  * Add an array element to the JSON document { \"foo\": [ \"fizz\", \"buzz\" ] } to get the JSON document\n  * { \"foo\": [ \"fizz\", \"buzz\", \"fizzbuzz\" ] }.\n  */\n jsonPatchDocument.appendAddRaw(\"/foo/-\", \"\\\"fizzbuzz\\\"\");\n```\n\n\n[JSON Patch Add]: https://tools.ietf.org/html/rfc6902#section-4.1"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendCopy(java.lang.String,java.lang.String)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendCopy(String from, String path)"
  name: "appendCopy(String from, String path)"
  nameWithType: "JsonPatchDocument.appendCopy(String from, String path)"
  summary: "Appends a \"copy\" operation to this JSON Patch document."
  parameters:
  - description: "The path to copy from."
    name: "from"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to copy to."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendCopy(String from, String path)"
  desc: "Appends a \"copy\" operation to this JSON Patch document.\n\nSee [JSON Patch copy][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Copy an object member in the JSON document { \"foo\": \"bar\" } to get the JSON document\n  * { \"foo\": \"bar\", \"copy\": \"bar\" }.\n  */\n jsonPatchDocument.appendCopy(\"/foo\", \"/copy\");\n\n /*\n  * Copy an object member in the JSON document { \"foo\": { \"bar\": \"baz\" } } to get the JSON document\n  * { \"foo\": { \"bar\": \"baz\" }, \"bar\": \"baz\" }.\n  */\n jsonPatchDocument.appendCopy(\"/foo/bar\", \"/bar\");\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an invalid copy operation as the\n  * target from doesn't exist in the document.\n  */\n jsonPatchDocument.appendCopy(\"/baz\", \"/fizz\");\n```\n\n\n[JSON Patch copy]: https://tools.ietf.org/html/rfc6902#section-4.5"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendMove(java.lang.String,java.lang.String)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendMove(String from, String path)"
  name: "appendMove(String from, String path)"
  nameWithType: "JsonPatchDocument.appendMove(String from, String path)"
  summary: "Appends a \"move\" operation to this JSON Patch document."
  parameters:
  - description: "The path to move from."
    name: "from"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The path to move to."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendMove(String from, String path)"
  desc: "Appends a \"move\" operation to this JSON Patch document.\n\nFor the operation to be successful `path` cannot be a child node of `from`.\n\nSee [JSON Patch move][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Move an object member in the JSON document { \"foo\": \"bar\", \"bar\": \"foo\" } to get the JSON document\n  * { \"bar\": \"bar\" }.\n  */\n jsonPatchDocument.appendMove(\"/foo\", \"/bar\");\n\n /*\n  * Move an object member in the JSON document { \"foo\": { \"bar\": \"baz\" } } to get the JSON document\n  * { \"foo\": \"baz\" }.\n  */\n jsonPatchDocument.appendMove(\"/foo/bar\", \"/foo\");\n\n /*\n  * Given the JSON document { \"foo\": { \"bar\": \"baz\" } } the following is an example of an invalid move operation\n  * as the target path is a child of the target from.\n  */\n jsonPatchDocument.appendMove(\"/foo\", \"/foo/bar\");\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an invalid move operation as the\n  * target from doesn't exist in the document.\n  */\n jsonPatchDocument.appendMove(\"/baz\", \"/fizz\");\n```\n\n\n[JSON Patch move]: https://tools.ietf.org/html/rfc6902#section-4.4"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendRemove(java.lang.String)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendRemove(String path)"
  name: "appendRemove(String path)"
  nameWithType: "JsonPatchDocument.appendRemove(String path)"
  summary: "Appends a \"remove\" operation to this JSON Patch document."
  parameters:
  - description: "The path to remove."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendRemove(String path)"
  desc: "Appends a \"remove\" operation to this JSON Patch document.\n\nSee [JSON Patch remove][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Remove an object member in the JSON document { \"foo\": \"bar\", \"bar\": \"foo\" } to get the JSON document\n  * { \"foo\": \"bar\" }.\n  */\n jsonPatchDocument.appendRemove(\"/bar\");\n\n /*\n  * Remove an object member in the JSON document { \"foo\": { \"bar\": \"baz\" } } to get the JSON document\n  * { \"foo\": { } }.\n  */\n jsonPatchDocument.appendRemove(\"/foo/bar\");\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an invalid remove operation as the\n  * target from doesn't exist in the document.\n  */\n jsonPatchDocument.appendRemove(\"/baz\");\n```\n\n\n[JSON Patch remove]: https://tools.ietf.org/html/rfc6902#section-4.2"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendReplace(java.lang.String,java.lang.Object)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendReplace(String path, Object value)"
  name: "appendReplace(String path, Object value)"
  nameWithType: "JsonPatchDocument.appendReplace(String path, Object value)"
  summary: "Appends a \"replace\" operation to this JSON Patch document."
  parameters:
  - description: "The path to replace."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value will be serialized and used as the replacement."
    name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendReplace(String path, Object value)"
  desc: "Appends a \"replace\" operation to this JSON Patch document.\n\nSee [JSON Patch replace][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Replace an object member in the JSON document { \"bar\": \"qux\", \"foo\": \"bar\" } to get the JSON document\n  * { \"bar\": \"foo\", \"foo\": \"bar\" }.\n  */\n jsonPatchDocument.appendReplace(\"/bar\", \"foo\");\n\n /*\n  * Replace an object member in the JSON document { \"foo\": \"fizz\" } to get the JSON document\n  * { \"foo\": [ \"fizz\", \"buzz\", \"fizzbuzz\" ]  }.\n  */\n jsonPatchDocument.appendReplace(\"/foo\", new String[] {\"fizz\", \"buzz\", \"fizzbuzz\"});\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an invalid replace operation as the\n  * target path doesn't exist in the document.\n  */\n jsonPatchDocument.appendReplace(\"/baz\", \"foo\");\n```\n\n\n[JSON Patch replace]: https://tools.ietf.org/html/rfc6902#section-4.3"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendReplaceRaw(java.lang.String,java.lang.String)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendReplaceRaw(String path, String rawJson)"
  name: "appendReplaceRaw(String path, String rawJson)"
  nameWithType: "JsonPatchDocument.appendReplaceRaw(String path, String rawJson)"
  summary: "Appends a \"replace\" operation to this JSON Patch document."
  parameters:
  - description: "The path to replace."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The raw JSON value that will be used as the replacement."
    name: "rawJson"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendReplaceRaw(String path, String rawJson)"
  desc: "Appends a \"replace\" operation to this JSON Patch document.\n\nSee [JSON Patch replace][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Replace an object member in the JSON document { \"bar\": \"qux\", \"foo\": \"bar\" } to get the JSON document\n  * { \"bar\": \"foo\", \"foo\": \"bar\" }.\n  */\n jsonPatchDocument.appendReplaceRaw(\"/bar\", \"\\\"foo\\\"\");\n\n /*\n  * Replace an object member in the JSON document { \"foo\": \"fizz\" } to get the JSON document\n  * { \"foo\": [ \"fizz\", \"buzz\", \"fizzbuzz\" ]  }.\n  */\n jsonPatchDocument.appendReplaceRaw(\"/foo\", \"[ \\\"fizz\\\", \\\"buzz\\\", \\\"fizzbuzz\\\" ]\");\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an invalid replace operation as the\n  * target path doesn't exist in the document.\n  */\n jsonPatchDocument.appendReplaceRaw(\"/baz\", \"\\\"foo\\\"\");\n```\n\n\n[JSON Patch replace]: https://tools.ietf.org/html/rfc6902#section-4.3"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendTest(java.lang.String,java.lang.Object)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendTest(String path, Object value)"
  name: "appendTest(String path, Object value)"
  nameWithType: "JsonPatchDocument.appendTest(String path, Object value)"
  summary: "Appends a \"test\" operation to this JSON Patch document."
  parameters:
  - description: "The path to test."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value that will be serialized and used to test against."
    name: "value"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendTest(String path, Object value)"
  desc: "Appends a \"test\" operation to this JSON Patch document.\n\nSee [JSON Patch test][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Test an object member in the JSON document { \"foo\": \"bar\" } to get a successful operation.\n  */\n jsonPatchDocument.appendTest(\"/foo\", \"bar\");\n\n /*\n  * Test an object member in the JSON document { \"foo\": \"bar\" } to get a unsuccessful operation.\n  */\n jsonPatchDocument.appendTest(\"/foo\", 42);\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an unsuccessful test operation as\n  * the target path doesn't exist in the document.\n  */\n jsonPatchDocument.appendTest(\"/baz\", \"bar\");\n```\n\n\n[JSON Patch test]: https://tools.ietf.org/html/rfc6902#section-4.6"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.appendTestRaw(java.lang.String,java.lang.String)"
  fullName: "com.azure.core.models.JsonPatchDocument.appendTestRaw(String path, String rawJson)"
  name: "appendTestRaw(String path, String rawJson)"
  nameWithType: "JsonPatchDocument.appendTestRaw(String path, String rawJson)"
  summary: "Appends a \"test\" operation to this JSON Patch document."
  parameters:
  - description: "The path to test."
    name: "path"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The raw JSON value that will be used to test against."
    name: "rawJson"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonPatchDocument appendTestRaw(String path, String rawJson)"
  desc: "Appends a \"test\" operation to this JSON Patch document.\n\nSee [JSON Patch test][] for more information.\n\n**Code Samples**\n\n```java\n/*\n  * Test an object member in the JSON document { \"foo\": \"bar\" } to get a successful operation.\n  */\n jsonPatchDocument.appendTestRaw(\"/foo\", \"\\\"bar\\\"\");\n\n /*\n  * Test an object member in the JSON document { \"foo\": \"bar\" } to get a unsuccessful operation.\n  */\n jsonPatchDocument.appendTestRaw(\"/foo\", \"42\");\n\n /*\n  * Given the JSON document { \"foo\": \"bar\" } the following is an example of an unsuccessful test operation as\n  * the target path doesn't exist in the document.\n  */\n jsonPatchDocument.appendTestRaw(\"/baz\", \"\\\"bar\\\"\");\n```\n\n\n[JSON Patch test]: https://tools.ietf.org/html/rfc6902#section-4.6"
  returns:
    description: "The updated JsonPatchDocument object."
    type: "<xref href=\"com.azure.core.models.JsonPatchDocument?alt=com.azure.core.models.JsonPatchDocument&text=JsonPatchDocument\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.models.JsonPatchDocument.toString()"
  fullName: "com.azure.core.models.JsonPatchDocument.toString()"
  name: "toString()"
  nameWithType: "JsonPatchDocument.toString()"
  summary: "Gets a formatted JSON string representation of this JSON Patch document."
  overridden: "java.lang.Object.toString()"
  syntax: "public String toString()"
  desc: "Gets a formatted JSON string representation of this JSON Patch document."
  returns:
    description: "The formatted JSON String representing this JSON Patch docuemnt."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents a JSON Patch document."
metadata: {}
package: "com.azure.core.models"
artifact: com.azure:azure-core:1.22.0-beta.1
