### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.ObjectCodec.readValue*"
fullName: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue"
name: "<T>readValue"
nameWithType: "ObjectCodec.<T>readValue"
members:
- uid: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.ResolvedType)"
  fullName: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(JsonParser p, ResolvedType valueType)"
  name: "<T>readValue(JsonParser p, ResolvedType valueType)"
  nameWithType: "ObjectCodec.<T>readValue(JsonParser p, ResolvedType valueType)"
  summary: "Method to deserialize JSON content into a POJO, type specified with fully resolved type object (so it can be a generic type, including containers like <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> and <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>)."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.core.type.ResolvedType?alt=com.fasterxml.jackson.core.type.ResolvedType&text=ResolvedType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract T <T>readValue(JsonParser p, ResolvedType valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  name: "<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  nameWithType: "ObjectCodec.<T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  summary: "Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called \"super type token\" and specifically needs to be used if the root type is a parameterized (generic) container type."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract T <T>readValue(JsonParser p, TypeReference<T> valueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(com.fasterxml.jackson.core.JsonParser,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.core.ObjectCodec.<T>readValue(JsonParser p, Class<T> valueType)"
  name: "<T>readValue(JsonParser p, Class<T> valueType)"
  nameWithType: "ObjectCodec.<T>readValue(JsonParser p, Class<T> valueType)"
  summary: "Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like <xref uid=\"java.lang.Boolean\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.Boolean\"></xref>).\n\nNote: this method should NOT be used if the result type is a container (<xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref> or <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>. The reason is that due to type erasure, key and value types can not be introspected when using this method."
  parameters:
  - name: "p"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonParser?alt=com.fasterxml.jackson.core.JsonParser&text=JsonParser\" data-throw-if-not-resolved=\"False\" />"
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract T <T>readValue(JsonParser p, Class<T> valueType)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
