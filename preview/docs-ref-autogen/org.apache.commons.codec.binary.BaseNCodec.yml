### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.binary.BaseNCodec
  id: BaseNCodec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary
  children:
  - org.apache.commons.codec.binary.BaseNCodec.BaseNCodec(int,int,int,int)
  - org.apache.commons.codec.binary.BaseNCodec.BaseNCodec(int,int,int,int,byte)
  - org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS
  - org.apache.commons.codec.binary.BaseNCodec.MIME_CHUNK_SIZE
  - org.apache.commons.codec.binary.BaseNCodec.PAD
  - org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT
  - org.apache.commons.codec.binary.BaseNCodec.PEM_CHUNK_SIZE
  - org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
  - org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
  - org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
  - org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
  - org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  - org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  - org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
  - org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
  - org.apache.commons.codec.binary.BaseNCodec.lineLength
  - org.apache.commons.codec.binary.BaseNCodec.pad
  langs:
  - java
  name: BaseNCodec
  nameWithType: BaseNCodec
  fullName: org.apache.commons.codec.binary.BaseNCodec
  type: Class
  package: org.apache.commons.codec.binary
  summary: >-
    Abstract superclass for Base-N encoders and decoders.


    This class is thread-safe.
  syntax:
    content: public abstract class BaseNCodec implements BinaryEncoder, BinaryDecoder
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.commons.codec.BinaryEncoder
  - org.apache.commons.codec.BinaryDecoder
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec(int,int,int,int)
  id: BaseNCodec(int,int,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength)
  nameWithType: BaseNCodec.BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength)
  fullName: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength)
  overload: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: Note `lineLength` is rounded down to the nearest multiple of <xref uid="org.apache.commons.codec.binary.BaseNCodec.encodedBlockSize" data-throw-if-not-resolved="false">#encodedBlockSize</xref> If `chunkSeparatorLength` is zero, then chunking is disabled.
  syntax:
    content: protected BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength)
    parameters:
    - id: unencodedBlockSize
      type: int
      description: the size of an unencoded block (e.g. Base64 = 3)
    - id: encodedBlockSize
      type: int
      description: the size of an encoded block (e.g. Base64 = 4)
    - id: lineLength
      type: int
      description: if &gt; 0, use chunking with a length <code>lineLength</code>
    - id: chunkSeparatorLength
      type: int
      description: the chunk separator length, if relevant
- uid: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec(int,int,int,int,byte)
  id: BaseNCodec(int,int,int,int,byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength, byte pad)
  nameWithType: BaseNCodec.BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength, byte pad)
  fullName: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength, byte pad)
  overload: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: Note `lineLength` is rounded down to the nearest multiple of <xref uid="org.apache.commons.codec.binary.BaseNCodec.encodedBlockSize" data-throw-if-not-resolved="false">#encodedBlockSize</xref> If `chunkSeparatorLength` is zero, then chunking is disabled.
  syntax:
    content: protected BaseNCodec(int unencodedBlockSize, int encodedBlockSize, int lineLength, int chunkSeparatorLength, byte pad)
    parameters:
    - id: unencodedBlockSize
      type: int
      description: the size of an unencoded block (e.g. Base64 = 3)
    - id: encodedBlockSize
      type: int
      description: the size of an encoded block (e.g. Base64 = 4)
    - id: lineLength
      type: int
      description: if &gt; 0, use chunking with a length <code>lineLength</code>
    - id: chunkSeparatorLength
      type: int
      description: the chunk separator length, if relevant
    - id: pad
      type: byte
      description: byte used as padding byte.
- uid: org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS
  id: MASK_8BITS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: MASK_8BITS
  nameWithType: BaseNCodec.MASK_8BITS
  fullName: org.apache.commons.codec.binary.BaseNCodec.MASK_8BITS
  type: Field
  package: org.apache.commons.codec.binary
  summary: Mask used to extract 8 bits, used in decoding bytes
  syntax:
    content: protected static final int MASK_8BITS
    return:
      type: int
- uid: org.apache.commons.codec.binary.BaseNCodec.MIME_CHUNK_SIZE
  id: MIME_CHUNK_SIZE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: MIME_CHUNK_SIZE
  nameWithType: BaseNCodec.MIME_CHUNK_SIZE
  fullName: org.apache.commons.codec.binary.BaseNCodec.MIME_CHUNK_SIZE
  type: Field
  package: org.apache.commons.codec.binary
  summary: >-
    MIME chunk size per RFC 2045 section 6.8.


    The \{@value\} character limit does not count the trailing CRLF, but counts all other characters, including any equal signs.
  syntax:
    content: public static final int MIME_CHUNK_SIZE
    return:
      type: int
- uid: org.apache.commons.codec.binary.BaseNCodec.PAD
  id: PAD
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: PAD
  nameWithType: BaseNCodec.PAD
  fullName: org.apache.commons.codec.binary.BaseNCodec.PAD
  type: Field
  package: org.apache.commons.codec.binary
  syntax:
    content: protected final byte PAD
    return:
      type: byte
- uid: org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT
  id: PAD_DEFAULT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: PAD_DEFAULT
  nameWithType: BaseNCodec.PAD_DEFAULT
  fullName: org.apache.commons.codec.binary.BaseNCodec.PAD_DEFAULT
  type: Field
  package: org.apache.commons.codec.binary
  summary: Byte used to pad output.
  syntax:
    content: protected static final byte PAD_DEFAULT
    return:
      type: byte
- uid: org.apache.commons.codec.binary.BaseNCodec.PEM_CHUNK_SIZE
  id: PEM_CHUNK_SIZE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: PEM_CHUNK_SIZE
  nameWithType: BaseNCodec.PEM_CHUNK_SIZE
  fullName: org.apache.commons.codec.binary.BaseNCodec.PEM_CHUNK_SIZE
  type: Field
  package: org.apache.commons.codec.binary
  summary: >-
    PEM chunk size per RFC 1421 section 4.3.2.4.


    The \{@value\} character limit does not count the trailing CRLF, but counts all other characters, including any equal signs.
  syntax:
    content: public static final int PEM_CHUNK_SIZE
    return:
      type: int
- uid: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
  id: containsAlphabetOrPad(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: containsAlphabetOrPad(byte[] arrayOctet)
  nameWithType: BaseNCodec.containsAlphabetOrPad(byte[] arrayOctet)
  fullName: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[] arrayOctet)
  overload: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Tests a given byte array to see if it contains any characters within the alphabet or PAD. Intended for use in checking line-ending arrays
  syntax:
    content: protected boolean containsAlphabetOrPad(byte[] arrayOctet)
    parameters:
    - id: arrayOctet
      type: byte[]
      description: byte array to test
    return:
      type: boolean
      description: <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
  id: decode(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: decode(byte[] pArray)
  nameWithType: BaseNCodec.decode(byte[] pArray)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(byte[] pArray)
  overload: org.apache.commons.codec.binary.BaseNCodec.decode*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Decodes a byte\[\] containing characters in the Base-N alphabet.
  syntax:
    content: public byte[] decode(byte[] pArray)
    parameters:
    - id: pArray
      type: byte[]
      description: A byte array containing Base-N character data
    return:
      type: byte[]
      description: a byte array containing binary data
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
  id: decode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: decode(Object obj)
  nameWithType: BaseNCodec.decode(Object obj)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(Object obj)
  overload: org.apache.commons.codec.binary.BaseNCodec.decode*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the Decoder interface, and will throw a DecoderException if the supplied object is not of type byte\[\] or String.
  syntax:
    content: public Object decode(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: Object to decode
    return:
      type: java.lang.Object
      description: >-
        An object (of type byte[]) containing the binary data which corresponds to the byte[] or String
                 supplied.
  exceptions:
  - type: org.apache.commons.codec.DecoderException
    description: if the parameter supplied is not of type byte[]
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
  id: decode(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: decode(String pArray)
  nameWithType: BaseNCodec.decode(String pArray)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(String pArray)
  overload: org.apache.commons.codec.binary.BaseNCodec.decode*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Decodes a String containing characters in the Base-N alphabet.
  syntax:
    content: public byte[] decode(String pArray)
    parameters:
    - id: pArray
      type: java.lang.String
      description: A String containing Base-N character data
    return:
      type: byte[]
      description: a byte array containing binary data
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
  id: encode(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: encode(byte[] pArray)
  nameWithType: BaseNCodec.encode(byte[] pArray)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(byte[] pArray)
  overload: org.apache.commons.codec.binary.BaseNCodec.encode*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes a byte\[\] containing binary data, into a byte\[\] containing characters in the alphabet.
  syntax:
    content: public byte[] encode(byte[] pArray)
    parameters:
    - id: pArray
      type: byte[]
      description: a byte array containing binary data
    return:
      type: byte[]
      description: A byte array containing only the base N alphabetic character data
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
  id: encode(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: encode(byte[] pArray, int offset, int length)
  nameWithType: BaseNCodec.encode(byte[] pArray, int offset, int length)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(byte[] pArray, int offset, int length)
  overload: org.apache.commons.codec.binary.BaseNCodec.encode*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes a byte\[\] containing binary data, into a byte\[\] containing characters in the alphabet.
  syntax:
    content: public byte[] encode(byte[] pArray, int offset, int length)
    parameters:
    - id: pArray
      type: byte[]
      description: a byte array containing binary data
    - id: offset
      type: int
      description: initial offset of the subarray.
    - id: length
      type: int
      description: length of the subarray.
    return:
      type: byte[]
      description: A byte array containing only the base N alphabetic character data
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
  id: encode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: encode(Object obj)
  nameWithType: BaseNCodec.encode(Object obj)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(Object obj)
  overload: org.apache.commons.codec.binary.BaseNCodec.encode*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the Encoder interface, and will throw an EncoderException if the supplied object is not of type byte\[\].
  syntax:
    content: public Object encode(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: Object to encode
    return:
      type: java.lang.Object
      description: An object (of type byte[]) containing the Base-N encoded data which corresponds to the byte[] supplied.
  exceptions:
  - type: org.apache.commons.codec.EncoderException
    description: if the parameter supplied is not of type byte[]
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
  id: encodeAsString(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: encodeAsString(byte[] pArray)
  nameWithType: BaseNCodec.encodeAsString(byte[] pArray)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[] pArray)
  overload: org.apache.commons.codec.binary.BaseNCodec.encodeAsString*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes a byte\[\] containing binary data, into a String containing characters in the appropriate alphabet. Uses UTF8 encoding.
  syntax:
    content: public String encodeAsString(byte[] pArray)
    parameters:
    - id: pArray
      type: byte[]
      description: a byte array containing binary data
    return:
      type: java.lang.String
      description: String containing only character data in the appropriate alphabet.
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
  id: encodeToString(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: encodeToString(byte[] pArray)
  nameWithType: BaseNCodec.encodeToString(byte[] pArray)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[] pArray)
  overload: org.apache.commons.codec.binary.BaseNCodec.encodeToString*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes a byte\[\] containing binary data, into a String containing characters in the Base-N alphabet. Uses UTF8 encoding.
  syntax:
    content: public String encodeToString(byte[] pArray)
    parameters:
    - id: pArray
      type: byte[]
      description: a byte array containing binary data
    return:
      type: java.lang.String
      description: A String containing only Base-N character data
- uid: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  id: ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: ensureBufferSize(int size, BaseNCodec.Context context)
  nameWithType: BaseNCodec.ensureBufferSize(int size, BaseNCodec.Context context)
  fullName: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int size, BaseNCodec.Context context)
  overload: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Ensure that the buffer has room for `size` bytes
  syntax:
    content: protected byte[] ensureBufferSize(int size, BaseNCodec.Context context)
    parameters:
    - id: size
      type: int
      description: minimum spare space required
    - id: context
      type: org.apache.commons.codec.binary.BaseNCodec.Context
      description: the context to be used
    return:
      type: byte[]
      description: the buffer
- uid: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  id: getDefaultBufferSize()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: getDefaultBufferSize()
  nameWithType: BaseNCodec.getDefaultBufferSize()
  fullName: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  overload: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Get the default buffer size. Can be overridden.
  syntax:
    content: protected int getDefaultBufferSize()
    return:
      type: int
      description: <xref uid="org.apache.commons.codec.binary.BaseNCodec.DEFAULT_BUFFER_SIZE" data-throw-if-not-resolved="false">#DEFAULT_BUFFER_SIZE</xref>
- uid: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
  id: getEncodedLength(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: getEncodedLength(byte[] pArray)
  nameWithType: BaseNCodec.getEncodedLength(byte[] pArray)
  fullName: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[] pArray)
  overload: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Calculates the amount of space needed to encode the supplied array.
  syntax:
    content: public long getEncodedLength(byte[] pArray)
    parameters:
    - id: pArray
      type: byte[]
      description: byte[] array which will later be encoded
    return:
      type: long
      description: >-
        amount of space needed to encoded the supplied array.
         Returns a long since a max-len array will require &gt; Integer.MAX_VALUE
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
  id: isInAlphabet(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: isInAlphabet(byte value)
  nameWithType: BaseNCodec.isInAlphabet(byte value)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte value)
  overload: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Returns whether or not the `octet` is in the current alphabet. Does not allow whitespace or pad.
  syntax:
    content: protected abstract boolean isInAlphabet(byte value)
    parameters:
    - id: value
      type: byte
      description: The value to test
    return:
      type: boolean
      description: <code>true</code> if the value is defined in the current alphabet, <code>false</code> otherwise.
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
  id: isInAlphabet(byte[],boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: isInAlphabet(byte[] arrayOctet, boolean allowWSPad)
  nameWithType: BaseNCodec.isInAlphabet(byte[] arrayOctet, boolean allowWSPad)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[] arrayOctet, boolean allowWSPad)
  overload: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Tests a given byte array to see if it contains only valid characters within the alphabet. The method optionally treats whitespace and pad as valid.
  syntax:
    content: public boolean isInAlphabet(byte[] arrayOctet, boolean allowWSPad)
    parameters:
    - id: arrayOctet
      type: byte[]
      description: byte array to test
    - id: allowWSPad
      type: boolean
      description: if <code>true</code>, then whitespace and PAD are also allowed
    return:
      type: boolean
      description: >-
        <code>true</code> if all bytes are valid characters in the alphabet or if the byte array is empty;
                 <code>false</code>, otherwise
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
  id: isInAlphabet(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: isInAlphabet(String basen)
  nameWithType: BaseNCodec.isInAlphabet(String basen)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(String basen)
  overload: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Tests a given String to see if it contains only valid characters within the alphabet. The method treats whitespace and PAD as valid.
  syntax:
    content: public boolean isInAlphabet(String basen)
    parameters:
    - id: basen
      type: java.lang.String
      description: String to test
    return:
      type: boolean
      description: >-
        <code>true</code> if all characters in the String are valid characters in the alphabet or if
                 the String is empty; <code>false</code>, otherwise
- uid: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
  id: isWhiteSpace(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: isWhiteSpace(byte byteToCheck)
  nameWithType: BaseNCodec.isWhiteSpace(byte byteToCheck)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte byteToCheck)
  overload: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace*
  type: Method
  package: org.apache.commons.codec.binary
  summary: 'Checks if a byte value is whitespace or not. Whitespace is taken to mean: space, tab, CR, LF'
  syntax:
    content: protected static boolean isWhiteSpace(byte byteToCheck)
    parameters:
    - id: byteToCheck
      type: byte
      description: the byte to check
    return:
      type: boolean
      description: true if byte is whitespace, false otherwise
- uid: org.apache.commons.codec.binary.BaseNCodec.lineLength
  id: lineLength
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: lineLength
  nameWithType: BaseNCodec.lineLength
  fullName: org.apache.commons.codec.binary.BaseNCodec.lineLength
  type: Field
  package: org.apache.commons.codec.binary
  summary: Chunksize for encoding. Not used when decoding. A value of zero or less implies no chunking of the encoded data. Rounded down to nearest multiple of encodedBlockSize.
  syntax:
    content: protected final int lineLength
    return:
      type: int
- uid: org.apache.commons.codec.binary.BaseNCodec.pad
  id: pad
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.BaseNCodec
  langs:
  - java
  name: pad
  nameWithType: BaseNCodec.pad
  fullName: org.apache.commons.codec.binary.BaseNCodec.pad
  type: Field
  package: org.apache.commons.codec.binary
  syntax:
    content: protected final byte pad
    return:
      type: byte
references:
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec*
  name: BaseNCodec
  nameWithType: BaseNCodec.BaseNCodec
  fullName: org.apache.commons.codec.binary.BaseNCodec.BaseNCodec
  package: org.apache.commons.codec.binary
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize*
  name: getDefaultBufferSize
  nameWithType: BaseNCodec.getDefaultBufferSize
  fullName: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodec.Context
  spec.java:
  - uid: org.apache.commons.codec.binary.BaseNCodec.Context
    name: Context
    fullName: org.apache.commons.codec.binary.BaseNCodec.Context
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize*
  name: ensureBufferSize
  nameWithType: BaseNCodec.ensureBufferSize
  fullName: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize
  package: org.apache.commons.codec.binary
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace*
  name: isWhiteSpace
  nameWithType: BaseNCodec.isWhiteSpace
  fullName: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.EncoderException
  name: EncoderException
  nameWithType: EncoderException
  fullName: org.apache.commons.codec.EncoderException
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.apache.commons.codec.binary.BaseNCodec.encode*
  name: encode
  nameWithType: BaseNCodec.encode
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode
  package: org.apache.commons.codec.binary
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeToString*
  name: encodeToString
  nameWithType: BaseNCodec.encodeToString
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeToString
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeAsString*
  name: encodeAsString
  nameWithType: BaseNCodec.encodeAsString
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeAsString
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.DecoderException
  name: DecoderException
  nameWithType: DecoderException
  fullName: org.apache.commons.codec.DecoderException
- uid: org.apache.commons.codec.binary.BaseNCodec.decode*
  name: decode
  nameWithType: BaseNCodec.decode
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet*
  name: isInAlphabet
  nameWithType: BaseNCodec.isInAlphabet
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad*
  name: containsAlphabetOrPad
  nameWithType: BaseNCodec.containsAlphabetOrPad
  fullName: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad
  package: org.apache.commons.codec.binary
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength*
  name: getEncodedLength
  nameWithType: BaseNCodec.getEncodedLength
  fullName: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.BinaryEncoder
  name: BinaryEncoder
  nameWithType: BinaryEncoder
  fullName: org.apache.commons.codec.BinaryEncoder
- uid: org.apache.commons.codec.BinaryDecoder
  name: BinaryDecoder
  nameWithType: BinaryDecoder
  fullName: org.apache.commons.codec.BinaryDecoder
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
