### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Iterators.peekingIterator*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator"
name: "<T>peekingIterator"
nameWithType: "Iterators.<T>peekingIterator"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(PeekingIterator<T> iterator)"
  name: "<T>peekingIterator(PeekingIterator<T> iterator)"
  nameWithType: "Iterators.<T>peekingIterator(PeekingIterator<T> iterator)"
  summary: "Simply returns its argument."
  parameters:
  - name: "iterator"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator?alt=com.azure.cosmos.implementation.guava25.collect.PeekingIterator&text=PeekingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static PeekingIterator<T> <T>peekingIterator(PeekingIterator<T> iterator)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator?alt=com.azure.cosmos.implementation.guava25.collect.PeekingIterator&text=PeekingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(java.util.Iterator<? extends T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(Iterator<? extends T> iterator)"
  name: "<T>peekingIterator(Iterator<? extends T> iterator)"
  nameWithType: "Iterators.<T>peekingIterator(Iterator<? extends T> iterator)"
  summary: "Returns a `PeekingIterator` backed by the given iterator.\n\nCalls to the `peek` method with no intervening calls to `next` do not affect the iteration, and hence return the same object each time. A subsequent call to `next` is guaranteed to return the same object again. For example:\n\n```java\nPeekingIterator peekingIterator =\n     Iterators.peekingIterator(Iterators.forArray(\"a\", \"b\"));\n String a1 = peekingIterator.peek(); // returns \"a\"\n String a2 = peekingIterator.peek(); // also returns \"a\"\n String a3 = peekingIterator.next(); // also returns \"a\"\n```\n\nAny structural changes to the underlying iteration (aside from those performed by the iterator's own <xref uid=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator.remove()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PeekingIterator#remove()\"></xref> method) will leave the iterator in an undefined state.\n\nThe returned iterator does not support removal after peeking, as explained by <xref uid=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator.remove()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PeekingIterator#remove()\"></xref>.\n\nNote: If the given iterator is already a `PeekingIterator`, it *might* be returned to the caller, although this is neither guaranteed to occur nor required to be consistent. For example, this method *might* choose to pass through recognized implementations of `PeekingIterator` when the behavior of the implementation is known to meet the contract guaranteed by this method.\n\nThere is no <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> equivalent to this method, so use this method to wrap each individual iterator as it is generated."
  parameters:
  - description: "the backing iterator. The <xref uid=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PeekingIterator\"></xref> assumes ownership of this\n     iterator, so users should cease making direct calls to it after calling this method."
    name: "iterator"
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static PeekingIterator<T> <T>peekingIterator(Iterator<? extends T> iterator)"
  returns:
    description: "a peeking iterator backed by that iterator. Apart from the additional <xref uid=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator.peek()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PeekingIterator#peek()\"></xref> method, this iterator behaves exactly the same as <code>iterator</code>."
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.PeekingIterator?alt=com.azure.cosmos.implementation.guava25.collect.PeekingIterator&text=PeekingIterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
