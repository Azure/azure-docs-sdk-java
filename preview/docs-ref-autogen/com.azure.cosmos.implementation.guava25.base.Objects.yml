### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Objects
  id: Objects
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Objects.equal(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.base.Objects.hashCode(java.lang.Object...)
  langs:
  - java
  name: Objects
  nameWithType: Objects
  fullName: com.azure.cosmos.implementation.guava25.base.Objects
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Helper functions that can operate on any `Object`.


    See the Guava User Guide on [writing `Object` methods with `Objects`][writing _Object_ methods with _Objects].



    [writing _Object_ methods with _Objects]: https://github.com/google/guava/wiki/CommonObjectUtilitiesExplained
  syntax:
    content: public final class Objects extends ExtraObjectsMethodsForWeb
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.base.ExtraObjectsMethodsForWeb
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Objects.Objects()
  id: Objects()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Objects
  langs:
  - java
  name: Objects()
  nameWithType: Objects.Objects()
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.Objects()
  overload: com.azure.cosmos.implementation.guava25.base.Objects.Objects*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Objects()
- uid: com.azure.cosmos.implementation.guava25.base.Objects.equal(java.lang.Object,java.lang.Object)
  id: equal(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Objects
  langs:
  - java
  name: equal(Object a, Object b)
  nameWithType: Objects.equal(Object a, Object b)
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.equal(Object a, Object b)
  overload: com.azure.cosmos.implementation.guava25.base.Objects.equal*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Determines whether two possibly-null objects are equal. Returns:

     *  `true` if `a` and `b` are both null.
     *  `true` if `a` and `b` are both non-null and they are equal according to <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>.
     *  `false` in all other situations.

    This assumes that any non-null objects passed to this function conform to the `equals()` contract.


    **Note for Java 7 and later:** This method should be treated as deprecated; use <xref uid="com.azure.cosmos.implementation.guava25.base.Objects.equals" data-throw-if-not-resolved="false">java.util.Objects#equals</xref> instead.
  syntax:
    content: public static boolean equal(Object a, Object b)
    parameters:
    - id: a
      type: java.lang.Object
    - id: b
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Objects.hashCode(java.lang.Object...)
  id: hashCode(java.lang.Object...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Objects
  langs:
  - java
  name: hashCode(Object[] objects)
  nameWithType: Objects.hashCode(Object[] objects)
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.hashCode(Object[] objects)
  overload: com.azure.cosmos.implementation.guava25.base.Objects.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Generates a hash code for multiple values. The hash code is generated by calling <xref uid="" data-throw-if-not-resolved="false">Arrays#hashCode(Object[])</xref>. Note that array arguments to this method, with the exception of a single Object array, do not get any special handling; their hash codes are based on identity and not contents.


    This is useful for implementing <xref uid="java.lang.Object.hashCode()" data-throw-if-not-resolved="false">Object#hashCode()</xref>. For example, in an object that has three properties, `x`, `y`, and `z`, one could write:


    ```java

    public int hashCode() {
       return Objects.hashCode(getX(), getY(), getZ());
     }
    ```


    **Warning:** When a single object is supplied, the returned hash code does not equal the hash code of that object.


    **Note for Java 7 and later:** This method should be treated as deprecated; use <xref uid="com.azure.cosmos.implementation.guava25.base.Objects.hash" data-throw-if-not-resolved="false">java.util.Objects#hash</xref> instead.
  syntax:
    content: public static int hashCode(Object[] objects)
    parameters:
    - id: objects
      type: java.lang.Object[]
    return:
      type: int
references:
- uid: com.azure.cosmos.implementation.guava25.base.Objects.Objects*
  name: Objects
  nameWithType: Objects.Objects
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.Objects
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Objects.equal*
  name: equal
  nameWithType: Objects.equal
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.equal
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.base.Objects.hashCode*
  name: hashCode
  nameWithType: Objects.hashCode
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.hashCode
  package: com.azure.cosmos.implementation.guava25.base
- uid: com.azure.cosmos.implementation.guava25.base.ExtraObjectsMethodsForWeb
  name: ExtraObjectsMethodsForWeb
  nameWithType: ExtraObjectsMethodsForWeb
  fullName: com.azure.cosmos.implementation.guava25.base.ExtraObjectsMethodsForWeb
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
