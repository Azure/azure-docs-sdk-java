### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  id: ImmutableSortedMultiset
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOfSorted(com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>naturalOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>orderedBy(java.util.Comparator<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>reverseOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>toImmutableSortedMultiset(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<T,E>toImmutableSortedMultiset(java.util.Comparator<? super E>,java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.comparator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.descendingMultiset()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.headMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollFirstEntry()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollLastEntry()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.subMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType,E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.tailMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  langs:
  - java
  name: ImmutableSortedMultiset<E>
  nameWithType: ImmutableSortedMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.collect.SortedMultiset" data-throw-if-not-resolved="false">SortedMultiset</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    **Warning:** as with any sorted collection, you are strongly advised not to use a <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> or <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> type whose comparison behavior is *inconsistent with equals*. That is, `a.compareTo(b)` or `comparator.compare(a, b)` should equal zero *if and only if* `a.equals(b)`. If this advice is not followed, the resulting collection will not correctly obey its specification.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableSortedMultiset<E> extends ImmutableSortedMultisetFauxverideShim<E> implements SortedMultiset<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultisetGwtSerializationDependencies
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim
  implements:
  - com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>toImmutableMultiset()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<T,E>toImmutableMultiset(java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.size()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(E[])
  id: <E>copyOf(E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>copyOf(E[] elements)
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOf(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOf(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>copyOf(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>copyOf(Iterable<? extends E> elements)
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOf(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOf(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted multiset containing the given elements sorted by their natural ordering. To create a copy of a `SortedMultiset` that preserves the comparator, call <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOfSorted" data-throw-if-not-resolved="false">#copyOfSorted</xref> instead. This method iterates over `elements` at most once.


    Note that if `s` is a `Multiset`, then `ImmutableSortedMultiset.copyOf(s)` returns an `ImmutableSortedMultiset` containing each of the strings in `s`, while `ImmutableSortedMultiset.of(s)` returns an `ImmutableSortedMultiset>` containing one element (the given multiset itself).


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    This method is not type-safe, as it may be called on elements that are not mutually comparable.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>copyOf(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted multiset containing the given elements sorted by the given `Comparator`. This method iterates over `elements` at most once.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by the given `Comparator`.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOf(java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>copyOf(Iterator<? extends E> elements)
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOf(Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOf(Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.


    This method is not type-safe, as it may be called on elements that are not mutually comparable.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>copyOf(Iterator<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>copyOfSorted(com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>)
  id: <E>copyOfSorted(com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>copyOfSorted(SortedMultiset<E> sortedMultiset)
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOfSorted(SortedMultiset<E> sortedMultiset)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOfSorted(SortedMultiset<E> sortedMultiset)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOfSorted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted multiset containing the elements of a sorted multiset, sorted by the same `Comparator`. That behavior differs from <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.&lt;E&gt;copyOf(java.lang.Iterable&lt;? extends E&gt;)" data-throw-if-not-resolved="false">#copyOf(Iterable)</xref>, which always uses the natural ordering of the elements.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    This method is safe to use even when `sortedMultiset` is a synchronized or concurrent collection that is currently being modified by another thread.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>copyOfSorted(SortedMultiset<E> sortedMultiset)
    parameters:
    - id: sortedMultiset
      type: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>naturalOrder()
  id: <E>naturalOrder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>naturalOrder()
  nameWithType: ImmutableSortedMultiset<E>.<E>naturalOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>naturalOrder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.naturalOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a builder that creates immutable sorted multisets whose elements are ordered by their natural ordering. The sorted multisets use <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> as the comparator. This method provides more type-safety than <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.builder" data-throw-if-not-resolved="false">#builder</xref>, as it can be called only for classes that implement <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref>.


    Note: the type parameter `E` extends `Comparable` rather than `Comparable` as a workaround for javac [bug 6468354][].



    [bug 6468354]: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6468354
  syntax:
    content: public static ImmutableSortedMultiset.Builder<E> <E>naturalOrder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of()
  id: <E>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of()
  nameWithType: ImmutableSortedMultiset<E>.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty immutable sorted multiset.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E)
  id: <E>of(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of(E element)
  nameWithType: ImmutableSortedMultiset<E>.<E>of(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing a single element.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of(E element)
    parameters:
    - id: element
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E)
  id: <E>of(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of(E e1, E e2)
  nameWithType: ImmutableSortedMultiset<E>.<E>of(E e1, E e2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of(E e1, E e2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of(E e1, E e2)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E)
  id: <E>of(E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3)
  nameWithType: ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of(E e1, E e2, E e3)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E,E)
  id: <E>of(E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4)
  nameWithType: ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3, E e4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3, E e4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of(E e1, E e2, E e3, E e4)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E,E,E)
  id: <E>of(E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5)
  nameWithType: ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of(E e1, E e2, E e3, E e4, E e5)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>of(E,E,E,E,E,E,E...)
  id: <E>of(E,E,E,E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
  nameWithType: ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted multiset containing the given elements sorted by their natural ordering.
  syntax:
    content: public static ImmutableSortedMultiset<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: remaining
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>orderedBy(java.util.Comparator<E>)
  id: <E>orderedBy(java.util.Comparator<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>orderedBy(Comparator<E> comparator)
  nameWithType: ImmutableSortedMultiset<E>.<E>orderedBy(Comparator<E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>orderedBy(Comparator<E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.orderedBy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted multisets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a `SortedMultiset` with a `Comparator`, use the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor instead.
  syntax:
    content: public static ImmutableSortedMultiset.Builder<E> <E>orderedBy(Comparator<E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>reverseOrder()
  id: <E>reverseOrder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>reverseOrder()
  nameWithType: ImmutableSortedMultiset<E>.<E>reverseOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>reverseOrder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.reverseOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a builder that creates immutable sorted multisets whose elements are ordered by the reverse of their natural ordering.


    Note: the type parameter `E` extends `Comparable` rather than `Comparable` as a workaround for javac [bug 6468354][].



    [bug 6468354]: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6468354
  syntax:
    content: public static ImmutableSortedMultiset.Builder<E> <E>reverseOrder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<E>toImmutableSortedMultiset(java.util.Comparator<? super E>)
  id: <E>toImmutableSortedMultiset(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <E>toImmutableSortedMultiset(Comparator<? super E> comparator)
  nameWithType: ImmutableSortedMultiset<E>.<E>toImmutableSortedMultiset(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>toImmutableSortedMultiset(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.toImmutableSortedMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that accumulates the input elements into a new `ImmutableMultiset`. Elements are sorted by the specified comparator.


    **Warning:** `comparator` should be *consistent with `equals`* as explained in the <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> documentation.
  syntax:
    content: public static Collector<E,?,ImmutableSortedMultiset<E>> <E>toImmutableSortedMultiset(Comparator<? super E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    return:
      type: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.<T,E>toImmutableSortedMultiset(java.util.Comparator<? super E>,java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  id: <T,E>toImmutableSortedMultiset(java.util.Comparator<? super E>,java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: <T,E>toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
  nameWithType: ImmutableSortedMultiset<E>.<T,E>toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<T,E>toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.toImmutableSortedMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that accumulates elements into an `ImmutableSortedMultiset` whose elements are the result of applying `elementFunction` to the inputs, with counts equal to the result of applying `countFunction` to the inputs.


    If the mapped elements contain duplicates (according to `comparator`), the first occurrence in encounter order appears in the resulting multiset, with count equal to the sum of the outputs of `countFunction.applyAsInt(t)` for each `t` mapped to that element.
  syntax:
    content: public static Collector<T,?,ImmutableSortedMultiset<E>> <T,E>toImmutableSortedMultiset(Comparator<? super E> comparator, Function<? super T,? extends E> elementFunction, ToIntFunction<? super T> countFunction)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elementFunction
      type: java.util.function.Function<? super T,? extends E>
    - id: countFunction
      type: java.util.function.ToIntFunction<? super T>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.ImmutableSortedMultiset()
  id: ImmutableSortedMultiset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: ImmutableSortedMultiset()
  nameWithType: ImmutableSortedMultiset<E>.ImmutableSortedMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.ImmutableSortedMultiset()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.ImmutableSortedMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableSortedMultiset()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.comparator()
  id: comparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: comparator()
  nameWithType: ImmutableSortedMultiset<E>.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.comparator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.comparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the comparator that orders this multiset, or <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> if the natural ordering of the elements is used.
  syntax:
    content: public final Comparator<? super E> comparator()
    return:
      type: java.util.Comparator<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.descendingMultiset()
  id: descendingMultiset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: descendingMultiset()
  nameWithType: ImmutableSortedMultiset<E>.descendingMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.descendingMultiset()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.descendingMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a descending view of this multiset. Modifications made to either map will be reflected in the other.
  syntax:
    content: public ImmutableSortedMultiset<E> descendingMultiset()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.elementSet()
  id: elementSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: elementSet()
  nameWithType: ImmutableSortedMultiset<E>.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.elementSet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.elementSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the set of distinct elements contained in this multiset. The element set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. The order of the elements in the element set is unspecified.


    If the element set supports any removal operations, these necessarily cause **all** occurrences of the removed element(s) to be removed from the multiset. Implementations are not expected to support the add operations, although this is possible.


    A common use for the element set is to find the number of distinct elements in the multiset: `elementSet().size()`.
  syntax:
    content: public abstract ImmutableSortedSet<E> elementSet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.headMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: headMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: headMultiset(E upperBound, BoundType boundType)
  nameWithType: ImmutableSortedMultiset<E>.headMultiset(E upperBound, BoundType boundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.headMultiset(E upperBound, BoundType boundType)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.headMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this multiset restricted to the elements less than `upperBound`, optionally including `upperBound` itself. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports.


    The returned multiset will throw an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> on attempts to add elements outside its range.
  syntax:
    content: public abstract ImmutableSortedMultiset<E> headMultiset(E upperBound, BoundType boundType)
    parameters:
    - id: upperBound
      type: E
    - id: boundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollFirstEntry()
  id: pollFirstEntry()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: pollFirstEntry()
  nameWithType: ImmutableSortedMultiset<E>.pollFirstEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.pollFirstEntry()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollFirstEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns and removes the entry associated with the lowest element in this multiset, or returns `null` if this multiset is empty.


    This implementation is guaranteed to throw an <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public final Multiset.Entry<E> pollFirstEntry()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollLastEntry()
  id: pollLastEntry()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: pollLastEntry()
  nameWithType: ImmutableSortedMultiset<E>.pollLastEntry()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.pollLastEntry()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollLastEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns and removes the entry associated with the greatest element in this multiset, or returns `null` if this multiset is empty.


    This implementation is guaranteed to throw an <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public final Multiset.Entry<E> pollLastEntry()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.subMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType,E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: subMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType,E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)
  nameWithType: ImmutableSortedMultiset<E>.subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.subMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this multiset restricted to the range between `lowerBound` and `upperBound`. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports.


    The returned multiset will throw an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> on attempts to add elements outside its range.


    This method is equivalent to `tailMultiset(lowerBound, lowerBoundType).headMultiset(upperBound, upperBoundType)`.
  syntax:
    content: public ImmutableSortedMultiset<E> subMultiset(E lowerBound, BoundType lowerBoundType, E upperBound, BoundType upperBoundType)
    parameters:
    - id: lowerBound
      type: E
    - id: lowerBoundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    - id: upperBound
      type: E
    - id: upperBoundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.tailMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: tailMultiset(E,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  langs:
  - java
  name: tailMultiset(E lowerBound, BoundType boundType)
  nameWithType: ImmutableSortedMultiset<E>.tailMultiset(E lowerBound, BoundType boundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.tailMultiset(E lowerBound, BoundType boundType)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.tailMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this multiset restricted to the elements greater than `lowerBound`, optionally including `lowerBound` itself. The returned multiset is a view of this multiset, so changes to one will be reflected in the other. The returned multiset supports all operations that this multiset supports.


    The returned multiset will throw an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> on attempts to add elements outside its range.
  syntax:
    content: public abstract ImmutableSortedMultiset<E> tailMultiset(E lowerBound, BoundType boundType)
    parameters:
    - id: lowerBound
      type: E
    - id: boundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.ImmutableSortedMultiset*
  name: ImmutableSortedMultiset
  nameWithType: ImmutableSortedMultiset<E>.ImmutableSortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.ImmutableSortedMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
    name: ImmutableSortedMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.toImmutableSortedMultiset*
  name: <E>toImmutableSortedMultiset
  nameWithType: ImmutableSortedMultiset<E>.<E>toImmutableSortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>toImmutableSortedMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,? extends E>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.function.ToIntFunction<? super T>
  spec.java:
  - uid: java.util.function.ToIntFunction
    name: ToIntFunction
    fullName: java.util.function.ToIntFunction
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
    name: ImmutableSortedMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
    name: ImmutableSortedMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.of*
  name: <E>of
  nameWithType: ImmutableSortedMultiset<E>.<E>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOf*
  name: <E>copyOf
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<? extends E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
    name: SortedMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.copyOfSorted*
  name: <E>copyOfSorted
  nameWithType: ImmutableSortedMultiset<E>.<E>copyOfSorted
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>copyOfSorted
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.comparator*
  name: comparator
  nameWithType: ImmutableSortedMultiset<E>.comparator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.comparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
    name: ImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.elementSet*
  name: elementSet
  nameWithType: ImmutableSortedMultiset<E>.elementSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.elementSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.descendingMultiset*
  name: descendingMultiset
  nameWithType: ImmutableSortedMultiset<E>.descendingMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.descendingMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
    name: Entry
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollFirstEntry*
  name: pollFirstEntry
  nameWithType: ImmutableSortedMultiset<E>.pollFirstEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.pollFirstEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.pollLastEntry*
  name: pollLastEntry
  nameWithType: ImmutableSortedMultiset<E>.pollLastEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.pollLastEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BoundType
  name: BoundType
  nameWithType: BoundType
  fullName: com.azure.cosmos.implementation.guava25.collect.BoundType
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.headMultiset*
  name: headMultiset
  nameWithType: ImmutableSortedMultiset<E>.headMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.headMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.subMultiset*
  name: subMultiset
  nameWithType: ImmutableSortedMultiset<E>.subMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.subMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.tailMultiset*
  name: tailMultiset
  nameWithType: ImmutableSortedMultiset<E>.tailMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.tailMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.orderedBy*
  name: <E>orderedBy
  nameWithType: ImmutableSortedMultiset<E>.<E>orderedBy
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>orderedBy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.reverseOrder*
  name: <E>reverseOrder
  nameWithType: ImmutableSortedMultiset<E>.<E>reverseOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>reverseOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.naturalOrder*
  name: <E>naturalOrder
  nameWithType: ImmutableSortedMultiset<E>.<E>naturalOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset<E>.<E>naturalOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim<E>
  name: ImmutableSortedMultisetFauxverideShim<E>
  nameWithType: ImmutableSortedMultisetFauxverideShim<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int,int)
  name: ImmutableMultiset.setCount(E,int,int)
  nameWithType: ImmutableMultiset.setCount(E,int,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  name: ImmutableCollection.removeAll(Collection<?>)
  nameWithType: ImmutableCollection.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString()
  name: ImmutableMultiset.toString()
  nameWithType: ImmutableMultiset.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>copyOf(E[])
  name: ImmutableSortedMultisetFauxverideShim.<E>copyOf(E[])
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>copyOf(E[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>copyOf(E[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove(java.lang.Object,int)
  name: ImmutableMultiset.remove(Object,int)
  nameWithType: ImmutableMultiset.remove(Object,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.remove(java.lang.Object,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.util.Iterator<? extends E>)
  name: ImmutableMultiset.<E>copyOf(Iterator<? extends E>)
  nameWithType: ImmutableMultiset.<E>copyOf(Iterator<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.util.Iterator<? extends E>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E)
  name: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  name: ImmutableCollection.add(E)
  nameWithType: ImmutableCollection.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  name: ImmutableCollection.toArray()
  nameWithType: ImmutableCollection.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E)
  name: ImmutableSortedMultisetFauxverideShim.<E>of(E)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>of(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  name: ImmutableCollection.remove(Object)
  nameWithType: ImmutableCollection.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet()
  name: ImmutableMultiset.entrySet()
  nameWithType: ImmutableMultiset.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.entrySet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
  name: ImmutableMultiset.<E>copyOf(Iterable<? extends E>)
  nameWithType: ImmutableMultiset.<E>copyOf(Iterable<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>copyOf(java.lang.Iterable<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  name: ImmutableCollection.removeIf(Predicate<? super E>)
  nameWithType: ImmutableCollection.removeIf(Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains(java.lang.Object)
  name: ImmutableMultiset.contains(Object)
  nameWithType: ImmutableMultiset.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.contains(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator()
  name: ImmutableMultiset.iterator()
  nameWithType: ImmutableMultiset.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.iterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>builder()
  name: ImmutableSortedMultisetFauxverideShim.<E>builder()
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>builder()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of()
  name: ImmutableMultiset.<E>of()
  nameWithType: ImmutableMultiset.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.<E>of()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E)
  name: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E,E,E...)
  name: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E,E,E)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E,E,E,E...)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  name: ImmutableCollection.<T>toArray(T[])
  nameWithType: ImmutableCollection.<T>toArray(T[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E)
  name: ImmutableSortedMultisetFauxverideShim.<E>of(E,E)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>of(E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet()
  name: ImmutableMultiset.elementSet()
  nameWithType: ImmutableMultiset.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.elementSet()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  name: ImmutableCollection.addAll(Collection<? extends E>)
  nameWithType: ImmutableCollection.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  name: ImmutableCollection.retainAll(Collection<?>)
  nameWithType: ImmutableCollection.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<T,E>toImmutableMultiset(java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
  name: ImmutableSortedMultisetFauxverideShim.<T,E>toImmutableMultiset(Function<? super T,? extends E>,ToIntFunction<? super T>)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<T,E>toImmutableMultiset(Function<? super T,? extends E>,ToIntFunction<? super T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<T,E>toImmutableMultiset(java.util.function.Function<? super T,? extends E>,java.util.function.ToIntFunction<? super T>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>toImmutableMultiset()
  name: ImmutableSortedMultisetFauxverideShim.<E>toImmutableMultiset()
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>toImmutableMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>toImmutableMultiset()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E)
  name: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E)
  nameWithType: ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.<E>of(E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int)
  name: ImmutableMultiset.setCount(E,int)
  nameWithType: ImmutableMultiset.setCount(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.setCount(E,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList()
  name: ImmutableMultiset.asList()
  nameWithType: ImmutableMultiset.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.asList()
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add(E,int)
  name: ImmutableMultiset.add(E,int)
  nameWithType: ImmutableMultiset.add(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.add(E,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  name: ImmutableCollection.spliterator()
  nameWithType: ImmutableCollection.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode()
  name: ImmutableMultiset.hashCode()
  nameWithType: ImmutableMultiset.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.hashCode()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  name: ImmutableCollection.clear()
  nameWithType: ImmutableCollection.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals(java.lang.Object)
  name: ImmutableMultiset.equals(Object)
  nameWithType: ImmutableMultiset.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder
  name: ImmutableSortedMultiset.Builder<E>
  nameWithType: ImmutableSortedMultiset.Builder<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset.Builder<E>
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  name: E,?,ImmutableSortedMultiset
  nameWithType: E,?,ImmutableSortedMultiset
  fullName: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: '? super T,? extends E'
  name: '? super T,? extends E'
  nameWithType: '? super T,? extends E'
  fullName: '? super T,? extends E'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: java.util.function.ToIntFunction
  name: ToIntFunction
  nameWithType: ToIntFunction
  fullName: java.util.function.ToIntFunction
- uid: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
  name: T,?,ImmutableSortedMultiset
  nameWithType: T,?,ImmutableSortedMultiset
  fullName: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultiset
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
  name: SortedMultiset
  nameWithType: SortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  name: Multiset.Entry
  nameWithType: Multiset.Entry
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim
  name: ImmutableSortedMultisetFauxverideShim
  nameWithType: ImmutableSortedMultisetFauxverideShim
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
  name: ImmutableCollection.removeAll(Collection
  nameWithType: ImmutableCollection.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.
  name: ImmutableSortedMultisetFauxverideShim.
  nameWithType: ImmutableSortedMultisetFauxverideShim.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedMultisetFauxverideShim.
- uid: E>copyOf(E[])
  name: E>copyOf(E[])
  nameWithType: E>copyOf(E[])
  fullName: E>copyOf(E[])
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: E>copyOf(java.util.Iterator
  name: E>copyOf(Iterator
  nameWithType: E>copyOf(Iterator
  fullName: E>copyOf(java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.
  name: ImmutableMultiset.
  nameWithType: ImmutableMultiset.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.
- uid: E>of(E,E,E,E,E)
  name: E>of(E,E,E,E,E)
  nameWithType: E>of(E,E,E,E,E)
  fullName: E>of(E,E,E,E,E)
- uid: E>of(E)
  name: E>of(E)
  nameWithType: E>of(E)
  fullName: E>of(E)
- uid: E>copyOf(java.lang.Iterable
  name: E>copyOf(Iterable
  nameWithType: E>copyOf(Iterable
  fullName: E>copyOf(java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
  name: ImmutableCollection.removeIf(Predicate
  nameWithType: ImmutableCollection.removeIf(Predicate
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: E>builder()
  name: E>builder()
  nameWithType: E>builder()
  fullName: E>builder()
- uid: E>of()
  name: E>of()
  nameWithType: E>of()
  fullName: E>of()
- uid: E>of(E,E,E)
  name: E>of(E,E,E)
  nameWithType: E>of(E,E,E)
  fullName: E>of(E,E,E)
- uid: E>of(E,E,E,E,E,E,E...)
  name: E>of(E,E,E,E,E,E,E)
  nameWithType: E>of(E,E,E,E,E,E,E)
  fullName: E>of(E,E,E,E,E,E,E...)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
  name: ImmutableCollection.
  nameWithType: ImmutableCollection.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
- uid: E>of(E,E)
  name: E>of(E,E)
  nameWithType: E>of(E,E)
  fullName: E>of(E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
  name: ImmutableCollection.addAll(Collection
  nameWithType: ImmutableCollection.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
  name: ImmutableCollection.retainAll(Collection
  nameWithType: ImmutableCollection.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
- uid: T,E>toImmutableMultiset(java.util.function.Function
  name: T,E>toImmutableMultiset(Function
  nameWithType: T,E>toImmutableMultiset(Function
  fullName: T,E>toImmutableMultiset(java.util.function.Function
- uid: '? super T,? extends E>,java.util.function.ToIntFunction'
  name: '? super T,? extends E>,ToIntFunction'
  nameWithType: '? super T,? extends E>,ToIntFunction'
  fullName: '? super T,? extends E>,java.util.function.ToIntFunction'
- uid: '? super T>)'
  name: '? super T>)'
  nameWithType: '? super T>)'
  fullName: '? super T>)'
- uid: E>toImmutableMultiset()
  name: E>toImmutableMultiset()
  nameWithType: E>toImmutableMultiset()
  fullName: E>toImmutableMultiset()
- uid: E>of(E,E,E,E)
  name: E>of(E,E,E,E)
  nameWithType: E>of(E,E,E,E)
  fullName: E>of(E,E,E,E)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
