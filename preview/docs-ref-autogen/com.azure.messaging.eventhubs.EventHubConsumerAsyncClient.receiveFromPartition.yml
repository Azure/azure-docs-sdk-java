### YamlMime:JavaMember
uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition*"
fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition"
name: "receiveFromPartition"
nameWithType: "EventHubConsumerAsyncClient.receiveFromPartition"
members:
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition)"
  name: "receiveFromPartition(String partitionId, EventPosition startingPosition)"
  nameWithType: "EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition)"
  summary: "Consumes events from a single partition starting at `startingPosition`."
  parameters:
  - description: "Identifier of the partition to read events from."
    name: "partitionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Position within the Event Hub partition to begin consuming events."
    name: "startingPosition"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.EventPosition?alt=com.azure.messaging.eventhubs.models.EventPosition&text=EventPosition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<PartitionEvent> receiveFromPartition(String partitionId, EventPosition startingPosition)"
  returns:
    description: "A stream of events for this partition starting from <code>startingPosition</code>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionEvent?alt=com.azure.messaging.eventhubs.models.PartitionEvent&text=PartitionEvent\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(java.lang.String,com.azure.messaging.eventhubs.models.EventPosition,com.azure.messaging.eventhubs.models.ReceiveOptions)"
  fullName: "com.azure.messaging.eventhubs.EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  name: "receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  nameWithType: "EventHubConsumerAsyncClient.receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  summary: "Consumes events from a single partition starting at `startingPosition` with a set of <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"receive options\"></xref>.\n\n *  If receive is invoked where <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveOptions#getOwnerLevel()\"></xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This receive operation is sometimes referred to as an \"Epoch Consumer\".\n *  Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.ReceiveOptions.getOwnerLevel()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReceiveOptions#getOwnerLevel()\"></xref> when invoking receive operations. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\""
  parameters:
  - description: "Identifier of the partition to read events from."
    name: "partitionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Position within the Event Hub partition to begin consuming events."
    name: "startingPosition"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.EventPosition?alt=com.azure.messaging.eventhubs.models.EventPosition&text=EventPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options when receiving events from the partition."
    name: "receiveOptions"
    type: "<xref href=\"com.azure.messaging.eventhubs.models.ReceiveOptions?alt=com.azure.messaging.eventhubs.models.ReceiveOptions&text=ReceiveOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<PartitionEvent> receiveFromPartition(String partitionId, EventPosition startingPosition, ReceiveOptions receiveOptions)"
  returns:
    description: "A stream of events for this partition. If a stream for the events was opened before, the same position\n     within that partition is returned. Otherwise, events are read starting from <code>startingPosition</code>."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.messaging.eventhubs.models.PartitionEvent?alt=com.azure.messaging.eventhubs.models.PartitionEvent&text=PartitionEvent\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.messaging.eventhubs"
artifact: com.azure:azure-messaging-eventhubs:5.4.0-beta.1
