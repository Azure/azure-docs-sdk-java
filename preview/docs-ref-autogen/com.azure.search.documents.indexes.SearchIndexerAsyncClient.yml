### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient"
fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient"
name: "SearchIndexerAsyncClient"
nameWithType: "SearchIndexerAsyncClient"
summary: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting data source connections, indexers, or skillsets and running or resetting indexers in an Azure Cognitive Search service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class SearchIndexerAsyncClient"
methods:
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  name: "createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  nameWithType: "SearchIndexerAsyncClient.createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  summary: "Creates a new Azure Cognitive Search data source"
  parameters:
  - description: "The definition of the dataSource to create."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerDataSourceConnection> createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  desc: "Creates a new Azure Cognitive Search data source\n\n**Code Sample**\n\nCreate search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = new SearchIndexerDataSourceConnection(\"dataSource\",\n     com.azure.search.documents.indexes.models.SearchIndexerDataSourceType.AZURE_BLOB, \"{connectionString}\",\n     new com.azure.search.documents.indexes.models.SearchIndexerDataContainer(\"container\"));\n SEARCH_INDEXER_ASYNC_CLIENT.createDataSourceConnection(dataSource)\n     .subscribe(dataSourceFromService ->\n         System.out.printf(\"The data source name is %s. The ETag of data source is %s.%n\",\n             dataSourceFromService.getName(), dataSourceFromService.getETag()));\n```"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)"
  name: "createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)"
  nameWithType: "SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)"
  summary: "Creates a new Azure Cognitive Search data source"
  parameters:
  - description: "The definition of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to create."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerDataSourceConnection>> createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)"
  desc: "Creates a new Azure Cognitive Search data source\n\n**Code Sample**\n\nCreate search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = new SearchIndexerDataSourceConnection(\"dataSource\",\n     SearchIndexerDataSourceType.AZURE_BLOB, \"{connectionString}\",\n     new SearchIndexerDataContainer(\"container\"));\n SEARCH_INDEXER_ASYNC_CLIENT.createDataSourceConnectionWithResponse(dataSource)\n     .subscribe(dataSourceFromService ->\n         System.out.printf(\"The status code of the response is %s. The data source name is %s.%n\",\n         dataSourceFromService.getStatusCode(), dataSourceFromService.getValue().getName()));\n```"
  returns:
    description: "a Mono which performs the network request upon subscription."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer(com.azure.search.documents.indexes.models.SearchIndexer)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer(SearchIndexer indexer)"
  name: "createIndexer(SearchIndexer indexer)"
  nameWithType: "SearchIndexerAsyncClient.createIndexer(SearchIndexer indexer)"
  summary: "Creates a new Azure Cognitive Search indexer."
  parameters:
  - description: "definition of the indexer to create."
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexer> createIndexer(SearchIndexer indexer)"
  desc: "Creates a new Azure Cognitive Search indexer.\n\n**Code Sample**\n\nCreate search indexer named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexer = new SearchIndexer(\"searchIndexer\", \"dataSource\",\n     \"searchIndex\");\n SEARCH_INDEXER_ASYNC_CLIENT.createIndexer(searchIndexer)\n     .subscribe(indexerFromService ->\n         System.out.printf(\"The indexer name is %s. The ETag of indexer is %s.%n\", indexerFromService.getName(),\n         indexerFromService.getETag()));\n```"
  returns:
    description: "the created Indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse(SearchIndexer indexer)"
  name: "createIndexerWithResponse(SearchIndexer indexer)"
  nameWithType: "SearchIndexerAsyncClient.createIndexerWithResponse(SearchIndexer indexer)"
  summary: "Creates a new Azure Cognitive Search indexer."
  parameters:
  - description: "definition of the indexer to create"
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexer>> createIndexerWithResponse(SearchIndexer indexer)"
  desc: "Creates a new Azure Cognitive Search indexer.\n\n**Code Sample**\n\nCreate search indexer named \"searchIndexer\".\n\n```java\nSearchIndexer searchIndexer = new SearchIndexer(\"searchIndexer\", \"dataSource\",\n     \"searchIndex\");\n SEARCH_INDEXER_ASYNC_CLIENT.createIndexerWithResponse(searchIndexer)\n     .subscribe(indexerFromServiceResponse ->\n         System.out.printf(\"The status code of the response is %s. The indexer name is %s.%n\",\n             indexerFromServiceResponse.getStatusCode(), indexerFromServiceResponse.getValue().getName()));\n```"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  name: "createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  parameters:
  - description: "The definition of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to create or update."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerDataSourceConnection> createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)"
  desc: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = SEARCH_INDEXER_CLIENT.getDataSourceConnection(\"dataSource\");\n dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n\n SearchIndexerDataSourceConnection updateDataSource = SEARCH_INDEXER_CLIENT\n     .createOrUpdateDataSourceConnection(dataSource);\n System.out.printf(\"The dataSource name is %s. The container name of dataSource is %s.%n\",\n     updateDataSource.getName(), updateDataSource.getContainer().getName());\n```"
  returns:
    description: "the data source that was created or updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.CreateOrUpdateDataSourceConnectionOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(CreateOrUpdateDataSourceConnectionOptions options)"
  name: "createOrUpdateDataSourceConnectionWithResponse(CreateOrUpdateDataSourceConnectionOptions options)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(CreateOrUpdateDataSourceConnectionOptions options)"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  parameters:
  - description: "The options used to create or update the <xref uid=\"SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"data source\n connection\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.indexes.models.CreateOrUpdateDataSourceConnectionOptions?alt=com.azure.search.documents.indexes.models.CreateOrUpdateDataSourceConnectionOptions&text=CreateOrUpdateDataSourceConnectionOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerDataSourceConnection>> createOrUpdateDataSourceConnectionWithResponse(CreateOrUpdateDataSourceConnectionOptions options)"
  desc: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getDataSourceConnection(\"dataSource\")\n     .flatMap(dataSource -> {\n         dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateDataSourceConnectionWithResponse(\n             new CreateOrUpdateDataSourceConnectionOptions(dataSource)\n                 .setOnlyIfUnchanged(true)\n                 .setCacheResetRequirementsIgnored(true));\n     })\n     .subscribe(updateDataSource ->\n         System.out.printf(\"The status code of the response is %s.%nThe dataSource name is %s. \"\n                 + \"The container name of dataSource is %s.%n\", updateDataSource.getStatusCode(),\n             updateDataSource.getValue().getName(), updateDataSource.getValue().getContainer().getName()));\n```"
  returns:
    description: "a data source response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  name: "createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists."
  parameters:
  - description: "The definition of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to create or update."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>dataSource</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerDataSourceConnection>> createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  desc: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getDataSourceConnection(\"dataSource\")\n     .flatMap(dataSource -> {\n         dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateDataSourceConnectionWithResponse(dataSource, true);\n     })\n     .subscribe(updateDataSource ->\n         System.out.printf(\"The status code of the response is %s.%nThe dataSource name is %s. \"\n             + \"The container name of dataSource is %s.%n\", updateDataSource.getStatusCode(),\n         updateDataSource.getValue().getName(), updateDataSource.getValue().getContainer().getName()));\n```"
  returns:
    description: "a data source response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer(com.azure.search.documents.indexes.models.SearchIndexer)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer(SearchIndexer indexer)"
  name: "createOrUpdateIndexer(SearchIndexer indexer)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateIndexer(SearchIndexer indexer)"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "The definition of the indexer to create or update."
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexer> createOrUpdateIndexer(SearchIndexer indexer)"
  desc: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexer(\"searchIndexer\")\n     .flatMap(searchIndexerFromService -> {\n         searchIndexerFromService.setFieldMappings(Collections.singletonList(\n             new FieldMapping(\"hotelName\").setTargetFieldName(\"HotelName\")));\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateIndexer(searchIndexerFromService);\n     })\n     .subscribe(updatedIndexer ->\n         System.out.printf(\"The indexer name is %s. The target field name of indexer is %s.%n\",\n         updatedIndexer.getName(), updatedIndexer.getFieldMappings().get(0).getTargetFieldName()));\n```"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.CreateOrUpdateIndexerOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(CreateOrUpdateIndexerOptions options)"
  name: "createOrUpdateIndexerWithResponse(CreateOrUpdateIndexerOptions options)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(CreateOrUpdateIndexerOptions options)"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "The options used to create or update the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"indexer\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.indexes.models.CreateOrUpdateIndexerOptions?alt=com.azure.search.documents.indexes.models.CreateOrUpdateIndexerOptions&text=CreateOrUpdateIndexerOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexer>> createOrUpdateIndexerWithResponse(CreateOrUpdateIndexerOptions options)"
  desc: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexer(\"searchIndexer\")\n     .flatMap(searchIndexerFromService -> {\n         searchIndexerFromService.setFieldMappings(Collections.singletonList(\n             new FieldMapping(\"hotelName\").setTargetFieldName(\"HotelName\")));\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateIndexerWithResponse(\n             new CreateOrUpdateIndexerOptions(searchIndexerFromService)\n                 .setOnlyIfUnchanged(true)\n                 .setCacheReprocessingChangeDetectionDisabled(false)\n                 .setCacheResetRequirementsIgnored(true));\n     })\n     .subscribe(indexerFromService ->\n         System.out.printf(\"The status code of the response is %s.%nThe indexer name is %s. \"\n                 + \"The target field name of indexer is %s.%n\", indexerFromService.getStatusCode(),\n             indexerFromService.getValue().getName(),\n             indexerFromService.getValue().getFieldMappings().get(0).getTargetFieldName()));\n```"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  name: "createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  summary: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists."
  parameters:
  - description: "the definition of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexer\"></xref> to create or update"
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>indexer</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexer>> createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  desc: "Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexer(\"searchIndexer\")\n     .flatMap(searchIndexerFromService -> {\n         searchIndexerFromService.setFieldMappings(Collections.singletonList(\n             new FieldMapping(\"hotelName\").setTargetFieldName(\"HotelName\")));\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateIndexerWithResponse(searchIndexerFromService, true);\n     })\n     .subscribe(indexerFromService ->\n         System.out.printf(\"The status code of the response is %s.%nThe indexer name is %s. \"\n             + \"The target field name of indexer is %s.%n\", indexerFromService.getStatusCode(),\n         indexerFromService.getValue().getName(),\n         indexerFromService.getValue().getFieldMappings().get(0).getTargetFieldName()));\n```"
  returns:
    description: "a response containing the created Indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  name: "createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "the definition of the skillset to create or update"
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerSkillset> createOrUpdateSkillset(SearchIndexerSkillset skillset)"
  desc: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillset(\"searchIndexerSkillset\")\n     .flatMap(indexerSkillset -> {\n         indexerSkillset.setDescription(\"This is new description!\");\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateSkillset(indexerSkillset);\n     }).subscribe(updateSkillset ->\n         System.out.printf(\"The indexer skillset name is %s. The description of indexer skillset is %s.%n\",\n         updateSkillset.getName(), updateSkillset.getDescription()));\n```"
  returns:
    description: "the skillset that was created or updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.documents.indexes.models.CreateOrUpdateSkillsetOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(CreateOrUpdateSkillsetOptions options)"
  name: "createOrUpdateSkillsetWithResponse(CreateOrUpdateSkillsetOptions options)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(CreateOrUpdateSkillsetOptions options)"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "The options used to create or update the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"skillset\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.indexes.models.CreateOrUpdateSkillsetOptions?alt=com.azure.search.documents.indexes.models.CreateOrUpdateSkillsetOptions&text=CreateOrUpdateSkillsetOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerSkillset>> createOrUpdateSkillsetWithResponse(CreateOrUpdateSkillsetOptions options)"
  desc: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillset(\"searchIndexerSkillset\")\n     .flatMap(indexerSkillset -> {\n         indexerSkillset.setDescription(\"This is new description!\");\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateSkillsetWithResponse(\n             new CreateOrUpdateSkillsetOptions(indexerSkillset)\n                 .setOnlyIfUnchanged(true)\n                 .setCacheReprocessingChangeDetectionDisabled(false)\n                 .setCacheResetRequirementsIgnored(true));\n     })\n     .subscribe(updateSkillsetResponse ->\n         System.out.printf(\"The status code of the response is %s.%nThe indexer skillset name is %s. \"\n             + \"The description of indexer skillset is %s.%n\", updateSkillsetResponse.getStatusCode(),\n             updateSkillsetResponse.getValue().getName(),\n             updateSkillsetResponse.getValue().getDescription()));\n```"
  returns:
    description: "a response containing the skillset that was created or updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  name: "createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  summary: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists."
  parameters:
  - description: "the definition of the skillset to create or update"
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>skillset</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerSkillset>> createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  desc: "Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillset(\"searchIndexerSkillset\")\n     .flatMap(indexerSkillset -> {\n         indexerSkillset.setDescription(\"This is new description!\");\n         return SEARCH_INDEXER_ASYNC_CLIENT.createOrUpdateSkillsetWithResponse(indexerSkillset, true);\n     })\n     .subscribe(updateSkillsetResponse ->\n         System.out.printf(\"The status code of the response is %s.%nThe indexer skillset name is %s. \"\n             + \"The description of indexer skillset is %s.%n\", updateSkillsetResponse.getStatusCode(),\n         updateSkillsetResponse.getValue().getName(),\n         updateSkillsetResponse.getValue().getDescription()));\n```"
  returns:
    description: "a response containing the skillset that was created or updated."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset(SearchIndexerSkillset skillset)"
  name: "createSkillset(SearchIndexerSkillset skillset)"
  nameWithType: "SearchIndexerAsyncClient.createSkillset(SearchIndexerSkillset skillset)"
  summary: "Creates a new skillset in an Azure Cognitive Search service."
  parameters:
  - description: "definition of the skillset containing one or more cognitive skills"
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerSkillset> createSkillset(SearchIndexerSkillset skillset)"
  desc: "Creates a new skillset in an Azure Cognitive Search service.\n\n**Code Sample**\n\nCreate search indexer skillset \"searchIndexerSkillset\".\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n\n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n SearchIndexerSkillset searchIndexerSkillset = new SearchIndexerSkillset(\"searchIndexerSkillset\",\n     Collections.singletonList(new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")));\n SEARCH_INDEXER_ASYNC_CLIENT.createSkillset(searchIndexerSkillset)\n     .subscribe(skillset ->\n         System.out.printf(\"The indexer skillset name is %s. The ETag of indexer skillset is %s.%n\",\n         skillset.getName(), skillset.getETag()));\n```"
  returns:
    description: "the created Skillset."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse(SearchIndexerSkillset skillset)"
  name: "createSkillsetWithResponse(SearchIndexerSkillset skillset)"
  nameWithType: "SearchIndexerAsyncClient.createSkillsetWithResponse(SearchIndexerSkillset skillset)"
  summary: "Creates a new skillset in an Azure Cognitive Search service."
  parameters:
  - description: "definition of the skillset containing one or more cognitive skills"
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerSkillset>> createSkillsetWithResponse(SearchIndexerSkillset skillset)"
  desc: "Creates a new skillset in an Azure Cognitive Search service.\n\n**Code Sample**\n\nCreate search indexer skillset \"searchIndexerSkillset\".\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n\n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n SearchIndexerSkillset searchIndexerSkillset = new SearchIndexerSkillset(\"searchIndexerSkillset\",\n     Collections.singletonList(new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")));\n SEARCH_INDEXER_ASYNC_CLIENT.createSkillsetWithResponse(searchIndexerSkillset)\n     .subscribe(skillsetWithResponse ->\n         System.out.printf(\"The status code of the response is %s. The indexer skillset name is %s.%n\",\n         skillsetWithResponse.getStatusCode(), skillsetWithResponse.getValue().getName()));\n```"
  returns:
    description: "a response containing the created Skillset."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection(String dataSourceName)"
  name: "deleteDataSourceConnection(String dataSourceName)"
  nameWithType: "SearchIndexerAsyncClient.deleteDataSourceConnection(String dataSourceName)"
  summary: "Delete a Data<wbr>Source"
  parameters:
  - description: "the name of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> for deletion"
    name: "dataSourceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteDataSourceConnection(String dataSourceName)"
  desc: "Delete a DataSource\n\n**Code Sample**\n\nDelete the search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.deleteDataSourceConnection(\"dataSource\")\n     .subscribe();\n```"
  returns:
    description: "a void Mono"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  name: "deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  summary: "Deletes an Azure Cognitive Search data source."
  parameters:
  - description: "The <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to delete."
    name: "dataSource"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>dataSource</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)"
  desc: "Deletes an Azure Cognitive Search data source.\n\n**Code Sample**\n\nDelete the search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getDataSourceConnection(\"dataSource\")\n     .flatMap(dataSource -> SEARCH_INDEXER_ASYNC_CLIENT.deleteDataSourceConnectionWithResponse(dataSource, true))\n     .subscribe(deleteResponse ->\n         System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode()));\n```"
  returns:
    description: "a mono response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer(String indexerName)"
  name: "deleteIndexer(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.deleteIndexer(String indexerName)"
  summary: "Deletes an Azure Cognitive Search indexer."
  parameters:
  - description: "the name of the indexer to delete"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteIndexer(String indexerName)"
  desc: "Deletes an Azure Cognitive Search indexer.\n\n**Code Sample**\n\nDelete search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.deleteIndexer(\"searchIndexer\")\n     .subscribe();\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  name: "deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  summary: "Deletes an Azure Cognitive Search indexer."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexer\"></xref> to delete"
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>indexer</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)"
  desc: "Deletes an Azure Cognitive Search indexer.\n\n**Code Sample**\n\nDelete search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexer(\"searchIndexer\")\n     .flatMap(searchIndexer ->\n         SEARCH_INDEXER_ASYNC_CLIENT.deleteIndexerWithResponse(searchIndexer, true))\n     .subscribe(deleteResponse ->\n         System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode()));\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset(String skillsetName)"
  name: "deleteSkillset(String skillsetName)"
  nameWithType: "SearchIndexerAsyncClient.deleteSkillset(String skillsetName)"
  summary: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  parameters:
  - description: "the name of the skillset to delete"
    name: "skillsetName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> deleteSkillset(String skillsetName)"
  desc: "Deletes a cognitive skillset in an Azure Cognitive Search service.\n\n**Code Sample**\n\nDelete search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.deleteSkillset(\"searchIndexerSkillset\")\n     .subscribe();\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  name: "deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  nameWithType: "SearchIndexerAsyncClient.deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  summary: "Deletes a cognitive skillset in an Azure Cognitive Search service."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerSkillset\"></xref> to delete."
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>skillset</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)"
  desc: "Deletes a cognitive skillset in an Azure Cognitive Search service.\n\n**Code Sample**\n\nDelete search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillset(\"searchIndexerSkillset\")\n     .flatMap(searchIndexerSkillset ->\n         SEARCH_INDEXER_ASYNC_CLIENT.deleteSkillsetWithResponse(searchIndexerSkillset, true))\n     .subscribe(deleteResponse ->\n         System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode()));\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection(String dataSourceName)"
  name: "getDataSourceConnection(String dataSourceName)"
  nameWithType: "SearchIndexerAsyncClient.getDataSourceConnection(String dataSourceName)"
  summary: "Retrieves a Data<wbr>Source from an Azure Cognitive Search service."
  parameters:
  - description: "the name of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to retrieve."
    name: "dataSourceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerDataSourceConnection> getDataSourceConnection(String dataSourceName)"
  desc: "Retrieves a DataSource from an Azure Cognitive Search service.\n\n**Code Sample**\n\nGet search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getDataSourceConnection(\"dataSource\")\n     .subscribe(dataSource ->\n         System.out.printf(\"The dataSource name is %s. The ETag of dataSource is %s.%n\", dataSource.getName(),\n         dataSource.getETag()));\n```"
  returns:
    description: "the DataSource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(String dataSourceName)"
  name: "getDataSourceConnectionWithResponse(String dataSourceName)"
  nameWithType: "SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(String dataSourceName)"
  summary: "Retrieves a Data<wbr>Source from an Azure Cognitive Search service."
  parameters:
  - description: "the name of the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndexerDataSourceConnection\"></xref> to retrieve."
    name: "dataSourceName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerDataSourceConnection>> getDataSourceConnectionWithResponse(String dataSourceName)"
  desc: "Retrieves a DataSource from an Azure Cognitive Search service.\n\n**Code Sample**\n\nGet search indexer data source connection named \"dataSource\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getDataSourceConnectionWithResponse(\"dataSource\")\n     .subscribe(dataSource ->\n         System.out.printf(\"The status code of the response is %s. The data source name is %s.%n\",\n         dataSource.getStatusCode(), dataSource.getValue().getName()));\n```"
  returns:
    description: "a response containing the DataSource."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "SearchIndexerAsyncClient.getEndpoint()"
  summary: "Gets the endpoint for the Azure Cognitive Search service."
  syntax: "public String getEndpoint()"
  desc: "Gets the endpoint for the Azure Cognitive Search service."
  returns:
    description: "the endpoint value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer(String indexerName)"
  name: "getIndexer(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.getIndexer(String indexerName)"
  summary: "Retrieves an indexer definition."
  parameters:
  - description: "the name of the indexer to retrieve"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexer> getIndexer(String indexerName)"
  desc: "Retrieves an indexer definition.\n\n**Code Sample**\n\nGet search indexer with name \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexer(\"searchIndexer\")\n     .subscribe(indexerFromService ->\n         System.out.printf(\"The indexer name is %s. The ETag of indexer is %s.%n\", indexerFromService.getName(),\n             indexerFromService.getETag()));\n```"
  returns:
    description: "the indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus(String indexerName)"
  name: "getIndexerStatus(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.getIndexerStatus(String indexerName)"
  summary: "Returns the current status and execution history of an indexer."
  parameters:
  - description: "the name of the indexer for which to retrieve status"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerStatus> getIndexerStatus(String indexerName)"
  desc: "Returns the current status and execution history of an indexer.\n\n**Code Sample**\n\nGet status for search indexer \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexerStatus(\"searchIndexer\")\n     .subscribe(indexerStatus ->\n         System.out.printf(\"The indexer status is %s.%n\", indexerStatus.getStatus()));\n```"
  returns:
    description: "the indexer execution info."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerStatus?alt=com.azure.search.documents.indexes.models.SearchIndexerStatus&text=SearchIndexerStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse(String indexerName)"
  name: "getIndexerStatusWithResponse(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.getIndexerStatusWithResponse(String indexerName)"
  summary: "Returns the current status and execution history of an indexer."
  parameters:
  - description: "the name of the indexer for which to retrieve status"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerStatus>> getIndexerStatusWithResponse(String indexerName)"
  desc: "Returns the current status and execution history of an indexer.\n\n**Code Sample**\n\nGet search indexer status.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexerStatusWithResponse(\"searchIndexer\")\n     .subscribe(response ->\n         System.out.printf(\"The status code of the response is %s.%nThe indexer status is %s.%n\",\n         response.getStatusCode(), response.getValue().getStatus()));\n```"
  returns:
    description: "a response with the indexer execution info."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerStatus?alt=com.azure.search.documents.indexes.models.SearchIndexerStatus&text=SearchIndexerStatus\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse(String indexerName)"
  name: "getIndexerWithResponse(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.getIndexerWithResponse(String indexerName)"
  summary: "Retrieves an indexer definition."
  parameters:
  - description: "the name of the indexer to retrieve"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexer>> getIndexerWithResponse(String indexerName)"
  desc: "Retrieves an indexer definition.\n\n**Code Sample**\n\nGet search indexer with name \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexerWithResponse(\"searchIndexer\")\n     .subscribe(indexerFromServiceResponse ->\n         System.out.printf(\"The status code of the response is %s. The indexer name is %s.%n\",\n         indexerFromServiceResponse.getStatusCode(), indexerFromServiceResponse.getValue().getName()));\n```"
  returns:
    description: "a response containing the indexer."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset(String skillsetName)"
  name: "getSkillset(String skillsetName)"
  nameWithType: "SearchIndexerAsyncClient.getSkillset(String skillsetName)"
  summary: "Retrieves a skillset definition."
  parameters:
  - description: "the name of the skillset to retrieve"
    name: "skillsetName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchIndexerSkillset> getSkillset(String skillsetName)"
  desc: "Retrieves a skillset definition.\n\n**Code Sample**\n\nGet search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillset(\"searchIndexerSkillset\")\n     .subscribe(indexerSkillset ->\n         System.out.printf(\"The indexer skillset name is %s. The ETag of indexer skillset is %s.%n\",\n         indexerSkillset.getName(), indexerSkillset.getETag()));\n```"
  returns:
    description: "the Skillset."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse(String skillsetName)"
  name: "getSkillsetWithResponse(String skillsetName)"
  nameWithType: "SearchIndexerAsyncClient.getSkillsetWithResponse(String skillsetName)"
  summary: "Retrieves a skillset definition."
  parameters:
  - description: "the name of the skillset to retrieve"
    name: "skillsetName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchIndexerSkillset>> getSkillsetWithResponse(String skillsetName)"
  desc: "Retrieves a skillset definition.\n\n**Code Sample**\n\nGet search indexer skillset \"searchIndexerSkillset\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillsetWithResponse(\"searchIndexerSkillset\")\n     .subscribe(skillsetWithResponse ->\n         System.out.printf(\"The status code of the response is %s. The indexer skillset name is %s.%n\",\n         skillsetWithResponse.getStatusCode(), skillsetWithResponse.getValue().getName()));\n```"
  returns:
    description: "a response containing the Skillset."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames()"
  name: "listDataSourceConnectionNames()"
  nameWithType: "SearchIndexerAsyncClient.listDataSourceConnectionNames()"
  summary: "List all Data<wbr>Source names from an Azure Cognitive Search service."
  syntax: "public PagedFlux<String> listDataSourceConnectionNames()"
  desc: "List all DataSource names from an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexer data source connection names.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.listDataSourceConnectionNames()\n     .subscribe(dataSourceName -> System.out.printf(\"The dataSource name is %s.%n\", dataSourceName));\n```"
  returns:
    description: "a list of DataSource names"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections()"
  name: "listDataSourceConnections()"
  nameWithType: "SearchIndexerAsyncClient.listDataSourceConnections()"
  summary: "List all Data<wbr>Sources from an Azure Cognitive Search service."
  syntax: "public PagedFlux<SearchIndexerDataSourceConnection> listDataSourceConnections()"
  desc: "List all DataSources from an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexer data source connections.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.listDataSourceConnections()\n     .subscribe(dataSource ->\n         System.out.printf(\"The dataSource name is %s. The ETag of dataSource is %s.%n\",\n             dataSource.getName(), dataSource.getETag())\n     );\n```"
  returns:
    description: "a list of DataSources"
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection?alt=com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection&text=SearchIndexerDataSourceConnection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames()"
  name: "listIndexerNames()"
  nameWithType: "SearchIndexerAsyncClient.listIndexerNames()"
  summary: "Lists all indexers available for an Azure Cognitive Search service."
  syntax: "public PagedFlux<String> listIndexerNames()"
  desc: "Lists all indexers available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexer names.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.listIndexerNames()\n     .subscribe(indexerName -> System.out.printf(\"The indexer name is %s.%n\", indexerName));\n```"
  returns:
    description: "a response containing all Indexers from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers()"
  name: "listIndexers()"
  nameWithType: "SearchIndexerAsyncClient.listIndexers()"
  summary: "Lists all indexers available for an Azure Cognitive Search service."
  syntax: "public PagedFlux<SearchIndexer> listIndexers()"
  desc: "Lists all indexers available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexers.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.listIndexers()\n     .subscribe(indexer ->\n         System.out.printf(\"The indexer name is %s. The ETag of indexer is %s.%n\", indexer.getName(),\n         indexer.getETag()));\n```"
  returns:
    description: "a response containing all Indexers from the Search service."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames()"
  name: "listSkillsetNames()"
  nameWithType: "SearchIndexerAsyncClient.listSkillsetNames()"
  summary: "Lists all skillset names for an Azure Cognitive Search service."
  syntax: "public PagedFlux<String> listSkillsetNames()"
  desc: "Lists all skillset names for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexer skillset names.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.listSkillsetNames()\n     .subscribe(skillsetName -> System.out.printf(\"The indexer skillset name is %s.%n\", skillsetName));\n```"
  returns:
    description: "a reactive response emitting the list of skillset names."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets()"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets()"
  name: "listSkillsets()"
  nameWithType: "SearchIndexerAsyncClient.listSkillsets()"
  summary: "Lists all skillsets available for an Azure Cognitive Search service."
  syntax: "public PagedFlux<SearchIndexerSkillset> listSkillsets()"
  desc: "Lists all skillsets available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexer skillsets.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.listSkillsets()\n     .subscribe(skillset ->\n         System.out.printf(\"The skillset name is %s. The ETag of skillset is %s.%n\", skillset.getName(),\n         skillset.getETag()));\n```"
  returns:
    description: "a reactive response emitting the list of skillsets."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetDocuments(java.lang.String,java.lang.Boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetDocuments(String indexerName, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  name: "resetDocuments(String indexerName, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  nameWithType: "SearchIndexerAsyncClient.resetDocuments(String indexerName, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  summary: "Resets specific documents in the datasource to be selectively re-ingested by the indexer."
  parameters:
  - description: "The name of the indexer to reset documents for."
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "If false, keys or IDs will be appended to existing ones. If true, only the keys or IDs in this\n payload will be queued to be re-ingested."
    name: "overwrite"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Document keys to be reset."
    name: "documentKeys"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Datasource document identifiers to be reset."
    name: "datasourceDocumentIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> resetDocuments(String indexerName, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  desc: "Resets specific documents in the datasource to be selectively re-ingested by the indexer.\n\n```java\n// Reset the documents with keys 1234 and 4321.\n SEARCH_INDEXER_ASYNC_CLIENT.resetDocuments(\"searchIndexer\", false, Arrays.asList(\"1234\", \"4321\"), null)\n     // Clear the previous documents to be reset and replace them with documents 1235 and 5231.\n     .then(SEARCH_INDEXER_ASYNC_CLIENT.resetDocuments(\"searchIndexer\", true, Arrays.asList(\"1235\", \"5321\"), null))\n     .subscribe();\n```"
  returns:
    description: "A response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetDocumentsWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,java.lang.Boolean,java.util.List<java.lang.String>,java.util.List<java.lang.String>)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetDocumentsWithResponse(SearchIndexer indexer, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  name: "resetDocumentsWithResponse(SearchIndexer indexer, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  nameWithType: "SearchIndexerAsyncClient.resetDocumentsWithResponse(SearchIndexer indexer, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  summary: "Resets specific documents in the datasource to be selectively re-ingested by the indexer."
  parameters:
  - description: "The indexer to reset documents for."
    name: "indexer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexer?alt=com.azure.search.documents.indexes.models.SearchIndexer&text=SearchIndexer\" data-throw-if-not-resolved=\"False\" />"
  - description: "If false, keys or IDs will be appended to existing ones. If true, only the keys or IDs in this\n payload will be queued to be re-ingested."
    name: "overwrite"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "Document keys to be reset."
    name: "documentKeys"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Datasource document identifiers to be reset."
    name: "datasourceDocumentIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> resetDocumentsWithResponse(SearchIndexer indexer, Boolean overwrite, List<String> documentKeys, List<String> datasourceDocumentIds)"
  desc: "Resets specific documents in the datasource to be selectively re-ingested by the indexer.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getIndexer(\"searchIndexer\")\n     .flatMap(searchIndexer -> SEARCH_INDEXER_ASYNC_CLIENT.resetDocumentsWithResponse(searchIndexer, false,\n         Arrays.asList(\"1234\", \"4321\"), null)\n         .flatMap(resetDocsResult -> {\n             System.out.printf(\"Requesting documents to be reset completed with status code %d.%n\",\n                 resetDocsResult.getStatusCode());\n\n             // Clear the previous documents to be reset and replace them with documents 1235 and 5231.\n             return SEARCH_INDEXER_ASYNC_CLIENT.resetDocumentsWithResponse(searchIndexer, true,\n                 Arrays.asList(\"1235\", \"5321\"), null);\n         }))\n     .subscribe(resetDocsResult ->\n         System.out.printf(\"Overwriting the documents to be reset completed with status code %d.%n\",\n             resetDocsResult.getStatusCode()));\n```"
  returns:
    description: "A response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer(String indexerName)"
  name: "resetIndexer(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.resetIndexer(String indexerName)"
  summary: "Resets the change tracking state associated with an indexer."
  parameters:
  - description: "the name of the indexer to reset"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> resetIndexer(String indexerName)"
  desc: "Resets the change tracking state associated with an indexer.\n\n**Code Sample**\n\nReset search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.resetIndexer(\"searchIndexer\")\n     .subscribe();\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse(String indexerName)"
  name: "resetIndexerWithResponse(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.resetIndexerWithResponse(String indexerName)"
  summary: "Resets the change tracking state associated with an indexer."
  parameters:
  - description: "the name of the indexer to reset"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> resetIndexerWithResponse(String indexerName)"
  desc: "Resets the change tracking state associated with an indexer.\n\n**Code Sample**\n\nReset search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.resetIndexerWithResponse(\"searchIndexer\")\n     .subscribe(response ->\n         System.out.println(\"The status code of the response is \" + response.getStatusCode()));\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetSkills(java.lang.String,java.util.List<java.lang.String>)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetSkills(String skillsetName, List<String> skillNames)"
  name: "resetSkills(String skillsetName, List<String> skillNames)"
  nameWithType: "SearchIndexerAsyncClient.resetSkills(String skillsetName, List<String> skillNames)"
  summary: "Resets skills in an existing skillset in an Azure Cognitive Search service."
  parameters:
  - description: "The name of the skillset to reset."
    name: "skillsetName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The skills to reset."
    name: "skillNames"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> resetSkills(String skillsetName, List<String> skillNames)"
  desc: "Resets skills in an existing skillset in an Azure Cognitive Search service.\n\n```java\n// Reset the \"myOcr\" and \"myText\" skills.\n SEARCH_INDEXER_ASYNC_CLIENT.resetSkills(\"searchIndexerSkillset\", Arrays.asList(\"myOcr\", \"myText\"))\n     .subscribe();\n```"
  returns:
    description: "A response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetSkillsWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,java.util.List<java.lang.String>)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetSkillsWithResponse(SearchIndexerSkillset skillset, List<String> skillNames)"
  name: "resetSkillsWithResponse(SearchIndexerSkillset skillset, List<String> skillNames)"
  nameWithType: "SearchIndexerAsyncClient.resetSkillsWithResponse(SearchIndexerSkillset skillset, List<String> skillNames)"
  summary: "Resets skills in an existing skillset in an Azure Cognitive Search service."
  parameters:
  - description: "The skillset to reset."
    name: "skillset"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexerSkillset?alt=com.azure.search.documents.indexes.models.SearchIndexerSkillset&text=SearchIndexerSkillset\" data-throw-if-not-resolved=\"False\" />"
  - description: "The skills to reset."
    name: "skillNames"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<Void>> resetSkillsWithResponse(SearchIndexerSkillset skillset, List<String> skillNames)"
  desc: "Resets skills in an existing skillset in an Azure Cognitive Search service.\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.getSkillset(\"searchIndexerSkillset\")\n     .flatMap(searchIndexerSkillset -> SEARCH_INDEXER_ASYNC_CLIENT.resetSkillsWithResponse(searchIndexerSkillset,\n         Arrays.asList(\"myOcr\", \"myText\")))\n     .subscribe(resetSkillsResponse -> System.out.printf(\"Resetting skills completed with status code %d.%n\",\n         resetSkillsResponse.getStatusCode()));\n```"
  returns:
    description: "A response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer(String indexerName)"
  name: "runIndexer(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.runIndexer(String indexerName)"
  summary: "Runs an indexer on-demand."
  parameters:
  - description: "the name of the indexer to run"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> runIndexer(String indexerName)"
  desc: "Runs an indexer on-demand.\n\n**Code Sample**\n\nRun search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.runIndexer(\"searchIndexer\")\n     .subscribe();\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse(String indexerName)"
  name: "runIndexerWithResponse(String indexerName)"
  nameWithType: "SearchIndexerAsyncClient.runIndexerWithResponse(String indexerName)"
  summary: "Runs an indexer on-demand."
  parameters:
  - description: "the name of the indexer to run"
    name: "indexerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> runIndexerWithResponse(String indexerName)"
  desc: "Runs an indexer on-demand.\n\n**Code Sample**\n\nRun search indexer named \"searchIndexer\".\n\n```java\nSEARCH_INDEXER_ASYNC_CLIENT.runIndexerWithResponse(\"searchIndexer\")\n     .subscribe(response ->\n         System.out.println(\"The status code of the response is \" + response.getStatusCode()));\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting data source connections, indexers, or skillsets and running or resetting indexers in an Azure Cognitive Search service."
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.5.0-beta.12
