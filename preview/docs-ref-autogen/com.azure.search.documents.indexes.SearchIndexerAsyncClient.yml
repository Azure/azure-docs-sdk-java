### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  id: SearchIndexerAsyncClient
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes
  children:
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer(com.azure.search.documents.indexes.models.SearchIndexer)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer(com.azure.search.documents.indexes.models.SearchIndexer)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets()
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer(java.lang.String)
  - com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse(java.lang.String)
  langs:
  - java
  name: SearchIndexerAsyncClient
  nameWithType: SearchIndexerAsyncClient
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  type: Class
  package: com.azure.search.documents.indexes
  summary: This class provides a client that contains the operations for creating, getting, listing, updating, or deleting data source connections, indexers, or skillsets and running or resetting indexers in an Azure Cognitive Search service.
  syntax:
    content: public class SearchIndexerAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.SearchIndexerAsyncClient(java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)
  id: SearchIndexerAsyncClient(java.lang.String,com.azure.search.documents.SearchServiceVersion,com.azure.core.http.HttpPipeline)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: SearchIndexerAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  nameWithType: SearchIndexerAsyncClient.SearchIndexerAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.SearchIndexerAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.SearchIndexerAsyncClient*
  type: Constructor
  package: com.azure.search.documents.indexes
  syntax:
    content: " SearchIndexerAsyncClient(String endpoint, SearchServiceVersion serviceVersion, HttpPipeline httpPipeline)"
    parameters:
    - id: endpoint
      type: java.lang.String
    - id: serviceVersion
      type: com.azure.search.documents.SearchServiceVersion
    - id: httpPipeline
      type: com.azure.core.http.HttpPipeline
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  id: createDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
  nameWithType: SearchIndexerAsyncClient.createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Creates a new Azure Cognitive Search data source\n\n**Code Sample**\n\nCreate search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = searchIndexerClient.getDataSourceConnection(\"dataSource\");\n dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n \n SearchIndexerDataSourceConnection updateDataSource = searchIndexerClient.createOrUpdateDataSourceConnection(dataSource);\n System.out.printf(\"The dataSource name is %s. The container name of dataSource is %s.%n\",\n     updateDataSource.getName(), updateDataSource.getContainer().getName());\n```"
  syntax:
    content: public Mono<SearchIndexerDataSourceConnection> createDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
    parameters:
    - id: dataSource
      type: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
      description: The definition of the dataSource to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
      description: a Mono which performs the network request upon subscription.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  id: createDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)
  nameWithType: SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search data source


    **Code Sample**


    Create search indexer data source connection named "dataSource".


    ```java

    SearchIndexerDataSourceConnection dataSource = new SearchIndexerDataSourceConnection("dataSource",
         SearchIndexerDataSourceType.AZURE_BLOB, "{connectionString}",
         new SearchIndexerDataContainer("container"));
     searchIndexerAsyncClient.createDataSourceConnectionWithResponse(dataSource)
         .subscribe(dataSourceFromService ->
             System.out.printf("The status code of the response is %s. The data source name is %s.%n",
             dataSourceFromService.getStatusCode(), dataSourceFromService.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexerDataSourceConnection>> createDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource)
    parameters:
    - id: dataSource
      type: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
      description: The definition of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>>
      description: a Mono which performs the network request upon subscription.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer(com.azure.search.documents.indexes.models.SearchIndexer)
  id: createIndexer(com.azure.search.documents.indexes.models.SearchIndexer)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createIndexer(SearchIndexer indexer)
  nameWithType: SearchIndexerAsyncClient.createIndexer(SearchIndexer indexer)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer(SearchIndexer indexer)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search indexer.


    **Code Sample**


    Create search indexer named "searchIndexer".


    ```java

    SearchIndexer searchIndexer = new SearchIndexer("searchIndexer", "dataSource",
         "searchIndex");
     searchIndexerAsyncClient.createIndexer(searchIndexer)
         .subscribe(indexerFromService ->
             System.out.printf("The indexer name is %s. The etag of indexer is %s.%n", indexerFromService.getName(),
             indexerFromService.getETag()));
    ```
  syntax:
    content: public Mono<SearchIndexer> createIndexer(SearchIndexer indexer)
    parameters:
    - id: indexer
      type: com.azure.search.documents.indexes.models.SearchIndexer
      description: definition of the indexer to create.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexer>
      description: the created Indexer.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer)
  id: createIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createIndexerWithResponse(SearchIndexer indexer)
  nameWithType: SearchIndexerAsyncClient.createIndexerWithResponse(SearchIndexer indexer)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse(SearchIndexer indexer)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search indexer.


    **Code Sample**


    Create search indexer named "searchIndexer".


    ```java

    SearchIndexer searchIndexer = new SearchIndexer("searchIndexer", "dataSource",
         "searchIndex");
     searchIndexerAsyncClient.createIndexerWithResponse(searchIndexer)
         .subscribe(indexerFromServiceResponse ->
             System.out.printf("The status code of the response is %s. The indexer name is %s.%n",
                 indexerFromServiceResponse.getStatusCode(), indexerFromServiceResponse.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexer>> createIndexerWithResponse(SearchIndexer indexer)
    parameters:
    - id: indexer
      type: com.azure.search.documents.indexes.models.SearchIndexer
      description: definition of the indexer to create
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexer>>
      description: a response containing the created Indexer.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  id: createOrUpdateDataSourceConnection(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
  nameWithType: SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Creates a new Azure Cognitive Search data source or updates a data source if it already exists.\n\n**Code Sample**\n\nCreate or update search indexer data source connection named \"dataSource\".\n\n```java\nSearchIndexerDataSourceConnection dataSource = searchIndexerClient.getDataSourceConnection(\"dataSource\");\n dataSource.setContainer(new SearchIndexerDataContainer(\"updatecontainer\"));\n \n SearchIndexerDataSourceConnection updateDataSource = searchIndexerClient.createOrUpdateDataSourceConnection(dataSource);\n System.out.printf(\"The dataSource name is %s. The container name of dataSource is %s.%n\",\n     updateDataSource.getName(), updateDataSource.getContainer().getName());\n```"
  syntax:
    content: public Mono<SearchIndexerDataSourceConnection> createOrUpdateDataSourceConnection(SearchIndexerDataSourceConnection dataSource)
    parameters:
    - id: dataSource
      type: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
      description: The definition of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> to create or update.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
      description: the data source that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)
  id: createOrUpdateDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
  nameWithType: SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search data source or updates a data source if it already exists.


    **Code Sample**


    Create or update search indexer data source connection named "dataSource".


    ```java

    searchIndexerAsyncClient.getDataSourceConnection("dataSource")
         .flatMap(dataSource -> {
             dataSource.setContainer(new SearchIndexerDataContainer("updatecontainer"));
             return searchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse(dataSource, true);
         })
         .subscribe(updateDataSource ->
             System.out.printf("The status code of the response is %s.%nThe dataSource name is %s. "
                 + "The container name of dataSource is %s.%n", updateDataSource.getStatusCode(),
             updateDataSource.getValue().getName(), updateDataSource.getValue().getContainer().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexerDataSourceConnection>> createOrUpdateDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
    parameters:
    - id: dataSource
      type: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
      description: The definition of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> to create or update.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>dataSource</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>>
      description: a data source response.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer(com.azure.search.documents.indexes.models.SearchIndexer)
  id: createOrUpdateIndexer(com.azure.search.documents.indexes.models.SearchIndexer)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createOrUpdateIndexer(SearchIndexer indexer)
  nameWithType: SearchIndexerAsyncClient.createOrUpdateIndexer(SearchIndexer indexer)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer(SearchIndexer indexer)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists.


    **Code Sample**


    Create or update search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.getIndexer("searchIndexer")
         .flatMap(searchIndexerFromService -> {
             searchIndexerFromService.setFieldMappings(Collections.singletonList(
                 new FieldMapping("hotelName").setTargetFieldName("HotelName")));
             return searchIndexerAsyncClient.createOrUpdateIndexer(searchIndexerFromService);
         })
         .subscribe(updatedIndexer ->
             System.out.printf("The indexer name is %s. The target field name of indexer is %s.%n",
             updatedIndexer.getName(), updatedIndexer.getFieldMappings().get(0).getTargetFieldName()));
    ```
  syntax:
    content: public Mono<SearchIndexer> createOrUpdateIndexer(SearchIndexer indexer)
    parameters:
    - id: indexer
      type: com.azure.search.documents.indexes.models.SearchIndexer
      description: The definition of the indexer to create or update.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexer>
      description: a response containing the created Indexer.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)
  id: createOrUpdateIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
  nameWithType: SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search indexer or updates an indexer if it already exists.


    **Code Sample**


    Create or update search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.getIndexer("searchIndexer")
         .flatMap(searchIndexerFromService -> {
             searchIndexerFromService.setFieldMappings(Collections.singletonList(
                 new FieldMapping("hotelName").setTargetFieldName("HotelName")));
             return searchIndexerAsyncClient.createOrUpdateIndexerWithResponse(searchIndexerFromService, true);
         })
         .subscribe(indexerFromService ->
             System.out.printf("The status code of the response is %s.%nThe indexer name is %s. "
                 + "The target field name of indexer is %s.%n", indexerFromService.getStatusCode(),
             indexerFromService.getValue().getName(),
             indexerFromService.getValue().getFieldMappings().get(0).getTargetFieldName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexer>> createOrUpdateIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
    parameters:
    - id: indexer
      type: com.azure.search.documents.indexes.models.SearchIndexer
      description: the definition of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexer" data-throw-if-not-resolved="false">SearchIndexer</xref> to create or update
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>indexer</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexer>>
      description: a response containing the created Indexer.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  id: createOrUpdateSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createOrUpdateSkillset(SearchIndexerSkillset skillset)
  nameWithType: SearchIndexerAsyncClient.createOrUpdateSkillset(SearchIndexerSkillset skillset)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset(SearchIndexerSkillset skillset)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists.


    **Code Sample**


    Create or update search indexer skillset "searchIndexerSkillset".


    ```java

    searchIndexerAsyncClient.getSkillset("searchIndexerSkilset")
         .flatMap(indexerSkillset -> {
             indexerSkillset.setDescription("This is new description!");
             return searchIndexerAsyncClient.createOrUpdateSkillset(indexerSkillset);
         }).subscribe(updateSkillset ->
             System.out.printf("The indexer skillset name is %s. The description of indexer skillset is %s.%n",
             updateSkillset.getName(), updateSkillset.getDescription()));
    ```
  syntax:
    content: public Mono<SearchIndexerSkillset> createOrUpdateSkillset(SearchIndexerSkillset skillset)
    parameters:
    - id: skillset
      type: com.azure.search.documents.indexes.models.SearchIndexerSkillset
      description: the definition of the skillset to create or update
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerSkillset>
      description: the skillset that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)
  id: createOrUpdateSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
  nameWithType: SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Creates a new Azure Cognitive Search skillset or updates a skillset if it already exists.


    **Code Sample**


    Create or update search indexer skillset "searchIndexerSkillset".


    ```java

    searchIndexerAsyncClient.getSkillset("searchIndexerSkilset")
         .flatMap(indexerSkillset -> {
             indexerSkillset.setDescription("This is new description!");
             return searchIndexerAsyncClient.createOrUpdateSkillsetWithResponse(indexerSkillset, true);
         })
         .subscribe(updateSkillsetResponse ->
             System.out.printf("The status code of the response is %s.%nThe indexer skillset name is %s. "
                 + "The description of indexer skilset is %s.%n", updateSkillsetResponse.getStatusCode(),
             updateSkillsetResponse.getValue().getName(),
             updateSkillsetResponse.getValue().getDescription()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexerSkillset>> createOrUpdateSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
    parameters:
    - id: skillset
      type: com.azure.search.documents.indexes.models.SearchIndexerSkillset
      description: the definition of the skillset to create or update
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to update if the <code>skillset</code> is the same as the current service value.
         <code>false</code> to always update existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerSkillset>>
      description: a response containing the skillset that was created or updated.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  id: createSkillset(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createSkillset(SearchIndexerSkillset skillset)
  nameWithType: SearchIndexerAsyncClient.createSkillset(SearchIndexerSkillset skillset)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset(SearchIndexerSkillset skillset)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Creates a new skillset in an Azure Cognitive Search service.\n\n**Code Sample**\n\nCreate search indexer skillset \"searchIndexerSkillset\".\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n \n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n SearchIndexerSkillset searchIndexerSkillset = new SearchIndexerSkillset(\"searchIndexerSkillset\",\n     Collections.singletonList(new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")));\n searchIndexerAsyncClient.createSkillset(searchIndexerSkillset)\n     .subscribe(skillset ->\n         System.out.printf(\"The indexer skillset name is %s. The etag of indexer skillset is %s.%n\",\n         skillset.getName(), skillset.getETag()));\n```"
  syntax:
    content: public Mono<SearchIndexerSkillset> createSkillset(SearchIndexerSkillset skillset)
    parameters:
    - id: skillset
      type: com.azure.search.documents.indexes.models.SearchIndexerSkillset
      description: definition of the skillset containing one or more cognitive skills
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerSkillset>
      description: the created Skillset.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  id: createSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: createSkillsetWithResponse(SearchIndexerSkillset skillset)
  nameWithType: SearchIndexerAsyncClient.createSkillsetWithResponse(SearchIndexerSkillset skillset)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse(SearchIndexerSkillset skillset)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: "Creates a new skillset in an Azure Cognitive Search service.\n\n**Code Sample**\n\nCreate search indexer skillset \"searchIndexerSkillset\".\n\n```java\nList<InputFieldMappingEntry> inputs = Collections.singletonList(\n     new InputFieldMappingEntry(\"image\")\n         .setSource(\"/document/normalized_images/*\")\n );\n \n List<OutputFieldMappingEntry> outputs = Arrays.asList(\n     new OutputFieldMappingEntry(\"text\")\n         .setTargetName(\"mytext\"),\n     new OutputFieldMappingEntry(\"layoutText\")\n         .setTargetName(\"myLayoutText\")\n );\n SearchIndexerSkillset searchIndexerSkillset = new SearchIndexerSkillset(\"searchIndexerSkillset\",\n     Collections.singletonList(new OcrSkill(inputs, outputs)\n         .setShouldDetectOrientation(true)\n         .setDefaultLanguageCode(null)\n         .setName(\"myocr\")\n         .setDescription(\"Extracts text (plain and structured) from image.\")\n         .setContext(\"/document/normalized_images/*\")));\n searchIndexerAsyncClient.createSkillsetWithResponse(searchIndexerSkillset)\n     .subscribe(skillsetWithResponse ->\n         System.out.printf(\"The status code of the response is %s. The indexer skillset name is %s.%n\",\n         skillsetWithResponse.getStatusCode(), skillsetWithResponse.getValue().getName()));\n```"
  syntax:
    content: public Mono<Response<SearchIndexerSkillset>> createSkillsetWithResponse(SearchIndexerSkillset skillset)
    parameters:
    - id: skillset
      type: com.azure.search.documents.indexes.models.SearchIndexerSkillset
      description: definition of the skillset containing one or more cognitive skills
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerSkillset>>
      description: a response containing the created Skillset.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection(java.lang.String)
  id: deleteDataSourceConnection(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: deleteDataSourceConnection(String dataSourceName)
  nameWithType: SearchIndexerAsyncClient.deleteDataSourceConnection(String dataSourceName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection(String dataSourceName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Delete a DataSource


    **Code Sample**


    Delete the search indexer data source connection named "dataSource".


    ```java

    searchIndexerAsyncClient.deleteDataSourceConnection("dataSource")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteDataSourceConnection(String dataSourceName)
    parameters:
    - id: dataSourceName
      type: java.lang.String
      description: the name of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> for deletion
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a void Mono
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)
  id: deleteDataSourceConnectionWithResponse(com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
  nameWithType: SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search data source.


    **Code Sample**


    Delete the search indexer data source connection named "dataSource".


    ```java

    searchIndexerAsyncClient.getDataSourceConnection("dataSource")
         .flatMap(dataSource -> searchIndexerAsyncClient.deleteDataSourceConnectionWithResponse(dataSource, true))
         .subscribe(deleteResponse ->
             System.out.printf("The status code of the response is %d.%n", deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteDataSourceConnectionWithResponse(SearchIndexerDataSourceConnection dataSource, boolean onlyIfUnchanged)
    parameters:
    - id: dataSource
      type: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
      description: The <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> to delete.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>dataSource</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a mono response
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer(java.lang.String)
  id: deleteIndexer(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: deleteIndexer(String indexerName)
  nameWithType: SearchIndexerAsyncClient.deleteIndexer(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search indexer.


    **Code Sample**


    Delete search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.deleteIndexer("searchIndexer")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteIndexer(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to delete
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)
  id: deleteIndexerWithResponse(com.azure.search.documents.indexes.models.SearchIndexer,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
  nameWithType: SearchIndexerAsyncClient.deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes an Azure Cognitive Search indexer.


    **Code Sample**


    Delete search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.getIndexer("searchIndexer")
         .flatMap(searchIndexer ->
             searchIndexerAsyncClient.deleteIndexerWithResponse(searchIndexer, true))
         .subscribe(deleteResponse ->
             System.out.printf("The status code of the response is %d.%n", deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteIndexerWithResponse(SearchIndexer indexer, boolean onlyIfUnchanged)
    parameters:
    - id: indexer
      type: com.azure.search.documents.indexes.models.SearchIndexer
      description: the <xref uid="com.azure.search.documents.indexes.models.SearchIndexer" data-throw-if-not-resolved="false">SearchIndexer</xref> to delete
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>indexer</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset(java.lang.String)
  id: deleteSkillset(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: deleteSkillset(String skillsetName)
  nameWithType: SearchIndexerAsyncClient.deleteSkillset(String skillsetName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset(String skillsetName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes a cognitive skillset in an Azure Cognitive Search service.


    **Code Sample**


    Delete search indexer skillset "searchIndexerSkillset".


    ```java

    searchIndexerAsyncClient.deleteSkillset("searchIndexerSkillset")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> deleteSkillset(String skillsetName)
    parameters:
    - id: skillsetName
      type: java.lang.String
      description: the name of the skillset to delete
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)
  id: deleteSkillsetWithResponse(com.azure.search.documents.indexes.models.SearchIndexerSkillset,boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
  nameWithType: SearchIndexerAsyncClient.deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Deletes a cognitive skillset in an Azure Cognitive Search service.


    **Code Sample**


    Delete search indexer skillset "searchIndexerSkillset".


    ```java

    searchIndexerAsyncClient.getSkillset("searchIndexerSkilset")
         .flatMap(searchIndexerSkilset ->
             searchIndexerAsyncClient.deleteSkillsetWithResponse(searchIndexerSkilset, true))
         .subscribe(deleteResponse ->
             System.out.printf("The status code of the response is %d.%n", deleteResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> deleteSkillsetWithResponse(SearchIndexerSkillset skillset, boolean onlyIfUnchanged)
    parameters:
    - id: skillset
      type: com.azure.search.documents.indexes.models.SearchIndexerSkillset
      description: the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerSkillset" data-throw-if-not-resolved="false">SearchIndexerSkillset</xref> to delete.
    - id: onlyIfUnchanged
      type: boolean
      description: >-
        <code>true</code> to delete if the <code>skillset</code> is the same as the current service value.
         <code>false</code> to always delete existing value.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection(java.lang.String)
  id: getDataSourceConnection(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getDataSourceConnection(String dataSourceName)
  nameWithType: SearchIndexerAsyncClient.getDataSourceConnection(String dataSourceName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection(String dataSourceName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a DataSource from an Azure Cognitive Search service.


    **Code Sample**


    Get search indexer data source connection named "dataSource".


    ```java

    searchIndexerAsyncClient.getDataSourceConnection("dataSource")
         .subscribe(dataSource ->
             System.out.printf("The dataSource name is %s. The etag of dataSource is %s.%n", dataSource.getName(),
             dataSource.getETag()));
    ```
  syntax:
    content: public Mono<SearchIndexerDataSourceConnection> getDataSourceConnection(String dataSourceName)
    parameters:
    - id: dataSourceName
      type: java.lang.String
      description: the name of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> to retrieve.
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
      description: the DataSource.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(java.lang.String)
  id: getDataSourceConnectionWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getDataSourceConnectionWithResponse(String dataSourceName)
  nameWithType: SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(String dataSourceName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse(String dataSourceName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a DataSource from an Azure Cognitive Search service.


    **Code Sample**


    Get search indexer data source connection named "dataSource".


    ```java

    searchIndexerAsyncClient.getDataSourceConnectionWithResponse("dataSource")
         .subscribe(dataSource ->
             System.out.printf("The status code of the response is %s. The data source name is %s.%n",
             dataSource.getStatusCode(), dataSource.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexerDataSourceConnection>> getDataSourceConnectionWithResponse(String dataSourceName)
    parameters:
    - id: dataSourceName
      type: java.lang.String
      description: the name of the <xref uid="com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection" data-throw-if-not-resolved="false">SearchIndexerDataSourceConnection</xref> to retrieve.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>>
      description: a response containing the DataSource.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint()
  id: getEndpoint()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getEndpoint()
  nameWithType: SearchIndexerAsyncClient.getEndpoint()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint*
  type: Method
  package: com.azure.search.documents.indexes
  summary: Gets the endpoint for the Azure Cognitive Search service.
  syntax:
    content: public String getEndpoint()
    return:
      type: java.lang.String
      description: the endpoint value.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer(java.lang.String)
  id: getIndexer(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getIndexer(String indexerName)
  nameWithType: SearchIndexerAsyncClient.getIndexer(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves an indexer definition.


    **Code Sample**


    Get search indexer with name "searchIndexer".


    ```java

    searchIndexerAsyncClient.getIndexer("searchIndexer")
         .subscribe(indexerFromService ->
             System.out.printf("The indexer name is %s. The etag of indexer is %s.%n", indexerFromService.getName(),
                 indexerFromService.getETag()));
    ```
  syntax:
    content: public Mono<SearchIndexer> getIndexer(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexer>
      description: the indexer.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus(java.lang.String)
  id: getIndexerStatus(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getIndexerStatus(String indexerName)
  nameWithType: SearchIndexerAsyncClient.getIndexerStatus(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns the current status and execution history of an indexer.


    **Code Sample**


    Get status for search indexer "searchIndexer".


    ```java

    searchIndexerAsyncClient.getIndexerStatus("searchIndexer")
         .subscribe(indexerStatus ->
             System.out.printf("The indexer status is %s.%n", indexerStatus.getStatus()));
    ```
  syntax:
    content: public Mono<SearchIndexerStatus> getIndexerStatus(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer for which to retrieve status
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerStatus>
      description: the indexer execution info.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse(java.lang.String)
  id: getIndexerStatusWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getIndexerStatusWithResponse(String indexerName)
  nameWithType: SearchIndexerAsyncClient.getIndexerStatusWithResponse(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Returns the current status and execution history of an indexer.


    **Code Sample**


    Get search indexer status.


    ```java

    searchIndexerAsyncClient.getIndexerStatusWithResponse("searchIndexer")
         .subscribe(response ->
             System.out.printf("The status code of the response is %s.%nThe indexer status is %s.%n",
             response.getStatusCode(), response.getValue().getStatus()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexerStatus>> getIndexerStatusWithResponse(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer for which to retrieve status
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerStatus>>
      description: a response with the indexer execution info.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse(java.lang.String)
  id: getIndexerWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getIndexerWithResponse(String indexerName)
  nameWithType: SearchIndexerAsyncClient.getIndexerWithResponse(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves an indexer definition.


    **Code Sample**


    Get search indexer with name "searchIndexer".


    ```java

    searchIndexerAsyncClient.getIndexerWithResponse("searchIndexer")
         .subscribe(indexerFromServiceResponse ->
             System.out.printf("The status code of the response is %s. The indexer name is %s.%n",
             indexerFromServiceResponse.getStatusCode(), indexerFromServiceResponse.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexer>> getIndexerWithResponse(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexer>>
      description: a response containing the indexer.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset(java.lang.String)
  id: getSkillset(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getSkillset(String skillsetName)
  nameWithType: SearchIndexerAsyncClient.getSkillset(String skillsetName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset(String skillsetName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a skillset definition.


    **Code Sample**


    Get search indexer skillset "searchIndexerSkillset".


    ```java

    searchIndexerAsyncClient.getSkillset("searchIndexerSkillset")
         .subscribe(indexerSkillset ->
             System.out.printf("The indexer skillset name is %s. The etag of indexer skillset is %s.%n",
             indexerSkillset.getName(), indexerSkillset.getETag()));
    ```
  syntax:
    content: public Mono<SearchIndexerSkillset> getSkillset(String skillsetName)
    parameters:
    - id: skillsetName
      type: java.lang.String
      description: the name of the skillset to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerSkillset>
      description: the Skillset.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse(java.lang.String)
  id: getSkillsetWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: getSkillsetWithResponse(String skillsetName)
  nameWithType: SearchIndexerAsyncClient.getSkillsetWithResponse(String skillsetName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse(String skillsetName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Retrieves a skillset definition.


    **Code Sample**


    Get search indexer skillset "searchIndexerSkillset".


    ```java

    searchIndexerAsyncClient.getSkillsetWithResponse("searchIndexerSkillset")
         .subscribe(skillsetWithResponse ->
             System.out.printf("The status code of the response is %s. The indexer skillset name is %s.%n",
             skillsetWithResponse.getStatusCode(), skillsetWithResponse.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<SearchIndexerSkillset>> getSkillsetWithResponse(String skillsetName)
    parameters:
    - id: skillsetName
      type: java.lang.String
      description: the name of the skillset to retrieve
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerSkillset>>
      description: a response containing the Skillset.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames()
  id: listDataSourceConnectionNames()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: listDataSourceConnectionNames()
  nameWithType: SearchIndexerAsyncClient.listDataSourceConnectionNames()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    List all DataSource names from an Azure Cognitive Search service.


    **Code Sample**


    List all search indexer data source connection names.


    ```java

    searchIndexerAsyncClient.listDataSourceConnectionNames()
         .subscribe(dataSourceName -> System.out.printf("The dataSource name is %s.%n", dataSourceName));
    ```
  syntax:
    content: public PagedFlux<String> listDataSourceConnectionNames()
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: a list of DataSource names
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections()
  id: listDataSourceConnections()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: listDataSourceConnections()
  nameWithType: SearchIndexerAsyncClient.listDataSourceConnections()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    List all DataSources from an Azure Cognitive Search service.


    **Code Sample**


    List all search indexer data source connections.


    ```java

    searchIndexerAsyncClient.listDataSourceConnections()
         .subscribe(dataSource ->
             System.out.printf("The dataSource name is %s. The etag of dataSource is %s.%n",
                 dataSource.getName(), dataSource.getETag())
         );
    ```
  syntax:
    content: public PagedFlux<SearchIndexerDataSourceConnection> listDataSourceConnections()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
      description: a list of DataSources
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames()
  id: listIndexerNames()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: listIndexerNames()
  nameWithType: SearchIndexerAsyncClient.listIndexerNames()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexers available for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexer names.


    ```java

    searchIndexerAsyncClient.listIndexerNames()
         .subscribe(indexerName -> System.out.printf("The indexer name is %s.%n", indexerName));
    ```
  syntax:
    content: public PagedFlux<String> listIndexerNames()
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: a response containing all Indexers from the Search service.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers()
  id: listIndexers()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: listIndexers()
  nameWithType: SearchIndexerAsyncClient.listIndexers()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all indexers available for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexers.


    ```java

    searchIndexerAsyncClient.listIndexers()
         .subscribe(indexer ->
             System.out.printf("The indexer name is %s. The etag of indexer is %s.%n", indexer.getName(),
             indexer.getETag()));
    ```
  syntax:
    content: public PagedFlux<SearchIndexer> listIndexers()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndexer>
      description: a response containing all Indexers from the Search service.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames()
  id: listSkillsetNames()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: listSkillsetNames()
  nameWithType: SearchIndexerAsyncClient.listSkillsetNames()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all skillset names for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexer skillset names.


    ```java

    searchIndexerAsyncClient.listSkillsetNames()
         .subscribe(skillsetName -> System.out.printf("The indexer skillset name is %s.%n", skillsetName));
    ```
  syntax:
    content: public PagedFlux<String> listSkillsetNames()
    return:
      type: com.azure.core.http.rest.PagedFlux<java.lang.String>
      description: a reactive response emitting the list of skillset names.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets()
  id: listSkillsets()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: listSkillsets()
  nameWithType: SearchIndexerAsyncClient.listSkillsets()
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets()
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Lists all skillsets available for an Azure Cognitive Search service.


    **Code Sample**


    List all search indexer skillsets.


    ```java

    searchIndexerAsyncClient.listSkillsets()
         .subscribe(skillset ->
             System.out.printf("The skillset name is %s. The etag of skillset is %s.%n", skillset.getName(),
             skillset.getETag()));
    ```
  syntax:
    content: public PagedFlux<SearchIndexerSkillset> listSkillsets()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndexerSkillset>
      description: a reactive response emitting the list of skillsets.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer(java.lang.String)
  id: resetIndexer(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: resetIndexer(String indexerName)
  nameWithType: SearchIndexerAsyncClient.resetIndexer(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Resets the change tracking state associated with an indexer.


    **Code Sample**


    Reset search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.resetIndexer("searchIndexer")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> resetIndexer(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to reset
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse(java.lang.String)
  id: resetIndexerWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: resetIndexerWithResponse(String indexerName)
  nameWithType: SearchIndexerAsyncClient.resetIndexerWithResponse(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Resets the change tracking state associated with an indexer.


    **Code Sample**


    Reset search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.resetIndexerWithResponse("searchIndexer")
         .subscribe(response ->
             System.out.println("The status code of the response is " + response.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> resetIndexerWithResponse(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to reset
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer(java.lang.String)
  id: runIndexer(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: runIndexer(String indexerName)
  nameWithType: SearchIndexerAsyncClient.runIndexer(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Runs an indexer on-demand.


    **Code Sample**


    Run search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.runIndexer("searchIndexer")
         .subscribe();
    ```
  syntax:
    content: public Mono<Void> runIndexer(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to run
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: a response signalling completion.
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse(java.lang.String)
  id: runIndexerWithResponse(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.SearchIndexerAsyncClient
  langs:
  - java
  name: runIndexerWithResponse(String indexerName)
  nameWithType: SearchIndexerAsyncClient.runIndexerWithResponse(String indexerName)
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse(String indexerName)
  overload: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse*
  type: Method
  package: com.azure.search.documents.indexes
  summary: >-
    Runs an indexer on-demand.


    **Code Sample**


    Run search indexer named "searchIndexer".


    ```java

    searchIndexerAsyncClient.runIndexerWithResponse("searchIndexer")
         .subscribe(response ->
             System.out.println("The status code of the response is " + response.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> runIndexerWithResponse(String indexerName)
    parameters:
    - id: indexerName
      type: java.lang.String
      description: the name of the indexer to run
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: a response signalling completion.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.SearchServiceVersion
  name: SearchServiceVersion
  nameWithType: SearchServiceVersion
  fullName: com.azure.search.documents.SearchServiceVersion
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.SearchIndexerAsyncClient*
  name: SearchIndexerAsyncClient
  nameWithType: SearchIndexerAsyncClient.SearchIndexerAsyncClient
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.SearchIndexerAsyncClient
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint*
  name: getEndpoint
  nameWithType: SearchIndexerAsyncClient.getEndpoint
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getEndpoint
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
  name: SearchIndexerDataSourceConnection
  nameWithType: SearchIndexerDataSourceConnection
  fullName: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
    name: SearchIndexerDataSourceConnection
    fullName: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection*
  name: createOrUpdateDataSourceConnection
  nameWithType: SearchIndexerAsyncClient.createOrUpdateDataSourceConnection
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnection
  package: com.azure.search.documents.indexes
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
    name: SearchIndexerDataSourceConnection
    fullName: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse*
  name: createOrUpdateDataSourceConnectionWithResponse
  nameWithType: SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateDataSourceConnectionWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection*
  name: createDataSourceConnection
  nameWithType: SearchIndexerAsyncClient.createDataSourceConnection
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnection
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse*
  name: createDataSourceConnectionWithResponse
  nameWithType: SearchIndexerAsyncClient.createDataSourceConnectionWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createDataSourceConnectionWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection*
  name: getDataSourceConnection
  nameWithType: SearchIndexerAsyncClient.getDataSourceConnection
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnection
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse*
  name: getDataSourceConnectionWithResponse
  nameWithType: SearchIndexerAsyncClient.getDataSourceConnectionWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getDataSourceConnectionWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
    name: SearchIndexerDataSourceConnection
    fullName: com.azure.search.documents.indexes.models.SearchIndexerDataSourceConnection
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections*
  name: listDataSourceConnections
  nameWithType: SearchIndexerAsyncClient.listDataSourceConnections
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnections
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<java.lang.String>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames*
  name: listDataSourceConnectionNames
  nameWithType: SearchIndexerAsyncClient.listDataSourceConnectionNames
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listDataSourceConnectionNames
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection*
  name: deleteDataSourceConnection
  nameWithType: SearchIndexerAsyncClient.deleteDataSourceConnection
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnection
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse*
  name: deleteDataSourceConnectionWithResponse
  nameWithType: SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteDataSourceConnectionWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchIndexer
  name: SearchIndexer
  nameWithType: SearchIndexer
  fullName: com.azure.search.documents.indexes.models.SearchIndexer
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexer>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexer
    name: SearchIndexer
    fullName: com.azure.search.documents.indexes.models.SearchIndexer
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer*
  name: createIndexer
  nameWithType: SearchIndexerAsyncClient.createIndexer
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexer
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexer>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexer
    name: SearchIndexer
    fullName: com.azure.search.documents.indexes.models.SearchIndexer
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse*
  name: createIndexerWithResponse
  nameWithType: SearchIndexerAsyncClient.createIndexerWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createIndexerWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer*
  name: createOrUpdateIndexer
  nameWithType: SearchIndexerAsyncClient.createOrUpdateIndexer
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexer
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse*
  name: createOrUpdateIndexerWithResponse
  nameWithType: SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateIndexerWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer*
  name: getIndexer
  nameWithType: SearchIndexerAsyncClient.getIndexer
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexer
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse*
  name: getIndexerWithResponse
  nameWithType: SearchIndexerAsyncClient.getIndexerWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndexer>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexer
    name: SearchIndexer
    fullName: com.azure.search.documents.indexes.models.SearchIndexer
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers*
  name: listIndexers
  nameWithType: SearchIndexerAsyncClient.listIndexers
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexers
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames*
  name: listIndexerNames
  nameWithType: SearchIndexerAsyncClient.listIndexerNames
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listIndexerNames
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer*
  name: deleteIndexer
  nameWithType: SearchIndexerAsyncClient.deleteIndexer
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexer
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse*
  name: deleteIndexerWithResponse
  nameWithType: SearchIndexerAsyncClient.deleteIndexerWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteIndexerWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer*
  name: resetIndexer
  nameWithType: SearchIndexerAsyncClient.resetIndexer
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexer
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse*
  name: resetIndexerWithResponse
  nameWithType: SearchIndexerAsyncClient.resetIndexerWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.resetIndexerWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer*
  name: runIndexer
  nameWithType: SearchIndexerAsyncClient.runIndexer
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexer
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse*
  name: runIndexerWithResponse
  nameWithType: SearchIndexerAsyncClient.runIndexerWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.runIndexerWithResponse
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerStatus>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerStatus
    name: SearchIndexerStatus
    fullName: com.azure.search.documents.indexes.models.SearchIndexerStatus
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus*
  name: getIndexerStatus
  nameWithType: SearchIndexerAsyncClient.getIndexerStatus
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatus
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerStatus>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerStatus
    name: SearchIndexerStatus
    fullName: com.azure.search.documents.indexes.models.SearchIndexerStatus
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse*
  name: getIndexerStatusWithResponse
  nameWithType: SearchIndexerAsyncClient.getIndexerStatusWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getIndexerStatusWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.models.SearchIndexerSkillset
  name: SearchIndexerSkillset
  nameWithType: SearchIndexerSkillset
  fullName: com.azure.search.documents.indexes.models.SearchIndexerSkillset
- uid: reactor.core.publisher.Mono<com.azure.search.documents.indexes.models.SearchIndexerSkillset>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerSkillset
    name: SearchIndexerSkillset
    fullName: com.azure.search.documents.indexes.models.SearchIndexerSkillset
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset*
  name: createSkillset
  nameWithType: SearchIndexerAsyncClient.createSkillset
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillset
  package: com.azure.search.documents.indexes
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.search.documents.indexes.models.SearchIndexerSkillset>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerSkillset
    name: SearchIndexerSkillset
    fullName: com.azure.search.documents.indexes.models.SearchIndexerSkillset
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse*
  name: createSkillsetWithResponse
  nameWithType: SearchIndexerAsyncClient.createSkillsetWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createSkillsetWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset*
  name: getSkillset
  nameWithType: SearchIndexerAsyncClient.getSkillset
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillset
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse*
  name: getSkillsetWithResponse
  nameWithType: SearchIndexerAsyncClient.getSkillsetWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.getSkillsetWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.core.http.rest.PagedFlux<com.azure.search.documents.indexes.models.SearchIndexerSkillset>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.SearchIndexerSkillset
    name: SearchIndexerSkillset
    fullName: com.azure.search.documents.indexes.models.SearchIndexerSkillset
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets*
  name: listSkillsets
  nameWithType: SearchIndexerAsyncClient.listSkillsets
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsets
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames*
  name: listSkillsetNames
  nameWithType: SearchIndexerAsyncClient.listSkillsetNames
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.listSkillsetNames
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset*
  name: createOrUpdateSkillset
  nameWithType: SearchIndexerAsyncClient.createOrUpdateSkillset
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillset
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse*
  name: createOrUpdateSkillsetWithResponse
  nameWithType: SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.createOrUpdateSkillsetWithResponse
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset*
  name: deleteSkillset
  nameWithType: SearchIndexerAsyncClient.deleteSkillset
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillset
  package: com.azure.search.documents.indexes
- uid: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse*
  name: deleteSkillsetWithResponse
  nameWithType: SearchIndexerAsyncClient.deleteSkillsetWithResponse
  fullName: com.azure.search.documents.indexes.SearchIndexerAsyncClient.deleteSkillsetWithResponse
  package: com.azure.search.documents.indexes
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.search.documents.indexes.models.SearchIndexerStatus
  name: SearchIndexerStatus
  nameWithType: SearchIndexerStatus
  fullName: com.azure.search.documents.indexes.models.SearchIndexerStatus
