### YamlMime:ManagedReference
items:
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient
  id: CertificateAsyncClient
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates
  children:
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts()
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse(java.lang.String,java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl()
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts()
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates()
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates(boolean)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates()
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates(boolean)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers()
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse(java.lang.String)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup(byte[])
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[])
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  - com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  langs:
  - java
  name: CertificateAsyncClient
  nameWithType: CertificateAsyncClient
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient
  type: Class
  package: com.azure.security.keyvault.certificates
  summary: >-
    The CertificateAsyncClient provides asynchronous methods to manage <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certifcates</xref> in the Azure Key Vault. The client supports creating, retrieving, updating, merging, deleting, purging, backing up, restoring and listing the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificates</xref>. The client also supports listing <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> for a soft-delete enabled Azure Key Vault.


    The client further allows creating, retrieving, updating, deleting and listing the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuers</xref>. The client also supports creating, listing and deleting <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref>


    **Samples to construct the async client**


    ```java

    CertificateAsyncClient certificateAsyncClient = new CertificateClientBuilder()
         .credential(new DefaultAzureCredentialBuilder().build())
         .vaultUrl("https://myvault.vault.azure.net/")
         .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
         .buildAsyncClient();
    ```
  syntax:
    content: public final class CertificateAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.CertificateAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.certificates.CertificateServiceVersion)
  id: CertificateAsyncClient(java.net.URL,com.azure.core.http.HttpPipeline,com.azure.security.keyvault.certificates.CertificateServiceVersion)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: CertificateAsyncClient(URL vaultUrl, HttpPipeline pipeline, CertificateServiceVersion version)
  nameWithType: CertificateAsyncClient.CertificateAsyncClient(URL vaultUrl, HttpPipeline pipeline, CertificateServiceVersion version)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.CertificateAsyncClient(URL vaultUrl, HttpPipeline pipeline, CertificateServiceVersion version)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.CertificateAsyncClient*
  type: Constructor
  package: com.azure.security.keyvault.certificates
  summary: Creates a CertificateAsyncClient that uses `pipeline` to service requests
  syntax:
    content: " CertificateAsyncClient(URL vaultUrl, HttpPipeline pipeline, CertificateServiceVersion version)"
    parameters:
    - id: vaultUrl
      type: java.net.URL
      description: URL for the Azure KeyVault service.
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: HttpPipeline that the HTTP requests and responses flow through.
    - id: version
      type: com.azure.security.keyvault.certificates.CertificateServiceVersion
      description: <xref uid="com.azure.security.keyvault.certificates.CertificateServiceVersion" data-throw-if-not-resolved="false">CertificateServiceVersion</xref> of the service to be used when making requests.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate(java.lang.String)
  id: backupCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: backupCertificate(String certificateName)
  nameWithType: CertificateAsyncClient.backupCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.


    **Code Samples**


    Backs up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.


    ```java

    certificateAsyncClient.backupCertificate("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateBackupResponse ->
             System.out.printf("Certificate's Backup Byte array's length %s %n", certificateBackupResponse.length));
    ```
  syntax:
    content: public Mono<byte[]> backupCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: reactor.core.publisher.Mono<byte[]>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the backed up certificate blob.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse(java.lang.String)
  id: backupCertificateWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: backupCertificateWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.backupCertificateWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Requests that a backup of the specified certificate be downloaded to the client. All versions of the certificate will be downloaded. This operation requires the certificates/backup permission.


    **Code Samples**


    Backs up the certificate from the key vault. Prints out the length of the certificate's backup byte array returned in the response.


    ```java

    certificateAsyncClient.backupCertificateWithResponse("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateBackupResponse ->
             System.out.printf("Certificate's Backup Byte array's length %s %n",
                 certificateBackupResponse.getValue().length));
    ```
  syntax:
    content: public Mono<Response<byte[]>> backupCertificateWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the backed up certificate blob.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  id: beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: beginCreateCertificate(String certificateName, CertificatePolicy policy)
  nameWithType: CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.


    **Code Samples**


    Create certificate is a long running operation. The <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">poller</xref> allows users to automatically poll on the create certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.


    ```java

    CertificatePolicy certPolicy = new CertificatePolicy("Self", "CN=SelfSignedJavaPkcs12");
     certificateAsyncClient.beginCreateCertificate("certificateName", certPolicy)
         .subscribe(pollResponse -> {
             System.out.println("---------------------------------------------------------------------------------");
             System.out.println(pollResponse.getStatus());
             System.out.println(pollResponse.getValue().getStatus());
             System.out.println(pollResponse.getValue().getStatusDetails());
         });
    ```
  syntax:
    content: public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to be created.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The policy of the certificate to be created.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polling on the create certificate operation status.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)
  id: beginCreateCertificate(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy,java.lang.Boolean,java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
  nameWithType: CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates a new certificate. If this is the first version, the certificate resource is created. This operation requires the certificates/create permission.


    **Code Samples**


    Create certificate is a long running operation. The <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">poller</xref> allows users to automatically poll on the create certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.


    ```java

    CertificatePolicy policy = new CertificatePolicy("Self", "CN=SelfSignedJavaPkcs12");
     Map<String, String> tags = new HashMap<>();
     tags.put("foo", "bar");
     certificateAsyncClient.beginCreateCertificate("certificateName", policy, true, tags)
         .subscribe(pollResponse -> {
             System.out.println("---------------------------------------------------------------------------------");
             System.out.println(pollResponse.getStatus());
             System.out.println(pollResponse.getValue().getStatus());
             System.out.println(pollResponse.getValue().getStatusDetails());
         });
    ```
  syntax:
    content: public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> beginCreateCertificate(String certificateName, CertificatePolicy policy, Boolean isEnabled, Map<String,String> tags)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to be created.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The policy of the certificate to be created.
    - id: isEnabled
      type: java.lang.Boolean
      description: The enabled status for the certificate.
    - id: tags
      type: java.util.Map<java.lang.String,java.lang.String>
      description: The application specific metadata to set.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polling on the create certificate operation status.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate(java.lang.String)
  id: beginDeleteCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: beginDeleteCertificate(String certificateName)
  nameWithType: CertificateAsyncClient.beginDeleteCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes a certificate from a specified key vault. All the versions of the certificate along with its associated policy get deleted. If soft-delete is enabled on the key vault then the certificate is placed in the deleted state and requires to be purged for permanent deletion else the certificate is permanently deleted. The delete operation applies to any certificate stored in Azure Key Vault but it cannot be applied to an individual version of a certificate. This operation requires the certificates/delete permission.


    **Code Samples**


    Deletes the certificate in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.


    ```java

    certificateAsyncClient.beginDeleteCertificate("certificateName")
         .subscribe(pollResponse -> {
             System.out.println("Delete Status: " + pollResponse.getStatus().toString());
             System.out.println("Delete Certificate Name: " + pollResponse.getValue().getName());
             System.out.println("Certificate Delete Date: " + pollResponse.getValue().getDeletedOn().toString());
         });
    ```
  syntax:
    content: public PollerFlux<DeletedCertificate,Void> beginDeleteCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to be deleted.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> to poll on the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate(java.lang.String)
  id: beginRecoverDeletedCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: beginRecoverDeletedCertificate(String certificateName)
  nameWithType: CertificateAsyncClient.beginRecoverDeletedCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Recovers the deleted certificate back to its current version under /certificates and can only be performed on a soft-delete enabled vault. The RecoverDeletedCertificate operation performs the reversal of the Delete operation and must be issued during the retention interval (available in the deleted certificate's attributes). This operation requires the certificates/recover permission.


    **Code Samples**


    Recovers the deleted certificate from the key vault enabled for soft-delete. Prints out the recovered certificate details when a response has been received.


    ```java

    certificateAsyncClient.beginRecoverDeletedCertificate("deletedCertificateName")
         .subscribe(pollResponse -> {
             System.out.println("Recovery Status: " + pollResponse.getStatus().toString());
             System.out.println("Recover Certificate Name: " + pollResponse.getValue().getName());
             System.out.println("Recover Certificate Id: " + pollResponse.getValue().getId());
         });
    ```
  syntax:
    content: public PollerFlux<KeyVaultCertificateWithPolicy,Void> beginRecoverDeletedCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate to be recovered.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> to poll on the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">recovered certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation(java.lang.String)
  id: cancelCertificateOperation(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: cancelCertificateOperation(String certificateName)
  nameWithType: CertificateAsyncClient.cancelCertificateOperation(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.


    **Code Samples**


    Triggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Prints out the updated certificate operation details when a response has been received.


    ```java

    certificateAsyncClient.cancelCertificateOperation("certificateName")
         .subscribe(certificateOperation -> System.out.printf("Certificate operation status %s",
             certificateOperation.getStatus()));
    ```
  syntax:
    content: public Mono<CertificateOperation> cancelCertificateOperation(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate which is in the process of being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateOperation>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">cancelled certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse(java.lang.String)
  id: cancelCertificateOperationWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: cancelCertificateOperationWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.cancelCertificateOperationWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Cancels a certificate creation operation that is already in progress. This operation requires the `certificates/update` permission.


    **Code Samples**


    Triggers certificate creation and then cancels the certificate creation operation in the Azure Key Vault. Prints out the updated certificate operation details when a response has been received.


    ```java

    certificateAsyncClient.cancelCertificateOperationWithResponse("certificateName")
         .subscribe(certificateOperationResponse -> System.out.printf("Certificate operation status %s",
             certificateOperationResponse.getValue().getStatus()));
    ```
  syntax:
    content: public Mono<Response<CertificateOperation>> cancelCertificateOperationWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate which is in the process of being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">cancelled certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  id: createIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: createIssuer(CertificateIssuer issuer)
  nameWithType: CertificateAsyncClient.createIssuer(CertificateIssuer issuer)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer(CertificateIssuer issuer)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Creates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.


    ```java

    CertificateIssuer issuer = new CertificateIssuer("issuerName", "providerName")
         .setAccountId("keyvaultuser")
         .setPassword("temp2");
     certificateAsyncClient.createIssuer(issuer)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuerResponse -> {
             System.out.printf("Issuer created with %s and %s", issuerResponse.getName(),
                 issuerResponse.getProvider());
         });
    ```
  syntax:
    content: public Mono<CertificateIssuer> createIssuer(CertificateIssuer issuer)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The configuration of the certificate issuer to be created.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the created <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  id: createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: createIssuerWithResponse(CertificateIssuer issuer)
  nameWithType: CertificateAsyncClient.createIssuerWithResponse(CertificateIssuer issuer)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(CertificateIssuer issuer)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Creates a new certificate issuer in the key vault. Prints out the created certificate issuer details when a response has been received.


    ```java

    CertificateIssuer newIssuer = new CertificateIssuer("issuerName", "providerName")
         .setAccountId("keyvaultuser")
         .setPassword("temp2");
     certificateAsyncClient.createIssuerWithResponse(newIssuer)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuerResponse -> {
             System.out.printf("Issuer created with %s and %s", issuerResponse.getValue().getName(),
                 issuerResponse.getValue().getProvider());
         });
    ```
  syntax:
    content: public Mono<Response<CertificateIssuer>> createIssuerWithResponse(CertificateIssuer issuer)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: >-
        The configuration of the certificate issuer to be created. Use
         <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer.CertificateIssuer(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateIssuer#CertificateIssuer(String, String)</xref> to initialize the issuer object
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing  a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the created <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation(java.lang.String)
  id: deleteCertificateOperation(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: deleteCertificateOperation(String certificateName)
  nameWithType: CertificateAsyncClient.deleteCertificateOperation(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.


    **Code Samples**


    Triggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Prints out the deleted certificate operation details when a response has been received.


    ```java

    certificateAsyncClient.deleteCertificateOperation("certificateName")
         .subscribe(certificateOperation -> System.out.printf("Deleted Certificate operation last status %s",
             certificateOperation.getStatus()));
    ```
  syntax:
    content: public Mono<CertificateOperation> deleteCertificateOperation(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate which is in the process of being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateOperation>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">deleted certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse(java.lang.String)
  id: deleteCertificateOperationWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: deleteCertificateOperationWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.deleteCertificateOperationWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the creation operation for the specified certificate that is in the process of being created. The certificate is no longer created. This operation requires the `certificates/update permission`.


    **Code Samples**


    Triggers certificate creation and then deletes the certificate creation operation in the Azure Key Vault. Prints out the deleted certificate operation details when a response has been received.


    ```java

    certificateAsyncClient.deleteCertificateOperationWithResponse("certificateName")
         .subscribe(certificateOperationResponse -> System.out.printf("Deleted Certificate operation's last"
             + " status %s", certificateOperationResponse.getValue().getStatus()));
    ```
  syntax:
    content: public Mono<Response<CertificateOperation>> deleteCertificateOperationWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate which is in the process of being created.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">deleted certificate operation</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts()
  id: deleteContacts()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: deleteContacts()
  nameWithType: CertificateAsyncClient.deleteContacts()
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts()
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the certificate contacts in the key vault. This operation requires the `certificates/managecontacts` permission.


    **Code Samples**


    Deletes the certificate contacts in the Azure Key Vault. Prints out the deleted contacts details.


    ```java

    certificateAsyncClient.deleteContacts().subscribe(contact ->
         System.out.printf("Deleted Contact name %s and email %s", contact.getName(), contact.getEmail())
     );
    ```
  syntax:
    content: public PagedFlux<CertificateContact> deleteContacts()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">deleted certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer(java.lang.String)
  id: deleteIssuer(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: deleteIssuer(String issuerName)
  nameWithType: CertificateAsyncClient.deleteIssuer(String issuerName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer(String issuerName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.


    **Code Samples**


    Deletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.


    ```java

    certificateAsyncClient.deleteIssuer("issuerName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedIssuerResponse ->
             System.out.printf("Deleted issuer with name %s %n", deletedIssuerResponse.getName()));
    ```
  syntax:
    content: public Mono<CertificateIssuer> deleteIssuer(String issuerName)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to be deleted.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">deleted issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse(java.lang.String)
  id: deleteIssuerWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: deleteIssuerWithResponse(String issuerName)
  nameWithType: CertificateAsyncClient.deleteIssuerWithResponse(String issuerName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse(String issuerName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Deletes the specified certificate issuer. The DeleteCertificateIssuer operation permanently removes the specified certificate issuer from the key vault. This operation requires the `certificates/manageissuers/deleteissuers permission`.


    **Code Samples**


    Deletes the certificate issuer in the Azure Key Vault. Prints out the deleted certificate details when a response has been received.


    ```java

    certificateAsyncClient.deleteIssuerWithResponse("issuerName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedIssuerResponse ->
             System.out.printf("Deleted issuer with name %s %n", deletedIssuerResponse.getValue().getName()));
    ```
  syntax:
    content: public Mono<Response<CertificateIssuer>> deleteIssuerWithResponse(String issuerName)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to be deleted.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">deleted issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate(java.lang.String)
  id: getCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificate(String certificateName)
  nameWithType: CertificateAsyncClient.getCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    certificateAsyncClient.getCertificate("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateResponse ->
             System.out.printf("Certificate is returned with name %s and secretId %s %n",
                 certificateResponse.getProperties().getName(), certificateResponse.getSecretId()));
    ```
  syntax:
    content: public Mono<KeyVaultCertificateWithPolicy> getCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(java.lang.String)
  id: getCertificateOperation(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificateOperation(String certificateName)
  nameWithType: CertificateAsyncClient.getCertificateOperation(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets a pending <xref uid="com.azure.security.keyvault.certificates.models.CertificateOperation" data-throw-if-not-resolved="false">CertificateOperation</xref> from the key vault. This operation requires the certificates/get permission.


    **Code Samples**


    Get a pending certificate operation. The <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">poller</xref> allows users to automatically poll on the certificate operation status. It is possible to monitor each intermediate poll response during the poll operation.


    ```java

    certificateAsyncClient.getCertificateOperation("certificateName")
         .subscribe(pollResponse -> {
             System.out.println("---------------------------------------------------------------------------------");
             System.out.println(pollResponse.getStatus());
             System.out.println(pollResponse.getValue().getStatus());
             System.out.println(pollResponse.getValue().getStatusDetails());
         });
    ```
  syntax:
    content: public PollerFlux<CertificateOperation,KeyVaultCertificateWithPolicy> getCertificateOperation(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.util.polling.PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polling on the certificate operation status.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy(java.lang.String)
  id: getCertificatePolicy(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificatePolicy(String certificateName)
  nameWithType: CertificateAsyncClient.getCertificatePolicy(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.


    **Code Samples**


    Gets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.


    ```java

    certificateAsyncClient.getCertificatePolicy("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(policy ->
             System.out.printf("Certificate policy is returned with issuer name %s and subject name %s %n",
                 policy.getIssuerName(), policy.getSubject()));
    ```
  syntax:
    content: public Mono<CertificatePolicy> getCertificatePolicy(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be retrieved, cannot be null
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificatePolicy>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse(java.lang.String)
  id: getCertificatePolicyWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificatePolicyWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.getCertificatePolicyWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the policy of the specified certificate in the key vault. This operation requires the `certificates/get` permission.


    **Code Samples**


    Gets the policy of a certirifcate in the key vault. Prints out the returned certificate policy details when a response has been received.


    ```java

    certificateAsyncClient.getCertificatePolicyWithResponse("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(policyResponse ->
             System.out.printf("Certificate policy is returned with issuer name %s and subject name %s %n",
                 policyResponse.getValue().getIssuerName(), policyResponse.getValue().getSubject()));
    ```
  syntax:
    content: public Mono<Response<CertificatePolicy>> getCertificatePolicyWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be retrieved, cannot be null
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)
  id: getCertificateVersion(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificateVersion(String certificateName, String version)
  nameWithType: CertificateAsyncClient.getCertificateVersion(String certificateName, String version)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(String certificateName, String version)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the specified version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    certificateAsyncClient.getCertificateVersion("certificateName", certificateVersion)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateWithVersion ->
             System.out.printf("Certificate is returned with name %s and secretId %s %n",
                 certificateWithVersion.getProperties().getName(), certificateWithVersion.getSecretId()));
    ```
  syntax:
    content: public Mono<KeyVaultCertificate> getCertificateVersion(String certificateName, String version)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    - id: version
      type: java.lang.String
      description: The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse(java.lang.String,java.lang.String)
  id: getCertificateVersionWithResponse(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificateVersionWithResponse(String certificateName, String version)
  nameWithType: CertificateAsyncClient.getCertificateVersionWithResponse(String certificateName, String version)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse(String certificateName, String version)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    String certificateVersion = "6A385B124DEF4096AF1361A85B16C204";
     certificateAsyncClient.getCertificateVersionWithResponse("certificateName", certificateVersion)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateWithVersion ->
             System.out.printf("Certificate is returned with name %s and secretId %s %n",
                 certificateWithVersion.getValue().getProperties().getName(),
                 certificateWithVersion.getValue().getSecretId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultCertificate>> getCertificateVersionWithResponse(String certificateName, String version)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    - id: version
      type: java.lang.String
      description: The version of the certificate to retrieve. If this is an empty String or null then latest version of the certificate is retrieved.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse(java.lang.String)
  id: getCertificateWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getCertificateWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.getCertificateWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Gets information about the latest version of the specified certificate. This operation requires the certificates/get permission.


    **Code Samples**


    Gets a specific version of the certificate in the key vault. Prints out the returned certificate details when a response has been received.


    ```java

    certificateAsyncClient.getCertificateWithResponse("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateResponse ->
             System.out.printf("Certificate is returned with name %s and secretId %s %n",
                 certificateResponse.getValue().getProperties().getName(),
                 certificateResponse.getValue().getSecretId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultCertificateWithPolicy>> getCertificateWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate(java.lang.String)
  id: getDeletedCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getDeletedCertificate(String certificateName)
  nameWithType: CertificateAsyncClient.getDeletedCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.


    **Code Samples**


    Gets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.


    ```java

    certificateAsyncClient.getDeletedCertificate("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedSecretResponse ->
             System.out.printf("Deleted Certificate's Recovery Id %s %n", deletedSecretResponse.getRecoveryId()));
    ```
  syntax:
    content: public Mono<DeletedCertificate> getDeletedCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.DeletedCertificate>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse(java.lang.String)
  id: getDeletedCertificateWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getDeletedCertificateWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.getDeletedCertificateWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves information about the specified deleted certificate. The GetDeletedCertificate operation is applicable for soft-delete enabled vaults and additionally retrieves deleted certificate's attributes, such as retention interval, scheduled permanent deletion and the current deletion recovery level. This operation requires the certificates/get permission.


    **Code Samples**


    Gets the deleted certificate from the key vault enabled for soft-delete. Prints out the deleted certificate details when a response has been received.


    ```java

    certificateAsyncClient.getDeletedCertificateWithResponse("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedSecretResponse ->
             System.out.printf("Deleted Certificate's Recovery Id %s %n",
                 deletedSecretResponse.getValue().getRecoveryId()));
    ```
  syntax:
    content: public Mono<Response<DeletedCertificate>> getDeletedCertificateWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(java.lang.String)
  id: getIssuer(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getIssuer(String issuerName)
  nameWithType: CertificateAsyncClient.getIssuer(String issuerName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(String issuerName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.


    **Code Samples**


    Gets the specified certificate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    certificateAsyncClient.getIssuer("issuerName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuer -> {
             System.out.printf("Issuer returned with %s and %s", issuer.getName(),
                 issuer.getProvider());
         });
    ```
  syntax:
    content: public Mono<CertificateIssuer> getIssuer(String issuerName)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate to retrieve, cannot be null
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse(java.lang.String)
  id: getIssuerWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getIssuerWithResponse(String issuerName)
  nameWithType: CertificateAsyncClient.getIssuerWithResponse(String issuerName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse(String issuerName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Retrieves the specified certificate issuer from the key vault. This operation requires the certificates/manageissuers/getissuers permission.


    **Code Samples**


    Gets the specificed certifcate issuer in the key vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    certificateAsyncClient.getIssuerWithResponse("issuerName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuerResponse -> {
             System.out.printf("Issuer returned with %s and %s", issuerResponse.getValue().getName(),
                 issuerResponse.getValue().getProvider());
         });
    ```
  syntax:
    content: public Mono<Response<CertificateIssuer>> getIssuerWithResponse(String issuerName)
    parameters:
    - id: issuerName
      type: java.lang.String
      description: The name of the certificate issuer to retrieve, cannot be null
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the requested <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl()
  id: getVaultUrl()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: getVaultUrl()
  nameWithType: CertificateAsyncClient.getVaultUrl()
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl()
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: Get the vault endpoint url to which service requests are sent to.
  syntax:
    content: public String getVaultUrl()
    return:
      type: java.lang.String
      description: the vault endpoint url
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  id: importCertificate(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: importCertificate(ImportCertificateOptions importCertificateOptions)
  nameWithType: CertificateAsyncClient.importCertificate(ImportCertificateOptions importCertificateOptions)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate(ImportCertificateOptions importCertificateOptions)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.


    **Code Samples**


    Imports a certificate into the key vault.


    ```java

    byte[] certificateToImport = new byte[100];
     ImportCertificateOptions config =
         new ImportCertificateOptions("certificateName", certificateToImport).setEnabled(false);
     certificateAsyncClient.importCertificate(config)
         .subscribe(certificate -> System.out.printf("Received Certificate with name %s and key id %s",
             certificate.getProperties().getName(), certificate.getKeyId()));
    ```
  syntax:
    content: public Mono<KeyVaultCertificateWithPolicy> importCertificate(ImportCertificateOptions importCertificateOptions)
    parameters:
    - id: importCertificateOptions
      type: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
      description: The details of the certificate to import to the key vault
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">imported certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  id: importCertificateWithResponse(com.azure.security.keyvault.certificates.models.ImportCertificateOptions)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)
  nameWithType: CertificateAsyncClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Imports a pre-existing certificate to the key vault. The specified certificate must be in PFX or PEM format, and must contain the private key as well as the x509 certificates. This operation requires the `certificates/import` permission.


    **Code Samples**


    Imports a certificate into the key vault.


    ```java

    byte[] certToImport = new byte[100];
     ImportCertificateOptions importCertificateOptions  =
         new ImportCertificateOptions("certificateName", certToImport).setEnabled(false);
     certificateAsyncClient.importCertificateWithResponse(importCertificateOptions)
         .subscribe(certificateResponse -> System.out.printf("Received Certificate with name %s and key id %s",
             certificateResponse.getValue().getProperties().getName(), certificateResponse.getValue().getKeyId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultCertificateWithPolicy>> importCertificateWithResponse(ImportCertificateOptions importCertificateOptions)
    parameters:
    - id: importCertificateOptions
      type: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
      description: The details of the certificate to import to the key vault
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy" data-throw-if-not-resolved="false">imported certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts()
  id: listContacts()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listContacts()
  nameWithType: CertificateAsyncClient.listContacts()
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts()
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the certificate contacts in the key vault. This operation requires the certificates/managecontacts permission.


    **Code Samples**


    Lists the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.


    ```java

    certificateAsyncClient.listContacts().subscribe(contact ->
         System.out.printf("Contact name %s and email %s", contact.getName(), contact.getEmail())
     );
    ```
  syntax:
    content: public PagedFlux<CertificateContact> listContacts()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates()
  id: listDeletedCertificates()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listDeletedCertificates()
  nameWithType: CertificateAsyncClient.listDeletedCertificates()
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates()
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.


    **Code Samples**


    Lists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.


    ```java

    certificateAsyncClient.listDeletedCertificates()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedCertificateResponse ->  System.out.printf("Deleted Certificate's Recovery Id %s %n",
             deletedCertificateResponse.getRecoveryId()));
    ```
  syntax:
    content: public PagedFlux<DeletedCertificate> listDeletedCertificates()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.DeletedCertificate>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates(boolean)
  id: listDeletedCertificates(boolean)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listDeletedCertificates(boolean includePending)
  nameWithType: CertificateAsyncClient.listDeletedCertificates(boolean includePending)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates(boolean includePending)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Lists the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the key vault currently available for recovery. This operation includes deletion-specific information and is applicable for vaults enabled for soft-delete. This operation requires the `certificates/get/list` permission.


    **Code Samples**


    Lists the deleted certificates in the key vault. Prints out the recovery id of each deleted certificate when a response has been received.


    ```java

    certificateAsyncClient.listDeletedCertificates()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(deletedCertificateResponse ->  System.out.printf("Deleted Certificate's Recovery Id %s %n",
             deletedCertificateResponse.getRecoveryId()));
    ```
  syntax:
    content: public PagedFlux<DeletedCertificate> listDeletedCertificates(boolean includePending)
    parameters:
    - id: includePending
      type: boolean
      description: indicate if pending deleted certificates should be included in the results.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.DeletedCertificate>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.DeletedCertificate" data-throw-if-not-resolved="false">deleted certificates</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(java.lang.String)
  id: listPropertiesOfCertificateVersions(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listPropertiesOfCertificateVersions(String certificateName)
  nameWithType: CertificateAsyncClient.listPropertiesOfCertificateVersions(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List all versions of the specified certificate. The individual certificate response in the flux is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in the response. This operation requires the certificates/list permission.


    It is possible to get the certificates with properties excluding the policy for all the versions from this information. Convert the <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> to <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> using <xref uid="com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateAsyncClient#getCertificateVersion(String, String)</xref> within <xref uid="" data-throw-if-not-resolved="false">Flux#flatMap(Function)</xref>.


    ```java

    certificateAsyncClient.listPropertiesOfCertificateVersions("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificate -> certificateAsyncClient.getCertificateVersion(certificate.getName(),
             certificate.getVersion())
             .subscribe(certificateResponse -> System.out.printf("Received certificate with name %s and key id %s",
                 certificateResponse.getProperties().getName(), certificateResponse.getKeyId())));
    ```
  syntax:
    content: public PagedFlux<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> of all the versions of the specified certificate in the vault. Flux is empty if certificate with <code>certificateName</code> does not exist in key vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates()
  id: listPropertiesOfCertificates()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listPropertiesOfCertificates()
  nameWithType: CertificateAsyncClient.listPropertiesOfCertificates()
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates()
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the flux is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.


    It is possible to get certificates with all the properties excluding the policy from this information. Convert the <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> to <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> using <xref uid="com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateAsyncClient#getCertificateVersion(String, String)</xref> within <xref uid="" data-throw-if-not-resolved="false">Flux#flatMap(Function)</xref>.


    ```java

    certificateAsyncClient.listPropertiesOfCertificates()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificate -> certificateAsyncClient.getCertificateVersion(certificate.getName(),
             certificate.getVersion())
             .subscribe(certificateResponse -> System.out.printf("Received certificate with name %s and key id %s",
                 certificateResponse.getName(), certificateResponse.getKeyId())));
    ```
  syntax:
    content: public PagedFlux<CertificateProperties> listPropertiesOfCertificates()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> for all the certificates in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates(boolean)
  id: listPropertiesOfCertificates(boolean)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listPropertiesOfCertificates(boolean includePending)
  nameWithType: CertificateAsyncClient.listPropertiesOfCertificates(boolean includePending)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates(boolean includePending)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List certificates in a the key vault. Retrieves the set of certificates resources in the key vault and the individual certificate response in the flux is represented by <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy and individual certificate versions are not listed in the response. This operation requires the certificates/list permission.


    It is possible to get certificates with all the properties excluding the policy from this information. Convert the <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> to <xref uid="" data-throw-if-not-resolved="false">Flux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> using <xref uid="com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">CertificateAsyncClient#getCertificateVersion(String, String)</xref> within <xref uid="" data-throw-if-not-resolved="false">Flux#flatMap(Function)</xref>.


    ```java

    certificateAsyncClient.listPropertiesOfCertificates()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificate -> certificateAsyncClient.getCertificateVersion(certificate.getName(),
             certificate.getVersion())
             .subscribe(certificateResponse -> System.out.printf("Received certificate with name %s and key id %s",
                 certificateResponse.getName(), certificateResponse.getKeyId())));
    ```
  syntax:
    content: public PagedFlux<CertificateProperties> listPropertiesOfCertificates(boolean includePending)
    parameters:
    - id: includePending
      type: boolean
      description: indicate if pending certificates should be included in the results.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> for all the certificates in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers()
  id: listPropertiesOfIssuers()
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: listPropertiesOfIssuers()
  nameWithType: CertificateAsyncClient.listPropertiesOfIssuers()
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers()
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    List all the certificate issuers resources in the key vault. The individual certificate issuer response in the flux is represented by <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">IssuerProperties</xref> as only the certificate issuer identifier and provider are provided in the response. This operation requires the `certificates/manageissuers/getissuers` permission.


    It is possible to get the certificate issuer with all of its properties from this information. Convert the <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">issuerProperties</xref> to <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> using <xref uid="com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer(java.lang.String)" data-throw-if-not-resolved="false">CertificateAsyncClient#getIssuer(String)</xref>


    ```java

    certificateAsyncClient.listPropertiesOfIssuers()
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuerProperties -> certificateAsyncClient.getIssuer(issuerProperties.getName())
             .subscribe(issuerResponse -> System.out.printf("Received issuer with name %s and provider %s",
                 issuerResponse.getName(), issuerResponse.getProvider())));
    ```
  syntax:
    content: public PagedFlux<IssuerProperties> listPropertiesOfIssuers()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.IssuerProperties>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.IssuerProperties" data-throw-if-not-resolved="false">certificate issuers</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  id: mergeCertificate(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
  nameWithType: CertificateAsyncClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.


    **Code Samples**


    Merges a certificate with a kay pair available in the service.


    ```java

    List<byte[]> x509CertificatesToMerge = new ArrayList<>();
     MergeCertificateOptions config =
         new MergeCertificateOptions("certificateName", x509CertificatesToMerge).setEnabled(false);
     certificateAsyncClient.mergeCertificate(config)
         .subscribe(certificate -> System.out.printf("Received Certificate with name %s and key id %s",
             certificate.getProperties().getName(), certificate.getKeyId()));
    ```
  syntax:
    content: public Mono<KeyVaultCertificate> mergeCertificate(MergeCertificateOptions mergeCertificateOptions)
    parameters:
    - id: mergeCertificateOptions
      type: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
      description: the merge certificate options holding the x509 certificates.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the merged certificate.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  id: mergeCertificateWithResponse(com.azure.security.keyvault.certificates.models.MergeCertificateOptions)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)
  nameWithType: CertificateAsyncClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Merges a certificate or a certificate chain with a key pair currently available in the service. This operation requires the `certificates/create` permission.


    **Code Samples**


    Merges a certificate with a kay pair available in the service.


    ```java

    List<byte[]> x509CertsToMerge = new ArrayList<>();
     MergeCertificateOptions mergeConfig =
         new MergeCertificateOptions("certificateName", x509CertsToMerge).setEnabled(false);
     certificateAsyncClient.mergeCertificateWithResponse(mergeConfig)
         .subscribe(certificateResponse -> System.out.printf("Received Certificate with name %s and key id %s",
             certificateResponse.getValue().getProperties().getName(), certificateResponse.getValue().getKeyId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultCertificateWithPolicy>> mergeCertificateWithResponse(MergeCertificateOptions mergeCertificateOptions)
    parameters:
    - id: mergeCertificateOptions
      type: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
      description: the merge certificate options holding the x509 certificates.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the merged certificate.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate(java.lang.String)
  id: purgeDeletedCertificate(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: purgeDeletedCertificate(String certificateName)
  nameWithType: CertificateAsyncClient.purgeDeletedCertificate(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.


    **Code Samples**


    Purges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.


    ```java

    certificateAsyncClient.purgeDeletedCertificateWithResponse("deletedCertificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(purgeResponse ->
             System.out.printf("Purge Status response %d %n", purgeResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Void> purgeDeletedCertificate(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: An empty <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse(java.lang.String)
  id: purgeDeletedCertificateWithResponse(java.lang.String)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: purgeDeletedCertificateWithResponse(String certificateName)
  nameWithType: CertificateAsyncClient.purgeDeletedCertificateWithResponse(String certificateName)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse(String certificateName)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Permanently deletes the specified deleted certificate without possibility for recovery. The Purge Deleted Certificate operation is applicable for soft-delete enabled vaults and is not available if the recovery level does not specify 'Purgeable'. This operation requires the certificate/purge permission.


    **Code Samples**


    Purges the deleted certificate from the key vault enabled for soft-delete. Prints out the status code from the server response when a response has been received.


    ```java

    certificateAsyncClient.purgeDeletedCertificateWithResponse("deletedCertificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(purgeResponse ->
             System.out.printf("Purge Status response %d %n", purgeResponse.getStatusCode()));
    ```
  syntax:
    content: public Mono<Response<Void>> purgeDeletedCertificateWithResponse(String certificateName)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the deleted certificate.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a Void Response}.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup(byte[])
  id: restoreCertificateBackup(byte[])
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: restoreCertificateBackup(byte[] backup)
  nameWithType: CertificateAsyncClient.restoreCertificateBackup(byte[] backup)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup(byte[] backup)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.


    **Code Samples**


    Restores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.


    ```java

    byte[] certificateBackupByteArray = {};
     certificateAsyncClient.restoreCertificateBackup(certificateBackupByteArray)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateResponse -> System.out.printf("Restored Certificate with name %s and key id %s %n",
             certificateResponse.getProperties().getName(), certificateResponse.getKeyId()));
    ```
  syntax:
    content: public Mono<KeyVaultCertificateWithPolicy> restoreCertificateBackup(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the certificate.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">restored certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[])
  id: restoreCertificateBackupWithResponse(byte[])
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: restoreCertificateBackupWithResponse(byte[] backup)
  nameWithType: CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[] backup)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse(byte[] backup)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Restores a backed up certificate to the vault. All the versions of the certificate are restored to the vault. This operation requires the certificates/restore permission.


    **Code Samples**


    Restores the certificate in the key vault from its backup. Prints out the restored certificate details when a response has been received.


    ```java

    byte[] certificateBackup = {};
     certificateAsyncClient.restoreCertificateBackup(certificateBackup)
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateResponse -> System.out.printf("Restored Certificate with name %s and key id %s %n",
             certificateResponse.getProperties().getName(), certificateResponse.getKeyId()));
    ```
  syntax:
    content: public Mono<Response<KeyVaultCertificateWithPolicy>> restoreCertificateBackupWithResponse(byte[] backup)
    parameters:
    - id: backup
      type: byte[]
      description: The backup blob associated with the certificate.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.KeyVaultCertificate" data-throw-if-not-resolved="false">restored certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)
  id: setContacts(java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: setContacts(List<CertificateContact> contacts)
  nameWithType: CertificateAsyncClient.setContacts(List<CertificateContact> contacts)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts(List<CertificateContact> contacts)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Sets the certificate contacts on the key vault. This operation requires the `certificates/managecontacts` permission.


    The <xref uid="com.azure.security.keyvault.certificates.models.LifetimeAction" data-throw-if-not-resolved="false">LifetimeAction</xref> of type <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicyAction.EMAIL_CONTACTS" data-throw-if-not-resolved="false">CertificatePolicyAction#EMAIL_CONTACTS</xref> set on a <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">CertificatePolicy</xref> emails the contacts set on the vault when triggered.


    **Code Samples**


    Sets the certificate contacts in the Azure Key Vault. Prints out the returned contacts details.


    ```java

    CertificateContact contactToAdd = new CertificateContact().setName("user").setEmail("useremail{@literal @}exmaple.com");
     certificateAsyncClient.setContacts(Arrays.asList(contactToAdd)).subscribe(contact ->
         System.out.printf("Contact name %s and email %s", contact.getName(), contact.getEmail())
     );
    ```
  syntax:
    content: public PagedFlux<CertificateContact> setContacts(List<CertificateContact> contacts)
    parameters:
    - id: contacts
      type: java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: The list of contacts to set on the vault.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateContact>
      description: A <xref uid="com.azure.core.http.rest.PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing all of the <xref uid="com.azure.security.keyvault.certificates.models.CertificateContact" data-throw-if-not-resolved="false">certificate contacts</xref> in the vault.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  id: updateCertificatePolicy(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: updateCertificatePolicy(String certificateName, CertificatePolicy policy)
  nameWithType: CertificateAsyncClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy(String certificateName, CertificatePolicy policy)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.


    **Code Samples**


    Gets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.


    ```java

    certificateAsyncClient.getCertificatePolicy("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificatePolicyResponseValue -> {
             CertificatePolicy certificatePolicy = certificatePolicyResponseValue;
             // Update transparency
             certificatePolicy.setCertificateTransparent(true);
             certificateAsyncClient.updateCertificatePolicy("certificateName", certificatePolicy)
                 .subscribe(updatedPolicy ->
                     System.out.printf("Certificate policy's updated transparency status %s %n",
                         updatedPolicy.isCertificateTransparent()));
         });
    ```
  syntax:
    content: public Mono<CertificatePolicy> updateCertificatePolicy(String certificateName, CertificatePolicy policy)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be updated.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The certificate policy to be updated.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificatePolicy>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the updated <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  id: updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  nameWithType: CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes that are not specified in the request are left unchanged. This operation requires the `certificates/update` permission.


    **Code Samples**


    Gets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the returned policy details when a response has been received.


    ```java

    certificateAsyncClient.getCertificatePolicy("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificatePolicyResponseValue -> {
             CertificatePolicy certificatePolicy = certificatePolicyResponseValue;
             // Update transparency
             certificatePolicy.setCertificateTransparent(true);
             certificateAsyncClient.updateCertificatePolicyWithResponse("certificateName",
                 certificatePolicy)
                 .subscribe(updatedPolicyResponse ->
                     System.out.printf("Certificate policy's updated transparency status %s %n",
                         updatedPolicyResponse.getValue().isCertificateTransparent()));
         });
    ```
  syntax:
    content: public Mono<Response<CertificatePolicy>> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
    parameters:
    - id: certificateName
      type: java.lang.String
      description: The name of the certificate whose policy is to be updated.
    - id: policy
      type: com.azure.security.keyvault.certificates.models.CertificatePolicy
      description: The certificate policy is to be updated.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the updated <xref uid="com.azure.security.keyvault.certificates.models.CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)
  id: updateCertificateProperties(com.azure.security.keyvault.certificates.models.CertificateProperties)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: updateCertificateProperties(CertificateProperties properties)
  nameWithType: CertificateAsyncClient.updateCertificateProperties(CertificateProperties properties)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties(CertificateProperties properties)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.


    **Code Samples**


    Gets latest version of the certificate, changes its tags and enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.


    ```java

    certificateAsyncClient.getCertificate("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateResponseValue -> {
             KeyVaultCertificate certificate = certificateResponseValue;
             //Update enabled status of the certificate
             certificate.getProperties().setEnabled(false);
             certificateAsyncClient.updateCertificateProperties(certificate.getProperties())
                 .subscribe(certificateResponse ->
                     System.out.printf("Certificate's enabled status %s %n",
                         certificateResponse.getProperties().isEnabled().toString()));
         });
    ```
  syntax:
    content: public Mono<KeyVaultCertificate> updateCertificateProperties(CertificateProperties properties)
    parameters:
    - id: properties
      type: com.azure.security.keyvault.certificates.models.CertificateProperties
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> object with updated properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">updated certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties)
  id: updateCertificatePropertiesWithResponse(com.azure.security.keyvault.certificates.models.CertificateProperties)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: updateCertificatePropertiesWithResponse(CertificateProperties properties)
  nameWithType: CertificateAsyncClient.updateCertificatePropertiesWithResponse(CertificateProperties properties)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse(CertificateProperties properties)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified attributes associated with the specified certificate. The update operation changes specified attributes of an existing stored certificate and attributes that are not specified in the request are left unchanged. This operation requires the certificates/update permission.


    **Code Samples**


    Gets latest version of the certificate, changes its enabled status and then updates it in the Azure Key Vault. Prints out the returned certificate details when a response has been received.


    ```java

    certificateAsyncClient.getCertificate("certificateName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(certificateResponseValue -> {
             KeyVaultCertificate certificate = certificateResponseValue;
             //Update the enabled status of the certificate.
             certificate.getProperties().setEnabled(false);
             certificateAsyncClient.updateCertificatePropertiesWithResponse(certificate.getProperties())
                 .subscribe(certificateResponse ->
                     System.out.printf("Certificate's enabled status %s %n",
                         certificateResponse.getValue().getProperties().isEnabled().toString()));
         });
    ```
  syntax:
    content: public Mono<Response<KeyVaultCertificate>> updateCertificatePropertiesWithResponse(CertificateProperties properties)
    parameters:
    - id: properties
      type: com.azure.security.keyvault.certificates.models.CertificateProperties
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> object with updated properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateProperties" data-throw-if-not-resolved="false">updated certificate</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  id: updateIssuer(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: updateIssuer(CertificateIssuer issuer)
  nameWithType: CertificateAsyncClient.updateIssuer(CertificateIssuer issuer)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer(CertificateIssuer issuer)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Gets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    certificateAsyncClient.getIssuer("issuerName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuerResponseValue -> {
             CertificateIssuer issuer = issuerResponseValue;
             //Update the enabled status of the issuer.
             issuer.setEnabled(false);
             certificateAsyncClient.updateIssuer(issuer)
                 .subscribe(issuerResponse ->
                     System.out.printf("Issuer's enabled status %s %n",
                         issuerResponse.isEnabled().toString()));
         });
    ```
  syntax:
    content: public Mono<CertificateIssuer> updateIssuer(CertificateIssuer issuer)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: >-
        The <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> with updated properties. Use
         <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer.CertificateIssuer(java.lang.String)" data-throw-if-not-resolved="false">CertificateIssuer#CertificateIssuer(String)</xref> to initialize the issuer object
    return:
      type: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateIssuer>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">updated issuer</xref>.
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  id: updateIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
  parent: com.azure.security.keyvault.certificates.CertificateAsyncClient
  langs:
  - java
  name: updateIssuerWithResponse(CertificateIssuer issuer)
  nameWithType: CertificateAsyncClient.updateIssuerWithResponse(CertificateIssuer issuer)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse(CertificateIssuer issuer)
  overload: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse*
  type: Method
  package: com.azure.security.keyvault.certificates
  summary: >-
    Updates the specified certificate issuer. The UpdateCertificateIssuer operation updates the specified attributes of the certificate issuer entity. This operation requires the certificates/setissuers permission.


    **Code Samples**


    Gets the certificate issuer, changes its attributes/properties then updates it in the Azure Key Vault. Prints out the returned certificate issuer details when a response has been received.


    ```java

    certificateAsyncClient.getIssuer("issuerName")
         .subscriberContext(Context.of(key1, value1, key2, value2))
         .subscribe(issuerResponseValue -> {
             CertificateIssuer issuer = issuerResponseValue;
             //Update the enabled status of the issuer.
             issuer.setEnabled(false);
             certificateAsyncClient.updateIssuer(issuer)
                 .subscribe(issuerResponse ->
                     System.out.printf("Issuer's enabled status %s %n",
                         issuerResponse.isEnabled().toString()));
         });
    ```
  syntax:
    content: public Mono<Response<CertificateIssuer>> updateIssuerWithResponse(CertificateIssuer issuer)
    parameters:
    - id: issuer
      type: com.azure.security.keyvault.certificates.models.CertificateIssuer
      description: The <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">issuer</xref> with updated properties.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="com.azure.security.keyvault.certificates.models.CertificateIssuer" data-throw-if-not-resolved="false">updated issuer</xref>.
references:
- uid: java.net.URL
  spec.java:
  - uid: java.net.URL
    name: URL
    fullName: java.net.URL
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.security.keyvault.certificates.CertificateServiceVersion
  name: CertificateServiceVersion
  nameWithType: CertificateServiceVersion
  fullName: com.azure.security.keyvault.certificates.CertificateServiceVersion
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.CertificateAsyncClient*
  name: CertificateAsyncClient
  nameWithType: CertificateAsyncClient.CertificateAsyncClient
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.CertificateAsyncClient
  package: com.azure.security.keyvault.certificates
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl*
  name: getVaultUrl
  nameWithType: CertificateAsyncClient.getVaultUrl
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getVaultUrl
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificatePolicy
  name: CertificatePolicy
  nameWithType: CertificatePolicy
  fullName: com.azure.security.keyvault.certificates.models.CertificatePolicy
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateOperation
    name: CertificateOperation
    fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
  - name: ','
    fullName: ','
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate*
  name: beginCreateCertificate
  nameWithType: CertificateAsyncClient.beginCreateCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginCreateCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation*
  name: getCertificateOperation
  nameWithType: CertificateAsyncClient.getCertificateOperation
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateOperation
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate*
  name: getCertificate
  nameWithType: CertificateAsyncClient.getCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificate
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse*
  name: getCertificateWithResponse
  nameWithType: CertificateAsyncClient.getCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
    name: KeyVaultCertificate
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse*
  name: getCertificateVersionWithResponse
  nameWithType: CertificateAsyncClient.getCertificateVersionWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersionWithResponse
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.KeyVaultCertificate>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
    name: KeyVaultCertificate
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion*
  name: getCertificateVersion
  nameWithType: CertificateAsyncClient.getCertificateVersion
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificateVersion
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificateProperties
  name: CertificateProperties
  nameWithType: CertificateProperties
  fullName: com.azure.security.keyvault.certificates.models.CertificateProperties
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties*
  name: updateCertificateProperties
  nameWithType: CertificateAsyncClient.updateCertificateProperties
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificateProperties
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse*
  name: updateCertificatePropertiesWithResponse
  nameWithType: CertificateAsyncClient.updateCertificatePropertiesWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePropertiesWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate*
  name: beginDeleteCertificate
  nameWithType: CertificateAsyncClient.beginDeleteCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginDeleteCertificate
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.DeletedCertificate>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate*
  name: getDeletedCertificate
  nameWithType: CertificateAsyncClient.getDeletedCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificate
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.DeletedCertificate>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse*
  name: getDeletedCertificateWithResponse
  nameWithType: CertificateAsyncClient.getDeletedCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getDeletedCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate*
  name: purgeDeletedCertificate
  nameWithType: CertificateAsyncClient.purgeDeletedCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificate
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse*
  name: purgeDeletedCertificateWithResponse
  nameWithType: CertificateAsyncClient.purgeDeletedCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.purgeDeletedCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.util.polling.PollerFlux<com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void>
  spec.java:
  - uid: com.azure.core.util.polling.PollerFlux
    name: PollerFlux
    fullName: com.azure.core.util.polling.PollerFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
    name: KeyVaultCertificateWithPolicy
    fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  - name: ','
    fullName: ','
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate*
  name: beginRecoverDeletedCertificate
  nameWithType: CertificateAsyncClient.beginRecoverDeletedCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.beginRecoverDeletedCertificate
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<byte[]>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate*
  name: backupCertificate
  nameWithType: CertificateAsyncClient.backupCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificate
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<byte[]>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse*
  name: backupCertificateWithResponse
  nameWithType: CertificateAsyncClient.backupCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.backupCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup*
  name: restoreCertificateBackup
  nameWithType: CertificateAsyncClient.restoreCertificateBackup
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackup
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse*
  name: restoreCertificateBackupWithResponse
  nameWithType: CertificateAsyncClient.restoreCertificateBackupWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.restoreCertificateBackupWithResponse
  package: com.azure.security.keyvault.certificates
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateProperties
    name: CertificateProperties
    fullName: com.azure.security.keyvault.certificates.models.CertificateProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates*
  name: listPropertiesOfCertificates
  nameWithType: CertificateAsyncClient.listPropertiesOfCertificates
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificates
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.DeletedCertificate>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
    name: DeletedCertificate
    fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates*
  name: listDeletedCertificates
  nameWithType: CertificateAsyncClient.listDeletedCertificates
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listDeletedCertificates
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions*
  name: listPropertiesOfCertificateVersions
  nameWithType: CertificateAsyncClient.listPropertiesOfCertificateVersions
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
  name: MergeCertificateOptions
  nameWithType: MergeCertificateOptions
  fullName: com.azure.security.keyvault.certificates.models.MergeCertificateOptions
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate*
  name: mergeCertificate
  nameWithType: CertificateAsyncClient.mergeCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse*
  name: mergeCertificateWithResponse
  nameWithType: CertificateAsyncClient.mergeCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.mergeCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificatePolicy>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificatePolicy
    name: CertificatePolicy
    fullName: com.azure.security.keyvault.certificates.models.CertificatePolicy
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy*
  name: getCertificatePolicy
  nameWithType: CertificateAsyncClient.getCertificatePolicy
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicy
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificatePolicy>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificatePolicy
    name: CertificatePolicy
    fullName: com.azure.security.keyvault.certificates.models.CertificatePolicy
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse*
  name: getCertificatePolicyWithResponse
  nameWithType: CertificateAsyncClient.getCertificatePolicyWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getCertificatePolicyWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy*
  name: updateCertificatePolicy
  nameWithType: CertificateAsyncClient.updateCertificatePolicy
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicy
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse*
  name: updateCertificatePolicyWithResponse
  nameWithType: CertificateAsyncClient.updateCertificatePolicyWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.CertificateIssuer
  name: CertificateIssuer
  nameWithType: CertificateIssuer
  fullName: com.azure.security.keyvault.certificates.models.CertificateIssuer
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateIssuer>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateIssuer
    name: CertificateIssuer
    fullName: com.azure.security.keyvault.certificates.models.CertificateIssuer
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer*
  name: createIssuer
  nameWithType: CertificateAsyncClient.createIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuer
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateIssuer>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateIssuer
    name: CertificateIssuer
    fullName: com.azure.security.keyvault.certificates.models.CertificateIssuer
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse*
  name: createIssuerWithResponse
  nameWithType: CertificateAsyncClient.createIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse*
  name: getIssuerWithResponse
  nameWithType: CertificateAsyncClient.getIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer*
  name: getIssuer
  nameWithType: CertificateAsyncClient.getIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.getIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse*
  name: deleteIssuerWithResponse
  nameWithType: CertificateAsyncClient.deleteIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer*
  name: deleteIssuer
  nameWithType: CertificateAsyncClient.deleteIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.IssuerProperties>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.IssuerProperties
    name: IssuerProperties
    fullName: com.azure.security.keyvault.certificates.models.IssuerProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers*
  name: listPropertiesOfIssuers
  nameWithType: CertificateAsyncClient.listPropertiesOfIssuers
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfIssuers
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer*
  name: updateIssuer
  nameWithType: CertificateAsyncClient.updateIssuer
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuer
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse*
  name: updateIssuerWithResponse
  nameWithType: CertificateAsyncClient.updateIssuerWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateIssuerWithResponse
  package: com.azure.security.keyvault.certificates
- uid: java.util.List<com.azure.security.keyvault.certificates.models.CertificateContact>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateContact
    name: CertificateContact
    fullName: com.azure.security.keyvault.certificates.models.CertificateContact
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.PagedFlux<com.azure.security.keyvault.certificates.models.CertificateContact>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateContact
    name: CertificateContact
    fullName: com.azure.security.keyvault.certificates.models.CertificateContact
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts*
  name: setContacts
  nameWithType: CertificateAsyncClient.setContacts
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.setContacts
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts*
  name: listContacts
  nameWithType: CertificateAsyncClient.listContacts
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listContacts
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts*
  name: deleteContacts
  nameWithType: CertificateAsyncClient.deleteContacts
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteContacts
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.security.keyvault.certificates.models.CertificateOperation>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateOperation
    name: CertificateOperation
    fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation*
  name: deleteCertificateOperation
  nameWithType: CertificateAsyncClient.deleteCertificateOperation
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperation
  package: com.azure.security.keyvault.certificates
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.security.keyvault.certificates.models.CertificateOperation>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.security.keyvault.certificates.models.CertificateOperation
    name: CertificateOperation
    fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse*
  name: deleteCertificateOperationWithResponse
  nameWithType: CertificateAsyncClient.deleteCertificateOperationWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.deleteCertificateOperationWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation*
  name: cancelCertificateOperation
  nameWithType: CertificateAsyncClient.cancelCertificateOperation
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperation
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse*
  name: cancelCertificateOperationWithResponse
  nameWithType: CertificateAsyncClient.cancelCertificateOperationWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.cancelCertificateOperationWithResponse
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
  name: ImportCertificateOptions
  nameWithType: ImportCertificateOptions
  fullName: com.azure.security.keyvault.certificates.models.ImportCertificateOptions
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate*
  name: importCertificate
  nameWithType: CertificateAsyncClient.importCertificate
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificate
  package: com.azure.security.keyvault.certificates
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse*
  name: importCertificateWithResponse
  nameWithType: CertificateAsyncClient.importCertificateWithResponse
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.importCertificateWithResponse
  package: com.azure.security.keyvault.certificates
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  name: CertificateOperation,KeyVaultCertificateWithPolicy
  nameWithType: CertificateOperation,KeyVaultCertificateWithPolicy
  fullName: com.azure.security.keyvault.certificates.models.CertificateOperation,com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
- uid: com.azure.core.util.polling.PollerFlux
  name: PollerFlux
  nameWithType: PollerFlux
  fullName: com.azure.core.util.polling.PollerFlux
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
  name: KeyVaultCertificateWithPolicy
  nameWithType: KeyVaultCertificateWithPolicy
  fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
  name: KeyVaultCertificate
  nameWithType: KeyVaultCertificate
  fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificate
- uid: com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void
  name: DeletedCertificate,Void
  nameWithType: DeletedCertificate,Void
  fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate,java.lang.Void
- uid: com.azure.security.keyvault.certificates.models.DeletedCertificate
  name: DeletedCertificate
  nameWithType: DeletedCertificate
  fullName: com.azure.security.keyvault.certificates.models.DeletedCertificate
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void
  name: KeyVaultCertificateWithPolicy,Void
  nameWithType: KeyVaultCertificateWithPolicy,Void
  fullName: com.azure.security.keyvault.certificates.models.KeyVaultCertificateWithPolicy,java.lang.Void
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.security.keyvault.certificates.models.IssuerProperties
  name: IssuerProperties
  nameWithType: IssuerProperties
  fullName: com.azure.security.keyvault.certificates.models.IssuerProperties
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.security.keyvault.certificates.models.CertificateContact
  name: CertificateContact
  nameWithType: CertificateContact
  fullName: com.azure.security.keyvault.certificates.models.CertificateContact
- uid: com.azure.security.keyvault.certificates.models.CertificateOperation
  name: CertificateOperation
  nameWithType: CertificateOperation
  fullName: com.azure.security.keyvault.certificates.models.CertificateOperation
