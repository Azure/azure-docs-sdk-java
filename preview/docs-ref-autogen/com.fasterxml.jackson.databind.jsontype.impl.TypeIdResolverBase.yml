### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase"
fullName: "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase"
name: "TypeIdResolverBase"
nameWithType: "TypeIdResolverBase"
summary: "Partial base implementation of <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeIdResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeIdResolver\"></xref>: all custom implementations are **strongly** recommended to extend this class, instead of directly implementing <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeIdResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeIdResolver\"></xref>. Note that ALL sub-class need to re-implement <xref uid=\"com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#typeFromId(DatabindContext, String)\"></xref> method; otherwise implementation will not work.\n\nNote that instances created to be constructed from annotations (<xref uid=\"com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver\"></xref>) are always created using no-arguments constructor; protected constructor is only used sub-classes."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class TypeIdResolverBase implements TypeIdResolver"
constructors:
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.TypeIdResolverBase()"
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.TypeIdResolverBase(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.type.TypeFactory)"
fields:
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase._baseType"
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase._typeFactory"
methods:
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.getDescForKnownTypeIds()"
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.idFromBaseType()"
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.init(com.fasterxml.jackson.databind.JavaType)"
- "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.typeFromId(com.fasterxml.jackson.databind.DatabindContext,java.lang.String)"
type: "class"
implements:
- "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeIdResolver?alt=com.fasterxml.jackson.databind.jsontype.TypeIdResolver&text=TypeIdResolver\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype.impl"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
