### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder"
fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder"
name: "DataLakePathClientBuilder"
nameWithType: "DataLakePathClientBuilder"
summary: "This class provides a fluent builder API to help aid the configuration and instantiation of <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAsyncClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryClients\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryAsyncClients\"></xref>, call <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildFileClient\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildFileAsyncClient\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildDirectoryClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildDirectoryAsyncClient\"></xref> respectively to construct an instance of the desired client."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakePathClientBuilder implements TokenCredentialTrait<DataLakePathClientBuilder>, AzureNamedKeyCredentialTrait<DataLakePathClientBuilder>, AzureSasCredentialTrait<DataLakePathClientBuilder>, HttpTrait<DataLakePathClientBuilder>, ConfigurationTrait<DataLakePathClientBuilder>, EndpointTrait<DataLakePathClientBuilder>"
constructors:
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.DataLakePathClientBuilder()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.DataLakePathClientBuilder()"
  name: "DataLakePathClientBuilder()"
  nameWithType: "DataLakePathClientBuilder.DataLakePathClientBuilder()"
  summary: "Creates a builder instance that is able to configure and construct <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAsyncClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryClients\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryAsyncClients\"></xref>."
  syntax: "public DataLakePathClientBuilder()"
  desc: "Creates a builder instance that is able to configure and construct <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAsyncClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryClients\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryAsyncClients\"></xref>."
methods:
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.addPolicy(HttpPipelinePolicy pipelinePolicy)"
  name: "addPolicy(HttpPipelinePolicy pipelinePolicy)"
  nameWithType: "DataLakePathClientBuilder.addPolicy(HttpPipelinePolicy pipelinePolicy)"
  summary: "Adds a <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline policy\"></xref> to apply on each request sent."
  parameters:
  - description: "A <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline policy\"></xref>."
    name: "pipelinePolicy"
    type: "<xref href=\"com.azure.core.http.policy.HttpPipelinePolicy?alt=com.azure.core.http.policy.HttpPipelinePolicy&text=HttpPipelinePolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder addPolicy(HttpPipelinePolicy pipelinePolicy)"
  desc: "Adds a <xref uid=\"com.azure.core.http.policy.HttpPipelinePolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pipeline policy\"></xref> to apply on each request sent.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryAsyncClient()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryAsyncClient()"
  name: "buildDirectoryAsyncClient()"
  nameWithType: "DataLakePathClientBuilder.buildDirectoryAsyncClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> based on options set in the builder."
  syntax: "public DataLakeDirectoryAsyncClient buildDirectoryAsyncClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> based on options set in the builder.\n\n**Code Samples**\n\n```java\nDataLakeDirectoryAsyncClient client = new DataLakePathClientBuilder()\n     .endpoint(endpoint)\n     .credential(storageSharedKeyCredential)\n     .buildDirectoryAsyncClient();\n```"
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryAsyncClient\"></xref> created from the configurations in this builder."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryClient()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryClient()"
  name: "buildDirectoryClient()"
  nameWithType: "DataLakePathClientBuilder.buildDirectoryClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> based on options set in the builder."
  syntax: "public DataLakeDirectoryClient buildDirectoryClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> based on options set in the builder.\n\n**Code Samples**\n\n```java\nDataLakeDirectoryClient client = new DataLakePathClientBuilder()\n     .endpoint(endpoint)\n     .credential(storageSharedKeyCredential)\n     .buildDirectoryClient();\n```"
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeDirectoryClient\"></xref> created from the configurations in this builder."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeDirectoryClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryClient&text=DataLakeDirectoryClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileAsyncClient()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileAsyncClient()"
  name: "buildFileAsyncClient()"
  nameWithType: "DataLakePathClientBuilder.buildFileAsyncClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> based on options set in the builder."
  syntax: "public DataLakeFileAsyncClient buildFileAsyncClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> based on options set in the builder.\n\n**Code Samples**\n\n```java\nDataLakeFileAsyncClient client = new DataLakePathClientBuilder()\n     .endpoint(endpoint)\n     .credential(storageSharedKeyCredential)\n     .buildFileAsyncClient();\n```"
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileAsyncClient\"></xref> created from the configurations in this builder."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileClient()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileClient()"
  name: "buildFileClient()"
  nameWithType: "DataLakePathClientBuilder.buildFileClient()"
  summary: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> based on options set in the builder."
  syntax: "public DataLakeFileClient buildFileClient()"
  desc: "Creates a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> based on options set in the builder.\n\n**Code Samples**\n\n```java\nDataLakeFileClient client = new DataLakePathClientBuilder()\n     .endpoint(endpoint)\n     .credential(storageSharedKeyCredential)\n     .buildFileClient();\n```"
  returns:
    description: "a <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeFileClient\"></xref> created from the configurations in this builder."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.clientOptions(com.azure.core.util.ClientOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.clientOptions(ClientOptions clientOptions)"
  name: "clientOptions(ClientOptions clientOptions)"
  nameWithType: "DataLakePathClientBuilder.clientOptions(ClientOptions clientOptions)"
  summary: "Allows for setting common properties such as application ID, headers, proxy configuration, etc."
  parameters:
  - description: "A configured instance of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions\"></xref>."
    name: "clientOptions"
    type: "<xref href=\"com.azure.core.util.ClientOptions?alt=com.azure.core.util.ClientOptions&text=ClientOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder clientOptions(ClientOptions clientOptions)"
  desc: "Allows for setting common properties such as application ID, headers, proxy configuration, etc. Note that it is recommended that this method be called with an instance of the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClientOptions\"></xref> class (a subclass of the <xref uid=\"com.azure.core.util.ClientOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ClientOptions\"></xref> base class). The HttpClientOptions subclass provides more configuration options suitable for HTTP clients, which is applicable for any class that implements this HttpTrait interface.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.configuration(com.azure.core.util.Configuration)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.configuration(Configuration configuration)"
  name: "configuration(Configuration configuration)"
  nameWithType: "DataLakePathClientBuilder.configuration(Configuration configuration)"
  summary: "Sets the configuration object used to retrieve environment configuration values during building of the client."
  parameters:
  - description: "Configuration store used to retrieve environment configurations."
    name: "configuration"
    type: "<xref href=\"com.azure.core.util.Configuration?alt=com.azure.core.util.Configuration&text=Configuration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder configuration(Configuration configuration)"
  desc: "Sets the configuration object used to retrieve environment configuration values during building of the client."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(com.azure.core.credential.AzureNamedKeyCredential)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(AzureNamedKeyCredential credential)"
  name: "credential(AzureNamedKeyCredential credential)"
  nameWithType: "DataLakePathClientBuilder.credential(AzureNamedKeyCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.core.credential.AzureNamedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.core.credential.AzureNamedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref>."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.AzureNamedKeyCredential?alt=com.azure.core.credential.AzureNamedKeyCredential&text=AzureNamedKeyCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder credential(AzureNamedKeyCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.core.credential.AzureNamedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureNamedKeyCredential\"></xref> used to authorize requests sent to the service."
  returns:
    description: "the updated DataLakePathClientBuilder"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(com.azure.core.credential.AzureSasCredential)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(AzureSasCredential credential)"
  name: "credential(AzureSasCredential credential)"
  nameWithType: "DataLakePathClientBuilder.credential(AzureSasCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.core.credential.AzureSasCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.core.credential.AzureSasCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref> used to authorize requests sent to the service."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.AzureSasCredential?alt=com.azure.core.credential.AzureSasCredential&text=AzureSasCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder credential(AzureSasCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.core.credential.AzureSasCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureSasCredential\"></xref> used to authorize requests sent to the service."
  returns:
    description: "the updated DataLakePathClientBuilder"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(com.azure.core.credential.TokenCredential)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(TokenCredential credential)"
  name: "credential(TokenCredential credential)"
  nameWithType: "DataLakePathClientBuilder.credential(TokenCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> used to authorize requests sent to the service."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder credential(TokenCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> used to authorize requests sent to the service. Refer to the Azure SDK for Java [identity and authentication][] documentation for more details on proper usage of the <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TokenCredential\"></xref> type.\n\n\n[identity and authentication]: https://aka.ms/azsdk/java/docs/identity"
  returns:
    description: "the updated DataLakePathClientBuilder"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(com.azure.storage.common.StorageSharedKeyCredential)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.credential(StorageSharedKeyCredential credential)"
  name: "credential(StorageSharedKeyCredential credential)"
  nameWithType: "DataLakePathClientBuilder.credential(StorageSharedKeyCredential credential)"
  summary: "Sets the <xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref> used to authorize requests sent to the service."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>."
    name: "credential"
    type: "<xref href=\"com.azure.storage.common.StorageSharedKeyCredential?alt=com.azure.storage.common.StorageSharedKeyCredential&text=StorageSharedKeyCredential\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder credential(StorageSharedKeyCredential credential)"
  desc: "Sets the <xref uid=\"com.azure.storage.common.StorageSharedKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref> used to authorize requests sent to the service."
  returns:
    description: "the updated DataLakePathClientBuilder"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.customerProvidedKey(com.azure.storage.file.datalake.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.customerProvidedKey(CustomerProvidedKey customerProvidedKey)"
  name: "customerProvidedKey(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "DataLakePathClientBuilder.customerProvidedKey(CustomerProvidedKey customerProvidedKey)"
  summary: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"customer provided key\"></xref> that is used to encrypt blob contents on the server."
  parameters:
  - description: "Customer provided key containing the encryption key information."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.file.datalake.models.CustomerProvidedKey?alt=com.azure.storage.file.datalake.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder customerProvidedKey(CustomerProvidedKey customerProvidedKey)"
  desc: "Sets the <xref uid=\"com.azure.storage.file.datalake.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"customer provided key\"></xref> that is used to encrypt blob contents on the server."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.endpoint(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.endpoint(String endpoint)"
  name: "endpoint(String endpoint)"
  nameWithType: "DataLakePathClientBuilder.endpoint(String endpoint)"
  summary: "Sets the service endpoint, additionally parses it for information (SAS token, file system name, path name)"
  parameters:
  - description: "URL of the service"
    name: "endpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder endpoint(String endpoint)"
  desc: "Sets the service endpoint, additionally parses it for information (SAS token, file system name, path name)\n\nIf the path name contains special characters, pass in the url encoded version of the path name.\n\nIf the endpoint is to a file/directory in the root container, this method will fail as it will interpret the path name as the file system name. With only one path element, it is impossible to distinguish between a file system name and a path in the root file system, so it is assumed to be the file system name as this is much more common. When working with paths in the root file system, it is best to set the endpoint to the account url and specify the path name separately using the <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.pathName(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"pathName\"></xref> method."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.fileSystemName(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.fileSystemName(String fileSystemName)"
  name: "fileSystemName(String fileSystemName)"
  nameWithType: "DataLakePathClientBuilder.fileSystemName(String fileSystemName)"
  summary: "Sets the name of the file system that contains the path."
  parameters:
  - description: "Name of the file system. If the value <code>null</code> or empty the root file system,\n <code>$root</code>, will be used."
    name: "fileSystemName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder fileSystemName(String fileSystemName)"
  desc: "Sets the name of the file system that contains the path."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.getDefaultHttpLogOptions()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.getDefaultHttpLogOptions()"
  name: "getDefaultHttpLogOptions()"
  nameWithType: "DataLakePathClientBuilder.getDefaultHttpLogOptions()"
  summary: "Gets the default Storage allowlist log headers and query parameters."
  modifiers:
  - "static"
  syntax: "public static HttpLogOptions getDefaultHttpLogOptions()"
  desc: "Gets the default Storage allowlist log headers and query parameters."
  returns:
    description: "the default http log options."
    type: "<xref href=\"com.azure.core.http.policy.HttpLogOptions?alt=com.azure.core.http.policy.HttpLogOptions&text=HttpLogOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.httpClient(com.azure.core.http.HttpClient)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.httpClient(HttpClient httpClient)"
  name: "httpClient(HttpClient httpClient)"
  nameWithType: "DataLakePathClientBuilder.httpClient(HttpClient httpClient)"
  summary: "Sets the <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to use for sending and receiving requests to and from the service."
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to use for requests."
    name: "httpClient"
    type: "<xref href=\"com.azure.core.http.HttpClient?alt=com.azure.core.http.HttpClient&text=HttpClient\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder httpClient(HttpClient httpClient)"
  desc: "Sets the <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClient\"></xref> to use for sending and receiving requests to and from the service.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.httpLogOptions(HttpLogOptions logOptions)"
  name: "httpLogOptions(HttpLogOptions logOptions)"
  nameWithType: "DataLakePathClientBuilder.httpLogOptions(HttpLogOptions logOptions)"
  summary: "Sets the <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"logging configuration\"></xref> to use when sending and receiving requests to and from the service."
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"logging configuration\"></xref> to use when sending and receiving requests to\n and from the service."
    name: "logOptions"
    type: "<xref href=\"com.azure.core.http.policy.HttpLogOptions?alt=com.azure.core.http.policy.HttpLogOptions&text=HttpLogOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder httpLogOptions(HttpLogOptions logOptions)"
  desc: "Sets the <xref uid=\"com.azure.core.http.policy.HttpLogOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"logging configuration\"></xref> to use when sending and receiving requests to and from the service. If a `logLevel` is not provided, default value of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpLogDetailLevel#NONE\"></xref> is set.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.pathName(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.pathName(String pathName)"
  name: "pathName(String pathName)"
  nameWithType: "DataLakePathClientBuilder.pathName(String pathName)"
  summary: "Sets the name of the file/directory."
  parameters:
  - description: "Name of the path. If the path name contains special characters, pass in the url encoded version\n of the path name."
    name: "pathName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder pathName(String pathName)"
  desc: "Sets the name of the file/directory."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.pipeline(com.azure.core.http.HttpPipeline)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.pipeline(HttpPipeline httpPipeline)"
  name: "pipeline(HttpPipeline httpPipeline)"
  nameWithType: "DataLakePathClientBuilder.pipeline(HttpPipeline httpPipeline)"
  summary: "Sets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> to use for the service client."
  parameters:
  - description: "<xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> to use for sending service requests and receiving responses."
    name: "httpPipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder pipeline(HttpPipeline httpPipeline)"
  desc: "Sets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> to use for the service client.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications.\n\nThe <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.endpoint(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"endpoint\"></xref> is not ignored when `pipeline` is set."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(com.azure.core.http.policy.RetryOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(RetryOptions retryOptions)"
  name: "retryOptions(RetryOptions retryOptions)"
  nameWithType: "DataLakePathClientBuilder.retryOptions(RetryOptions retryOptions)"
  summary: "Sets the <xref uid=\"com.azure.core.http.policy.RetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RetryOptions\"></xref> for all the requests made through the client."
  parameters:
  - description: "The <xref uid=\"com.azure.core.http.policy.RetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RetryOptions\"></xref> to use for all the requests made through the client."
    name: "retryOptions"
    type: "<xref href=\"com.azure.core.http.policy.RetryOptions?alt=com.azure.core.http.policy.RetryOptions&text=RetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder retryOptions(RetryOptions retryOptions)"
  desc: "Sets the <xref uid=\"com.azure.core.http.policy.RetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RetryOptions\"></xref> for all the requests made through the client.\n\n**Note:** It is important to understand the precedence order of the HttpTrait APIs. In particular, if a <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, this takes precedence over all other APIs in the trait, and they will be ignored. If no <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, a HTTP pipeline will be constructed internally based on the settings provided to this trait. Additionally, there may be other APIs in types that implement this trait that are also ignored if an <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> is specified, so please be sure to refer to the documentation of types that implement this trait to understand the full set of implications.\n\nSetting this is mutually exclusive with using <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#retryOptions(RequestRetryOptions)\"></xref>. Consider using <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#retryOptions(RequestRetryOptions)\"></xref> to also set storage specific options."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(RequestRetryOptions retryOptions)"
  name: "retryOptions(RequestRetryOptions retryOptions)"
  nameWithType: "DataLakePathClientBuilder.retryOptions(RequestRetryOptions retryOptions)"
  summary: "Sets the request retry options for all the requests made through the client."
  parameters:
  - description: "<xref uid=\"com.azure.storage.common.policy.RequestRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestRetryOptions\"></xref>."
    name: "retryOptions"
    type: "<xref href=\"com.azure.storage.common.policy.RequestRetryOptions?alt=com.azure.storage.common.policy.RequestRetryOptions&text=RequestRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder retryOptions(RequestRetryOptions retryOptions)"
  desc: "Sets the request retry options for all the requests made through the client. Setting this is mutually exclusive with using <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.retryOptions(com.azure.core.http.policy.RetryOptions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#retryOptions(RetryOptions)\"></xref>."
  returns:
    description: "the updated DataLakePathClientBuilder object."
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.sasToken(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.sasToken(String sasToken)"
  name: "sasToken(String sasToken)"
  nameWithType: "DataLakePathClientBuilder.sasToken(String sasToken)"
  summary: "Sets the SAS token used to authorize requests sent to the service."
  parameters:
  - description: "The SAS token to use for authenticating requests. This string should only be the query parameters\n (with or without a leading '?') and not a full url."
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder sasToken(String sasToken)"
  desc: "Sets the SAS token used to authorize requests sent to the service."
  returns:
    description: "the updated DataLakePathClientBuilder"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.serviceVersion(com.azure.storage.file.datalake.DataLakeServiceVersion)"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.serviceVersion(DataLakeServiceVersion version)"
  name: "serviceVersion(DataLakeServiceVersion version)"
  nameWithType: "DataLakePathClientBuilder.serviceVersion(DataLakeServiceVersion version)"
  summary: "Sets the <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceVersion\"></xref> that is used when making API requests."
  parameters:
  - description: "<xref uid=\"com.azure.storage.file.datalake.DataLakeServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceVersion\"></xref> of the service to be used when making requests."
    name: "version"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakeServiceVersion?alt=com.azure.storage.file.datalake.DataLakeServiceVersion&text=DataLakeServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakePathClientBuilder serviceVersion(DataLakeServiceVersion version)"
  desc: "Sets the <xref uid=\"com.azure.storage.file.datalake.DataLakeServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DataLakeServiceVersion\"></xref> that is used when making API requests.\n\nIf a service version is not provided, the service version that will be used will be the latest known service version based on the version of the client library being used. If no service version is specified, updating to a newer version of the client library will have the result of potentially moving to a newer service version.\n\nTargeting a specific service version may also mean that the service will return an error for newer APIs."
  returns:
    description: "the updated DataLakePathClientBuilder object"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.DataLakePathClientBuilder.setAnonymousAccess()"
  fullName: "com.azure.storage.file.datalake.DataLakePathClientBuilder.setAnonymousAccess()"
  name: "setAnonymousAccess()"
  nameWithType: "DataLakePathClientBuilder.setAnonymousAccess()"
  summary: "Clears the credential used to authorize the request."
  syntax: "public DataLakePathClientBuilder setAnonymousAccess()"
  desc: "Clears the credential used to authorize the request.\n\nThis is for paths that are publicly accessible."
  returns:
    description: "the updated DataLakePathClientBuilder"
    type: "<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "This class provides a fluent builder API to help aid the configuration and instantiation of <xref uid=\"com.azure.storage.file.datalake.DataLakeFileClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAsyncClients\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryClients\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DirectoryAsyncClients\"></xref>, call <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildFileClient\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildFileAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildFileAsyncClient\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildDirectoryClient\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakePathClientBuilder.buildDirectoryAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"buildDirectoryAsyncClient\"></xref> respectively to construct an instance of the desired client.\n\nThe following information must be provided on this builder:\n\n *  the endpoint through `.endpoint()`, including the file system name and file/directory name, in the format of `https://{accountName}.dfs.core.windows.net/{fileSystemName}/{pathName}`.\n *  the credential through `.credential()` or `.connectionString()` if the file system is not publicly accessible."
implements:
- "<xref href=\"com.azure.core.client.traits.AzureNamedKeyCredentialTrait?alt=com.azure.core.client.traits.AzureNamedKeyCredentialTrait&text=AzureNamedKeyCredentialTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.AzureSasCredentialTrait?alt=com.azure.core.client.traits.AzureSasCredentialTrait&text=AzureSasCredentialTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.ConfigurationTrait?alt=com.azure.core.client.traits.ConfigurationTrait&text=ConfigurationTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.EndpointTrait?alt=com.azure.core.client.traits.EndpointTrait&text=EndpointTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.HttpTrait?alt=com.azure.core.client.traits.HttpTrait&text=HttpTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"com.azure.core.client.traits.TokenCredentialTrait?alt=com.azure.core.client.traits.TokenCredentialTrait&text=TokenCredentialTrait\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.file.datalake.DataLakePathClientBuilder?alt=com.azure.storage.file.datalake.DataLakePathClientBuilder&text=DataLakePathClientBuilder\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.storage.file.datalake"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
