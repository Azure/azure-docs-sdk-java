### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Multiset"
fullName: "com.azure.cosmos.implementation.guava25.collect.Multiset<E>"
name: "Multiset<E>"
nameWithType: "Multiset<E>"
summary: "A collection that supports order-independent equality, like <xref uid=\"java.util.Set\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Set\"></xref>, but may have duplicate elements. A multiset is also sometimes called a *bag*.\n\nElements of a multiset that are equal to one another are referred to as *occurrences* of the same single element. The total number of occurrences of an element in a multiset is called the *count* of that element (the terms \"frequency\" and \"multiplicity\" are equivalent, but not used in this API). Since the count of an element is represented as an `int`, a multiset may never contain more than <xref uid=\"java.lang.Integer.MAX_VALUE\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#MAX_VALUE\"></xref> occurrences of any one element.\n\n`Multiset` refines the specifications of several methods from `Collection`. It also defines an additional query operation, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.count\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#count\"></xref>, which returns the count of an element. There are five new bulk-modification operations, for example <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.add*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#add(Object, int)\"></xref>, to add or remove multiple occurrences of an element at once, or to set the count of an element to a specific value. These modification operations are optional, but implementations which support the standard collection operations <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.add*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#add(Object)\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#remove(Object)\"></xref> are encouraged to implement the related methods as well. Finally, two collection views are provided: <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#elementSet\"></xref> contains the distinct elements of the multiset \"with duplicates collapsed\", and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#entrySet\"></xref> is similar but contains <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multiset.Entry\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multiset.Entry\"></xref> instances, each providing both a distinct element and the count of that element.\n\nIn addition to these required methods, implementations of `Multiset` are expected to provide two `static` creation methods: `create()`, returning an empty multiset, and `create(Iterable)`, returning a multiset containing the given initial elements. This is simply a refinement of `Collection`'s constructor recommendations, reflecting the new developments of Java 5.\n\nAs with other collection types, the modification operations are optional, and should throw <xref uid=\"java.lang.UnsupportedOperationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref> when they are not implemented. Most implementations should support either all add operations or none of them, all removal operations or none of them, and if and only if all of these are supported, the `setCount` methods as well.\n\nA multiset uses <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals\"></xref> to determine whether two instances should be considered \"the same,\" *unless specified otherwise* by the implementation.\n\nCommon implementations include <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableMultiset\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.HashMultiset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HashMultiset\"></xref>, and <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConcurrentHashMultiset\"></xref>.\n\nIf your values may be zero, negative, or outside the range of an int, you may wish to use <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.cosmos.util.concurrent.AtomicLongMap\"></xref> instead. Note, however, that unlike `Multiset`, `AtomicLongMap` does not automatically remove zeros.\n\nSee the Guava User Guide article on [ `Multiset`][_Multiset].\n\n\n[_Multiset]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset"
syntax: "public interface Multiset<E> extends Collection<E>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Multiset.add(E)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.add(E,int)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.contains(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.containsAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.count(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet()"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet()"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.forEach(java.util.function.Consumer<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.iterator()"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object,int)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.retainAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.setCount(E,int)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.setCount(E,int,int)"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.size()"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.spliterator()"
- "com.azure.cosmos.implementation.guava25.collect.Multiset.toString()"
type: "interface"
typeParameters:
- name: "E"
implements:
- "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
