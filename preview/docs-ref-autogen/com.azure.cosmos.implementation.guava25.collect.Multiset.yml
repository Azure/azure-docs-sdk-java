### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset
  id: Multiset
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  - com.azure.cosmos.implementation.guava25.collect.Multiset.add(E)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.containsAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.count(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.forEach(java.util.function.Consumer<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.iterator()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.Multiset.size()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.Multiset.toString()
  langs:
  - java
  name: Multiset<E>
  nameWithType: Multiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A collection that supports order-independent equality, like <xref uid="java.util.Set" data-throw-if-not-resolved="false">Set</xref>, but may have duplicate elements. A multiset is also sometimes called a *bag*.


    Elements of a multiset that are equal to one another are referred to as *occurrences* of the same single element. The total number of occurrences of an element in a multiset is called the *count* of that element (the terms "frequency" and "multiplicity" are equivalent, but not used in this API). Since the count of an element is represented as an `int`, a multiset may never contain more than <xref uid="java.lang.Integer.MAX_VALUE" data-throw-if-not-resolved="false">Integer#MAX_VALUE</xref> occurrences of any one element.


    `Multiset` refines the specifications of several methods from `Collection`. It also defines an additional query operation, <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.count" data-throw-if-not-resolved="false">#count</xref>, which returns the count of an element. There are five new bulk-modification operations, for example <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.add*" data-throw-if-not-resolved="false">#add(Object, int)</xref>, to add or remove multiple occurrences of an element at once, or to set the count of an element to a specific value. These modification operations are optional, but implementations which support the standard collection operations <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.add*" data-throw-if-not-resolved="false">#add(Object)</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object)" data-throw-if-not-resolved="false">#remove(Object)</xref> are encouraged to implement the related methods as well. Finally, two collection views are provided: <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet" data-throw-if-not-resolved="false">#elementSet</xref> contains the distinct elements of the multiset "with duplicates collapsed", and <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet" data-throw-if-not-resolved="false">#entrySet</xref> is similar but contains <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.Entry" data-throw-if-not-resolved="false">Multiset.Entry</xref> instances, each providing both a distinct element and the count of that element.


    In addition to these required methods, implementations of `Multiset` are expected to provide two `static` creation methods: `create()`, returning an empty multiset, and `create(Iterable)`, returning a multiset containing the given initial elements. This is simply a refinement of `Collection`'s constructor recommendations, reflecting the new developments of Java 5.


    As with other collection types, the modification operations are optional, and should throw <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> when they are not implemented. Most implementations should support either all add operations or none of them, all removal operations or none of them, and if and only if all of these are supported, the `setCount` methods as well.


    A multiset uses <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref> to determine whether two instances should be considered "the same," *unless specified otherwise* by the implementation.


    Common implementations include <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset" data-throw-if-not-resolved="false">ImmutableMultiset</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.HashMultiset" data-throw-if-not-resolved="false">HashMultiset</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset" data-throw-if-not-resolved="false">ConcurrentHashMultiset</xref>.


    If your values may be zero, negative, or outside the range of an int, you may wish to use <xref uid="" data-throw-if-not-resolved="false">com.azure.cosmos.util.concurrent.AtomicLongMap</xref> instead. Note, however, that unlike `Multiset`, `AtomicLongMap` does not automatically remove zeros.


    See the Guava User Guide article on [ `Multiset`][_Multiset].



    [_Multiset]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset
  syntax:
    content: public interface Multiset<E> extends Collection<E>
    typeParameters:
    - id: E
  implements:
  - java.util.Collection<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.add(E)
  id: add(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: add(E element)
  nameWithType: Multiset<E>.add(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.add(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Adds a single occurrence of the specified element to this multiset.


    This method refines <xref uid="java.util.Collection.add" data-throw-if-not-resolved="false">Collection#add</xref>, which only *ensures* the presence of the element, to further specify that a successful call must always increment the count of the element, and the overall size of the collection, by one.


    To both add the element and obtain the previous count of that element, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.add*" data-throw-if-not-resolved="false">add</xref>`(element, 1)` instead.
  syntax:
    content: public abstract boolean add(E element)
    parameters:
    - id: element
      type: E
      description: >-
        the element to add one occurrence of; may be null only if explicitly allowed by
             the implementation
    return:
      type: boolean
      description: >-
        <code>true</code> always, since this call is required to modify the multiset, unlike other
             <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> types
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.add(E,int)
  id: add(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: add(E element, int occurrences)
  nameWithType: Multiset<E>.add(E element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.add(E element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds a number of occurrences of an element to this multiset. Note that if `occurrences == 1`, this method has the identical effect to <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.add*" data-throw-if-not-resolved="false">#add(Object)</xref>. This method is functionally equivalent (except in the case of overflow) to the call `addAll(Collections.nCopies(element, occurrences))`, which would presumably perform much more poorly.
  syntax:
    content: public abstract int add(E element, int occurrences)
    parameters:
    - id: element
      type: E
      description: >-
        the element to add occurrences of; may be null only if explicitly allowed by the
             implementation
    - id: occurrences
      type: int
      description: >-
        the number of occurrences of the element to add. May be zero, in which case
             no change will be made.
    return:
      type: int
      description: the count of the element before the operation; possibly zero
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.contains(java.lang.Object)
  id: contains(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: contains(Object element)
  nameWithType: Multiset<E>.contains(Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.contains(Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Determines whether this multiset contains the specified element.


    This method refines <xref uid="java.util.Collection.contains" data-throw-if-not-resolved="false">Collection#contains</xref> to further specify that it **may not** throw an exception in response to `element` being null or of the wrong type.
  syntax:
    content: public abstract boolean contains(Object element)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element to check for
    return:
      type: boolean
      description: <code>true</code> if this multiset contains at least one occurrence of the element
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.containsAll(java.util.Collection<?>)
  id: containsAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: containsAll(Collection<?> elements)
  nameWithType: Multiset<E>.containsAll(Collection<?> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.containsAll(Collection<?> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.containsAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if this multiset contains at least one occurrence of each element in the specified collection.


    This method refines <xref uid="java.util.Collection.containsAll" data-throw-if-not-resolved="false">Collection#containsAll</xref> to further specify that it **may not** throw an exception in response to any of `elements` being null or of the wrong type.


    **Note:** this method does not take into account the occurrence count of an element in the two collections; it may still return `true` even if `elements` contains several occurrences of an element and this multiset contains only one. This is no different than any other collection type like <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, but it may be unexpected to the user of a multiset.
  syntax:
    content: public abstract boolean containsAll(Collection<?> elements)
    parameters:
    - id: elements
      type: java.util.Collection<?>
      description: the collection of elements to be checked for containment in this multiset
    return:
      type: boolean
      description: >-
        <code>true</code> if this multiset contains at least one occurrence of each element
             contained in <code>elements</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.count(java.lang.Object)
  id: count(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: count(Object element)
  nameWithType: Multiset<E>.count(Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.count(Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.count*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the number of occurrences of an element in this multiset (the *count* of the element). Note that for an <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>\-based multiset, this gives the same result as <xref uid="" data-throw-if-not-resolved="false">Collections#frequency</xref> (which would presumably perform more poorly).


    **Note:** the utility method <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.frequency*" data-throw-if-not-resolved="false">Iterables#frequency</xref> generalizes this operation; it correctly delegates to this method when dealing with a multiset, but it can also accept any other iterable type.
  syntax:
    content: public abstract int count(Object element)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element to count occurrences of
    return:
      type: int
      description: >-
        the number of occurrences of the element in this multiset; possibly zero but never
             negative
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet()
  id: elementSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: elementSet()
  nameWithType: Multiset<E>.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.elementSet()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the set of distinct elements contained in this multiset. The element set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. The order of the elements in the element set is unspecified.


    If the element set supports any removal operations, these necessarily cause **all** occurrences of the removed element(s) to be removed from the multiset. Implementations are not expected to support the add operations, although this is possible.


    A common use for the element set is to find the number of distinct elements in the multiset: `elementSet().size()`.
  syntax:
    content: public abstract Set<E> elementSet()
    return:
      type: java.util.Set<E>
      description: a view of the set of distinct elements in this multiset
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet()
  id: entrySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: entrySet()
  nameWithType: Multiset<E>.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.entrySet()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the contents of this multiset, grouped into `Multiset.Entry` instances, each providing an element of the multiset and the count of that element. This set contains exactly one entry for each distinct element in the multiset (thus it always has the same size as the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet" data-throw-if-not-resolved="false">#elementSet</xref>). The order of the elements in the element set is unspecified.


    The entry set is backed by the same data as the multiset, so any change to either is immediately reflected in the other. However, multiset changes may or may not be reflected in any `Entry` instances already retrieved from the entry set (this is implementation-dependent). Furthermore, implementations are not required to support modifications to the entry set at all, and the `Entry` instances themselves don't even have methods for modification. See the specific implementation class for more details on how its entry set handles modifications.
  syntax:
    content: public abstract Set<Multiset.Entry<E>> entrySet()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>>
      description: a set of entries representing the data of this multiset
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: equals(Object object)
  nameWithType: Multiset<E>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares the specified object with this multiset for equality. Returns `true` if the given object is also a multiset and contains equal elements with equal counts, regardless of order.
  syntax:
    content: public abstract boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.forEach(java.util.function.Consumer<? super E>)
  id: forEach(java.util.function.Consumer<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: forEach(Consumer<? super E> action)
  nameWithType: Multiset<E>.forEach(Consumer<? super E> action)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.forEach(Consumer<? super E> action)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.forEach*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Elements that occur multiple times in the multiset will be passed to the `Consumer` correspondingly many times, though not necessarily sequentially.
  syntax:
    content: public default void forEach(Consumer<? super E> action)
    parameters:
    - id: action
      type: java.util.function.Consumer<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  id: forEachEntry(java.util.function.ObjIntConsumer<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: forEachEntry(ObjIntConsumer<? super E> action)
  nameWithType: Multiset<E>.forEachEntry(ObjIntConsumer<? super E> action)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.forEachEntry(ObjIntConsumer<? super E> action)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.forEachEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Runs the specified action for each distinct element in this multiset, and the number of occurrences of that element. For some `Multiset` implementations, this may be more efficient than iterating over the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet()" data-throw-if-not-resolved="false">#entrySet()</xref> either explicitly or with `entrySet().forEach(action)`.
  syntax:
    content: public default void forEachEntry(ObjIntConsumer<? super E> action)
    parameters:
    - id: action
      type: java.util.function.ObjIntConsumer<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: hashCode()
  nameWithType: Multiset<E>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the hash code for this multiset. This is defined as the sum of


    ```java

    ((element == null) ? 0 : element.hashCode()) ^ count(element)

    ```


    over all distinct elements in the multiset. It follows that a multiset and its entry set always have the same hash code.
  syntax:
    content: public abstract int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: iterator()
  nameWithType: Multiset<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Elements that occur multiple times in the multiset will appear multiple times in this iterator, though not necessarily sequentially.
  syntax:
    content: public abstract Iterator<E> iterator()
    return:
      type: java.util.Iterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: remove(Object element)
  nameWithType: Multiset<E>.remove(Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.remove(Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes a *single* occurrence of the specified element from this multiset, if present.


    This method refines <xref uid="java.util.Collection.remove" data-throw-if-not-resolved="false">Collection#remove</xref> to further specify that it **may not** throw an exception in response to `element` being null or of the wrong type.


    To both remove the element and obtain the previous count of that element, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object,int)" data-throw-if-not-resolved="false">remove</xref>`(element, 1)` instead.
  syntax:
    content: public abstract boolean remove(Object element)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element to remove one occurrence of
    return:
      type: boolean
      description: <code>true</code> if an occurrence was found and removed
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.remove(java.lang.Object,int)
  id: remove(java.lang.Object,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: remove(Object element, int occurrences)
  nameWithType: Multiset<E>.remove(Object element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.remove(Object element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed. Note that if `occurrences == 1`, this is functionally equivalent to the call `remove(element)`.
  syntax:
    content: public abstract int remove(Object element, int occurrences)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element to conditionally remove occurrences of
    - id: occurrences
      type: int
      description: >-
        the number of occurrences of the element to remove. May be zero, in which
             case no change will be made.
    return:
      type: int
      description: the count of the element before the operation; possibly zero
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll(java.util.Collection<?>)
  id: removeAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: removeAll(Collection<?> c)
  nameWithType: Multiset<E>.removeAll(Collection<?> c)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.removeAll(Collection<?> c)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    **Note:** This method ignores how often any element might appear in `c`, and only cares whether or not an element appears at all. If you wish to remove one occurrence in this multiset for every occurrence in `c`, see <xref uid="Multisets#removeOccurrences(Multiset,
     Multiset)" data-throw-if-not-resolved="false">Multisets#removeOccurrences(Multiset,
     Multiset)</xref>.

    This method refines <xref uid="java.util.Collection.removeAll" data-throw-if-not-resolved="false">Collection#removeAll</xref> to further specify that it **may not** throw an exception in response to any of `elements` being null or of the wrong type.
  syntax:
    content: public abstract boolean removeAll(Collection<?> c)
    parameters:
    - id: c
      type: java.util.Collection<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.retainAll(java.util.Collection<?>)
  id: retainAll(java.util.Collection<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: retainAll(Collection<?> c)
  nameWithType: Multiset<E>.retainAll(Collection<?> c)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.retainAll(Collection<?> c)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.retainAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    **Note:** This method ignores how often any element might appear in `c`, and only cares whether or not an element appears at all. If you wish to remove one occurrence in this multiset for every occurrence in `c`, see <xref uid="Multisets#retainOccurrences(Multiset,
     Multiset)" data-throw-if-not-resolved="false">Multisets#retainOccurrences(Multiset,
     Multiset)</xref>.

    This method refines <xref uid="java.util.Collection.retainAll" data-throw-if-not-resolved="false">Collection#retainAll</xref> to further specify that it **may not** throw an exception in response to any of `elements` being null or of the wrong type.
  syntax:
    content: public abstract boolean retainAll(Collection<?> c)
    parameters:
    - id: c
      type: java.util.Collection<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.setCount(E,int)
  id: setCount(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: setCount(E element, int count)
  nameWithType: Multiset<E>.setCount(E element, int count)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.setCount(E element, int count)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds or removes the necessary occurrences of an element such that the element attains the desired count.
  syntax:
    content: public abstract int setCount(E element, int count)
    parameters:
    - id: element
      type: E
      description: >-
        the element to add or remove occurrences of; may be null only if explicitly
             allowed by the implementation
    - id: count
      type: int
      description: the desired count of the element in this multiset
    return:
      type: int
      description: the count of the element before the operation; possibly zero
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.setCount(E,int,int)
  id: setCount(E,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: setCount(E element, int oldCount, int newCount)
  nameWithType: Multiset<E>.setCount(E element, int oldCount, int newCount)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.setCount(E element, int oldCount, int newCount)
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Conditionally sets the count of an element to a new value, as described in <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.setCount*" data-throw-if-not-resolved="false">#setCount(Object, int)</xref>, provided that the element has the expected current count. If the current count is not `oldCount`, no change is made.
  syntax:
    content: public abstract boolean setCount(E element, int oldCount, int newCount)
    parameters:
    - id: element
      type: E
      description: >-
        the element to conditionally set the count of; may be null only if explicitly
             allowed by the implementation
    - id: oldCount
      type: int
      description: the expected present count of the element in this multiset
    - id: newCount
      type: int
      description: the desired count of the element in this multiset
    return:
      type: boolean
      description: >-
        <code>true</code> if the condition for modification was met. This implies that the multiset
             was indeed modified, unless <code>oldCount == newCount</code>.
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: size()
  nameWithType: Multiset<E>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the total number of all occurrences of all elements in this multiset.


    **Note:** this method does not return the number of *distinct elements* in the multiset, which is given by `entrySet().size()`.
  syntax:
    content: public abstract int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.spliterator()
  id: spliterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: spliterator()
  nameWithType: Multiset<E>.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.spliterator()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.spliterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public default Spliterator<E> spliterator()
    return:
      type: java.util.Spliterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multiset
  langs:
  - java
  name: toString()
  nameWithType: Multiset<E>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.Multiset.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: It is recommended, though not mandatory, that this method return the result of invoking <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.toString" data-throw-if-not-resolved="false">#toString</xref> on the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet" data-throw-if-not-resolved="false">#entrySet</xref>, yielding a result such as `[a x 3, c, d x 2, e]`.
  syntax:
    content: public abstract String toString()
    return:
      type: java.lang.String
references:
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.size*
  name: size
  nameWithType: Multiset<E>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.count*
  name: count
  nameWithType: Multiset<E>.count
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.count
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.add*
  name: add
  nameWithType: Multiset<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.remove*
  name: remove
  nameWithType: Multiset<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.setCount*
  name: setCount
  nameWithType: Multiset<E>.setCount
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.setCount
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<E>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.elementSet*
  name: elementSet
  nameWithType: Multiset<E>.elementSet
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.elementSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
    name: Entry
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.entrySet*
  name: entrySet
  nameWithType: Multiset<E>.entrySet
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.entrySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.ObjIntConsumer<? super E>
  spec.java:
  - uid: java.util.function.ObjIntConsumer
    name: ObjIntConsumer
    fullName: java.util.function.ObjIntConsumer
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.forEachEntry*
  name: forEachEntry
  nameWithType: Multiset<E>.forEachEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.forEachEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.equals*
  name: equals
  nameWithType: Multiset<E>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.hashCode*
  name: hashCode
  nameWithType: Multiset<E>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.toString*
  name: toString
  nameWithType: Multiset<E>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.iterator*
  name: iterator
  nameWithType: Multiset<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.contains*
  name: contains
  nameWithType: Multiset<E>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.containsAll*
  name: containsAll
  nameWithType: Multiset<E>.containsAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.containsAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll*
  name: removeAll
  nameWithType: Multiset<E>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.retainAll*
  name: retainAll
  nameWithType: Multiset<E>.retainAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.retainAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Consumer<? super E>
  spec.java:
  - uid: java.util.function.Consumer
    name: Consumer
    fullName: java.util.function.Consumer
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.forEach*
  name: forEach
  nameWithType: Multiset<E>.forEach
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.forEach
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Spliterator<E>
  spec.java:
  - uid: java.util.Spliterator
    name: Spliterator
    fullName: java.util.Spliterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.spliterator*
  name: spliterator
  nameWithType: Multiset<E>.spliterator
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset<E>.spliterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<E>
  name: Collection<E>
  nameWithType: Collection<E>
  fullName: java.util.Collection<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  name: Multiset.Entry<E>
  nameWithType: Multiset.Entry<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.function.ObjIntConsumer
  name: ObjIntConsumer
  nameWithType: ObjIntConsumer
  fullName: java.util.function.ObjIntConsumer
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.function.Consumer
  name: Consumer
  nameWithType: Consumer
  fullName: java.util.function.Consumer
- uid: java.util.Spliterator
  name: Spliterator
  nameWithType: Spliterator
  fullName: java.util.Spliterator
