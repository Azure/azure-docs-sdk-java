### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch"
name: "analyzeSentimentBatch"
nameWithType: "TextAnalyticsAsyncClient.analyzeSentimentBatch"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.AnalyzeSentimentOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, AnalyzeSentimentOptions options)"
  name: "analyzeSentimentBatch(Iterable<String> documents, String language, AnalyzeSentimentOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, AnalyzeSentimentOptions options)"
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it. If the `includeOpinionMining` of <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentOptions\"></xref> set to true, the output will include the opinion mining results. It mines the opinions of a sentence and conducts more granular analysis around the aspects in the text (also known as aspect-based sentiment analysis).\n\n**Code Sample**\n\nAnalyze the sentiments and mine the opinions for each sentence in a list of documents with a provided language representation and <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentOptions\"></xref> options. Subscribes to the call asynchronously and prints out the sentiment and mined opinions details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean.\",\n     \"The restaurant had amazing gnocchi.\"\n );\n \n AnalyzeSentimentOptions options = new AnalyzeSentimentOptions().setIncludeOpinionMining(true);\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\", options).subscribe(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             documentSentiment.getSentences().forEach(sentenceSentiment -> {\n                 System.out.printf(\"\\tSentence sentiment: %s%n\", sentenceSentiment.getSentiment());\n                 sentenceSentiment.getMinedOpinions().forEach(minedOpinions -> {\n                     AspectSentiment aspectSentiment = minedOpinions.getAspect();\n                     System.out.printf(\"\\t\\tAspect sentiment: %s, aspect text: %s%n\",\n                         aspectSentiment.getSentiment(), aspectSentiment.getText());\n                     for (OpinionSentiment opinionSentiment : minedOpinions.getOpinions()) {\n                         System.out.printf(\n                             \"\\t\\t\\t'%s' opinion sentiment because of \\\"%s\\\". Is the opinion negated: %s.%n\",\n                             opinionSentiment.getSentiment(), opinionSentiment.getText(),\n                             opinionSentiment.isNegated());\n                     }\n                 });\n             });\n         });\n     });\n```"
  parameters:
  - description: "A list of documents to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The 2 letter ISO 639-1 representation of language for the document. If not set, uses \"en\" for\n English as default."
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed when\n analyzing sentiments."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.AnalyzeSentimentOptions?alt=com.azure.ai.textanalytics.models.AnalyzeSentimentOptions&text=AnalyzeSentimentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnalyzeSentimentResultCollection> analyzeSentimentBatch(Iterable<String> documents, String language, AnalyzeSentimentOptions options)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> contains a <xref uid=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentResultCollection\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection?alt=com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection&text=AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)"
  name: "analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)"
  nameWithType: "TextAnalyticsAsyncClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)"
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\nAnalyze sentiment in a list of documents with provided language code and request options. Subscribes to the call asynchronously and prints out the sentiment details when a response is received.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean.\",\n     \"The restaurant had amazing gnocchi.\"\n );\n \n textAnalyticsAsyncClient.analyzeSentimentBatch(documents, \"en\",\n     new TextAnalyticsRequestOptions().setIncludeStatistics(true)).subscribe(\n         response -> {\n             // Batch statistics\n             TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n             System.out.printf(\"Batch statistics, transaction count: %s, valid document count: %s.%n\",\n                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n             response.forEach(analyzeSentimentResult -> {\n                 System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n                 DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n                 System.out.printf(\"Recognized document sentiment: %s.%n\", documentSentiment.getSentiment());\n                 documentSentiment.getSentences().forEach(sentenceSentiment ->\n                     System.out.printf(\"Recognized sentence sentiment: %s, positive score: %.2f, \"\n                             + \"neutral score: %.2f, negative score: %.2f.%n\",\n                         sentenceSentiment.getSentiment(),\n                         sentenceSentiment.getConfidenceScores().getPositive(),\n                         sentenceSentiment.getConfidenceScores().getNeutral(),\n                         sentenceSentiment.getConfidenceScores().getNegative()));\n             });\n         });\n```"
  parameters:
  - description: "A list of documents to be analyzed.\n For text length limits, maximum batch size, and supported text encoding, see\n <a href=\"https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits\">data limits</a>."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The 2 letter ISO 639-1 representation of language for the document. If not set, uses \"en\" for\n English as default."
    name: "language"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The <xref uid=\"com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> to configure the scoring model for documents\n and show statistics."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions?alt=com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions&text=TextAnalyticsRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AnalyzeSentimentResultCollection> analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> contains a <xref uid=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeSentimentResultCollection\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection?alt=com.azure.ai.textanalytics.util.AnalyzeSentimentResultCollection&text=AnalyzeSentimentResultCollection\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.1.0-beta.3
