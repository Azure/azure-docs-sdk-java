### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.digest.Md5Crypt
  id: Md5Crypt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest
  children:
  - org.apache.commons.codec.digest.Md5Crypt.Md5Crypt()
  - org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])
  - org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)
  - org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.util.Random)
  - org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)
  - org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)
  - org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])
  - org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)
  - org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)
  - org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String,java.util.Random)
  - org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.util.Random)
  langs:
  - java
  name: Md5Crypt
  nameWithType: Md5Crypt
  fullName: org.apache.commons.codec.digest.Md5Crypt
  type: Class
  package: org.apache.commons.codec.digest
  summary: >-
    The libc crypt() "$1$" and Apache "$apr1$" MD5-based hash algorithm.


    Based on the public domain ("beer-ware") C implementation from Poul-Henning Kamp which was found at: [ crypt-md5.c @ freebsd.org][crypt-md5.c _ freebsd.org]


    Source:


    ```java

    $FreeBSD: src/lib/libcrypt/crypt-md5.c,v 1.1 1999/01/21 13:50:09 brandon Exp $

    ```


    Conversion to Kotlin and from there to Java in 2012.


    The C style comments are from the original C code, the ones with "//" from the port.


    This class is immutable and thread-safe.



    [crypt-md5.c _ freebsd.org]: http://www.freebsd.org/cgi/cvsweb.cgi/src/lib/libcrypt/crypt-md5.c?rev=1.1;content-type=text%2Fplain
  syntax:
    content: public class Md5Crypt
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.digest.Md5Crypt.Md5Crypt()
  id: Md5Crypt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: Md5Crypt()
  nameWithType: Md5Crypt.Md5Crypt()
  fullName: org.apache.commons.codec.digest.Md5Crypt.Md5Crypt()
  overload: org.apache.commons.codec.digest.Md5Crypt.Md5Crypt*
  type: Constructor
  package: org.apache.commons.codec.digest
  syntax:
    content: public Md5Crypt()
- uid: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[])
  id: apr1Crypt(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: apr1Crypt(byte[] keyBytes)
  nameWithType: Md5Crypt.apr1Crypt(byte[] keyBytes)
  fullName: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[] keyBytes)
  overload: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    See <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(byte[], String)</xref> for details.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>; your own <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> in <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.util.Random)" data-throw-if-not-resolved="false">#apr1Crypt(byte[], Random)</xref>.
  syntax:
    content: public static String apr1Crypt(byte[] keyBytes)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)
  id: apr1Crypt(byte[],java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: apr1Crypt(byte[] keyBytes, String salt)
  nameWithType: Md5Crypt.apr1Crypt(byte[] keyBytes, String salt)
  fullName: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[] keyBytes, String salt)
  overload: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    See <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(String, String)</xref> for details.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>
  syntax:
    content: public static String apr1Crypt(byte[] keyBytes, String salt)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    - id: salt
      type: java.lang.String
      description: >-
        An APR1 salt. The salt may be null, in which case a salt is generated for you using
                    <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your
                    own salts.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.util.Random)
  id: apr1Crypt(byte[],java.util.Random)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: apr1Crypt(byte[] keyBytes, Random random)
  nameWithType: Md5Crypt.apr1Crypt(byte[] keyBytes, Random random)
  fullName: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[] keyBytes, Random random)
  overload: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    See <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(byte[], String)</xref> for details.


    A salt is generated for you using the user provided <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref>.
  syntax:
    content: public static String apr1Crypt(byte[] keyBytes, Random random)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    - id: random
      type: java.util.Random
      description: >-
        the instance of <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> to use for generating the salt. Consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>
                    or <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)
  id: apr1Crypt(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: apr1Crypt(String keyBytes)
  nameWithType: Md5Crypt.apr1Crypt(String keyBytes)
  fullName: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String keyBytes)
  overload: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    See <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(String, String)</xref> for details.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts and calling <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(byte[], String)</xref>.
  syntax:
    content: public static String apr1Crypt(String keyBytes)
    parameters:
    - id: keyBytes
      type: java.lang.String
      description: plaintext string to hash.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)
  id: apr1Crypt(java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: apr1Crypt(String keyBytes, String salt)
  nameWithType: Md5Crypt.apr1Crypt(String keyBytes, String salt)
  fullName: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(String keyBytes, String salt)
  overload: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates an Apache htpasswd compatible "$apr1$" MD5 based hash value.


    The algorithm is identical to the crypt(3) "$1$" one but produces different outputs due to the different salt prefix.
  syntax:
    content: public static String apr1Crypt(String keyBytes, String salt)
    parameters:
    - id: keyBytes
      type: java.lang.String
      description: plaintext string to hash.
    - id: salt
      type: java.lang.String
      description: >-
        salt string including the prefix and optionally garbage at the end. The salt may be null, in which
                    case a salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using
                    <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[])
  id: md5Crypt(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: md5Crypt(byte[] keyBytes)
  nameWithType: Md5Crypt.md5Crypt(byte[] keyBytes)
  fullName: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[] keyBytes)
  overload: org.apache.commons.codec.digest.Md5Crypt.md5Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() compatible "$1$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#md5Crypt(byte[], String)</xref> for details.


    A salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts and calling <xref uid="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#md5Crypt(byte[], String)</xref>.
  syntax:
    content: public static String md5Crypt(byte[] keyBytes)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)
  id: md5Crypt(byte[],java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: md5Crypt(byte[] keyBytes, String salt)
  nameWithType: Md5Crypt.md5Crypt(byte[] keyBytes, String salt)
  fullName: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[] keyBytes, String salt)
  overload: org.apache.commons.codec.digest.Md5Crypt.md5Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc crypt() compatible "$1$" MD5 based hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> for details. We use <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> for seed generation by default.
  syntax:
    content: public static String md5Crypt(byte[] keyBytes, String salt)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    - id: salt
      type: java.lang.String
      description: >-
        salt string including the prefix and optionally garbage at the end. The salt may be null, in which
                    case a salt is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider using
                    <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String)
  id: md5Crypt(byte[],java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: md5Crypt(byte[] keyBytes, String salt, String prefix)
  nameWithType: Md5Crypt.md5Crypt(byte[] keyBytes, String salt, String prefix)
  fullName: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[] keyBytes, String salt, String prefix)
  overload: org.apache.commons.codec.digest.Md5Crypt.md5Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() "$1$" or Apache htpasswd "$apr1$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> or <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(String, String)</xref> for details. We use <xref uid="" data-throw-if-not-resolved="false">by default</xref>.
  syntax:
    content: public static String md5Crypt(byte[] keyBytes, String salt, String prefix)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    - id: salt
      type: java.lang.String
      description: >-
        real salt value without prefix or "rounds=". The salt may be null, in which case a salt
                    is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider
                    using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    - id: prefix
      type: java.lang.String
      description: salt prefix
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String,java.lang.String,java.util.Random)
  id: md5Crypt(byte[],java.lang.String,java.lang.String,java.util.Random)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: md5Crypt(byte[] keyBytes, String salt, String prefix, Random random)
  nameWithType: Md5Crypt.md5Crypt(byte[] keyBytes, String salt, String prefix, Random random)
  fullName: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[] keyBytes, String salt, String prefix, Random random)
  overload: org.apache.commons.codec.digest.Md5Crypt.md5Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() "$1$" or Apache htpasswd "$apr1$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Crypt.crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">Crypt#crypt(String, String)</xref> or <xref uid="org.apache.commons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">#apr1Crypt(String, String)</xref> for details.
  syntax:
    content: public static String md5Crypt(byte[] keyBytes, String salt, String prefix, Random random)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    - id: salt
      type: java.lang.String
      description: >-
        real salt value without prefix or "rounds=". The salt may be null, in which case a salt
                    is generated for you using <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>; for more secure salts consider
                    using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref> to generate your own salts.
    - id: prefix
      type: java.lang.String
      description: salt prefix
    - id: random
      type: java.util.Random
      description: >-
        the instance of <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> to use for generating the salt. Consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>
                    or <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>.
    return:
      type: java.lang.String
      description: the hash value
- uid: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.util.Random)
  id: md5Crypt(byte[],java.util.Random)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.digest.Md5Crypt
  langs:
  - java
  name: md5Crypt(byte[] keyBytes, Random random)
  nameWithType: Md5Crypt.md5Crypt(byte[] keyBytes, Random random)
  fullName: org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[] keyBytes, Random random)
  overload: org.apache.commons.codec.digest.Md5Crypt.md5Crypt*
  type: Method
  package: org.apache.commons.codec.digest
  summary: >-
    Generates a libc6 crypt() compatible "$1$" hash value.


    See <xref uid="org.apache.commons.codec.digest.Md5Crypt.md5Crypt(byte[],java.lang.String)" data-throw-if-not-resolved="false">#md5Crypt(byte[], String)</xref> for details.


    A salt is generated for you using the instance of <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> you supply.
  syntax:
    content: public static String md5Crypt(byte[] keyBytes, Random random)
    parameters:
    - id: keyBytes
      type: byte[]
      description: plaintext string to hash.
    - id: random
      type: java.util.Random
      description: >-
        the instance of <xref uid="java.util.Random" data-throw-if-not-resolved="false">Random</xref> to use for generating the salt. Consider using <xref uid="" data-throw-if-not-resolved="false">SecureRandom</xref>
                    or <xref uid="" data-throw-if-not-resolved="false">ThreadLocalRandom</xref>.
    return:
      type: java.lang.String
      description: the hash value
references:
- uid: org.apache.commons.codec.digest.Md5Crypt.Md5Crypt*
  name: Md5Crypt
  nameWithType: Md5Crypt.Md5Crypt
  fullName: org.apache.commons.codec.digest.Md5Crypt.Md5Crypt
  package: org.apache.commons.codec.digest
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt*
  name: apr1Crypt
  nameWithType: Md5Crypt.apr1Crypt
  fullName: org.apache.commons.codec.digest.Md5Crypt.apr1Crypt
  package: org.apache.commons.codec.digest
- uid: java.util.Random
  spec.java:
  - uid: java.util.Random
    name: Random
    fullName: java.util.Random
- uid: org.apache.commons.codec.digest.Md5Crypt.md5Crypt*
  name: md5Crypt
  nameWithType: Md5Crypt.md5Crypt
  fullName: org.apache.commons.codec.digest.Md5Crypt.md5Crypt
  package: org.apache.commons.codec.digest
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
