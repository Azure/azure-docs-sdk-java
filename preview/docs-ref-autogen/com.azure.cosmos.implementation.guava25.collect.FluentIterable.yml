### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  id: FluentIterable
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<C>copyInto(C)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(E[])
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(java.lang.Iterable<E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>of(E,E...)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<K>index(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<K>uniqueIndex(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>...)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>filter(java.lang.Class<T>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>transform(com.azure.cosmos.implementation.guava25.base.Function<? super E,T>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>transformAndConcat(com.azure.cosmos.implementation.guava25.base.Function<? super E,? extends java.lang.Iterable<? extends T>>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.<V>toMap(com.azure.cosmos.implementation.guava25.base.Function<? super E,V>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.allMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.append(E...)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.append(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.first()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.firstMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.get(int)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.join(com.azure.cosmos.implementation.guava25.base.Joiner)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.last()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit(int)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.size()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.skip(int)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.stream()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toArray(java.lang.Class<E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMultiset()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSet()
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedList(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.FluentIterable.toString()
  langs:
  - java
  name: FluentIterable<E>
  nameWithType: FluentIterable<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A discouraged (but not deprecated) precursor to Java's superior <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> library.


    The following types of methods are provided:

     *  chaining methods which return a new `FluentIterable` based in some way on the contents of the current one (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.transform" data-throw-if-not-resolved="false">#transform</xref>)
     *  element extraction methods which facilitate the retrieval of certain elements (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.last" data-throw-if-not-resolved="false">#last</xref>)
     *  query methods which answer questions about the `FluentIterable`'s contents (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch" data-throw-if-not-resolved="false">#anyMatch</xref>)
     *  conversion methods which copy the `FluentIterable`'s contents into a new collection or array (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList" data-throw-if-not-resolved="false">#toList</xref>)

    Several lesser-used features are currently available only as static methods on the <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables" data-throw-if-not-resolved="false">Iterables</xref> class.


    ### Comparison to streams ###


    <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> is similar to this class, but generally more powerful, and certainly more standard. Key differences include:

     *  A stream is *single-use*; it becomes invalid as soon as any "terminal operation" such as `findFirst()` or `iterator()` is invoked. (Even though `Stream` contains all the right method *signatures* to implement <xref uid="? extends java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, it does not actually do so, to avoid implying repeat-iterability.) `FluentIterable`, on the other hand, is multiple-use, and does implement <xref uid="? extends java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>.
     *  Streams offer many features not found here, including `min/max`, `distinct`, `reduce`, `sorted`, the very powerful `collect`, and built-in support for parallelizing stream operations.
     *  `FluentIterable` contains several features not available on `Stream`, which are noted in the method descriptions below.
     *  Streams include primitive-specialized variants such as `IntStream`, the use of which is strongly recommended.
     *  Streams are standard Java, not requiring a third-party dependency.

    ### Example ###


    Here is an example that accepts a list from a database call, filters it based on a predicate, transforms it by invoking `toString()` on each element, and returns the first 10 elements as a `List`:


    ```java

    ImmutableList results =
         FluentIterable.from(database.getClientList())
             .filter(Client::isActiveInLastMonth)
             .transform(Object::toString)
             .limit(10)
             .toList();
    ```


    The approximate stream equivalent is:


    ```java

    List results =
         database.getClientList()
             .stream()
             .filter(Client::isActiveInLastMonth)
             .map(Object::toString)
             .limit(10)
             .collect(Collectors.toList());
    ```
  syntax:
    content: public abstract class FluentIterable<E> implements Iterable<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  implements:
  - java.lang.Iterable<E>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<C>copyInto(C)
  id: <C>copyInto(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <C>copyInto(C collection)
  nameWithType: FluentIterable<E>.<C>copyInto(C collection)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<C>copyInto(C collection)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.copyInto*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Copies all the elements from this fluent iterable to `collection`. This is equivalent to calling `Iterables.addAll(collection, this)`.


    **`Stream` equivalent:** `stream.forEachOrdered(collection::add)` or `stream.forEach(collection::add)`.
  syntax:
    content: public final C <C>copyInto(C collection)
    parameters:
    - id: collection
      type: C
      description: the collection to copy elements to
    return:
      type: C
      description: <code>collection</code>, for convenience
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(E[])
  id: <E>from(E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <E>from(E[] elements)
  nameWithType: FluentIterable<E>.<E>from(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>from(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.from*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable containing `elements` in the specified order.


    The returned iterable is an unmodifiable view of the input array.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.of*" data-throw-if-not-resolved="false">Stream.of(T...)</xref>.
  syntax:
    content: public static FluentIterable<E> <E>from(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>)
  id: <E>from(com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <E>from(FluentIterable<E> iterable)
  nameWithType: FluentIterable<E>.<E>from(FluentIterable<E> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>from(FluentIterable<E> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.from*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Construct a fluent iterable from another fluent iterable. This is obviously never necessary, but is intended to help call out cases where one migration from `Iterable` to `FluentIterable` has obviated the need to explicitly convert to a `FluentIterable`.
  syntax:
    content: public static FluentIterable<E> <E>from(FluentIterable<E> iterable)
    parameters:
    - id: iterable
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(java.lang.Iterable<E>)
  id: <E>from(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <E>from(Iterable<E> iterable)
  nameWithType: FluentIterable<E>.<E>from(Iterable<E> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>from(Iterable<E> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.from*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that wraps `iterable`, or `iterable` itself if it is already a `FluentIterable`.


    **`Stream` equivalent:** <xref uid="java.util.Collection.stream" data-throw-if-not-resolved="false">Collection#stream</xref> if `iterable` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>; <xref uid="com.azure.cosmos.implementation.guava25.collect.Streams.&lt;T&gt;stream(java.lang.Iterable&lt;T&gt;)" data-throw-if-not-resolved="false">Streams#stream(Iterable)</xref> otherwise.
  syntax:
    content: public static FluentIterable<E> <E>from(Iterable<E> iterable)
    parameters:
    - id: iterable
      type: java.lang.Iterable<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>of()
  id: <E>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <E>of()
  nameWithType: FluentIterable<E>.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>of()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable containing no elements.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.empty" data-throw-if-not-resolved="false">Stream#empty</xref>.
  syntax:
    content: public static FluentIterable<E> <E>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>of(E,E...)
  id: <E>of(E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <E>of(E element, E[] elements)
  nameWithType: FluentIterable<E>.<E>of(E element, E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>of(E element, E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable containing the specified elements in order.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.of*" data-throw-if-not-resolved="false">Stream.of(T...)</xref>.
  syntax:
    content: public static FluentIterable<E> <E>of(E element, E[] elements)
    parameters:
    - id: element
      type: E
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<K>index(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
  id: <K>index(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <K>index(Function<? super E,K> keyFunction)
  nameWithType: FluentIterable<E>.<K>index(Function<? super E,K> keyFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<K>index(Function<? super E,K> keyFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.index*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates an index `ImmutableListMultimap` that contains the results of applying a specified function to each item in this `FluentIterable` of values. Each element of this iterable will be stored as a value in the resulting multimap, yielding a multimap with the same size as this iterable. The key used to store that value in the multimap will be the result of calling the function on that value. The resulting multimap is created as an immutable snapshot. In the returned multimap, keys appear in the order they are first encountered, and the values corresponding to each key appear in the same order as they are encountered.


    **`Stream` equivalent:** `stream.collect(Collectors.groupingBy(keyFunction))` behaves similarly, but returns a mutable `Map>` instead, and may not preserve the order of entries).
  syntax:
    content: public final ImmutableListMultimap<K,E> <K>index(Function<? super E,K> keyFunction)
    parameters:
    - id: keyFunction
      type: com.azure.cosmos.implementation.guava25.base.Function<? super E,K>
      description: the function used to produce the key for each value
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<K>uniqueIndex(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
  id: <K>uniqueIndex(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <K>uniqueIndex(Function<? super E,K> keyFunction)
  nameWithType: FluentIterable<E>.<K>uniqueIndex(Function<? super E,K> keyFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<K>uniqueIndex(Function<? super E,K> keyFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.uniqueIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a map with the contents of this `FluentIterable` as its `values`, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying `keyFunction` to that value. These entries appear in the same order as they appeared in this fluent iterable. Example usage:


    ```java

    Color red = new Color("red", 255, 0, 0);
     ...
     FluentIterable allColors = FluentIterable.from(ImmutableSet.of(red, green, blue));

     Map colorForName = allColors.uniqueIndex(toStringFunction());
     assertThat(colorForName).containsEntry("red", red);
    ```


    If your index may associate multiple values with each key, use <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.&lt;K&gt;index(com.azure.cosmos.implementation.guava25.base.Function&lt;? super E,K&gt;)" data-throw-if-not-resolved="false">index</xref>.


    **`Stream` equivalent:** `stream.collect(ImmutableMap.toImmutableMap(keyFunction, v -> v))`.
  syntax:
    content: public final ImmutableMap<K,E> <K>uniqueIndex(Function<? super E,K> keyFunction)
    parameters:
    - id: keyFunction
      type: com.azure.cosmos.implementation.guava25.base.Function<? super E,K>
      description: the function used to produce the key for each value
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,E>
      description: >-
        a map mapping the result of evaluating the function <code>keyFunction</code> on each value
             in this fluent iterable to that value
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  id: <T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  nameWithType: FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that combines two iterables. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`. The source iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.concat" data-throw-if-not-resolved="false">Stream#concat</xref>.
  syntax:
    content: public static FluentIterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
    parameters:
    - id: a
      type: java.lang.Iterable<? extends T>
    - id: b
      type: java.lang.Iterable<? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  id: <T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  nameWithType: FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that combines three iterables. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`, followed by the elements in `c`. The source iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **`Stream` equivalent:** use nested calls to <xref uid="java.util.stream.Stream.concat" data-throw-if-not-resolved="false">Stream#concat</xref>, or see the advice in <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*" data-throw-if-not-resolved="false">#concat(Iterable...)</xref>.
  syntax:
    content: public static FluentIterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
    parameters:
    - id: a
      type: java.lang.Iterable<? extends T>
    - id: b
      type: java.lang.Iterable<? extends T>
    - id: c
      type: java.lang.Iterable<? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  id: <T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  nameWithType: FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that combines four iterables. The returned iterable has an iterator that traverses the elements in `a`, followed by the elements in `b`, followed by the elements in `c`, followed by the elements in `d`. The source iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **`Stream` equivalent:** use nested calls to <xref uid="java.util.stream.Stream.concat" data-throw-if-not-resolved="false">Stream#concat</xref>, or see the advice in <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*" data-throw-if-not-resolved="false">#concat(Iterable...)</xref>.
  syntax:
    content: public static FluentIterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
    parameters:
    - id: a
      type: java.lang.Iterable<? extends T>
    - id: b
      type: java.lang.Iterable<? extends T>
    - id: c
      type: java.lang.Iterable<? extends T>
    - id: d
      type: java.lang.Iterable<? extends T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>...)
  id: <T>concat(java.lang.Iterable<? extends T>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>concat(Iterable<? extends T>[] inputs)
  nameWithType: FluentIterable<E>.<T>concat(Iterable<? extends T>[] inputs)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends T>[] inputs)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in `inputs`. The input iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it.


    **`Stream` equivalent:** to concatenate an arbitrary number of streams, use `Stream.of(stream1, stream2, ...).flatMap(s -> s)`. If the sources are iterables, use `Stream.of(iter1, iter2, ...).flatMap(Streams::stream)`.
  syntax:
    content: public static FluentIterable<T> <T>concat(Iterable<? extends T>[] inputs)
    parameters:
    - id: inputs
      type: java.lang.Iterable<? extends T>[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  id: <T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  nameWithType: FluentIterable<E>.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that combines several iterables. The returned iterable has an iterator that traverses the elements of each iterable in `inputs`. The input iterators are not polled until necessary.


    The returned iterable's iterator supports `remove()` when the corresponding input iterator supports it. The methods of the returned iterable may throw `NullPointerException` if any of the input iterators is `null`.


    **`Stream` equivalent:** `streamOfStreams.flatMap(s -> s)` or `streamOfIterables.flatMap(Streams::stream)`. (See <xref uid="com.azure.cosmos.implementation.guava25.collect.Streams.stream" data-throw-if-not-resolved="false">Streams#stream</xref>.)
  syntax:
    content: public static FluentIterable<T> <T>concat(Iterable<? extends Iterable<? extends T>> inputs)
    parameters:
    - id: inputs
      type: java.lang.Iterable<? extends java.lang.Iterable<? extends T>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>filter(java.lang.Class<T>)
  id: <T>filter(java.lang.Class<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>filter(Class<T> type)
  nameWithType: FluentIterable<E>.<T>filter(Class<T> type)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>filter(Class<T> type)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the elements from this fluent iterable that are instances of class `type`.


    **`Stream` equivalent:** `stream.filter(type::isInstance).map(type::cast)`. This does perform a little more work than necessary, so another option is to insert an unchecked cast at some later point:


    ```java

    @SuppressWarnings({"unchecked", "rawtypes"}) // safe because of ::isInstance check
     ImmutableList result =
         (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());
    ```
  syntax:
    content: public final FluentIterable<T> <T>filter(Class<T> type)
    parameters:
    - id: type
      type: java.lang.Class<T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>transform(com.azure.cosmos.implementation.guava25.base.Function<? super E,T>)
  id: <T>transform(com.azure.cosmos.implementation.guava25.base.Function<? super E,T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>transform(Function<? super E,T> function)
  nameWithType: FluentIterable<E>.<T>transform(Function<? super E,T> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>transform(Function<? super E,T> function)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.transform*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable that applies `function` to each element of this fluent iterable.


    The returned fluent iterable's iterator supports `remove()` if this iterable's iterator does. After a successful `remove()` call, this fluent iterable no longer contains the corresponding element.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.map" data-throw-if-not-resolved="false">Stream#map</xref>.
  syntax:
    content: public final FluentIterable<T> <T>transform(Function<? super E,T> function)
    parameters:
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super E,T>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>transformAndConcat(com.azure.cosmos.implementation.guava25.base.Function<? super E,? extends java.lang.Iterable<? extends T>>)
  id: <T>transformAndConcat(com.azure.cosmos.implementation.guava25.base.Function<? super E,? extends java.lang.Iterable<? extends T>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <T>transformAndConcat(Function<? super E,? extends Iterable<? extends T>> function)
  nameWithType: FluentIterable<E>.<T>transformAndConcat(Function<? super E,? extends Iterable<? extends T>> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>transformAndConcat(Function<? super E,? extends Iterable<? extends T>> function)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.transformAndConcat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Applies `function` to each element of this fluent iterable and returns a fluent iterable with the concatenated combination of results. `function` returns an Iterable of results.


    The returned fluent iterable's iterator supports `remove()` if this function-returned iterables' iterator does. After a successful `remove()` call, the returned fluent iterable no longer contains the corresponding element.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.flatMap" data-throw-if-not-resolved="false">Stream#flatMap</xref> (using a function that produces streams, not iterables).
  syntax:
    content: public FluentIterable<T> <T>transformAndConcat(Function<? super E,? extends Iterable<? extends T>> function)
    parameters:
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super E,? extends java.lang.Iterable<? extends T>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<V>toMap(com.azure.cosmos.implementation.guava25.base.Function<? super E,V>)
  id: <V>toMap(com.azure.cosmos.implementation.guava25.base.Function<? super E,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: <V>toMap(Function<? super E,V> valueFunction)
  nameWithType: FluentIterable<E>.<V>toMap(Function<? super E,V> valueFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<V>toMap(Function<? super E,V> valueFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable map whose keys are the distinct elements of this `FluentIterable` and whose value for each key was computed by `valueFunction`. The map's iteration order is the order of the first appearance of each key in this iterable.


    When there are multiple instances of a key in this iterable, it is unspecified whether `valueFunction` will be applied to more than one instance of that key and, if it is, which result will be mapped to that key in the returned map.


    **`Stream` equivalent:** `stream.collect(ImmutableMap.toImmutableMap(k -> k, valueFunction))`.
  syntax:
    content: public final ImmutableMap<E,V> <V>toMap(Function<? super E,V> valueFunction)
    parameters:
    - id: valueFunction
      type: com.azure.cosmos.implementation.guava25.base.Function<? super E,V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<E,V>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable()
  id: FluentIterable()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: FluentIterable()
  nameWithType: FluentIterable<E>.FluentIterable()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.FluentIterable()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructor for use by subclasses.
  syntax:
    content: protected FluentIterable()
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable(java.lang.Iterable<E>)
  id: FluentIterable(java.lang.Iterable<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: FluentIterable(Iterable<E> iterable)
  nameWithType: FluentIterable<E>.FluentIterable(Iterable<E> iterable)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.FluentIterable(Iterable<E> iterable)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " FluentIterable(Iterable<E> iterable)"
    parameters:
    - id: iterable
      type: java.lang.Iterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.allMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  id: allMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: allMatch(Predicate<? super E> predicate)
  nameWithType: FluentIterable<E>.allMatch(Predicate<? super E> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.allMatch(Predicate<? super E> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.allMatch*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if every element in this fluent iterable satisfies the predicate. If this fluent iterable is empty, `true` is returned.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.allMatch" data-throw-if-not-resolved="false">Stream#allMatch</xref> (same).
  syntax:
    content: public final boolean allMatch(Predicate<? super E> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  id: anyMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: anyMatch(Predicate<? super E> predicate)
  nameWithType: FluentIterable<E>.anyMatch(Predicate<? super E> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.anyMatch(Predicate<? super E> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if any element in this fluent iterable satisfies the predicate.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.anyMatch" data-throw-if-not-resolved="false">Stream#anyMatch</xref> (same).
  syntax:
    content: public final boolean anyMatch(Predicate<? super E> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.append(E...)
  id: append(E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: append(E[] elements)
  nameWithType: FluentIterable<E>.append(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.append(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.append*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable, followed by `elements`.


    **`Stream` equivalent:** `Stream.concat(thisStream, Stream.of(elements))`.
  syntax:
    content: public final FluentIterable<E> append(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.append(java.lang.Iterable<? extends E>)
  id: append(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: append(Iterable<? extends E> other)
  nameWithType: FluentIterable<E>.append(Iterable<? extends E> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.append(Iterable<? extends E> other)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.append*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable whose iterators traverse first the elements of this fluent iterable, followed by those of `other`. The iterators are not polled until necessary.


    The returned iterable's `Iterator` supports `remove()` when the corresponding `Iterator` supports it.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.concat" data-throw-if-not-resolved="false">Stream#concat</xref>.
  syntax:
    content: public final FluentIterable<E> append(Iterable<? extends E> other)
    parameters:
    - id: other
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.contains(java.lang.Object)
  id: contains(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: contains(Object target)
  nameWithType: FluentIterable<E>.contains(Object target)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.contains(Object target)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns `true` if this fluent iterable contains any object for which `equals(target)` is true.


    **`Stream` equivalent:** `stream.anyMatch(Predicate.isEqual(target))`.
  syntax:
    content: public final boolean contains(Object target)
    parameters:
    - id: target
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle()
  id: cycle()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: cycle()
  nameWithType: FluentIterable<E>.cycle()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.cycle()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a fluent iterable whose `Iterator` cycles indefinitely over the elements of this fluent iterable.


    That iterator supports `remove()` if `iterable.iterator()` does. After `remove()` is called, subsequent cycles omit the removed element, which is no longer in this fluent iterable. The iterator's `hasNext()` method returns `true` until this fluent iterable is empty.


    **Warning:** Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit `break` or be certain that you will eventually remove all the elements.


    **`Stream` equivalent:** if the source iterable has only a single element `e`, use `Stream.generate(() -> e)`. Otherwise, collect your stream into a collection and use `Stream.generate(() -> collection).flatMap(Collection::stream)`.
  syntax:
    content: public final FluentIterable<E> cycle()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  id: filter(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: filter(Predicate<? super E> predicate)
  nameWithType: FluentIterable<E>.filter(Predicate<? super E> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.filter(Predicate<? super E> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent iterable's iterator does not support `remove()`.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.filter" data-throw-if-not-resolved="false">Stream#filter</xref> (same).
  syntax:
    content: public final FluentIterable<E> filter(Predicate<? super E> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.first()
  id: first()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: first()
  nameWithType: FluentIterable<E>.first()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.first()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.first*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="com.azure.cosmos.implementation.guava25.base.Optional" data-throw-if-not-resolved="false">Optional</xref> containing the first element in this fluent iterable. If the iterable is empty, `Optional.absent()` is returned.


    **`Stream` equivalent:** if the goal is to obtain any element, <xref uid="java.util.stream.Stream.findAny" data-throw-if-not-resolved="false">Stream#findAny</xref>; if it must specifically be the *first* element, `Stream#findFirst`.
  syntax:
    content: public final Optional<E> first()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.firstMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  id: firstMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: firstMatch(Predicate<? super E> predicate)
  nameWithType: FluentIterable<E>.firstMatch(Predicate<? super E> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.firstMatch(Predicate<? super E> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.firstMatch*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="com.azure.cosmos.implementation.guava25.base.Optional" data-throw-if-not-resolved="false">Optional</xref> containing the first element in this fluent iterable that satisfies the given predicate, if such an element exists.


    **Warning:** avoid using a `predicate` that matches `null`. If `null` is matched in this fluent iterable, a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref> will be thrown.


    **`Stream` equivalent:** `stream.filter(predicate).findFirst()`.
  syntax:
    content: public final Optional<E> firstMatch(Predicate<? super E> predicate)
    parameters:
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.get(int)
  id: get(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: get(int position)
  nameWithType: FluentIterable<E>.get(int position)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.get(int position)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the element at the specified position in this fluent iterable.


    **`Stream` equivalent:** `stream.skip(position).findFirst().get()` (but note that this throws different exception types, and throws an exception if `null` would be returned).
  syntax:
    content: public final E get(int position)
    parameters:
    - id: position
      type: int
      description: position of the element to return
    return:
      type: E
      description: the element at the specified position in this fluent iterable
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: isEmpty()
  nameWithType: FluentIterable<E>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Determines whether this fluent iterable is empty.


    **`Stream` equivalent:** `!stream.findAny().isPresent()`.
  syntax:
    content: public final boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.join(com.azure.cosmos.implementation.guava25.base.Joiner)
  id: join(com.azure.cosmos.implementation.guava25.base.Joiner)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: join(Joiner joiner)
  nameWithType: FluentIterable<E>.join(Joiner joiner)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.join(Joiner joiner)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.lang.String" data-throw-if-not-resolved="false">String</xref> containing all of the elements of this fluent iterable joined with `joiner`.


    **`Stream` equivalent:** `joiner.join(stream.iterator())`, or, if you are not using any optional `Joiner` features, `stream.collect(Collectors.joining(delimiter)`.
  syntax:
    content: public final String join(Joiner joiner)
    parameters:
    - id: joiner
      type: com.azure.cosmos.implementation.guava25.base.Joiner
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.last()
  id: last()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: last()
  nameWithType: FluentIterable<E>.last()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.last()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.last*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an <xref uid="com.azure.cosmos.implementation.guava25.base.Optional" data-throw-if-not-resolved="false">Optional</xref> containing the last element in this fluent iterable. If the iterable is empty, `Optional.absent()` is returned. If the underlying `iterable` is a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref> with <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">java.util.RandomAccess</xref> support, then this operation is guaranteed to be `O(1)`.


    **`Stream` equivalent:** `stream.reduce((a, b) -> b)`.
  syntax:
    content: public final Optional<E> last()
    return:
      type: com.azure.cosmos.implementation.guava25.base.Optional<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit(int)
  id: limit(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: limit(int maxSize)
  nameWithType: FluentIterable<E>.limit(int maxSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.limit(int maxSize)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a fluent iterable with the first `size` elements of this fluent iterable. If this fluent iterable does not contain that many elements, the returned fluent iterable will have the same behavior as this fluent iterable. The returned fluent iterable's iterator supports `remove()` if this fluent iterable's iterator does.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.limit" data-throw-if-not-resolved="false">Stream#limit</xref> (same).
  syntax:
    content: public final FluentIterable<E> limit(int maxSize)
    parameters:
    - id: maxSize
      type: int
      description: the maximum number of elements in the returned fluent iterable
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: size()
  nameWithType: FluentIterable<E>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the number of elements in this fluent iterable.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.count" data-throw-if-not-resolved="false">Stream#count</xref>.
  syntax:
    content: public final int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.skip(int)
  id: skip(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: skip(int numberToSkip)
  nameWithType: FluentIterable<E>.skip(int numberToSkip)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.skip(int numberToSkip)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.skip*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this fluent iterable that skips its first `numberToSkip` elements. If this fluent iterable contains fewer than `numberToSkip` elements, the returned fluent iterable skips all of its elements.


    Modifications to this fluent iterable before a call to `iterator()` are reflected in the returned fluent iterable. That is, the its iterator skips the first `numberToSkip` elements that exist when the iterator is created, not when `skip()` is called.


    The returned fluent iterable's iterator supports `remove()` if the `Iterator` of this fluent iterable supports it. Note that it is *not* possible to delete the last skipped element by immediately calling `remove()` on the returned fluent iterable's iterator, as the `Iterator` contract states that a call to `* remove()` before a call to `next()` will throw an <xref uid="" data-throw-if-not-resolved="false">IllegalStateException</xref>.


    **`Stream` equivalent:** <xref uid="java.util.stream.Stream.skip" data-throw-if-not-resolved="false">Stream#skip</xref> (same).
  syntax:
    content: public final FluentIterable<E> skip(int numberToSkip)
    parameters:
    - id: numberToSkip
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.stream()
  id: stream()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: stream()
  nameWithType: FluentIterable<E>.stream()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.stream()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.stream*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a stream of this fluent iterable's contents (similar to calling <xref uid="java.util.Collection.stream" data-throw-if-not-resolved="false">Collection#stream</xref> on a collection).


    **Note:** the earlier in the chain you can switch to `Stream` usage (ideally not going through `FluentIterable` at all), the more performant and idiomatic your code will be. This method is a transitional aid, to be used only when really necessary.
  syntax:
    content: public final Stream<E> stream()
    return:
      type: java.util.stream.Stream<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toArray(java.lang.Class<E>)
  id: toArray(java.lang.Class<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toArray(Class<E> type)
  nameWithType: FluentIterable<E>.toArray(Class<E> type)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toArray(Class<E> type)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an array containing all of the elements from this fluent iterable in iteration order.


    **`Stream` equivalent:** if an object array is acceptable, use `stream.toArray()`; if `type` is a class literal such as `MyType.class`, use `stream.toArray(MyType[]::new)`. Otherwise use `stream.toArray( len -> (E[]) Array.newInstance(type, len))`.
  syntax:
    content: public final E[] toArray(Class<E> type)
    parameters:
    - id: type
      type: java.lang.Class<E>
      description: the type of the elements
    return:
      type: E[]
      description: >-
        a newly-allocated array into which all the elements of this fluent iterable have been
             copied
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList()
  id: toList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toList()
  nameWithType: FluentIterable<E>.toList()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toList()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableList` containing all of the elements from this fluent iterable in proper sequence.


    **`Stream` equivalent:** pass <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.toImmutableList" data-throw-if-not-resolved="false">ImmutableList#toImmutableList</xref> to `stream.collect()`.
  syntax:
    content: public final ImmutableList<E> toList()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMultiset()
  id: toMultiset()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toMultiset()
  nameWithType: FluentIterable<E>.toMultiset()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toMultiset()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableMultiset` containing all of the elements from this fluent iterable.


    **`Stream` equivalent:** pass <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset.toImmutableMultiset" data-throw-if-not-resolved="false">ImmutableMultiset#toImmutableMultiset</xref> to `stream.collect()`.
  syntax:
    content: public final ImmutableMultiset<E> toMultiset()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSet()
  id: toSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toSet()
  nameWithType: FluentIterable<E>.toSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toSet()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableSet` containing all of the elements from this fluent iterable with duplicates removed.


    **`Stream` equivalent:** pass <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet.toImmutableSet" data-throw-if-not-resolved="false">ImmutableSet#toImmutableSet</xref> to `stream.collect()`.
  syntax:
    content: public final ImmutableSet<E> toSet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedList(java.util.Comparator<? super E>)
  id: toSortedList(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toSortedList(Comparator<? super E> comparator)
  nameWithType: FluentIterable<E>.toSortedList(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toSortedList(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableList` containing all of the elements from this `FluentIterable` in the order specified by `comparator`. To produce an `ImmutableList` sorted by its natural ordering, use `toSortedList(Ordering.natural())`.


    **`Stream` equivalent:** pass <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.toImmutableList" data-throw-if-not-resolved="false">ImmutableList#toImmutableList</xref> to `stream.sorted(comparator).collect()`.
  syntax:
    content: public final ImmutableList<E> toSortedList(Comparator<? super E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
      description: the function by which to sort list elements
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)
  id: toSortedSet(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toSortedSet(Comparator<? super E> comparator)
  nameWithType: FluentIterable<E>.toSortedSet(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toSortedSet(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an `ImmutableSortedSet` containing all of the elements from this `FluentIterable` in the order specified by `comparator`, with duplicates (determined by `comparator.compare(x, y) == 0`) removed. To produce an `ImmutableSortedSet` sorted by its natural ordering, use `toSortedSet(Ordering.natural())`.


    **`Stream` equivalent:** pass <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.toImmutableSortedSet" data-throw-if-not-resolved="false">ImmutableSortedSet#toImmutableSortedSet</xref> to `stream.collect()`.
  syntax:
    content: public final ImmutableSortedSet<E> toSortedSet(Comparator<? super E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
      description: the function by which to sort set elements
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  langs:
  - java
  name: toString()
  nameWithType: FluentIterable<E>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a string representation of this fluent iterable, with the format `[e1, e2, ..., en]`.


    **`Stream` equivalent:** `stream.collect(Collectors.joining(", ", "[", "]"))` or (less efficiently) `stream.collect(Collectors.toList()).toString()`.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable*
  name: FluentIterable
  nameWithType: FluentIterable<E>.FluentIterable
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.FluentIterable
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable
    name: FluentIterable
    fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.from*
  name: <E>from
  nameWithType: FluentIterable<E>.<E>from
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>from
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Iterable<? extends T>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable<T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable
    name: FluentIterable
    fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.concat*
  name: <T>concat
  nameWithType: FluentIterable<E>.<T>concat
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>concat
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends T>[]
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Iterable<? extends java.lang.Iterable<? extends T>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.lang.Iterable'
    name: Iterable
    fullName: '? extends java.lang.Iterable'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.of*
  name: <E>of
  nameWithType: FluentIterable<E>.<E>of
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<E>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toString*
  name: toString
  nameWithType: FluentIterable<E>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.size*
  name: size
  nameWithType: FluentIterable<E>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.contains*
  name: contains
  nameWithType: FluentIterable<E>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle*
  name: cycle
  nameWithType: FluentIterable<E>.cycle
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.cycle
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.append*
  name: append
  nameWithType: FluentIterable<E>.append
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.append
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter*
  name: filter
  nameWithType: FluentIterable<E>.filter
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.filter
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch*
  name: anyMatch
  nameWithType: FluentIterable<E>.anyMatch
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.anyMatch
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.allMatch*
  name: allMatch
  nameWithType: FluentIterable<E>.allMatch
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.allMatch
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Optional<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Optional
    name: Optional
    fullName: com.azure.cosmos.implementation.guava25.base.Optional
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.firstMatch*
  name: firstMatch
  nameWithType: FluentIterable<E>.firstMatch
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.firstMatch
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super E,T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: ','
    fullName: ','
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.transform*
  name: <T>transform
  nameWithType: FluentIterable<E>.<T>transform
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>transform
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super E,? extends java.lang.Iterable<? extends T>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: ','
    fullName: ','
  - uid: '? extends java.lang.Iterable'
    name: Iterable
    fullName: '? extends java.lang.Iterable'
  - name: <
    fullName: <
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.transformAndConcat*
  name: <T>transformAndConcat
  nameWithType: FluentIterable<E>.<T>transformAndConcat
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>transformAndConcat
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.first*
  name: first
  nameWithType: FluentIterable<E>.first
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.first
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.last*
  name: last
  nameWithType: FluentIterable<E>.last
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.last
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.skip*
  name: skip
  nameWithType: FluentIterable<E>.skip
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.skip
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit*
  name: limit
  nameWithType: FluentIterable<E>.limit
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.limit
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.isEmpty*
  name: isEmpty
  nameWithType: FluentIterable<E>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList*
  name: toList
  nameWithType: FluentIterable<E>.toList
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedList*
  name: toSortedList
  nameWithType: FluentIterable<E>.toSortedList
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toSortedList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSet*
  name: toSet
  nameWithType: FluentIterable<E>.toSet
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
    name: ImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedSet*
  name: toSortedSet
  nameWithType: FluentIterable<E>.toSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toSortedSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
    name: ImmutableMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMultiset*
  name: toMultiset
  nameWithType: FluentIterable<E>.toMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super E,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<E,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMap*
  name: <V>toMap
  nameWithType: FluentIterable<E>.<V>toMap
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<V>toMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super E,K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap<K,E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
    name: ImmutableListMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.index*
  name: <K>index
  nameWithType: FluentIterable<E>.<K>index
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<K>index
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.uniqueIndex*
  name: <K>uniqueIndex
  nameWithType: FluentIterable<E>.<K>uniqueIndex
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<K>uniqueIndex
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Class<E>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.toArray*
  name: toArray
  nameWithType: FluentIterable<E>.toArray
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.toArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.copyInto*
  name: <C>copyInto
  nameWithType: FluentIterable<E>.<C>copyInto
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<C>copyInto
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Joiner
  name: Joiner
  nameWithType: Joiner
  fullName: com.azure.cosmos.implementation.guava25.base.Joiner
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.join*
  name: join
  nameWithType: FluentIterable<E>.join
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.join
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.get*
  name: get
  nameWithType: FluentIterable<E>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.stream.Stream<E>
  spec.java:
  - uid: java.util.stream.Stream
    name: Stream
    fullName: java.util.stream.Stream
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.stream*
  name: stream
  nameWithType: FluentIterable<E>.stream
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.stream
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? extends T'
  name: '? extends T'
  nameWithType: '? extends T'
  fullName: '? extends T'
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: '? extends T>[]'
  name: '? extends T>[]'
  nameWithType: '? extends T>[]'
  fullName: '? extends T>[]'
- uid: '? extends java.lang.Iterable'
  name: '? extends Iterable'
  nameWithType: '? extends Iterable'
  fullName: '? extends java.lang.Iterable'
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: com.azure.cosmos.implementation.guava25.base.Optional
  name: Optional
  nameWithType: Optional
  fullName: com.azure.cosmos.implementation.guava25.base.Optional
- uid: '? super E,T'
  name: '? super E,T'
  nameWithType: '? super E,T'
  fullName: '? super E,T'
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super E,? extends java.lang.Iterable'
  name: '? super E,? extends Iterable'
  nameWithType: '? super E,? extends Iterable'
  fullName: '? super E,? extends java.lang.Iterable'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  name: ImmutableMultiset
  nameWithType: ImmutableMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
- uid: '? super E,V'
  name: '? super E,V'
  nameWithType: '? super E,V'
  fullName: '? super E,V'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  name: ImmutableMap
  nameWithType: ImmutableMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
- uid: E,V
  name: E,V
  nameWithType: E,V
  fullName: E,V
- uid: '? super E,K'
  name: '? super E,K'
  nameWithType: '? super E,K'
  fullName: '? super E,K'
- uid: K,E
  name: K,E
  nameWithType: K,E
  fullName: K,E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
  name: ImmutableListMultimap
  nameWithType: ImmutableListMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap
- uid: java.util.stream.Stream
  name: Stream
  nameWithType: Stream
  fullName: java.util.stream.Stream
