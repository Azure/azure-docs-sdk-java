### YamlMime:JavaMember
uid: "com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl.trainMultivariateModelAsync*"
fullName: "com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl.trainMultivariateModelAsync"
name: "trainMultivariateModelAsync"
nameWithType: "AnomalyDetectorClientImpl.trainMultivariateModelAsync"
members:
- uid: "com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl.trainMultivariateModelAsync(com.azure.ai.anomalydetector.models.ModelInfo)"
  fullName: "com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl.trainMultivariateModelAsync(ModelInfo modelRequest)"
  name: "trainMultivariateModelAsync(ModelInfo modelRequest)"
  nameWithType: "AnomalyDetectorClientImpl.trainMultivariateModelAsync(ModelInfo modelRequest)"
  summary: "Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which the first column is timestamp and the second column is value."
  parameters:
  - description: "Training request."
    name: "modelRequest"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ModelInfo?alt=com.azure.ai.anomalydetector.models.ModelInfo&text=ModelInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> trainMultivariateModelAsync(ModelInfo modelRequest)"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl.trainMultivariateModelAsync(com.azure.ai.anomalydetector.models.ModelInfo,com.azure.core.util.Context)"
  fullName: "com.azure.ai.anomalydetector.implementation.AnomalyDetectorClientImpl.trainMultivariateModelAsync(ModelInfo modelRequest, Context context)"
  name: "trainMultivariateModelAsync(ModelInfo modelRequest, Context context)"
  nameWithType: "AnomalyDetectorClientImpl.trainMultivariateModelAsync(ModelInfo modelRequest, Context context)"
  summary: "Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All time-series used in generate the model must be zipped into one single file. Each time-series will be in a single CSV file in which the first column is timestamp and the second column is value."
  parameters:
  - description: "Training request."
    name: "modelRequest"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.ModelInfo?alt=com.azure.ai.anomalydetector.models.ModelInfo&text=ModelInfo\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> trainMultivariateModelAsync(ModelInfo modelRequest, Context context)"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.anomalydetector.implementation"
artifact: com.azure:azure-ai-anomalydetector:3.0.0-beta.2
