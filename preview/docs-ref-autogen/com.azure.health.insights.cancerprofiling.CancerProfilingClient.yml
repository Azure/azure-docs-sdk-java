### YamlMime:JavaType
uid: "com.azure.health.insights.cancerprofiling.CancerProfilingClient"
fullName: "com.azure.health.insights.cancerprofiling.CancerProfilingClient"
name: "CancerProfilingClient"
nameWithType: "CancerProfilingClient"
summary: "Initializes a new instance of the synchronous Cancer<wbr>Profiling<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **CancerProfilingClient**"
methods:
- uid: "com.azure.health.insights.cancerprofiling.CancerProfilingClient.beginInferCancerProfile(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.health.insights.cancerprofiling.CancerProfilingClient.beginInferCancerProfile(BinaryData oncoPhenotypeData, RequestOptions requestOptions)"
  name: "beginInferCancerProfile(BinaryData oncoPhenotypeData, RequestOptions requestOptions)"
  nameWithType: "CancerProfilingClient.beginInferCancerProfile(BinaryData oncoPhenotypeData, RequestOptions requestOptions)"
  summary: "Create Onco Phenotype job"
  parameters:
  - description: "The body of the Onco Phenotype request."
    name: "oncoPhenotypeData"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<BinaryData,BinaryData> beginInferCancerProfile(BinaryData oncoPhenotypeData, RequestOptions requestOptions)"
  desc: "Create Onco Phenotype job\n\nCreates an Onco Phenotype job with the given request body.\n\n**Header Parameters**\n\n    | ------------------------ | ------ | -------- | -------------------------------------------- |\n    | Name                     | Type   | Required | Description                                  |\n    | repeatability-request-id | String | No       | Repeatability request ID header              |\n    | repeatability-first-sent | String | No       | Repeatability first sent header as HTTP-date |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Request Body Schema**\n\n```java\n{\n     patients (Required): [\n          (Required){\n             id: String (Required)\n             info (Optional): {\n                 sex: String(female/male/unspecified) (Optional)\n                 birthDate: LocalDate (Optional)\n                 clinicalInfo (Optional): [\n                      (Optional){\n                         system: String (Required)\n                         code: String (Required)\n                         name: String (Optional)\n                         value: String (Optional)\n                     }\n                 ]\n             }\n             data (Optional): [\n                  (Optional){\n                     type: String(note/fhirBundle/dicom/genomicSequencing) (Required)\n                     clinicalType: String(consultation/dischargeSummary/historyAndPhysical/procedure/progress/imaging/laboratory/pathology) (Optional)\n                     id: String (Required)\n                     language: String (Optional)\n                     createdDateTime: OffsetDateTime (Optional)\n                     content (Required): {\n                         sourceType: String(inline/reference) (Required)\n                         value: String (Required)\n                     }\n                 }\n             ]\n         }\n     ]\n     configuration (Optional): {\n         verbose: Boolean (Optional)\n         includeEvidence: Boolean (Optional)\n         inferenceTypes (Optional): [\n             String(tumorSite/histology/clinicalStageT/clinicalStageN/clinicalStageM/pathologicStageT/pathologicStageN/pathologicStageM) (Optional)\n         ]\n         checkForCancerCase: Boolean (Optional)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     jobId: String (Required)\n     createdDateTime: OffsetDateTime (Required)\n     expirationDateTime: OffsetDateTime (Required)\n     lastUpdateDateTime: OffsetDateTime (Required)\n     status: String(notStarted/running/succeeded/failed/partiallyCompleted) (Required)\n     errors (Optional): [\n         ResponseError (Optional)\n     ]\n     results (Optional): {\n         patients (Required): [\n              (Required){\n                 id: String (Required)\n                 inferences (Required): [\n                      (Required){\n                         type: String(tumorSite/histology/clinicalStageT/clinicalStageN/clinicalStageM/pathologicStageT/pathologicStageN/pathologicStageM) (Required)\n                         value: String (Required)\n                         description: String (Optional)\n                         confidenceScore: Double (Optional)\n                         evidence (Optional): [\n                              (Optional){\n                                 patientDataEvidence (Optional): {\n                                     id: String (Required)\n                                     text: String (Optional)\n                                     offset: int (Required)\n                                     length: int (Required)\n                                 }\n                                 patientInfoEvidence (Optional): {\n                                     system: String (Required)\n                                     code: String (Required)\n                                     name: String (Optional)\n                                     value: String (Optional)\n                                 }\n                                 importance: Double (Optional)\n                             }\n                         ]\n                         caseId: String (Optional)\n                     }\n                 ]\n             }\n         ]\n         modelVersion: String (Required)\n     }\n }\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> for polling of the response for the Onco Phenotype request."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.health.insights.cancerprofiling.CancerProfilingClient.beginInferCancerProfile(com.azure.health.insights.cancerprofiling.models.OncoPhenotypeData)"
  fullName: "com.azure.health.insights.cancerprofiling.CancerProfilingClient.beginInferCancerProfile(OncoPhenotypeData oncoPhenotypeData)"
  name: "beginInferCancerProfile(OncoPhenotypeData oncoPhenotypeData)"
  nameWithType: "CancerProfilingClient.beginInferCancerProfile(OncoPhenotypeData oncoPhenotypeData)"
  summary: "Create Onco Phenotype job"
  parameters:
  - description: "The body of the Onco Phenotype request."
    name: "oncoPhenotypeData"
    type: "<xref href=\"com.azure.health.insights.cancerprofiling.models.OncoPhenotypeData?alt=com.azure.health.insights.cancerprofiling.models.OncoPhenotypeData&text=OncoPhenotypeData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<OncoPhenotypeResult,OncoPhenotypeResult> beginInferCancerProfile(OncoPhenotypeData oncoPhenotypeData)"
  desc: "Create Onco Phenotype job\n\nCreates an Onco Phenotype job with the given request body."
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> for polling of the response for the Onco Phenotype request."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.health.insights.cancerprofiling.models.OncoPhenotypeResult?alt=com.azure.health.insights.cancerprofiling.models.OncoPhenotypeResult&text=OncoPhenotypeResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.health.insights.cancerprofiling.models.OncoPhenotypeResult?alt=com.azure.health.insights.cancerprofiling.models.OncoPhenotypeResult&text=OncoPhenotypeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the synchronous CancerProfilingClient type."
metadata: {}
package: "com.azure.health.insights.cancerprofiling"
artifact: com.azure:azure-health-insights-cancerprofiling:1.0.0-beta.1
