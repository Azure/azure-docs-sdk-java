### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.indexes.implementation.models.SearchField
  id: SearchField
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models
  children:
  - com.azure.search.documents.indexes.implementation.models.SearchField.SearchField(java.lang.String,com.azure.search.documents.indexes.implementation.models.SearchFieldDataType)
  - com.azure.search.documents.indexes.implementation.models.SearchField.getAnalyzer()
  - com.azure.search.documents.indexes.implementation.models.SearchField.getFields()
  - com.azure.search.documents.indexes.implementation.models.SearchField.getIndexAnalyzer()
  - com.azure.search.documents.indexes.implementation.models.SearchField.getName()
  - com.azure.search.documents.indexes.implementation.models.SearchField.getSearchAnalyzer()
  - com.azure.search.documents.indexes.implementation.models.SearchField.getSynonymMaps()
  - com.azure.search.documents.indexes.implementation.models.SearchField.getType()
  - com.azure.search.documents.indexes.implementation.models.SearchField.isFacetable()
  - com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable()
  - com.azure.search.documents.indexes.implementation.models.SearchField.isKey()
  - com.azure.search.documents.indexes.implementation.models.SearchField.isRetrievable()
  - com.azure.search.documents.indexes.implementation.models.SearchField.isSearchable()
  - com.azure.search.documents.indexes.implementation.models.SearchField.isSortable()
  - com.azure.search.documents.indexes.implementation.models.SearchField.setAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setFacetable(java.lang.Boolean)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setFields(java.util.List<com.azure.search.documents.indexes.implementation.models.SearchField>)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setFilterable(java.lang.Boolean)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setIndexAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setKey(java.lang.Boolean)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setRetrievable(java.lang.Boolean)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setSearchAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setSearchable(java.lang.Boolean)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setSortable(java.lang.Boolean)
  - com.azure.search.documents.indexes.implementation.models.SearchField.setSynonymMaps(java.util.List<java.lang.String>)
  - com.azure.search.documents.indexes.implementation.models.SearchField.validate()
  langs:
  - java
  name: SearchField
  nameWithType: SearchField
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField
  type: Class
  package: com.azure.search.documents.indexes.implementation.models
  summary: The SearchField model.
  syntax:
    content: public final class SearchField
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.SearchField(java.lang.String,com.azure.search.documents.indexes.implementation.models.SearchFieldDataType)
  id: SearchField(java.lang.String,com.azure.search.documents.indexes.implementation.models.SearchFieldDataType)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: SearchField(String name, SearchFieldDataType type)
  nameWithType: SearchField.SearchField(String name, SearchFieldDataType type)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.SearchField(String name, SearchFieldDataType type)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.SearchField*
  type: Constructor
  package: com.azure.search.documents.indexes.implementation.models
  summary: Creates an instance of SearchField class.
  syntax:
    content: public SearchField(String name, SearchFieldDataType type)
    parameters:
    - id: name
      type: java.lang.String
    - id: type
      type: com.azure.search.documents.indexes.implementation.models.SearchFieldDataType
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getAnalyzer()
  id: getAnalyzer()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getAnalyzer()
  nameWithType: SearchField.getAnalyzer()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getAnalyzer()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getAnalyzer*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Get the analyzer property: The name of the analyzer to use for the field. This option can be used only with searchable fields and it can't be set together with either searchAnalyzer or indexAnalyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
  syntax:
    content: public LexicalAnalyzerName getAnalyzer()
    return:
      type: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
      description: the analyzer value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getFields()
  id: getFields()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getFields()
  nameWithType: SearchField.getFields()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getFields()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getFields*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the fields property: A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields.'
  syntax:
    content: public List<SearchField> getFields()
    return:
      type: java.util.List<com.azure.search.documents.indexes.implementation.models.SearchField>
      description: the fields value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getIndexAnalyzer()
  id: getIndexAnalyzer()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getIndexAnalyzer()
  nameWithType: SearchField.getIndexAnalyzer()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getIndexAnalyzer()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getIndexAnalyzer*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the indexAnalyzer property: The name of the analyzer used at indexing time for the field. This option can be used only with searchable fields. It must be set together with searchAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields.'
  syntax:
    content: public LexicalAnalyzerName getIndexAnalyzer()
    return:
      type: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
      description: the indexAnalyzer value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getName()
  id: getName()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getName()
  nameWithType: SearchField.getName()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getName()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getName*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the name property: The name of the field, which must be unique within the fields collection of the index or parent field.'
  syntax:
    content: public String getName()
    return:
      type: java.lang.String
      description: the name value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getSearchAnalyzer()
  id: getSearchAnalyzer()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getSearchAnalyzer()
  nameWithType: SearchField.getSearchAnalyzer()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getSearchAnalyzer()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getSearchAnalyzer*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the searchAnalyzer property: The name of the analyzer used at search time for the field. This option can be used only with searchable fields. It must be set together with indexAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. This analyzer can be updated on an existing field. Must be null for complex fields.'
  syntax:
    content: public LexicalAnalyzerName getSearchAnalyzer()
    return:
      type: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
      description: the searchAnalyzer value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getSynonymMaps()
  id: getSynonymMaps()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getSynonymMaps()
  nameWithType: SearchField.getSynonymMaps()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getSynonymMaps()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getSynonymMaps*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the synonymMaps property: A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields.'
  syntax:
    content: public List<String> getSynonymMaps()
    return:
      type: java.util.List<java.lang.String>
      description: the synonymMaps value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getType()
  id: getType()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: getType()
  nameWithType: SearchField.getType()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getType()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.getType*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the type property: The data type of the field.'
  syntax:
    content: public SearchFieldDataType getType()
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchFieldDataType
      description: the type value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isFacetable()
  id: isFacetable()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: isFacetable()
  nameWithType: SearchField.isFacetable()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isFacetable()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.isFacetable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the facetable property: A value indicating whether to enable the field to be referenced in facet queries. Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, and so on). This property must be null for complex fields. Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other simple fields.'
  syntax:
    content: public Boolean isFacetable()
    return:
      type: java.lang.Boolean
      description: the facetable value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable()
  id: isFilterable()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: isFilterable()
  nameWithType: SearchField.isFilterable()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Get the filterable property: A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields."
  syntax:
    content: public Boolean isFilterable()
    return:
      type: java.lang.Boolean
      description: the filterable value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isKey()
  id: isKey()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: isKey()
  nameWithType: SearchField.isKey()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isKey()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.isKey*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the key property: A value indicating whether the field uniquely identifies documents in the index. Exactly one top-level field in each index must be chosen as the key field and it must be of type Edm.String. Key fields can be used to look up documents directly and update or delete specific documents. Default is false for simple fields and null for complex fields.'
  syntax:
    content: public Boolean isKey()
    return:
      type: java.lang.Boolean
      description: the key value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isRetrievable()
  id: isRetrievable()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: isRetrievable()
  nameWithType: SearchField.isRetrievable()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isRetrievable()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.isRetrievable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Get the retrievable property: A value indicating whether the field can be returned in a search result. You can disable this option if you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user. This property must be true for key fields, and it must be null for complex fields. This property can be changed on existing fields. Enabling this property does not cause any increase in index storage requirements. Default is true for simple fields and null for complex fields.'
  syntax:
    content: public Boolean isRetrievable()
    return:
      type: java.lang.Boolean
      description: the retrievable value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isSearchable()
  id: isSearchable()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: isSearchable()
  nameWithType: SearchField.isSearchable()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isSearchable()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.isSearchable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Get the searchable property: A value indicating whether the field is full-text searchable. This means it will undergo analysis such as word-breaking during indexing. If you set a searchable field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This enables full-text searches for these terms. Fields of type Edm.String or Collection(Edm.String) are searchable by default. This property must be false for simple fields of other non-string data types, and it must be null for complex fields. Note: searchable fields consume extra space in your index since Azure Cognitive Search will store an additional tokenized version of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set searchable to false."
  syntax:
    content: public Boolean isSearchable()
    return:
      type: java.lang.Boolean
      description: the searchable value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isSortable()
  id: isSortable()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: isSortable()
  nameWithType: SearchField.isSortable()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isSortable()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.isSortable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Get the sortable property: A value indicating whether to enable the field to be referenced in $orderby expressions. By default Azure Cognitive Search sorts results by score, but in many experiences users will want to sort by fields in the documents. A simple field can be sortable only if it is single-valued (it has a single value in the scope of the parent document). Simple collection fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex collections are also multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent field, or an ancestor field, that's the complex collection. Complex fields cannot be sortable and the sortable property must be null for such fields. The default for sortable is true for single-valued simple fields, false for multi-valued simple fields, and null for complex fields."
  syntax:
    content: public Boolean isSortable()
    return:
      type: java.lang.Boolean
      description: the sortable value.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  id: setAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setAnalyzer(LexicalAnalyzerName analyzer)
  nameWithType: SearchField.setAnalyzer(LexicalAnalyzerName analyzer)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setAnalyzer(LexicalAnalyzerName analyzer)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setAnalyzer*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Set the analyzer property: The name of the analyzer to use for the field. This option can be used only with searchable fields and it can't be set together with either searchAnalyzer or indexAnalyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
  syntax:
    content: public SearchField setAnalyzer(LexicalAnalyzerName analyzer)
    parameters:
    - id: analyzer
      type: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
      description: the analyzer value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setFacetable(java.lang.Boolean)
  id: setFacetable(java.lang.Boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setFacetable(Boolean facetable)
  nameWithType: SearchField.setFacetable(Boolean facetable)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setFacetable(Boolean facetable)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setFacetable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the facetable property: A value indicating whether to enable the field to be referenced in facet queries. Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, and so on). This property must be null for complex fields. Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other simple fields.'
  syntax:
    content: public SearchField setFacetable(Boolean facetable)
    parameters:
    - id: facetable
      type: java.lang.Boolean
      description: the facetable value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setFields(java.util.List<com.azure.search.documents.indexes.implementation.models.SearchField>)
  id: setFields(java.util.List<com.azure.search.documents.indexes.implementation.models.SearchField>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setFields(List<SearchField> fields)
  nameWithType: SearchField.setFields(List<SearchField> fields)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setFields(List<SearchField> fields)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setFields*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the fields property: A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields.'
  syntax:
    content: public SearchField setFields(List<SearchField> fields)
    parameters:
    - id: fields
      type: java.util.List<com.azure.search.documents.indexes.implementation.models.SearchField>
      description: the fields value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setFilterable(java.lang.Boolean)
  id: setFilterable(java.lang.Boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setFilterable(Boolean filterable)
  nameWithType: SearchField.setFilterable(Boolean filterable)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setFilterable(Boolean filterable)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setFilterable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Set the filterable property: A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields."
  syntax:
    content: public SearchField setFilterable(Boolean filterable)
    parameters:
    - id: filterable
      type: java.lang.Boolean
      description: the filterable value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setIndexAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  id: setIndexAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setIndexAnalyzer(LexicalAnalyzerName indexAnalyzer)
  nameWithType: SearchField.setIndexAnalyzer(LexicalAnalyzerName indexAnalyzer)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setIndexAnalyzer(LexicalAnalyzerName indexAnalyzer)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setIndexAnalyzer*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the indexAnalyzer property: The name of the analyzer used at indexing time for the field. This option can be used only with searchable fields. It must be set together with searchAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields.'
  syntax:
    content: public SearchField setIndexAnalyzer(LexicalAnalyzerName indexAnalyzer)
    parameters:
    - id: indexAnalyzer
      type: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
      description: the indexAnalyzer value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setKey(java.lang.Boolean)
  id: setKey(java.lang.Boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setKey(Boolean key)
  nameWithType: SearchField.setKey(Boolean key)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setKey(Boolean key)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setKey*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the key property: A value indicating whether the field uniquely identifies documents in the index. Exactly one top-level field in each index must be chosen as the key field and it must be of type Edm.String. Key fields can be used to look up documents directly and update or delete specific documents. Default is false for simple fields and null for complex fields.'
  syntax:
    content: public SearchField setKey(Boolean key)
    parameters:
    - id: key
      type: java.lang.Boolean
      description: the key value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setRetrievable(java.lang.Boolean)
  id: setRetrievable(java.lang.Boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setRetrievable(Boolean retrievable)
  nameWithType: SearchField.setRetrievable(Boolean retrievable)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setRetrievable(Boolean retrievable)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setRetrievable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the retrievable property: A value indicating whether the field can be returned in a search result. You can disable this option if you want to use a field (for example, margin) as a filter, sorting, or scoring mechanism but do not want the field to be visible to the end user. This property must be true for key fields, and it must be null for complex fields. This property can be changed on existing fields. Enabling this property does not cause any increase in index storage requirements. Default is true for simple fields and null for complex fields.'
  syntax:
    content: public SearchField setRetrievable(Boolean retrievable)
    parameters:
    - id: retrievable
      type: java.lang.Boolean
      description: the retrievable value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  id: setSearchAnalyzer(com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setSearchAnalyzer(LexicalAnalyzerName searchAnalyzer)
  nameWithType: SearchField.setSearchAnalyzer(LexicalAnalyzerName searchAnalyzer)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchAnalyzer(LexicalAnalyzerName searchAnalyzer)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchAnalyzer*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the searchAnalyzer property: The name of the analyzer used at search time for the field. This option can be used only with searchable fields. It must be set together with indexAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. This analyzer can be updated on an existing field. Must be null for complex fields.'
  syntax:
    content: public SearchField setSearchAnalyzer(LexicalAnalyzerName searchAnalyzer)
    parameters:
    - id: searchAnalyzer
      type: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
      description: the searchAnalyzer value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchable(java.lang.Boolean)
  id: setSearchable(java.lang.Boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setSearchable(Boolean searchable)
  nameWithType: SearchField.setSearchable(Boolean searchable)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchable(Boolean searchable)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Set the searchable property: A value indicating whether the field is full-text searchable. This means it will undergo analysis such as word-breaking during indexing. If you set a searchable field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This enables full-text searches for these terms. Fields of type Edm.String or Collection(Edm.String) are searchable by default. This property must be false for simple fields of other non-string data types, and it must be null for complex fields. Note: searchable fields consume extra space in your index since Azure Cognitive Search will store an additional tokenized version of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set searchable to false."
  syntax:
    content: public SearchField setSearchable(Boolean searchable)
    parameters:
    - id: searchable
      type: java.lang.Boolean
      description: the searchable value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSortable(java.lang.Boolean)
  id: setSortable(java.lang.Boolean)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setSortable(Boolean sortable)
  nameWithType: SearchField.setSortable(Boolean sortable)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSortable(Boolean sortable)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setSortable*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: "Set the sortable property: A value indicating whether to enable the field to be referenced in $orderby expressions. By default Azure Cognitive Search sorts results by score, but in many experiences users will want to sort by fields in the documents. A simple field can be sortable only if it is single-valued (it has a single value in the scope of the parent document). Simple collection fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex collections are also multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent field, or an ancestor field, that's the complex collection. Complex fields cannot be sortable and the sortable property must be null for such fields. The default for sortable is true for single-valued simple fields, false for multi-valued simple fields, and null for complex fields."
  syntax:
    content: public SearchField setSortable(Boolean sortable)
    parameters:
    - id: sortable
      type: java.lang.Boolean
      description: the sortable value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSynonymMaps(java.util.List<java.lang.String>)
  id: setSynonymMaps(java.util.List<java.lang.String>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: setSynonymMaps(List<String> synonymMaps)
  nameWithType: SearchField.setSynonymMaps(List<String> synonymMaps)
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSynonymMaps(List<String> synonymMaps)
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.setSynonymMaps*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: 'Set the synonymMaps property: A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields.'
  syntax:
    content: public SearchField setSynonymMaps(List<String> synonymMaps)
    parameters:
    - id: synonymMaps
      type: java.util.List<java.lang.String>
      description: the synonymMaps value to set.
    return:
      type: com.azure.search.documents.indexes.implementation.models.SearchField
      description: the SearchField object itself.
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.validate()
  id: validate()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.implementation.models.SearchField
  langs:
  - java
  name: validate()
  nameWithType: SearchField.validate()
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.validate()
  overload: com.azure.search.documents.indexes.implementation.models.SearchField.validate*
  type: Method
  package: com.azure.search.documents.indexes.implementation.models
  summary: Validates the instance.
  syntax:
    content: public void validate()
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.indexes.implementation.models.SearchFieldDataType
  name: SearchFieldDataType
  nameWithType: SearchFieldDataType
  fullName: com.azure.search.documents.indexes.implementation.models.SearchFieldDataType
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.SearchField*
  name: SearchField
  nameWithType: SearchField.SearchField
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.SearchField
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getName*
  name: getName
  nameWithType: SearchField.getName
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getName
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getType*
  name: getType
  nameWithType: SearchField.getType
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getType
  package: com.azure.search.documents.indexes.implementation.models
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isKey*
  name: isKey
  nameWithType: SearchField.isKey
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isKey
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setKey*
  name: setKey
  nameWithType: SearchField.setKey
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setKey
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isRetrievable*
  name: isRetrievable
  nameWithType: SearchField.isRetrievable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isRetrievable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setRetrievable*
  name: setRetrievable
  nameWithType: SearchField.setRetrievable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setRetrievable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isSearchable*
  name: isSearchable
  nameWithType: SearchField.isSearchable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isSearchable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchable*
  name: setSearchable
  nameWithType: SearchField.setSearchable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable*
  name: isFilterable
  nameWithType: SearchField.isFilterable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isFilterable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setFilterable*
  name: setFilterable
  nameWithType: SearchField.setFilterable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setFilterable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isSortable*
  name: isSortable
  nameWithType: SearchField.isSortable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isSortable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSortable*
  name: setSortable
  nameWithType: SearchField.setSortable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSortable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.isFacetable*
  name: isFacetable
  nameWithType: SearchField.isFacetable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.isFacetable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setFacetable*
  name: setFacetable
  nameWithType: SearchField.setFacetable
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setFacetable
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
  name: LexicalAnalyzerName
  nameWithType: LexicalAnalyzerName
  fullName: com.azure.search.documents.indexes.implementation.models.LexicalAnalyzerName
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getAnalyzer*
  name: getAnalyzer
  nameWithType: SearchField.getAnalyzer
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getAnalyzer
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setAnalyzer*
  name: setAnalyzer
  nameWithType: SearchField.setAnalyzer
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setAnalyzer
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getSearchAnalyzer*
  name: getSearchAnalyzer
  nameWithType: SearchField.getSearchAnalyzer
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getSearchAnalyzer
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchAnalyzer*
  name: setSearchAnalyzer
  nameWithType: SearchField.setSearchAnalyzer
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSearchAnalyzer
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getIndexAnalyzer*
  name: getIndexAnalyzer
  nameWithType: SearchField.getIndexAnalyzer
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getIndexAnalyzer
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setIndexAnalyzer*
  name: setIndexAnalyzer
  nameWithType: SearchField.setIndexAnalyzer
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setIndexAnalyzer
  package: com.azure.search.documents.indexes.implementation.models
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getSynonymMaps*
  name: getSynonymMaps
  nameWithType: SearchField.getSynonymMaps
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getSynonymMaps
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setSynonymMaps*
  name: setSynonymMaps
  nameWithType: SearchField.setSynonymMaps
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setSynonymMaps
  package: com.azure.search.documents.indexes.implementation.models
- uid: java.util.List<com.azure.search.documents.indexes.implementation.models.SearchField>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.implementation.models.SearchField
    name: SearchField
    fullName: com.azure.search.documents.indexes.implementation.models.SearchField
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.getFields*
  name: getFields
  nameWithType: SearchField.getFields
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.getFields
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.setFields*
  name: setFields
  nameWithType: SearchField.setFields
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.setFields
  package: com.azure.search.documents.indexes.implementation.models
- uid: com.azure.search.documents.indexes.implementation.models.SearchField.validate*
  name: validate
  nameWithType: SearchField.validate
  fullName: com.azure.search.documents.indexes.implementation.models.SearchField.validate
  package: com.azure.search.documents.indexes.implementation.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
