### YamlMime:JavaType
uid: "com.azure.core.test.annotation.AzureMethodSource"
fullName: "com.azure.core.test.annotation.AzureMethodSource"
name: "AzureMethodSource"
nameWithType: "AzureMethodSource"
summary: "This annotation provides test methods the ability to create a parameterized test using the permutation of"
syntax: "public interface **AzureMethodSource**</br> implements <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Annotation.html\">Annotation</a>"
methods:
- uid: "com.azure.core.test.annotation.AzureMethodSource.maximumServiceVersion()"
  fullName: "com.azure.core.test.annotation.AzureMethodSource.maximumServiceVersion()"
  name: "maximumServiceVersion()"
  nameWithType: "AzureMethodSource.maximumServiceVersion()"
  summary: "The maximum service version that the test can be ran against."
  modifiers:
  - "abstract"
  syntax: "public abstract String maximumServiceVersion()"
  desc: "The maximum service version that the test can be ran against.\n\nIf neither this or <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.minimumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#minimumServiceVersion()\"></xref> are set the test will run against all service versions. If only this is set then the test will run against all service versions less than or equal to the maximum. If both this and <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.minimumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#minimumServiceVersion()\"></xref> are set then the inclusive range of service versions will be used to test.\n\nIf no service versions meet the requirements of this and <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.minimumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#minimumServiceVersion()\"></xref> the test will fail.\n\n<xref uid=\"? extends com.azure.core.util.ServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceVersions\"></xref> are compared using their enum ordinal."
  returns:
    description: "The maximum service version that the test can be ran against."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.core.test.annotation.AzureMethodSource.minimumServiceVersion()"
  fullName: "com.azure.core.test.annotation.AzureMethodSource.minimumServiceVersion()"
  name: "minimumServiceVersion()"
  nameWithType: "AzureMethodSource.minimumServiceVersion()"
  summary: "The minimum service version that the test can be ran against."
  modifiers:
  - "abstract"
  syntax: "public abstract String minimumServiceVersion()"
  desc: "The minimum service version that the test can be ran against.\n\nIf neither this or <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.maximumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#maximumServiceVersion()\"></xref> are set the test will run against all service versions. If only this is set then the test will run against all service versions equal to or later than the minimum. If both this and <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.maximumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#maximumServiceVersion()\"></xref> are set then the inclusive range of service versions will be used to test.\n\nIf no service versions meet the requirements of this and <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.maximumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#maximumServiceVersion()\"></xref> the test will fail.\n\n<xref uid=\"? extends com.azure.core.util.ServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceVersions\"></xref> are compared using their enum ordinal."
  returns:
    description: "The minimum service version that the test can be ran against."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.core.test.annotation.AzureMethodSource.serviceVersionType()"
  fullName: "com.azure.core.test.annotation.AzureMethodSource.serviceVersionType()"
  name: "serviceVersionType()"
  nameWithType: "AzureMethodSource.serviceVersionType()"
  summary: "The class that represents the service version type."
  modifiers:
  - "abstract"
  syntax: "public abstract Class<? extends ServiceVersion> serviceVersionType()"
  desc: "The class that represents the service version type.\n\nThis is used to convert the <xref uid=\"com.azure.core.test.annotation.AzureMethodSource.minimumServiceVersion()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#minimumServiceVersion()\"></xref> into its <xref uid=\"? extends com.azure.core.util.ServiceVersion\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceVersion\"></xref> type."
  returns:
    description: "The class that represents the minimum service version the test can be ran against."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html\">Class</a>&lt;<xref href=\"? extends com.azure.core.util.ServiceVersion?alt=? extends com.azure.core.util.ServiceVersion&text=ServiceVersion\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.test.annotation.AzureMethodSource.sourceSupplier()"
  fullName: "com.azure.core.test.annotation.AzureMethodSource.sourceSupplier()"
  name: "sourceSupplier()"
  nameWithType: "AzureMethodSource.sourceSupplier()"
  summary: "Name of the method, either fully-qualified with package and class information or relative to the test method, which provides parameterized testing values."
  modifiers:
  - "abstract"
  syntax: "public abstract String sourceSupplier()"
  desc: "Name of the method, either fully-qualified with package and class information or relative to the test method, which provides parameterized testing values.\n\nThe source supplier method must be static and have a return type of `Stream`. If either of these don't hold true an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> will be thrown during runtime.\n\nBy default no additional parameterized testing values are expected."
  returns:
    description: "The name of the method, either fully-qualified or relative, which provides parameterized testing values."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.core.test.annotation.AzureMethodSource.useHttpClientPermutation()"
  fullName: "com.azure.core.test.annotation.AzureMethodSource.useHttpClientPermutation()"
  name: "useHttpClientPermutation()"
  nameWithType: "AzureMethodSource.useHttpClientPermutation()"
  summary: "A flag indicating if the test method should use <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClients\"></xref> when creating test permutations."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean useHttpClientPermutation()"
  desc: "A flag indicating if the test method should use <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClients\"></xref> when creating test permutations.\n\nWhen <xref uid=\"com.azure.core.test.TestMode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TestMode\"></xref> is <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TestMode#PLAYBACK\"></xref> this value is ignored as playback uses a specialized HttpClient that doesn't make network calls.\n\nBy default <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClients\"></xref> are used in testing permutations."
  returns:
    description: "A flag indication if <xref uid=\"com.azure.core.http.HttpClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpClients\"></xref> are used when creating test permutations."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "This annotation provides test methods the ability to create a parameterized test using the permutation of\n\nHttpClient X ServiceVersions X Arguments supplied by the parameterized testing values\n\nThis annotation should act similar to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParameterizedTest\"></xref>."
implements:
- "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Annotation.html\">Annotation</a>"
metadata: {}
package: "com.azure.core.test.annotation"
artifact: com.azure:azure-core-test:1.27.0-beta.5
