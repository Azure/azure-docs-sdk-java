### YamlMime:JavaType
uid: "com.azure.ai.projects.DeploymentsAsyncClient"
fullName: "com.azure.ai.projects.DeploymentsAsyncClient"
name: "DeploymentsAsyncClient"
nameWithType: "DeploymentsAsyncClient"
summary: "Initializes a new instance of the asynchronous AIProject<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **DeploymentsAsyncClient**"
methods:
- uid: "com.azure.ai.projects.DeploymentsAsyncClient.getDeployment(java.lang.String)"
  fullName: "com.azure.ai.projects.DeploymentsAsyncClient.getDeployment(String name)"
  name: "getDeployment(String name)"
  nameWithType: "DeploymentsAsyncClient.getDeployment(String name)"
  summary: "Get a deployed model."
  parameters:
  - description: "Name of the deployment."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Deployment> getDeployment(String name)"
  desc: "Get a deployed model."
  returns:
    description: "a deployed model on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.projects.models.Deployment?alt=com.azure.ai.projects.models.Deployment&text=Deployment\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.projects.DeploymentsAsyncClient.getDeploymentWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.projects.DeploymentsAsyncClient.getDeploymentWithResponse(String name, RequestOptions requestOptions)"
  name: "getDeploymentWithResponse(String name, RequestOptions requestOptions)"
  nameWithType: "DeploymentsAsyncClient.getDeploymentWithResponse(String name, RequestOptions requestOptions)"
  summary: "Get a deployed model."
  parameters:
  - description: "Name of the deployment."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeploymentWithResponse(String name, RequestOptions requestOptions)"
  desc: "Get a deployed model.\n\n**Response Body Schema**\n\n```java\n{\n     type: String(ModelDeployment) (Required)\n     name: String (Required)\n }\n```"
  returns:
    description: "a deployed model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.projects.DeploymentsAsyncClient.listDeployments()"
  fullName: "com.azure.ai.projects.DeploymentsAsyncClient.listDeployments()"
  name: "listDeployments()"
  nameWithType: "DeploymentsAsyncClient.listDeployments()"
  summary: "List all deployed models in the project."
  syntax: "public PagedFlux<Deployment> listDeployments()"
  desc: "List all deployed models in the project."
  returns:
    description: "paged collection of Deployment items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.projects.models.Deployment?alt=com.azure.ai.projects.models.Deployment&text=Deployment\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.projects.DeploymentsAsyncClient.listDeployments(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.projects.DeploymentsAsyncClient.listDeployments(RequestOptions requestOptions)"
  name: "listDeployments(RequestOptions requestOptions)"
  nameWithType: "DeploymentsAsyncClient.listDeployments(RequestOptions requestOptions)"
  summary: "List all deployed models in the project."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeployments(RequestOptions requestOptions)"
  desc: "List all deployed models in the project.\n\n**Query Parameters**\n\n    | -------------- | ------ | -------- | ------------------------------------------------------------------------ |\n    | Name           | Type   | Required | Description                                                              |\n    | modelPublisher | String | No       | Model publisher to filter models by                                      |\n    | modelName      | String | No       | Model name (the publisher specific name) to filter models by             |\n    | deploymentType | String | No       | Type of deployment to filter list by. Allowed values: \"ModelDeployment\". |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     type: String(ModelDeployment) (Required)\n     name: String (Required)\n }\n```"
  returns:
    description: "paged collection of Deployment items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.projects.DeploymentsAsyncClient.listDeployments(java.lang.String,java.lang.String,com.azure.ai.projects.models.DeploymentType)"
  fullName: "com.azure.ai.projects.DeploymentsAsyncClient.listDeployments(String modelPublisher, String modelName, DeploymentType deploymentType)"
  name: "listDeployments(String modelPublisher, String modelName, DeploymentType deploymentType)"
  nameWithType: "DeploymentsAsyncClient.listDeployments(String modelPublisher, String modelName, DeploymentType deploymentType)"
  summary: "List all deployed models in the project."
  parameters:
  - description: "Model publisher to filter models by."
    name: "modelPublisher"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Model name (the publisher specific name) to filter models by."
    name: "modelName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Type of deployment to filter list by."
    name: "deploymentType"
    type: "<xref href=\"com.azure.ai.projects.models.DeploymentType?alt=com.azure.ai.projects.models.DeploymentType&text=DeploymentType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Deployment> listDeployments(String modelPublisher, String modelName, DeploymentType deploymentType)"
  desc: "List all deployed models in the project."
  returns:
    description: "paged collection of Deployment items as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.projects.models.Deployment?alt=com.azure.ai.projects.models.Deployment&text=Deployment\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous AIProjectClient type."
metadata: {}
package: "com.azure.ai.projects"
artifact: com.azure:azure-ai-projects:1.0.0-beta.1
