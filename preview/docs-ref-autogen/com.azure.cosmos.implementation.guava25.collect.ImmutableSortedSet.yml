### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  id: ImmutableSortedSet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)
  langs:
  - java
  name: ImmutableSortedSet<E>
  nameWithType: ImmutableSortedSet<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="java.util.NavigableSet" data-throw-if-not-resolved="false">NavigableSet</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    **Warning:** as with any sorted collection, you are strongly advised not to use a <xref uid="java.util.Comparator" data-throw-if-not-resolved="false">Comparator</xref> or <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> type whose comparison behavior is *inconsistent with equals*. That is, `a.compareTo(b)` or `comparator.compare(a, b)` should equal zero *if and only if* `a.equals(b)`. If this advice is not followed, the resulting collection will not correctly obey its specification.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableSortedSet<E> extends ImmutableSortedSetFauxverideShim<E> implements NavigableSet<E>, SortedIterable<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim
  implements:
  - java.util.NavigableSet<E>
  - com.azure.cosmos.implementation.guava25.collect.SortedIterable<E>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])
  id: <E>copyOf(E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(E[] elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(Iterable<? extends E> elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to `compareTo()`, only the first one specified is included. To create a copy of a `SortedSet` that preserves the comparator, call <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOfSorted" data-throw-if-not-resolved="false">#copyOfSorted</xref> instead. This method iterates over `elements` at most once.


    Note that if `s` is a `Set`, then `ImmutableSortedSet.copyOf(s)` returns an `ImmutableSortedSet` containing each of the strings in `s`, while `ImmutableSortedSet.of(s)` returns an `ImmutableSortedSet>` containing one element (the given set itself).


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    This method is not type-safe, as it may be called on elements that are not mutually comparable.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)
  id: <E>copyOf(java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(Collection<? extends E> elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(Collection<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(Collection<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to `compareTo()`, only the first one specified is included. To create a copy of a `SortedSet` that preserves the comparator, call <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOfSorted" data-throw-if-not-resolved="false">#copyOfSorted</xref> instead. This method iterates over `elements` at most once.


    Note that if `s` is a `Set`, then `ImmutableSortedSet.copyOf(s)` returns an `ImmutableSortedSet` containing each of the strings in `s`, while `ImmutableSortedSet.of(s)` returns an `ImmutableSortedSet>` containing one element (the given set itself).


    **Note:** Despite what the method name suggests, if `elements` is an `ImmutableSortedSet`, it may be returned instead of a copy.


    This method is not type-safe, as it may be called on elements that are not mutually comparable.


    This method is safe to use even when `elements` is a synchronized or concurrent collection that is currently being modified by another thread.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(Collection<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Collection<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted set containing the given elements sorted by the given `Comparator`. When multiple elements are equivalent according to `compare()`, only the first one specified is included. This method iterates over `elements` at most once.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)
  id: <E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(Comparator<? super E> comparator, Collection<? extends E> elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(Comparator<? super E> comparator, Collection<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(Comparator<? super E> comparator, Collection<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted set containing the given elements sorted by the given `Comparator`. When multiple elements are equivalent according to `compareTo()`, only the first one specified is included.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    This method is safe to use even when `elements` is a synchronized or concurrent collection that is currently being modified by another thread.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(Comparator<? super E> comparator, Collection<? extends E> elements)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elements
      type: java.util.Collection<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by the given `Comparator`. When multiple elements are equivalent according to `compareTo()`, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(Comparator<? super E> comparator, Iterator<? extends E> elements)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOf(Iterator<? extends E> elements)
  nameWithType: ImmutableSortedSet<E>.<E>copyOf(Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf(Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to `compareTo()`, only the first one specified is included.


    This method is not type-safe, as it may be called on elements that are not mutually comparable.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOf(Iterator<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)
  id: <E>copyOfSorted(java.util.SortedSet<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>copyOfSorted(SortedSet<E> sortedSet)
  nameWithType: ImmutableSortedSet<E>.<E>copyOfSorted(SortedSet<E> sortedSet)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOfSorted(SortedSet<E> sortedSet)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOfSorted*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable sorted set containing the elements of a sorted set, sorted by the same `Comparator`. That behavior differs from <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.&lt;E&gt;copyOf(java.lang.Iterable&lt;? extends E&gt;)" data-throw-if-not-resolved="false">#copyOf(Iterable)</xref>, which always uses the natural ordering of the elements.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    This method is safe to use even when `sortedSet` is a synchronized or concurrent collection that is currently being modified by another thread.
  syntax:
    content: public static ImmutableSortedSet<E> <E>copyOfSorted(SortedSet<E> sortedSet)
    parameters:
    - id: sortedSet
      type: java.util.SortedSet<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()
  id: <E>naturalOrder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>naturalOrder()
  nameWithType: ImmutableSortedSet<E>.<E>naturalOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>naturalOrder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.naturalOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted sets whose elements are ordered by their natural ordering. The sorted sets use <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> as the comparator. This method provides more type-safety than <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.builder" data-throw-if-not-resolved="false">#builder</xref>, as it can be called only for classes that implement <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref>.
  syntax:
    content: public static ImmutableSortedSet.Builder<E> <E>naturalOrder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()
  id: <E>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of()
  nameWithType: ImmutableSortedSet<E>.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty immutable sorted set.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)
  id: <E>of(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of(E element)
  nameWithType: ImmutableSortedSet<E>.<E>of(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing a single element.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of(E element)
    parameters:
    - id: element
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)
  id: <E>of(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of(E e1, E e2)
  nameWithType: ImmutableSortedSet<E>.<E>of(E e1, E e2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of(E e1, E e2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of(E e1, E e2)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)
  id: <E>of(E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3)
  nameWithType: ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of(E e1, E e2, E e3)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)
  id: <E>of(E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4)
  nameWithType: ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3, E e4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3, E e4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of(E e1, E e2, E e3, E e4)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)
  id: <E>of(E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5)
  nameWithType: ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of(E e1, E e2, E e3, E e4, E e5)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)
  id: <E>of(E,E,E,E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
  nameWithType: ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable sorted set containing the given elements sorted by their natural ordering. When multiple elements are equivalent according to <xref uid="java.lang.Comparable.compareTo" data-throw-if-not-resolved="false">Comparable#compareTo</xref>, only the first one specified is included.
  syntax:
    content: public static ImmutableSortedSet<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E[] remaining)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: remaining
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)
  id: <E>orderedBy(java.util.Comparator<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>orderedBy(Comparator<E> comparator)
  nameWithType: ImmutableSortedSet<E>.<E>orderedBy(Comparator<E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>orderedBy(Comparator<E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.orderedBy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted sets with an explicit comparator. If the comparator has a more general type than the set being generated, such as creating a `SortedSet` with a `Comparator`, use the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor instead.
  syntax:
    content: public static ImmutableSortedSet.Builder<E> <E>orderedBy(Comparator<E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()
  id: <E>reverseOrder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>reverseOrder()
  nameWithType: ImmutableSortedSet<E>.<E>reverseOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>reverseOrder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.reverseOrder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a builder that creates immutable sorted sets whose elements are ordered by the reverse of their natural ordering.
  syntax:
    content: public static ImmutableSortedSet.Builder<E> <E>reverseOrder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)
  id: <E>toImmutableSortedSet(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: <E>toImmutableSortedSet(Comparator<? super E> comparator)
  nameWithType: ImmutableSortedSet<E>.<E>toImmutableSortedSet(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>toImmutableSortedSet(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.toImmutableSortedSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that accumulates the input elements into a new `ImmutableSortedSet`, ordered by the specified comparator.


    If the elements contain duplicates (according to the comparator), only the first duplicate in encounter order will appear in the result.
  syntax:
    content: public static Collector<E,?,ImmutableSortedSet<E>> <E>toImmutableSortedSet(Comparator<? super E> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    return:
      type: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ImmutableSortedSet(java.util.Comparator<? super E>)
  id: ImmutableSortedSet(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: ImmutableSortedSet(Comparator<? super E> comparator)
  nameWithType: ImmutableSortedSet<E>.ImmutableSortedSet(Comparator<? super E> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.ImmutableSortedSet(Comparator<? super E> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ImmutableSortedSet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableSortedSet(Comparator<? super E> comparator)"
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)
  id: ceiling(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: ceiling(E e)
  nameWithType: ImmutableSortedSet<E>.ceiling(E e)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.ceiling(E e)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E ceiling(E e)
    parameters:
    - id: e
      type: E
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()
  id: comparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: comparator()
  nameWithType: ImmutableSortedSet<E>.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.comparator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the comparator that orders the elements, which is <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.&lt;C&gt;natural()" data-throw-if-not-resolved="false">Ordering#natural()</xref> when the natural ordering of the elements is used. Note that its behavior is not consistent with <xref uid="java.util.SortedSet.comparator*" data-throw-if-not-resolved="false">SortedSet#comparator()</xref>, which returns `null` to indicate natural ordering.
  syntax:
    content: public Comparator<? super E> comparator()
    return:
      type: java.util.Comparator<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()
  id: descendingIterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: descendingIterator()
  nameWithType: ImmutableSortedSet<E>.descendingIterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.descendingIterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public abstract UnmodifiableIterator<E> descendingIterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()
  id: descendingSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: descendingSet()
  nameWithType: ImmutableSortedSet<E>.descendingSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.descendingSet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedSet<E> descendingSet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()
  id: first()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: first()
  nameWithType: ImmutableSortedSet<E>.first()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.first()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E first()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)
  id: floor(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: floor(E e)
  nameWithType: ImmutableSortedSet<E>.floor(E e)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.floor(E e)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E floor(E e)
    parameters:
    - id: e
      type: E
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)
  id: headSet(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: headSet(E toElement)
  nameWithType: ImmutableSortedSet<E>.headSet(E toElement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.headSet(E toElement)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a serializable `ImmutableSortedSet`.


    The <xref uid="java.util.SortedSet.headSet" data-throw-if-not-resolved="false">SortedSet#headSet</xref> documentation states that a subset of a subset throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `toElement` greater than an earlier `toElement`. However, this method doesn't throw an exception in that situation, but instead keeps the original `toElement`.
  syntax:
    content: public ImmutableSortedSet<E> headSet(E toElement)
    parameters:
    - id: toElement
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)
  id: headSet(E,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: headSet(E toElement, boolean inclusive)
  nameWithType: ImmutableSortedSet<E>.headSet(E toElement, boolean inclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.headSet(E toElement, boolean inclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedSet<E> headSet(E toElement, boolean inclusive)
    parameters:
    - id: toElement
      type: E
    - id: inclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)
  id: higher(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: higher(E e)
  nameWithType: ImmutableSortedSet<E>.higher(E e)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.higher(E e)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E higher(E e)
    parameters:
    - id: e
      type: E
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: iterator()
  nameWithType: ImmutableSortedSet<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable iterator across the elements in this collection.
  syntax:
    content: public abstract UnmodifiableIterator<E> iterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()
  id: last()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: last()
  nameWithType: ImmutableSortedSet<E>.last()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.last()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E last()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)
  id: lower(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: lower(E e)
  nameWithType: ImmutableSortedSet<E>.lower(E e)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.lower(E e)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E lower(E e)
    parameters:
    - id: e
      type: E
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()
  id: pollFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: pollFirst()
  nameWithType: ImmutableSortedSet<E>.pollFirst()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.pollFirst()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the set unmodified.
  syntax:
    content: public final E pollFirst()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()
  id: pollLast()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: pollLast()
  nameWithType: ImmutableSortedSet<E>.pollLast()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.pollLast()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the set unmodified.
  syntax:
    content: public final E pollLast()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()
  id: spliterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: spliterator()
  nameWithType: ImmutableSortedSet<E>.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.spliterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Spliterator<E> spliterator()
    return:
      type: java.util.Spliterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)
  id: subSet(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: subSet(E fromElement, E toElement)
  nameWithType: ImmutableSortedSet<E>.subSet(E fromElement, E toElement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.subSet(E fromElement, E toElement)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a serializable `ImmutableSortedSet`.


    The <xref uid="java.util.SortedSet.subSet" data-throw-if-not-resolved="false">SortedSet#subSet</xref> documentation states that a subset of a subset throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromElement` smaller than an earlier `fromElement`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromElement`. Similarly, this method keeps the original `toElement`, instead of throwing an exception, if passed a `toElement` greater than an earlier `toElement`.
  syntax:
    content: public ImmutableSortedSet<E> subSet(E fromElement, E toElement)
    parameters:
    - id: fromElement
      type: E
    - id: toElement
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)
  id: subSet(E,boolean,E,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
  nameWithType: ImmutableSortedSet<E>.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)
    parameters:
    - id: fromElement
      type: E
    - id: fromInclusive
      type: boolean
    - id: toElement
      type: E
    - id: toInclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)
  id: tailSet(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: tailSet(E fromElement)
  nameWithType: ImmutableSortedSet<E>.tailSet(E fromElement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.tailSet(E fromElement)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a serializable `ImmutableSortedSet`.


    The <xref uid="java.util.SortedSet.tailSet" data-throw-if-not-resolved="false">SortedSet#tailSet</xref> documentation states that a subset of a subset throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromElement` smaller than an earlier `fromElement`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromElement`.
  syntax:
    content: public ImmutableSortedSet<E> tailSet(E fromElement)
    parameters:
    - id: fromElement
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)
  id: tailSet(E,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  langs:
  - java
  name: tailSet(E fromElement, boolean inclusive)
  nameWithType: ImmutableSortedSet<E>.tailSet(E fromElement, boolean inclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.tailSet(E fromElement, boolean inclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ImmutableSortedSet<E> tailSet(E fromElement, boolean inclusive)
    parameters:
    - id: fromElement
      type: E
    - id: inclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
references:
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ImmutableSortedSet*
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet<E>.ImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.ImmutableSortedSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
    name: ImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.toImmutableSortedSet*
  name: <E>toImmutableSortedSet
  nameWithType: ImmutableSortedSet<E>.<E>toImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>toImmutableSortedSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
    name: ImmutableSortedSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.of*
  name: <E>of
  nameWithType: ImmutableSortedSet<E>.<E>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOf*
  name: <E>copyOf
  nameWithType: ImmutableSortedSet<E>.<E>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Collection<? extends E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<? extends E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.SortedSet<E>
  spec.java:
  - uid: java.util.SortedSet
    name: SortedSet
    fullName: java.util.SortedSet
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.copyOfSorted*
  name: <E>copyOfSorted
  nameWithType: ImmutableSortedSet<E>.<E>copyOfSorted
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>copyOfSorted
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.orderedBy*
  name: <E>orderedBy
  nameWithType: ImmutableSortedSet<E>.<E>orderedBy
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>orderedBy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.reverseOrder*
  name: <E>reverseOrder
  nameWithType: ImmutableSortedSet<E>.<E>reverseOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>reverseOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.naturalOrder*
  name: <E>naturalOrder
  nameWithType: ImmutableSortedSet<E>.<E>naturalOrder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.<E>naturalOrder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator*
  name: comparator
  nameWithType: ImmutableSortedSet<E>.comparator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.comparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator*
  name: iterator
  nameWithType: ImmutableSortedSet<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet*
  name: headSet
  nameWithType: ImmutableSortedSet<E>.headSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.headSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet*
  name: subSet
  nameWithType: ImmutableSortedSet<E>.subSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.subSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet*
  name: tailSet
  nameWithType: ImmutableSortedSet<E>.tailSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.tailSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower*
  name: lower
  nameWithType: ImmutableSortedSet<E>.lower
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.lower
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor*
  name: floor
  nameWithType: ImmutableSortedSet<E>.floor
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.floor
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling*
  name: ceiling
  nameWithType: ImmutableSortedSet<E>.ceiling
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.ceiling
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher*
  name: higher
  nameWithType: ImmutableSortedSet<E>.higher
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.higher
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first*
  name: first
  nameWithType: ImmutableSortedSet<E>.first
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.first
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last*
  name: last
  nameWithType: ImmutableSortedSet<E>.last
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.last
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst*
  name: pollFirst
  nameWithType: ImmutableSortedSet<E>.pollFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.pollFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast*
  name: pollLast
  nameWithType: ImmutableSortedSet<E>.pollLast
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.pollLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet*
  name: descendingSet
  nameWithType: ImmutableSortedSet<E>.descendingSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.descendingSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Spliterator<E>
  spec.java:
  - uid: java.util.Spliterator
    name: Spliterator
    fullName: java.util.Spliterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator*
  name: spliterator
  nameWithType: ImmutableSortedSet<E>.spliterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.spliterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator*
  name: descendingIterator
  nameWithType: ImmutableSortedSet<E>.descendingIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>.descendingIterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim<E>
  name: ImmutableSortedSetFauxverideShim<E>
  nameWithType: ImmutableSortedSetFauxverideShim<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim<E>
- uid: com.azure.cosmos.implementation.guava25.collect.SortedIterable<E>
  name: SortedIterable<E>
  nameWithType: SortedIterable<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedIterable<E>
- uid: java.util.NavigableSet<E>
  name: NavigableSet<E>
  nameWithType: NavigableSet<E>
  fullName: java.util.NavigableSet<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  name: ImmutableCollection.removeAll(Collection<?>)
  nameWithType: ImmutableCollection.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  name: ImmutableCollection.add(E)
  nameWithType: ImmutableCollection.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  name: ImmutableCollection.toArray()
  nameWithType: ImmutableCollection.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  name: ImmutableCollection.remove(Object)
  nameWithType: ImmutableCollection.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  name: ImmutableCollection.removeIf(Predicate<? super E>)
  nameWithType: ImmutableCollection.removeIf(Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E)
  name: ImmutableSortedSetFauxverideShim.<E>of(E,E)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>of(E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()
  name: ImmutableSortedSetFauxverideShim.<E>builder()
  nameWithType: ImmutableSortedSetFauxverideShim.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
  name: ImmutableSet.hashCode()
  nameWithType: ImmutableSet.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of()
  name: ImmutableSet.<E>of()
  nameWithType: ImmutableSet.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  name: ImmutableCollection.<T>toArray(T[])
  nameWithType: ImmutableCollection.<T>toArray(T[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
  name: ImmutableSet.equals(Object)
  nameWithType: ImmutableSet.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  name: ImmutableCollection.addAll(Collection<? extends E>)
  nameWithType: ImmutableCollection.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  name: ImmutableCollection.retainAll(Collection<?>)
  nameWithType: ImmutableCollection.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Collection<? extends E>)
  name: ImmutableSet.<E>copyOf(Collection<? extends E>)
  nameWithType: ImmutableSet.<E>copyOf(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E)
  name: ImmutableSortedSetFauxverideShim.<E>of(E,E,E)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>of(E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Iterator<? extends E>)
  name: ImmutableSet.<E>copyOf(Iterator<? extends E>)
  nameWithType: ImmutableSet.<E>copyOf(Iterator<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Iterator<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E)
  name: ImmutableSortedSetFauxverideShim.<E>of(E)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>of(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E,E,E...)
  name: ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E,E,E)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E,E,E...)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  name: ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  nameWithType: ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  name: ImmutableCollection.spliterator()
  nameWithType: ImmutableCollection.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  name: ImmutableCollection.contains(Object)
  nameWithType: ImmutableCollection.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  name: ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  name: ImmutableCollection.clear()
  nameWithType: ImmutableCollection.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>copyOf(E[])
  name: ImmutableSortedSetFauxverideShim.<E>copyOf(E[])
  nameWithType: ImmutableSortedSetFauxverideShim.<E>copyOf(E[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>copyOf(E[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
  name: ImmutableSet.asList()
  nameWithType: ImmutableSet.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E)
  name: ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator()
  name: ImmutableSet.iterator()
  nameWithType: ImmutableSet.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.lang.Iterable<? extends E>)
  name: ImmutableSet.<E>copyOf(Iterable<? extends E>)
  nameWithType: ImmutableSet.<E>copyOf(Iterable<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.lang.Iterable<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E)
  name: ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
  name: ImmutableSortedSet.Builder<E>
  nameWithType: ImmutableSortedSet.Builder<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  name: E,?,ImmutableSortedSet
  nameWithType: E,?,ImmutableSortedSet
  fullName: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.SortedSet
  name: SortedSet
  nameWithType: SortedSet
  fullName: java.util.SortedSet
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: java.util.Spliterator
  name: Spliterator
  nameWithType: Spliterator
  fullName: java.util.Spliterator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim
  name: ImmutableSortedSetFauxverideShim
  nameWithType: ImmutableSortedSetFauxverideShim
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim
- uid: com.azure.cosmos.implementation.guava25.collect.SortedIterable
  name: SortedIterable
  nameWithType: SortedIterable
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedIterable
- uid: java.util.NavigableSet
  name: NavigableSet
  nameWithType: NavigableSet
  fullName: java.util.NavigableSet
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
  name: ImmutableCollection.removeAll(Collection
  nameWithType: ImmutableCollection.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
  name: ImmutableCollection.removeIf(Predicate
  nameWithType: ImmutableCollection.removeIf(Predicate
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: E>of(E,E)
  name: E>of(E,E)
  nameWithType: E>of(E,E)
  fullName: E>of(E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.
  name: ImmutableSortedSetFauxverideShim.
  nameWithType: ImmutableSortedSetFauxverideShim.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.
- uid: E>builder()
  name: E>builder()
  nameWithType: E>builder()
  fullName: E>builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.
  name: ImmutableSet.
  nameWithType: ImmutableSet.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.
- uid: E>of()
  name: E>of()
  nameWithType: E>of()
  fullName: E>of()
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
  name: ImmutableCollection.
  nameWithType: ImmutableCollection.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
  name: ImmutableCollection.addAll(Collection
  nameWithType: ImmutableCollection.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
  name: ImmutableCollection.retainAll(Collection
  nameWithType: ImmutableCollection.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
- uid: E>copyOf(java.util.Collection
  name: E>copyOf(Collection
  nameWithType: E>copyOf(Collection
  fullName: E>copyOf(java.util.Collection
- uid: E>of(E,E,E)
  name: E>of(E,E,E)
  nameWithType: E>of(E,E,E)
  fullName: E>of(E,E,E)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: E>copyOf(java.util.Iterator
  name: E>copyOf(Iterator
  nameWithType: E>copyOf(Iterator
  fullName: E>copyOf(java.util.Iterator
- uid: E>of(E)
  name: E>of(E)
  nameWithType: E>of(E)
  fullName: E>of(E)
- uid: E>of(E,E,E,E,E,E,E...)
  name: E>of(E,E,E,E,E,E,E)
  nameWithType: E>of(E,E,E,E,E,E,E)
  fullName: E>of(E,E,E,E,E,E,E...)
- uid: E>toImmutableSet()
  name: E>toImmutableSet()
  nameWithType: E>toImmutableSet()
  fullName: E>toImmutableSet()
- uid: E>builderWithExpectedSize(int)
  name: E>builderWithExpectedSize(int)
  nameWithType: E>builderWithExpectedSize(int)
  fullName: E>builderWithExpectedSize(int)
- uid: E>copyOf(E[])
  name: E>copyOf(E[])
  nameWithType: E>copyOf(E[])
  fullName: E>copyOf(E[])
- uid: E>of(E,E,E,E,E)
  name: E>of(E,E,E,E,E)
  nameWithType: E>of(E,E,E,E,E)
  fullName: E>of(E,E,E,E,E)
- uid: E>copyOf(java.lang.Iterable
  name: E>copyOf(Iterable
  nameWithType: E>copyOf(Iterable
  fullName: E>copyOf(java.lang.Iterable
- uid: E>of(E,E,E,E)
  name: E>of(E,E,E,E)
  nameWithType: E>of(E,E,E,E)
  fullName: E>of(E,E,E,E)
