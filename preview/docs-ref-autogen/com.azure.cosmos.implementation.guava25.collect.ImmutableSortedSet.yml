### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<E>"
name: "ImmutableSortedSet<E>"
nameWithType: "ImmutableSortedSet<E>"
summary: "A <xref uid=\"java.util.NavigableSet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"NavigableSet\"></xref> whose contents will never change, with many other important properties detailed at <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableCollection\"></xref>.\n\n**Warning:** as with any sorted collection, you are strongly advised not to use a <xref uid=\"java.util.Comparator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator\"></xref> or <xref uid=\"java.lang.Comparable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparable\"></xref> type whose comparison behavior is *inconsistent with equals*. That is, `a.compareTo(b)` or `comparator.compare(a, b)` should equal zero *if and only if* `a.equals(b)`. If this advice is not followed, the resulting collection will not correctly obey its specification.\n\nSee the Guava User Guide article on [ immutable collections][immutable collections].\n\n\n[immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.AbstractCollection\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSet\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>copyOf(java.util.Iterator<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.<E>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.iterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>copyOf(E[])"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>of(E,E,E,E,E,E,E...)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
- "java.util.AbstractCollection.isEmpty()"
- "java.util.AbstractCollection.size()"
- "java.util.AbstractCollection.toString()"
syntax: "public abstract class ImmutableSortedSet<E> extends ImmutableSortedSetFauxverideShim<E> implements NavigableSet<E>, SortedIterable<E>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)"
type: "class"
typeParameters:
- name: "E"
implements:
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.SortedIterable?alt=com.azure.cosmos.implementation.guava25.collect.SortedIterable&text=SortedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"java.util.NavigableSet?alt=java.util.NavigableSet&text=NavigableSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
