### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.binary.Base32InputStream
  id: Base32InputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary
  children:
  - org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(java.io.InputStream)
  - org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(java.io.InputStream,boolean)
  - org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(java.io.InputStream,boolean,int,byte[])
  langs:
  - java
  name: Base32InputStream
  nameWithType: Base32InputStream
  fullName: org.apache.commons.codec.binary.Base32InputStream
  type: Class
  package: org.apache.commons.codec.binary
  summary: >-
    Provides Base32 encoding and decoding in a streaming fashion (unlimited size). When encoding the default lineLength is 76 characters and the default lineEnding is CRLF, but these can be overridden by using the appropriate constructor.


    The default behaviour of the Base32InputStream is to DECODE, whereas the default behaviour of the Base32OutputStream is to ENCODE, but this behaviour can be overridden by using a different constructor.


    Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).
  syntax:
    content: public class Base32InputStream extends BaseNCodecInputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  - java.io.FilterInputStream
  - org.apache.commons.codec.binary.BaseNCodecInputStream
  inheritedMembers:
  - java.io.FilterInputStream.close()
  - java.io.FilterInputStream.read(byte[])
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.apache.commons.codec.binary.BaseNCodecInputStream.available()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int)
  - org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.read()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)
  - org.apache.commons.codec.binary.BaseNCodecInputStream.reset()
  - org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)
- uid: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(java.io.InputStream)
  id: Base32InputStream(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32InputStream
  langs:
  - java
  name: Base32InputStream(InputStream in)
  nameWithType: Base32InputStream.Base32InputStream(InputStream in)
  fullName: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(InputStream in)
  overload: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: Creates a Base32InputStream such that all data read is Base32-decoded from the original provided InputStream.
  syntax:
    content: public Base32InputStream(InputStream in)
    parameters:
    - id: in
      type: java.io.InputStream
      description: InputStream to wrap.
- uid: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(java.io.InputStream,boolean)
  id: Base32InputStream(java.io.InputStream,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32InputStream
  langs:
  - java
  name: Base32InputStream(InputStream in, boolean doEncode)
  nameWithType: Base32InputStream.Base32InputStream(InputStream in, boolean doEncode)
  fullName: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(InputStream in, boolean doEncode)
  overload: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original provided InputStream.
  syntax:
    content: public Base32InputStream(InputStream in, boolean doEncode)
    parameters:
    - id: in
      type: java.io.InputStream
      description: InputStream to wrap.
    - id: doEncode
      type: boolean
      description: true if we should encode all data read from us, false if we should decode.
- uid: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(java.io.InputStream,boolean,int,byte[])
  id: Base32InputStream(java.io.InputStream,boolean,int,byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base32InputStream
  langs:
  - java
  name: Base32InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator)
  nameWithType: Base32InputStream.Base32InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator)
  fullName: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator)
  overload: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: Creates a Base32InputStream such that all data read is either Base32-encoded or Base32-decoded from the original provided InputStream.
  syntax:
    content: public Base32InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator)
    parameters:
    - id: in
      type: java.io.InputStream
      description: InputStream to wrap.
    - id: doEncode
      type: boolean
      description: true if we should encode all data read from us, false if we should decode.
    - id: lineLength
      type: int
      description: >-
        If doEncode is true, each line of encoded data will contain lineLength characters (rounded down to
                    nearest multiple of 4). If lineLength &lt;= 0, the encoded data is not divided into lines. If doEncode
                    is false, lineLength is ignored.
    - id: lineSeparator
      type: byte[]
      description: >-
        If doEncode is true, each line of encoded data will be terminated with this byte sequence (e.g. \r\n).
                    If lineLength &lt;= 0, the lineSeparator is not used. If doEncode is false lineSeparator is ignored.
references:
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream*
  name: Base32InputStream
  nameWithType: Base32InputStream.Base32InputStream
  fullName: org.apache.commons.codec.binary.Base32InputStream.Base32InputStream
  package: org.apache.commons.codec.binary
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream
  name: BaseNCodecInputStream
  nameWithType: BaseNCodecInputStream
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)
  name: BaseNCodecInputStream.read(byte[],int,int)
  nameWithType: BaseNCodecInputStream.read(byte[],int,int)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.read(byte[],int,int)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)
  name: BaseNCodecInputStream.skip(long)
  nameWithType: BaseNCodecInputStream.skip(long)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.skip(long)
- uid: java.io.FilterInputStream.close()
  name: FilterInputStream.close()
  nameWithType: FilterInputStream.close()
  fullName: java.io.FilterInputStream.close()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int)
  name: BaseNCodecInputStream.mark(int)
  nameWithType: BaseNCodecInputStream.mark(int)
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.mark(int)
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()
  name: BaseNCodecInputStream.markSupported()
  nameWithType: BaseNCodecInputStream.markSupported()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.markSupported()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.FilterInputStream.read(byte[])
  name: FilterInputStream.read(byte[])
  nameWithType: FilterInputStream.read(byte[])
  fullName: java.io.FilterInputStream.read(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.available()
  name: BaseNCodecInputStream.available()
  nameWithType: BaseNCodecInputStream.available()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.available()
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.reset()
  name: BaseNCodecInputStream.reset()
  nameWithType: BaseNCodecInputStream.reset()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.reset()
- uid: org.apache.commons.codec.binary.BaseNCodecInputStream.read()
  name: BaseNCodecInputStream.read()
  nameWithType: BaseNCodecInputStream.read()
  fullName: org.apache.commons.codec.binary.BaseNCodecInputStream.read()
