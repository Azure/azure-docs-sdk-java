### YamlMime:ManagedReference
items:
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  id: ChunkedInputStream
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io
  children:
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream)
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream,org.apache.hc.core5.http.config.Http1Config)
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.available()
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.close()
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.getFooters()
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.read()
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.read(byte[])
  - org.apache.hc.core5.http.impl.io.ChunkedInputStream.read(byte[],int,int)
  langs:
  - java
  name: ChunkedInputStream
  nameWithType: ChunkedInputStream
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  type: Class
  package: org.apache.hc.core5.http.impl.io
  summary: >-
    Implements chunked transfer coding. The content is received in small chunks. Entities transferred using this input stream can be of unlimited length. After the stream is read to the end, it provides access to the trailers, if any.


    Note that this class NEVER closes the underlying stream, even when close gets called. Instead, it will read until the "end" of its chunking on close, which allows for the seamless execution of subsequent HTTP 1.1 requests, while not requiring the client to remember to read the entire contents of the response.
  syntax:
    content: public class ChunkedInputStream extends InputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  inheritedMembers:
  - java.io.InputStream.available()
  - java.io.InputStream.close()
  - java.io.InputStream.mark(int)
  - java.io.InputStream.markSupported()
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.read()
  - java.io.InputStream.read(byte[])
  - java.io.InputStream.read(byte[],int,int)
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.reset()
  - java.io.InputStream.skip(long)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream)
  id: ChunkedInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream)
  nameWithType: ChunkedInputStream.ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream)
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream)
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream*
  type: Constructor
  package: org.apache.hc.core5.http.impl.io
  summary: Wraps session input stream and reads chunk coded input.
  syntax:
    content: public ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream)
    parameters:
    - id: buffer
      type: org.apache.hc.core5.http.io.SessionInputBuffer
      description: Session input buffer
    - id: inputStream
      type: java.io.InputStream
      description: Input stream
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream,org.apache.hc.core5.http.config.Http1Config)
  id: ChunkedInputStream(org.apache.hc.core5.http.io.SessionInputBuffer,java.io.InputStream,org.apache.hc.core5.http.config.Http1Config)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream, Http1Config http1Config)
  nameWithType: ChunkedInputStream.ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream, Http1Config http1Config)
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream, Http1Config http1Config)
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream*
  type: Constructor
  package: org.apache.hc.core5.http.impl.io
  summary: Default constructor.
  syntax:
    content: public ChunkedInputStream(SessionInputBuffer buffer, InputStream inputStream, Http1Config http1Config)
    parameters:
    - id: buffer
      type: org.apache.hc.core5.http.io.SessionInputBuffer
      description: Session input buffer
    - id: inputStream
      type: java.io.InputStream
      description: Input stream
    - id: http1Config
      type: org.apache.hc.core5.http.config.Http1Config
      description: Message http1Config. If <code>null</code> <xref uid="org.apache.hc.core5.http.config.Http1Config.DEFAULT" data-throw-if-not-resolved="false">Http1Config#DEFAULT</xref> will be used.
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.available()
  id: available()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: available()
  nameWithType: ChunkedInputStream.available()
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.available()
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.available*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  syntax:
    content: public int available()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: close()
  nameWithType: ChunkedInputStream.close()
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.close()
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.close*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Upon close, this reads the remainder of the chunked message, leaving the underlying socket at a position to start reading the next response without scanning.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.getFooters()
  id: getFooters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: getFooters()
  nameWithType: ChunkedInputStream.getFooters()
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.getFooters()
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.getFooters*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  syntax:
    content: public Header[] getFooters()
    return:
      type: org.apache.hc.core5.http.Header[]
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read()
  id: read()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: read()
  nameWithType: ChunkedInputStream.read()
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read()
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: >-
    Returns all the data in a chunked stream in coalesced form. A chunk is followed by a CRLF. The method returns -1 as soon as a chunksize of 0 is detected.


    Trailer headers are read automatically at the end of the stream and can be obtained with the getResponseFooters() method.
  syntax:
    content: public int read()
    return:
      type: int
      description: >-
        -1 of the end of the stream has been reached or the next data
         byte
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read(byte[])
  id: read(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: read(byte[] b)
  nameWithType: ChunkedInputStream.read(byte[] b)
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read(byte[] b)
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Read some bytes from the stream.
  syntax:
    content: public int read(byte[] b)
    parameters:
    - id: b
      type: byte[]
      description: The byte array that will hold the contents from the stream.
    return:
      type: int
      description: >-
        The number of bytes returned or -1 if the end of stream has been
         reached.
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.hc.core5.http.impl.io.ChunkedInputStream
  langs:
  - java
  name: read(byte[] b, int off, int len)
  nameWithType: ChunkedInputStream.read(byte[] b, int off, int len)
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read(byte[] b, int off, int len)
  overload: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read*
  type: Method
  package: org.apache.hc.core5.http.impl.io
  summary: Read some bytes from the stream.
  syntax:
    content: public int read(byte[] b, int off, int len)
    parameters:
    - id: b
      type: byte[]
      description: The byte array that will hold the contents from the stream.
    - id: off
      type: int
      description: >-
        The offset into the byte array at which bytes will start to be
         placed.
    - id: len
      type: int
      description: the maximum number of bytes that can be returned.
    return:
      type: int
      description: >-
        The number of bytes returned or -1 if the end of stream has been
         reached.
  exceptions:
  - type: java.io.IOException
    description: in case of an I/O error
references:
- uid: org.apache.hc.core5.http.io.SessionInputBuffer
  name: SessionInputBuffer
  nameWithType: SessionInputBuffer
  fullName: org.apache.hc.core5.http.io.SessionInputBuffer
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: org.apache.hc.core5.http.config.Http1Config
  name: Http1Config
  nameWithType: Http1Config
  fullName: org.apache.hc.core5.http.config.Http1Config
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream*
  name: ChunkedInputStream
  nameWithType: ChunkedInputStream.ChunkedInputStream
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.ChunkedInputStream
  package: org.apache.hc.core5.http.impl.io
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.available*
  name: available
  nameWithType: ChunkedInputStream.available
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.available
  package: org.apache.hc.core5.http.impl.io
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read*
  name: read
  nameWithType: ChunkedInputStream.read
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.read
  package: org.apache.hc.core5.http.impl.io
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.close*
  name: close
  nameWithType: ChunkedInputStream.close
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.close
  package: org.apache.hc.core5.http.impl.io
- uid: org.apache.hc.core5.http.Header[]
  spec.java:
  - uid: org.apache.hc.core5.http.Header
    name: Header
    fullName: org.apache.hc.core5.http.Header
  - name: '[]'
    fullName: '[]'
- uid: org.apache.hc.core5.http.impl.io.ChunkedInputStream.getFooters*
  name: getFooters
  nameWithType: ChunkedInputStream.getFooters
  fullName: org.apache.hc.core5.http.impl.io.ChunkedInputStream.getFooters
  package: org.apache.hc.core5.http.impl.io
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.InputStream.mark(int)
  name: InputStream.mark(int)
  nameWithType: InputStream.mark(int)
  fullName: java.io.InputStream.mark(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.InputStream.close()
  name: InputStream.close()
  nameWithType: InputStream.close()
  fullName: java.io.InputStream.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.io.InputStream.markSupported()
  name: InputStream.markSupported()
  nameWithType: InputStream.markSupported()
  fullName: java.io.InputStream.markSupported()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.io.InputStream.read(byte[])
  name: InputStream.read(byte[])
  nameWithType: InputStream.read(byte[])
  fullName: java.io.InputStream.read(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.available()
  name: InputStream.available()
  nameWithType: InputStream.available()
  fullName: java.io.InputStream.available()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.InputStream.skip(long)
  name: InputStream.skip(long)
  nameWithType: InputStream.skip(long)
  fullName: java.io.InputStream.skip(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.InputStream.read()
  name: InputStream.read()
  nameWithType: InputStream.read()
  fullName: java.io.InputStream.read()
- uid: java.io.InputStream.read(byte[],int,int)
  name: InputStream.read(byte[],int,int)
  nameWithType: InputStream.read(byte[],int,int)
  fullName: java.io.InputStream.read(byte[],int,int)
- uid: java.io.InputStream.reset()
  name: InputStream.reset()
  nameWithType: InputStream.reset()
  fullName: java.io.InputStream.reset()
