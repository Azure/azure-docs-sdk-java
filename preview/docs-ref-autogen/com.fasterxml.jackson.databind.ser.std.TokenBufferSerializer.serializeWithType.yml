### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer.serializeWithType*"
fullName: "com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer.serializeWithType"
name: "serializeWithType"
nameWithType: "TokenBufferSerializer.serializeWithType"
members:
- uid: "com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer.serializeWithType(com.fasterxml.jackson.databind.util.TokenBuffer,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)"
  fullName: "com.fasterxml.jackson.databind.ser.std.TokenBufferSerializer.serializeWithType(TokenBuffer value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)"
  name: "serializeWithType(TokenBuffer value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)"
  nameWithType: "TokenBufferSerializer.serializeWithType(TokenBuffer value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)"
  summary: "Implementing typed output for contents of a TokenBuffer is very tricky, since we do not know for sure what its contents might look like (or, rather, we do know when serializing, but not necessarily when deserializing!) One possibility would be to check the current token, and use that to determine if we would output JSON Array, Object or scalar value.\n\nNote that we just claim it is scalar; this should work ok and is simpler than doing introspection on both serialization and deserialization."
  overridden: "com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)"
  parameters:
  - name: "value"
    type: "<xref href=\"com.fasterxml.jackson.databind.util.TokenBuffer?alt=com.fasterxml.jackson.databind.util.TokenBuffer&text=TokenBuffer\" data-throw-if-not-resolved=\"False\" />"
  - name: "g"
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator?alt=com.fasterxml.jackson.core.JsonGenerator&text=JsonGenerator\" data-throw-if-not-resolved=\"False\" />"
  - name: "provider"
    type: "<xref href=\"com.fasterxml.jackson.databind.SerializerProvider?alt=com.fasterxml.jackson.databind.SerializerProvider&text=SerializerProvider\" data-throw-if-not-resolved=\"False\" />"
  - name: "typeSer"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeSerializer?alt=com.fasterxml.jackson.databind.jsontype.TypeSerializer&text=TypeSerializer\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public final void serializeWithType(TokenBuffer value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser.std"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
