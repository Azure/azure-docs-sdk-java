### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient"
fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient"
name: "DataLakeLeaseAsyncClient"
nameWithType: "DataLakeLeaseAsyncClient"
summary: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file systems\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"files\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"directories\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeLeaseAsyncClient"
methods:
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.acquireLease(int)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.acquireLease(int duration)"
  name: "acquireLease(int duration)"
  nameWithType: "DataLakeLeaseAsyncClient.acquireLease(int duration)"
  summary: "Acquires a lease for write and delete operations."
  parameters:
  - description: "The duration of the lease between 15 and 60 seconds or -1 for an infinite duration."
    name: "duration"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> acquireLease(int duration)"
  desc: "Acquires a lease for write and delete operations. The lease duration must be between 15 and 60 seconds or -1 for an infinite duration.\n\n**Code Samples**\n\n```java\nclient.acquireLease(60).subscribe(response -> System.out.printf(\"Lease ID is %s%n\", response));\n```"
  returns:
    description: "A reactive response containing the lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.acquireLeaseWithResponse(int,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)"
  name: "acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)"
  nameWithType: "DataLakeLeaseAsyncClient.acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)"
  summary: "Acquires a lease for write and delete operations."
  parameters:
  - description: "The duration of the lease between 15 and 60 seconds or -1 for an infinite duration."
    name: "duration"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> acquireLeaseWithResponse(int duration, RequestConditions modifiedRequestConditions)"
  desc: "Acquires a lease for write and delete operations. The lease duration must be between 15 and 60 seconds, or -1 for an infinite duration.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfModifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.acquireLeaseWithResponse(60, modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Lease ID is %s%n\", response.getValue()));\n```"
  returns:
    description: "A reactive response containing the lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.breakLease()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.breakLease()"
  name: "breakLease()"
  nameWithType: "DataLakeLeaseAsyncClient.breakLease()"
  summary: "Breaks the previously acquired lease, if it exists."
  syntax: "public Mono<Integer> breakLease()"
  desc: "Breaks the previously acquired lease, if it exists.\n\n**Code Samples**\n\n```java\nclient.breakLease().subscribe(response ->\n     System.out.printf(\"The broken lease has %d seconds remaining on the lease\", response));\n```"
  returns:
    description: "A reactive response containing the remaining time in the broken lease in seconds."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.breakLeaseWithResponse(java.lang.Integer,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  name: "breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  nameWithType: "DataLakeLeaseAsyncClient.breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  summary: "Breaks the previously acquired lease, if it exists."
  parameters:
  - description: "An optional duration, between 0 and 60 seconds, that the lease should continue before\n it is broken. If the break period is longer than the time remaining on the lease the remaining time on the lease\n is used. A new lease will not be available before the break period has expired, but the lease may be held for\n longer than the break period."
    name: "breakPeriodInSeconds"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Integer>> breakLeaseWithResponse(Integer breakPeriodInSeconds, RequestConditions modifiedRequestConditions)"
  desc: "Breaks the previously acquired lease, if it exists.\n\nIf `null` is passed for `breakPeriodInSeconds` a fixed duration lease will break after the remaining lease period elapses and an infinite lease will break immediately.\n\n**Code Samples**\n\n```java\nInteger retainLeaseInSeconds = 5;\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.breakLeaseWithResponse(retainLeaseInSeconds, modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"The broken lease has %d seconds remaining on the lease\", response.getValue()));\n```"
  returns:
    description: "A reactive response containing the remaining time in the broken lease in seconds."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.changeLease(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.changeLease(String proposedId)"
  name: "changeLease(String proposedId)"
  nameWithType: "DataLakeLeaseAsyncClient.changeLease(String proposedId)"
  summary: "Changes the lease ID."
  parameters:
  - description: "A new lease ID in a valid GUID format."
    name: "proposedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> changeLease(String proposedId)"
  desc: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nclient.changeLease(\"proposedId\").subscribe(response -> System.out.printf(\"Changed lease ID is %s%n\", response));\n```"
  returns:
    description: "A reactive response containing the new lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.changeLeaseWithResponse(java.lang.String,com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)"
  name: "changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)"
  nameWithType: "DataLakeLeaseAsyncClient.changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)"
  summary: "Changes the lease ID."
  parameters:
  - description: "A new lease ID in a valid GUID format."
    name: "proposedId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> changeLeaseWithResponse(String proposedId, RequestConditions modifiedRequestConditions)"
  desc: "Changes the lease ID.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.changeLeaseWithResponse(\"proposedId\", modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Changed lease ID is %s%n\", response.getValue()));\n```"
  returns:
    description: "A reactive response containing the new lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getAccountName()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getAccountName()"
  name: "getAccountName()"
  nameWithType: "DataLakeLeaseAsyncClient.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getLeaseId()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getLeaseId()"
  name: "getLeaseId()"
  nameWithType: "DataLakeLeaseAsyncClient.getLeaseId()"
  summary: "Get the lease ID for this lease."
  syntax: "public String getLeaseId()"
  desc: "Get the lease ID for this lease."
  returns:
    description: "the lease ID."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getResourceUrl()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.getResourceUrl()"
  name: "getResourceUrl()"
  nameWithType: "DataLakeLeaseAsyncClient.getResourceUrl()"
  summary: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> of the lease client."
  syntax: "public String getResourceUrl()"
  desc: "Gets the <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"URL\"></xref> of the lease client.\n\nThe lease will either be a file system or path URL depending on which the lease client is associated."
  returns:
    description: "URL of the lease client."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.releaseLease()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.releaseLease()"
  name: "releaseLease()"
  nameWithType: "DataLakeLeaseAsyncClient.releaseLease()"
  summary: "Releases the previously acquired lease."
  syntax: "public Mono<Void> releaseLease()"
  desc: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nclient.releaseLease().subscribe(response -> System.out.println(\"Completed release lease\"));\n```"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.releaseLeaseWithResponse(com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  name: "releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  nameWithType: "DataLakeLeaseAsyncClient.releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  summary: "Releases the previously acquired lease."
  parameters:
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> releaseLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  desc: "Releases the previously acquired lease.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.releaseLeaseWithResponse(modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Release lease completed with status %d%n\", response.getStatusCode()));\n```"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.renewLease()"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.renewLease()"
  name: "renewLease()"
  nameWithType: "DataLakeLeaseAsyncClient.renewLease()"
  summary: "Renews the previously acquired lease."
  syntax: "public Mono<String> renewLease()"
  desc: "Renews the previously acquired lease.\n\n**Code Samples**\n\n```java\nclient.renewLease().subscribe(response -> System.out.printf(\"Renewed lease ID is %s%n\", response));\n```"
  returns:
    description: "A reactive response containing the renewed lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.renewLeaseWithResponse(com.azure.core.http.RequestConditions)"
  fullName: "com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient.renewLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  name: "renewLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  nameWithType: "DataLakeLeaseAsyncClient.renewLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  summary: "Renews the previously acquired lease."
  parameters:
  - description: "Standard HTTP Access conditions related to the modification of data. ETag and\n LastModifiedTime are used to construct conditions related to when the resource was changed relative to the given\n request. The request will fail if the specified condition is not satisfied."
    name: "modifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> renewLeaseWithResponse(RequestConditions modifiedRequestConditions)"
  desc: "Renews the previously acquired lease.\n\n**Code Samples**\n\n```java\nRequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.renewLeaseWithResponse(modifiedRequestConditions).subscribe(response ->\n     System.out.printf(\"Renewed lease ID is %s%n\", response.getValue()));\n```"
  returns:
    description: "A reactive response containing the renewed lease ID."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all the leasing operations for <xref uid=\"com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"file systems\"></xref>, <xref uid=\"com.azure.storage.file.datalake.DataLakeFileAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"files\"></xref> and <xref uid=\"com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"directories\"></xref>. This client acts as a supplement to those clients and only handles leasing operations.\n\n**Instantiating a DataLakeLeaseAsyncClient**\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .fileAsyncClient(fileAsyncClient)\n     .buildAsyncClient();\n```\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .directoryAsyncClient(directoryAsyncClient)\n     .buildAsyncClient();\n```\n\n```java\nDataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()\n     .fileSystemAsyncClient(dataLakeFileSystemAsyncClient)\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client.\n\nFor more information about leasing see the [file system leasing][] or [path leasing][] documentation.\n\n\n[file system leasing]: https://docs.microsoft.com/rest/api/storageservices/lease-container\n[path leasing]: https://docs.microsoft.com/rest/api/storageservices/lease-blob"
metadata: {}
package: "com.azure.storage.file.datalake.specialized"
artifact: com.azure:azure-storage-file-datalake:12.11.0-beta.1
