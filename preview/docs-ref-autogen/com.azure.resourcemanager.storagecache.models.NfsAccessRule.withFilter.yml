### YamlMime:JavaMember
uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withFilter*"
fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withFilter"
name: "withFilter"
nameWithType: "NfsAccessRule.withFilter"
members:
- uid: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withFilter(java.lang.String)"
  fullName: "com.azure.resourcemanager.storagecache.models.NfsAccessRule.withFilter(String filter)"
  name: "withFilter(String filter)"
  nameWithType: "NfsAccessRule.withFilter(String filter)"
  summary: "Set the filter property: Filter applied to the scope for this rule. The filter's format depends on its scope. 'default' scope matches all clients and has no filter value. 'network' scope takes a filter in CIDR format (for example, 10.99.1.0/24). 'host' takes an IP address or fully qualified domain name as filter. If a client does not match any filter rule and there is no default rule, access is denied."
  parameters:
  - description: "the filter value to set."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public NfsAccessRule withFilter(String filter)"
  returns:
    description: "the NfsAccessRule object itself."
    type: "<xref href=\"com.azure.resourcemanager.storagecache.models.NfsAccessRule?alt=com.azure.resourcemanager.storagecache.models.NfsAccessRule&text=NfsAccessRule\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.storagecache.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-storagecache:1.0.0-beta.2
