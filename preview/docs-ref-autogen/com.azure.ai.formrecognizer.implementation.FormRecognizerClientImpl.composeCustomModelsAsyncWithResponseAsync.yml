### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync*"
fullName: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync"
name: "composeCustomModelsAsyncWithResponseAsync"
nameWithType: "FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync"
members:
- uid: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync(com.azure.ai.formrecognizer.implementation.models.ComposeRequest)"
  fullName: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest)"
  name: "composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest)"
  nameWithType: "FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest)"
  summary: "Compose request would include list of models ids. It would validate what all models either trained with labels model or composed model. It would validate limit of models put together."
  parameters:
  - description: "Compose models."
    name: "composeRequest"
    type: "<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeRequest?alt=com.azure.ai.formrecognizer.implementation.models.ComposeRequest&text=ComposeRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ComposeCustomModelsAsyncResponse> composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest)"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeCustomModelsAsyncResponse?alt=com.azure.ai.formrecognizer.implementation.models.ComposeCustomModelsAsyncResponse&text=ComposeCustomModelsAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync(com.azure.ai.formrecognizer.implementation.models.ComposeRequest,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.implementation.FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest, Context context)"
  name: "composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest, Context context)"
  nameWithType: "FormRecognizerClientImpl.composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest, Context context)"
  summary: "Compose request would include list of models ids. It would validate what all models either trained with labels model or composed model. It would validate limit of models put together."
  parameters:
  - description: "Compose models."
    name: "composeRequest"
    type: "<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeRequest?alt=com.azure.ai.formrecognizer.implementation.models.ComposeRequest&text=ComposeRequest\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ComposeCustomModelsAsyncResponse> composeCustomModelsAsyncWithResponseAsync(ComposeRequest composeRequest, Context context)"
  returns:
    description: "the completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.implementation.models.ComposeCustomModelsAsyncResponse?alt=com.azure.ai.formrecognizer.implementation.models.ComposeCustomModelsAsyncResponse&text=ComposeCustomModelsAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer.implementation"
artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.3
