### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler"
fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler"
name: "AmqpSendHandler"
nameWithType: "AmqpSendHandler"
summary: "Instance of the QPID-Proton-J Base<wbr>Handler class to override the events what are needed to handle the send operation Contains and sets connection parameters (path, port, endpoint) Maintains the layers of AMQP protocol (Link, Session, Connection, Transport) Creates and sets SASL authentication for transport"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"org.apache.qpid.proton.engine.BaseHandler?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandler?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onConnectionLocalClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onConnectionLocalOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onConnectionRemoteClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onLinkLocalClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onLinkLocalOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onLinkRemoteClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onSessionLocalClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onSessionLocalOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onSessionRemoteClose(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onTransportError(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onConnectionBound(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onConnectionRemoteOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onLinkRemoteOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onReactorInit(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.onSessionRemoteOpen(org.apache.qpid.proton.engine.Event)"
- "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpConnectionHandler.verifyConnectionWasOpened()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "org.apache.qpid.proton.engine.BaseHandler.add(org.apache.qpid.proton.engine.Handler)"
- "org.apache.qpid.proton.engine.BaseHandler.children()"
- "org.apache.qpid.proton.engine.BaseHandler.getHandler(org.apache.qpid.proton.engine.Extendable)"
- "org.apache.qpid.proton.engine.BaseHandler.getHandler(org.apache.qpid.proton.engine.Record)"
- "org.apache.qpid.proton.engine.BaseHandler.handle(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onConnectionUnbound(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onDelivery(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkFlow(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkLocalDetach(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onLinkRemoteDetach(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onReactorFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onReactorQuiesced(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableError(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableExpired(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableReadable(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableUpdated(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSelectableWritable(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionFinal(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onSessionInit(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTimerTask(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransport(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportClosed(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportHeadClosed(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onTransportTailClosed(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.onUnhandled(org.apache.qpid.proton.engine.Event)"
- "org.apache.qpid.proton.engine.BaseHandler.setHandler(org.apache.qpid.proton.engine.Extendable,org.apache.qpid.proton.engine.Handler)"
- "org.apache.qpid.proton.engine.BaseHandler.setHandler(org.apache.qpid.proton.engine.Record,org.apache.qpid.proton.engine.Handler)"
syntax: "public class AmqpSendHandler extends AmqpConnectionHandler"
constructors:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.AmqpSendHandler(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  name: "AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  nameWithType: "AmqpSendHandler.AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  summary: "Constructor to set up connection parameters and initialize handshaker for transport"
  parameters:
  - description: "The address string of the service (example: AAA.BBB.CCC)"
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The username string to use SASL authentication (example: user@sas.service)"
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The SAS token string"
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "protocol to use"
    name: "iotHubServiceClientProtocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  desc: "Constructor to set up connection parameters and initialize handshaker for transport"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.AmqpSendHandler(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  name: "AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  nameWithType: "AmqpSendHandler.AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  summary: "Constructor to set up connection parameters and initialize handshaker for transport"
  parameters:
  - description: "The address string of the service (example: AAA.BBB.CCC)"
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The username string to use SASL authentication (example: user@sas.service)"
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The SAS token string"
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "protocol to use"
    name: "iotHubServiceClientProtocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "the proxy options to tunnel through, if a proxy should be used."
    name: "proxyOptions"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AmqpSendHandler(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  desc: "Constructor to set up connection parameters and initialize handshaker for transport"
fields:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.DEVICE_PATH_FORMAT"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.DEVICE_PATH_FORMAT"
  name: "DEVICE_PATH_FORMAT"
  nameWithType: "AmqpSendHandler.DEVICE_PATH_FORMAT"
  modifiers:
  - "static"
  - "final"
  field:
    value: "/devices/%s/messages/devicebound"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String DEVICE_PATH_FORMAT"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.ENDPOINT"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.ENDPOINT"
  name: "ENDPOINT"
  nameWithType: "AmqpSendHandler.ENDPOINT"
  modifiers:
  - "static"
  - "final"
  field:
    value: "/messages/devicebound"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String ENDPOINT"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.MODULE_PATH_FORMAT"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.MODULE_PATH_FORMAT"
  name: "MODULE_PATH_FORMAT"
  nameWithType: "AmqpSendHandler.MODULE_PATH_FORMAT"
  modifiers:
  - "static"
  - "final"
  field:
    value: "/devices/%s/modules/%s/messages/devicebound"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String MODULE_PATH_FORMAT"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.SEND_TAG"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.SEND_TAG"
  name: "SEND_TAG"
  nameWithType: "AmqpSendHandler.SEND_TAG"
  modifiers:
  - "static"
  - "final"
  field:
    value: "sender"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final String SEND_TAG"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.createProtonMessage(java.lang.String,com.microsoft.azure.sdk.iot.service.Message)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.createProtonMessage(String deviceId, Message message)"
  name: "createProtonMessage(String deviceId, Message message)"
  nameWithType: "AmqpSendHandler.createProtonMessage(String deviceId, Message message)"
  summary: "Create Proton message from device<wbr>Id and content string"
  parameters:
  - description: "The device name string"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The message to be sent"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.Message?alt=com.microsoft.azure.sdk.iot.service.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createProtonMessage(String deviceId, Message message)"
  desc: "Create Proton message from deviceId and content string"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.createProtonMessage(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.Message)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.createProtonMessage(String deviceId, String moduleId, Message message)"
  name: "createProtonMessage(String deviceId, String moduleId, Message message)"
  nameWithType: "AmqpSendHandler.createProtonMessage(String deviceId, String moduleId, Message message)"
  summary: "Create Proton message from device<wbr>Id and content string"
  parameters:
  - description: "The device name string"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The device name string"
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The message to be sent"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.Message?alt=com.microsoft.azure.sdk.iot.service.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void createProtonMessage(String deviceId, String moduleId, Message message)"
  desc: "Create Proton message from deviceId and content string"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onConnectionInit(org.apache.qpid.proton.engine.Event)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onConnectionInit(Event event)"
  name: "onConnectionInit(Event event)"
  nameWithType: "AmqpSendHandler.onConnectionInit(Event event)"
  summary: "Event handler for the connection init event"
  overridden: "org.apache.qpid.proton.engine.BaseHandler.onConnectionInit(org.apache.qpid.proton.engine.Event)"
  parameters:
  - description: "The proton event object"
    name: "event"
    type: "<xref href=\"org.apache.qpid.proton.engine.Event?alt=org.apache.qpid.proton.engine.Event&text=Event\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void onConnectionInit(Event event)"
  desc: "Event handler for the connection init event"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onConnectionRemoteClose(org.apache.qpid.proton.engine.Event)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onConnectionRemoteClose(Event event)"
  name: "onConnectionRemoteClose(Event event)"
  nameWithType: "AmqpSendHandler.onConnectionRemoteClose(Event event)"
  overridden: "com.microsoft.azure.sdk.iot.deps.transport.amqp.ErrorLoggingBaseHandlerWithCleanup.onConnectionRemoteClose(org.apache.qpid.proton.engine.Event)"
  parameters:
  - name: "event"
    type: "<xref href=\"org.apache.qpid.proton.engine.Event?alt=org.apache.qpid.proton.engine.Event&text=Event\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void onConnectionRemoteClose(Event event)"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onDelivery(org.apache.qpid.proton.engine.Event)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onDelivery(Event event)"
  name: "onDelivery(Event event)"
  nameWithType: "AmqpSendHandler.onDelivery(Event event)"
  overridden: "org.apache.qpid.proton.engine.BaseHandler.onDelivery(org.apache.qpid.proton.engine.Event)"
  parameters:
  - name: "event"
    type: "<xref href=\"org.apache.qpid.proton.engine.Event?alt=org.apache.qpid.proton.engine.Event&text=Event\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void onDelivery(Event event)"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onLinkFlow(org.apache.qpid.proton.engine.Event)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onLinkFlow(Event event)"
  name: "onLinkFlow(Event event)"
  nameWithType: "AmqpSendHandler.onLinkFlow(Event event)"
  summary: "Event handler for the link flow event"
  overridden: "org.apache.qpid.proton.engine.BaseHandler.onLinkFlow(org.apache.qpid.proton.engine.Event)"
  parameters:
  - description: "The proton event object"
    name: "event"
    type: "<xref href=\"org.apache.qpid.proton.engine.Event?alt=org.apache.qpid.proton.engine.Event&text=Event\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void onLinkFlow(Event event)"
  desc: "Event handler for the link flow event"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onLinkInit(org.apache.qpid.proton.engine.Event)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.onLinkInit(Event event)"
  name: "onLinkInit(Event event)"
  nameWithType: "AmqpSendHandler.onLinkInit(Event event)"
  summary: "Event handler for the link init event"
  overridden: "org.apache.qpid.proton.engine.BaseHandler.onLinkInit(org.apache.qpid.proton.engine.Event)"
  parameters:
  - description: "The proton event object"
    name: "event"
    type: "<xref href=\"org.apache.qpid.proton.engine.Event?alt=org.apache.qpid.proton.engine.Event&text=Event\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void onLinkInit(Event event)"
  desc: "Event handler for the link init event"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.verifySendSucceeded()"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler.verifySendSucceeded()"
  name: "verifySendSucceeded()"
  nameWithType: "AmqpSendHandler.verifySendSucceeded()"
  syntax: "public void verifySendSucceeded()"
  exceptions:
  - type: "<xref href=\"com.microsoft.azure.sdk.iot.service.exceptions.IotHubException?alt=com.microsoft.azure.sdk.iot.service.exceptions.IotHubException&text=IotHubException\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Instance of the QPID-Proton-J BaseHandler class to override the events what are needed to handle the send operation Contains and sets connection parameters (path, port, endpoint) Maintains the layers of AMQP protocol (Link, Session, Connection, Transport) Creates and sets SASL authentication for transport"
metadata: {}
package: "com.microsoft.azure.sdk.iot.service.transport.amqps"
artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
