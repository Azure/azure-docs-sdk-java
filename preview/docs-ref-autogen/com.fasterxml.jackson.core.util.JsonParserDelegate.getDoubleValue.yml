### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue*"
fullName: "com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue"
name: "getDoubleValue"
nameWithType: "JsonParserDelegate.getDoubleValue"
members:
- uid: "com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()"
  fullName: "com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()"
  name: "getDoubleValue()"
  nameWithType: "JsonParserDelegate.getDoubleValue()"
  summary: "Numeric accessor that can be called when the current token is of type <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_FLOAT\"></xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid=\"com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#VALUE_NUMBER_INT\"></xref>; if so, it is equivalent to calling <xref uid=\"com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getLongValue\"></xref> and then casting; except for possible overflow/underflow exception.\n\nNote: if the value falls outside of range of Java double, a <xref uid=\"com.fasterxml.jackson.core.JsonParseException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParseException\"></xref> will be thrown to indicate numeric overflow/underflow."
  overridden: "com.fasterxml.jackson.core.JsonParser.getDoubleValue()"
  syntax: "public double getDoubleValue()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"double?alt=double&text=double\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.core.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
