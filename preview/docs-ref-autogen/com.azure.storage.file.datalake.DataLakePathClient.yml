### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.DataLakePathClient
  id: DataLakePathClient
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake
  children:
  - com.azure.storage.file.datalake.DataLakePathClient.create()
  - com.azure.storage.file.datalake.DataLakePathClient.create(boolean)
  - com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.exists()
  - com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  - com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  - com.azure.storage.file.datalake.DataLakePathClient.getAccessControl()
  - com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.getAccountName()
  - com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName()
  - com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline()
  - com.azure.storage.file.datalake.DataLakePathClient.getProperties()
  - com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion()
  - com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  - com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  - com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  - com.azure.storage.file.datalake.DataLakePathClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  - com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  langs:
  - java
  name: DataLakePathClient
  nameWithType: DataLakePathClient
  fullName: com.azure.storage.file.datalake.DataLakePathClient
  type: Class
  package: com.azure.storage.file.datalake
  summary: This class provides a client that contains all operations that apply to any path object.
  syntax:
    content: public class DataLakePathClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakePathClient.DataLakePathClient(com.azure.storage.file.datalake.DataLakePathAsyncClient,com.azure.storage.blob.specialized.BlockBlobClient)
  id: DataLakePathClient(com.azure.storage.file.datalake.DataLakePathAsyncClient,com.azure.storage.blob.specialized.BlockBlobClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: DataLakePathClient(DataLakePathAsyncClient dataLakePathAsyncClient, BlockBlobClient blockBlobClient)
  nameWithType: DataLakePathClient.DataLakePathClient(DataLakePathAsyncClient dataLakePathAsyncClient, BlockBlobClient blockBlobClient)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.DataLakePathClient(DataLakePathAsyncClient dataLakePathAsyncClient, BlockBlobClient blockBlobClient)
  overload: com.azure.storage.file.datalake.DataLakePathClient.DataLakePathClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  syntax:
    content: " DataLakePathClient(DataLakePathAsyncClient dataLakePathAsyncClient, BlockBlobClient blockBlobClient)"
    parameters:
    - id: dataLakePathAsyncClient
      type: com.azure.storage.file.datalake.DataLakePathAsyncClient
    - id: blockBlobClient
      type: com.azure.storage.blob.specialized.BlockBlobClient
- uid: com.azure.storage.file.datalake.DataLakePathClient.create()
  id: create()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: create()
  nameWithType: DataLakePathClient.create()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.create()
  overload: com.azure.storage.file.datalake.DataLakePathClient.create*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a resource. By default this method will not overwrite an existing path.


    **Code Samples**


    ```java

    System.out.printf("Last Modified Time:%s", client.create().getLastModified());

    ```


    For more information see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public PathInfo create()
    return:
      type: com.azure.storage.file.datalake.models.PathInfo
      description: Information about the created resource.
- uid: com.azure.storage.file.datalake.DataLakePathClient.create(boolean)
  id: create(boolean)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: create(boolean overwrite)
  nameWithType: DataLakePathClient.create(boolean overwrite)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.create(boolean overwrite)
  overload: com.azure.storage.file.datalake.DataLakePathClient.create*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a resource.


    **Code Samples**


    ```java

    boolean overwrite = true;
     System.out.printf("Last Modified Time:%s", client.create(true).getLastModified());
    ```


    For more information see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create
  syntax:
    content: public PathInfo create(boolean overwrite)
    parameters:
    - id: overwrite
      type: boolean
      description: Whether or not to overwrite, should data exist on the path.
    return:
      type: com.azure.storage.file.datalake.models.PathInfo
      description: Information about the created resource.
- uid: com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: createWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.createWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Creates a resource.\n\n**Code Samples**\n\n```java\nPathHttpHeaders httpHeaders = new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions()\n     .setLeaseId(leaseId);\n String permissions = \"permissions\";\n String umask = \"umask\";\n \n Response<PathInfo> response = client.createWithResponse(permissions, umask, httpHeaders,\n     Collections.singletonMap(\"metadata\", \"value\"), requestConditions, timeout,\n     new Context(key1, value1));\n System.out.printf(\"Last Modified Time:%s\", response.getValue().getLastModified());\n```\n\nFor more information see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create"
  syntax:
    content: public Response<PathInfo> createWithResponse(String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: permissions
      type: java.lang.String
      description: POSIX access permissions for the resource owner, the resource owning group, and others.
    - id: umask
      type: java.lang.String
      description: Restricts permissions of the resource to be created.
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>
      description: A response containing information about the created resource
- uid: com.azure.storage.file.datalake.DataLakePathClient.exists()
  id: exists()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: exists()
  nameWithType: DataLakePathClient.exists()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.exists()
  overload: com.azure.storage.file.datalake.DataLakePathClient.exists*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Gets if the path this client represents exists in the cloud.


    Note that this method does not guarantee that the path type (file/directory) matches expectations.


    For example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.


    **Code Samples**


    ```java

    System.out.printf("Exists? %b%n", client.exists());

    ```
  syntax:
    content: public Boolean exists()
    return:
      type: java.lang.Boolean
      description: true if the path exists, false if it doesn't
- uid: com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  id: existsWithResponse(java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: existsWithResponse(Duration timeout, Context context)
  nameWithType: DataLakePathClient.existsWithResponse(Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse(Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Gets if the path this client represents exists in the cloud.


    Note that this method does not guarantee that the path type (file/directory) matches expectations.


    For example, a DataLakeFileClient representing a path to a datalake directory will return true, and vice versa.


    **Code Samples**


    ```java

    System.out.printf("Exists? %b%n", client.existsWithResponse(timeout, new Context(key2, value2)).getValue());

    ```
  syntax:
    content: public Response<Boolean> existsWithResponse(Duration timeout, Context context)
    parameters:
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Boolean>
      description: true if the path exists, false if it doesn't
- uid: com.azure.storage.file.datalake.DataLakePathClient.generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  id: generateSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  nameWithType: DataLakePathClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
  overload: com.azure.storage.file.datalake.DataLakePathClient.generateSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates a service SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission permission = new PathSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues values = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  syntax:
    content: public String generateSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues)
    parameters:
    - id: dataLakeServiceSasSignatureValues
      type: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues" data-throw-if-not-resolved="false">DataLakeServiceSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  id: generateUserDelegationSas(com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues,com.azure.storage.file.datalake.models.UserDelegationKey)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  nameWithType: DataLakePathClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
  overload: com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates a user delegation SAS for the path using the specified <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref>.\n\nSee <xref uid=\"com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\">DataLakeServiceSasSignatureValues</xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n PathSasPermission myPermission = new PathSasPermission().setReadPermission(true);\n \n DataLakeServiceSasSignatureValues myValues = new DataLakeServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n \n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  syntax:
    content: public String generateUserDelegationSas(DataLakeServiceSasSignatureValues dataLakeServiceSasSignatureValues, UserDelegationKey userDelegationKey)
    parameters:
    - id: dataLakeServiceSasSignatureValues
      type: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
      description: <xref uid="com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues" data-throw-if-not-resolved="false">DataLakeServiceSasSignatureValues</xref>
    - id: userDelegationKey
      type: com.azure.storage.file.datalake.models.UserDelegationKey
      description: A <xref uid="com.azure.storage.file.datalake.models.UserDelegationKey" data-throw-if-not-resolved="false">UserDelegationKey</xref> object used to sign the SAS values.
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getAccessControl()
  id: getAccessControl()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getAccessControl()
  nameWithType: DataLakePathClient.getAccessControl()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getAccessControl()
  overload: com.azure.storage.file.datalake.DataLakePathClient.getAccessControl*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns the access control for a resource.


    **Code Samples**


    ```java

    PathAccessControl response = client.getAccessControl();
     System.out.printf("Access Control List: %s, Group: %s, Owner: %s, Permissions: %s",
         PathAccessControlEntry.serializeList(response.getAccessControlList()), response.getGroup(),
         response.getOwner(), response.getPermissions());
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties
  syntax:
    content: public PathAccessControl getAccessControl()
    return:
      type: com.azure.storage.file.datalake.models.PathAccessControl
      description: The resource access control.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: getAccessControlWithResponse(boolean,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns the access control for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n boolean userPrincipalNameReturned = false;\n \n Response<PathAccessControl> response = client.getAccessControlWithResponse(userPrincipalNameReturned,\n     requestConditions, timeout, new Context(key1, value1));\n \n PathAccessControl pac = response.getValue();\n \n System.out.printf(\"Access Control List: %s, Group: %s, Owner: %s, Permissions: %s\",\n     PathAccessControlEntry.serializeList(pac.getAccessControlList()), pac.getGroup(), pac.getOwner(),\n     pac.getPermissions());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties"
  syntax:
    content: public Response<PathAccessControl> getAccessControlWithResponse(boolean userPrincipalNameReturned, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: userPrincipalNameReturned
      type: boolean
      description: >-
        When true, user identity values returned as User Principal Names. When false,
         user identity values returned as Azure Active Directory Object IDs. Default value is false.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>
      description: A response containing the resource access control.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getAccountName()
  nameWithType: DataLakePathClient.getAccountName()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getAccountName()
  overload: com.azure.storage.file.datalake.DataLakePathClient.getAccountName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: Account name associated with this storage resource.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName()
  id: getFileSystemName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getFileSystemName()
  nameWithType: DataLakePathClient.getFileSystemName()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName()
  overload: com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the name of the File System in which this object lives.
  syntax:
    content: public String getFileSystemName()
    return:
      type: java.lang.String
      description: The name of the File System.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: DataLakePathClient.getHttpPipeline()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline()
  overload: com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getProperties()
  id: getProperties()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getProperties()
  nameWithType: DataLakePathClient.getProperties()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getProperties()
  overload: com.azure.storage.file.datalake.DataLakePathClient.getProperties*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns the resources's metadata and properties.


    **Code Samples**


    ```java

    System.out.printf("Creation Time: %s, Size: %d%n", client.getProperties().getCreationTime(),
         client.getProperties().getFileSize());
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties
  syntax:
    content: public PathProperties getProperties()
    return:
      type: com.azure.storage.file.datalake.models.PathProperties
      description: The resource properties and metadata.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: getPropertiesWithResponse(com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns the resource's metadata and properties.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n Response<PathProperties> response = client.getPropertiesWithResponse(requestConditions, timeout,\n     new Context(key2, value2));\n \n System.out.printf(\"Creation Time: %s, Size: %d%n\", response.getValue().getCreationTime(),\n     response.getValue().getFileSize());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties"
  syntax:
    content: public Response<PathProperties> getPropertiesWithResponse(DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathProperties>
      description: A response containing the resource properties and metadata.
- uid: com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: DataLakePathClient.getServiceVersion()
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion()
  overload: com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the service version the client is using.
  syntax:
    content: public DataLakeServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  id: setAccessControlList(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
  nameWithType: DataLakePathClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n \n System.out.printf(\"Last Modified Time: %s\", client.setAccessControlList(pathAccessControlEntries, group, owner)\n     .getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public PathInfo setAccessControlList(List<PathAccessControlEntry> accessControlList, String group, String owner)
    parameters:
    - id: accessControlList
      type: java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>
      description: A list of <xref uid="com.azure.storage.file.datalake.models.PathAccessControlEntry" data-throw-if-not-resolved="false">PathAccessControlEntry</xref> objects.
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    return:
      type: com.azure.storage.file.datalake.models.PathInfo
      description: The resource info.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: setAccessControlListWithResponse(java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the access control list, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathAccessControlEntry pathAccessControlEntry = new PathAccessControlEntry()\n     .setEntityId(\"entityId\")\n     .setPermissions(new RolePermissions().setReadPermission(true));\n List<PathAccessControlEntry> pathAccessControlEntries = new ArrayList<>();\n pathAccessControlEntries.add(pathAccessControlEntry);\n String group = \"group\";\n String owner = \"owner\";\n \n Response<PathInfo> response = client.setAccessControlListWithResponse(pathAccessControlEntries, group, owner,\n     requestConditions, timeout, new Context(key2, value2));\n System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public Response<PathInfo> setAccessControlListWithResponse(List<PathAccessControlEntry> accessControlList, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: accessControlList
      type: java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>
      description: A list of <xref uid="com.azure.storage.file.datalake.models.PathAccessControlEntry" data-throw-if-not-resolved="false">PathAccessControlEntry</xref> objects.
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>
      description: A response containing the resource info.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  id: setHttpHeaders(com.azure.storage.file.datalake.models.PathHttpHeaders)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setHttpHeaders(PathHttpHeaders headers)
  nameWithType: DataLakePathClient.setHttpHeaders(PathHttpHeaders headers)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders(PathHttpHeaders headers)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Changes a resources's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.


    **Code Samples**


    ```java

    client.setHttpHeaders(new PathHttpHeaders()
         .setContentLanguage("en-US")
         .setContentType("binary"));
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties
  syntax:
    content: public void setHttpHeaders(PathHttpHeaders headers)
    parameters:
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
- uid: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: setHttpHeadersWithResponse(com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes a resources's HTTP header properties. If only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n Response<Void> response = client.setHttpHeadersWithResponse(new PathHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"), requestConditions, timeout, new Context(key2, value2));\n System.out.printf(\"Set HTTP headers completed with status %d%n\",\n             response.getStatusCode());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-properties"
  syntax:
    content: public Response<Void> setHttpHeadersWithResponse(PathHttpHeaders headers, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: headers
      type: com.azure.storage.file.datalake.models.PathHttpHeaders
      description: <xref uid="com.azure.storage.file.datalake.models.PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  id: setMetadata(java.util.Map<java.lang.String,java.lang.String>)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setMetadata(Map<String,String> metadata)
  nameWithType: DataLakePathClient.setMetadata(Map<String,String> metadata)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setMetadata(Map<String,String> metadata)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setMetadata*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.


    **Code Samples**


    ```java

    client.setMetadata(Collections.singletonMap("metadata", "value"));
     System.out.println("Set metadata completed");
    ```


    For more information, see the [Azure Docs][]



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata
  syntax:
    content: public void setMetadata(Map<String,String> metadata)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the resource.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes a resource's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n \n client.setMetadataWithResponse(Collections.singletonMap(\"metadata\", \"value\"), requestConditions, timeout,\n     new Context(key2, value2));\n System.out.println(\"Set metadata completed\");\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/set-file-metadata"
  syntax:
    content: public Response<Void> setMetadataWithResponse(Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<java.lang.Void>
      description: A response containing status code and HTTP headers.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  id: setPermissions(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setPermissions(PathPermissions permissions, String group, String owner)
  nameWithType: DataLakePathClient.setPermissions(PathPermissions permissions, String group, String owner)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setPermissions(PathPermissions permissions, String group, String owner)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setPermissions*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nPathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n \n System.out.printf(\"Last Modified Time: %s\", client.setPermissions(permissions, group, owner)\n     .getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public PathInfo setPermissions(PathPermissions permissions, String group, String owner)
    parameters:
    - id: permissions
      type: com.azure.storage.file.datalake.models.PathPermissions
      description: <xref uid="com.azure.storage.file.datalake.models.PathPermissions" data-throw-if-not-resolved="false">PathPermissions</xref>
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    return:
      type: com.azure.storage.file.datalake.models.PathInfo
      description: The resource info.
- uid: com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  id: setPermissionsWithResponse(com.azure.storage.file.datalake.models.PathPermissions,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakePathClient
  langs:
  - java
  name: setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakePathClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  overload: com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Changes the permissions, group and/or owner for a resource.\n\n**Code Samples**\n\n```java\nDataLakeRequestConditions requestConditions = new DataLakeRequestConditions().setLeaseId(leaseId);\n PathPermissions permissions = new PathPermissions()\n     .setGroup(new RolePermissions().setExecutePermission(true).setReadPermission(true))\n     .setOwner(new RolePermissions().setExecutePermission(true).setReadPermission(true).setWritePermission(true))\n     .setOther(new RolePermissions().setReadPermission(true));\n String group = \"group\";\n String owner = \"owner\";\n \n Response<PathInfo> response = client.setPermissionsWithResponse(permissions, group, owner, requestConditions,\n     timeout, new Context(key2, value2));\n System.out.printf(\"Last Modified Time: %s\", response.getValue().getLastModified());\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update"
  syntax:
    content: public Response<PathInfo> setPermissionsWithResponse(PathPermissions permissions, String group, String owner, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
    parameters:
    - id: permissions
      type: com.azure.storage.file.datalake.models.PathPermissions
      description: <xref uid="com.azure.storage.file.datalake.models.PathPermissions" data-throw-if-not-resolved="false">PathPermissions</xref>
    - id: group
      type: java.lang.String
      description: The group of the resource.
    - id: owner
      type: java.lang.String
      description: The owner of the resource.
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    - id: timeout
      type: java.time.Duration
      description: An optional timeout value beyond which a <xref uid="" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>
      description: A response containing the resource info.
references:
- uid: com.azure.storage.file.datalake.DataLakePathAsyncClient
  name: DataLakePathAsyncClient
  nameWithType: DataLakePathAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakePathAsyncClient
- uid: com.azure.storage.blob.specialized.BlockBlobClient
  spec.java:
  - uid: com.azure.storage.blob.specialized.BlockBlobClient
    name: BlockBlobClient
    fullName: com.azure.storage.blob.specialized.BlockBlobClient
- uid: com.azure.storage.file.datalake.DataLakePathClient.DataLakePathClient*
  name: DataLakePathClient
  nameWithType: DataLakePathClient.DataLakePathClient
  fullName: com.azure.storage.file.datalake.DataLakePathClient.DataLakePathClient
  package: com.azure.storage.file.datalake
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakePathClient.getAccountName*
  name: getAccountName
  nameWithType: DataLakePathClient.getAccountName
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getAccountName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName*
  name: getFileSystemName
  nameWithType: DataLakePathClient.getFileSystemName
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getFileSystemName
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: DataLakePathClient.getHttpPipeline
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getHttpPipeline
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceVersion
  name: DataLakeServiceVersion
  nameWithType: DataLakeServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceVersion
- uid: com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: DataLakePathClient.getServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getServiceVersion
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.PathInfo
  name: PathInfo
  nameWithType: PathInfo
  fullName: com.azure.storage.file.datalake.models.PathInfo
- uid: com.azure.storage.file.datalake.DataLakePathClient.create*
  name: create
  nameWithType: DataLakePathClient.create
  fullName: com.azure.storage.file.datalake.DataLakePathClient.create
  package: com.azure.storage.file.datalake
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.file.datalake.models.PathHttpHeaders
  name: PathHttpHeaders
  nameWithType: PathHttpHeaders
  fullName: com.azure.storage.file.datalake.models.PathHttpHeaders
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathInfo>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathInfo
    name: PathInfo
    fullName: com.azure.storage.file.datalake.models.PathInfo
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathClient.createWithResponse*
  name: createWithResponse
  nameWithType: DataLakePathClient.createWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.createWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.setMetadata*
  name: setMetadata
  nameWithType: DataLakePathClient.setMetadata
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setMetadata
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.Response<java.lang.Void>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse*
  name: setMetadataWithResponse
  nameWithType: DataLakePathClient.setMetadataWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setMetadataWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders*
  name: setHttpHeaders
  nameWithType: DataLakePathClient.setHttpHeaders
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeaders
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse*
  name: setHttpHeadersWithResponse
  nameWithType: DataLakePathClient.setHttpHeadersWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setHttpHeadersWithResponse
  package: com.azure.storage.file.datalake
- uid: java.util.List<com.azure.storage.file.datalake.models.PathAccessControlEntry>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathAccessControlEntry
    name: PathAccessControlEntry
    fullName: com.azure.storage.file.datalake.models.PathAccessControlEntry
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList*
  name: setAccessControlList
  nameWithType: DataLakePathClient.setAccessControlList
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlList
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse*
  name: setAccessControlListWithResponse
  nameWithType: DataLakePathClient.setAccessControlListWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setAccessControlListWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.PathPermissions
  name: PathPermissions
  nameWithType: PathPermissions
  fullName: com.azure.storage.file.datalake.models.PathPermissions
- uid: com.azure.storage.file.datalake.DataLakePathClient.setPermissions*
  name: setPermissions
  nameWithType: DataLakePathClient.setPermissions
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setPermissions
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse*
  name: setPermissionsWithResponse
  nameWithType: DataLakePathClient.setPermissionsWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.setPermissionsWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.PathAccessControl
  name: PathAccessControl
  nameWithType: PathAccessControl
  fullName: com.azure.storage.file.datalake.models.PathAccessControl
- uid: com.azure.storage.file.datalake.DataLakePathClient.getAccessControl*
  name: getAccessControl
  nameWithType: DataLakePathClient.getAccessControl
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getAccessControl
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathAccessControl>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathAccessControl
    name: PathAccessControl
    fullName: com.azure.storage.file.datalake.models.PathAccessControl
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse*
  name: getAccessControlWithResponse
  nameWithType: DataLakePathClient.getAccessControlWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getAccessControlWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.PathProperties
  name: PathProperties
  nameWithType: PathProperties
  fullName: com.azure.storage.file.datalake.models.PathProperties
- uid: com.azure.storage.file.datalake.DataLakePathClient.getProperties*
  name: getProperties
  nameWithType: DataLakePathClient.getProperties
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getProperties
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.PathProperties>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.PathProperties
    name: PathProperties
    fullName: com.azure.storage.file.datalake.models.PathProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse*
  name: getPropertiesWithResponse
  nameWithType: DataLakePathClient.getPropertiesWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.getPropertiesWithResponse
  package: com.azure.storage.file.datalake
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.azure.storage.file.datalake.DataLakePathClient.exists*
  name: exists
  nameWithType: DataLakePathClient.exists
  fullName: com.azure.storage.file.datalake.DataLakePathClient.exists
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.Response<java.lang.Boolean>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse*
  name: existsWithResponse
  nameWithType: DataLakePathClient.existsWithResponse
  fullName: com.azure.storage.file.datalake.DataLakePathClient.existsWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
  name: DataLakeServiceSasSignatureValues
  nameWithType: DataLakeServiceSasSignatureValues
  fullName: com.azure.storage.file.datalake.sas.DataLakeServiceSasSignatureValues
- uid: com.azure.storage.file.datalake.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.file.datalake.models.UserDelegationKey
- uid: com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas*
  name: generateUserDelegationSas
  nameWithType: DataLakePathClient.generateUserDelegationSas
  fullName: com.azure.storage.file.datalake.DataLakePathClient.generateUserDelegationSas
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakePathClient.generateSas*
  name: generateSas
  nameWithType: DataLakePathClient.generateSas
  fullName: com.azure.storage.file.datalake.DataLakePathClient.generateSas
  package: com.azure.storage.file.datalake
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.storage.file.datalake.models.PathAccessControlEntry
  name: PathAccessControlEntry
  nameWithType: PathAccessControlEntry
  fullName: com.azure.storage.file.datalake.models.PathAccessControlEntry
