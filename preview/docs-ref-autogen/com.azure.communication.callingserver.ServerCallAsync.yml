### YamlMime:JavaType
uid: "com.azure.communication.callingserver.ServerCallAsync"
fullName: "com.azure.communication.callingserver.ServerCallAsync"
name: "ServerCallAsync"
nameWithType: "ServerCallAsync"
summary: "Asynchronous client that supports server call operations."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServerCallAsync"
methods:
- uid: "com.azure.communication.callingserver.ServerCallAsync.addParticipant(com.azure.communication.common.CommunicationIdentifier,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.addParticipant(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  name: "addParticipant(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  nameWithType: "ServerCallAsync.addParticipant(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  summary: "Add a participant to the call."
  parameters:
  - description: "Added participant."
    name: "participant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "callBackUri to get notifications."
    name: "callBackUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Phone number to use when adding a phone number participant."
    name: "alternateCallerId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Value to identify context of the operation. This is used to co-relate other\n                         communications related to this operation"
    name: "operationContext"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<AddParticipantResult> addParticipant(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  desc: "Add a participant to the call."
  returns:
    description: "Response for a successful add participant request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.AddParticipantResult?alt=com.azure.communication.callingserver.models.AddParticipantResult&text=AddParticipantResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.addParticipantWithResponse(com.azure.communication.common.CommunicationIdentifier,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.addParticipantWithResponse(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  name: "addParticipantWithResponse(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  nameWithType: "ServerCallAsync.addParticipantWithResponse(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  summary: "Add a participant to the call."
  parameters:
  - description: "Added participant."
    name: "participant"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "callBackUri to get notifications."
    name: "callBackUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Phone number to use when adding a phone number participant."
    name: "alternateCallerId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Value to identify context of the operation. This is used to co-relate other\n                         communications related to this operation"
    name: "operationContext"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<AddParticipantResult>> addParticipantWithResponse(CommunicationIdentifier participant, String callBackUri, String alternateCallerId, String operationContext)"
  desc: "Add a participant to the call."
  returns:
    description: "Response for a successful add participant request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.AddParticipantResult?alt=com.azure.communication.callingserver.models.AddParticipantResult&text=AddParticipantResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.getRecordingState(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.getRecordingState(String recordingId)"
  name: "getRecordingState(String recordingId)"
  nameWithType: "ServerCallAsync.getRecordingState(String recordingId)"
  summary: "Get current recording state by recording id."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CallRecordingProperties> getRecordingState(String recordingId)"
  desc: "Get current recording state by recording id."
  returns:
    description: "Response for a successful get recording state request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.CallRecordingProperties?alt=com.azure.communication.callingserver.models.CallRecordingProperties&text=CallRecordingProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.getRecordingStateWithResponse(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.getRecordingStateWithResponse(String recordingId)"
  name: "getRecordingStateWithResponse(String recordingId)"
  nameWithType: "ServerCallAsync.getRecordingStateWithResponse(String recordingId)"
  summary: "Get current recording state by recording id."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CallRecordingProperties>> getRecordingStateWithResponse(String recordingId)"
  desc: "Get current recording state by recording id."
  returns:
    description: "Response for a successful get recording state request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.CallRecordingProperties?alt=com.azure.communication.callingserver.models.CallRecordingProperties&text=CallRecordingProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.getServerCallId()"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.getServerCallId()"
  name: "getServerCallId()"
  nameWithType: "ServerCallAsync.getServerCallId()"
  summary: "Get server call id property"
  syntax: "public String getServerCallId()"
  desc: "Get server call id property"
  returns:
    description: "Server call id value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.callingserver.ServerCallAsync.pauseRecording(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.pauseRecording(String recordingId)"
  name: "pauseRecording(String recordingId)"
  nameWithType: "ServerCallAsync.pauseRecording(String recordingId)"
  summary: "Pause recording of the call."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> pauseRecording(String recordingId)"
  desc: "Pause recording of the call."
  returns:
    description: "Response for a successful pause recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.pauseRecordingWithResponse(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.pauseRecordingWithResponse(String recordingId)"
  name: "pauseRecordingWithResponse(String recordingId)"
  nameWithType: "ServerCallAsync.pauseRecordingWithResponse(String recordingId)"
  summary: "Pause recording of the call."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> pauseRecordingWithResponse(String recordingId)"
  desc: "Pause recording of the call."
  returns:
    description: "Response for a successful pause recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.playAudio(java.lang.String,com.azure.communication.callingserver.models.PlayAudioOptions)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.playAudio(String audioFileUri, PlayAudioOptions playAudioOptions)"
  name: "playAudio(String audioFileUri, PlayAudioOptions playAudioOptions)"
  nameWithType: "ServerCallAsync.playAudio(String audioFileUri, PlayAudioOptions playAudioOptions)"
  summary: "Play audio in a call."
  parameters:
  - description: "Media resource uri of the play audio request. Currently only Wave file (.wav) format\n                     audio prompts are supported. More specifically, the audio content in the wave file must\n                     be mono (single-channel), 16-bit samples with a 16,000 (16KHz) sampling rate."
    name: "audioFileUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options for play audio."
    name: "playAudioOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.PlayAudioOptions?alt=com.azure.communication.callingserver.models.PlayAudioOptions&text=PlayAudioOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PlayAudioResult> playAudio(String audioFileUri, PlayAudioOptions playAudioOptions)"
  desc: "Play audio in a call."
  returns:
    description: "Response payload for play audio operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.PlayAudioResult?alt=com.azure.communication.callingserver.models.PlayAudioResult&text=PlayAudioResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.playAudio(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.playAudio(String audioFileUri, String audioFileId, String callbackUri, String operationContext)"
  name: "playAudio(String audioFileUri, String audioFileId, String callbackUri, String operationContext)"
  nameWithType: "ServerCallAsync.playAudio(String audioFileUri, String audioFileId, String callbackUri, String operationContext)"
  summary: "Play audio in a call."
  parameters:
  - description: "Media resource uri of the play audio request. Currently only Wave file (.wav) format\n                     audio prompts are supported. More specifically, the audio content in the wave file must\n                     be mono (single-channel), 16-bit samples with a 16,000 (16KHz) sampling rate."
    name: "audioFileUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Id for the media in the AudioFileUri, using which we cache the media resource."
    name: "audioFileId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Callback Uri to receive PlayAudio status notifications."
    name: "callbackUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The value to identify context of the operation. This is used to co-relate other\n                         communications related to this operation"
    name: "operationContext"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PlayAudioResult> playAudio(String audioFileUri, String audioFileId, String callbackUri, String operationContext)"
  desc: "Play audio in a call."
  returns:
    description: "Response payload for play audio operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.PlayAudioResult?alt=com.azure.communication.callingserver.models.PlayAudioResult&text=PlayAudioResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.playAudioWithResponse(java.lang.String,com.azure.communication.callingserver.models.PlayAudioOptions)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.playAudioWithResponse(String audioFileUri, PlayAudioOptions playAudioOptions)"
  name: "playAudioWithResponse(String audioFileUri, PlayAudioOptions playAudioOptions)"
  nameWithType: "ServerCallAsync.playAudioWithResponse(String audioFileUri, PlayAudioOptions playAudioOptions)"
  summary: "Play audio in a call."
  parameters:
  - description: "The media resource uri of the play audio request. Currently only Wave file (.wav) format\n                     audio prompts are supported. More specifically, the audio content in the wave file must\n                     be mono (single-channel), 16-bit samples with a 16,000 (16KHz) sampling rate."
    name: "audioFileUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Options for play audio."
    name: "playAudioOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.PlayAudioOptions?alt=com.azure.communication.callingserver.models.PlayAudioOptions&text=PlayAudioOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<PlayAudioResult>> playAudioWithResponse(String audioFileUri, PlayAudioOptions playAudioOptions)"
  desc: "Play audio in a call."
  returns:
    description: "the response payload for play audio operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.PlayAudioResult?alt=com.azure.communication.callingserver.models.PlayAudioResult&text=PlayAudioResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.removeParticipant(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.removeParticipant(String participantId)"
  name: "removeParticipant(String participantId)"
  nameWithType: "ServerCallAsync.removeParticipant(String participantId)"
  summary: "Remove a participant from the call."
  parameters:
  - description: "Participant id."
    name: "participantId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> removeParticipant(String participantId)"
  desc: "Remove a participant from the call."
  returns:
    description: "Response for a successful remove participant request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.removeParticipantWithResponse(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.removeParticipantWithResponse(String participantId)"
  name: "removeParticipantWithResponse(String participantId)"
  nameWithType: "ServerCallAsync.removeParticipantWithResponse(String participantId)"
  summary: "Remove a participant from the call."
  parameters:
  - description: "Participant id."
    name: "participantId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> removeParticipantWithResponse(String participantId)"
  desc: "Remove a participant from the call."
  returns:
    description: "Response for a successful remove participant request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.resumeRecording(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.resumeRecording(String recordingId)"
  name: "resumeRecording(String recordingId)"
  nameWithType: "ServerCallAsync.resumeRecording(String recordingId)"
  summary: "Resume recording of the call."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> resumeRecording(String recordingId)"
  desc: "Resume recording of the call."
  returns:
    description: "response for a successful resume recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.resumeRecordingWithResponse(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.resumeRecordingWithResponse(String recordingId)"
  name: "resumeRecordingWithResponse(String recordingId)"
  nameWithType: "ServerCallAsync.resumeRecordingWithResponse(String recordingId)"
  summary: "Resume recording of the call."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> resumeRecordingWithResponse(String recordingId)"
  desc: "Resume recording of the call."
  returns:
    description: "response for a successful resume recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.startRecording(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.startRecording(String recordingStateCallbackUri)"
  name: "startRecording(String recordingStateCallbackUri)"
  nameWithType: "ServerCallAsync.startRecording(String recordingStateCallbackUri)"
  summary: "Start recording of the call."
  parameters:
  - description: "Uri to send state change callbacks."
    name: "recordingStateCallbackUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<StartCallRecordingResult> startRecording(String recordingStateCallbackUri)"
  desc: "Start recording of the call."
  returns:
    description: "Response for a successful start recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.StartCallRecordingResult?alt=com.azure.communication.callingserver.models.StartCallRecordingResult&text=StartCallRecordingResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.startRecordingWithResponse(java.lang.String,com.azure.communication.callingserver.models.StartRecordingOptions,com.azure.core.util.Context)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.startRecordingWithResponse(String recordingStateCallbackUri, StartRecordingOptions startRecordingOptions, Context context)"
  name: "startRecordingWithResponse(String recordingStateCallbackUri, StartRecordingOptions startRecordingOptions, Context context)"
  nameWithType: "ServerCallAsync.startRecordingWithResponse(String recordingStateCallbackUri, StartRecordingOptions startRecordingOptions, Context context)"
  summary: "Start recording of the call."
  parameters:
  - description: "Uri to send state change callbacks."
    name: "recordingStateCallbackUri"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "StartRecordingOptions custom options."
    name: "startRecordingOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.StartRecordingOptions?alt=com.azure.communication.callingserver.models.StartRecordingOptions&text=StartRecordingOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Context\"></xref> representing the request context."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<StartCallRecordingResult>> startRecordingWithResponse(String recordingStateCallbackUri, StartRecordingOptions startRecordingOptions, Context context)"
  desc: "Start recording of the call."
  returns:
    description: "Response for a successful start recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.models.StartCallRecordingResult?alt=com.azure.communication.callingserver.models.StartCallRecordingResult&text=StartCallRecordingResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.stopRecording(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.stopRecording(String recordingId)"
  name: "stopRecording(String recordingId)"
  nameWithType: "ServerCallAsync.stopRecording(String recordingId)"
  summary: "Stop recording of the call."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> stopRecording(String recordingId)"
  desc: "Stop recording of the call."
  returns:
    description: "Response for a successful stop recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.ServerCallAsync.stopRecordingWithResponse(java.lang.String)"
  fullName: "com.azure.communication.callingserver.ServerCallAsync.stopRecordingWithResponse(String recordingId)"
  name: "stopRecordingWithResponse(String recordingId)"
  nameWithType: "ServerCallAsync.stopRecordingWithResponse(String recordingId)"
  summary: "Stop recording of the call."
  parameters:
  - description: "Recording id to stop."
    name: "recordingId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> stopRecordingWithResponse(String recordingId)"
  desc: "Stop recording of the call."
  returns:
    description: "Response for a successful stop recording request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Asynchronous client that supports server call operations."
metadata: {}
package: "com.azure.communication.callingserver"
artifact: com.azure:azure-communication-callingserver:1.0.0-beta.4
