### YamlMime:JavaMember
uid: "com.azure.resourcemanager.datafactory.models.SkipErrorFile.withDataInconsistency*"
fullName: "com.azure.resourcemanager.datafactory.models.SkipErrorFile.withDataInconsistency"
name: "withDataInconsistency"
nameWithType: "SkipErrorFile.withDataInconsistency"
members:
- uid: "com.azure.resourcemanager.datafactory.models.SkipErrorFile.withDataInconsistency(java.lang.Object)"
  fullName: "com.azure.resourcemanager.datafactory.models.SkipErrorFile.withDataInconsistency(Object dataInconsistency)"
  name: "withDataInconsistency(Object dataInconsistency)"
  nameWithType: "SkipErrorFile.withDataInconsistency(Object dataInconsistency)"
  summary: "Set the dataInconsistency property: Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType boolean)."
  parameters:
  - description: "the dataInconsistency value to set."
    name: "dataInconsistency"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SkipErrorFile withDataInconsistency(Object dataInconsistency)"
  returns:
    description: "the SkipErrorFile object itself."
    type: "<xref href=\"com.azure.resourcemanager.datafactory.models.SkipErrorFile?alt=com.azure.resourcemanager.datafactory.models.SkipErrorFile&text=SkipErrorFile\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.datafactory.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-datafactory:1.0.0-beta.1
