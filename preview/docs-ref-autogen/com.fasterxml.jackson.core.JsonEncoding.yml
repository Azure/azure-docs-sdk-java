### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.JsonEncoding"
fullName: "com.fasterxml.jackson.core.JsonEncoding"
name: "JsonEncoding"
nameWithType: "JsonEncoding"
summary: "Enumeration that defines legal encodings that can be used for JSON content, based on list of allowed encodings from [JSON specification][].\n\nNote: if application want to explicitly disregard Encoding limitations (to read in JSON encoded using an encoding not listed as allowed), they can use <xref uid=\"java.io.Reader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Reader\"></xref> / <xref uid=\"java.io.Writer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.io.Writer\"></xref> instances as input\n\n\n[JSON specification]: http://www.ietf.org/rfc/rfc4627.txt"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonEncoding extends Enum<JsonEncoding>"
fields:
- uid: "com.fasterxml.jackson.core.JsonEncoding.UTF16_BE"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.UTF16_BE"
  name: "UTF16_BE"
  nameWithType: "JsonEncoding.UTF16_BE"
- uid: "com.fasterxml.jackson.core.JsonEncoding.UTF16_LE"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.UTF16_LE"
  name: "UTF16_LE"
  nameWithType: "JsonEncoding.UTF16_LE"
- uid: "com.fasterxml.jackson.core.JsonEncoding.UTF32_BE"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.UTF32_BE"
  name: "UTF32_BE"
  nameWithType: "JsonEncoding.UTF32_BE"
- uid: "com.fasterxml.jackson.core.JsonEncoding.UTF32_LE"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.UTF32_LE"
  name: "UTF32_LE"
  nameWithType: "JsonEncoding.UTF32_LE"
- uid: "com.fasterxml.jackson.core.JsonEncoding.UTF8"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.UTF8"
  name: "UTF8"
  nameWithType: "JsonEncoding.UTF8"
methods:
- uid: "com.fasterxml.jackson.core.JsonEncoding.bits()"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.bits()"
  name: "bits()"
  nameWithType: "JsonEncoding.bits()"
  syntax: "public int bits()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonEncoding.getJavaName()"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.getJavaName()"
  name: "getJavaName()"
  nameWithType: "JsonEncoding.getJavaName()"
  summary: "Method for accessing encoding name that JDK will support."
  syntax: "public String getJavaName()"
  returns:
    description: "Matching encoding name that JDK will support."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonEncoding.isBigEndian()"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.isBigEndian()"
  name: "isBigEndian()"
  nameWithType: "JsonEncoding.isBigEndian()"
  summary: "Whether encoding is big-endian (if encoding supports such notion). If no such distinction is made (as is the case for <xref uid=\"com.fasterxml.jackson.core.JsonEncoding.UTF8\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#UTF8\"></xref>), return value is undefined."
  syntax: "public boolean isBigEndian()"
  returns:
    description: "True for big-endian encodings; false for little-endian\n   (or if not applicable)"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonEncoding.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonEncoding.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonEncoding valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonEncoding?alt=com.fasterxml.jackson.core.JsonEncoding&text=JsonEncoding\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonEncoding.values()"
  fullName: "com.fasterxml.jackson.core.JsonEncoding.values()"
  name: "values()"
  nameWithType: "JsonEncoding.values()"
  syntax: "public static JsonEncoding[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonEncoding?alt=com.fasterxml.jackson.core.JsonEncoding&text=JsonEncoding\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
