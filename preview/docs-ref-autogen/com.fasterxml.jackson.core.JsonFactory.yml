### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.JsonFactory
  id: JsonFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.JsonFactory.DEFAULT_FACTORY_FEATURE_FLAGS
  - com.fasterxml.jackson.core.JsonFactory.DEFAULT_GENERATOR_FEATURE_FLAGS
  - com.fasterxml.jackson.core.JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS
  - com.fasterxml.jackson.core.JsonFactory.DEFAULT_QUOTE_CHAR
  - com.fasterxml.jackson.core.JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR
  - com.fasterxml.jackson.core.JsonFactory.FORMAT_NAME_JSON
  - com.fasterxml.jackson.core.JsonFactory.Feature
  - com.fasterxml.jackson.core.JsonFactory.JsonFactory()
  - com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.JsonFactoryBuilder)
  - com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.TSFBuilder<?,?>,boolean)
  - com.fasterxml.jackson.core.JsonFactory._byteSymbolCanonicalizer
  - com.fasterxml.jackson.core.JsonFactory._characterEscapes
  - com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy(java.lang.Class<?>)
  - com.fasterxml.jackson.core.JsonFactory._createContext(java.lang.Object,boolean)
  - com.fasterxml.jackson.core.JsonFactory._createGenerator(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(java.lang.Object)
  - com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,com.fasterxml.jackson.core.io.IOContext,boolean)
  - com.fasterxml.jackson.core.JsonFactory._createParser(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._createParser(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._createParser(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(java.io.OutputStream,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._createWriter(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._decorate(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._decorate(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._decorate(java.io.OutputStream,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._decorate(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._decorate(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)
  - com.fasterxml.jackson.core.JsonFactory._factoryFeatures
  - com.fasterxml.jackson.core.JsonFactory._generatorFeatures
  - com.fasterxml.jackson.core.JsonFactory._getBufferRecycler()
  - com.fasterxml.jackson.core.JsonFactory._inputDecorator
  - com.fasterxml.jackson.core.JsonFactory._maximumNonEscapedChar
  - com.fasterxml.jackson.core.JsonFactory._objectCodec
  - com.fasterxml.jackson.core.JsonFactory._outputDecorator
  - com.fasterxml.jackson.core.JsonFactory._parserFeatures
  - com.fasterxml.jackson.core.JsonFactory._quoteChar
  - com.fasterxml.jackson.core.JsonFactory._rootCharSymbols
  - com.fasterxml.jackson.core.JsonFactory._rootValueSeparator
  - com.fasterxml.jackson.core.JsonFactory.builder()
  - com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively()
  - com.fasterxml.jackson.core.JsonFactory.canParseAsync()
  - com.fasterxml.jackson.core.JsonFactory.canUseCharArrays()
  - com.fasterxml.jackson.core.JsonFactory.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonFactory.Feature,boolean)
  - com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  - com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonFactory.copy()
  - com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.DataOutput)
  - com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.DataOutput,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.Writer)
  - com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.Writer)
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[])
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int)
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.File)
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.InputStream)
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.Reader)
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.lang.String)
  - com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.net.URL)
  - com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser()
  - com.fasterxml.jackson.core.JsonFactory.createParser(byte[])
  - com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)
  - com.fasterxml.jackson.core.JsonFactory.createParser(char[])
  - com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)
  - com.fasterxml.jackson.core.JsonFactory.createParser(java.io.DataInput)
  - com.fasterxml.jackson.core.JsonFactory.createParser(java.io.File)
  - com.fasterxml.jackson.core.JsonFactory.createParser(java.io.InputStream)
  - com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)
  - com.fasterxml.jackson.core.JsonFactory.createParser(java.lang.String)
  - com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)
  - com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonFactory.Feature)
  - com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonFactory.Feature)
  - com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes()
  - com.fasterxml.jackson.core.JsonFactory.getCodec()
  - com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures()
  - com.fasterxml.jackson.core.JsonFactory.getFormatName()
  - com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures()
  - com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType()
  - com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType()
  - com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures()
  - com.fasterxml.jackson.core.JsonFactory.getInputDecorator()
  - com.fasterxml.jackson.core.JsonFactory.getOutputDecorator()
  - com.fasterxml.jackson.core.JsonFactory.getParserFeatures()
  - com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator()
  - com.fasterxml.jackson.core.JsonFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)
  - com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(com.fasterxml.jackson.core.format.InputAccessor)
  - com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonFactory.Feature)
  - com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  - com.fasterxml.jackson.core.JsonFactory.readResolve()
  - com.fasterxml.jackson.core.JsonFactory.rebuild()
  - com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec()
  - com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering()
  - com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.core.JsonFactory.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonFactory.setInputDecorator(com.fasterxml.jackson.core.io.InputDecorator)
  - com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)
  - com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(java.lang.String)
  - com.fasterxml.jackson.core.JsonFactory.version()
  langs:
  - java
  name: JsonFactory
  nameWithType: JsonFactory
  fullName: com.fasterxml.jackson.core.JsonFactory
  type: Class
  package: com.fasterxml.jackson.core
  summary: >-
    The main factory class of Jackson package, used to configure and construct reader (aka parser, <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>) and writer (aka generator, <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>) instances.


    Factory instances are thread-safe and reusable after configuration (if any). Typically applications and services use only a single globally shared factory instance, unless they need differently configured factories. Factory reuse is important if efficiency matters; most recycling of expensive construct is done on per-factory basis.


    Creation of a factory instance is a light-weight operation, and since there is no need for pluggable alternative implementations (as there is no "standard" JSON processor API to implement), the default constructor is used for constructing factory instances.
  syntax:
    content: public class JsonFactory extends TokenStreamFactory implements Versioned, Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.TokenStreamFactory
  implements:
  - com.fasterxml.jackson.core.Versioned
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.core.TokenStreamFactory._createDataOutputWrapper(java.io.DataOutput)
  - com.fasterxml.jackson.core.TokenStreamFactory._optimizedStreamFromURL(java.net.URL)
  - com.fasterxml.jackson.core.TokenStreamFactory.canHandleBinaryNatively()
  - com.fasterxml.jackson.core.TokenStreamFactory.canParseAsync()
  - com.fasterxml.jackson.core.TokenStreamFactory.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.DataOutput)
  - com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.DataOutput,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.OutputStream)
  - com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  - com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.Writer)
  - com.fasterxml.jackson.core.TokenStreamFactory.createNonBlockingByteArrayParser()
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[])
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[])
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.DataInput)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.File)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.InputStream)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.Reader)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.lang.String)
  - com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.net.URL)
  - com.fasterxml.jackson.core.TokenStreamFactory.getFormatGeneratorFeatures()
  - com.fasterxml.jackson.core.TokenStreamFactory.getFormatName()
  - com.fasterxml.jackson.core.TokenStreamFactory.getFormatParserFeatures()
  - com.fasterxml.jackson.core.TokenStreamFactory.getFormatReadFeatureType()
  - com.fasterxml.jackson.core.TokenStreamFactory.getFormatWriteFeatureType()
  - com.fasterxml.jackson.core.TokenStreamFactory.getGeneratorFeatures()
  - com.fasterxml.jackson.core.TokenStreamFactory.getParserFeatures()
  - com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.TokenStreamFactory.requiresPropertyOrdering()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonFactory.DEFAULT_FACTORY_FEATURE_FLAGS
  id: DEFAULT_FACTORY_FEATURE_FLAGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: DEFAULT_FACTORY_FEATURE_FLAGS
  nameWithType: JsonFactory.DEFAULT_FACTORY_FEATURE_FLAGS
  fullName: com.fasterxml.jackson.core.JsonFactory.DEFAULT_FACTORY_FEATURE_FLAGS
  type: Field
  package: com.fasterxml.jackson.core
  summary: Bitfield (set of flags) of all factory features that are enabled by default.
  syntax:
    content: protected static final int DEFAULT_FACTORY_FEATURE_FLAGS
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.DEFAULT_GENERATOR_FEATURE_FLAGS
  id: DEFAULT_GENERATOR_FEATURE_FLAGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: DEFAULT_GENERATOR_FEATURE_FLAGS
  nameWithType: JsonFactory.DEFAULT_GENERATOR_FEATURE_FLAGS
  fullName: com.fasterxml.jackson.core.JsonFactory.DEFAULT_GENERATOR_FEATURE_FLAGS
  type: Field
  package: com.fasterxml.jackson.core
  summary: Bitfield (set of flags) of all generator features that are enabled by default.
  syntax:
    content: protected static final int DEFAULT_GENERATOR_FEATURE_FLAGS
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS
  id: DEFAULT_PARSER_FEATURE_FLAGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: DEFAULT_PARSER_FEATURE_FLAGS
  nameWithType: JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS
  fullName: com.fasterxml.jackson.core.JsonFactory.DEFAULT_PARSER_FEATURE_FLAGS
  type: Field
  package: com.fasterxml.jackson.core
  summary: Bitfield (set of flags) of all parser features that are enabled by default.
  syntax:
    content: protected static final int DEFAULT_PARSER_FEATURE_FLAGS
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.DEFAULT_QUOTE_CHAR
  id: DEFAULT_QUOTE_CHAR
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: DEFAULT_QUOTE_CHAR
  nameWithType: JsonFactory.DEFAULT_QUOTE_CHAR
  fullName: com.fasterxml.jackson.core.JsonFactory.DEFAULT_QUOTE_CHAR
  type: Field
  package: com.fasterxml.jackson.core
  syntax:
    content: public static final char DEFAULT_QUOTE_CHAR
    return:
      type: char
- uid: com.fasterxml.jackson.core.JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR
  id: DEFAULT_ROOT_VALUE_SEPARATOR
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: DEFAULT_ROOT_VALUE_SEPARATOR
  nameWithType: JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR
  fullName: com.fasterxml.jackson.core.JsonFactory.DEFAULT_ROOT_VALUE_SEPARATOR
  type: Field
  package: com.fasterxml.jackson.core
  syntax:
    content: public static final SerializableString DEFAULT_ROOT_VALUE_SEPARATOR
    return:
      type: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.core.JsonFactory.FORMAT_NAME_JSON
  id: FORMAT_NAME_JSON
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: FORMAT_NAME_JSON
  nameWithType: JsonFactory.FORMAT_NAME_JSON
  fullName: com.fasterxml.jackson.core.JsonFactory.FORMAT_NAME_JSON
  type: Field
  package: com.fasterxml.jackson.core
  summary: Name used to identify JSON format (and returned by <xref uid="com.fasterxml.jackson.core.JsonFactory.getFormatName()" data-throw-if-not-resolved="false">#getFormatName()</xref>
  syntax:
    content: public static final String FORMAT_NAME_JSON
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.JsonFactory.JsonFactory()
  id: JsonFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: JsonFactory()
  nameWithType: JsonFactory.JsonFactory()
  fullName: com.fasterxml.jackson.core.JsonFactory.JsonFactory()
  overload: com.fasterxml.jackson.core.JsonFactory.JsonFactory*
  type: Constructor
  package: com.fasterxml.jackson.core
  summary: 'Default constructor used to create factory instances. Creation of a factory instance is a light-weight operation, but it is still a good idea to reuse limited number of factory instances (and quite often just a single instance): factories are used as context for storing some reused processing objects (such as symbol tables parsers use) and this reuse only works within context of a single factory instance.'
  syntax:
    content: public JsonFactory()
- uid: com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.core.ObjectCodec)
  id: JsonFactory(com.fasterxml.jackson.core.JsonFactory,com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: JsonFactory(JsonFactory src, ObjectCodec codec)
  nameWithType: JsonFactory.JsonFactory(JsonFactory src, ObjectCodec codec)
  fullName: com.fasterxml.jackson.core.JsonFactory.JsonFactory(JsonFactory src, ObjectCodec codec)
  overload: com.fasterxml.jackson.core.JsonFactory.JsonFactory*
  type: Constructor
  package: com.fasterxml.jackson.core
  summary: Constructor used when copy()ing a factory instance.
  syntax:
    content: protected JsonFactory(JsonFactory src, ObjectCodec codec)
    parameters:
    - id: src
      type: com.fasterxml.jackson.core.JsonFactory
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.JsonFactoryBuilder)
  id: JsonFactory(com.fasterxml.jackson.core.JsonFactoryBuilder)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: JsonFactory(JsonFactoryBuilder b)
  nameWithType: JsonFactory.JsonFactory(JsonFactoryBuilder b)
  fullName: com.fasterxml.jackson.core.JsonFactory.JsonFactory(JsonFactoryBuilder b)
  overload: com.fasterxml.jackson.core.JsonFactory.JsonFactory*
  type: Constructor
  package: com.fasterxml.jackson.core
  summary: Constructor used by <xref uid="com.fasterxml.jackson.core.JsonFactoryBuilder" data-throw-if-not-resolved="false">JsonFactoryBuilder</xref> for instantiation.
  syntax:
    content: public JsonFactory(JsonFactoryBuilder b)
    parameters:
    - id: b
      type: com.fasterxml.jackson.core.JsonFactoryBuilder
- uid: com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.ObjectCodec)
  id: JsonFactory(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: JsonFactory(ObjectCodec oc)
  nameWithType: JsonFactory.JsonFactory(ObjectCodec oc)
  fullName: com.fasterxml.jackson.core.JsonFactory.JsonFactory(ObjectCodec oc)
  overload: com.fasterxml.jackson.core.JsonFactory.JsonFactory*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: public JsonFactory(ObjectCodec oc)
    parameters:
    - id: oc
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonFactory.JsonFactory(com.fasterxml.jackson.core.TSFBuilder<?,?>,boolean)
  id: JsonFactory(com.fasterxml.jackson.core.TSFBuilder<?,?>,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: JsonFactory(TSFBuilder<?,?> b, boolean bogus)
  nameWithType: JsonFactory.JsonFactory(TSFBuilder<?,?> b, boolean bogus)
  fullName: com.fasterxml.jackson.core.JsonFactory.JsonFactory(TSFBuilder<?,?> b, boolean bogus)
  overload: com.fasterxml.jackson.core.JsonFactory.JsonFactory*
  type: Constructor
  package: com.fasterxml.jackson.core
  summary: Constructor for subtypes; needed to work around the fact that before 3.0, this factory has cumbersome dual role as generic type as well as actual implementation for json.
  syntax:
    content: protected JsonFactory(TSFBuilder<?,?> b, boolean bogus)
    parameters:
    - id: b
      type: com.fasterxml.jackson.core.TSFBuilder<?,?>
      description: Builder that contains information
    - id: bogus
      type: boolean
      description: Argument only needed to separate constructor signature; ignored
- uid: com.fasterxml.jackson.core.JsonFactory._byteSymbolCanonicalizer
  id: _byteSymbolCanonicalizer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _byteSymbolCanonicalizer
  nameWithType: JsonFactory._byteSymbolCanonicalizer
  fullName: com.fasterxml.jackson.core.JsonFactory._byteSymbolCanonicalizer
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Alternative to the basic symbol table, some stream-based parsers use different name canonicalization method.


    TODO: should clean up this; looks messy having 2 alternatives with not very clear differences.
  syntax:
    content: protected final transient ByteQuadsCanonicalizer _byteSymbolCanonicalizer
    return:
      type: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
- uid: com.fasterxml.jackson.core.JsonFactory._characterEscapes
  id: _characterEscapes
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _characterEscapes
  nameWithType: JsonFactory._characterEscapes
  fullName: com.fasterxml.jackson.core.JsonFactory._characterEscapes
  type: Field
  package: com.fasterxml.jackson.core
  summary: Definition of custom character escapes to use for generators created by this factory, if any. If null, standard data format specific escapes are used.
  syntax:
    content: protected CharacterEscapes _characterEscapes
    return:
      type: com.fasterxml.jackson.core.io.CharacterEscapes
- uid: com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy(java.lang.Class<?>)
  id: _checkInvalidCopy(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _checkInvalidCopy(Class<?> exp)
  nameWithType: JsonFactory._checkInvalidCopy(Class<?> exp)
  fullName: com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy(Class<?> exp)
  overload: com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected void _checkInvalidCopy(Class<?> exp)
    parameters:
    - id: exp
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.core.JsonFactory._createContext(java.lang.Object,boolean)
  id: _createContext(java.lang.Object,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createContext(Object srcRef, boolean resourceManaged)
  nameWithType: JsonFactory._createContext(Object srcRef, boolean resourceManaged)
  fullName: com.fasterxml.jackson.core.JsonFactory._createContext(Object srcRef, boolean resourceManaged)
  overload: com.fasterxml.jackson.core.JsonFactory._createContext*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Overridable factory method that actually instantiates desired context object.
  syntax:
    content: protected IOContext _createContext(Object srcRef, boolean resourceManaged)
    parameters:
    - id: srcRef
      type: java.lang.Object
    - id: resourceManaged
      type: boolean
    return:
      type: com.fasterxml.jackson.core.io.IOContext
- uid: com.fasterxml.jackson.core.JsonFactory._createGenerator(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)
  id: _createGenerator(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createGenerator(Writer out, IOContext ctxt)
  nameWithType: JsonFactory._createGenerator(Writer out, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createGenerator(Writer out, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Overridable factory method that actually instantiates generator for given <xref uid="java.io.Writer" data-throw-if-not-resolved="false">Writer</xref> and context object.


    This method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations.
  syntax:
    content: protected JsonGenerator _createGenerator(Writer out, IOContext ctxt)
    parameters:
    - id: out
      type: java.io.Writer
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(java.lang.Object)
  id: _createNonBlockingContext(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createNonBlockingContext(Object srcRef)
  nameWithType: JsonFactory._createNonBlockingContext(Object srcRef)
  fullName: com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext(Object srcRef)
  overload: com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Overridable factory method that actually instantiates desired context object for async (non-blocking) parsing
  syntax:
    content: protected IOContext _createNonBlockingContext(Object srcRef)
    parameters:
    - id: srcRef
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.core.io.IOContext
- uid: com.fasterxml.jackson.core.JsonFactory._createParser(byte[],int,int,com.fasterxml.jackson.core.io.IOContext)
  id: _createParser(byte[],int,int,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createParser(byte[] data, int offset, int len, IOContext ctxt)
  nameWithType: JsonFactory._createParser(byte[] data, int offset, int len, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createParser(byte[] data, int offset, int len, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Overridable factory method that actually instantiates parser using given <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref> object for reading content passed as raw byte array.


    This method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations.
  syntax:
    content: protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt)
    parameters:
    - id: data
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createParser(char[],int,int,com.fasterxml.jackson.core.io.IOContext,boolean)
  id: _createParser(char[],int,int,com.fasterxml.jackson.core.io.IOContext,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)
  nameWithType: JsonFactory._createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)
  fullName: com.fasterxml.jackson.core.JsonFactory._createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)
  overload: com.fasterxml.jackson.core.JsonFactory._createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Overridable factory method that actually instantiates parser using given `char[]` object for accessing content.
  syntax:
    content: protected JsonParser _createParser(char[] data, int offset, int len, IOContext ctxt, boolean recyclable)
    parameters:
    - id: data
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    - id: recyclable
      type: boolean
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createParser(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)
  id: _createParser(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createParser(DataInput input, IOContext ctxt)
  nameWithType: JsonFactory._createParser(DataInput input, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createParser(DataInput input, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Optional factory method, expected to be overridden
  syntax:
    content: protected JsonParser _createParser(DataInput input, IOContext ctxt)
    parameters:
    - id: input
      type: java.io.DataInput
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createParser(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)
  id: _createParser(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createParser(InputStream in, IOContext ctxt)
  nameWithType: JsonFactory._createParser(InputStream in, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createParser(InputStream in, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Overridable factory method that actually instantiates desired parser given <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> and context object.


    This method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations.
  syntax:
    content: protected JsonParser _createParser(InputStream in, IOContext ctxt)
    parameters:
    - id: in
      type: java.io.InputStream
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createParser(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)
  id: _createParser(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createParser(Reader r, IOContext ctxt)
  nameWithType: JsonFactory._createParser(Reader r, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createParser(Reader r, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Overridable factory method that actually instantiates parser using given <xref uid="java.io.Reader" data-throw-if-not-resolved="false">Reader</xref> object for reading content.


    This method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations.
  syntax:
    content: protected JsonParser _createParser(Reader r, IOContext ctxt)
    parameters:
    - id: r
      type: java.io.Reader
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(java.io.OutputStream,com.fasterxml.jackson.core.io.IOContext)
  id: _createUTF8Generator(java.io.OutputStream,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createUTF8Generator(OutputStream out, IOContext ctxt)
  nameWithType: JsonFactory._createUTF8Generator(OutputStream out, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createUTF8Generator(OutputStream out, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createUTF8Generator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Overridable factory method that actually instantiates generator for given <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> and context object, using UTF-8 encoding.


    This method is specifically designed to remain compatible between minor versions so that sub-classes can count on it being called as expected. That is, it is part of official interface from sub-class perspective, although not a public method available to users of factory implementations.
  syntax:
    content: protected JsonGenerator _createUTF8Generator(OutputStream out, IOContext ctxt)
    parameters:
    - id: out
      type: java.io.OutputStream
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._createWriter(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding,com.fasterxml.jackson.core.io.IOContext)
  id: _createWriter(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt)
  nameWithType: JsonFactory._createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._createWriter*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected Writer _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt)
    parameters:
    - id: out
      type: java.io.OutputStream
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: java.io.Writer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._decorate(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)
  id: _decorate(java.io.DataInput,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _decorate(DataInput in, IOContext ctxt)
  nameWithType: JsonFactory._decorate(DataInput in, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._decorate(DataInput in, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._decorate*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected final DataInput _decorate(DataInput in, IOContext ctxt)
    parameters:
    - id: in
      type: java.io.DataInput
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: java.io.DataInput
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._decorate(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)
  id: _decorate(java.io.InputStream,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _decorate(InputStream in, IOContext ctxt)
  nameWithType: JsonFactory._decorate(InputStream in, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._decorate(InputStream in, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._decorate*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected final InputStream _decorate(InputStream in, IOContext ctxt)
    parameters:
    - id: in
      type: java.io.InputStream
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: java.io.InputStream
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._decorate(java.io.OutputStream,com.fasterxml.jackson.core.io.IOContext)
  id: _decorate(java.io.OutputStream,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _decorate(OutputStream out, IOContext ctxt)
  nameWithType: JsonFactory._decorate(OutputStream out, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._decorate(OutputStream out, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._decorate*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected final OutputStream _decorate(OutputStream out, IOContext ctxt)
    parameters:
    - id: out
      type: java.io.OutputStream
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: java.io.OutputStream
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._decorate(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)
  id: _decorate(java.io.Reader,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _decorate(Reader in, IOContext ctxt)
  nameWithType: JsonFactory._decorate(Reader in, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._decorate(Reader in, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._decorate*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected final Reader _decorate(Reader in, IOContext ctxt)
    parameters:
    - id: in
      type: java.io.Reader
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: java.io.Reader
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._decorate(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)
  id: _decorate(java.io.Writer,com.fasterxml.jackson.core.io.IOContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _decorate(Writer out, IOContext ctxt)
  nameWithType: JsonFactory._decorate(Writer out, IOContext ctxt)
  fullName: com.fasterxml.jackson.core.JsonFactory._decorate(Writer out, IOContext ctxt)
  overload: com.fasterxml.jackson.core.JsonFactory._decorate*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: protected final Writer _decorate(Writer out, IOContext ctxt)
    parameters:
    - id: out
      type: java.io.Writer
    - id: ctxt
      type: com.fasterxml.jackson.core.io.IOContext
    return:
      type: java.io.Writer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory._factoryFeatures
  id: _factoryFeatures
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _factoryFeatures
  nameWithType: JsonFactory._factoryFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory._factoryFeatures
  type: Field
  package: com.fasterxml.jackson.core
  summary: Currently enabled factory features.
  syntax:
    content: protected int _factoryFeatures
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory._generatorFeatures
  id: _generatorFeatures
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _generatorFeatures
  nameWithType: JsonFactory._generatorFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory._generatorFeatures
  type: Field
  package: com.fasterxml.jackson.core
  summary: Currently enabled generator features.
  syntax:
    content: protected int _generatorFeatures
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory._getBufferRecycler()
  id: _getBufferRecycler()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _getBufferRecycler()
  nameWithType: JsonFactory._getBufferRecycler()
  fullName: com.fasterxml.jackson.core.JsonFactory._getBufferRecycler()
  overload: com.fasterxml.jackson.core.JsonFactory._getBufferRecycler*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method used by factory to create buffer recycler instances for parsers and generators.


    Note: only public to give access for `ObjectMapper`
  syntax:
    content: public BufferRecycler _getBufferRecycler()
    return:
      type: com.fasterxml.jackson.core.util.BufferRecycler
- uid: com.fasterxml.jackson.core.JsonFactory._inputDecorator
  id: _inputDecorator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _inputDecorator
  nameWithType: JsonFactory._inputDecorator
  fullName: com.fasterxml.jackson.core.JsonFactory._inputDecorator
  type: Field
  package: com.fasterxml.jackson.core
  summary: Optional helper object that may decorate input sources, to do additional processing on input during parsing.
  syntax:
    content: protected InputDecorator _inputDecorator
    return:
      type: com.fasterxml.jackson.core.io.InputDecorator
- uid: com.fasterxml.jackson.core.JsonFactory._maximumNonEscapedChar
  id: _maximumNonEscapedChar
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _maximumNonEscapedChar
  nameWithType: JsonFactory._maximumNonEscapedChar
  fullName: com.fasterxml.jackson.core.JsonFactory._maximumNonEscapedChar
  type: Field
  package: com.fasterxml.jackson.core
  summary: 'Optional threshold used for automatically escaping character above certain character code value: either `0` to indicate that no threshold is specified, or value at or above 127 to indicate last character code that is NOT automatically escaped (but depends on other configuration rules for checking).'
  syntax:
    content: protected int _maximumNonEscapedChar
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory._objectCodec
  id: _objectCodec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _objectCodec
  nameWithType: JsonFactory._objectCodec
  fullName: com.fasterxml.jackson.core.JsonFactory._objectCodec
  type: Field
  package: com.fasterxml.jackson.core
  summary: Object that implements conversion functionality between Java objects and JSON content. For base JsonFactory implementation usually not set by default, but can be explicitly set. Sub-classes (like @link org.codehaus.jackson.map.MappingJsonFactory\} usually provide an implementation.
  syntax:
    content: protected ObjectCodec _objectCodec
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonFactory._outputDecorator
  id: _outputDecorator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _outputDecorator
  nameWithType: JsonFactory._outputDecorator
  fullName: com.fasterxml.jackson.core.JsonFactory._outputDecorator
  type: Field
  package: com.fasterxml.jackson.core
  summary: Optional helper object that may decorate output object, to do additional processing on output during content generation.
  syntax:
    content: protected OutputDecorator _outputDecorator
    return:
      type: com.fasterxml.jackson.core.io.OutputDecorator
- uid: com.fasterxml.jackson.core.JsonFactory._parserFeatures
  id: _parserFeatures
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _parserFeatures
  nameWithType: JsonFactory._parserFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory._parserFeatures
  type: Field
  package: com.fasterxml.jackson.core
  summary: Currently enabled parser features.
  syntax:
    content: protected int _parserFeatures
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory._quoteChar
  id: _quoteChar
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _quoteChar
  nameWithType: JsonFactory._quoteChar
  fullName: com.fasterxml.jackson.core.JsonFactory._quoteChar
  type: Field
  package: com.fasterxml.jackson.core
  summary: Character used for quoting field names (if field name quoting has not been disabled with <xref uid="com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES" data-throw-if-not-resolved="false">JsonWriteFeature#QUOTE_FIELD_NAMES</xref>) and JSON String values.
  syntax:
    content: protected final char _quoteChar
    return:
      type: char
- uid: com.fasterxml.jackson.core.JsonFactory._rootCharSymbols
  id: _rootCharSymbols
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _rootCharSymbols
  nameWithType: JsonFactory._rootCharSymbols
  fullName: com.fasterxml.jackson.core.JsonFactory._rootCharSymbols
  type: Field
  package: com.fasterxml.jackson.core
  summary: Each factory comes equipped with a shared root symbol table. It should not be linked back to the original blueprint, to avoid contents from leaking between factories.
  syntax:
    content: protected final transient CharsToNameCanonicalizer _rootCharSymbols
    return:
      type: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer
- uid: com.fasterxml.jackson.core.JsonFactory._rootValueSeparator
  id: _rootValueSeparator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: _rootValueSeparator
  nameWithType: JsonFactory._rootValueSeparator
  fullName: com.fasterxml.jackson.core.JsonFactory._rootValueSeparator
  type: Field
  package: com.fasterxml.jackson.core
  summary: Separator used between root-level values, if any; null indicates "do not add separator". Default separator is a single space character.
  syntax:
    content: protected SerializableString _rootValueSeparator
    return:
      type: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.core.JsonFactory.builder()
  id: builder()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: builder()
  nameWithType: JsonFactory.builder()
  fullName: com.fasterxml.jackson.core.JsonFactory.builder()
  overload: com.fasterxml.jackson.core.JsonFactory.builder*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Main factory method to use for constructing <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> instances with different configuration: creates and returns a builder for collecting configuration settings; instance created by calling `build()` after all configuration set.


    NOTE: signature unfortunately does not expose true implementation type; this will be fixed in 3.0.
  syntax:
    content: public static TSFBuilder<?,?> builder()
    return:
      type: com.fasterxml.jackson.core.TSFBuilder<?,?>
- uid: com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively()
  id: canHandleBinaryNatively()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: canHandleBinaryNatively()
  nameWithType: JsonFactory.canHandleBinaryNatively()
  fullName: com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively()
  overload: com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Introspection method that higher-level functionality may call to see whether underlying data format can read and write binary data natively; that is, embeded it as-is without using encodings such as Base64.


    Default implementation returns `false` as JSON does not support native access: all binary content must use Base64 encoding. Most binary formats (like Smile and Avro) support native binary content.
  syntax:
    content: public boolean canHandleBinaryNatively()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.canParseAsync()
  id: canParseAsync()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: canParseAsync()
  nameWithType: JsonFactory.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonFactory.canParseAsync()
  overload: com.fasterxml.jackson.core.JsonFactory.canParseAsync*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Introspection method that can be used to check whether this factory can create non-blocking parsers: parsers that do not use blocking I/O abstractions but instead use a <xref uid="com.fasterxml.jackson.core.async.NonBlockingInputFeeder" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.async.NonBlockingInputFeeder</xref>.'
  syntax:
    content: public boolean canParseAsync()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.canUseCharArrays()
  id: canUseCharArrays()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: canUseCharArrays()
  nameWithType: JsonFactory.canUseCharArrays()
  fullName: com.fasterxml.jackson.core.JsonFactory.canUseCharArrays()
  overload: com.fasterxml.jackson.core.JsonFactory.canUseCharArrays*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Introspection method that can be used by base factory to check whether access using `char[]` is something that actual parser implementations can take advantage of, over having to use <xref uid="java.io.Reader" data-throw-if-not-resolved="false">java.io.Reader</xref>. Sub-types are expected to override definition; default implementation (suitable for JSON) alleges that optimization are possible; and thereby is likely to try to access <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref> content by first copying it into recyclable intermediate buffer.
  syntax:
    content: public boolean canUseCharArrays()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  id: canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: canUseSchema(FormatSchema schema)
  nameWithType: JsonFactory.canUseSchema(FormatSchema schema)
  fullName: com.fasterxml.jackson.core.JsonFactory.canUseSchema(FormatSchema schema)
  overload: com.fasterxml.jackson.core.JsonFactory.canUseSchema*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be used to quickly check whether given schema is something that parsers and/or generators constructed by this factory could use. Note that this means possible use, at the level of data format (i.e. schema is for same data format as parsers and generators this factory constructs); individual schema instances may have further usage restrictions.
  syntax:
    content: public boolean canUseSchema(FormatSchema schema)
    parameters:
    - id: schema
      type: com.fasterxml.jackson.core.FormatSchema
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonFactory.Feature,boolean)
  id: configure(com.fasterxml.jackson.core.JsonFactory.Feature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: configure(JsonFactory.Feature f, boolean state)
  nameWithType: JsonFactory.configure(JsonFactory.Feature f, boolean state)
  fullName: com.fasterxml.jackson.core.JsonFactory.configure(JsonFactory.Feature f, boolean state)
  overload: com.fasterxml.jackson.core.JsonFactory.configure*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling or disabling specified parser feature (check <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">JsonParser.Feature</xref> for list of features)
  syntax:
    content: public final JsonFactory configure(JsonFactory.Feature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonFactory.Feature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  id: configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: configure(JsonGenerator.Feature f, boolean state)
  nameWithType: JsonFactory.configure(JsonGenerator.Feature f, boolean state)
  fullName: com.fasterxml.jackson.core.JsonFactory.configure(JsonGenerator.Feature f, boolean state)
  overload: com.fasterxml.jackson.core.JsonFactory.configure*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling or disabling specified generator feature (check <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">JsonGenerator.Feature</xref> for list of features)
  syntax:
    content: public final JsonFactory configure(JsonGenerator.Feature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  id: configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: configure(JsonParser.Feature f, boolean state)
  nameWithType: JsonFactory.configure(JsonParser.Feature f, boolean state)
  fullName: com.fasterxml.jackson.core.JsonFactory.configure(JsonParser.Feature f, boolean state)
  overload: com.fasterxml.jackson.core.JsonFactory.configure*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling or disabling specified parser feature (check <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">JsonParser.Feature</xref> for list of features)
  syntax:
    content: public final JsonFactory configure(JsonParser.Feature f, boolean state)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    - id: state
      type: boolean
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.copy()
  id: copy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: copy()
  nameWithType: JsonFactory.copy()
  fullName: com.fasterxml.jackson.core.JsonFactory.copy()
  overload: com.fasterxml.jackson.core.JsonFactory.copy*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing a new <xref uid="com.fasterxml.jackson.core.JsonFactory" data-throw-if-not-resolved="false">JsonFactory</xref> that has the same settings as this instance, but is otherwise independent (i.e. nothing is actually shared, symbol tables are separate). Note that <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> reference is not copied but is set to null; caller typically needs to set it after calling this method. Reason for this is that the codec is used for callbacks, and assumption is that there is strict 1-to-1 mapping between codec, factory. Caller has to, then, explicitly set codec after making the copy.
  syntax:
    content: public JsonFactory copy()
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.DataOutput)
  id: createGenerator(java.io.DataOutput)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createGenerator(DataOutput out)
  nameWithType: JsonFactory.createGenerator(DataOutput out)
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput out)
  overload: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Convenience method for constructing generator that uses default encoding of the format (UTF-8 for JSON and most other data formats).


    Note: there are formats that use fixed encoding (like most binary data formats).
  syntax:
    content: public JsonGenerator createGenerator(DataOutput out)
    parameters:
    - id: out
      type: java.io.DataOutput
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.DataOutput,com.fasterxml.jackson.core.JsonEncoding)
  id: createGenerator(java.io.DataOutput,com.fasterxml.jackson.core.JsonEncoding)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createGenerator(DataOutput out, JsonEncoding enc)
  nameWithType: JsonFactory.createGenerator(DataOutput out, JsonEncoding enc)
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator(DataOutput out, JsonEncoding enc)
  overload: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing generator for writing content using specified <xref uid="java.io.DataOutput" data-throw-if-not-resolved="false">DataOutput</xref> instance.
  syntax:
    content: public JsonGenerator createGenerator(DataOutput out, JsonEncoding enc)
    parameters:
    - id: out
      type: java.io.DataOutput
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  id: createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createGenerator(File f, JsonEncoding enc)
  nameWithType: JsonFactory.createGenerator(File f, JsonEncoding enc)
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator(File f, JsonEncoding enc)
  overload: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON generator for writing JSON content to specified file, overwriting contents it might have (or creating it if such file does not yet exist). Encoding to use must be specified, and needs to be one of available types (as per JSON specification).


    Underlying stream **is owned** by the generator constructed, i.e. generator will handle closing of file when <xref uid="com.fasterxml.jackson.core.JsonGenerator.close*" data-throw-if-not-resolved="false">JsonGenerator#close</xref> is called.
  syntax:
    content: public JsonGenerator createGenerator(File f, JsonEncoding enc)
    parameters:
    - id: f
      type: java.io.File
      description: File to write contents to
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
      description: Character encoding to use
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.OutputStream)
  id: createGenerator(java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createGenerator(OutputStream out)
  nameWithType: JsonFactory.createGenerator(OutputStream out)
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream out)
  overload: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Convenience method for constructing generator that uses default encoding of the format (UTF-8 for JSON and most other data formats).


    Note: there are formats that use fixed encoding (like most binary data formats).
  syntax:
    content: public JsonGenerator createGenerator(OutputStream out)
    parameters:
    - id: out
      type: java.io.OutputStream
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  id: createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createGenerator(OutputStream out, JsonEncoding enc)
  nameWithType: JsonFactory.createGenerator(OutputStream out, JsonEncoding enc)
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator(OutputStream out, JsonEncoding enc)
  overload: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON generator for writing JSON content using specified output stream. Encoding to use must be specified, and needs to be one of available types (as per JSON specification).


    Underlying stream **is NOT owned** by the generator constructed, so that generator will NOT close the output stream when <xref uid="com.fasterxml.jackson.core.JsonGenerator.close*" data-throw-if-not-resolved="false">JsonGenerator#close</xref> is called (unless auto-closing feature, <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET</xref> is enabled). Using application needs to close it explicitly if this is the case.


    Note: there are formats that use fixed encoding (like most binary data formats) and that ignore passed in encoding.
  syntax:
    content: public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc)
    parameters:
    - id: out
      type: java.io.OutputStream
      description: OutputStream to use for writing JSON content
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
      description: Character encoding to use
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator(java.io.Writer)
  id: createGenerator(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createGenerator(Writer w)
  nameWithType: JsonFactory.createGenerator(Writer w)
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator(Writer w)
  overload: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON generator for writing JSON content using specified Writer.


    Underlying stream **is NOT owned** by the generator constructed, so that generator will NOT close the Reader when <xref uid="com.fasterxml.jackson.core.JsonGenerator.close*" data-throw-if-not-resolved="false">JsonGenerator#close</xref> is called (unless auto-closing feature, <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET</xref> is enabled). Using application needs to close it explicitly.
  syntax:
    content: public JsonGenerator createGenerator(Writer w)
    parameters:
    - id: w
      type: java.io.Writer
      description: Writer to use for writing JSON content
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.OutputStream)
  id: createJsonGenerator(java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonGenerator(OutputStream out)
  nameWithType: JsonFactory.createJsonGenerator(OutputStream out)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream out)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Convenience method for constructing generator that uses default encoding of the format (UTF-8 for JSON and most other data formats).


    Note: there are formats that use fixed encoding (like most binary data formats).
  syntax:
    content: public JsonGenerator createJsonGenerator(OutputStream out)
    parameters:
    - id: out
      type: java.io.OutputStream
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  id: createJsonGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonGenerator(OutputStream out, JsonEncoding enc)
  nameWithType: JsonFactory.createJsonGenerator(OutputStream out, JsonEncoding enc)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(OutputStream out, JsonEncoding enc)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON generator for writing JSON content using specified output stream. Encoding to use must be specified, and needs to be one of available types (as per JSON specification).


    Underlying stream **is NOT owned** by the generator constructed, so that generator will NOT close the output stream when <xref uid="com.fasterxml.jackson.core.JsonGenerator.close*" data-throw-if-not-resolved="false">JsonGenerator#close</xref> is called (unless auto-closing feature, <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET</xref> is enabled). Using application needs to close it explicitly if this is the case.


    Note: there are formats that use fixed encoding (like most binary data formats) and that ignore passed in encoding.
  syntax:
    content: public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)
    parameters:
    - id: out
      type: java.io.OutputStream
      description: OutputStream to use for writing JSON content
    - id: enc
      type: com.fasterxml.jackson.core.JsonEncoding
      description: Character encoding to use
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(java.io.Writer)
  id: createJsonGenerator(java.io.Writer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonGenerator(Writer out)
  nameWithType: JsonFactory.createJsonGenerator(Writer out)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator(Writer out)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON generator for writing JSON content using specified Writer.


    Underlying stream **is NOT owned** by the generator constructed, so that generator will NOT close the Reader when <xref uid="com.fasterxml.jackson.core.JsonGenerator.close*" data-throw-if-not-resolved="false">JsonGenerator#close</xref> is called (unless auto-closing feature, <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET</xref> is enabled). Using application needs to close it explicitly.
  syntax:
    content: public JsonGenerator createJsonGenerator(Writer out)
    parameters:
    - id: out
      type: java.io.Writer
      description: Writer to use for writing JSON content
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[])
  id: createJsonParser(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(byte[] data)
  nameWithType: JsonFactory.createJsonParser(byte[] data)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[] data)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing the contents of given byte array.
  syntax:
    content: public JsonParser createJsonParser(byte[] data)
    parameters:
    - id: data
      type: byte[]
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[],int,int)
  id: createJsonParser(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(byte[] data, int offset, int len)
  nameWithType: JsonFactory.createJsonParser(byte[] data, int offset, int len)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(byte[] data, int offset, int len)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing the contents of given byte array.
  syntax:
    content: public JsonParser createJsonParser(byte[] data, int offset, int len)
    parameters:
    - id: data
      type: byte[]
      description: Buffer that contains data to parse
    - id: offset
      type: int
      description: Offset of the first data byte within buffer
    - id: len
      type: int
      description: Length of contents to parse within buffer
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.File)
  id: createJsonParser(java.io.File)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(File f)
  nameWithType: JsonFactory.createJsonParser(File f)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(File f)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON parser instance to parse contents of specified file.


    Encoding is auto-detected from contents according to JSON specification recommended mechanism. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)" data-throw-if-not-resolved="false">#createParser(java.io.Reader)</xref>.


    Underlying input stream (needed for reading contents) will be **owned** (and managed, i.e. closed as need be) by the parser, since caller has no access to it.
  syntax:
    content: public JsonParser createJsonParser(File f)
    parameters:
    - id: f
      type: java.io.File
      description: File that contains JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.InputStream)
  id: createJsonParser(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(InputStream in)
  nameWithType: JsonFactory.createJsonParser(InputStream in)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(InputStream in)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON parser instance to parse the contents accessed via specified input stream.


    The input stream will **not be owned** by the parser, it will still be managed (i.e. closed if end-of-stream is reacher, or parser close method called) if (and only if) <xref uid="com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE</xref> is enabled.


    Note: no encoding argument is taken since it can always be auto-detected as suggested by JSON RFC. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)" data-throw-if-not-resolved="false">#createParser(java.io.Reader)</xref>.
  syntax:
    content: public JsonParser createJsonParser(InputStream in)
    parameters:
    - id: in
      type: java.io.InputStream
      description: InputStream to use for reading JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.io.Reader)
  id: createJsonParser(java.io.Reader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(Reader r)
  nameWithType: JsonFactory.createJsonParser(Reader r)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(Reader r)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing parser for parsing the contents accessed via specified Reader.


    The read stream will **not be owned** by the parser, it will still be managed (i.e. closed if end-of-stream is reacher, or parser close method called) if (and only if) <xref uid="com.fasterxml.jackson.core.JsonParser.Feature.AUTO_CLOSE_SOURCE" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE</xref> is enabled.
  syntax:
    content: public JsonParser createJsonParser(Reader r)
    parameters:
    - id: r
      type: java.io.Reader
      description: Reader to use for reading JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.lang.String)
  id: createJsonParser(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(String content)
  nameWithType: JsonFactory.createJsonParser(String content)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(String content)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing contents of given String.
  syntax:
    content: public JsonParser createJsonParser(String content)
    parameters:
    - id: content
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser(java.net.URL)
  id: createJsonParser(java.net.URL)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createJsonParser(URL url)
  nameWithType: JsonFactory.createJsonParser(URL url)
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser(URL url)
  overload: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON parser instance to parse contents of resource reference by given URL.


    Encoding is auto-detected from contents according to JSON specification recommended mechanism. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)" data-throw-if-not-resolved="false">#createParser(java.io.Reader)</xref>.


    Underlying input stream (needed for reading contents) will be **owned** (and managed, i.e. closed as need be) by the parser, since caller has no access to it.
  syntax:
    content: public JsonParser createJsonParser(URL url)
    parameters:
    - id: url
      type: java.net.URL
      description: URL pointing to resource that contains JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser()
  id: createNonBlockingByteArrayParser()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createNonBlockingByteArrayParser()
  nameWithType: JsonFactory.createNonBlockingByteArrayParser()
  fullName: com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser()
  overload: com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Optional method for constructing parser for non-blocking parsing via <xref uid="com.fasterxml.jackson.core.async.ByteArrayFeeder" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.async.ByteArrayFeeder</xref> interface (accessed using <xref uid="com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()" data-throw-if-not-resolved="false">JsonParser#getNonBlockingInputFeeder()</xref> from constructed instance).


    If this factory does not support non-blocking parsing (either at all, or from byte array), will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    Note that JSON-backed factory only supports parsing of UTF-8 encoded JSON content (and US-ASCII since it is proper subset); other encodings are not supported at this point.
  syntax:
    content: public JsonParser createNonBlockingByteArrayParser()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(byte[])
  id: createParser(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(byte[] data)
  nameWithType: JsonFactory.createParser(byte[] data)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(byte[] data)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing the contents of given byte array.
  syntax:
    content: public JsonParser createParser(byte[] data)
    parameters:
    - id: data
      type: byte[]
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(byte[],int,int)
  id: createParser(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(byte[] data, int offset, int len)
  nameWithType: JsonFactory.createParser(byte[] data, int offset, int len)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(byte[] data, int offset, int len)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing the contents of given byte array.
  syntax:
    content: public JsonParser createParser(byte[] data, int offset, int len)
    parameters:
    - id: data
      type: byte[]
      description: Buffer that contains data to parse
    - id: offset
      type: int
      description: Offset of the first data byte within buffer
    - id: len
      type: int
      description: Length of contents to parse within buffer
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(char[])
  id: createParser(char[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(char[] content)
  nameWithType: JsonFactory.createParser(char[] content)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(char[] content)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing contents of given char array.
  syntax:
    content: public JsonParser createParser(char[] content)
    parameters:
    - id: content
      type: char[]
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(char[],int,int)
  id: createParser(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(char[] content, int offset, int len)
  nameWithType: JsonFactory.createParser(char[] content, int offset, int len)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(char[] content, int offset, int len)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing contents of given char array.
  syntax:
    content: public JsonParser createParser(char[] content, int offset, int len)
    parameters:
    - id: content
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(java.io.DataInput)
  id: createParser(java.io.DataInput)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(DataInput in)
  nameWithType: JsonFactory.createParser(DataInput in)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(DataInput in)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Optional method for constructing parser for reading contents from specified <xref uid="java.io.DataInput" data-throw-if-not-resolved="false">DataInput</xref> instance.


    If this factory does not support <xref uid="java.io.DataInput" data-throw-if-not-resolved="false">DataInput</xref> as source, will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>
  syntax:
    content: public JsonParser createParser(DataInput in)
    parameters:
    - id: in
      type: java.io.DataInput
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(java.io.File)
  id: createParser(java.io.File)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(File f)
  nameWithType: JsonFactory.createParser(File f)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(File f)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON parser instance to parse contents of specified file.


    Encoding is auto-detected from contents according to JSON specification recommended mechanism. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)" data-throw-if-not-resolved="false">#createParser(java.io.Reader)</xref>.


    Underlying input stream (needed for reading contents) will be **owned** (and managed, i.e. closed as need be) by the parser, since caller has no access to it.
  syntax:
    content: public JsonParser createParser(File f)
    parameters:
    - id: f
      type: java.io.File
      description: File that contains JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(java.io.InputStream)
  id: createParser(java.io.InputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(InputStream in)
  nameWithType: JsonFactory.createParser(InputStream in)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(InputStream in)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON parser instance to parse the contents accessed via specified input stream.


    The input stream will **not be owned** by the parser, it will still be managed (i.e. closed if end-of-stream is reacher, or parser close method called) if (and only if) <xref uid="com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE</xref> is enabled.


    Note: no encoding argument is taken since it can always be auto-detected as suggested by JSON RFC. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)" data-throw-if-not-resolved="false">#createParser(java.io.Reader)</xref>.
  syntax:
    content: public JsonParser createParser(InputStream in)
    parameters:
    - id: in
      type: java.io.InputStream
      description: InputStream to use for reading JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)
  id: createParser(java.io.Reader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(Reader r)
  nameWithType: JsonFactory.createParser(Reader r)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(Reader r)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing parser for parsing the contents accessed via specified Reader.


    The read stream will **not be owned** by the parser, it will still be managed (i.e. closed if end-of-stream is reacher, or parser close method called) if (and only if) <xref uid="com.fasterxml.jackson.core.StreamReadFeature.AUTO_CLOSE_SOURCE" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.StreamReadFeature#AUTO_CLOSE_SOURCE</xref> is enabled.
  syntax:
    content: public JsonParser createParser(Reader r)
    parameters:
    - id: r
      type: java.io.Reader
      description: Reader to use for reading JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(java.lang.String)
  id: createParser(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(String content)
  nameWithType: JsonFactory.createParser(String content)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(String content)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for constructing parser for parsing contents of given String.
  syntax:
    content: public JsonParser createParser(String content)
    parameters:
    - id: content
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.createParser(java.net.URL)
  id: createParser(java.net.URL)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: createParser(URL url)
  nameWithType: JsonFactory.createParser(URL url)
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser(URL url)
  overload: com.fasterxml.jackson.core.JsonFactory.createParser*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method for constructing JSON parser instance to parse contents of resource reference by given URL.


    Encoding is auto-detected from contents according to JSON specification recommended mechanism. Json specification supports only UTF-8, UTF-16 and UTF-32 as valid encodings, so auto-detection implemented only for this charsets. For other charsets use <xref uid="com.fasterxml.jackson.core.JsonFactory.createParser(java.io.Reader)" data-throw-if-not-resolved="false">#createParser(java.io.Reader)</xref>.


    Underlying input stream (needed for reading contents) will be **owned** (and managed, i.e. closed as need be) by the parser, since caller has no access to it.
  syntax:
    content: public JsonParser createParser(URL url)
    parameters:
    - id: url
      type: java.net.URL
      description: URL pointing to resource that contains JSON content to parse
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonParseException
- uid: com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonFactory.Feature)
  id: disable(com.fasterxml.jackson.core.JsonFactory.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: disable(JsonFactory.Feature f)
  nameWithType: JsonFactory.disable(JsonFactory.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.disable(JsonFactory.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.disable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for disabling specified parser features (check <xref uid="com.fasterxml.jackson.core.JsonFactory.Feature" data-throw-if-not-resolved="false">JsonFactory.Feature</xref> for list of features)
  syntax:
    content: public JsonFactory disable(JsonFactory.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonFactory.Feature
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: disable(JsonGenerator.Feature f)
  nameWithType: JsonFactory.disable(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.disable(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.disable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for disabling specified generator feature (check <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">JsonGenerator.Feature</xref> for list of features)
  syntax:
    content: public JsonFactory disable(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: disable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: disable(JsonParser.Feature f)
  nameWithType: JsonFactory.disable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.disable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.disable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for disabling specified parser features (check <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">JsonParser.Feature</xref> for list of features)
  syntax:
    content: public JsonFactory disable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonFactory.Feature)
  id: enable(com.fasterxml.jackson.core.JsonFactory.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: enable(JsonFactory.Feature f)
  nameWithType: JsonFactory.enable(JsonFactory.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.enable(JsonFactory.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.enable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling specified parser feature (check <xref uid="com.fasterxml.jackson.core.JsonFactory.Feature" data-throw-if-not-resolved="false">JsonFactory.Feature</xref> for list of features)
  syntax:
    content: public JsonFactory enable(JsonFactory.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonFactory.Feature
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: enable(JsonGenerator.Feature f)
  nameWithType: JsonFactory.enable(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.enable(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.enable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling specified generator features (check <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">JsonGenerator.Feature</xref> for list of features)
  syntax:
    content: public JsonFactory enable(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  id: enable(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: enable(JsonParser.Feature f)
  nameWithType: JsonFactory.enable(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.enable(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.enable*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for enabling specified parser feature (check <xref uid="com.fasterxml.jackson.core.JsonParser.Feature" data-throw-if-not-resolved="false">JsonParser.Feature</xref> for list of features)
  syntax:
    content: public JsonFactory enable(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes()
  id: getCharacterEscapes()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getCharacterEscapes()
  nameWithType: JsonFactory.getCharacterEscapes()
  fullName: com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes()
  overload: com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for accessing custom escapes factory uses for <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s it creates.
  syntax:
    content: public CharacterEscapes getCharacterEscapes()
    return:
      type: com.fasterxml.jackson.core.io.CharacterEscapes
- uid: com.fasterxml.jackson.core.JsonFactory.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getCodec()
  nameWithType: JsonFactory.getCodec()
  fullName: com.fasterxml.jackson.core.JsonFactory.getCodec()
  overload: com.fasterxml.jackson.core.JsonFactory.getCodec*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures()
  id: getFormatGeneratorFeatures()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getFormatGeneratorFeatures()
  nameWithType: JsonFactory.getFormatGeneratorFeatures()
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures()
  overload: com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public int getFormatGeneratorFeatures()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatName()
  id: getFormatName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getFormatName()
  nameWithType: JsonFactory.getFormatName()
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatName()
  overload: com.fasterxml.jackson.core.JsonFactory.getFormatName*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Method that returns short textual id identifying format this factory supports.


    Note: sub-classes should override this method; default implementation will return null for all sub-classes
  syntax:
    content: public String getFormatName()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures()
  id: getFormatParserFeatures()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getFormatParserFeatures()
  nameWithType: JsonFactory.getFormatParserFeatures()
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures()
  overload: com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public int getFormatParserFeatures()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType()
  id: getFormatReadFeatureType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getFormatReadFeatureType()
  nameWithType: JsonFactory.getFormatReadFeatureType()
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType()
  overload: com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for accessing kind of <xref uid="? extends com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref> that a parser <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> produced by this factory would accept, if any; `null` returned if none.
  syntax:
    content: public Class<? extends FormatFeature> getFormatReadFeatureType()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature>
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType()
  id: getFormatWriteFeatureType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getFormatWriteFeatureType()
  nameWithType: JsonFactory.getFormatWriteFeatureType()
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType()
  overload: com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for accessing kind of <xref uid="? extends com.fasterxml.jackson.core.FormatFeature" data-throw-if-not-resolved="false">FormatFeature</xref> that a parser <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> produced by this factory would accept, if any; `null` returned if none.
  syntax:
    content: public Class<? extends FormatFeature> getFormatWriteFeatureType()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature>
- uid: com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures()
  id: getGeneratorFeatures()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getGeneratorFeatures()
  nameWithType: JsonFactory.getGeneratorFeatures()
  fullName: com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures()
  overload: com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public final int getGeneratorFeatures()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.getInputDecorator()
  id: getInputDecorator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getInputDecorator()
  nameWithType: JsonFactory.getInputDecorator()
  fullName: com.fasterxml.jackson.core.JsonFactory.getInputDecorator()
  overload: com.fasterxml.jackson.core.JsonFactory.getInputDecorator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for getting currently configured input decorator (if any; there is no default decorator).
  syntax:
    content: public InputDecorator getInputDecorator()
    return:
      type: com.fasterxml.jackson.core.io.InputDecorator
- uid: com.fasterxml.jackson.core.JsonFactory.getOutputDecorator()
  id: getOutputDecorator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getOutputDecorator()
  nameWithType: JsonFactory.getOutputDecorator()
  fullName: com.fasterxml.jackson.core.JsonFactory.getOutputDecorator()
  overload: com.fasterxml.jackson.core.JsonFactory.getOutputDecorator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for getting currently configured output decorator (if any; there is no default decorator).
  syntax:
    content: public OutputDecorator getOutputDecorator()
    return:
      type: com.fasterxml.jackson.core.io.OutputDecorator
- uid: com.fasterxml.jackson.core.JsonFactory.getParserFeatures()
  id: getParserFeatures()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getParserFeatures()
  nameWithType: JsonFactory.getParserFeatures()
  fullName: com.fasterxml.jackson.core.JsonFactory.getParserFeatures()
  overload: com.fasterxml.jackson.core.JsonFactory.getParserFeatures*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public final int getParserFeatures()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator()
  id: getRootValueSeparator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: getRootValueSeparator()
  nameWithType: JsonFactory.getRootValueSeparator()
  fullName: com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator()
  overload: com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public String getRootValueSeparator()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.JsonFactory.hasFormat(com.fasterxml.jackson.core.format.InputAccessor)
  id: hasFormat(com.fasterxml.jackson.core.format.InputAccessor)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: hasFormat(InputAccessor acc)
  nameWithType: JsonFactory.hasFormat(InputAccessor acc)
  fullName: com.fasterxml.jackson.core.JsonFactory.hasFormat(InputAccessor acc)
  overload: com.fasterxml.jackson.core.JsonFactory.hasFormat*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Convenience method for trying to determine whether input via given accessor is of format type supported by this factory.
  syntax:
    content: public MatchStrength hasFormat(InputAccessor acc)
    parameters:
    - id: acc
      type: com.fasterxml.jackson.core.format.InputAccessor
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(com.fasterxml.jackson.core.format.InputAccessor)
  id: hasJSONFormat(com.fasterxml.jackson.core.format.InputAccessor)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: hasJSONFormat(InputAccessor acc)
  nameWithType: JsonFactory.hasJSONFormat(InputAccessor acc)
  fullName: com.fasterxml.jackson.core.JsonFactory.hasJSONFormat(InputAccessor acc)
  overload: com.fasterxml.jackson.core.JsonFactory.hasJSONFormat*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Helper method that can be called to determine if content accessed using given accessor seems to be JSON content.
  syntax:
    content: protected MatchStrength hasJSONFormat(InputAccessor acc)
    parameters:
    - id: acc
      type: com.fasterxml.jackson.core.format.InputAccessor
    return:
      type: com.fasterxml.jackson.core.format.MatchStrength
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonFactory.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonFactory.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: isEnabled(JsonFactory.Feature f)
  nameWithType: JsonFactory.isEnabled(JsonFactory.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonFactory.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Checked whether specified parser feature is enabled.
  syntax:
    content: public final boolean isEnabled(JsonFactory.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonFactory.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: isEnabled(JsonGenerator.Feature f)
  nameWithType: JsonFactory.isEnabled(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Check whether specified generator feature is enabled.
  syntax:
    content: public final boolean isEnabled(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: isEnabled(JsonParser.Feature f)
  nameWithType: JsonFactory.isEnabled(JsonParser.Feature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.isEnabled(JsonParser.Feature f)
  overload: com.fasterxml.jackson.core.JsonFactory.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Checked whether specified parser feature is enabled.
  syntax:
    content: public final boolean isEnabled(JsonParser.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonParser.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  id: isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: isEnabled(StreamReadFeature f)
  nameWithType: JsonFactory.isEnabled(StreamReadFeature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamReadFeature f)
  overload: com.fasterxml.jackson.core.JsonFactory.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public final boolean isEnabled(StreamReadFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.StreamReadFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  id: isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: isEnabled(StreamWriteFeature f)
  nameWithType: JsonFactory.isEnabled(StreamWriteFeature f)
  fullName: com.fasterxml.jackson.core.JsonFactory.isEnabled(StreamWriteFeature f)
  overload: com.fasterxml.jackson.core.JsonFactory.isEnabled*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public final boolean isEnabled(StreamWriteFeature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.StreamWriteFeature
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.readResolve()
  id: readResolve()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: readResolve()
  nameWithType: JsonFactory.readResolve()
  fullName: com.fasterxml.jackson.core.JsonFactory.readResolve()
  overload: com.fasterxml.jackson.core.JsonFactory.readResolve*
  type: Method
  package: com.fasterxml.jackson.core
  summary: 'Method that we need to override to actually make restoration go through constructors etc. Also: must be overridden by sub-classes as well.'
  syntax:
    content: protected Object readResolve()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonFactory.rebuild()
  id: rebuild()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: rebuild()
  nameWithType: JsonFactory.rebuild()
  fullName: com.fasterxml.jackson.core.JsonFactory.rebuild()
  overload: com.fasterxml.jackson.core.JsonFactory.rebuild*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that allows construction of differently configured factory, starting with settings of this factory.
  syntax:
    content: public TSFBuilder<?,?> rebuild()
    return:
      type: com.fasterxml.jackson.core.TSFBuilder<?,?>
- uid: com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec()
  id: requiresCustomCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: requiresCustomCodec()
  nameWithType: JsonFactory.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec()
  overload: com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that can be called to determine if a custom <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> is needed for binding data parsed using <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> constructed by this factory (which typically also implies the same for serialization with <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>).
  syntax:
    content: public boolean requiresCustomCodec()
    return:
      type: boolean
      description: >-
        True if custom codec is needed with parsers and
           generators created by this factory; false if a general
           <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> is enough
- uid: com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering()
  id: requiresPropertyOrdering()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: requiresPropertyOrdering()
  nameWithType: JsonFactory.requiresPropertyOrdering()
  fullName: com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering()
  overload: com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering*
  type: Method
  package: com.fasterxml.jackson.core
  summary: >-
    Introspection method that higher-level functionality may call to see whether underlying data format requires a stable ordering of object properties or not. This is usually used for determining whether to force a stable ordering (like alphabetic ordering by name) if no ordering if explicitly specified.


    Default implementation returns `false` as JSON does NOT require stable ordering. Formats that require ordering include positional textual formats like `CSV`, and schema-based binary formats like `Avro`.
  syntax:
    content: public boolean requiresPropertyOrdering()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  id: setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: setCharacterEscapes(CharacterEscapes esc)
  nameWithType: JsonFactory.setCharacterEscapes(CharacterEscapes esc)
  fullName: com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes(CharacterEscapes esc)
  overload: com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for defining custom escapes factory uses for <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>s it creates.
  syntax:
    content: public JsonFactory setCharacterEscapes(CharacterEscapes esc)
    parameters:
    - id: esc
      type: com.fasterxml.jackson.core.io.CharacterEscapes
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: setCodec(ObjectCodec oc)
  nameWithType: JsonFactory.setCodec(ObjectCodec oc)
  fullName: com.fasterxml.jackson.core.JsonFactory.setCodec(ObjectCodec oc)
  overload: com.fasterxml.jackson.core.JsonFactory.setCodec*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for associating a <xref uid="com.fasterxml.jackson.core.ObjectCodec" data-throw-if-not-resolved="false">ObjectCodec</xref> (typically a `com.fasterxml.jackson.databind.ObjectMapper`) with this factory (and more importantly, parsers and generators it constructs). This is needed to use data-binding methods of <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> and <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> instances.
  syntax:
    content: public JsonFactory setCodec(ObjectCodec oc)
    parameters:
    - id: oc
      type: com.fasterxml.jackson.core.ObjectCodec
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.setInputDecorator(com.fasterxml.jackson.core.io.InputDecorator)
  id: setInputDecorator(com.fasterxml.jackson.core.io.InputDecorator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: setInputDecorator(InputDecorator d)
  nameWithType: JsonFactory.setInputDecorator(InputDecorator d)
  fullName: com.fasterxml.jackson.core.JsonFactory.setInputDecorator(InputDecorator d)
  overload: com.fasterxml.jackson.core.JsonFactory.setInputDecorator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for overriding currently configured input decorator
  syntax:
    content: public JsonFactory setInputDecorator(InputDecorator d)
    parameters:
    - id: d
      type: com.fasterxml.jackson.core.io.InputDecorator
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)
  id: setOutputDecorator(com.fasterxml.jackson.core.io.OutputDecorator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: setOutputDecorator(OutputDecorator d)
  nameWithType: JsonFactory.setOutputDecorator(OutputDecorator d)
  fullName: com.fasterxml.jackson.core.JsonFactory.setOutputDecorator(OutputDecorator d)
  overload: com.fasterxml.jackson.core.JsonFactory.setOutputDecorator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method for overriding currently configured output decorator
  syntax:
    content: public JsonFactory setOutputDecorator(OutputDecorator d)
    parameters:
    - id: d
      type: com.fasterxml.jackson.core.io.OutputDecorator
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(java.lang.String)
  id: setRootValueSeparator(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: setRootValueSeparator(String sep)
  nameWithType: JsonFactory.setRootValueSeparator(String sep)
  fullName: com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator(String sep)
  overload: com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that allows overriding String used for separating root-level JSON values (default is single space character)
  syntax:
    content: public JsonFactory setRootValueSeparator(String sep)
    parameters:
    - id: sep
      type: java.lang.String
      description: >-
        Separator to use, if any; null means that no separator is
           automatically added
    return:
      type: com.fasterxml.jackson.core.JsonFactory
- uid: com.fasterxml.jackson.core.JsonFactory.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonFactory
  langs:
  - java
  name: version()
  nameWithType: JsonFactory.version()
  fullName: com.fasterxml.jackson.core.JsonFactory.version()
  overload: com.fasterxml.jackson.core.JsonFactory.version*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method called to detect version of the component that implements this interface; returned version should never be null, but may return specific "not available" instance (see <xref uid="com.fasterxml.jackson.core.Version" data-throw-if-not-resolved="false">Version</xref> for details).
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
references:
- uid: com.fasterxml.jackson.core.JsonFactory.JsonFactory*
  name: JsonFactory
  nameWithType: JsonFactory.JsonFactory
  fullName: com.fasterxml.jackson.core.JsonFactory.JsonFactory
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.core.JsonFactoryBuilder
  name: JsonFactoryBuilder
  nameWithType: JsonFactoryBuilder
  fullName: com.fasterxml.jackson.core.JsonFactoryBuilder
- uid: com.fasterxml.jackson.core.TSFBuilder<?,?>
  spec.java:
  - uid: com.fasterxml.jackson.core.TSFBuilder
    name: TSFBuilder
    fullName: com.fasterxml.jackson.core.TSFBuilder
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonFactory.rebuild*
  name: rebuild
  nameWithType: JsonFactory.rebuild
  fullName: com.fasterxml.jackson.core.JsonFactory.rebuild
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.builder*
  name: builder
  nameWithType: JsonFactory.builder
  fullName: com.fasterxml.jackson.core.JsonFactory.builder
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.copy*
  name: copy
  nameWithType: JsonFactory.copy
  fullName: com.fasterxml.jackson.core.JsonFactory.copy
  package: com.fasterxml.jackson.core
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy*
  name: _checkInvalidCopy
  nameWithType: JsonFactory._checkInvalidCopy
  fullName: com.fasterxml.jackson.core.JsonFactory._checkInvalidCopy
  package: com.fasterxml.jackson.core
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonFactory.readResolve*
  name: readResolve
  nameWithType: JsonFactory.readResolve
  fullName: com.fasterxml.jackson.core.JsonFactory.readResolve
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering*
  name: requiresPropertyOrdering
  nameWithType: JsonFactory.requiresPropertyOrdering
  fullName: com.fasterxml.jackson.core.JsonFactory.requiresPropertyOrdering
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively*
  name: canHandleBinaryNatively
  nameWithType: JsonFactory.canHandleBinaryNatively
  fullName: com.fasterxml.jackson.core.JsonFactory.canHandleBinaryNatively
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.canUseCharArrays*
  name: canUseCharArrays
  nameWithType: JsonFactory.canUseCharArrays
  fullName: com.fasterxml.jackson.core.JsonFactory.canUseCharArrays
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.canParseAsync*
  name: canParseAsync
  nameWithType: JsonFactory.canParseAsync
  fullName: com.fasterxml.jackson.core.JsonFactory.canParseAsync
  package: com.fasterxml.jackson.core
- uid: java.lang.Class<? extends com.fasterxml.jackson.core.FormatFeature>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.core.FormatFeature'
    name: FormatFeature
    fullName: '? extends com.fasterxml.jackson.core.FormatFeature'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType*
  name: getFormatReadFeatureType
  nameWithType: JsonFactory.getFormatReadFeatureType
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatReadFeatureType
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType*
  name: getFormatWriteFeatureType
  nameWithType: JsonFactory.getFormatWriteFeatureType
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatWriteFeatureType
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.FormatSchema
  name: FormatSchema
  nameWithType: FormatSchema
  fullName: com.fasterxml.jackson.core.FormatSchema
- uid: com.fasterxml.jackson.core.JsonFactory.canUseSchema*
  name: canUseSchema
  nameWithType: JsonFactory.canUseSchema
  fullName: com.fasterxml.jackson.core.JsonFactory.canUseSchema
  package: com.fasterxml.jackson.core
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatName*
  name: getFormatName
  nameWithType: JsonFactory.getFormatName
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatName
  package: com.fasterxml.jackson.core
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.format.InputAccessor
  name: InputAccessor
  nameWithType: InputAccessor
  fullName: com.fasterxml.jackson.core.format.InputAccessor
- uid: com.fasterxml.jackson.core.format.MatchStrength
  name: MatchStrength
  nameWithType: MatchStrength
  fullName: com.fasterxml.jackson.core.format.MatchStrength
- uid: com.fasterxml.jackson.core.JsonFactory.hasFormat*
  name: hasFormat
  nameWithType: JsonFactory.hasFormat
  fullName: com.fasterxml.jackson.core.JsonFactory.hasFormat
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec*
  name: requiresCustomCodec
  nameWithType: JsonFactory.requiresCustomCodec
  fullName: com.fasterxml.jackson.core.JsonFactory.requiresCustomCodec
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.hasJSONFormat*
  name: hasJSONFormat
  nameWithType: JsonFactory.hasJSONFormat
  fullName: com.fasterxml.jackson.core.JsonFactory.hasJSONFormat
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.core.JsonFactory.version*
  name: version
  nameWithType: JsonFactory.version
  fullName: com.fasterxml.jackson.core.JsonFactory.version
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.Feature
  name: JsonFactory.Feature
  nameWithType: JsonFactory.Feature
  fullName: com.fasterxml.jackson.core.JsonFactory.Feature
- uid: com.fasterxml.jackson.core.JsonFactory.configure*
  name: configure
  nameWithType: JsonFactory.configure
  fullName: com.fasterxml.jackson.core.JsonFactory.configure
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.enable*
  name: enable
  nameWithType: JsonFactory.enable
  fullName: com.fasterxml.jackson.core.JsonFactory.enable
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.disable*
  name: disable
  nameWithType: JsonFactory.disable
  fullName: com.fasterxml.jackson.core.JsonFactory.disable
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.isEnabled*
  name: isEnabled
  nameWithType: JsonFactory.isEnabled
  fullName: com.fasterxml.jackson.core.JsonFactory.isEnabled
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.JsonFactory.getParserFeatures*
  name: getParserFeatures
  nameWithType: JsonFactory.getParserFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory.getParserFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures*
  name: getGeneratorFeatures
  nameWithType: JsonFactory.getGeneratorFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory.getGeneratorFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures*
  name: getFormatParserFeatures
  nameWithType: JsonFactory.getFormatParserFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatParserFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures*
  name: getFormatGeneratorFeatures
  nameWithType: JsonFactory.getFormatGeneratorFeatures
  fullName: com.fasterxml.jackson.core.JsonFactory.getFormatGeneratorFeatures
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParser.Feature
  name: JsonParser.Feature
  nameWithType: JsonParser.Feature
  fullName: com.fasterxml.jackson.core.JsonParser.Feature
- uid: com.fasterxml.jackson.core.StreamReadFeature
  name: StreamReadFeature
  nameWithType: StreamReadFeature
  fullName: com.fasterxml.jackson.core.StreamReadFeature
- uid: com.fasterxml.jackson.core.io.InputDecorator
  name: InputDecorator
  nameWithType: InputDecorator
  fullName: com.fasterxml.jackson.core.io.InputDecorator
- uid: com.fasterxml.jackson.core.JsonFactory.getInputDecorator*
  name: getInputDecorator
  nameWithType: JsonFactory.getInputDecorator
  fullName: com.fasterxml.jackson.core.JsonFactory.getInputDecorator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.setInputDecorator*
  name: setInputDecorator
  nameWithType: JsonFactory.setInputDecorator
  fullName: com.fasterxml.jackson.core.JsonFactory.setInputDecorator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature
  name: JsonGenerator.Feature
  nameWithType: JsonGenerator.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.StreamWriteFeature
  name: StreamWriteFeature
  nameWithType: StreamWriteFeature
  fullName: com.fasterxml.jackson.core.StreamWriteFeature
- uid: com.fasterxml.jackson.core.io.CharacterEscapes
  name: CharacterEscapes
  nameWithType: CharacterEscapes
  fullName: com.fasterxml.jackson.core.io.CharacterEscapes
- uid: com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes*
  name: getCharacterEscapes
  nameWithType: JsonFactory.getCharacterEscapes
  fullName: com.fasterxml.jackson.core.JsonFactory.getCharacterEscapes
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes*
  name: setCharacterEscapes
  nameWithType: JsonFactory.setCharacterEscapes
  fullName: com.fasterxml.jackson.core.JsonFactory.setCharacterEscapes
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.io.OutputDecorator
  name: OutputDecorator
  nameWithType: OutputDecorator
  fullName: com.fasterxml.jackson.core.io.OutputDecorator
- uid: com.fasterxml.jackson.core.JsonFactory.getOutputDecorator*
  name: getOutputDecorator
  nameWithType: JsonFactory.getOutputDecorator
  fullName: com.fasterxml.jackson.core.JsonFactory.getOutputDecorator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.setOutputDecorator*
  name: setOutputDecorator
  nameWithType: JsonFactory.setOutputDecorator
  fullName: com.fasterxml.jackson.core.JsonFactory.setOutputDecorator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator*
  name: setRootValueSeparator
  nameWithType: JsonFactory.setRootValueSeparator
  fullName: com.fasterxml.jackson.core.JsonFactory.setRootValueSeparator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator*
  name: getRootValueSeparator
  nameWithType: JsonFactory.getRootValueSeparator
  fullName: com.fasterxml.jackson.core.JsonFactory.getRootValueSeparator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.setCodec*
  name: setCodec
  nameWithType: JsonFactory.setCodec
  fullName: com.fasterxml.jackson.core.JsonFactory.setCodec
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.getCodec*
  name: getCodec
  nameWithType: JsonFactory.getCodec
  fullName: com.fasterxml.jackson.core.JsonFactory.getCodec
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonParseException
  name: JsonParseException
  nameWithType: JsonParseException
  fullName: com.fasterxml.jackson.core.JsonParseException
- uid: java.io.File
  spec.java:
  - uid: java.io.File
    name: File
    fullName: java.io.File
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.JsonFactory.createParser*
  name: createParser
  nameWithType: JsonFactory.createParser
  fullName: com.fasterxml.jackson.core.JsonFactory.createParser
  package: com.fasterxml.jackson.core
- uid: java.net.URL
  spec.java:
  - uid: java.net.URL
    name: URL
    fullName: java.net.URL
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: java.io.DataInput
  spec.java:
  - uid: java.io.DataInput
    name: DataInput
    fullName: java.io.DataInput
- uid: com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser*
  name: createNonBlockingByteArrayParser
  nameWithType: JsonFactory.createNonBlockingByteArrayParser
  fullName: com.fasterxml.jackson.core.JsonFactory.createNonBlockingByteArrayParser
  package: com.fasterxml.jackson.core
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.core.JsonEncoding
  name: JsonEncoding
  nameWithType: JsonEncoding
  fullName: com.fasterxml.jackson.core.JsonEncoding
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.core.JsonFactory.createGenerator*
  name: createGenerator
  nameWithType: JsonFactory.createGenerator
  fullName: com.fasterxml.jackson.core.JsonFactory.createGenerator
  package: com.fasterxml.jackson.core
- uid: java.io.Writer
  spec.java:
  - uid: java.io.Writer
    name: Writer
    fullName: java.io.Writer
- uid: java.io.DataOutput
  spec.java:
  - uid: java.io.DataOutput
    name: DataOutput
    fullName: java.io.DataOutput
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonParser*
  name: createJsonParser
  nameWithType: JsonFactory.createJsonParser
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonParser
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator*
  name: createJsonGenerator
  nameWithType: JsonFactory.createJsonGenerator
  fullName: com.fasterxml.jackson.core.JsonFactory.createJsonGenerator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.io.IOContext
  name: IOContext
  nameWithType: IOContext
  fullName: com.fasterxml.jackson.core.io.IOContext
- uid: com.fasterxml.jackson.core.JsonFactory._createParser*
  name: _createParser
  nameWithType: JsonFactory._createParser
  fullName: com.fasterxml.jackson.core.JsonFactory._createParser
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory._createGenerator*
  name: _createGenerator
  nameWithType: JsonFactory._createGenerator
  fullName: com.fasterxml.jackson.core.JsonFactory._createGenerator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory._createUTF8Generator*
  name: _createUTF8Generator
  nameWithType: JsonFactory._createUTF8Generator
  fullName: com.fasterxml.jackson.core.JsonFactory._createUTF8Generator
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory._createWriter*
  name: _createWriter
  nameWithType: JsonFactory._createWriter
  fullName: com.fasterxml.jackson.core.JsonFactory._createWriter
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory._decorate*
  name: _decorate
  nameWithType: JsonFactory._decorate
  fullName: com.fasterxml.jackson.core.JsonFactory._decorate
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.util.BufferRecycler
  name: BufferRecycler
  nameWithType: BufferRecycler
  fullName: com.fasterxml.jackson.core.util.BufferRecycler
- uid: com.fasterxml.jackson.core.JsonFactory._getBufferRecycler*
  name: _getBufferRecycler
  nameWithType: JsonFactory._getBufferRecycler
  fullName: com.fasterxml.jackson.core.JsonFactory._getBufferRecycler
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory._createContext*
  name: _createContext
  nameWithType: JsonFactory._createContext
  fullName: com.fasterxml.jackson.core.JsonFactory._createContext
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext*
  name: _createNonBlockingContext
  nameWithType: JsonFactory._createNonBlockingContext
  fullName: com.fasterxml.jackson.core.JsonFactory._createNonBlockingContext
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer
  name: CharsToNameCanonicalizer
  nameWithType: CharsToNameCanonicalizer
  fullName: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer
- uid: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
  name: ByteQuadsCanonicalizer
  nameWithType: ByteQuadsCanonicalizer
  fullName: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer
- uid: com.fasterxml.jackson.core.TokenStreamFactory
  name: TokenStreamFactory
  nameWithType: TokenStreamFactory
  fullName: com.fasterxml.jackson.core.TokenStreamFactory
- uid: com.fasterxml.jackson.core.Versioned
  name: Versioned
  nameWithType: Versioned
  fullName: com.fasterxml.jackson.core.Versioned
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getFormatName()
  name: TokenStreamFactory.getFormatName()
  nameWithType: TokenStreamFactory.getFormatName()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getFormatName()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
  name: TokenStreamFactory.createGenerator(File,JsonEncoding)
  nameWithType: TokenStreamFactory.createGenerator(File,JsonEncoding)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.File,com.fasterxml.jackson.core.JsonEncoding)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.TokenStreamFactory._createDataOutputWrapper(java.io.DataOutput)
  name: TokenStreamFactory._createDataOutputWrapper(DataOutput)
  nameWithType: TokenStreamFactory._createDataOutputWrapper(DataOutput)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory._createDataOutputWrapper(java.io.DataOutput)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[])
  name: TokenStreamFactory.createParser(byte[])
  nameWithType: TokenStreamFactory.createParser(byte[])
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[])
- uid: com.fasterxml.jackson.core.TokenStreamFactory.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: TokenStreamFactory.canUseSchema(FormatSchema)
  nameWithType: TokenStreamFactory.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: TokenStreamFactory.isEnabled(JsonParser.Feature)
  nameWithType: TokenStreamFactory.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.Writer)
  name: TokenStreamFactory.createGenerator(Writer)
  nameWithType: TokenStreamFactory.createGenerator(Writer)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.Writer)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.File)
  name: TokenStreamFactory.createParser(File)
  nameWithType: TokenStreamFactory.createParser(File)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.File)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getFormatGeneratorFeatures()
  name: TokenStreamFactory.getFormatGeneratorFeatures()
  nameWithType: TokenStreamFactory.getFormatGeneratorFeatures()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getFormatGeneratorFeatures()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[])
  name: TokenStreamFactory.createParser(char[])
  nameWithType: TokenStreamFactory.createParser(char[])
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[])
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.net.URL)
  name: TokenStreamFactory.createParser(URL)
  nameWithType: TokenStreamFactory.createParser(URL)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.net.URL)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.OutputStream)
  name: TokenStreamFactory.createGenerator(OutputStream)
  nameWithType: TokenStreamFactory.createGenerator(OutputStream)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getFormatWriteFeatureType()
  name: TokenStreamFactory.getFormatWriteFeatureType()
  nameWithType: TokenStreamFactory.getFormatWriteFeatureType()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getFormatWriteFeatureType()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)
  name: TokenStreamFactory.createParser(char[],int,int)
  nameWithType: TokenStreamFactory.createParser(char[],int,int)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(char[],int,int)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getGeneratorFeatures()
  name: TokenStreamFactory.getGeneratorFeatures()
  nameWithType: TokenStreamFactory.getGeneratorFeatures()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getGeneratorFeatures()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.canParseAsync()
  name: TokenStreamFactory.canParseAsync()
  nameWithType: TokenStreamFactory.canParseAsync()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.canParseAsync()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.DataOutput)
  name: TokenStreamFactory.createGenerator(DataOutput)
  nameWithType: TokenStreamFactory.createGenerator(DataOutput)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.DataOutput)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
  name: TokenStreamFactory.createGenerator(OutputStream,JsonEncoding)
  nameWithType: TokenStreamFactory.createGenerator(OutputStream,JsonEncoding)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.OutputStream,com.fasterxml.jackson.core.JsonEncoding)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: TokenStreamFactory.isEnabled(JsonGenerator.Feature)
  nameWithType: TokenStreamFactory.isEnabled(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createNonBlockingByteArrayParser()
  name: TokenStreamFactory.createNonBlockingByteArrayParser()
  nameWithType: TokenStreamFactory.createNonBlockingByteArrayParser()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createNonBlockingByteArrayParser()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.Reader)
  name: TokenStreamFactory.createParser(Reader)
  nameWithType: TokenStreamFactory.createParser(Reader)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.Reader)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.lang.String)
  name: TokenStreamFactory.createParser(String)
  nameWithType: TokenStreamFactory.createParser(String)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.lang.String)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.InputStream)
  name: TokenStreamFactory.createParser(InputStream)
  nameWithType: TokenStreamFactory.createParser(InputStream)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.InputStream)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.requiresPropertyOrdering()
  name: TokenStreamFactory.requiresPropertyOrdering()
  nameWithType: TokenStreamFactory.requiresPropertyOrdering()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.requiresPropertyOrdering()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.DataInput)
  name: TokenStreamFactory.createParser(DataInput)
  nameWithType: TokenStreamFactory.createParser(DataInput)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(java.io.DataInput)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.canHandleBinaryNatively()
  name: TokenStreamFactory.canHandleBinaryNatively()
  nameWithType: TokenStreamFactory.canHandleBinaryNatively()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.canHandleBinaryNatively()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getFormatReadFeatureType()
  name: TokenStreamFactory.getFormatReadFeatureType()
  nameWithType: TokenStreamFactory.getFormatReadFeatureType()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getFormatReadFeatureType()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)
  name: TokenStreamFactory.createParser(byte[],int,int)
  nameWithType: TokenStreamFactory.createParser(byte[],int,int)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createParser(byte[],int,int)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.DataOutput,com.fasterxml.jackson.core.JsonEncoding)
  name: TokenStreamFactory.createGenerator(DataOutput,JsonEncoding)
  nameWithType: TokenStreamFactory.createGenerator(DataOutput,JsonEncoding)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.createGenerator(java.io.DataOutput,com.fasterxml.jackson.core.JsonEncoding)
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getFormatParserFeatures()
  name: TokenStreamFactory.getFormatParserFeatures()
  nameWithType: TokenStreamFactory.getFormatParserFeatures()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getFormatParserFeatures()
- uid: com.fasterxml.jackson.core.TokenStreamFactory.getParserFeatures()
  name: TokenStreamFactory.getParserFeatures()
  nameWithType: TokenStreamFactory.getParserFeatures()
  fullName: com.fasterxml.jackson.core.TokenStreamFactory.getParserFeatures()
- uid: com.fasterxml.jackson.core.TokenStreamFactory._optimizedStreamFromURL(java.net.URL)
  name: TokenStreamFactory._optimizedStreamFromURL(URL)
  nameWithType: TokenStreamFactory._optimizedStreamFromURL(URL)
  fullName: com.fasterxml.jackson.core.TokenStreamFactory._optimizedStreamFromURL(java.net.URL)
- uid: com.fasterxml.jackson.core.TSFBuilder
  name: TSFBuilder
  nameWithType: TSFBuilder
  fullName: com.fasterxml.jackson.core.TSFBuilder
- uid: ?,?
  name: ?,?
  nameWithType: ?,?
  fullName: ?,?
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? extends com.fasterxml.jackson.core.FormatFeature'
  name: '? extends FormatFeature'
  nameWithType: '? extends FormatFeature'
  fullName: '? extends com.fasterxml.jackson.core.FormatFeature'
