### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.nio.NioBlobInputStream
  id: NioBlobInputStream
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio
  children:
  - com.azure.storage.blob.nio.NioBlobInputStream.available()
  - com.azure.storage.blob.nio.NioBlobInputStream.close()
  - com.azure.storage.blob.nio.NioBlobInputStream.mark(int)
  - com.azure.storage.blob.nio.NioBlobInputStream.markSupported()
  - com.azure.storage.blob.nio.NioBlobInputStream.read()
  - com.azure.storage.blob.nio.NioBlobInputStream.read(byte[])
  - com.azure.storage.blob.nio.NioBlobInputStream.read(byte[],int,int)
  - com.azure.storage.blob.nio.NioBlobInputStream.reset()
  - com.azure.storage.blob.nio.NioBlobInputStream.skip(long)
  langs:
  - java
  name: NioBlobInputStream
  nameWithType: NioBlobInputStream
  fullName: com.azure.storage.blob.nio.NioBlobInputStream
  type: Class
  package: com.azure.storage.blob.nio
  summary: Provides an InputStream to read a file stored as an Azure Blob.
  syntax:
    content: public final class NioBlobInputStream extends InputStream
  inheritance:
  - java.lang.Object
  - java.io.InputStream
  inheritedMembers:
  - java.io.InputStream.available()
  - java.io.InputStream.close()
  - java.io.InputStream.mark(int)
  - java.io.InputStream.markSupported()
  - java.io.InputStream.nullInputStream()
  - java.io.InputStream.read()
  - java.io.InputStream.read(byte[])
  - java.io.InputStream.read(byte[],int,int)
  - java.io.InputStream.readAllBytes()
  - java.io.InputStream.readNBytes(byte[],int,int)
  - java.io.InputStream.readNBytes(int)
  - java.io.InputStream.reset()
  - java.io.InputStream.skip(long)
  - java.io.InputStream.transferTo(java.io.OutputStream)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.blob.nio.NioBlobInputStream.NioBlobInputStream(com.azure.storage.blob.specialized.BlobInputStream,java.nio.file.Path)
  id: NioBlobInputStream(com.azure.storage.blob.specialized.BlobInputStream,java.nio.file.Path)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: NioBlobInputStream(BlobInputStream blobInputStream, Path path)
  nameWithType: NioBlobInputStream.NioBlobInputStream(BlobInputStream blobInputStream, Path path)
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.NioBlobInputStream(BlobInputStream blobInputStream, Path path)
  overload: com.azure.storage.blob.nio.NioBlobInputStream.NioBlobInputStream*
  type: Constructor
  package: com.azure.storage.blob.nio
  syntax:
    content: " NioBlobInputStream(BlobInputStream blobInputStream, Path path)"
    parameters:
    - id: blobInputStream
      type: com.azure.storage.blob.specialized.BlobInputStream
    - id: path
      type: java.nio.file.Path
- uid: com.azure.storage.blob.nio.NioBlobInputStream.available()
  id: available()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: available()
  nameWithType: NioBlobInputStream.available()
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.available()
  overload: com.azure.storage.blob.nio.NioBlobInputStream.available*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes.
  syntax:
    content: public synchronized int available()
    return:
      type: int
      description: >-
        An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped
         over) from this input stream without blocking, or 0 when it reaches the end of the input stream.
  exceptions:
  - type: java.io.IOException
- uid: com.azure.storage.blob.nio.NioBlobInputStream.close()
  id: close()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: close()
  nameWithType: NioBlobInputStream.close()
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.close()
  overload: com.azure.storage.blob.nio.NioBlobInputStream.close*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Closes this input stream and releases any system resources associated with the stream.
  syntax:
    content: public synchronized void close()
  exceptions:
  - type: java.io.IOException
- uid: com.azure.storage.blob.nio.NioBlobInputStream.mark(int)
  id: mark(int)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: mark(int readlimit)
  nameWithType: NioBlobInputStream.mark(int readlimit)
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.mark(int readlimit)
  overload: com.azure.storage.blob.nio.NioBlobInputStream.mark*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes.
  syntax:
    content: public synchronized void mark(int readlimit)
    parameters:
    - id: readlimit
      type: int
      description: >-
        An <code>int</code> which represents the maximum limit of bytes that can be read before the mark
         position becomes invalid.
- uid: com.azure.storage.blob.nio.NioBlobInputStream.markSupported()
  id: markSupported()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: markSupported()
  nameWithType: NioBlobInputStream.markSupported()
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.markSupported()
  overload: com.azure.storage.blob.nio.NioBlobInputStream.markSupported*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Tests if this input stream supports the mark and reset methods.
  syntax:
    content: public boolean markSupported()
    return:
      type: boolean
      description: Returns <code>true</code>
- uid: com.azure.storage.blob.nio.NioBlobInputStream.read()
  id: read()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: read()
  nameWithType: NioBlobInputStream.read()
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.read()
  overload: com.azure.storage.blob.nio.NioBlobInputStream.read*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown.
  syntax:
    content: public int read()
    return:
      type: int
      description: >-
        An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no
         more data because the end of the stream has been reached.
  exceptions:
  - type: java.io.IOException
    description: If an I/O error occurs.
- uid: com.azure.storage.blob.nio.NioBlobInputStream.read(byte[])
  id: read(byte[])
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: read(byte[] b)
  nameWithType: NioBlobInputStream.read(byte[] b)
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.read(byte[] b)
  overload: com.azure.storage.blob.nio.NioBlobInputStream.read*
  type: Method
  package: com.azure.storage.blob.nio
  summary: 'Reads some number of bytes from the input stream and stores them into the buffer array `b`. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If the length of `b` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[0]`, the next one into `b[1]`, and so on. The number of bytes read is, at most, equal to the length of `b`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[0]` through `b[k-1]`, leaving elements `b[k]` through `b[b.length-1]` unaffected. The `read(b)` method for class <xref uid="java.io.InputStream" data-throw-if-not-resolved="false">InputStream</xref> has the same effect as: `read(b, 0, b.length)`'
  syntax:
    content: public int read(byte[] b)
    parameters:
    - id: b
      type: byte[]
      description: A <code>byte</code> array which represents the buffer into which the data is read.
    return:
      type: int
  exceptions:
  - type: java.io.IOException
    description: >-
      If the first byte cannot be read for any reason other than the end of the file, if the input
       stream has been closed, or if some other I/O error occurs.
- uid: com.azure.storage.blob.nio.NioBlobInputStream.read(byte[],int,int)
  id: read(byte[],int,int)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: read(byte[] b, int off, int len)
  nameWithType: NioBlobInputStream.read(byte[] b, int off, int len)
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.read(byte[] b, int off, int len)
  overload: com.azure.storage.blob.nio.NioBlobInputStream.read*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Reads up to `len` bytes of data from the input stream into an array of bytes. An attempt is made to read as many as `len` bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If `len` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[off]`, the next one into `b[off+1]`, and so on. The number of bytes read is, at most, equal to `len`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[off]` through `b[off+k-1]`, leaving elements `b[off+k]` through `b[off+len-1]` unaffected. In every case, elements `b[0]` through `b[off]` and elements `b[off+len]` through `b[b.length-1]` are unaffected.
  syntax:
    content: public int read(byte[] b, int off, int len)
    parameters:
    - id: b
      type: byte[]
      description: A <code>byte</code> array which represents the buffer into which the data is read.
    - id: off
      type: int
      description: >-
        An <code>int</code> which represents the start offset in the <code>byte</code> array at which the data
         is written.
    - id: len
      type: int
      description: An <code>int</code> which represents the maximum number of bytes to read.
    return:
      type: int
      description: >-
        An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no
         more data because the end of the stream has been reached.
  exceptions:
  - type: java.io.IOException
    description: >-
      If the first byte cannot be read for any reason other than end of file, or if the input
       stream has been closed, or if some other I/O error occurs.
- uid: com.azure.storage.blob.nio.NioBlobInputStream.reset()
  id: reset()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: reset()
  nameWithType: NioBlobInputStream.reset()
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.reset()
  overload: com.azure.storage.blob.nio.NioBlobInputStream.reset*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Repositions this stream to the position at the time the mark method was last called on this input stream. Note repositioning the blob read stream will disable blob MD5 checking.
  syntax:
    content: public synchronized void reset()
  exceptions:
  - type: java.io.IOException
    description: If this stream has not been marked or if the mark has been invalidated.
- uid: com.azure.storage.blob.nio.NioBlobInputStream.skip(long)
  id: skip(long)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.NioBlobInputStream
  langs:
  - java
  name: skip(long n)
  nameWithType: NioBlobInputStream.skip(long n)
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.skip(long n)
  overload: com.azure.storage.blob.nio.NioBlobInputStream.skip*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Skips over and discards n bytes of data from this input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. This may result from any of a number of conditions; reaching end of file before n bytes have been skipped is only one possibility. The actual number of bytes skipped is returned. If n is negative, no bytes are skipped. Note repositioning the blob read stream will disable blob MD5 checking.
  syntax:
    content: public synchronized long skip(long n)
    parameters:
    - id: n
      type: long
      description: A <code>long</code> which represents the number of bytes to skip.
    return:
      type: long
  exceptions:
  - type: java.io.IOException
references:
- uid: com.azure.storage.blob.specialized.BlobInputStream
  spec.java:
  - uid: com.azure.storage.blob.specialized.BlobInputStream
    name: BlobInputStream
    fullName: com.azure.storage.blob.specialized.BlobInputStream
- uid: java.nio.file.Path
  spec.java:
  - uid: java.nio.file.Path
    name: Path
    fullName: java.nio.file.Path
- uid: com.azure.storage.blob.nio.NioBlobInputStream.NioBlobInputStream*
  name: NioBlobInputStream
  nameWithType: NioBlobInputStream.NioBlobInputStream
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.NioBlobInputStream
  package: com.azure.storage.blob.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.storage.blob.nio.NioBlobInputStream.available*
  name: available
  nameWithType: NioBlobInputStream.available
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.available
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.NioBlobInputStream.close*
  name: close
  nameWithType: NioBlobInputStream.close
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.close
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.NioBlobInputStream.mark*
  name: mark
  nameWithType: NioBlobInputStream.mark
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.mark
  package: com.azure.storage.blob.nio
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.nio.NioBlobInputStream.markSupported*
  name: markSupported
  nameWithType: NioBlobInputStream.markSupported
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.markSupported
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.NioBlobInputStream.read*
  name: read
  nameWithType: NioBlobInputStream.read
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.read
  package: com.azure.storage.blob.nio
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.azure.storage.blob.nio.NioBlobInputStream.reset*
  name: reset
  nameWithType: NioBlobInputStream.reset
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.reset
  package: com.azure.storage.blob.nio
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.blob.nio.NioBlobInputStream.skip*
  name: skip
  nameWithType: NioBlobInputStream.skip
  fullName: com.azure.storage.blob.nio.NioBlobInputStream.skip
  package: com.azure.storage.blob.nio
- uid: java.io.InputStream
  name: InputStream
  nameWithType: InputStream
  fullName: java.io.InputStream
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.io.InputStream.mark(int)
  name: InputStream.mark(int)
  nameWithType: InputStream.mark(int)
  fullName: java.io.InputStream.mark(int)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.io.InputStream.readNBytes(int)
  name: InputStream.readNBytes(int)
  nameWithType: InputStream.readNBytes(int)
  fullName: java.io.InputStream.readNBytes(int)
- uid: java.io.InputStream.close()
  name: InputStream.close()
  nameWithType: InputStream.close()
  fullName: java.io.InputStream.close()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.io.InputStream.markSupported()
  name: InputStream.markSupported()
  nameWithType: InputStream.markSupported()
  fullName: java.io.InputStream.markSupported()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.io.InputStream.nullInputStream()
  name: InputStream.nullInputStream()
  nameWithType: InputStream.nullInputStream()
  fullName: java.io.InputStream.nullInputStream()
- uid: java.io.InputStream.transferTo(java.io.OutputStream)
  name: InputStream.transferTo(OutputStream)
  nameWithType: InputStream.transferTo(OutputStream)
  fullName: java.io.InputStream.transferTo(java.io.OutputStream)
- uid: java.io.InputStream.read(byte[])
  name: InputStream.read(byte[])
  nameWithType: InputStream.read(byte[])
  fullName: java.io.InputStream.read(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.io.InputStream.available()
  name: InputStream.available()
  nameWithType: InputStream.available()
  fullName: java.io.InputStream.available()
- uid: java.io.InputStream.readNBytes(byte[],int,int)
  name: InputStream.readNBytes(byte[],int,int)
  nameWithType: InputStream.readNBytes(byte[],int,int)
  fullName: java.io.InputStream.readNBytes(byte[],int,int)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.io.InputStream.readAllBytes()
  name: InputStream.readAllBytes()
  nameWithType: InputStream.readAllBytes()
  fullName: java.io.InputStream.readAllBytes()
- uid: java.io.InputStream.skip(long)
  name: InputStream.skip(long)
  nameWithType: InputStream.skip(long)
  fullName: java.io.InputStream.skip(long)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.io.InputStream.read()
  name: InputStream.read()
  nameWithType: InputStream.read()
  fullName: java.io.InputStream.read()
- uid: java.io.InputStream.read(byte[],int,int)
  name: InputStream.read(byte[],int,int)
  nameWithType: InputStream.read(byte[],int,int)
  fullName: java.io.InputStream.read(byte[],int,int)
- uid: java.io.InputStream.reset()
  name: InputStream.reset()
  nameWithType: InputStream.reset()
  fullName: java.io.InputStream.reset()
