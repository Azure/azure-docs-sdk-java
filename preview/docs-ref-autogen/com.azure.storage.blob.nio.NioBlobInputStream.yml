### YamlMime:JavaType
uid: "com.azure.storage.blob.nio.NioBlobInputStream"
fullName: "com.azure.storage.blob.nio.NioBlobInputStream"
name: "NioBlobInputStream"
nameWithType: "NioBlobInputStream"
summary: "Provides an Input<wbr>Stream to read a file stored as an Azure Blob."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.io.InputStream?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.io.InputStream.available()"
- "java.io.InputStream.close()"
- "java.io.InputStream.mark(int)"
- "java.io.InputStream.markSupported()"
- "java.io.InputStream.nullInputStream()"
- "java.io.InputStream.read()"
- "java.io.InputStream.read(byte[])"
- "java.io.InputStream.read(byte[],int,int)"
- "java.io.InputStream.readAllBytes()"
- "java.io.InputStream.readNBytes(byte[],int,int)"
- "java.io.InputStream.readNBytes(int)"
- "java.io.InputStream.reset()"
- "java.io.InputStream.skip(long)"
- "java.io.InputStream.transferTo(java.io.OutputStream)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class NioBlobInputStream extends InputStream"
methods:
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.available()"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.available()"
  name: "available()"
  nameWithType: "NioBlobInputStream.available()"
  summary: "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream."
  modifiers:
  - "synchronized"
  overridden: "java.io.InputStream.available()"
  syntax: "public synchronized int available()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes."
  returns:
    description: "An <code>int</code> which represents an estimate of the number of bytes that can be read (or skipped\n over) from this input stream without blocking, or 0 when it reaches the end of the input stream."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.close()"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.close()"
  name: "close()"
  nameWithType: "NioBlobInputStream.close()"
  summary: "Closes this input stream and releases any system resources associated with the stream."
  modifiers:
  - "synchronized"
  overridden: "java.io.InputStream.close()"
  syntax: "public synchronized void close()"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Closes this input stream and releases any system resources associated with the stream."
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.mark(int)"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.mark(int readlimit)"
  name: "mark(int readlimit)"
  nameWithType: "NioBlobInputStream.mark(int readlimit)"
  summary: "Marks the current position in this input stream."
  modifiers:
  - "synchronized"
  overridden: "java.io.InputStream.mark(int)"
  parameters:
  - description: "An <code>int</code> which represents the maximum limit of bytes that can be read before the mark\n position becomes invalid."
    name: "readlimit"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized void mark(int readlimit)"
  desc: "Marks the current position in this input stream. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes."
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.markSupported()"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.markSupported()"
  name: "markSupported()"
  nameWithType: "NioBlobInputStream.markSupported()"
  summary: "Tests if this input stream supports the mark and reset methods."
  overridden: "java.io.InputStream.markSupported()"
  syntax: "public boolean markSupported()"
  desc: "Tests if this input stream supports the mark and reset methods."
  returns:
    description: "Returns <code>true</code>"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.read()"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.read()"
  name: "read()"
  nameWithType: "NioBlobInputStream.read()"
  summary: "Reads the next byte of data from the input stream."
  overridden: "java.io.InputStream.read()"
  syntax: "public int read()"
  exceptions:
  - description: "If an I/O error occurs."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown."
  returns:
    description: "An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n more data because the end of the stream has been reached."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.read(byte[])"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.read(byte[] b)"
  name: "read(byte[] b)"
  nameWithType: "NioBlobInputStream.read(byte[] b)"
  summary: "Reads some number of bytes from the input stream and stores them into the buffer array `b`."
  overridden: "java.io.InputStream.read(byte[])"
  parameters:
  - description: "A <code>byte</code> array which represents the buffer into which the data is read."
    name: "b"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public int read(byte[] b)"
  exceptions:
  - description: "If the first byte cannot be read for any reason other than the end of the file, if the input\n stream has been closed, or if some other I/O error occurs."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Reads some number of bytes from the input stream and stores them into the buffer array `b`. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If the length of `b` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at the end of the file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[0]`, the next one into `b[1]`, and so on. The number of bytes read is, at most, equal to the length of `b`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[0]` through `b[k-1]`, leaving elements `b[k]` through `b[b.length-1]` unaffected. The `read(b)` method for class <xref uid=\"java.io.InputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"InputStream\"></xref> has the same effect as: `read(b, 0, b.length)`"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.read(byte[],int,int)"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.read(byte[] b, int off, int len)"
  name: "read(byte[] b, int off, int len)"
  nameWithType: "NioBlobInputStream.read(byte[] b, int off, int len)"
  summary: "Reads up to `len` bytes of data from the input stream into an array of bytes."
  overridden: "java.io.InputStream.read(byte[],int,int)"
  parameters:
  - description: "A <code>byte</code> array which represents the buffer into which the data is read."
    name: "b"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "An <code>int</code> which represents the start offset in the <code>byte</code> array at which the data\n is written."
    name: "off"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "An <code>int</code> which represents the maximum number of bytes to read."
    name: "len"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public int read(byte[] b, int off, int len)"
  exceptions:
  - description: "If the first byte cannot be read for any reason other than end of file, or if the input\n stream has been closed, or if some other I/O error occurs."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Reads up to `len` bytes of data from the input stream into an array of bytes. An attempt is made to read as many as `len` bytes, but a smaller number may be read. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If `len` is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into `b`. The first byte read is stored into element `b[off]`, the next one into `b[off+1]`, and so on. The number of bytes read is, at most, equal to `len`. Let `k` be the number of bytes actually read; these bytes will be stored in elements `b[off]` through `b[off+k-1]`, leaving elements `b[off+k]` through `b[off+len-1]` unaffected. In every case, elements `b[0]` through `b[off]` and elements `b[off+len]` through `b[b.length-1]` are unaffected."
  returns:
    description: "An <code>int</code> which represents the total number of bytes read into the buffer, or -1 if there is no\n more data because the end of the stream has been reached."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.reset()"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.reset()"
  name: "reset()"
  nameWithType: "NioBlobInputStream.reset()"
  summary: "Repositions this stream to the position at the time the mark method was last called on this input stream."
  modifiers:
  - "synchronized"
  overridden: "java.io.InputStream.reset()"
  syntax: "public synchronized void reset()"
  exceptions:
  - description: "If this stream has not been marked or if the mark has been invalidated."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Repositions this stream to the position at the time the mark method was last called on this input stream. Note repositioning the blob read stream will disable blob MD5 checking."
- uid: "com.azure.storage.blob.nio.NioBlobInputStream.skip(long)"
  fullName: "com.azure.storage.blob.nio.NioBlobInputStream.skip(long n)"
  name: "skip(long n)"
  nameWithType: "NioBlobInputStream.skip(long n)"
  summary: "Skips over and discards n bytes of data from this input stream."
  modifiers:
  - "synchronized"
  overridden: "java.io.InputStream.skip(long)"
  parameters:
  - description: "A <code>long</code> which represents the number of bytes to skip."
    name: "n"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public synchronized long skip(long n)"
  exceptions:
  - type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Skips over and discards n bytes of data from this input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. This may result from any of a number of conditions; reaching end of file before n bytes have been skipped is only one possibility. The actual number of bytes skipped is returned. If n is negative, no bytes are skipped. Note repositioning the blob read stream will disable blob MD5 checking."
  returns:
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Provides an InputStream to read a file stored as an Azure Blob."
metadata: {}
package: "com.azure.storage.blob.nio"
artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.19
