### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer
  id: StdSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std
  children:
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.ser.std.StdSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class<?>,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class<T>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._handledType
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  langs:
  - java
  name: StdSerializer<T>
  nameWithType: StdSerializer<T>
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>
  type: Class
  package: com.fasterxml.jackson.databind.ser.std
  summary: Base class used by all standard serializers, and can also be used for custom serializers (in fact, this is the recommended base class to use). Provides convenience methods for implementing <xref uid="com.fasterxml.jackson.databind.jsonschema.SchemaAware" data-throw-if-not-resolved="false">SchemaAware</xref>
  syntax:
    content: public abstract class StdSerializer<T> extends JsonSerializer<T> implements jsonFormatVisitors.JsonFormatVisitable, SchemaAware, Serializable
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializer
  implements:
  - com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  - com.fasterxml.jackson.databind.jsonschema.SchemaAware
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.handledType()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.JavaType)
  id: StdSerializer(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: StdSerializer(JavaType type)
  nameWithType: StdSerializer<T>.StdSerializer(JavaType type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.StdSerializer(JavaType type)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected StdSerializer(JavaType type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.ser.std.StdSerializer<?>)
  id: StdSerializer(com.fasterxml.jackson.databind.ser.std.StdSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: StdSerializer(StdSerializer<?> src)
  nameWithType: StdSerializer<T>.StdSerializer(StdSerializer<?> src)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.StdSerializer(StdSerializer<?> src)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected StdSerializer(StdSerializer<?> src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.StdSerializer<?>
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class<?>,boolean)
  id: StdSerializer(java.lang.Class<?>,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: StdSerializer(Class<?> t, boolean dummy)
  nameWithType: StdSerializer<T>.StdSerializer(Class<?> t, boolean dummy)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.StdSerializer(Class<?> t, boolean dummy)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  summary: Alternate constructor that is (alas!) needed to work around kinks of generic type handling
  syntax:
    content: protected StdSerializer(Class<?> t, boolean dummy)
    parameters:
    - id: t
      type: java.lang.Class<?>
    - id: dummy
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class<T>)
  id: StdSerializer(java.lang.Class<T>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: StdSerializer(Class<T> t)
  nameWithType: StdSerializer<T>.StdSerializer(Class<T> t)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.StdSerializer(Class<T> t)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected StdSerializer(Class<T> t)
    parameters:
    - id: t
      type: java.lang.Class<T>
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._handledType
  id: _handledType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: _handledType
  nameWithType: StdSerializer<T>._handledType
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>._handledType
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Nominal type supported, usually declared type of property for which serializer is used.
  syntax:
    content: protected final Class<T> _handledType
    return:
      type: java.lang.Class<T>
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  id: _neitherNull(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: _neitherNull(Object a, Object b)
  nameWithType: StdSerializer<T>._neitherNull(Object a, Object b)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>._neitherNull(Object a, Object b)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected static final boolean _neitherNull(Object a, Object b)
    parameters:
    - id: a
      type: java.lang.Object
    - id: b
      type: java.lang.Object
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  id: _nonEmpty(java.util.Collection<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: _nonEmpty(Collection<?> c)
  nameWithType: StdSerializer<T>._nonEmpty(Collection<?> c)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>._nonEmpty(Collection<?> c)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected static final boolean _nonEmpty(Collection<?> c)
    parameters:
    - id: c
      type: java.util.Collection<?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  nameWithType: StdSerializer<T>.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation specifies no format. This behavior is usually overriden by custom serializers.
  syntax:
    content: public void acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  id: createSchemaNode(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: createSchemaNode(String type)
  nameWithType: StdSerializer<T>.createSchemaNode(String type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.createSchemaNode(String type)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected ObjectNode createSchemaNode(String type)
    parameters:
    - id: type
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  id: createSchemaNode(java.lang.String,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: createSchemaNode(String type, boolean isOptional)
  nameWithType: StdSerializer<T>.createSchemaNode(String type, boolean isOptional)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.createSchemaNode(String type, boolean isOptional)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected ObjectNode createSchemaNode(String type, boolean isOptional)
    parameters:
    - id: type
      type: java.lang.String
    - id: isOptional
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findAnnotatedContentSerializer(SerializerProvider serializers, BeanProperty property)
  nameWithType: StdSerializer<T>.findAnnotatedContentSerializer(SerializerProvider serializers, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findAnnotatedContentSerializer(SerializerProvider serializers, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Convenience method for finding out possibly configured content value serializer.
  syntax:
    content: protected JsonSerializer<?> findAnnotatedContentSerializer(SerializerProvider serializers, BeanProperty property)
    parameters:
    - id: serializers
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findContextualConvertingSerializer(SerializerProvider provider, BeanProperty property, JsonSerializer<?> existingSerializer)
  nameWithType: StdSerializer<T>.findContextualConvertingSerializer(SerializerProvider provider, BeanProperty property, JsonSerializer<?> existingSerializer)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findContextualConvertingSerializer(SerializerProvider provider, BeanProperty property, JsonSerializer<?> existingSerializer)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that can be used to see if specified property has annotation indicating that a converter is to be used for contained values (contents of structured types; array/List/Map values)
  syntax:
    content: protected JsonSerializer<?> findContextualConvertingSerializer(SerializerProvider provider, BeanProperty property, JsonSerializer<?> existingSerializer)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: existingSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
      description: >-
        (optional) configured content
            serializer if one already exists.
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer)
  nameWithType: StdSerializer<T>.findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: existingSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  id: findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findFormatFeature(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)
  nameWithType: StdSerializer<T>.findFormatFeature(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findFormatFeature(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Convenience method that uses <xref uid="com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides" data-throw-if-not-resolved="false">#findFormatOverrides</xref> to find possible defaults and/of overrides, and then calls `JsonFormat.Value.getFeature(...)` to find whether that feature has been specifically marked as enabled or disabled.
  syntax:
    content: protected Boolean findFormatFeature(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: typeForDefaults
      type: java.lang.Class<?>
      description: Type (erased) used for finding default format settings, if any
    - id: feat
      type: com.fasterxml.jackson.annotation.JsonFormat.Feature
    return:
      type: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  id: findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findFormatOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
  nameWithType: StdSerializer<T>.findFormatOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findFormatOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that may be used to find if this deserializer has specific <xref uid="com.fasterxml.jackson.annotation.JsonFormat" data-throw-if-not-resolved="false">JsonFormat</xref> settings, either via property, or through type-specific defaulting.
  syntax:
    content: protected JsonFormat.Value findFormatOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: typeForDefaults
      type: java.lang.Class<?>
      description: Type (erased) used for finding default format settings, if any
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  id: findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findIncludeOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
  nameWithType: StdSerializer<T>.findIncludeOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findIncludeOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected JsonInclude.Value findIncludeOverrides(SerializerProvider provider, BeanProperty prop, Class<?> typeForDefaults)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    - id: typeForDefaults
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  id: findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: findPropertyFilter(SerializerProvider provider, Object filterId, Object valueToFilter)
  nameWithType: StdSerializer<T>.findPropertyFilter(SerializerProvider provider, Object filterId, Object valueToFilter)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findPropertyFilter(SerializerProvider provider, Object filterId, Object valueToFilter)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method used to locate filter that is needed, based on filter id this serializer was constructed with.
  syntax:
    content: protected PropertyFilter findPropertyFilter(SerializerProvider provider, Object filterId, Object valueToFilter)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: filterId
      type: java.lang.Object
    - id: valueToFilter
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.PropertyFilter
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  id: getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: getSchema(SerializerProvider provider, Type typeHint)
  nameWithType: StdSerializer<T>.getSchema(SerializerProvider provider, Type typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.getSchema(SerializerProvider provider, Type typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation simply claims type is "string"; usually overriden by custom serializers.
  syntax:
    content: public JsonNode getSchema(SerializerProvider provider, Type typeHint)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeHint
      type: java.lang.reflect.Type
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  id: getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
  nameWithType: StdSerializer<T>.getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation simply claims type is "string"; usually overriden by custom serializers.
  syntax:
    content: public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeHint
      type: java.lang.reflect.Type
    - id: isOptional
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  id: handledType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: handledType()
  nameWithType: StdSerializer<T>.handledType()
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.handledType()
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method for accessing type of Objects this serializer can handle. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type).


    Default implementation will return null, which essentially means same as returning `Object.class` would; that is, that nothing is known about handled type.
  syntax:
    content: public Class<T> handledType()
    return:
      type: java.lang.Class<T>
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  id: isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: isDefaultSerializer(JsonSerializer<?> serializer)
  nameWithType: StdSerializer<T>.isDefaultSerializer(JsonSerializer<?> serializer)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.isDefaultSerializer(JsonSerializer<?> serializer)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to determine if given serializer is the default serializer Jackson uses; as opposed to a custom serializer installed by a module or calling application. Determination is done using <xref uid="com.fasterxml.jackson.databind.annotation.JacksonStdImpl" data-throw-if-not-resolved="false">JacksonStdImpl</xref> annotation on serializer class.
  syntax:
    content: protected boolean isDefaultSerializer(JsonSerializer<?> serializer)
    parameters:
    - id: serializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: serialize(T value, JsonGenerator gen, SerializerProvider provider)
  nameWithType: StdSerializer<T>.serialize(T value, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.serialize(T value, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: value
      type: T
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  id: visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonSerializer<?> itemSerializer, JavaType itemType)
  nameWithType: StdSerializer<T>.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonSerializer<?> itemSerializer, JavaType itemType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonSerializer<?> itemSerializer, JavaType itemType)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonSerializer<?> itemSerializer, JavaType itemType)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
    - id: itemSerializer
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
    - id: itemType
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  id: visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonFormatTypes itemType)
  nameWithType: StdSerializer<T>.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonFormatTypes itemType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonFormatTypes itemType)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonFormatTypes itemType)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
    - id: itemType
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  id: visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
  nameWithType: StdSerializer<T>.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is a floating-point JSON number.
  syntax:
    content: protected void visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
    - id: numberType
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  id: visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
  nameWithType: StdSerializer<T>.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON Integer number.
  syntax:
    content: protected void visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
    - id: numberType
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  id: visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType, jsonFormatVisitors.JsonValueFormat format)
  nameWithType: StdSerializer<T>.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType, jsonFormatVisitors.JsonValueFormat format)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType, jsonFormatVisitors.JsonValueFormat format)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON Integer number, but that there is also a further format restriction involved.
  syntax:
    content: protected void visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, JsonParser.NumberType numberType, jsonFormatVisitors.JsonValueFormat format)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
    - id: numberType
      type: com.fasterxml.jackson.core.JsonParser.NumberType
    - id: format
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  nameWithType: StdSerializer<T>.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON String.
  syntax:
    content: protected void visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  id: visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonValueFormat format)
  nameWithType: StdSerializer<T>.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonValueFormat format)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonValueFormat format)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON String, but that there is a more refined logical type
  syntax:
    content: protected void visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint, jsonFormatVisitors.JsonValueFormat format)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
    - id: format
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  id: wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index)
  nameWithType: StdSerializer<T>.wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: t
      type: java.lang.Throwable
    - id: bean
      type: java.lang.Object
    - id: index
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  id: wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.StdSerializer
  langs:
  - java
  name: wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName)
  nameWithType: StdSerializer<T>.wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName)
  overload: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method that will modify caught exception (passed in as argument) as necessary to include reference information, and to ensure it is a subtype of <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref>, or an unchecked exception.


    Rules for wrapping and unwrapping are bit complicated; essentially:

     *  Errors are to be passed as is (if uncovered via unwrapping)
     *  "Plain" IOExceptions (ones that are not of type <xref uid="com.fasterxml.jackson.databind.JsonMappingException" data-throw-if-not-resolved="false">JsonMappingException</xref> are to be passed as is
  syntax:
    content: public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: t
      type: java.lang.Throwable
    - id: bean
      type: java.lang.Object
    - id: fieldName
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
references:
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer*
  name: StdSerializer
  nameWithType: StdSerializer<T>.StdSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.StdSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.ser.std.StdSerializer
    name: StdSerializer
    fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType*
  name: handledType
  nameWithType: StdSerializer<T>.handledType
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.handledType
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize*
  name: serialize
  nameWithType: StdSerializer<T>.serialize
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.serialize
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: StdSerializer<T>.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema*
  name: getSchema
  nameWithType: StdSerializer<T>.getSchema
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.getSchema
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.node.ObjectNode
  name: ObjectNode
  nameWithType: ObjectNode
  fullName: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode*
  name: createSchemaNode
  nameWithType: StdSerializer<T>.createSchemaNode
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.createSchemaNode
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat*
  name: visitStringFormat
  nameWithType: StdSerializer<T>.visitStringFormat
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitStringFormat
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat
  name: jsonFormatVisitors.JsonValueFormat
  nameWithType: jsonFormatVisitors.JsonValueFormat
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat*
  name: visitIntFormat
  nameWithType: StdSerializer<T>.visitIntFormat
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitIntFormat
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat*
  name: visitFloatFormat
  nameWithType: StdSerializer<T>.visitFloatFormat
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitFloatFormat
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat*
  name: visitArrayFormat
  nameWithType: StdSerializer<T>.visitArrayFormat
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.visitArrayFormat
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes
  name: jsonFormatVisitors.JsonFormatTypes
  nameWithType: jsonFormatVisitors.JsonFormatTypes
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow*
  name: wrapAndThrow
  nameWithType: StdSerializer<T>.wrapAndThrow
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.wrapAndThrow
  package: com.fasterxml.jackson.databind.ser.std
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer*
  name: findContextualConvertingSerializer
  nameWithType: StdSerializer<T>.findContextualConvertingSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findContextualConvertingSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer*
  name: findConvertingContentSerializer
  nameWithType: StdSerializer<T>.findConvertingContentSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findConvertingContentSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.PropertyFilter
  name: PropertyFilter
  nameWithType: PropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.PropertyFilter
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter*
  name: findPropertyFilter
  nameWithType: StdSerializer<T>.findPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findPropertyFilter
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.annotation.JsonFormat.Value
  name: JsonFormat.Value
  nameWithType: JsonFormat.Value
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Value
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides*
  name: findFormatOverrides
  nameWithType: StdSerializer<T>.findFormatOverrides
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findFormatOverrides
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.annotation.JsonFormat.Feature
  name: JsonFormat.Feature
  nameWithType: JsonFormat.Feature
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Feature
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature*
  name: findFormatFeature
  nameWithType: StdSerializer<T>.findFormatFeature
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findFormatFeature
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.annotation.JsonInclude.Value
  name: JsonInclude.Value
  nameWithType: JsonInclude.Value
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Value
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides*
  name: findIncludeOverrides
  nameWithType: StdSerializer<T>.findIncludeOverrides
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findIncludeOverrides
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer*
  name: findAnnotatedContentSerializer
  nameWithType: StdSerializer<T>.findAnnotatedContentSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.findAnnotatedContentSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer*
  name: isDefaultSerializer
  nameWithType: StdSerializer<T>.isDefaultSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>.isDefaultSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull*
  name: _neitherNull
  nameWithType: StdSerializer<T>._neitherNull
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>._neitherNull
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.util.Collection<?>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty*
  name: _nonEmpty
  nameWithType: StdSerializer<T>._nonEmpty
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<T>._nonEmpty
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonSerializer<T>
  name: JsonSerializer<T>
  nameWithType: JsonSerializer<T>
  fullName: com.fasterxml.jackson.databind.JsonSerializer<T>
- uid: com.fasterxml.jackson.databind.jsonschema.SchemaAware
  name: SchemaAware
  nameWithType: SchemaAware
  fullName: com.fasterxml.jackson.databind.jsonschema.SchemaAware
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  name: jsonFormatVisitors.JsonFormatVisitable
  nameWithType: jsonFormatVisitors.JsonFormatVisitable
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  name: JsonSerializer.isEmpty(SerializerProvider,T)
  nameWithType: JsonSerializer.isEmpty(SerializerProvider,T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  name: JsonSerializer.properties()
  nameWithType: JsonSerializer.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.properties()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: JsonSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: JsonSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  name: JsonSerializer.getDelegatee()
  nameWithType: JsonSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: JsonSerializer.serialize(T,JsonGenerator,SerializerProvider)
  nameWithType: JsonSerializer.serialize(T,JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  name: JsonSerializer.withFilterId(Object)
  nameWithType: JsonSerializer.withFilterId(Object)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
- uid: com.fasterxml.jackson.databind.JsonSerializer.handledType()
  name: JsonSerializer.handledType()
  nameWithType: JsonSerializer.handledType()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.handledType()
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  name: JsonSerializer.isEmpty(T)
  nameWithType: JsonSerializer.isEmpty(T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  name: JsonSerializer.usesObjectId()
  nameWithType: JsonSerializer.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonSerializer.unwrappingSerializer(NameTransformer)
  nameWithType: JsonSerializer.unwrappingSerializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  name: JsonSerializer.isUnwrappingSerializer()
  nameWithType: JsonSerializer.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer.replaceDelegatee(JsonSerializer
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
