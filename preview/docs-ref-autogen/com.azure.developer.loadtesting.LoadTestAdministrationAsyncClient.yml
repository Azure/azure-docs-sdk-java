### YamlMime:JavaType
uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient"
fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient"
name: "LoadTestAdministrationAsyncClient"
nameWithType: "LoadTestAdministrationAsyncClient"
summary: "Initializes a new instance of the asynchronous Load<wbr>Testing<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **LoadTestAdministrationAsyncClient**"
methods:
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateAppComponentsWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateAppComponentsWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateAppComponentsWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateAppComponentsWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  summary: "Associate an App Component (Azure resource) to a test or test run."
  parameters:
  - description: "Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "App Component model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateAppComponentsWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  desc: "Associate an App Component (Azure resource) to a test or test run.\n\n**Request Body Schema**\n\n```java\n{\n     resourceId: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     name: String (Optional)\n     value (Required): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Required)\n             resourceType: String (Required)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     resourceId: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     name: String (Optional)\n     value (Required): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Required)\n             resourceType: String (Required)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "app Components model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfigWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfigWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateServerMetricsConfigWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateServerMetricsConfigWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  summary: "Configure server metrics for a test or test run."
  parameters:
  - description: "Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Server metrics configuration model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateServerMetricsConfigWithResponse(String name, BinaryData body, RequestOptions requestOptions)"
  desc: "Configure server metrics for a test or test run.\n\n**Request Body Schema**\n\n```java\n{\n     name: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricnamespace: String (Required)\n             displayDescription: String (Optional)\n             name (Required): {\n                 value: String (Required)\n                 localizedValue: String (Required)\n             }\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     name: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricnamespace: String (Required)\n             displayDescription: String (Optional)\n             name (Required): {\n                 value: String (Required)\n                 localizedValue: String (Required)\n             }\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n }\n```"
  returns:
    description: "server metrics config model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  name: "createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  summary: "Create a new test or Update an existing test."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Load test model."
    name: "body"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateTestWithResponse(String testId, BinaryData body, RequestOptions requestOptions)"
  desc: "Create a new test or Update an existing test.\n\n**Request Body Schema**\n\n```java\n{\n     testId: String (Optional)\n     description: String (Optional)\n     displayName: String (Optional)\n     resourceId: String (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     inputArtifacts (Optional): {\n         configUrl (Optional): {\n             url: String (Optional)\n             fileId: String (Optional)\n             filename: String (Optional)\n             fileType: String(0/1/2) (Optional)\n             expireTime: OffsetDateTime (Optional)\n             validationStatus: String (Optional)\n         }\n         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n         userPropUrl (Optional): (recursive schema, see userPropUrl above)\n         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n         additionalUrls (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     subnetId: String (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     testId: String (Optional)\n     description: String (Optional)\n     displayName: String (Optional)\n     resourceId: String (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     inputArtifacts (Optional): {\n         configUrl (Optional): {\n             url: String (Optional)\n             fileId: String (Optional)\n             filename: String (Optional)\n             fileType: String(0/1/2) (Optional)\n             expireTime: OffsetDateTime (Optional)\n             validationStatus: String (Optional)\n         }\n         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n         userPropUrl (Optional): (recursive schema, see userPropUrl above)\n         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n         additionalUrls (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     subnetId: String (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n }\n```"
  returns:
    description: "load test model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteAppComponentWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteAppComponentWithResponse(String name, RequestOptions requestOptions)"
  name: "deleteAppComponentWithResponse(String name, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteAppComponentWithResponse(String name, RequestOptions requestOptions)"
  summary: "Delete an App Component."
  parameters:
  - description: "Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteAppComponentWithResponse(String name, RequestOptions requestOptions)"
  desc: "Delete an App Component."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteLoadTestWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  name: "deleteLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  summary: "Delete a test by its name."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  desc: "Delete a test by its name."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteServerMetricsWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteServerMetricsWithResponse(String name, RequestOptions requestOptions)"
  name: "deleteServerMetricsWithResponse(String name, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteServerMetricsWithResponse(String name, RequestOptions requestOptions)"
  summary: "Delete server metrics configuration by its name."
  parameters:
  - description: "Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteServerMetricsWithResponse(String name, RequestOptions requestOptions)"
  desc: "Delete server metrics configuration by its name."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.deleteTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  name: "deleteTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.deleteTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  summary: "Delete file by the file name for a test."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  desc: "Delete file by the file name for a test."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponentByNameWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponentByNameWithResponse(String name, RequestOptions requestOptions)"
  name: "getAppComponentByNameWithResponse(String name, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getAppComponentByNameWithResponse(String name, RequestOptions requestOptions)"
  summary: "Get App Component details by App Component name."
  parameters:
  - description: "Unique name of the App Component, must be a valid URL character ^[a-z0-9_-]*$."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getAppComponentByNameWithResponse(String name, RequestOptions requestOptions)"
  desc: "Get App Component details by App Component name.\n\n**Response Body Schema**\n\n```java\n{\n     resourceId: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     name: String (Optional)\n     value (Required): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Required)\n             resourceType: String (Required)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "app Component details by App Component name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n     <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponentWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getAppComponentWithResponse(RequestOptions requestOptions)"
  name: "getAppComponentWithResponse(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getAppComponentWithResponse(RequestOptions requestOptions)"
  summary: "Get App Components for a test or a test run by its name."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getAppComponentWithResponse(RequestOptions requestOptions)"
  desc: "Get App Components for a test or a test run by its name.\n\n**Query Parameters**\n\n    | --------- | ------ | -------- | --------------------------------------------------------------------------- |\n    | Name      | Type   | Required | Description                                                                 |\n    | testRunId | String | No       | \\[Required, if testId is not provided\\] Test run Id.                        |\n    | testId    | String | No       | Unique name for load test, must be a valid URL character ^\\[a-z0-9\\_-\\]\\*$. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     resourceId: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     name: String (Optional)\n     value (Required): {\n         String (Required): {\n             resourceId: String (Required)\n             resourceName: String (Required)\n             resourceType: String (Required)\n             displayName: String (Optional)\n             resourceGroup: String (Optional)\n             subscriptionId: String (Optional)\n             kind: String (Optional)\n         }\n     }\n }\n```"
  returns:
    description: "app Components for a test or a test run by its name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion\n     of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getLoadTestWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  name: "getLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  summary: "Get load test details by test name."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getLoadTestWithResponse(String testId, RequestOptions requestOptions)"
  desc: "Get load test details by test name.\n\n**Response Body Schema**\n\n```java\n{\n     testId: String (Optional)\n     description: String (Optional)\n     displayName: String (Optional)\n     resourceId: String (Optional)\n     loadTestConfig (Optional): {\n         engineInstances: Integer (Optional)\n         splitAllCSVs: Boolean (Optional)\n     }\n     passFailCriteria (Optional): {\n         passFailMetrics (Optional): {\n             String (Optional): {\n                 clientmetric: String (Optional)\n                 aggregate: String (Optional)\n                 condition: String (Optional)\n                 requestName: String (Optional)\n                 value: Double (Optional)\n                 action: String (Optional)\n                 actualValue: Double (Optional)\n                 result: String (Optional)\n             }\n         }\n     }\n     createdDateTime: OffsetDateTime (Optional)\n     createdBy: String (Optional)\n     lastModifiedDateTime: OffsetDateTime (Optional)\n     lastModifiedBy: String (Optional)\n     inputArtifacts (Optional): {\n         configUrl (Optional): {\n             url: String (Optional)\n             fileId: String (Optional)\n             filename: String (Optional)\n             fileType: String(0/1/2) (Optional)\n             expireTime: OffsetDateTime (Optional)\n             validationStatus: String (Optional)\n         }\n         testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n         userPropUrl (Optional): (recursive schema, see userPropUrl above)\n         inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n         additionalUrls (Optional): [\n             (recursive schema, see above)\n         ]\n     }\n     secrets (Optional): {\n         String (Optional): {\n             value: String (Optional)\n             type: String (Optional)\n         }\n     }\n     environmentVariables (Optional): {\n         String: String (Optional)\n     }\n     subnetId: String (Optional)\n     keyvaultReferenceIdentityType: String (Optional)\n     keyvaultReferenceIdentityId: String (Optional)\n }\n```"
  returns:
    description: "load test details by test name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerDefaultMetricsWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerDefaultMetricsWithResponse(RequestOptions requestOptions)"
  name: "getServerDefaultMetricsWithResponse(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getServerDefaultMetricsWithResponse(RequestOptions requestOptions)"
  summary: "Get all default server metrics configuration for supported resource types."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getServerDefaultMetricsWithResponse(RequestOptions requestOptions)"
  desc: "Get all default server metrics configuration for supported resource types.\n\n**Response Body Schema**\n\n```java\n{\n     defaultMetrics (Optional): {\n         String (Optional): [\n              (Optional){\n                 metricnamespace: String (Optional)\n                 aggregation: String (Optional)\n                 name (Optional): {\n                     value: String (Optional)\n                     localizedValue: String (Optional)\n                 }\n                 unit: String (Optional)\n                 displayDescription: String (Optional)\n             }\n         ]\n     }\n }\n```"
  returns:
    description: "all default server metrics configuration for supported resource types along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsByNameWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsByNameWithResponse(String name, RequestOptions requestOptions)"
  name: "getServerMetricsByNameWithResponse(String name, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getServerMetricsByNameWithResponse(String name, RequestOptions requestOptions)"
  summary: "Get server metrics configuration by its name."
  parameters:
  - description: "Unique name for server metrics, must be a valid URL character ^[a-z0-9_-]*$."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getServerMetricsByNameWithResponse(String name, RequestOptions requestOptions)"
  desc: "Get server metrics configuration by its name.\n\n**Response Body Schema**\n\n```java\n{\n     name: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricnamespace: String (Required)\n             displayDescription: String (Optional)\n             name (Required): {\n                 value: String (Required)\n                 localizedValue: String (Required)\n             }\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n }\n```"
  returns:
    description: "server metrics configuration by its name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getServerMetricsWithResponse(RequestOptions requestOptions)"
  name: "getServerMetricsWithResponse(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getServerMetricsWithResponse(RequestOptions requestOptions)"
  summary: "Get server metrics configuration for a test or test run by its name."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getServerMetricsWithResponse(RequestOptions requestOptions)"
  desc: "Get server metrics configuration for a test or test run by its name.\n\n**Query Parameters**\n\n    | --------- | ------ | -------- | --------------------------------------------------------------------------- |\n    | Name      | Type   | Required | Description                                                                 |\n    | testRunId | String | No       | \\[Required, if testId is not provided\\] Test run Id.                        |\n    | testId    | String | No       | Unique name for load test, must be a valid URL character ^\\[a-z0-9\\_-\\]\\*$. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     name: String (Optional)\n     testId: String (Optional)\n     testRunId: String (Optional)\n     metrics (Optional): {\n         String (Optional): {\n             id: String (Optional)\n             resourceId: String (Required)\n             metricnamespace: String (Required)\n             displayDescription: String (Optional)\n             name (Required): {\n                 value: String (Required)\n                 localizedValue: String (Required)\n             }\n             aggregation: String (Required)\n             unit: String (Optional)\n             resourceType: String (Required)\n         }\n     }\n }\n```"
  returns:
    description: "server metrics configuration for a test or test run by its name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n     completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestFileWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.getTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  name: "getTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.getTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  summary: "Get test file by the file name."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getTestFileWithResponse(String testId, String fileId, RequestOptions requestOptions)"
  desc: "Get test file by the file name.\n\n**Response Body Schema**\n\n```java\n{\n     url: String (Optional)\n     fileId: String (Optional)\n     filename: String (Optional)\n     fileType: String(0/1/2) (Optional)\n     expireTime: OffsetDateTime (Optional)\n     validationStatus: String (Optional)\n }\n```"
  returns:
    description: "test file by the file name along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listLoadTestSearch(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listLoadTestSearch(RequestOptions requestOptions)"
  name: "listLoadTestSearch(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.listLoadTestSearch(RequestOptions requestOptions)"
  summary: "Get all load tests by the fully qualified resource Id e.<wbr>g subscriptions/\\{sub<wbr>Id\\}/resource<wbr>Groups/\\{rg\\}/providers/Microsoft.<wbr>Load<wbr>Test<wbr>Service/loadtests/\\{res<wbr>Name\\}."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listLoadTestSearch(RequestOptions requestOptions)"
  desc: "Get all load tests by the fully qualified resource Id e.g subscriptions/\\{subId\\}/resourceGroups/\\{rg\\}/providers/Microsoft.LoadTestService/loadtests/\\{resName\\}.\n\n**Query Parameters**\n\n    | -------------------- | -------------- | -------- | ------------------------------------------------------------------------------------------------------------------------ |\n    | Name                 | Type           | Required | Description                                                                                                              |\n    | orderBy              | String         | No       | Sort on one of the field - lastModifiedDateTime, displayName, createdBy in (field asc/desc) format. eg: displayName asc. |\n    | search               | String         | No       | Filter search based on searchable fields - testId, createdBy.                                                            |\n    | lastUpdatedStartTime | OffsetDateTime | No       | Start DateTime(ISO 8601 literal format) of the last updated time range to filter tests.                                  |\n    | lastUpdatedEndTime   | OffsetDateTime | No       | End DateTime(ISO 8601 literal format) of the last updated time range to filter tests.                                    |\n    | continuationToken    | String         | No       | Continuation token to get the next page of response.                                                                     |\n    | maxPageSize          | Integer        | No       | Number of results in response.                                                                                           |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             testId: String (Optional)\n             description: String (Optional)\n             displayName: String (Optional)\n             resourceId: String (Optional)\n             loadTestConfig (Optional): {\n                 engineInstances: Integer (Optional)\n                 splitAllCSVs: Boolean (Optional)\n             }\n             passFailCriteria (Optional): {\n                 passFailMetrics (Optional): {\n                     String (Optional): {\n                         clientmetric: String (Optional)\n                         aggregate: String (Optional)\n                         condition: String (Optional)\n                         requestName: String (Optional)\n                         value: Double (Optional)\n                         action: String (Optional)\n                         actualValue: Double (Optional)\n                         result: String (Optional)\n                     }\n                 }\n             }\n             createdDateTime: OffsetDateTime (Optional)\n             createdBy: String (Optional)\n             lastModifiedDateTime: OffsetDateTime (Optional)\n             lastModifiedBy: String (Optional)\n             inputArtifacts (Optional): {\n                 configUrl (Optional): {\n                     url: String (Optional)\n                     fileId: String (Optional)\n                     filename: String (Optional)\n                     fileType: String(0/1/2) (Optional)\n                     expireTime: OffsetDateTime (Optional)\n                     validationStatus: String (Optional)\n                 }\n                 testScriptUrl (Optional): (recursive schema, see testScriptUrl above)\n                 userPropUrl (Optional): (recursive schema, see userPropUrl above)\n                 inputArtifactsZipFileurl (Optional): (recursive schema, see inputArtifactsZipFileurl above)\n                 additionalUrls (Optional): [\n                     (recursive schema, see above)\n                 ]\n             }\n             secrets (Optional): {\n                 String (Optional): {\n                     value: String (Optional)\n                     type: String (Optional)\n                 }\n             }\n             environmentVariables (Optional): {\n                 String: String (Optional)\n             }\n             subnetId: String (Optional)\n             keyvaultReferenceIdentityType: String (Optional)\n             keyvaultReferenceIdentityId: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "all load tests by the fully qualified resource Id e.g\n     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName} as\n     paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listSupportedResourceTypeWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listSupportedResourceTypeWithResponse(RequestOptions requestOptions)"
  name: "listSupportedResourceTypeWithResponse(RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.listSupportedResourceTypeWithResponse(RequestOptions requestOptions)"
  summary: "Get all supported resource types for App Components(Azure resource types)."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> listSupportedResourceTypeWithResponse(RequestOptions requestOptions)"
  desc: "Get all supported resource types for App Components(Azure resource types).\n\n**Response Body Schema**\n\n```java\n{\n     value (Optional): [\n         String (Optional)\n     ]\n }\n```"
  returns:
    description: "all supported resource types for App Components(Azure resource types) along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestFiles(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.listTestFiles(String testId, RequestOptions requestOptions)"
  name: "listTestFiles(String testId, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.listTestFiles(String testId, RequestOptions requestOptions)"
  summary: "List all test files."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listTestFiles(String testId, RequestOptions requestOptions)"
  desc: "List all test files.\n\n**Query Parameters**\n\n    | ----------------- | ------ | -------- | ---------------------------------------------------- |\n    | Name              | Type   | Required | Description                                          |\n    | continuationToken | String | No       | Continuation token to get the next page of response. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             url: String (Optional)\n             fileId: String (Optional)\n             filename: String (Optional)\n             fileType: String(0/1/2) (Optional)\n             expireTime: OffsetDateTime (Optional)\n             validationStatus: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "all test files as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.uploadTestFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.developer.loadtesting.LoadTestAdministrationAsyncClient.uploadTestFileWithResponse(String testId, String fileId, String fileName, BinaryData file, RequestOptions requestOptions)"
  name: "uploadTestFileWithResponse(String testId, String fileId, String fileName, BinaryData file, RequestOptions requestOptions)"
  nameWithType: "LoadTestAdministrationAsyncClient.uploadTestFileWithResponse(String testId, String fileId, String fileName, BinaryData file, RequestOptions requestOptions)"
  summary: "Upload input file for a given test name."
  parameters:
  - description: "Unique name for load test, must be a valid URL character ^[a-z0-9_-]*$."
    name: "testId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Unique identifier for test file, must be a valid URL character ^[a-z0-9_-]*$."
    name: "fileId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Name of test file, must be a valid URL character ^[a-z0-9_-]*$."
    name: "fileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The file to be uploaded."
    name: "file"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> uploadTestFileWithResponse(String testId, String fileId, String fileName, BinaryData file, RequestOptions requestOptions)"
  exceptions:
  - description: "thrown if the request is rejected by server."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  desc: "Upload input file for a given test name. File size can't be more than 50 MB. Existing file with same name for the given test will be overwritten. File should be provided in the request body as multipart/form-data.\n\n**Query Parameters**\n\n    | -------- | ------- | -------- | --------------------------------------------------------------------------------------------------------- |\n    | Name     | Type    | Required | Description                                                                                               |\n    | fileType | Integer | No       | Integer representation of the file type (0 = JMX\\_FILE, 1 = USER\\_PROPERTIES, 2 = ADDITIONAL\\_ARTIFACTS). |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Request Body Schema**\n\n```java\nBinaryData\n```\n\n**Response Body Schema**\n\n```java\n{\n     url: String (Optional)\n     fileId: String (Optional)\n     filename: String (Optional)\n     fileType: String(0/1/2) (Optional)\n     expireTime: OffsetDateTime (Optional)\n     validationStatus: String (Optional)\n }\n```"
  returns:
    description: "fileUrl Model along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous LoadTestingClient type."
metadata: {}
package: "com.azure.developer.loadtesting"
artifact: com.azure:azure-developer-loadtesting:1.0.0-beta.1
