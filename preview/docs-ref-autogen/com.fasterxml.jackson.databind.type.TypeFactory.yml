### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.type.TypeFactory
  id: TypeFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type
  children:
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_BOOL
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_CLASS
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_COMPARABLE
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_ENUM
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_INT
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_JSON_NODE
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_LONG
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_OBJECT
  - com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING
  - com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS
  - com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>)
  - com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>,com.fasterxml.jackson.databind.type.TypeParser,com.fasterxml.jackson.databind.type.TypeModifier[],java.lang.ClassLoader)
  - com.fasterxml.jackson.databind.type.TypeFactory._applyModifiers(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory._classLoader
  - com.fasterxml.jackson.databind.type.TypeFactory._constructSimple(java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  - com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive(java.lang.String)
  - com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory._fromAny(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._fromClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  - com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  - com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._modifiers
  - com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType(java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  - com.fasterxml.jackson.databind.type.TypeFactory._parser
  - com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory._typeCache
  - com.fasterxml.jackson.databind.type.TypeFactory._unknownType()
  - com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String)
  - com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String,boolean,java.lang.ClassLoader)
  - com.fasterxml.jackson.databind.type.TypeFactory.clearCache()
  - com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class<? extends java.util.Collection>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class<? extends java.util.Collection>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(java.lang.String)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class<? extends java.util.Map>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class<? extends java.util.Map>,java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType...)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class<?>,java.lang.Class<?>...)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType...)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>...)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(java.lang.Class<? extends java.util.Collection>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(java.lang.Class<? extends java.util.Map>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType[])
  - com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType[])
  - com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>,boolean)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructType(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()
  - com.fasterxml.jackson.databind.type.TypeFactory.findClass(java.lang.String)
  - com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class<?>,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  - com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader()
  - com.fasterxml.jackson.databind.type.TypeFactory.instance
  - com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.type.TypeFactory.rawClass(java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.type.TypeFactory.unknownType()
  - com.fasterxml.jackson.databind.type.TypeFactory.withCache(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>)
  - com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader(java.lang.ClassLoader)
  - com.fasterxml.jackson.databind.type.TypeFactory.withModifier(com.fasterxml.jackson.databind.type.TypeModifier)
  langs:
  - java
  name: TypeFactory
  nameWithType: TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory
  type: Class
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Class used for creating concrete <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> instances, given various inputs.


    Instances of this class are accessible using <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ObjectMapper</xref> as well as many objects it constructs (like <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.DeserializationConfig</xref> and <xref uid="com.fasterxml.jackson.databind.SerializationConfig" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.SerializationConfig</xref>)), but usually those objects also expose convenience methods (`constructType`). So, you can do for example:


    ```java

    JavaType stringType = mapper.constructType(String.class);

    ```


    However, more advanced methods are only exposed by factory so that you may need to use:


    ```java

    JavaType stringCollection = mapper.getTypeFactory().constructCollectionType(List.class, String.class);

    ```
  syntax:
    content: public class TypeFactory implements Serializable
  inheritance:
  - java.lang.Object
  implements:
  - java.io.Serializable
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_BOOL
  id: CORE_TYPE_BOOL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_BOOL
  nameWithType: TypeFactory.CORE_TYPE_BOOL
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_BOOL
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected static final SimpleType CORE_TYPE_BOOL
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_CLASS
  id: CORE_TYPE_CLASS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_CLASS
  nameWithType: TypeFactory.CORE_TYPE_CLASS
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_CLASS
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: Cache <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> because it is nominally parametric, but has no really useful information.
  syntax:
    content: protected static final SimpleType CORE_TYPE_CLASS
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_COMPARABLE
  id: CORE_TYPE_COMPARABLE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_COMPARABLE
  nameWithType: TypeFactory.CORE_TYPE_COMPARABLE
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_COMPARABLE
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: Cache <xref uid="java.lang.Comparable" data-throw-if-not-resolved="false">Comparable</xref> because it is both parameteric (relatively costly to resolve) and mostly useless (no special handling), better handle directly
  syntax:
    content: protected static final SimpleType CORE_TYPE_COMPARABLE
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_ENUM
  id: CORE_TYPE_ENUM
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_ENUM
  nameWithType: TypeFactory.CORE_TYPE_ENUM
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_ENUM
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: Cache <xref uid="java.lang.Enum" data-throw-if-not-resolved="false">Enum</xref> because it is parametric AND self-referential (costly to resolve) and useless in itself (no special handling).
  syntax:
    content: protected static final SimpleType CORE_TYPE_ENUM
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_INT
  id: CORE_TYPE_INT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_INT
  nameWithType: TypeFactory.CORE_TYPE_INT
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_INT
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected static final SimpleType CORE_TYPE_INT
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_JSON_NODE
  id: CORE_TYPE_JSON_NODE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_JSON_NODE
  nameWithType: TypeFactory.CORE_TYPE_JSON_NODE
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_JSON_NODE
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: Cache <xref uid="com.fasterxml.jackson.databind.JsonNode" data-throw-if-not-resolved="false">JsonNode</xref> because it is no critical path of simple tree model reading and does not have things to override
  syntax:
    content: protected static final SimpleType CORE_TYPE_JSON_NODE
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_LONG
  id: CORE_TYPE_LONG
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_LONG
  nameWithType: TypeFactory.CORE_TYPE_LONG
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_LONG
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected static final SimpleType CORE_TYPE_LONG
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_OBJECT
  id: CORE_TYPE_OBJECT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_OBJECT
  nameWithType: TypeFactory.CORE_TYPE_OBJECT
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_OBJECT
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected static final SimpleType CORE_TYPE_OBJECT
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING
  id: CORE_TYPE_STRING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: CORE_TYPE_STRING
  nameWithType: TypeFactory.CORE_TYPE_STRING
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.CORE_TYPE_STRING
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected static final SimpleType CORE_TYPE_STRING
    return:
      type: com.fasterxml.jackson.databind.type.SimpleType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS
  id: EMPTY_BINDINGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: EMPTY_BINDINGS
  nameWithType: TypeFactory.EMPTY_BINDINGS
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.EMPTY_BINDINGS
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected static final TypeBindings EMPTY_BINDINGS
    return:
      type: com.fasterxml.jackson.databind.type.TypeBindings
- uid: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory()
  id: TypeFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: TypeFactory()
  nameWithType: TypeFactory.TypeFactory()
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory()
  overload: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: private TypeFactory()
- uid: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>)
  id: TypeFactory(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: TypeFactory(LRUMap<Object,JavaType> typeCache)
  nameWithType: TypeFactory.TypeFactory(LRUMap<Object,JavaType> typeCache)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(LRUMap<Object,JavaType> typeCache)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected TypeFactory(LRUMap<Object,JavaType> typeCache)
    parameters:
    - id: typeCache
      type: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>
- uid: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>,com.fasterxml.jackson.databind.type.TypeParser,com.fasterxml.jackson.databind.type.TypeModifier[],java.lang.ClassLoader)
  id: TypeFactory(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>,com.fasterxml.jackson.databind.type.TypeParser,com.fasterxml.jackson.databind.type.TypeModifier[],java.lang.ClassLoader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p, TypeModifier[] mods, ClassLoader classLoader)
  nameWithType: TypeFactory.TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p, TypeModifier[] mods, ClassLoader classLoader)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p, TypeModifier[] mods, ClassLoader classLoader)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory*
  type: Constructor
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected TypeFactory(LRUMap<Object,JavaType> typeCache, TypeParser p, TypeModifier[] mods, ClassLoader classLoader)
    parameters:
    - id: typeCache
      type: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>
    - id: p
      type: com.fasterxml.jackson.databind.type.TypeParser
    - id: mods
      type: com.fasterxml.jackson.databind.type.TypeModifier[]
    - id: classLoader
      type: java.lang.ClassLoader
- uid: com.fasterxml.jackson.databind.type.TypeFactory._applyModifiers(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)
  id: _applyModifiers(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _applyModifiers(Type srcType, JavaType resolvedType)
  nameWithType: TypeFactory._applyModifiers(Type srcType, JavaType resolvedType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._applyModifiers(Type srcType, JavaType resolvedType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._applyModifiers*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _applyModifiers(Type srcType, JavaType resolvedType)
    parameters:
    - id: srcType
      type: java.lang.reflect.Type
    - id: resolvedType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._classLoader
  id: _classLoader
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _classLoader
  nameWithType: TypeFactory._classLoader
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._classLoader
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: ClassLoader used by this factory \[databind\#624\].
  syntax:
    content: protected final ClassLoader _classLoader
    return:
      type: java.lang.ClassLoader
- uid: com.fasterxml.jackson.databind.type.TypeFactory._constructSimple(java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  id: _constructSimple(java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _constructSimple(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  nameWithType: TypeFactory._constructSimple(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._constructSimple(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._constructSimple*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Factory method to call when no special <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> is needed, no generic parameters are passed. Default implementation may check pre-constructed values for "well-known" types, but if none found will simply call <xref uid="com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType*" data-throw-if-not-resolved="false">#_newSimpleType</xref>
  syntax:
    content: protected JavaType _constructSimple(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
    parameters:
    - id: raw
      type: java.lang.Class<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    - id: superClass
      type: com.fasterxml.jackson.databind.JavaType
    - id: superInterfaces
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive(java.lang.String)
  id: _findPrimitive(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _findPrimitive(String className)
  nameWithType: TypeFactory._findPrimitive(String className)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive(String className)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected Class<?> _findPrimitive(String className)
    parameters:
    - id: className
      type: java.lang.String
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple(java.lang.Class<?>)
  id: _findWellKnownSimple(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _findWellKnownSimple(Class<?> clz)
  nameWithType: TypeFactory._findWellKnownSimple(Class<?> clz)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple(Class<?> clz)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Helper method called to see if requested, non-generic-parameterized type is one of common, "well-known" types, instances of which are pre-constructed and do not need dynamic caching.
  syntax:
    content: protected JavaType _findWellKnownSimple(Class<?> clz)
    parameters:
    - id: clz
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromAny(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _fromAny(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromAny(ClassStack context, Type srcType, TypeBindings bindings)
  nameWithType: TypeFactory._fromAny(ClassStack context, Type srcType, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromAny(ClassStack context, Type srcType, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromAny*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Factory method that can be used if type information is passed as Java typing returned from `getGenericXxx` methods (usually for a return or argument type).
  syntax:
    content: protected JavaType _fromAny(ClassStack context, Type srcType, TypeBindings bindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: srcType
      type: java.lang.reflect.Type
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _fromArrayType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.GenericArrayType,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)
  nameWithType: TypeFactory._fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _fromArrayType(ClassStack context, GenericArrayType type, TypeBindings bindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: type
      type: java.lang.reflect.GenericArrayType
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _fromClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)
  nameWithType: TypeFactory._fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromClass*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _fromClass(ClassStack context, Class<?> rawType, TypeBindings bindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: rawType
      type: java.lang.Class<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
      description: >-
        Mapping of formal parameter declarations (for generic
           types) into actual types
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _fromParamType(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.ParameterizedType,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings)
  nameWithType: TypeFactory._fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromParamType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: This method deals with parameterized types, that is, first class generic classes.
  syntax:
    content: protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: ptype
      type: java.lang.reflect.ParameterizedType
    - id: parentBindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _fromVariable(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.TypeVariable<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)
  nameWithType: TypeFactory._fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromVariable*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _fromVariable(ClassStack context, TypeVariable<?> var, TypeBindings bindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: var
      type: java.lang.reflect.TypeVariable<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  id: _fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  nameWithType: TypeFactory._fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Helper class used to check whether exact class for which type is being constructed is one of well-known base interfaces or classes that indicates alternate <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> implementation.
  syntax:
    content: protected JavaType _fromWellKnownClass(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: rawType
      type: java.lang.Class<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    - id: superClass
      type: com.fasterxml.jackson.databind.JavaType
    - id: superInterfaces
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  id: _fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  nameWithType: TypeFactory._fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _fromWellKnownInterface(ClassStack context, Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: rawType
      type: java.lang.Class<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    - id: superClass
      type: com.fasterxml.jackson.databind.JavaType
    - id: superInterfaces
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _fromWildcard(com.fasterxml.jackson.databind.type.ClassStack,java.lang.reflect.WildcardType,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)
  nameWithType: TypeFactory._fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _fromWildcard(ClassStack context, WildcardType type, TypeBindings bindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: type
      type: java.lang.reflect.WildcardType
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._modifiers
  id: _modifiers
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _modifiers
  nameWithType: TypeFactory._modifiers
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._modifiers
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: 'Registered <xref uid="com.fasterxml.jackson.databind.type.TypeModifier" data-throw-if-not-resolved="false">TypeModifier</xref>s: objects that can change details of <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> instances factory constructs.'
  syntax:
    content: protected final TypeModifier[] _modifiers
    return:
      type: com.fasterxml.jackson.databind.type.TypeModifier[]
- uid: com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType(java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  id: _newSimpleType(java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _newSimpleType(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  nameWithType: TypeFactory._newSimpleType(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Factory method that is to create a new <xref uid="com.fasterxml.jackson.databind.type.SimpleType" data-throw-if-not-resolved="false">SimpleType</xref> with no checks whatsoever. Default implementation calls the single argument constructor of <xref uid="com.fasterxml.jackson.databind.type.SimpleType" data-throw-if-not-resolved="false">SimpleType</xref>.
  syntax:
    content: protected JavaType _newSimpleType(Class<?> raw, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces)
    parameters:
    - id: raw
      type: java.lang.Class<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    - id: superClass
      type: com.fasterxml.jackson.databind.JavaType
    - id: superInterfaces
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._parser
  id: _parser
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _parser
  nameWithType: TypeFactory._parser
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._parser
  type: Field
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected final TypeParser _parser
    return:
      type: com.fasterxml.jackson.databind.type.TypeParser
- uid: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
  nameWithType: TypeFactory._resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _resolveSuperClass(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: rawType
      type: java.lang.Class<?>
    - id: parentBindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  id: _resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
  nameWithType: TypeFactory._resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType[] _resolveSuperInterfaces(ClassStack context, Class<?> rawType, TypeBindings parentBindings)
    parameters:
    - id: context
      type: com.fasterxml.jackson.databind.type.ClassStack
    - id: rawType
      type: java.lang.Class<?>
    - id: parentBindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType[]
- uid: com.fasterxml.jackson.databind.type.TypeFactory._typeCache
  id: _typeCache
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _typeCache
  nameWithType: TypeFactory._typeCache
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._typeCache
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: Since type resolution can be expensive (specifically when resolving actual generic types), we will use small cache to avoid repetitive resolution of core types
  syntax:
    content: protected final LRUMap<Object,JavaType> _typeCache
    return:
      type: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>
- uid: com.fasterxml.jackson.databind.type.TypeFactory._unknownType()
  id: _unknownType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: _unknownType()
  nameWithType: TypeFactory._unknownType()
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._unknownType()
  overload: com.fasterxml.jackson.databind.type.TypeFactory._unknownType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected JavaType _unknownType()
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String)
  id: classForName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: classForName(String name)
  nameWithType: TypeFactory.classForName(String name)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.classForName(String name)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.classForName*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected Class<?> classForName(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: java.lang.Class<?>
  exceptions:
  - type: java.lang.ClassNotFoundException
- uid: com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String,boolean,java.lang.ClassLoader)
  id: classForName(java.lang.String,boolean,java.lang.ClassLoader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: classForName(String name, boolean initialize, ClassLoader loader)
  nameWithType: TypeFactory.classForName(String name, boolean initialize, ClassLoader loader)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.classForName(String name, boolean initialize, ClassLoader loader)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.classForName*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: protected Class<?> classForName(String name, boolean initialize, ClassLoader loader)
    parameters:
    - id: name
      type: java.lang.String
    - id: initialize
      type: boolean
    - id: loader
      type: java.lang.ClassLoader
    return:
      type: java.lang.Class<?>
  exceptions:
  - type: java.lang.ClassNotFoundException
- uid: com.fasterxml.jackson.databind.type.TypeFactory.clearCache()
  id: clearCache()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: clearCache()
  nameWithType: TypeFactory.clearCache()
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.clearCache()
  overload: com.fasterxml.jackson.databind.type.TypeFactory.clearCache*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method that will clear up any cached type definitions that may be cached by this <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref> instance. This method should not be commonly used, that is, only use it if you know there is a problem with retention of type definitions; the most likely (and currently only known) problem is retention of <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> instances via <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> reference.
  syntax:
    content: public void clearCache()
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(com.fasterxml.jackson.databind.JavaType)
  id: constructArrayType(com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructArrayType(JavaType elementType)
  nameWithType: TypeFactory.constructArrayType(JavaType elementType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(JavaType elementType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing an <xref uid="com.fasterxml.jackson.databind.type.ArrayType" data-throw-if-not-resolved="false">ArrayType</xref>.


    NOTE: type modifiers are NOT called on array type itself; but are called for contained types.
  syntax:
    content: public ArrayType constructArrayType(JavaType elementType)
    parameters:
    - id: elementType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.type.ArrayType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(java.lang.Class<?>)
  id: constructArrayType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructArrayType(Class<?> elementType)
  nameWithType: TypeFactory.constructArrayType(Class<?> elementType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(Class<?> elementType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing an <xref uid="com.fasterxml.jackson.databind.type.ArrayType" data-throw-if-not-resolved="false">ArrayType</xref>.


    NOTE: type modifiers are NOT called on array type itself; but are called for element type (and other contained types)
  syntax:
    content: public ArrayType constructArrayType(Class<?> elementType)
    parameters:
    - id: elementType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.ArrayType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType)
  id: constructCollectionLikeType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)
  nameWithType: TypeFactory.constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.CollectionLikeType" data-throw-if-not-resolved="false">CollectionLikeType</xref>.


    NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.
  syntax:
    content: public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)
    parameters:
    - id: collectionClass
      type: java.lang.Class<?>
    - id: elementType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.type.CollectionLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class<?>,java.lang.Class<?>)
  id: constructCollectionLikeType(java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)
  nameWithType: TypeFactory.constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.CollectionLikeType" data-throw-if-not-resolved="false">CollectionLikeType</xref>.


    NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.
  syntax:
    content: public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, Class<?> elementClass)
    parameters:
    - id: collectionClass
      type: java.lang.Class<?>
    - id: elementClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.CollectionLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class<? extends java.util.Collection>,com.fasterxml.jackson.databind.JavaType)
  id: constructCollectionType(java.lang.Class<? extends java.util.Collection>,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)
  nameWithType: TypeFactory.constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.CollectionType" data-throw-if-not-resolved="false">CollectionType</xref>.


    NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.
  syntax:
    content: public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, JavaType elementType)
    parameters:
    - id: collectionClass
      type: java.lang.Class<? extends java.util.Collection>
    - id: elementType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.type.CollectionType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class<? extends java.util.Collection>,java.lang.Class<?>)
  id: constructCollectionType(java.lang.Class<? extends java.util.Collection>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)
  nameWithType: TypeFactory.constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.CollectionType" data-throw-if-not-resolved="false">CollectionType</xref>.


    NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.
  syntax:
    content: public CollectionType constructCollectionType(Class<? extends Collection> collectionClass, Class<?> elementClass)
    parameters:
    - id: collectionClass
      type: java.lang.Class<? extends java.util.Collection>
    - id: elementClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.CollectionType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(java.lang.String)
  id: constructFromCanonical(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructFromCanonical(String canonical)
  nameWithType: TypeFactory.constructFromCanonical(String canonical)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(String canonical)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Factory method for constructing a <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> out of its canonical representation (see <xref uid="com.fasterxml.jackson.databind.JavaType.toCanonical*" data-throw-if-not-resolved="false">JavaType#toCanonical()</xref>).
  syntax:
    content: public JavaType constructFromCanonical(String canonical)
    parameters:
    - id: canonical
      type: java.lang.String
      description: Canonical string representation of a type
    return:
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.lang.IllegalArgumentException
    description: >-
      If canonical representation is malformed,
         or class that type represents (including its generic parameters) is
         not found
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: constructGeneralizedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructGeneralizedType(JavaType baseType, Class<?> superClass)
  nameWithType: TypeFactory.constructGeneralizedType(JavaType baseType, Class<?> superClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(JavaType baseType, Class<?> superClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method similar to <xref uid="com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType*" data-throw-if-not-resolved="false">#constructSpecializedType</xref>, but that creates a less-specific type of given type. Usually this is as simple as simply finding super-type with type erasure of `superClass`, but there may be need for some additional work-arounds.
  syntax:
    content: public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: superClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  id: constructMapLikeType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)
  nameWithType: TypeFactory.constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.MapLikeType" data-throw-if-not-resolved="false">MapLikeType</xref> instance


    NOTE: type modifiers are NOT called on constructed type itself.
  syntax:
    content: public MapLikeType constructMapLikeType(Class<?> mapClass, JavaType keyType, JavaType valueType)
    parameters:
    - id: mapClass
      type: java.lang.Class<?>
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.type.MapLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>)
  id: constructMapLikeType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)
  nameWithType: TypeFactory.constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.MapLikeType" data-throw-if-not-resolved="false">MapLikeType</xref> instance


    NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.
  syntax:
    content: public MapLikeType constructMapLikeType(Class<?> mapClass, Class<?> keyClass, Class<?> valueClass)
    parameters:
    - id: mapClass
      type: java.lang.Class<?>
    - id: keyClass
      type: java.lang.Class<?>
    - id: valueClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.MapLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class<? extends java.util.Map>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  id: constructMapType(java.lang.Class<? extends java.util.Map>,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)
  nameWithType: TypeFactory.constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.MapType" data-throw-if-not-resolved="false">MapType</xref> instance


    NOTE: type modifiers are NOT called on constructed type itself.
  syntax:
    content: public MapType constructMapType(Class<? extends Map> mapClass, JavaType keyType, JavaType valueType)
    parameters:
    - id: mapClass
      type: java.lang.Class<? extends java.util.Map>
    - id: keyType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.type.MapType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class<? extends java.util.Map>,java.lang.Class<?>,java.lang.Class<?>)
  id: constructMapType(java.lang.Class<? extends java.util.Map>,java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)
  nameWithType: TypeFactory.constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.MapType" data-throw-if-not-resolved="false">MapType</xref> instance


    NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.
  syntax:
    content: public MapType constructMapType(Class<? extends Map> mapClass, Class<?> keyClass, Class<?> valueClass)
    parameters:
    - id: mapClass
      type: java.lang.Class<? extends java.util.Map>
    - id: keyClass
      type: java.lang.Class<?>
    - id: valueClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.MapType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType...)
  id: constructParametricType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructParametricType(Class<?> rawType, JavaType[] parameterTypes)
  nameWithType: TypeFactory.constructParametricType(Class<?> rawType, JavaType[] parameterTypes)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(Class<?> rawType, JavaType[] parameterTypes)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> that represents a parameterized type. For example, to represent type `List>`, you could


    ```java

    JavaType inner = TypeFactory.constructParametricType(Set.class, Set.class, Integer.class);
      return TypeFactory.constructParametricType(ArrayList.class, List.class, inner);
    ```


    The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for `ArrayList`, the usual call would be:


    ```java

    TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class);

    ```


    since parameterization is applied to <xref uid="java.util.List" data-throw-if-not-resolved="false">java.util.List</xref>. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement <xref uid="java.util.Iterator" data-throw-if-not-resolved="false">java.util.Iterator</xref>.


    NOTE: since 2.11.2 <xref uid="com.fasterxml.jackson.databind.type.TypeModifier" data-throw-if-not-resolved="false">TypeModifier</xref>s ARE called on result (fix for \[databind\#2796\])
  syntax:
    content: public JavaType constructParametricType(Class<?> rawType, JavaType[] parameterTypes)
    parameters:
    - id: rawType
      type: java.lang.Class<?>
      description: Actual type-erased type
    - id: parameterTypes
      type: com.fasterxml.jackson.databind.JavaType[]
      description: Type parameters to apply
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: Fully resolved type for given base type and type parameters
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class<?>,java.lang.Class<?>...)
  id: constructParametricType(java.lang.Class<?>,java.lang.Class<?>...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructParametricType(Class<?> parametrized, Class<?>[] parameterClasses)
  nameWithType: TypeFactory.constructParametricType(Class<?> parametrized, Class<?>[] parameterClasses)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(Class<?> parametrized, Class<?>[] parameterClasses)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Factory method for constructing <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> that represents a parameterized type. For example, to represent type `List>`, you could call


    ```java

    JavaType inner = TypeFactory.constructParametricType(Set.class, Set.class, Integer.class);
      return TypeFactory.constructParametricType(ArrayList.class, List.class, inner);
    ```


    The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for `ArrayList`, the usual call would be:


    ```java

    TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class);

    ```


    since parameterization is applied to <xref uid="java.util.List" data-throw-if-not-resolved="false">java.util.List</xref>. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement <xref uid="java.util.Iterator" data-throw-if-not-resolved="false">java.util.Iterator</xref>.


    NOTE: type modifiers are NOT called on constructed type.
  syntax:
    content: public JavaType constructParametricType(Class<?> parametrized, Class<?>[] parameterClasses)
    parameters:
    - id: parametrized
      type: java.lang.Class<?>
      description: Actual full type
    - id: parameterClasses
      type: java.lang.Class<?>[]
      description: Type parameters to apply
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType...)
  id: constructParametrizedType(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, JavaType[] parameterTypes)
  nameWithType: TypeFactory.constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, JavaType[] parameterTypes)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, JavaType[] parameterTypes)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, JavaType[] parameterTypes)
    parameters:
    - id: parametrized
      type: java.lang.Class<?>
    - id: parametersFor
      type: java.lang.Class<?>
    - id: parameterTypes
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>...)
  id: constructParametrizedType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>...)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, Class<?>[] parameterClasses)
  nameWithType: TypeFactory.constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, Class<?>[] parameterClasses)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, Class<?>[] parameterClasses)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructParametrizedType(Class<?> parametrized, Class<?> parametersFor, Class<?>[] parameterClasses)
    parameters:
    - id: parametrized
      type: java.lang.Class<?>
    - id: parametersFor
      type: java.lang.Class<?>
    - id: parameterClasses
      type: java.lang.Class<?>[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(java.lang.Class<?>)
  id: constructRawCollectionLikeType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructRawCollectionLikeType(Class<?> collectionClass)
  nameWithType: TypeFactory.constructRawCollectionLikeType(Class<?> collectionClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(Class<?> collectionClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method that can be used to construct "raw" Collection-like type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:


    ```java

    typeFactory.constructCollectionLikeType(collectionClass, typeFactory.unknownType());

    ```


    This method should only be used if parameterization is completely unavailable.
  syntax:
    content: public CollectionLikeType constructRawCollectionLikeType(Class<?> collectionClass)
    parameters:
    - id: collectionClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.CollectionLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(java.lang.Class<? extends java.util.Collection>)
  id: constructRawCollectionType(java.lang.Class<? extends java.util.Collection>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructRawCollectionType(Class<? extends Collection> collectionClass)
  nameWithType: TypeFactory.constructRawCollectionType(Class<? extends Collection> collectionClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(Class<? extends Collection> collectionClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method that can be used to construct "raw" Collection type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:


    ```java

    typeFactory.constructCollectionType(collectionClass, typeFactory.unknownType());

    ```


    This method should only be used if parameterization is completely unavailable.
  syntax:
    content: public CollectionType constructRawCollectionType(Class<? extends Collection> collectionClass)
    parameters:
    - id: collectionClass
      type: java.lang.Class<? extends java.util.Collection>
    return:
      type: com.fasterxml.jackson.databind.type.CollectionType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(java.lang.Class<?>)
  id: constructRawMapLikeType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructRawMapLikeType(Class<?> mapClass)
  nameWithType: TypeFactory.constructRawMapLikeType(Class<?> mapClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(Class<?> mapClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method that can be used to construct "raw" Map-like type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:


    ```java

    typeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());

    ```


    This method should only be used if parameterization is completely unavailable.
  syntax:
    content: public MapLikeType constructRawMapLikeType(Class<?> mapClass)
    parameters:
    - id: mapClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.type.MapLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(java.lang.Class<? extends java.util.Map>)
  id: constructRawMapType(java.lang.Class<? extends java.util.Map>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructRawMapType(Class<? extends Map> mapClass)
  nameWithType: TypeFactory.constructRawMapType(Class<? extends Map> mapClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(Class<? extends Map> mapClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method that can be used to construct "raw" Map type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:


    ```java

    typeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());

    ```


    This method should only be used if parameterization is completely unavailable.
  syntax:
    content: public MapType constructRawMapType(Class<? extends Map> mapClass)
    parameters:
    - id: mapClass
      type: java.lang.Class<? extends java.util.Map>
    return:
      type: com.fasterxml.jackson.databind.type.MapType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType)
  id: constructReferenceType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructReferenceType(Class<?> rawType, JavaType referredType)
  nameWithType: TypeFactory.constructReferenceType(Class<?> rawType, JavaType referredType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType(Class<?> rawType, JavaType referredType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a <xref uid="com.fasterxml.jackson.databind.type.ReferenceType" data-throw-if-not-resolved="false">ReferenceType</xref> instance with given type parameter (type MUST take one and only one type parameter)


    NOTE: type modifiers are NOT called on constructed type itself.
  syntax:
    content: public JavaType constructReferenceType(Class<?> rawType, JavaType referredType)
    parameters:
    - id: rawType
      type: java.lang.Class<?>
    - id: referredType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType[])
  id: constructSimpleType(java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)
  nameWithType: TypeFactory.constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method for constructing a type instance with specified parameterization.


    NOTE: type modifiers are NOT called on constructed type itself.
  syntax:
    content: public JavaType constructSimpleType(Class<?> rawType, JavaType[] parameterTypes)
    parameters:
    - id: rawType
      type: java.lang.Class<?>
    - id: parameterTypes
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType[])
  id: constructSimpleType(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.JavaType[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructSimpleType(Class<?> rawType, Class<?> parameterTarget, JavaType[] parameterTypes)
  nameWithType: TypeFactory.constructSimpleType(Class<?> rawType, Class<?> parameterTarget, JavaType[] parameterTypes)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(Class<?> rawType, Class<?> parameterTarget, JavaType[] parameterTypes)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method for constructing a type instance with specified parameterization.
  syntax:
    content: public JavaType constructSimpleType(Class<?> rawType, Class<?> parameterTarget, JavaType[] parameterTypes)
    parameters:
    - id: rawType
      type: java.lang.Class<?>
    - id: parameterTarget
      type: java.lang.Class<?>
    - id: parameterTypes
      type: com.fasterxml.jackson.databind.JavaType[]
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructSpecializedType(JavaType baseType, Class<?> subclass)
  nameWithType: TypeFactory.constructSpecializedType(JavaType baseType, Class<?> subclass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(JavaType baseType, Class<?> subclass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Factory method for creating a subtype of given base type, as defined by specified subclass; but retaining generic type information if any. Can be used, for example, to get equivalent of "HashMap<String,Integer>" from "Map<String,Integer>" by giving `HashMap.class` as subclass. Short-cut for:


    ```java

    constructSpecializedType(baseType, subclass, class);

    ```


    that is, will use "strict" compatibility checking, usually used for deserialization purposes (but often not for serialization).
  syntax:
    content: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    - id: subclass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>,boolean)
  id: constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructSpecializedType(JavaType baseType, Class<?> subclass, boolean relaxedCompatibilityCheck)
  nameWithType: TypeFactory.constructSpecializedType(JavaType baseType, Class<?> subclass, boolean relaxedCompatibilityCheck)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(JavaType baseType, Class<?> subclass, boolean relaxedCompatibilityCheck)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Factory method for creating a subtype of given base type, as defined by specified subclass; but retaining generic type information if any. Can be used, for example, to get equivalent of "HashMap<String,Integer>" from "Map<String,Integer>" by giving `HashMap.class` as subclass.
  syntax:
    content: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass, boolean relaxedCompatibilityCheck)
    parameters:
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Declared base type with resolved type parameters
    - id: subclass
      type: java.lang.Class<?>
      description: Runtime subtype to use for resolving
    - id: relaxedCompatibilityCheck
      type: boolean
      description: >-
        Whether checking for type-assignment compatibility
            should be "relaxed" (<code>true</code>) or "strict" (<code>false</code>): typically
            serialization uses relaxed, deserialization strict checking.
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: Resolved sub-type
  exceptions:
  - type: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructType(com.fasterxml.jackson.core.type.TypeReference<?>)
  id: constructType(com.fasterxml.jackson.core.type.TypeReference<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructType(TypeReference<?> typeRef)
  nameWithType: TypeFactory.constructType(TypeReference<?> typeRef)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructType(TypeReference<?> typeRef)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructType(TypeReference<?> typeRef)
    parameters:
    - id: typeRef
      type: com.fasterxml.jackson.core.type.TypeReference<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)
  id: constructType(java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructType(Type type)
  nameWithType: TypeFactory.constructType(Type type)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Type type)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructType(Type type)
    parameters:
    - id: type
      type: java.lang.reflect.Type
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)
  id: constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructType(Type type, JavaType contextType)
  nameWithType: TypeFactory.constructType(Type type, JavaType contextType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Type type, JavaType contextType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructType(Type type, JavaType contextType)
    parameters:
    - id: type
      type: java.lang.reflect.Type
    - id: contextType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)
  id: constructType(java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructType(Type type, TypeBindings bindings)
  nameWithType: TypeFactory.constructType(Type type, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Type type, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructType(Type type, TypeBindings bindings)
    parameters:
    - id: type
      type: java.lang.reflect.Type
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type,java.lang.Class<?>)
  id: constructType(java.lang.reflect.Type,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: constructType(Type type, Class<?> contextClass)
  nameWithType: TypeFactory.constructType(Type type, Class<?> contextClass)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructType(Type type, Class<?> contextClass)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.constructType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType constructType(Type type, Class<?> contextClass)
    parameters:
    - id: type
      type: java.lang.reflect.Type
    - id: contextClass
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()
  id: defaultInstance()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: defaultInstance()
  nameWithType: TypeFactory.defaultInstance()
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()
  overload: com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method used to access the globally shared instance, which has no custom configuration. Used by `ObjectMapper` to get the default factory when constructed.
  syntax:
    content: public static TypeFactory defaultInstance()
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.type.TypeFactory.findClass(java.lang.String)
  id: findClass(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: findClass(String className)
  nameWithType: TypeFactory.findClass(String className)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.findClass(String className)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.findClass*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Low-level lookup method moved from <xref uid="com.fasterxml.jackson.databind.util.ClassUtil" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.util.ClassUtil</xref>, to allow for overriding of lookup functionality in environments like OSGi.
  syntax:
    content: public Class<?> findClass(String className)
    parameters:
    - id: className
      type: java.lang.String
    return:
      type: java.lang.Class<?>
  exceptions:
  - type: java.lang.ClassNotFoundException
- uid: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  id: findTypeParameters(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: findTypeParameters(JavaType type, Class<?> expType)
  nameWithType: TypeFactory.findTypeParameters(JavaType type, Class<?> expType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(JavaType type, Class<?> expType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method that is to figure out actual type parameters that given class binds to generic types defined by given (generic) interface or class. This could mean, for example, trying to figure out key and value types for Map implementations.
  syntax:
    content: public JavaType[] findTypeParameters(JavaType type, Class<?> expType)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Sub-type (leaf type) that implements <code>expType</code>
    - id: expType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType[]
- uid: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class<?>,java.lang.Class<?>)
  id: findTypeParameters(java.lang.Class<?>,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: findTypeParameters(Class<?> clz, Class<?> expType)
  nameWithType: TypeFactory.findTypeParameters(Class<?> clz, Class<?> expType)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(Class<?> clz, Class<?> expType)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType)
    parameters:
    - id: clz
      type: java.lang.Class<?>
    - id: expType
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType[]
- uid: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  id: findTypeParameters(java.lang.Class<?>,java.lang.Class<?>,com.fasterxml.jackson.databind.type.TypeBindings)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)
  nameWithType: TypeFactory.findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)
    parameters:
    - id: clz
      type: java.lang.Class<?>
    - id: expType
      type: java.lang.Class<?>
    - id: bindings
      type: com.fasterxml.jackson.databind.type.TypeBindings
    return:
      type: com.fasterxml.jackson.databind.JavaType[]
- uid: com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader()
  id: getClassLoader()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: getClassLoader()
  nameWithType: TypeFactory.getClassLoader()
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader()
  overload: com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader*
  type: Method
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public ClassLoader getClassLoader()
    return:
      type: java.lang.ClassLoader
- uid: com.fasterxml.jackson.databind.type.TypeFactory.instance
  id: instance
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: instance
  nameWithType: TypeFactory.instance
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.instance
  type: Field
  package: com.fasterxml.jackson.databind.type
  summary: Globally shared singleton. Not accessed directly; non-core code should use per-ObjectMapper instance (via configuration objects). Core Jackson code uses <xref uid="com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance*" data-throw-if-not-resolved="false">#defaultInstance</xref> for accessing it.
  syntax:
    content: protected static final TypeFactory instance
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  id: moreSpecificType(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: moreSpecificType(JavaType type1, JavaType type2)
  nameWithType: TypeFactory.moreSpecificType(JavaType type1, JavaType type2)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType(JavaType type1, JavaType type2)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method that can be called to figure out more specific of two types (if they are related; that is, one implements or extends the other); or if not related, return the primary type.
  syntax:
    content: public JavaType moreSpecificType(JavaType type1, JavaType type2)
    parameters:
    - id: type1
      type: com.fasterxml.jackson.databind.JavaType
      description: Primary type to consider
    - id: type2
      type: com.fasterxml.jackson.databind.JavaType
      description: Secondary type to consider
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.rawClass(java.lang.reflect.Type)
  id: rawClass(java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: rawClass(Type t)
  nameWithType: TypeFactory.rawClass(Type t)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.rawClass(Type t)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.rawClass*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Static helper method that can be called to figure out type-erased call for given JDK type. It can be called statically since type resolution process can never change actual type-erased class; thereby static default instance is used for determination.
  syntax:
    content: public static Class<?> rawClass(Type t)
    parameters:
    - id: t
      type: java.lang.reflect.Type
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(java.lang.Class<?>)
  id: uncheckedSimpleType(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: uncheckedSimpleType(Class<?> cls)
  nameWithType: TypeFactory.uncheckedSimpleType(Class<?> cls)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(Class<?> cls)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: >-
    Method that use by core Databind functionality, and that should NOT be called by application code outside databind package.


    Unchecked here not only means that no checks are made as to whether given class might be non-simple type (like <xref uid="com.fasterxml.jackson.databind.type.CollectionType" data-throw-if-not-resolved="false">CollectionType</xref>) but also that most of supertype information is not gathered. This means that unless called on primitive types or <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>, results are probably not what you want to use.
  syntax:
    content: public JavaType uncheckedSimpleType(Class<?> cls)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.unknownType()
  id: unknownType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: unknownType()
  nameWithType: TypeFactory.unknownType()
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.unknownType()
  overload: com.fasterxml.jackson.databind.type.TypeFactory.unknownType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method for constructing a marker type that indicates missing generic type information, which is handled same as simple type for `java.lang.Object`.
  syntax:
    content: public static JavaType unknownType()
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.withCache(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>)
  id: withCache(com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: withCache(LRUMap<Object,JavaType> cache)
  nameWithType: TypeFactory.withCache(LRUMap<Object,JavaType> cache)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.withCache(LRUMap<Object,JavaType> cache)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.withCache*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Mutant factory method that will construct new <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref> with identical settings except for different cache; most likely one with bigger maximum size.
  syntax:
    content: public TypeFactory withCache(LRUMap<Object,JavaType> cache)
    parameters:
    - id: cache
      type: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader(java.lang.ClassLoader)
  id: withClassLoader(java.lang.ClassLoader)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: withClassLoader(ClassLoader classLoader)
  nameWithType: TypeFactory.withClassLoader(ClassLoader classLoader)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader(ClassLoader classLoader)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: "\"Mutant factory\" method which will construct a new instance with specified <xref uid=\"java.lang.ClassLoader\" data-throw-if-not-resolved=\"false\">ClassLoader</xref> to use by <xref uid=\"com.fasterxml.jackson.databind.type.TypeFactory.findClass*\" data-throw-if-not-resolved=\"false\">#findClass</xref>."
  syntax:
    content: public TypeFactory withClassLoader(ClassLoader classLoader)
    parameters:
    - id: classLoader
      type: java.lang.ClassLoader
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.type.TypeFactory.withModifier(com.fasterxml.jackson.databind.type.TypeModifier)
  id: withModifier(com.fasterxml.jackson.databind.type.TypeModifier)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeFactory
  langs:
  - java
  name: withModifier(TypeModifier mod)
  nameWithType: TypeFactory.withModifier(TypeModifier mod)
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.withModifier(TypeModifier mod)
  overload: com.fasterxml.jackson.databind.type.TypeFactory.withModifier*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: "\"Mutant factory\" method which will construct a new instance with specified <xref uid=\"com.fasterxml.jackson.databind.type.TypeModifier\" data-throw-if-not-resolved=\"false\">TypeModifier</xref> added as the first modifier to call (in case there are multiple registered)."
  syntax:
    content: public TypeFactory withModifier(TypeModifier mod)
    parameters:
    - id: mod
      type: com.fasterxml.jackson.databind.type.TypeModifier
    return:
      type: com.fasterxml.jackson.databind.type.TypeFactory
references:
- uid: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory*
  name: TypeFactory
  nameWithType: TypeFactory.TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.util.LRUMap<java.lang.Object,com.fasterxml.jackson.databind.JavaType>
  spec.java:
  - uid: com.fasterxml.jackson.databind.util.LRUMap
    name: LRUMap
    fullName: com.fasterxml.jackson.databind.util.LRUMap
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.JavaType
    name: JavaType
    fullName: com.fasterxml.jackson.databind.JavaType
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.type.TypeParser
  name: TypeParser
  nameWithType: TypeParser
  fullName: com.fasterxml.jackson.databind.type.TypeParser
- uid: com.fasterxml.jackson.databind.type.TypeModifier[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.type.TypeModifier
    name: TypeModifier
    fullName: com.fasterxml.jackson.databind.type.TypeModifier
  - name: '[]'
    fullName: '[]'
- uid: java.lang.ClassLoader
  spec.java:
  - uid: java.lang.ClassLoader
    name: ClassLoader
    fullName: java.lang.ClassLoader
- uid: com.fasterxml.jackson.databind.type.TypeModifier
  name: TypeModifier
  nameWithType: TypeModifier
  fullName: com.fasterxml.jackson.databind.type.TypeModifier
- uid: com.fasterxml.jackson.databind.type.TypeFactory.withModifier*
  name: withModifier
  nameWithType: TypeFactory.withModifier
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.withModifier
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader*
  name: withClassLoader
  nameWithType: TypeFactory.withClassLoader
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.withCache*
  name: withCache
  nameWithType: TypeFactory.withCache
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.withCache
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance*
  name: defaultInstance
  nameWithType: TypeFactory.defaultInstance
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.clearCache*
  name: clearCache
  nameWithType: TypeFactory.clearCache
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.clearCache
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader*
  name: getClassLoader
  nameWithType: TypeFactory.getClassLoader
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.unknownType*
  name: unknownType
  nameWithType: TypeFactory.unknownType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.unknownType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.type.TypeFactory.rawClass*
  name: rawClass
  nameWithType: TypeFactory.rawClass
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.rawClass
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.ClassNotFoundException
  spec.java:
  - uid: java.lang.ClassNotFoundException
    name: ClassNotFoundException
    fullName: java.lang.ClassNotFoundException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.type.TypeFactory.findClass*
  name: findClass
  nameWithType: TypeFactory.findClass
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.findClass
  package: com.fasterxml.jackson.databind.type
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.type.TypeFactory.classForName*
  name: classForName
  nameWithType: TypeFactory.classForName
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.classForName
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive*
  name: _findPrimitive
  nameWithType: TypeFactory._findPrimitive
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.IllegalArgumentException
  spec.java:
  - uid: java.lang.IllegalArgumentException
    name: IllegalArgumentException
    fullName: java.lang.IllegalArgumentException
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType*
  name: constructSpecializedType
  nameWithType: TypeFactory.constructSpecializedType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType*
  name: constructGeneralizedType
  nameWithType: TypeFactory.constructGeneralizedType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical*
  name: constructFromCanonical
  nameWithType: TypeFactory.constructFromCanonical
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.JavaType[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.JavaType
    name: JavaType
    fullName: com.fasterxml.jackson.databind.JavaType
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters*
  name: findTypeParameters
  nameWithType: TypeFactory.findTypeParameters
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeBindings
  name: TypeBindings
  nameWithType: TypeBindings
  fullName: com.fasterxml.jackson.databind.type.TypeBindings
- uid: com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType*
  name: moreSpecificType
  nameWithType: TypeFactory.moreSpecificType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructType*
  name: constructType
  nameWithType: TypeFactory.constructType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.core.type.TypeReference<?>
  spec.java:
  - uid: com.fasterxml.jackson.core.type.TypeReference
    name: TypeReference
    fullName: com.fasterxml.jackson.core.type.TypeReference
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.type.ArrayType
  name: ArrayType
  nameWithType: ArrayType
  fullName: com.fasterxml.jackson.databind.type.ArrayType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType*
  name: constructArrayType
  nameWithType: TypeFactory.constructArrayType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.Class<? extends java.util.Collection>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends java.util.Collection'
    name: Collection
    fullName: '? extends java.util.Collection'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.type.CollectionType
  name: CollectionType
  nameWithType: CollectionType
  fullName: com.fasterxml.jackson.databind.type.CollectionType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType*
  name: constructCollectionType
  nameWithType: TypeFactory.constructCollectionType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.CollectionLikeType
  name: CollectionLikeType
  nameWithType: CollectionLikeType
  fullName: com.fasterxml.jackson.databind.type.CollectionLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType*
  name: constructCollectionLikeType
  nameWithType: TypeFactory.constructCollectionLikeType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.Class<? extends java.util.Map>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends java.util.Map'
    name: Map
    fullName: '? extends java.util.Map'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.type.MapType
  name: MapType
  nameWithType: MapType
  fullName: com.fasterxml.jackson.databind.type.MapType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType*
  name: constructMapType
  nameWithType: TypeFactory.constructMapType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructMapType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.MapLikeType
  name: MapLikeType
  nameWithType: MapLikeType
  fullName: com.fasterxml.jackson.databind.type.MapLikeType
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType*
  name: constructMapLikeType
  nameWithType: TypeFactory.constructMapLikeType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType*
  name: constructSimpleType
  nameWithType: TypeFactory.constructSimpleType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType*
  name: constructReferenceType
  nameWithType: TypeFactory.constructReferenceType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType*
  name: uncheckedSimpleType
  nameWithType: TypeFactory.uncheckedSimpleType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.Class<?>[]
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType*
  name: constructParametricType
  nameWithType: TypeFactory.constructParametricType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType*
  name: constructParametrizedType
  nameWithType: TypeFactory.constructParametrizedType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType*
  name: constructRawCollectionType
  nameWithType: TypeFactory.constructRawCollectionType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType*
  name: constructRawCollectionLikeType
  nameWithType: TypeFactory.constructRawCollectionLikeType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType*
  name: constructRawMapType
  nameWithType: TypeFactory.constructRawMapType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType*
  name: constructRawMapLikeType
  nameWithType: TypeFactory.constructRawMapLikeType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._constructSimple*
  name: _constructSimple
  nameWithType: TypeFactory._constructSimple
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._constructSimple
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType*
  name: _newSimpleType
  nameWithType: TypeFactory._newSimpleType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._unknownType*
  name: _unknownType
  nameWithType: TypeFactory._unknownType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._unknownType
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple*
  name: _findWellKnownSimple
  nameWithType: TypeFactory._findWellKnownSimple
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.ClassStack
  name: ClassStack
  nameWithType: ClassStack
  fullName: com.fasterxml.jackson.databind.type.ClassStack
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromAny*
  name: _fromAny
  nameWithType: TypeFactory._fromAny
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromAny
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._applyModifiers*
  name: _applyModifiers
  nameWithType: TypeFactory._applyModifiers
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._applyModifiers
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromClass*
  name: _fromClass
  nameWithType: TypeFactory._fromClass
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromClass
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass*
  name: _resolveSuperClass
  nameWithType: TypeFactory._resolveSuperClass
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces*
  name: _resolveSuperInterfaces
  nameWithType: TypeFactory._resolveSuperInterfaces
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass*
  name: _fromWellKnownClass
  nameWithType: TypeFactory._fromWellKnownClass
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface*
  name: _fromWellKnownInterface
  nameWithType: TypeFactory._fromWellKnownInterface
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.reflect.ParameterizedType
  spec.java:
  - uid: java.lang.reflect.ParameterizedType
    name: ParameterizedType
    fullName: java.lang.reflect.ParameterizedType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromParamType*
  name: _fromParamType
  nameWithType: TypeFactory._fromParamType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromParamType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.reflect.GenericArrayType
  spec.java:
  - uid: java.lang.reflect.GenericArrayType
    name: GenericArrayType
    fullName: java.lang.reflect.GenericArrayType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType*
  name: _fromArrayType
  nameWithType: TypeFactory._fromArrayType
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.reflect.TypeVariable<?>
  spec.java:
  - uid: java.lang.reflect.TypeVariable
    name: TypeVariable
    fullName: java.lang.reflect.TypeVariable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromVariable*
  name: _fromVariable
  nameWithType: TypeFactory._fromVariable
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromVariable
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.reflect.WildcardType
  spec.java:
  - uid: java.lang.reflect.WildcardType
    name: WildcardType
    fullName: java.lang.reflect.WildcardType
- uid: com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard*
  name: _fromWildcard
  nameWithType: TypeFactory._fromWildcard
  fullName: com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.type.SimpleType
  name: SimpleType
  nameWithType: SimpleType
  fullName: com.fasterxml.jackson.databind.type.SimpleType
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.util.LRUMap
  name: LRUMap
  nameWithType: LRUMap
  fullName: com.fasterxml.jackson.databind.util.LRUMap
- uid: java.lang.Object,com.fasterxml.jackson.databind.JavaType
  name: Object,JavaType
  nameWithType: Object,JavaType
  fullName: java.lang.Object,com.fasterxml.jackson.databind.JavaType
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.core.type.TypeReference
  name: TypeReference
  nameWithType: TypeReference
  fullName: com.fasterxml.jackson.core.type.TypeReference
- uid: '? extends java.util.Collection'
  name: '? extends Collection'
  nameWithType: '? extends Collection'
  fullName: '? extends java.util.Collection'
- uid: '? extends java.util.Map'
  name: '? extends Map'
  nameWithType: '? extends Map'
  fullName: '? extends java.util.Map'
- uid: ?>[]
  name: ?>[]
  nameWithType: ?>[]
  fullName: ?>[]
- uid: java.lang.reflect.TypeVariable
  name: TypeVariable
  nameWithType: TypeVariable
  fullName: java.lang.reflect.TypeVariable
