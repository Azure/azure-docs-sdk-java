### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.canSerialize*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.canSerialize"
name: "canSerialize"
nameWithType: "ObjectMapper.canSerialize"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(Class<?> type)"
  name: "canSerialize(Class<?> type)"
  nameWithType: "ObjectMapper.canSerialize(Class<?> type)"
  summary: "Method that can be called to check whether mapper thinks it could serialize an instance of given Class. Check is done by checking whether a serializer can be found for the type.\n\nNOTE: since this method does NOT throw exceptions, but internal processing may, caller usually has little information as to why serialization would fail. If you want access to internal <xref uid=\"java.lang.Exception\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Exception\"></xref>, call <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class&lt;?&gt;,java.util.concurrent.atomic.AtomicReference&lt;java.lang.Throwable&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canSerialize(Class, AtomicReference)\"></xref> instead."
  parameters:
  - name: "type"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public boolean canSerialize(Class<?> type)"
  returns:
    description: "True if mapper can find a serializer for instances of\n  given class (potentially serializable), false otherwise (not\n  serializable)"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(Class<?> type, AtomicReference<Throwable> cause)"
  name: "canSerialize(Class<?> type, AtomicReference<Throwable> cause)"
  nameWithType: "ObjectMapper.canSerialize(Class<?> type, AtomicReference<Throwable> cause)"
  summary: "Method similar to <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class&lt;?&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#canSerialize(Class)\"></xref> but that can return actual <xref uid=\"java.lang.Throwable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Throwable\"></xref> that was thrown when trying to construct serializer: this may be useful in figuring out what the actual problem is."
  parameters:
  - name: "type"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "cause"
    type: "<xref href=\"java.util.concurrent.atomic.AtomicReference?alt=java.util.concurrent.atomic.AtomicReference&text=AtomicReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
