### YamlMime:JavaMember
uid: "com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeHealthcare*"
fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeHealthcare"
name: "beginAnalyzeHealthcare"
nameWithType: "TextAnalyticsClient.beginAnalyzeHealthcare"
members:
- uid: "com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeHealthcare(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.textanalytics.TextAnalyticsClient.beginAnalyzeHealthcare(Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context)"
  name: "beginAnalyzeHealthcare(Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context)"
  nameWithType: "TextAnalyticsClient.beginAnalyzeHealthcare(Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context)"
  summary: "Analyze healthcare entities, entity linking, and entity relations in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref> with provided request options. Note: In order to use this functionality, request to access public preview is required. Azure Active Directory (AAD) is not currently supported. For more information see [this][]. See [this][this 1] supported languages in Text Analytics API.\n\n**Code Sample**\n\nAnalyze healthcare entities, entity linking, and entity relations in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"document\"></xref> and provided request options to show statistics.\n\n```java\nList<TextDocumentInput> documents = new ArrayList<>();\n for (int i = 0; i < 3; i++) {\n     documents.add(new TextDocumentInput(Integer.toString(i),\n         \"The patient is a 54-year-old gentleman with a history of progressive angina over \"\n             + \"the past several months.\"));\n }\n \n // Request options: show statistics and model version\n RecognizeHealthcareEntityOptions options = new RecognizeHealthcareEntityOptions()\n     .setIncludeStatistics(true);\n \n SyncPoller<TextAnalyticsOperationResult, PagedIterable<HealthcareTaskResult>> syncPoller =\n     textAnalyticsClient.beginAnalyzeHealthcare(documents, options, Context.NONE);\n \n syncPoller.waitForCompletion();\n PagedIterable<HealthcareTaskResult> healthcareResultIterable = syncPoller.getFinalResult();\n \n healthcareResultIterable.forEach(healthcareTaskResult -> {\n     System.out.printf(\"Job display name: %s, job ID: %s.%n\", healthcareTaskResult.getDisplayName(),\n         healthcareTaskResult.getJobId());\n     RecognizeHealthcareEntitiesResultCollection healthcareEntitiesResultCollection =\n         healthcareTaskResult.getResult();\n \n     // Model version\n     System.out.printf(\"Results of Azure Text Analytics \\\"Analyze Healthcare\\\" Model, version: %s%n\",\n         healthcareEntitiesResultCollection.getModelVersion());\n \n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = healthcareEntitiesResultCollection.getStatistics();\n     System.out.printf(\"Documents statistics: document count = %s, erroneous document count = %s,\"\n             + \" transaction count = %s, valid document count = %s.%n\",\n         batchStatistics.getDocumentCount(), batchStatistics.getInvalidDocumentCount(),\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     healthcareEntitiesResultCollection.forEach(healthcareEntitiesResult -> {\n         System.out.println(\"document id = \" + healthcareEntitiesResult.getId());\n         System.out.println(\"Document entities: \");\n         HealthcareEntityCollection healthcareEntities = healthcareEntitiesResult.getEntities();\n         AtomicInteger ct = new AtomicInteger();\n         healthcareEntities.forEach(healthcareEntity -> {\n             System.out.printf(\"\\ti = %d, Text: %s, category: %s, subcategory: %s, confidence score: %f.%n\",\n                 ct.getAndIncrement(),\n                 healthcareEntity.getText(), healthcareEntity.getCategory(), healthcareEntity.getSubcategory(),\n                 healthcareEntity.getConfidenceScore());\n \n             List<HealthcareEntityLink> links = healthcareEntity.getDataSourceEntityLinks();\n             if (links != null) {\n                 links.forEach(healthcareEntityLink -> {\n                     System.out.printf(\"\\t\\tHealthcare data source ID: %s, data source: %s.%n\",\n                         healthcareEntityLink.getDataSourceId(),\n                         healthcareEntityLink.getDataSource());\n                 });\n             }\n         });\n \n         healthcareEntities.getEntityRelations().forEach(\n             healthcareEntityRelation ->\n                 System.out.printf(\"Is bidirectional: %s, target: %s, source: %s, relation type: %s.%n\",\n                     healthcareEntityRelation.isBidirectional(),\n                     healthcareEntityRelation.getTargetLink(),\n                     healthcareEntityRelation.getSourceLink(),\n                     healthcareEntityRelation.getRelationType()));\n     });\n });\n```\n\n\n[this]: https://docs.microsoft.com/azure/cognitive-services/text-analytics/how-tos/text-analytics-for-health?tabs=ner#request-access-to-the-public-preview\n[this 1]: https://aka.ms/talangs"
  parameters:
  - description: "A list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\" data-raw-source=\"documents\"></xref> to be analyzed."
    name: "documents"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The additional configurable <xref uid=\"com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref> that may be passed\n when analyzing healthcare task."
    name: "options"
    type: "<xref href=\"com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions?alt=com.azure.ai.textanalytics.models.RecognizeHealthcareEntityOptions&text=RecognizeHealthcareEntityOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<TextAnalyticsOperationResult,PagedIterable<HealthcareTaskResult>> beginAnalyzeHealthcare(Iterable<TextDocumentInput> documents, RecognizeHealthcareEntityOptions options, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> that polls the analyze healthcare operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a <xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedIterable\"></xref> of <xref uid=\"com.azure.ai.textanalytics.models.HealthcareTaskResult\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HealthcareTaskResult\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.TextAnalyticsOperationResult?alt=com.azure.ai.textanalytics.models.TextAnalyticsOperationResult&text=TextAnalyticsOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.textanalytics.models.HealthcareTaskResult?alt=com.azure.ai.textanalytics.models.HealthcareTaskResult&text=HealthcareTaskResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.textanalytics"
artifact: com.azure:azure-ai-textanalytics:5.1.0-beta.3
