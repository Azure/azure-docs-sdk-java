### YamlMime:JavaType
uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase"
fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase"
name: "BlobAsyncClientBase"
nameWithType: "BlobAsyncClientBase"
summary: "This class provides a client that contains all operations that apply to any blob type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class BlobAsyncClientBase"
constructors:
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.BlobAsyncClientBase(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  name: "BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  nameWithType: "BlobAsyncClientBase.BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  summary: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref>."
  modifiers:
  - "protected"
  parameters:
  - description: "The pipeline used to send and receive service requests."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "The endpoint where to send service requests."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the service to receive requests."
    name: "serviceVersion"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - description: "The storage account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The container name."
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Customer provided key used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  desc: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref>."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.BlobAsyncClientBase(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  name: "BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  nameWithType: "BlobAsyncClientBase.BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  summary: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref>."
  modifiers:
  - "protected"
  parameters:
  - description: "The pipeline used to send and receive service requests."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "The endpoint where to send service requests."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the service to receive requests."
    name: "serviceVersion"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - description: "The storage account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The container name."
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Customer provided key used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
  - description: "Encryption scope used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "encryptionScope"
    type: "<xref href=\"com.azure.storage.blob.implementation.models.EncryptionScope?alt=com.azure.storage.blob.implementation.models.EncryptionScope&text=EncryptionScope\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  desc: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref>."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.BlobAsyncClientBase(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  name: "BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  nameWithType: "BlobAsyncClientBase.BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  summary: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref>."
  modifiers:
  - "protected"
  parameters:
  - description: "The pipeline used to send and receive service requests."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "The endpoint where to send service requests."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the service to receive requests."
    name: "serviceVersion"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - description: "The storage account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The container name."
    name: "containerName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The blob name."
    name: "blobName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly."
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Customer provided key used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
  - description: "Encryption scope used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "encryptionScope"
    type: "<xref href=\"com.azure.storage.blob.implementation.models.EncryptionScope?alt=com.azure.storage.blob.implementation.models.EncryptionScope&text=EncryptionScope\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version identifier for the blob, pass <code>null</code> to interact with the latest blob version."
    name: "versionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected BlobAsyncClientBase(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  desc: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.specialized.SpecializedBlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SpecializedBlobClientBuilder\"></xref>."
fields:
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.accountName"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.accountName"
  name: "accountName"
  nameWithType: "BlobAsyncClientBase.accountName"
  summary: "Storage account name that contains the blob."
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String accountName"
  desc: "Storage account name that contains the blob."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.azureBlobStorage"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.azureBlobStorage"
  name: "azureBlobStorage"
  nameWithType: "BlobAsyncClientBase.azureBlobStorage"
  summary: "Backing REST client for the blob client."
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"com.azure.storage.blob.implementation.AzureBlobStorageImpl?alt=com.azure.storage.blob.implementation.AzureBlobStorageImpl&text=AzureBlobStorageImpl\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final AzureBlobStorageImpl azureBlobStorage"
  desc: "Backing REST client for the blob client."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.blobName"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.blobName"
  name: "blobName"
  nameWithType: "BlobAsyncClientBase.blobName"
  summary: "Name of the blob."
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String blobName"
  desc: "Name of the blob."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.containerName"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.containerName"
  name: "containerName"
  nameWithType: "BlobAsyncClientBase.containerName"
  summary: "Container name that contains the blob."
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String containerName"
  desc: "Container name that contains the blob."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.encryptionScope"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.encryptionScope"
  name: "encryptionScope"
  nameWithType: "BlobAsyncClientBase.encryptionScope"
  summary: "Encryption scope of the blob."
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"com.azure.storage.blob.implementation.models.EncryptionScope?alt=com.azure.storage.blob.implementation.models.EncryptionScope&text=EncryptionScope\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final EncryptionScope encryptionScope"
  desc: "Encryption scope of the blob."
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.serviceVersion"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.serviceVersion"
  name: "serviceVersion"
  nameWithType: "BlobAsyncClientBase.serviceVersion"
  summary: "Storage REST API version used in requests to the Storage service."
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final BlobServiceVersion serviceVersion"
  desc: "Storage REST API version used in requests to the Storage service."
methods:
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(String copyId)"
  name: "abortCopyFromUrl(String copyId)"
  nameWithType: "BlobAsyncClientBase.abortCopyFromUrl(String copyId)"
  summary: "Stops a pending copy that was previously started and leaves a destination blob with 0 length and metadata."
  parameters:
  - description: "The id of the copy operation to abort."
    name: "copyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> abortCopyFromUrl(String copyId)"
  desc: "Stops a pending copy that was previously started and leaves a destination blob with 0 length and metadata.\n\n**Code Samples**\n\n```java\nclient.abortCopyFromUrl(copyId).doOnSuccess(response -> System.out.println(\"Aborted copy from URL\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/abort-copy-blob"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(String copyId, String leaseId)"
  name: "abortCopyFromUrlWithResponse(String copyId, String leaseId)"
  nameWithType: "BlobAsyncClientBase.abortCopyFromUrlWithResponse(String copyId, String leaseId)"
  summary: "Stops a pending copy that was previously started and leaves a destination blob with 0 length and metadata."
  parameters:
  - description: "The id of the copy operation to abort."
    name: "copyId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The lease ID the active lease on the blob must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> abortCopyFromUrlWithResponse(String copyId, String leaseId)"
  desc: "Stops a pending copy that was previously started and leaves a destination blob with 0 length and metadata.\n\n**Code Samples**\n\n```java\nclient.abortCopyFromUrlWithResponse(copyId, leaseId)\n     .subscribe(response -> System.out.printf(\"Aborted copy completed with status %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/abort-copy-blob"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(BlobBeginCopyOptions options)"
  name: "beginCopy(BlobBeginCopyOptions options)"
  nameWithType: "BlobAsyncClientBase.beginCopy(BlobBeginCopyOptions options)"
  summary: "Copies the data at the source URL to a blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobBeginCopyOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobBeginCopyOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobBeginCopyOptions?alt=com.azure.storage.blob.options.BlobBeginCopyOptions&text=BlobBeginCopyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BlobCopyInfo,Void> beginCopy(BlobBeginCopyOptions options)"
  desc: "Copies the data at the source URL to a blob.\n\nThis method triggers a long-running, asynchronous operations. The source may be another blob or an Azure File. If the source is in another account, the source must either be public or authenticated with a SAS token. If the source is in the same account, the Shared Key authorization on the destination will also be applied to the source. The source URL must be URL encoded.\n\n**Starting a copy operation**\n\nStarting a copy operation and polling on the responses.\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n BlobBeginCopySourceRequestConditions modifiedRequestConditions = new BlobBeginCopySourceRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(7));\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.beginCopy(new BlobBeginCopyOptions(url).setMetadata(metadata).setTags(tags).setTier(AccessTier.HOT)\n     .setRehydratePriority(RehydratePriority.STANDARD).setSourceRequestConditions(modifiedRequestConditions)\n     .setDestinationRequestConditions(blobRequestConditions).setPollInterval(Duration.ofSeconds(2)))\n     .subscribe(response -> {\n         BlobCopyInfo info = response.getValue();\n         System.out.printf(\"CopyId: %s. Status: %s%n\", info.getCopyId(), info.getCopyStatus());\n     });\n```\n\n**Cancelling a copy operation**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n BlobBeginCopySourceRequestConditions modifiedRequestConditions = new BlobBeginCopySourceRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(7));\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n PollerFlux<BlobCopyInfo, Void> poller = client.beginCopy(new BlobBeginCopyOptions(url)\n     .setMetadata(metadata).setTags(tags).setTier(AccessTier.HOT)\n     .setRehydratePriority(RehydratePriority.STANDARD).setSourceRequestConditions(modifiedRequestConditions)\n     .setDestinationRequestConditions(blobRequestConditions).setPollInterval(Duration.ofSeconds(2)));\n\n poller.take(Duration.ofMinutes(30))\n         .last()\n         .flatMap(asyncPollResponse -> {\n             if (!asyncPollResponse.getStatus().isComplete()) {\n                 return asyncPollResponse\n                         .cancelOperation()\n                         .then(Mono.error(new RuntimeException(\"Blob copy taking long time, \"\n                                 + \"operation is cancelled!\")));\n             }\n             return Mono.just(asyncPollResponse);\n         }).block();\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-blob"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the blob copy operation until it has completed, has failed, or has been\n cancelled."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobCopyInfo?alt=com.azure.storage.blob.models.BlobCopyInfo&text=BlobCopyInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(String sourceUrl, Duration pollInterval)"
  name: "beginCopy(String sourceUrl, Duration pollInterval)"
  nameWithType: "BlobAsyncClientBase.beginCopy(String sourceUrl, Duration pollInterval)"
  summary: "Copies the data at the source URL to a blob."
  parameters:
  - description: "The source URL to copy from. URLs outside of Azure may only be copied to block blobs."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    name: "pollInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BlobCopyInfo,Void> beginCopy(String sourceUrl, Duration pollInterval)"
  desc: "Copies the data at the source URL to a blob.\n\nThis method triggers a long-running, asynchronous operations. The source may be another blob or an Azure File. If the source is in another account, the source must either be public or authenticated with a SAS token. If the source is in the same account, the Shared Key authorization on the destination will also be applied to the source. The source URL must be URL encoded.\n\n**Code Samples**\n\n```java\nclient.beginCopy(url, Duration.ofSeconds(3))\n     .subscribe(response -> System.out.printf(\"Copy identifier: %s%n\", response));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-blob"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the blob copy operation until it has completed, has failed, or has been\n cancelled."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobCopyInfo?alt=com.azure.storage.blob.models.BlobCopyInfo&text=BlobCopyInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(String sourceUrl, Map<String,String> metadata, AccessTier tier, RehydratePriority priority, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions, Duration pollInterval)"
  name: "beginCopy(String sourceUrl, Map<String,String> metadata, AccessTier tier, RehydratePriority priority, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions, Duration pollInterval)"
  nameWithType: "BlobAsyncClientBase.beginCopy(String sourceUrl, Map<String,String> metadata, AccessTier tier, RehydratePriority priority, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions, Duration pollInterval)"
  summary: "Copies the data at the source URL to a blob."
  parameters:
  - description: "The source URL to copy from. URLs outside of Azure may only be copied to block blobs."
    name: "sourceUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the destination blob. If there is leading or trailing whitespace in\n any metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> for the destination blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.RehydratePriority\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RehydratePriority\"></xref> for rehydrating the blob."
    name: "priority"
    type: "<xref href=\"com.azure.storage.blob.models.RehydratePriority?alt=com.azure.storage.blob.models.RehydratePriority&text=RehydratePriority\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.core.http.RequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestConditions\"></xref> against the source. Standard HTTP Access\n conditions related to the modification of data. ETag and LastModifiedTime are used to construct conditions\n related to when the blob was changed relative to the given request. The request will fail if the specified\n condition is not satisfied."
    name: "sourceModifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref> against the destination."
    name: "destRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Duration between each poll for the copy status. If none is specified, a default of one second\n is used."
    name: "pollInterval"
    type: "<xref href=\"java.time.Duration?alt=java.time.Duration&text=Duration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BlobCopyInfo,Void> beginCopy(String sourceUrl, Map<String,String> metadata, AccessTier tier, RehydratePriority priority, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions, Duration pollInterval)"
  desc: "Copies the data at the source URL to a blob.\n\nThis method triggers a long-running, asynchronous operations. The source may be another blob or an Azure File. If the source is in another account, the source must either be public or authenticated with a SAS token. If the source is in the same account, the Shared Key authorization on the destination will also be applied to the source. The source URL must be URL encoded.\n\n**Starting a copy operation**\n\nStarting a copy operation and polling on the responses.\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(7));\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.beginCopy(url, metadata, AccessTier.HOT, RehydratePriority.STANDARD,\n     modifiedRequestConditions, blobRequestConditions, Duration.ofSeconds(2))\n     .subscribe(response -> {\n         BlobCopyInfo info = response.getValue();\n         System.out.printf(\"CopyId: %s. Status: %s%n\", info.getCopyId(), info.getCopyStatus());\n     });\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-blob"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the blob copy operation until it has completed, has failed, or has been\n cancelled."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobCopyInfo?alt=com.azure.storage.blob.models.BlobCopyInfo&text=BlobCopyInfo\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(String copySource)"
  name: "copyFromUrl(String copySource)"
  nameWithType: "BlobAsyncClientBase.copyFromUrl(String copySource)"
  summary: "Copies the data at the source URL to a blob and waits for the copy to complete before returning a response."
  parameters:
  - description: "The source URL to copy from."
    name: "copySource"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<String> copyFromUrl(String copySource)"
  desc: "Copies the data at the source URL to a blob and waits for the copy to complete before returning a response.\n\nThe source must be a block blob no larger than 256MB. The source must also be either public or have a sas token attached. The URL must be URL encoded.\n\n**Code Samples**\n\n```java\nclient.copyFromUrl(url).subscribe(response -> System.out.printf(\"Copy identifier: %s%n\", response));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-blob-from-url"
  returns:
    description: "A reactive response containing the copy ID for the long-running operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(BlobCopyFromUrlOptions options)"
  name: "copyFromUrlWithResponse(BlobCopyFromUrlOptions options)"
  nameWithType: "BlobAsyncClientBase.copyFromUrlWithResponse(BlobCopyFromUrlOptions options)"
  summary: "Copies the data at the source URL to a blob and waits for the copy to complete before returning a response."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobCopyFromUrlOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobCopyFromUrlOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobCopyFromUrlOptions?alt=com.azure.storage.blob.options.BlobCopyFromUrlOptions&text=BlobCopyFromUrlOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> copyFromUrlWithResponse(BlobCopyFromUrlOptions options)"
  desc: "Copies the data at the source URL to a blob and waits for the copy to complete before returning a response.\n\nThe source must be a block blob no larger than 256MB. The source must also be either public or have a sas token attached. The URL must be URL encoded.\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(7));\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.copyFromUrlWithResponse(new BlobCopyFromUrlOptions(url).setMetadata(metadata).setTags(tags)\n     .setTier(AccessTier.HOT).setSourceRequestConditions(modifiedRequestConditions)\n     .setDestinationRequestConditions(blobRequestConditions))\n     .subscribe(response -> System.out.printf(\"Copy identifier: %s%n\", response));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-blob-from-url"
  returns:
    description: "A reactive response containing the copy ID for the long-running operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(String copySource, Map<String,String> metadata, AccessTier tier, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions)"
  name: "copyFromUrlWithResponse(String copySource, Map<String,String> metadata, AccessTier tier, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions)"
  nameWithType: "BlobAsyncClientBase.copyFromUrlWithResponse(String copySource, Map<String,String> metadata, AccessTier tier, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions)"
  summary: "Copies the data at the source URL to a blob and waits for the copy to complete before returning a response."
  parameters:
  - description: "The source URL to copy from. URLs outside of Azure may only be copied to block blobs."
    name: "copySource"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the destination blob. If there is leading or trailing whitespace in\n any metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> for the destination blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.core.http.RequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestConditions\"></xref> against the source. Standard HTTP Access\n conditions related to the modification of data. ETag and LastModifiedTime are used to construct conditions\n related to when the blob was changed relative to the given request. The request will fail if the specified\n condition is not satisfied."
    name: "sourceModifiedRequestConditions"
    type: "<xref href=\"com.azure.core.http.RequestConditions?alt=com.azure.core.http.RequestConditions&text=RequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref> against the destination."
    name: "destRequestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<String>> copyFromUrlWithResponse(String copySource, Map<String,String> metadata, AccessTier tier, RequestConditions sourceModifiedRequestConditions, BlobRequestConditions destRequestConditions)"
  desc: "Copies the data at the source URL to a blob and waits for the copy to complete before returning a response.\n\nThe source must be a block blob no larger than 256MB. The source must also be either public or have a sas token attached. The URL must be URL encoded.\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n RequestConditions modifiedRequestConditions = new RequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(7));\n BlobRequestConditions blobRequestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.copyFromUrlWithResponse(url, metadata, AccessTier.HOT, modifiedRequestConditions, blobRequestConditions)\n     .subscribe(response -> System.out.printf(\"Copy identifier: %s%n\", response));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/copy-blob-from-url"
  returns:
    description: "A reactive response containing the copy ID for the long-running operation."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()"
  name: "createSnapshot()"
  nameWithType: "BlobAsyncClientBase.createSnapshot()"
  summary: "Creates a read-only snapshot of the blob."
  syntax: "public Mono<BlobAsyncClientBase> createSnapshot()"
  desc: "Creates a read-only snapshot of the blob.\n\n**Code Samples**\n\n```java\nclient.createSnapshot()\n     .subscribe(response -> System.out.printf(\"Identifier for the snapshot is %s%n\",\n         response.getSnapshotId()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/snapshot-blob"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> which is used to interact with the created snapshot,\n use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getSnapshotId()\"></xref> to get the identifier for the snapshot."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  name: "createSnapshotWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.createSnapshotWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  summary: "Creates a read-only snapshot of the blob."
  parameters:
  - description: "Metadata to associate with the resource. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobAsyncClientBase>> createSnapshotWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  desc: "Creates a read-only snapshot of the blob.\n\n**Code Samples**\n\n```java\nMap<String, String> snapshotMetadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.createSnapshotWithResponse(snapshotMetadata, requestConditions)\n     .subscribe(response -> System.out.printf(\"Identifier for the snapshot is %s%n\", response.getValue()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/snapshot-blob"
  returns:
    description: "A response containing a <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> which is used to interact with the created snapshot,\n use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getSnapshotId()\"></xref> to get the identifier for the snapshot."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()"
  name: "delete()"
  nameWithType: "BlobAsyncClientBase.delete()"
  summary: "Deletes the specified blob or snapshot."
  syntax: "public Mono<Void> delete()"
  desc: "Deletes the specified blob or snapshot. To delete a blob with its snapshots use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#deleteIfExistsWithResponse(DeleteSnapshotsOptionType, BlobRequestConditions)\"></xref> and set `DeleteSnapshotsOptionType` to INCLUDE.\n\n**Code Samples**\n\n```java\nclient.delete().doOnSuccess(response -> System.out.println(\"Completed delete\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-blob"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExists()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExists()"
  name: "deleteIfExists()"
  nameWithType: "BlobAsyncClientBase.deleteIfExists()"
  summary: "Deletes the specified blob or snapshot if it exists."
  syntax: "public Mono<Boolean> deleteIfExists()"
  desc: "Deletes the specified blob or snapshot if it exists. To delete a blob with its snapshots use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#deleteWithResponse(DeleteSnapshotsOptionType, BlobRequestConditions)\"></xref> and set `DeleteSnapshotsOptionType` to INCLUDE.\n\n**Code Samples**\n\n```java\nclient.deleteIfExists().subscribe(deleted -> {\n     if (deleted) {\n         System.out.println(\"Successfully deleted.\");\n     } else {\n         System.out.println(\"Does not exist.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-blob"
  returns:
    description: "A reactive response signaling completion. <code>true</code> indicates that the blob was deleted.\n <code>false</code> indicates the blob does not exist at this location."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExistsWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  name: "deleteIfExistsWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.deleteIfExistsWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  summary: "Deletes the specified blob or snapshot if it exists."
  parameters:
  - description: "Specifies the behavior for deleting the snapshots on this blob. <code>Include</code>\n will delete the base blob and all snapshots. <code>Only</code> will delete only the snapshots. If a snapshot is being\n deleted, you must pass null."
    name: "deleteBlobSnapshotOptions"
    type: "<xref href=\"com.azure.storage.blob.models.DeleteSnapshotsOptionType?alt=com.azure.storage.blob.models.DeleteSnapshotsOptionType&text=DeleteSnapshotsOptionType\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Boolean>> deleteIfExistsWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  desc: "Deletes the specified blob or snapshot if it exists. To delete a blob with its snapshots set `DeleteSnapshotsOptionType` to INCLUDE.\n\n**Code Samples**\n\n```java\nclient.deleteIfExistsWithResponse(DeleteSnapshotsOptionType.INCLUDE, null).subscribe(response -> {\n     if (response.getStatusCode() == 404) {\n         System.out.println(\"Does not exist.\");\n     } else {\n         System.out.println(\"successfully deleted.\");\n     }\n });\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-blob"
  returns:
    description: "A reactive response signaling completion. If <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>'s status code is 202, the base blob was\n successfully deleted. If status code is 404, the base blob does not exist."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicy()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicy()"
  name: "deleteImmutabilityPolicy()"
  nameWithType: "BlobAsyncClientBase.deleteImmutabilityPolicy()"
  summary: "Deletes the immutability policy on a blob, blob snapshot or blob version."
  syntax: "public Mono<Void> deleteImmutabilityPolicy()"
  desc: "Deletes the immutability policy on a blob, blob snapshot or blob version.\n\nNOTE: Blob Versioning must be enabled on your storage account and the blob must be in a container with object level immutable policy enabled to call this API.\n\n**Code Samples**\n\n```java\nclient.deleteImmutabilityPolicy().subscribe(response -> System.out.println(\"Completed immutability policy\"\n     + \" deletion.\"));\n```"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicyWithResponse()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicyWithResponse()"
  name: "deleteImmutabilityPolicyWithResponse()"
  nameWithType: "BlobAsyncClientBase.deleteImmutabilityPolicyWithResponse()"
  summary: "Deletes the immutability policy on a blob, blob snapshot or blob version."
  syntax: "public Mono<Response<Void>> deleteImmutabilityPolicyWithResponse()"
  desc: "Deletes the immutability policy on a blob, blob snapshot or blob version.\n\nNOTE: Blob Versioning must be enabled on your storage account and the blob must be in a container with immutable storage with versioning enabled to call this API.\n\n**Code Samples**\n\n```java\nclient.deleteImmutabilityPolicyWithResponse().subscribe(response ->\n     System.out.println(\"Delete immutability policy completed with status: \" + response.getStatusCode()));\n```"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  name: "deleteWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.deleteWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  summary: "Deletes the specified blob or snapshot."
  parameters:
  - description: "Specifies the behavior for deleting the snapshots on this blob. <code>Include</code>\n will delete the base blob and all snapshots. <code>Only</code> will delete only the snapshots. If a snapshot is being\n deleted, you must pass null."
    name: "deleteBlobSnapshotOptions"
    type: "<xref href=\"com.azure.storage.blob.models.DeleteSnapshotsOptionType?alt=com.azure.storage.blob.models.DeleteSnapshotsOptionType&text=DeleteSnapshotsOptionType\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteWithResponse(DeleteSnapshotsOptionType deleteBlobSnapshotOptions, BlobRequestConditions requestConditions)"
  desc: "Deletes the specified blob or snapshot. To delete a blob with its snapshots set `DeleteSnapshotsOptionType` to INCLUDE.\n\n**Code Samples**\n\n```java\nclient.deleteWithResponse(DeleteSnapshotsOptionType.INCLUDE, null)\n     .subscribe(response -> System.out.printf(\"Delete completed with status %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/delete-blob"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.download()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.download()"
  name: "download()"
  nameWithType: "BlobAsyncClientBase.download()"
  summary: "Reads the entire blob."
  deprecatedTag: "use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#downloadStream()\"></xref> instead."
  syntax: "@Deprecated\npublic Flux<ByteBuffer> download()"
  desc: "Reads the entire blob. Uploading data must be done from the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref>.\n\n**Code Samples**\n\n```java\nByteArrayOutputStream downloadData = new ByteArrayOutputStream();\n client.download().subscribe(piece -> {\n     try {\n         downloadData.write(piece.array());\n     } catch (IOException ex) {\n         throw new UncheckedIOException(ex);\n     }\n });\n```\n\nFor more information, see the [Azure Docs][]\n\nThis method will be deprecated in the future. Use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#downloadStream()\"></xref> instead.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  hasDeprecatedTag: true
  returns:
    description: "A reactive response containing the blob data."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContent()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContent()"
  name: "downloadContent()"
  nameWithType: "BlobAsyncClientBase.downloadContent()"
  summary: "Reads the entire blob."
  syntax: "public Mono<BinaryData> downloadContent()"
  desc: "Reads the entire blob. Uploading data must be done from the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref>.\n\n**Code Samples**\n\n```java\nclient.downloadContent().subscribe(data -> {\n     System.out.printf(\"Downloaded %s\", data.toString());\n });\n```\n\nFor more information, see the [Azure Docs][]\n\nThis method supports downloads up to 2GB of data. Use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#downloadStream()\"></xref> to download larger blobs.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions)"
  name: "downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions)"
  summary: "Reads a range of bytes from a blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.DownloadRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DownloadRetryOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobDownloadContentAsyncResponse> downloadContentWithResponse(DownloadRetryOptions options, BlobRequestConditions requestConditions)"
  desc: "Reads a range of bytes from a blob. Uploading data must be done from the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref>.\n\n**Code Samples**\n\n```java\nDownloadRetryOptions options = new DownloadRetryOptions().setMaxRetryRequests(5);\n\n client.downloadContentWithResponse(options, null).subscribe(response -> {\n     BinaryData content = response.getValue();\n     System.out.println(content.toString());\n });\n```\n\nFor more information, see the [Azure Docs][]\n\nThis method supports downloads up to 2GB of data. Use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#downloadStreamWithResponse(BlobRange, DownloadRetryOptions, BlobRequestConditions, boolean)\"></xref> to download larger blobs.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobDownloadContentAsyncResponse?alt=com.azure.storage.blob.models.BlobDownloadContentAsyncResponse&text=BlobDownloadContentAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()"
  name: "downloadStream()"
  nameWithType: "BlobAsyncClientBase.downloadStream()"
  summary: "Reads the entire blob."
  syntax: "public Flux<ByteBuffer> downloadStream()"
  desc: "Reads the entire blob. Uploading data must be done from the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref>.\n\n**Code Samples**\n\n```java\nByteArrayOutputStream downloadData = new ByteArrayOutputStream();\n client.downloadStream().subscribe(piece -> {\n     try {\n         downloadData.write(piece.array());\n     } catch (IOException ex) {\n         throw new UncheckedIOException(ex);\n     }\n });\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob data."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  name: "downloadStreamWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  nameWithType: "BlobAsyncClientBase.downloadStreamWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  summary: "Reads a range of bytes from a blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.DownloadRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DownloadRetryOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether the contentMD5 for the specified blob range should be returned."
    name: "getRangeContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobDownloadAsyncResponse> downloadStreamWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  desc: "Reads a range of bytes from a blob. Uploading data must be done from the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref>.\n\n**Code Samples**\n\n```java\nBlobRange range = new BlobRange(1024, (long) 2048);\n DownloadRetryOptions options = new DownloadRetryOptions().setMaxRetryRequests(5);\n\n client.downloadStreamWithResponse(range, options, null, false).subscribe(response -> {\n     ByteArrayOutputStream downloadData = new ByteArrayOutputStream();\n     response.getValue().subscribe(piece -> {\n         try {\n             downloadData.write(piece.array());\n         } catch (IOException ex) {\n             throw new UncheckedIOException(ex);\n         }\n     });\n });\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobDownloadAsyncResponse?alt=com.azure.storage.blob.models.BlobDownloadAsyncResponse&text=BlobDownloadAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(String filePath)"
  name: "downloadToFile(String filePath)"
  nameWithType: "BlobAsyncClientBase.downloadToFile(String filePath)"
  summary: "Downloads the entire blob into a file specified by the path."
  parameters:
  - description: "A <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representing the filePath where the downloaded data will be written."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobProperties> downloadToFile(String filePath)"
  desc: "Downloads the entire blob into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown.\n\n**Code Samples**\n\n```java\nclient.downloadToFile(file).subscribe(response -> System.out.println(\"Completed download to file\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(String filePath, boolean overwrite)"
  name: "downloadToFile(String filePath, boolean overwrite)"
  nameWithType: "BlobAsyncClientBase.downloadToFile(String filePath, boolean overwrite)"
  summary: "Downloads the entire blob into a file specified by the path."
  parameters:
  - description: "A <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representing the filePath where the downloaded data will be written."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite the file, should the file exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobProperties> downloadToFile(String filePath, boolean overwrite)"
  desc: "Downloads the entire blob into a file specified by the path.\n\nIf overwrite is set to false, the file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown.\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default value\n client.downloadToFile(file, overwrite).subscribe(response -> System.out.println(\"Completed download to file\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(BlobDownloadToFileOptions options)"
  name: "downloadToFileWithResponse(BlobDownloadToFileOptions options)"
  nameWithType: "BlobAsyncClientBase.downloadToFileWithResponse(BlobDownloadToFileOptions options)"
  summary: "Downloads the entire blob into a file specified by the path."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobDownloadToFileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobDownloadToFileOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobDownloadToFileOptions?alt=com.azure.storage.blob.options.BlobDownloadToFileOptions&text=BlobDownloadToFileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobProperties>> downloadToFileWithResponse(BlobDownloadToFileOptions options)"
  desc: "Downloads the entire blob into a file specified by the path.\n\nBy default the file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown. To override this behavior, provide appropriate <xref uid=\"java.nio.file.OpenOption\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OpenOptions\"></xref>\n\n**Code Samples**\n\n```java\nclient.downloadToFileWithResponse(new BlobDownloadToFileOptions(file)\n     .setRange(new BlobRange(1024, 2018L))\n     .setDownloadRetryOptions(new DownloadRetryOptions().setMaxRetryRequests(5))\n     .setOpenOptions(new HashSet<>(Arrays.asList(StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE,\n         StandardOpenOption.READ))))\n     .subscribe(response -> System.out.println(\"Completed download to file\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5)"
  name: "downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5)"
  nameWithType: "BlobAsyncClientBase.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5)"
  summary: "Downloads the entire blob into a file specified by the path."
  parameters:
  - description: "A <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representing the filePath where the downloaded data will be written."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> to use to download to file. Number of parallel\n transfers parameter is ignored."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.DownloadRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DownloadRetryOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether the contentMD5 for the specified blob range should be returned."
    name: "rangeGetContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobProperties>> downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5)"
  desc: "Downloads the entire blob into a file specified by the path.\n\nThe file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown.\n\n**Code Samples**\n\n```java\nBlobRange range = new BlobRange(1024, 2048L);\n DownloadRetryOptions options = new DownloadRetryOptions().setMaxRetryRequests(5);\n\n client.downloadToFileWithResponse(file, range, null, options, null, false)\n     .subscribe(response -> System.out.println(\"Completed download to file\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions)"
  name: "downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions)"
  nameWithType: "BlobAsyncClientBase.downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions)"
  summary: "Downloads the entire blob into a file specified by the path."
  parameters:
  - description: "A <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"String\"></xref> representing the filePath where the downloaded data will be written."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> to use to download to file. Number of parallel\n transfers parameter is ignored."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.DownloadRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DownloadRetryOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether the contentMD5 for the specified blob range should be returned."
    name: "rangeGetContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"java.nio.file.OpenOption\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OpenOptions\"></xref> to use to configure how to open or create the file."
    name: "openOptions"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.file.OpenOption?alt=java.nio.file.OpenOption&text=OpenOption\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Response<BlobProperties>> downloadToFileWithResponse(String filePath, BlobRange range, ParallelTransferOptions parallelTransferOptions, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean rangeGetContentMd5, Set<OpenOption> openOptions)"
  desc: "Downloads the entire blob into a file specified by the path.\n\nBy default the file will be created and must not exist, if the file already exists a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileAlreadyExistsException\"></xref> will be thrown. To override this behavior, provide appropriate <xref uid=\"java.nio.file.OpenOption\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OpenOptions\"></xref>\n\n**Code Samples**\n\n```java\nBlobRange blobRange = new BlobRange(1024, 2048L);\n DownloadRetryOptions downloadRetryOptions = new DownloadRetryOptions().setMaxRetryRequests(5);\n Set<OpenOption> openOptions = new HashSet<>(Arrays.asList(StandardOpenOption.CREATE_NEW,\n     StandardOpenOption.WRITE, StandardOpenOption.READ)); // Default options\n\n client.downloadToFileWithResponse(file, blobRange, null, downloadRetryOptions, null, false, openOptions)\n     .subscribe(response -> System.out.println(\"Completed download to file\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  name: "downloadWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  nameWithType: "BlobAsyncClientBase.downloadWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  summary: "Reads a range of bytes from a blob."
  deprecatedTag: "use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#downloadStreamWithResponse(BlobRange, DownloadRetryOptions, BlobRequestConditions, boolean)\"></xref> instead."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRange\"></xref>"
    name: "range"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRange?alt=com.azure.storage.blob.models.BlobRange&text=BlobRange\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.DownloadRetryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DownloadRetryOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.models.DownloadRetryOptions?alt=com.azure.storage.blob.models.DownloadRetryOptions&text=DownloadRetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether the contentMD5 for the specified blob range should be returned."
    name: "getRangeContentMd5"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic Mono<BlobDownloadAsyncResponse> downloadWithResponse(BlobRange range, DownloadRetryOptions options, BlobRequestConditions requestConditions, boolean getRangeContentMd5)"
  desc: "Reads a range of bytes from a blob. Uploading data must be done from the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref>.\n\n**Code Samples**\n\n```java\nBlobRange range = new BlobRange(1024, (long) 2048);\n DownloadRetryOptions options = new DownloadRetryOptions().setMaxRetryRequests(5);\n\n client.downloadWithResponse(range, options, null, false).subscribe(response -> {\n     ByteArrayOutputStream downloadData = new ByteArrayOutputStream();\n     response.getValue().subscribe(piece -> {\n         try {\n             downloadData.write(piece.array());\n         } catch (IOException ex) {\n             throw new UncheckedIOException(ex);\n         }\n     });\n });\n```\n\nFor more information, see the [Azure Docs][]\n\nThis method will be deprecated in the future. Use <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#downloadStreamWithResponse(BlobRange, DownloadRetryOptions, BlobRequestConditions, boolean)\"></xref> instead.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob"
  hasDeprecatedTag: true
  returns:
    description: "A reactive response containing the blob data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobDownloadAsyncResponse?alt=com.azure.storage.blob.models.BlobDownloadAsyncResponse&text=BlobDownloadAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()"
  name: "exists()"
  nameWithType: "BlobAsyncClientBase.exists()"
  summary: "Determines if the blob this client represents exists in the cloud."
  syntax: "public Mono<Boolean> exists()"
  desc: "Determines if the blob this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.exists().subscribe(response -> System.out.printf(\"Exists? %b%n\", response));\n```"
  returns:
    description: "true if the blob exists, false if it doesn't"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()"
  name: "existsWithResponse()"
  nameWithType: "BlobAsyncClientBase.existsWithResponse()"
  summary: "Determines if the blob this client represents exists in the cloud."
  syntax: "public Mono<Response<Boolean>> existsWithResponse()"
  desc: "Determines if the blob this client represents exists in the cloud.\n\n**Code Samples**\n\n```java\nclient.existsWithResponse().subscribe(response -> System.out.printf(\"Exists? %b%n\", response.getValue()));\n```"
  returns:
    description: "true if the blob exists, false if it doesn't"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  name: "generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  nameWithType: "BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  summary: "Generates a service SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues)"
  desc: "Generates a service SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobSasPermission permission = new BlobSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateSas(values); // Client must be authenticated via StorageSharedKeyCredential\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  name: "generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  nameWithType: "BlobAsyncClientBase.generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  summary: "Generates a service SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, Context context)"
  desc: "Generates a service SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>\n\nNote : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StorageSharedKeyCredential\"></xref>\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a service SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime expiryTime = OffsetDateTime.now().plusDays(1);\n BlobSasPermission permission = new BlobSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues values = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n // Client must be authenticated via StorageSharedKeyCredential\n client.generateSas(values, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  name: "generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  nameWithType: "BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  summary: "Generates a user delegation SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information on\n how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey)"
  desc: "Generates a user delegation SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobSasPermission myPermission = new BlobSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey);\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  name: "generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  nameWithType: "BlobAsyncClientBase.generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  summary: "Generates a user delegation SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>"
    name: "blobServiceSasSignatureValues"
    type: "<xref href=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues?alt=com.azure.storage.blob.sas.BlobServiceSasSignatureValues&text=BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"False\" />"
  - description: "A <xref uid=\"com.azure.storage.blob.models.UserDelegationKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UserDelegationKey\"></xref> object used to sign the SAS values.\n See <xref uid=\"com.azure.storage.blob.BlobServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceAsyncClient#getUserDelegationKey(OffsetDateTime, OffsetDateTime)\"></xref> for more information on\n how to get a user delegation key."
    name: "userDelegationKey"
    type: "<xref href=\"com.azure.storage.blob.models.UserDelegationKey?alt=com.azure.storage.blob.models.UserDelegationKey&text=UserDelegationKey\" data-throw-if-not-resolved=\"False\" />"
  - description: "The account name."
    name: "accountName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the code when generating a SAS."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public String generateUserDelegationSas(BlobServiceSasSignatureValues blobServiceSasSignatureValues, UserDelegationKey userDelegationKey, String accountName, Context context)"
  desc: "Generates a user delegation SAS for the blob using the specified <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref>.\n\nSee <xref uid=\"com.azure.storage.blob.sas.BlobServiceSasSignatureValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobServiceSasSignatureValues\"></xref> for more information on how to construct a user delegation SAS.\n\n**Code Samples**\n\n```java\nOffsetDateTime myExpiryTime = OffsetDateTime.now().plusDays(1);\n BlobSasPermission myPermission = new BlobSasPermission().setReadPermission(true);\n\n BlobServiceSasSignatureValues myValues = new BlobServiceSasSignatureValues(expiryTime, permission)\n     .setStartTime(OffsetDateTime.now());\n\n client.generateUserDelegationSas(values, userDelegationKey, accountName, new Context(\"key\", \"value\"));\n```"
  returns:
    description: "A <code>String</code> representing the SAS query parameters."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()"
  name: "getAccountInfo()"
  nameWithType: "BlobAsyncClientBase.getAccountInfo()"
  summary: "Returns the sku name and account kind for the account."
  syntax: "public Mono<StorageAccountInfo> getAccountInfo()"
  desc: "Returns the sku name and account kind for the account.\n\n**Code Samples**\n\n```java\nclient.getAccountInfo().subscribe(response -> System.out.printf(\"Account Kind: %s, SKU: %s%n\",\n     response.getAccountKind(), response.getSkuName()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "a reactor response containing the sku name and account kind."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()"
  name: "getAccountInfoWithResponse()"
  nameWithType: "BlobAsyncClientBase.getAccountInfoWithResponse()"
  summary: "Returns the sku name and account kind for the account."
  syntax: "public Mono<Response<StorageAccountInfo>> getAccountInfoWithResponse()"
  desc: "Returns the sku name and account kind for the account.\n\n**Code Samples**\n\n```java\nclient.getAccountInfoWithResponse().subscribe(response -> System.out.printf(\"Account Kind: %s, SKU: %s%n\",\n     response.getValue().getAccountKind(), response.getValue().getSkuName()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-account-information"
  returns:
    description: "a reactor response containing the sku name and account kind."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.StorageAccountInfo?alt=com.azure.storage.blob.models.StorageAccountInfo&text=StorageAccountInfo\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()"
  name: "getAccountName()"
  nameWithType: "BlobAsyncClientBase.getAccountName()"
  summary: "Get associated account name."
  syntax: "public String getAccountName()"
  desc: "Get associated account name."
  returns:
    description: "account name associated with this storage resource."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountUrl()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountUrl()"
  name: "getAccountUrl()"
  nameWithType: "BlobAsyncClientBase.getAccountUrl()"
  summary: "Get the url of the storage account."
  syntax: "public String getAccountUrl()"
  desc: "Get the url of the storage account."
  returns:
    description: "the URL of the storage account"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()"
  name: "getBlobName()"
  nameWithType: "BlobAsyncClientBase.getBlobName()"
  summary: "Decodes and gets the blob name."
  modifiers:
  - "final"
  syntax: "public final String getBlobName()"
  desc: "Decodes and gets the blob name.\n\n**Code Samples**\n\n```java\nString blobName = client.getBlobName();\n System.out.println(\"The name of the blob is \" + blobName);\n```"
  returns:
    description: "The decoded name of the blob."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()"
  name: "getBlobUrl()"
  nameWithType: "BlobAsyncClientBase.getBlobUrl()"
  summary: "Gets the URL of the blob represented by this client."
  syntax: "public String getBlobUrl()"
  desc: "Gets the URL of the blob represented by this client."
  returns:
    description: "the URL."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerAsyncClient()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerAsyncClient()"
  name: "getContainerAsyncClient()"
  nameWithType: "BlobAsyncClientBase.getContainerAsyncClient()"
  summary: "Get an async client pointing to the parent container."
  syntax: "public BlobContainerAsyncClient getContainerAsyncClient()"
  desc: "Get an async client pointing to the parent container.\n\n**Code Samples**\n\n```java\nBlobContainerAsyncClient containerClient = client.getContainerAsyncClient();\n System.out.println(\"The name of the container is \" + containerClient.getBlobContainerName());\n```"
  returns:
    description: "<xref uid=\"com.azure.storage.blob.BlobContainerAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobContainerAsyncClient\"></xref>"
    type: "<xref href=\"com.azure.storage.blob.BlobContainerAsyncClient?alt=com.azure.storage.blob.BlobContainerAsyncClient&text=BlobContainerAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()"
  name: "getContainerName()"
  nameWithType: "BlobAsyncClientBase.getContainerName()"
  summary: "Get the container name."
  modifiers:
  - "final"
  syntax: "public final String getContainerName()"
  desc: "Get the container name.\n\n**Code Samples**\n\n```java\nString containerName = client.getContainerName();\n System.out.println(\"The name of the container is \" + containerName);\n```"
  returns:
    description: "The name of the container."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()"
  name: "getCustomerProvidedKey()"
  nameWithType: "BlobAsyncClientBase.getCustomerProvidedKey()"
  summary: "Gets the <xref uid=\"com.azure.storage.blob.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> used to encrypt this blob's content on the server."
  syntax: "public CpkInfo getCustomerProvidedKey()"
  desc: "Gets the <xref uid=\"com.azure.storage.blob.models.CpkInfo\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CpkInfo\"></xref> used to encrypt this blob's content on the server."
  returns:
    description: "the customer provided key used for encryption."
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> with the specified `customerProvidedKey`."
  parameters:
  - description: "the <xref uid=\"com.azure.storage.blob.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the blob,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CustomerProvidedKey?alt=com.azure.storage.blob.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClientBase getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()"
  name: "getEncryptionScope()"
  nameWithType: "BlobAsyncClientBase.getEncryptionScope()"
  summary: "Gets the `encryption scope` used to encrypt this blob's content on the server."
  modifiers:
  - "protected"
  syntax: "protected String getEncryptionScope()"
  desc: "Gets the `encryption scope` used to encrypt this blob's content on the server."
  returns:
    description: "the encryption scope used for encryption."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient(String encryptionScope)"
  name: "getEncryptionScopeAsyncClient(String encryptionScope)"
  nameWithType: "BlobAsyncClientBase.getEncryptionScopeAsyncClient(String encryptionScope)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> with the specified `encryptionScope`."
  parameters:
  - description: "the encryption scope for the blob, pass <code>null</code> to use no encryption scope."
    name: "encryptionScope"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClientBase getEncryptionScopeAsyncClient(String encryptionScope)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> with the specified `encryptionScope`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> with the specified <code>encryptionScope</code>."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()"
  name: "getHttpPipeline()"
  nameWithType: "BlobAsyncClientBase.getHttpPipeline()"
  summary: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  syntax: "public HttpPipeline getHttpPipeline()"
  desc: "Gets the <xref uid=\"com.azure.core.http.HttpPipeline\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpPipeline\"></xref> powering this client."
  returns:
    description: "The pipeline."
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()"
  name: "getProperties()"
  nameWithType: "BlobAsyncClientBase.getProperties()"
  summary: "Returns the blob's metadata and properties."
  syntax: "public Mono<BlobProperties> getProperties()"
  desc: "Returns the blob's metadata and properties.\n\n**Code Samples**\n\n```java\nclient.getProperties().subscribe(response ->\n     System.out.printf(\"Type: %s, Size: %d%n\", response.getBlobType(), response.getBlobSize()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-properties"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(BlobRequestConditions requestConditions)"
  name: "getPropertiesWithResponse(BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.getPropertiesWithResponse(BlobRequestConditions requestConditions)"
  summary: "Returns the blob's metadata and properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobProperties>> getPropertiesWithResponse(BlobRequestConditions requestConditions)"
  desc: "Returns the blob's metadata and properties.\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.getPropertiesWithResponse(requestConditions).subscribe(\n     response -> System.out.printf(\"Type: %s, Size: %d%n\", response.getValue().getBlobType(),\n         response.getValue().getBlobSize()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-properties"
  returns:
    description: "A reactive response containing the blob properties and metadata."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobProperties?alt=com.azure.storage.blob.models.BlobProperties&text=BlobProperties\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()"
  name: "getServiceVersion()"
  nameWithType: "BlobAsyncClientBase.getServiceVersion()"
  summary: "Gets the service version the client is using."
  syntax: "public BlobServiceVersion getServiceVersion()"
  desc: "Gets the service version the client is using."
  returns:
    description: "the service version the client is using."
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(String snapshot)"
  name: "getSnapshotClient(String snapshot)"
  nameWithType: "BlobAsyncClientBase.getSnapshotClient(String snapshot)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> linked to the `snapshot` of this blob resource."
  parameters:
  - description: "the identifier for a specific snapshot of this blob"
    name: "snapshot"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClientBase getSnapshotClient(String snapshot)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> linked to the `snapshot` of this blob resource."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> used to interact with the specific snapshot."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()"
  name: "getSnapshotId()"
  nameWithType: "BlobAsyncClientBase.getSnapshotId()"
  summary: "Gets the snapshot<wbr>Id for a blob resource"
  syntax: "public String getSnapshotId()"
  desc: "Gets the snapshotId for a blob resource"
  returns:
    description: "A string that represents the snapshotId of the snapshot blob"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()"
  name: "getTags()"
  nameWithType: "BlobAsyncClientBase.getTags()"
  summary: "Returns the blob's tags."
  syntax: "public Mono<Map<String,String>> getTags()"
  desc: "Returns the blob's tags.\n\n**Code Samples**\n\n```java\nclient.getTags().subscribe(response ->\n     System.out.printf(\"Num tags: %d%n\", response.size()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-tags"
  returns:
    description: "A reactive response containing the blob's tags."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(BlobGetTagsOptions options)"
  name: "getTagsWithResponse(BlobGetTagsOptions options)"
  nameWithType: "BlobAsyncClientBase.getTagsWithResponse(BlobGetTagsOptions options)"
  summary: "Returns the blob's tags."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobGetTagsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobGetTagsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobGetTagsOptions?alt=com.azure.storage.blob.options.BlobGetTagsOptions&text=BlobGetTagsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Map<String,String>>> getTagsWithResponse(BlobGetTagsOptions options)"
  desc: "Returns the blob's tags.\n\n**Code Samples**\n\n```java\nclient.getTagsWithResponse(new BlobGetTagsOptions()).subscribe(response ->\n     System.out.printf(\"Status code: %d. Num tags: %d%n\", response.getStatusCode(), response.getValue().size()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/get-blob-tags"
  returns:
    description: "A reactive response containing the blob's tags."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(String versionId)"
  name: "getVersionClient(String versionId)"
  nameWithType: "BlobAsyncClientBase.getVersionClient(String versionId)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> linked to the `versionId` of this blob resource."
  parameters:
  - description: "the identifier for a specific version of this blob,\n pass <code>null</code> to interact with the latest blob version."
    name: "versionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClientBase getVersionClient(String versionId)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> linked to the `versionId` of this blob resource."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.specialized.BlobAsyncClientBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClientBase\"></xref> used to interact with the specific version."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()"
  name: "getVersionId()"
  nameWithType: "BlobAsyncClientBase.getVersionId()"
  summary: "Gets the version<wbr>Id for a blob resource"
  syntax: "public String getVersionId()"
  desc: "Gets the versionId for a blob resource"
  returns:
    description: "A string that represents the versionId of the snapshot blob"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()"
  name: "isSnapshot()"
  nameWithType: "BlobAsyncClientBase.isSnapshot()"
  summary: "Determines if a blob is a snapshot"
  syntax: "public boolean isSnapshot()"
  desc: "Determines if a blob is a snapshot"
  returns:
    description: "A boolean that indicates if a blob is a snapshot"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.query(String expression)"
  name: "query(String expression)"
  nameWithType: "BlobAsyncClientBase.query(String expression)"
  summary: "Queries the entire blob."
  parameters:
  - description: "The query expression."
    name: "expression"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ByteBuffer> query(String expression)"
  desc: "Queries the entire blob.\n\nFor more information, see the [Azure Docs][]\n\n**Code Samples**\n\n```java\nByteArrayOutputStream queryData = new ByteArrayOutputStream();\n String expression = \"SELECT * from BlobStorage\";\n client.query(expression).subscribe(piece -> {\n     try {\n         queryData.write(piece.array());\n     } catch (IOException ex) {\n         throw new UncheckedIOException(ex);\n     }\n });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/query-blob-contents"
  returns:
    description: "A reactive response containing the queried data."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(BlobQueryOptions queryOptions)"
  name: "queryWithResponse(BlobQueryOptions queryOptions)"
  nameWithType: "BlobAsyncClientBase.queryWithResponse(BlobQueryOptions queryOptions)"
  summary: "Queries the entire blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobQueryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"The query options\"></xref>."
    name: "queryOptions"
    type: "<xref href=\"com.azure.storage.blob.options.BlobQueryOptions?alt=com.azure.storage.blob.options.BlobQueryOptions&text=BlobQueryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobQueryAsyncResponse> queryWithResponse(BlobQueryOptions queryOptions)"
  desc: "Queries the entire blob.\n\nFor more information, see the [Azure Docs][]\n\n**Code Samples**\n\n```java\nString expression = \"SELECT * from BlobStorage\";\n BlobQueryJsonSerialization input = new BlobQueryJsonSerialization()\n     .setRecordSeparator('\\n');\n BlobQueryDelimitedSerialization output = new BlobQueryDelimitedSerialization()\n     .setEscapeChar('\\0')\n     .setColumnSeparator(',')\n     .setRecordSeparator('\\n')\n     .setFieldQuote('\\'')\n     .setHeadersPresent(true);\n BlobRequestConditions requestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n Consumer<BlobQueryError> errorConsumer = System.out::println;\n Consumer<BlobQueryProgress> progressConsumer = progress -> System.out.println(\"total blob bytes read: \"\n     + progress.getBytesScanned());\n BlobQueryOptions queryOptions = new BlobQueryOptions(expression)\n     .setInputSerialization(input)\n     .setOutputSerialization(output)\n     .setRequestConditions(requestConditions)\n     .setErrorConsumer(errorConsumer)\n     .setProgressConsumer(progressConsumer);\n\n client.queryWithResponse(queryOptions)\n     .subscribe(response -> {\n         ByteArrayOutputStream queryData = new ByteArrayOutputStream();\n         response.getValue().subscribe(piece -> {\n             try {\n                 queryData.write(piece.array());\n             } catch (IOException ex) {\n                 throw new UncheckedIOException(ex);\n             }\n         });\n     });\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/query-blob-contents"
  returns:
    description: "A reactive response containing the queried data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobQueryAsyncResponse?alt=com.azure.storage.blob.models.BlobQueryAsyncResponse&text=BlobQueryAsyncResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(AccessTier tier)"
  name: "setAccessTier(AccessTier tier)"
  nameWithType: "BlobAsyncClientBase.setAccessTier(AccessTier tier)"
  summary: "Sets the tier on a blob."
  parameters:
  - description: "The new tier for the blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> setAccessTier(AccessTier tier)"
  desc: "Sets the tier on a blob. The operation is allowed on a page blob in a premium storage account or a block blob in a blob storage or GPV2 account. A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block blob's tier determines the Hot/Cool/Archive storage type. This does not update the blob's etag.\n\n**Code Samples**\n\n```java\nclient.setAccessTier(AccessTier.HOT);\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-tier"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(AccessTier tier, RehydratePriority priority, String leaseId)"
  name: "setAccessTierWithResponse(AccessTier tier, RehydratePriority priority, String leaseId)"
  nameWithType: "BlobAsyncClientBase.setAccessTierWithResponse(AccessTier tier, RehydratePriority priority, String leaseId)"
  summary: "Sets the tier on a blob."
  parameters:
  - description: "The new tier for the blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "Optional priority to set for re-hydrating blobs."
    name: "priority"
    type: "<xref href=\"com.azure.storage.blob.models.RehydratePriority?alt=com.azure.storage.blob.models.RehydratePriority&text=RehydratePriority\" data-throw-if-not-resolved=\"False\" />"
  - description: "The lease ID the active lease on the blob must match."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setAccessTierWithResponse(AccessTier tier, RehydratePriority priority, String leaseId)"
  desc: "Sets the tier on a blob. The operation is allowed on a page blob in a premium storage account or a block blob in a blob storage or GPV2 account. A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block blob's tier determines the Hot/Cool/Archive storage type. This does not update the blob's etag.\n\n**Code Samples**\n\n```java\nclient.setAccessTierWithResponse(AccessTier.HOT, RehydratePriority.STANDARD, leaseId)\n     .subscribe(response -> System.out.printf(\"Set tier completed with status code %d%n\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-tier"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(BlobSetAccessTierOptions options)"
  name: "setAccessTierWithResponse(BlobSetAccessTierOptions options)"
  nameWithType: "BlobAsyncClientBase.setAccessTierWithResponse(BlobSetAccessTierOptions options)"
  summary: "Sets the tier on a blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobSetAccessTierOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobSetAccessTierOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobSetAccessTierOptions?alt=com.azure.storage.blob.options.BlobSetAccessTierOptions&text=BlobSetAccessTierOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setAccessTierWithResponse(BlobSetAccessTierOptions options)"
  desc: "Sets the tier on a blob. The operation is allowed on a page blob in a premium storage account or a block blob in a blob storage or GPV2 account. A premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block blob's tier determines the Hot/Cool/Archive storage type. This does not update the blob's etag.\n\n**Code Samples**\n\n```java\nclient.setAccessTierWithResponse(new BlobSetAccessTierOptions(AccessTier.HOT)\n     .setPriority(RehydratePriority.STANDARD)\n     .setLeaseId(leaseId)\n     .setTagsConditions(tags))\n     .subscribe(response -> System.out.printf(\"Set tier completed with status code %d%n\",\n         response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-tier"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(BlobHttpHeaders headers)"
  name: "setHttpHeaders(BlobHttpHeaders headers)"
  nameWithType: "BlobAsyncClientBase.setHttpHeaders(BlobHttpHeaders headers)"
  summary: "Changes a blob's HTTP header properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> setHttpHeaders(BlobHttpHeaders headers)"
  desc: "Changes a blob's HTTP header properties. if only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nclient.setHttpHeaders(new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(BlobHttpHeaders headers, BlobRequestConditions requestConditions)"
  name: "setHttpHeadersWithResponse(BlobHttpHeaders headers, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.setHttpHeadersWithResponse(BlobHttpHeaders headers, BlobRequestConditions requestConditions)"
  summary: "Changes a blob's HTTP header properties."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setHttpHeadersWithResponse(BlobHttpHeaders headers, BlobRequestConditions requestConditions)"
  desc: "Changes a blob's HTTP header properties. if only one HTTP header is updated, the others will all be erased. In order to preserve existing values, they must be passed alongside the header being changed.\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.setHttpHeadersWithResponse(new BlobHttpHeaders()\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\"), requestConditions).subscribe(\n         response ->\n             System.out.printf(\"Set HTTP headers completed with status %d%n\",\n                 response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-properties"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  name: "setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  nameWithType: "BlobAsyncClientBase.setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  summary: "Sets the immutability policy on a blob, blob snapshot or blob version."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"The immutability policy\"></xref>."
    name: "immutabilityPolicy"
    type: "<xref href=\"com.azure.storage.blob.models.BlobImmutabilityPolicy?alt=com.azure.storage.blob.models.BlobImmutabilityPolicy&text=BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobImmutabilityPolicy> setImmutabilityPolicy(BlobImmutabilityPolicy immutabilityPolicy)"
  desc: "Sets the immutability policy on a blob, blob snapshot or blob version.\n\nNOTE: Blob Versioning must be enabled on your storage account and the blob must be in a container with object level immutable policy enabled to call this API.\n\n**Code Samples**\n\n```java\nBlobImmutabilityPolicy policy = new BlobImmutabilityPolicy()\n     .setPolicyMode(BlobImmutabilityPolicyMode.LOCKED)\n     .setExpiryTime(OffsetDateTime.now().plusDays(1));\n client.setImmutabilityPolicy(policy).subscribe(response -> System.out.println(\"Completed. Set immutability \"\n     + \"policy to \" + response.getPolicyMode()));\n```"
  returns:
    description: "A reactive response containing the immutability policy."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobImmutabilityPolicy?alt=com.azure.storage.blob.models.BlobImmutabilityPolicy&text=BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicyWithResponse(com.azure.storage.blob.models.BlobImmutabilityPolicy,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicyWithResponse(BlobImmutabilityPolicy immutabilityPolicy, BlobRequestConditions requestConditions)"
  name: "setImmutabilityPolicyWithResponse(BlobImmutabilityPolicy immutabilityPolicy, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.setImmutabilityPolicyWithResponse(BlobImmutabilityPolicy immutabilityPolicy, BlobRequestConditions requestConditions)"
  summary: "Sets the immutability policy on a blob, blob snapshot or blob version."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"false\" data-raw-source=\"The immutability policy\"></xref>."
    name: "immutabilityPolicy"
    type: "<xref href=\"com.azure.storage.blob.models.BlobImmutabilityPolicy?alt=com.azure.storage.blob.models.BlobImmutabilityPolicy&text=BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobImmutabilityPolicy>> setImmutabilityPolicyWithResponse(BlobImmutabilityPolicy immutabilityPolicy, BlobRequestConditions requestConditions)"
  desc: "Sets the immutability policy on a blob, blob snapshot or blob version.\n\nNOTE: Blob Versioning must be enabled on your storage account and the blob must be in a container with immutable storage with versioning enabled to call this API.\n\n**Code Samples**\n\n```java\nBlobImmutabilityPolicy immutabilityPolicy = new BlobImmutabilityPolicy()\n     .setPolicyMode(BlobImmutabilityPolicyMode.LOCKED)\n     .setExpiryTime(OffsetDateTime.now().plusDays(1));\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(1));\n client.setImmutabilityPolicyWithResponse(immutabilityPolicy, requestConditions).subscribe(response ->\n     System.out.println(\"Completed. Set immutability policy to \" + response.getValue().getPolicyMode()));\n```"
  returns:
    description: "A reactive response containing the immutability policy."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobImmutabilityPolicy?alt=com.azure.storage.blob.models.BlobImmutabilityPolicy&text=BlobImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHold(boolean)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHold(boolean legalHold)"
  name: "setLegalHold(boolean legalHold)"
  nameWithType: "BlobAsyncClientBase.setLegalHold(boolean legalHold)"
  summary: "Sets a legal hold on the blob."
  parameters:
  - description: "Whether you want a legal hold on the blob."
    name: "legalHold"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlobLegalHoldResult> setLegalHold(boolean legalHold)"
  desc: "Sets a legal hold on the blob.\n\nNOTE: Blob Versioning must be enabled on your storage account and the blob must be in a container with object level immutable policy enabled to call this API.\n\n**Code Samples**\n\n```java\nclient.setLegalHold(true).subscribe(response -> System.out.println(\"Legal hold status: \"\n     + response.hasLegalHold()));\n```"
  returns:
    description: "A reactive response containing the legal hold result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobLegalHoldResult?alt=com.azure.storage.blob.models.BlobLegalHoldResult&text=BlobLegalHoldResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHoldWithResponse(boolean)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHoldWithResponse(boolean legalHold)"
  name: "setLegalHoldWithResponse(boolean legalHold)"
  nameWithType: "BlobAsyncClientBase.setLegalHoldWithResponse(boolean legalHold)"
  summary: "Sets a legal hold on the blob."
  parameters:
  - description: "Whether you want a legal hold on the blob."
    name: "legalHold"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlobLegalHoldResult>> setLegalHoldWithResponse(boolean legalHold)"
  desc: "Sets a legal hold on the blob.\n\nNOTE: Blob Versioning must be enabled on your storage account and the blob must be in a container with immutable storage with versioning enabled to call this API.\n\n**Code Samples**\n\n```java\nclient.setLegalHoldWithResponse(true).subscribe(response ->\n     System.out.println(\"Legal hold status: \" + response.getValue().hasLegalHold()));\n```"
  returns:
    description: "A reactive response containing the legal hold result."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlobLegalHoldResult?alt=com.azure.storage.blob.models.BlobLegalHoldResult&text=BlobLegalHoldResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(Map<String,String> metadata)"
  name: "setMetadata(Map<String,String> metadata)"
  nameWithType: "BlobAsyncClientBase.setMetadata(Map<String,String> metadata)"
  summary: "Changes a blob's metadata."
  parameters:
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setMetadata(Map<String,String> metadata)"
  desc: "Changes a blob's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nclient.setMetadata(Collections.singletonMap(\"metadata\", \"value\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  name: "setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClientBase.setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  summary: "Changes a blob's metadata."
  parameters:
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setMetadataWithResponse(Map<String,String> metadata, BlobRequestConditions requestConditions)"
  desc: "Changes a blob's metadata. The specified metadata in this method will replace existing metadata. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nBlobRequestConditions requestConditions = new BlobRequestConditions().setLeaseId(leaseId);\n\n client.setMetadataWithResponse(Collections.singletonMap(\"metadata\", \"value\"), requestConditions)\n     .subscribe(response -> System.out.printf(\"Set metadata completed with status %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(Map<String,String> tags)"
  name: "setTags(Map<String,String> tags)"
  nameWithType: "BlobAsyncClientBase.setTags(Map<String,String> tags)"
  summary: "Sets user defined tags."
  parameters:
  - description: "Tags to associate with the blob."
    name: "tags"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<Void> setTags(Map<String,String> tags)"
  desc: "Sets user defined tags. The specified tags in this method will replace existing tags. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nclient.setTags(Collections.singletonMap(\"tag\", \"value\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-tags"
  returns:
    description: "A reactive response signaling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(BlobSetTagsOptions options)"
  name: "setTagsWithResponse(BlobSetTagsOptions options)"
  nameWithType: "BlobAsyncClientBase.setTagsWithResponse(BlobSetTagsOptions options)"
  summary: "Sets user defined tags."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobSetTagsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobSetTagsOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobSetTagsOptions?alt=com.azure.storage.blob.options.BlobSetTagsOptions&text=BlobSetTagsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> setTagsWithResponse(BlobSetTagsOptions options)"
  desc: "Sets user defined tags. The specified tags in this method will replace existing tags. If old values must be preserved, they must be downloaded and included in the call to this method.\n\n**Code Samples**\n\n```java\nclient.setTagsWithResponse(new BlobSetTagsOptions(Collections.singletonMap(\"tag\", \"value\")))\n     .subscribe(response -> System.out.printf(\"Set tags completed with stats %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/set-blob-tags"
  returns:
    description: "A reactive response signaling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()"
  name: "undelete()"
  nameWithType: "BlobAsyncClientBase.undelete()"
  summary: "Undelete restores the content and metadata of a soft-deleted blob and/or any associated soft-deleted snapshots."
  syntax: "public Mono<Void> undelete()"
  desc: "Undelete restores the content and metadata of a soft-deleted blob and/or any associated soft-deleted snapshots.\n\n**Code Samples**\n\n```java\nclient.undelete().doOnSuccess(response -> System.out.println(\"Completed undelete\"));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/undelete-blob"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()"
  fullName: "com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()"
  name: "undeleteWithResponse()"
  nameWithType: "BlobAsyncClientBase.undeleteWithResponse()"
  summary: "Undelete restores the content and metadata of a soft-deleted blob and/or any associated soft-deleted snapshots."
  syntax: "public Mono<Response<Void>> undeleteWithResponse()"
  desc: "Undelete restores the content and metadata of a soft-deleted blob and/or any associated soft-deleted snapshots.\n\n**Code Samples**\n\n```java\nclient.undeleteWithResponse()\n     .subscribe(response -> System.out.printf(\"Undelete completed with status %d%n\", response.getStatusCode()));\n```\n\nFor more information, see the [Azure Docs][]\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/undelete-blob"
  returns:
    description: "A reactive response signalling completion."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains all operations that apply to any blob type.\n\nThis client offers the ability to download blobs. Note that uploading data is specific to each type of blob. Please refer to the <xref uid=\"com.azure.storage.blob.specialized.BlockBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobClient\"></xref>, <xref uid=\"com.azure.storage.blob.specialized.PageBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobClient\"></xref>, or <xref uid=\"com.azure.storage.blob.specialized.AppendBlobClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobClient\"></xref> for upload options."
metadata: {}
package: "com.azure.storage.blob.specialized"
artifact: com.azure:azure-storage-blob:12.18.0-beta.1
