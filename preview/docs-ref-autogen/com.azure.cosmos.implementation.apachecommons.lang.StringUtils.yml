### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  id: StringUtils
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang
  children:
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.EMPTY
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.INDEX_NOT_FOUND
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.SPACE
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.StringUtils()
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare(java.lang.String,java.lang.String,boolean)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsAny(java.lang.CharSequence,char...)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsNone(java.lang.CharSequence,char...)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.defaultString(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equals(java.lang.CharSequence,java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isEmpty(java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNotEmpty(java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNumeric(java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isWhitespace(java.lang.CharSequence)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Iterable<?>,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Object[],java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Object[],java.lang.String,int,int)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.util.Iterator<?>,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad(java.lang.String,int,char)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad(java.lang.String,int,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeEnd(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeStart(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(char,int)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(java.lang.String,int)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace(java.lang.String,java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace(java.lang.String,java.lang.String,java.lang.String,int)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String,char)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String,java.lang.String,int)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.strip(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripEnd(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripStart(java.lang.String,java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.substring(java.lang.String,int)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trim(java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trimToNull(java.lang.String)
  - com.azure.cosmos.implementation.apachecommons.lang.StringUtils.upperCase(java.lang.String)
  langs:
  - java
  name: StringUtils
  nameWithType: StringUtils
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  type: Class
  package: com.azure.cosmos.implementation.apachecommons.lang
  syntax:
    content: public class StringUtils
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.EMPTY
  id: EMPTY
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: EMPTY
  nameWithType: StringUtils.EMPTY
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.EMPTY
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: The empty String `""`.
  syntax:
    content: public static final String EMPTY
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.INDEX_NOT_FOUND
  id: INDEX_NOT_FOUND
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: INDEX_NOT_FOUND
  nameWithType: StringUtils.INDEX_NOT_FOUND
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.INDEX_NOT_FOUND
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Represents a failed index search.
  syntax:
    content: public static final int INDEX_NOT_FOUND
    return:
      type: int
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.SPACE
  id: SPACE
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: SPACE
  nameWithType: StringUtils.SPACE
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.SPACE
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: A String for a space character.
  syntax:
    content: public static final String SPACE
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.StringUtils()
  id: StringUtils()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: StringUtils()
  nameWithType: StringUtils.StringUtils()
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.StringUtils()
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.StringUtils*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    `StringUtils` instances should NOT be constructed in standard programming. Instead, the class should be used as `StringUtils.trim(" foo ");`.


    This constructor is public to permit tools that require a JavaBean instance to operate.
  syntax:
    content: public StringUtils()
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare(java.lang.String,java.lang.String)
  id: compare(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: compare(String str1, String str2)
  nameWithType: StringUtils.compare(String str1, String str2)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare(String str1, String str2)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Compare two Strings lexicographically, as per <xref uid="java.lang.String.compareTo*" data-throw-if-not-resolved="false">String#compareTo(String)</xref>, returning :

     *  `int = 0`, if `str1` is equal to `str2` (or both `null`)
     *  `int < 0`, if `str1` is less than `str2`
     *  `int > 0`, if `str1` is greater than `str2`

    This is a `null` safe version of :


    > ```

    > str1.compareTo(str2)

    > ```


    `null` value is considered less than non-`null` value. Two `null` references are considered equal.


    ```java

    StringUtils.compare(null, null)   = 0
     StringUtils.compare(null , "a")   < 0
     StringUtils.compare("a", null)    > 0
     StringUtils.compare("abc", "abc") = 0
     StringUtils.compare("a", "b")     < 0
     StringUtils.compare("b", "a")     > 0
     StringUtils.compare("a", "B")     > 0
     StringUtils.compare("ab", "abc")  < 0
    ```
  syntax:
    content: public static int compare(String str1, String str2)
    parameters:
    - id: str1
      type: java.lang.String
      description: the String to compare from
    - id: str2
      type: java.lang.String
      description: the String to compare to
    return:
      type: int
      description: '&lt; 0, 0, &gt; 0, if <code>str1</code> is respectively less, equal or greater than <code>str2</code>'
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare(java.lang.String,java.lang.String,boolean)
  id: compare(java.lang.String,java.lang.String,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: compare(String str1, String str2, boolean nullIsLess)
  nameWithType: StringUtils.compare(String str1, String str2, boolean nullIsLess)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare(String str1, String str2, boolean nullIsLess)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Compare two Strings lexicographically, as per <xref uid="java.lang.String.compareTo*" data-throw-if-not-resolved="false">String#compareTo(String)</xref>, returning :

     *  `int = 0`, if `str1` is equal to `str2` (or both `null`)
     *  `int < 0`, if `str1` is less than `str2`
     *  `int > 0`, if `str1` is greater than `str2`

    This is a `null` safe version of :


    > ```

    > str1.compareTo(str2)

    > ```


    `null` inputs are handled according to the `nullIsLess` parameter. Two `null` references are considered equal.


    ```java

    StringUtils.compare(null, null, *)     = 0
     StringUtils.compare(null , "a", true)  < 0
     StringUtils.compare(null , "a", false) > 0
     StringUtils.compare("a", null, true)   > 0
     StringUtils.compare("a", null, false)  < 0
     StringUtils.compare("abc", "abc", *)   = 0
     StringUtils.compare("a", "b", *)       < 0
     StringUtils.compare("b", "a", *)       > 0
     StringUtils.compare("a", "B", *)       > 0
     StringUtils.compare("ab", "abc", *)    < 0
    ```
  syntax:
    content: public static int compare(String str1, String str2, boolean nullIsLess)
    parameters:
    - id: str1
      type: java.lang.String
      description: the String to compare from
    - id: str2
      type: java.lang.String
      description: the String to compare to
    - id: nullIsLess
      type: boolean
      description: whether consider <code>null</code> value less than non-<code>null</code> value
    return:
      type: int
      description: '&lt; 0, 0, &gt; 0, if <code>str1</code> is respectively less, equal ou greater than <code>str2</code>'
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsAny(java.lang.CharSequence,char...)
  id: containsAny(java.lang.CharSequence,char...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: containsAny(CharSequence cs, char[] searchChars)
  nameWithType: StringUtils.containsAny(CharSequence cs, char[] searchChars)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsAny(CharSequence cs, char[] searchChars)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsAny*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Checks if the CharSequence contains any character in the given set of characters.


    A `null` CharSequence will return `false`. A `null` or zero length search array will return `false`.


    ```java

    StringUtils.containsAny(null, *)                = false
     StringUtils.containsAny("", *)                  = false
     StringUtils.containsAny(*, null)                = false
     StringUtils.containsAny(*, [])                  = false
     StringUtils.containsAny("zzabyycdxx",['z','a']) = true
     StringUtils.containsAny("zzabyycdxx",['b','y']) = true
     StringUtils.containsAny("zzabyycdxx",['z','y']) = true
     StringUtils.containsAny("aba", ['z'])           = false
    ```
  syntax:
    content: public static boolean containsAny(CharSequence cs, char[] searchChars)
    parameters:
    - id: cs
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    - id: searchChars
      type: char[]
      description: the chars to search for, may be null
    return:
      type: boolean
      description: >-
        the <code>true</code> if any of the chars are found,
         <code>false</code> if no match or null input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
  id: containsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: containsIgnoreCase(CharSequence str, CharSequence searchStr)
  nameWithType: StringUtils.containsIgnoreCase(CharSequence str, CharSequence searchStr)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsIgnoreCase(CharSequence str, CharSequence searchStr)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsIgnoreCase*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Checks if CharSequence contains a search CharSequence irrespective of case, handling `null`. Case-insensitivity is defined as by <xref uid="java.lang.String.equalsIgnoreCase*" data-throw-if-not-resolved="false">String#equalsIgnoreCase(String)</xref>.


    A `null` CharSequence will return `false`.


    ```java

    StringUtils.containsIgnoreCase(null, *) = false
     StringUtils.containsIgnoreCase(*, null) = false
     StringUtils.containsIgnoreCase("", "") = true
     StringUtils.containsIgnoreCase("abc", "") = true
     StringUtils.containsIgnoreCase("abc", "a") = true
     StringUtils.containsIgnoreCase("abc", "z") = false
     StringUtils.containsIgnoreCase("abc", "A") = true
     StringUtils.containsIgnoreCase("abc", "Z") = false
    ```
  syntax:
    content: public static boolean containsIgnoreCase(CharSequence str, CharSequence searchStr)
    parameters:
    - id: str
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    - id: searchStr
      type: java.lang.CharSequence
      description: the CharSequence to find, may be null
    return:
      type: boolean
      description: >-
        true if the CharSequence contains the search CharSequence irrespective of
         case or false if not or <code>null</code> string input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsNone(java.lang.CharSequence,char...)
  id: containsNone(java.lang.CharSequence,char...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: containsNone(CharSequence cs, char[] searchChars)
  nameWithType: StringUtils.containsNone(CharSequence cs, char[] searchChars)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsNone(CharSequence cs, char[] searchChars)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsNone*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Checks that the CharSequence does not contain certain characters.


    A `null` CharSequence will return `true`. A `null` invalid character array will return `true`. An empty CharSequence (length()=0) always returns true.


    ```java

    StringUtils.containsNone(null, *)       = true
     StringUtils.containsNone(*, null)       = true
     StringUtils.containsNone("", *)         = true
     StringUtils.containsNone("ab", '')      = true
     StringUtils.containsNone("abab", 'xyz') = true
     StringUtils.containsNone("ab1", 'xyz')  = true
     StringUtils.containsNone("abz", 'xyz')  = false
    ```
  syntax:
    content: public static boolean containsNone(CharSequence cs, char[] searchChars)
    parameters:
    - id: cs
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    - id: searchChars
      type: char[]
      description: an array of invalid chars, may be null
    return:
      type: boolean
      description: true if it contains none of the invalid chars, or is null
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.defaultString(java.lang.String,java.lang.String)
  id: defaultString(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: defaultString(String str, String defaultStr)
  nameWithType: StringUtils.defaultString(String str, String defaultStr)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.defaultString(String str, String defaultStr)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.defaultString*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Returns either the passed in String, or if the String is `null`, the value of `defaultStr`.


    ```java

    StringUtils.defaultString(null, "NULL")  = "NULL"
     StringUtils.defaultString("", "NULL")    = ""
     StringUtils.defaultString("bat", "NULL") = "bat"
    ```
  syntax:
    content: public static String defaultString(String str, String defaultStr)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to check, may be null
    - id: defaultStr
      type: java.lang.String
      description: >-
        the default String to return
          if the input is <code>null</code>, may be null
    return:
      type: java.lang.String
      description: the passed in String, or the default if it was <code>null</code>
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equals(java.lang.CharSequence,java.lang.CharSequence)
  id: equals(java.lang.CharSequence,java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: equals(CharSequence cs1, CharSequence cs2)
  nameWithType: StringUtils.equals(CharSequence cs1, CharSequence cs2)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equals(CharSequence cs1, CharSequence cs2)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equals*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Compares two CharSequences, returning `true` if they represent equal sequences of characters.
  syntax:
    content: public static boolean equals(CharSequence cs1, CharSequence cs2)
    parameters:
    - id: cs1
      type: java.lang.CharSequence
      description: the first CharSequence, may be <code>null</code>
    - id: cs2
      type: java.lang.CharSequence
      description: the second CharSequence, may be <code>null</code>
    return:
      type: boolean
      description: <code>true</code> if the CharSequences are equal (case-sensitive), or both <code>null</code>
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
  id: equalsIgnoreCase(java.lang.CharSequence,java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: equalsIgnoreCase(CharSequence str1, CharSequence str2)
  nameWithType: StringUtils.equalsIgnoreCase(CharSequence str1, CharSequence str2)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equalsIgnoreCase(CharSequence str1, CharSequence str2)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equalsIgnoreCase*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Compares two CharSequences, returning `true` if they represent equal sequences of characters, ignoring case.


    `null`s are handled without exceptions. Two `null` references are considered equal. Comparison is case insensitive.


    ```java

    StringUtils.equalsIgnoreCase(null, null)   = true
     StringUtils.equalsIgnoreCase(null, "abc")  = false
     StringUtils.equalsIgnoreCase("abc", null)  = false
     StringUtils.equalsIgnoreCase("abc", "abc") = true
     StringUtils.equalsIgnoreCase("abc", "ABC") = true
    ```
  syntax:
    content: public static boolean equalsIgnoreCase(CharSequence str1, CharSequence str2)
    parameters:
    - id: str1
      type: java.lang.CharSequence
      description: the first CharSequence, may be null
    - id: str2
      type: java.lang.CharSequence
      description: the second CharSequence, may be null
    return:
      type: boolean
      description: >-
        <code>true</code> if the CharSequence are equal, case insensitive, or
          both <code>null</code>
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isEmpty(java.lang.CharSequence)
  id: isEmpty(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: isEmpty(CharSequence cs)
  nameWithType: StringUtils.isEmpty(CharSequence cs)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isEmpty(CharSequence cs)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Checks if a CharSequence is empty ("") or null.
  syntax:
    content: public static boolean isEmpty(CharSequence cs)
    parameters:
    - id: cs
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    return:
      type: boolean
      description: <code>true</code> if the CharSequence is empty or null
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNotEmpty(java.lang.CharSequence)
  id: isNotEmpty(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: isNotEmpty(CharSequence cs)
  nameWithType: StringUtils.isNotEmpty(CharSequence cs)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNotEmpty(CharSequence cs)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNotEmpty*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Checks if a CharSequence is not empty ("") and not null.
  syntax:
    content: public static boolean isNotEmpty(CharSequence cs)
    parameters:
    - id: cs
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    return:
      type: boolean
      description: <code>true</code> if the CharSequence is not empty and not null
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNumeric(java.lang.CharSequence)
  id: isNumeric(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: isNumeric(CharSequence cs)
  nameWithType: StringUtils.isNumeric(CharSequence cs)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNumeric(CharSequence cs)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNumeric*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Checks if the CharSequence contains only Unicode digits. A decimal point is not a Unicode digit and returns false.


    `null` will return `false`. An empty CharSequence (length()=0) will return `false`.


    Note that the method does not allow for a leading sign, either positive or negative. Also, if a String passes the numeric test, it may still generate a NumberFormatException when parsed by Integer.parseInt or Long.parseLong, e.g. if the value is outside the range for int or long respectively.
  syntax:
    content: public static boolean isNumeric(CharSequence cs)
    parameters:
    - id: cs
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    return:
      type: boolean
      description: <code>true</code> if only contains digits, and is non-null
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isWhitespace(java.lang.CharSequence)
  id: isWhitespace(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: isWhitespace(CharSequence cs)
  nameWithType: StringUtils.isWhitespace(CharSequence cs)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isWhitespace(CharSequence cs)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isWhitespace*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Checks if the CharSequence contains only whitespace.
  syntax:
    content: public static boolean isWhitespace(CharSequence cs)
    parameters:
    - id: cs
      type: java.lang.CharSequence
      description: the CharSequence to check, may be null
    return:
      type: boolean
      description: <code>true</code> if only contains whitespace, and is non-null
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Iterable<?>,java.lang.String)
  id: join(java.lang.Iterable<?>,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: join(Iterable<?> iterable, String separator)
  nameWithType: StringUtils.join(Iterable<?> iterable, String separator)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(Iterable<?> iterable, String separator)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Joins the elements of the provided `Iterable` into a single String containing the provided elements.


    No delimiter is added before or after the list. A `null` separator is the same as an empty String ("").


    See the examples here: <xref uid="com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Object[],java.lang.String)" data-throw-if-not-resolved="false">#join(Object[],String)</xref>.
  syntax:
    content: public static String join(Iterable<?> iterable, String separator)
    parameters:
    - id: iterable
      type: java.lang.Iterable<?>
      description: the <code>Iterable</code> providing the values to join together, may be null
    - id: separator
      type: java.lang.String
      description: the separator character to use, null treated as ""
    return:
      type: java.lang.String
      description: the joined String, <code>null</code> if null iterator input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Object[],java.lang.String)
  id: join(java.lang.Object[],java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: join(Object[] array, String separator)
  nameWithType: StringUtils.join(Object[] array, String separator)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(Object[] array, String separator)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Joins the elements of the provided array into a single String containing the provided list of elements.


    No delimiter is added before or after the list. A `null` separator is the same as an empty String (""). Null objects or empty strings within the array are represented by empty strings.


    ```java

    StringUtils.join(null, *)                = null
     StringUtils.join([], *)                  = ""
     StringUtils.join([null], *)              = ""
     StringUtils.join(["a", "b", "c"], "--")  = "a--b--c"
     StringUtils.join(["a", "b", "c"], null)  = "abc"
     StringUtils.join(["a", "b", "c"], "")    = "abc"
     StringUtils.join([null, "", "a"], ',')   = ",,a"
    ```
  syntax:
    content: public static String join(Object[] array, String separator)
    parameters:
    - id: array
      type: java.lang.Object[]
      description: the array of values to join together, may be null
    - id: separator
      type: java.lang.String
      description: the separator character to use, null treated as ""
    return:
      type: java.lang.String
      description: the joined String, <code>null</code> if null array input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Object[],java.lang.String,int,int)
  id: join(java.lang.Object[],java.lang.String,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: join(Object[] array, String separator, int startIndex, int endIndex)
  nameWithType: StringUtils.join(Object[] array, String separator, int startIndex, int endIndex)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(Object[] array, String separator, int startIndex, int endIndex)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Joins the elements of the provided array into a single String containing the provided list of elements.


    No delimiter is added before or after the list. A `null` separator is the same as an empty String (""). Null objects or empty strings within the array are represented by empty strings.


    ```java

    StringUtils.join(null, *, *, *)                = null
     StringUtils.join([], *, *, *)                  = ""
     StringUtils.join([null], *, *, *)              = ""
     StringUtils.join(["a", "b", "c"], "--", 0, 3)  = "a--b--c"
     StringUtils.join(["a", "b", "c"], "--", 1, 3)  = "b--c"
     StringUtils.join(["a", "b", "c"], "--", 2, 3)  = "c"
     StringUtils.join(["a", "b", "c"], "--", 2, 2)  = ""
     StringUtils.join(["a", "b", "c"], null, 0, 3)  = "abc"
     StringUtils.join(["a", "b", "c"], "", 0, 3)    = "abc"
     StringUtils.join([null, "", "a"], ',', 0, 3)   = ",,a"
    ```
  syntax:
    content: public static String join(Object[] array, String separator, int startIndex, int endIndex)
    parameters:
    - id: array
      type: java.lang.Object[]
      description: the array of values to join together, may be null
    - id: separator
      type: java.lang.String
      description: the separator character to use, null treated as ""
    - id: startIndex
      type: int
      description: the first index to start joining from.
    - id: endIndex
      type: int
      description: the index to stop joining from (exclusive).
    return:
      type: java.lang.String
      description: >-
        the joined String, <code>null</code> if null array input; or the empty string
         if <code>endIndex - startIndex <= 0</code>. The number of joined entries is given by
         <code>endIndex - startIndex</code>
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.util.Iterator<?>,java.lang.String)
  id: join(java.util.Iterator<?>,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: join(Iterator<?> iterator, String separator)
  nameWithType: StringUtils.join(Iterator<?> iterator, String separator)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(Iterator<?> iterator, String separator)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Joins the elements of the provided `Iterator` into a single String containing the provided elements.


    No delimiter is added before or after the list. A `null` separator is the same as an empty String ("").


    See the examples here: <xref uid="com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join(java.lang.Object[],java.lang.String)" data-throw-if-not-resolved="false">#join(Object[],String)</xref>.
  syntax:
    content: public static String join(Iterator<?> iterator, String separator)
    parameters:
    - id: iterator
      type: java.util.Iterator<?>
      description: the <code>Iterator</code> of values to join together, may be null
    - id: separator
      type: java.lang.String
      description: the separator character to use, null treated as ""
    return:
      type: java.lang.String
      description: the joined String, <code>null</code> if null iterator input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad(java.lang.String,int,char)
  id: leftPad(java.lang.String,int,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: leftPad(String str, int size, char padChar)
  nameWithType: StringUtils.leftPad(String str, int size, char padChar)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad(String str, int size, char padChar)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Left pad a String with a specified character.


    Pad to a size of `size`.


    ```java

    StringUtils.leftPad(null, *, *)     = null
     StringUtils.leftPad("", 3, 'z')     = "zzz"
     StringUtils.leftPad("bat", 3, 'z')  = "bat"
     StringUtils.leftPad("bat", 5, 'z')  = "zzbat"
     StringUtils.leftPad("bat", 1, 'z')  = "bat"
     StringUtils.leftPad("bat", -1, 'z') = "bat"
    ```
  syntax:
    content: public static String leftPad(String str, int size, char padChar)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to pad out, may be null
    - id: size
      type: int
      description: the size to pad to
    - id: padChar
      type: char
      description: the character to pad with
    return:
      type: java.lang.String
      description: >-
        left padded String or original String if no padding is necessary,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad(java.lang.String,int,java.lang.String)
  id: leftPad(java.lang.String,int,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: leftPad(String str, int size, String padStr)
  nameWithType: StringUtils.leftPad(String str, int size, String padStr)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad(String str, int size, String padStr)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Left pad a String with a specified String.


    Pad to a size of `size`.


    ```java

    StringUtils.leftPad(null, *, *)      = null
     StringUtils.leftPad("", 3, "z")      = "zzz"
     StringUtils.leftPad("bat", 3, "yz")  = "bat"
     StringUtils.leftPad("bat", 5, "yz")  = "yzbat"
     StringUtils.leftPad("bat", 8, "yz")  = "yzyzybat"
     StringUtils.leftPad("bat", 1, "yz")  = "bat"
     StringUtils.leftPad("bat", -1, "yz") = "bat"
     StringUtils.leftPad("bat", 5, null)  = "  bat"
     StringUtils.leftPad("bat", 5, "")    = "  bat"
    ```
  syntax:
    content: public static String leftPad(String str, int size, String padStr)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to pad out, may be null
    - id: size
      type: int
      description: the size to pad to
    - id: padStr
      type: java.lang.String
      description: the String to pad with, null or empty treated as single space
    return:
      type: java.lang.String
      description: >-
        left padded String or original String if no padding is necessary,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeEnd(java.lang.String,java.lang.String)
  id: removeEnd(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: removeEnd(String str, String remove)
  nameWithType: StringUtils.removeEnd(String str, String remove)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeEnd(String str, String remove)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeEnd*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Removes a substring only if it is at the end of a source string, otherwise returns the source string.


    A `null` source string will return `null`. An empty ("") source string will return the empty string. A `null` search string will return the source string.


    ```java

    StringUtils.removeEnd(null, *)      = null
     StringUtils.removeEnd("", *)        = ""
     StringUtils.removeEnd(*, null)      = *
     StringUtils.removeEnd("www.domain.com", ".com.")  = "www.domain.com"
     StringUtils.removeEnd("www.domain.com", ".com")   = "www.domain"
     StringUtils.removeEnd("www.domain.com", "domain") = "www.domain.com"
     StringUtils.removeEnd("abc", "")    = "abc"
    ```
  syntax:
    content: public static String removeEnd(String str, String remove)
    parameters:
    - id: str
      type: java.lang.String
      description: the source String to search, may be null
    - id: remove
      type: java.lang.String
      description: the String to search for and remove, may be null
    return:
      type: java.lang.String
      description: >-
        the substring with the string removed if found,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeStart(java.lang.String,java.lang.String)
  id: removeStart(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: removeStart(String str, String remove)
  nameWithType: StringUtils.removeStart(String str, String remove)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeStart(String str, String remove)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeStart*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Removes a substring only if it is at the beginning of a source string, otherwise returns the source string.


    A `null` source string will return `null`. An empty ("") source string will return the empty string. A `null` search string will return the source string.


    ```java

    StringUtils.removeStart(null, *)      = null
     StringUtils.removeStart("", *)        = ""
     StringUtils.removeStart(*, null)      = *
     StringUtils.removeStart("www.domain.com", "www.")   = "domain.com"
     StringUtils.removeStart("domain.com", "www.")       = "domain.com"
     StringUtils.removeStart("www.domain.com", "domain") = "www.domain.com"
     StringUtils.removeStart("abc", "")    = "abc"
    ```
  syntax:
    content: public static String removeStart(String str, String remove)
    parameters:
    - id: str
      type: java.lang.String
      description: the source String to search, may be null
    - id: remove
      type: java.lang.String
      description: the String to search for and remove, may be null
    return:
      type: java.lang.String
      description: >-
        the substring with the string removed if found,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(char,int)
  id: repeat(char,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: repeat(char ch, int repeat)
  nameWithType: StringUtils.repeat(char ch, int repeat)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(char ch, int repeat)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Returns padding using the specified delimiter repeated to a given length.


    ```java

    StringUtils.repeat('e', 0)  = ""
     StringUtils.repeat('e', 3)  = "eee"
     StringUtils.repeat('e', -2) = ""
    ```


    Note: this method does not support padding with [Unicode Supplementary Characters][] as they require a pair of `char`s to be represented. If you are needing to support full I18N of your applications consider using <xref uid="com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(java.lang.String,int)" data-throw-if-not-resolved="false">#repeat(String, int)</xref> instead.



    [Unicode Supplementary Characters]: http://www.unicode.org/glossary/#supplementary_character
  syntax:
    content: public static String repeat(char ch, int repeat)
    parameters:
    - id: ch
      type: char
      description: character to repeat
    - id: repeat
      type: int
      description: number of times to repeat char, negative treated as zero
    return:
      type: java.lang.String
      description: String with repeated character
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(java.lang.String,int)
  id: repeat(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: repeat(String str, int repeat)
  nameWithType: StringUtils.repeat(String str, int repeat)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat(String str, int repeat)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Repeat a String `repeat` times to form a new String.


    ```java

    StringUtils.repeat(null, 2) = null
     StringUtils.repeat("", 0)   = ""
     StringUtils.repeat("", 2)   = ""
     StringUtils.repeat("a", 3)  = "aaa"
     StringUtils.repeat("ab", 2) = "abab"
     StringUtils.repeat("a", -2) = ""
    ```
  syntax:
    content: public static String repeat(String str, int repeat)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to repeat, may be null
    - id: repeat
      type: int
      description: number of times to repeat str, negative treated as zero
    return:
      type: java.lang.String
      description: >-
        a new String consisting of the original String repeated,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace(java.lang.String,java.lang.String,java.lang.String)
  id: replace(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: replace(String text, String searchString, String replacement)
  nameWithType: StringUtils.replace(String text, String searchString, String replacement)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace(String text, String searchString, String replacement)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Replaces all occurrences of a String within another String.


    A `null` reference passed to this method is a no-op.


    ```java

    StringUtils.replace(null, *, *)        = null
     StringUtils.replace("", *, *)          = ""
     StringUtils.replace("any", null, *)    = "any"
     StringUtils.replace("any", *, null)    = "any"
     StringUtils.replace("any", "", *)      = "any"
     StringUtils.replace("aba", "a", null)  = "aba"
     StringUtils.replace("aba", "a", "")    = "b"
     StringUtils.replace("aba", "a", "z")   = "zbz"
    ```
  syntax:
    content: public static String replace(String text, String searchString, String replacement)
    parameters:
    - id: text
      type: java.lang.String
      description: text to search and replace in, may be null
    - id: searchString
      type: java.lang.String
      description: the String to search for, may be null
    - id: replacement
      type: java.lang.String
      description: the String to replace it with, may be null
    return:
      type: java.lang.String
      description: >-
        the text with any replacements processed,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace(java.lang.String,java.lang.String,java.lang.String,int)
  id: replace(java.lang.String,java.lang.String,java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: replace(String text, String searchString, String replacement, int max)
  nameWithType: StringUtils.replace(String text, String searchString, String replacement, int max)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace(String text, String searchString, String replacement, int max)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Replaces a String with another String inside a larger String, for the first `max` values of the search String.


    A `null` reference passed to this method is a no-op.


    ```java

    StringUtils.replace(null, *, *, *)         = null
     StringUtils.replace("", *, *, *)           = ""
     StringUtils.replace("any", null, *, *)     = "any"
     StringUtils.replace("any", *, null, *)     = "any"
     StringUtils.replace("any", "", *, *)       = "any"
     StringUtils.replace("any", *, *, 0)        = "any"
     StringUtils.replace("abaa", "a", null, -1) = "abaa"
     StringUtils.replace("abaa", "a", "", -1)   = "b"
     StringUtils.replace("abaa", "a", "z", 0)   = "abaa"
     StringUtils.replace("abaa", "a", "z", 1)   = "zbaa"
     StringUtils.replace("abaa", "a", "z", 2)   = "zbza"
     StringUtils.replace("abaa", "a", "z", -1)  = "zbzz"
    ```
  syntax:
    content: public static String replace(String text, String searchString, String replacement, int max)
    parameters:
    - id: text
      type: java.lang.String
      description: text to search and replace in, may be null
    - id: searchString
      type: java.lang.String
      description: the String to search for, may be null
    - id: replacement
      type: java.lang.String
      description: the String to replace it with, may be null
    - id: max
      type: int
      description: maximum number of values to replace, or <code>-1</code> if no maximum
    return:
      type: java.lang.String
      description: >-
        the text with any replacements processed,
          <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String)
  id: split(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: split(String str)
  nameWithType: StringUtils.split(String str)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(String str)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Splits the provided text into an array, using whitespace as the separator. Whitespace is defined by <xref uid="java.lang.Character.isWhitespace*" data-throw-if-not-resolved="false">Character#isWhitespace(char)</xref>.


    The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.


    A `null` input String returns `null`.


    ```java

    StringUtils.split(null)       = null
     StringUtils.split("")         = []
     StringUtils.split("abc def")  = ["abc", "def"]
     StringUtils.split("abc  def") = ["abc", "def"]
     StringUtils.split(" abc ")    = ["abc"]
    ```
  syntax:
    content: public static String[] split(String str)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to parse, may be null
    return:
      type: java.lang.String[]
      description: an array of parsed Strings, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String,char)
  id: split(java.lang.String,char)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: split(String str, char separatorChar)
  nameWithType: StringUtils.split(String str, char separatorChar)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(String str, char separatorChar)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Splits the provided text into an array, separator specified. This is an alternative to using StringTokenizer.


    The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.


    A `null` input String returns `null`.


    ```java

    StringUtils.split(null, *)         = null
     StringUtils.split("", *)           = []
     StringUtils.split("a.b.c", '.')    = ["a", "b", "c"]
     StringUtils.split("a..b.c", '.')   = ["a", "b", "c"]
     StringUtils.split("a:b:c", '.')    = ["a:b:c"]
     StringUtils.split("a b c", ' ')    = ["a", "b", "c"]
    ```
  syntax:
    content: public static String[] split(String str, char separatorChar)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to parse, may be null
    - id: separatorChar
      type: char
      description: the character used as the delimiter
    return:
      type: java.lang.String[]
      description: an array of parsed Strings, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String,java.lang.String)
  id: split(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: split(String str, String separatorChars)
  nameWithType: StringUtils.split(String str, String separatorChars)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(String str, String separatorChars)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Splits the provided text into an array, separators specified. This is an alternative to using StringTokenizer.


    The separator is not included in the returned String array. Adjacent separators are treated as one separator. For more control over the split use the StrTokenizer class.


    A `null` input String returns `null`. A `null` separatorChars splits on whitespace.


    ```java

    StringUtils.split(null, *)         = null
     StringUtils.split("", *)           = []
     StringUtils.split("abc def", null) = ["abc", "def"]
     StringUtils.split("abc def", " ")  = ["abc", "def"]
     StringUtils.split("abc  def", " ") = ["abc", "def"]
     StringUtils.split("ab:cd:ef", ":") = ["ab", "cd", "ef"]
    ```
  syntax:
    content: public static String[] split(String str, String separatorChars)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to parse, may be null
    - id: separatorChars
      type: java.lang.String
      description: >-
        the characters used as the delimiters,
          <code>null</code> splits on whitespace
    return:
      type: java.lang.String[]
      description: an array of parsed Strings, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(java.lang.String,java.lang.String,int)
  id: split(java.lang.String,java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: split(String str, String separatorChars, int max)
  nameWithType: StringUtils.split(String str, String separatorChars, int max)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split(String str, String separatorChars, int max)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Splits the provided text into an array with a maximum length, separators specified.


    The separator is not included in the returned String array. Adjacent separators are treated as one separator.


    A `null` input String returns `null`. A `null` separatorChars splits on whitespace.


    If more than `max` delimited substrings are found, the last returned string includes all characters after the first `max - 1` returned strings (including separator characters).


    ```java

    StringUtils.split(null, *, *)            = null
     StringUtils.split("", *, *)              = []
     StringUtils.split("ab cd ef", null, 0)   = ["ab", "cd", "ef"]
     StringUtils.split("ab   cd ef", null, 0) = ["ab", "cd", "ef"]
     StringUtils.split("ab:cd:ef", ":", 0)    = ["ab", "cd", "ef"]
     StringUtils.split("ab:cd:ef", ":", 2)    = ["ab", "cd:ef"]
    ```
  syntax:
    content: public static String[] split(String str, String separatorChars, int max)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to parse, may be null
    - id: separatorChars
      type: java.lang.String
      description: >-
        the characters used as the delimiters,
          <code>null</code> splits on whitespace
    - id: max
      type: int
      description: >-
        the maximum number of elements to include in the
          array. A zero or negative value implies no limit
    return:
      type: java.lang.String[]
      description: an array of parsed Strings, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.strip(java.lang.String,java.lang.String)
  id: strip(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: strip(String str, String stripChars)
  nameWithType: StringUtils.strip(String str, String stripChars)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.strip(String str, String stripChars)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.strip*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Strips any of a set of characters from the start and end of a String. This is similar to <xref uid="java.lang.String.trim*" data-throw-if-not-resolved="false">String#trim()</xref> but allows the characters to be stripped to be controlled.
  syntax:
    content: public static String strip(String str, String stripChars)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to remove characters from, may be null
    - id: stripChars
      type: java.lang.String
      description: the characters to remove, null treated as whitespace
    return:
      type: java.lang.String
      description: the stripped String, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripEnd(java.lang.String,java.lang.String)
  id: stripEnd(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: stripEnd(String str, String stripChars)
  nameWithType: StringUtils.stripEnd(String str, String stripChars)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripEnd(String str, String stripChars)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripEnd*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Strips any of a set of characters from the end of a String.
  syntax:
    content: public static String stripEnd(String str, String stripChars)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to remove characters from, may be null
    - id: stripChars
      type: java.lang.String
      description: the set of characters to remove, null treated as whitespace
    return:
      type: java.lang.String
      description: the stripped String, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripStart(java.lang.String,java.lang.String)
  id: stripStart(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: stripStart(String str, String stripChars)
  nameWithType: StringUtils.stripStart(String str, String stripChars)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripStart(String str, String stripChars)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripStart*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Strips any of a set of characters from the start of a String.
  syntax:
    content: public static String stripStart(String str, String stripChars)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to remove characters from, may be null
    - id: stripChars
      type: java.lang.String
      description: the characters to remove, null treated as whitespace
    return:
      type: java.lang.String
      description: the stripped String, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.substring(java.lang.String,int)
  id: substring(java.lang.String,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: substring(String str, int start)
  nameWithType: StringUtils.substring(String str, int start)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.substring(String str, int start)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.substring*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Gets a substring from the specified String avoiding exceptions.


    A negative start position can be used to start `n` characters from the end of the String.


    A `null` String will return `null`. An empty ("") String will return "".


    ```java

    StringUtils.substring(null, *)   = null
     StringUtils.substring("", *)     = ""
     StringUtils.substring("abc", 0)  = "abc"
     StringUtils.substring("abc", 2)  = "c"
     StringUtils.substring("abc", 4)  = ""
     StringUtils.substring("abc", -2) = "bc"
     StringUtils.substring("abc", -4) = "abc"
    ```
  syntax:
    content: public static String substring(String str, int start)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to get the substring from, may be null
    - id: start
      type: int
      description: >-
        the position to start from, negative means
          count back from the end of the String by this many characters
    return:
      type: java.lang.String
      description: substring from start position, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trim(java.lang.String)
  id: trim(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: trim(String str)
  nameWithType: StringUtils.trim(String str)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trim(String str)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trim*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Removes control characters (char <= 32) from both ends of this String, handling `null` by returning `null`.
  syntax:
    content: public static String trim(String str)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to be trimmed, may be null
    return:
      type: java.lang.String
      description: the trimmed string, <code>null</code> if null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trimToNull(java.lang.String)
  id: trimToNull(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: trimToNull(String str)
  nameWithType: StringUtils.trimToNull(String str)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trimToNull(String str)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trimToNull*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: Removes control characters (char <= 32) from both ends of this String returning `null` if the String is empty ("") after the trim or if it is `null`.
  syntax:
    content: public static String trimToNull(String str)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to be trimmed, may be null
    return:
      type: java.lang.String
      description: >-
        the trimmed String,
          <code>null</code> if only chars &lt;= 32, empty or null String input
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.upperCase(java.lang.String)
  id: upperCase(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.lang.StringUtils
  langs:
  - java
  name: upperCase(String str)
  nameWithType: StringUtils.upperCase(String str)
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.upperCase(String str)
  overload: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.upperCase*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.lang
  summary: >-
    Converts a String to upper case as per <xref uid="java.lang.String.toUpperCase*" data-throw-if-not-resolved="false">String#toUpperCase()</xref>.


    A `null` input String returns `null`.
  syntax:
    content: public static String upperCase(String str)
    parameters:
    - id: str
      type: java.lang.String
      description: the String to upper case, may be null
    return:
      type: java.lang.String
      description: the upper cased String, <code>null</code> if null String input
references:
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.StringUtils*
  name: StringUtils
  nameWithType: StringUtils.StringUtils
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.StringUtils
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isEmpty*
  name: isEmpty
  nameWithType: StringUtils.isEmpty
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isEmpty
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNotEmpty*
  name: isNotEmpty
  nameWithType: StringUtils.isNotEmpty
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNotEmpty
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trim*
  name: trim
  nameWithType: StringUtils.trim
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trim
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trimToNull*
  name: trimToNull
  nameWithType: StringUtils.trimToNull
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.trimToNull
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.strip*
  name: strip
  nameWithType: StringUtils.strip
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.strip
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripStart*
  name: stripStart
  nameWithType: StringUtils.stripStart
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripStart
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripEnd*
  name: stripEnd
  nameWithType: StringUtils.stripEnd
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.stripEnd
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equals*
  name: equals
  nameWithType: StringUtils.equals
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equals
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equalsIgnoreCase*
  name: equalsIgnoreCase
  nameWithType: StringUtils.equalsIgnoreCase
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.equalsIgnoreCase
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare*
  name: compare
  nameWithType: StringUtils.compare
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.compare
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsIgnoreCase*
  name: containsIgnoreCase
  nameWithType: StringUtils.containsIgnoreCase
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsIgnoreCase
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsAny*
  name: containsAny
  nameWithType: StringUtils.containsAny
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsAny
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsNone*
  name: containsNone
  nameWithType: StringUtils.containsNone
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.containsNone
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.substring*
  name: substring
  nameWithType: StringUtils.substring
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.substring
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split*
  name: split
  nameWithType: StringUtils.split
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.split
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join*
  name: join
  nameWithType: StringUtils.join
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.join
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.util.Iterator<?>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.Iterable<?>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeStart*
  name: removeStart
  nameWithType: StringUtils.removeStart
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeStart
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeEnd*
  name: removeEnd
  nameWithType: StringUtils.removeEnd
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.removeEnd
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace*
  name: replace
  nameWithType: StringUtils.replace
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.replace
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat*
  name: repeat
  nameWithType: StringUtils.repeat
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.repeat
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad*
  name: leftPad
  nameWithType: StringUtils.leftPad
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.leftPad
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.upperCase*
  name: upperCase
  nameWithType: StringUtils.upperCase
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.upperCase
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNumeric*
  name: isNumeric
  nameWithType: StringUtils.isNumeric
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isNumeric
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isWhitespace*
  name: isWhitespace
  nameWithType: StringUtils.isWhitespace
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.isWhitespace
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.defaultString*
  name: defaultString
  nameWithType: StringUtils.defaultString
  fullName: com.azure.cosmos.implementation.apachecommons.lang.StringUtils.defaultString
  package: com.azure.cosmos.implementation.apachecommons.lang
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
