### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.math.IntMath
  id: IntMath
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math
  children:
  - com.azure.cosmos.implementation.guava25.math.IntMath.binomial(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.ceilingPowerOfTwo(int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.checkedAdd(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.checkedMultiply(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.checkedSubtract(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.divide(int,int,java.math.RoundingMode)
  - com.azure.cosmos.implementation.guava25.math.IntMath.factorial(int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.floorPowerOfTwo(int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.gcd(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.isPowerOfTwo(int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.isPrime(int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.log10(int,java.math.RoundingMode)
  - com.azure.cosmos.implementation.guava25.math.IntMath.log2(int,java.math.RoundingMode)
  - com.azure.cosmos.implementation.guava25.math.IntMath.mean(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.mod(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.pow(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.saturatedAdd(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.saturatedMultiply(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.saturatedPow(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.saturatedSubtract(int,int)
  - com.azure.cosmos.implementation.guava25.math.IntMath.sqrt(int,java.math.RoundingMode)
  langs:
  - java
  name: IntMath
  nameWithType: IntMath
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath
  type: Class
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    A class for arithmetic on values of type `int`. Where possible, methods are defined and named analogously to their `BigInteger` counterparts.


    The implementations of many methods in this class are based on material from Henry S. Warren, Jr.'s *Hacker's Delight*, (Addison Wesley, 2002).


    Similar functionality for `long` and for <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> can be found in <xref uid="com.azure.cosmos.implementation.guava25.math.LongMath" data-throw-if-not-resolved="false">LongMath</xref> and <xref uid="" data-throw-if-not-resolved="false">BigIntegerMath</xref> respectively. For other common operations on `int` values, see <xref uid="com.azure.cosmos.implementation.guava25.primitives.Ints" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.primitives.Ints</xref>.
  syntax:
    content: public final class IntMath
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.IntMath()
  id: IntMath()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: IntMath()
  nameWithType: IntMath.IntMath()
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.IntMath()
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.IntMath*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.math
  syntax:
    content: private IntMath()
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.binomial(int,int)
  id: binomial(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: binomial(int n, int k)
  nameWithType: IntMath.binomial(int n, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.binomial(int n, int k)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.binomial*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns `n` choose `k`, also known as the binomial coefficient of `n` and `k`, or <xref uid="java.lang.Integer.MAX_VALUE" data-throw-if-not-resolved="false">Integer#MAX_VALUE</xref> if the result does not fit in an `int`.
  syntax:
    content: public static int binomial(int n, int k)
    parameters:
    - id: n
      type: int
    - id: k
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.ceilingPowerOfTwo(int)
  id: ceilingPowerOfTwo(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: ceilingPowerOfTwo(int x)
  nameWithType: IntMath.ceilingPowerOfTwo(int x)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.ceilingPowerOfTwo(int x)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.ceilingPowerOfTwo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the smallest power of two greater than or equal to `x`. This is equivalent to `checkedPow(2, log2(x, CEILING))`.
  syntax:
    content: public static int ceilingPowerOfTwo(int x)
    parameters:
    - id: x
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedAdd(int,int)
  id: checkedAdd(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: checkedAdd(int a, int b)
  nameWithType: IntMath.checkedAdd(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedAdd(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.checkedAdd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the sum of `a` and `b`, provided it does not overflow.
  syntax:
    content: public static int checkedAdd(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedMultiply(int,int)
  id: checkedMultiply(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: checkedMultiply(int a, int b)
  nameWithType: IntMath.checkedMultiply(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedMultiply(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.checkedMultiply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the product of `a` and `b`, provided it does not overflow.
  syntax:
    content: public static int checkedMultiply(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow(int,int)
  id: checkedPow(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: checkedPow(int b, int k)
  nameWithType: IntMath.checkedPow(int b, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow(int b, int k)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns the `b` to the `k`th power, provided it does not overflow.


    <xref uid="com.azure.cosmos.implementation.guava25.math.IntMath.pow*" data-throw-if-not-resolved="false">#pow</xref> may be faster, but does not check for overflow.
  syntax:
    content: public static int checkedPow(int b, int k)
    parameters:
    - id: b
      type: int
    - id: k
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedSubtract(int,int)
  id: checkedSubtract(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: checkedSubtract(int a, int b)
  nameWithType: IntMath.checkedSubtract(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedSubtract(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.checkedSubtract*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the difference of `a` and `b`, provided it does not overflow.
  syntax:
    content: public static int checkedSubtract(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.divide(int,int,java.math.RoundingMode)
  id: divide(int,int,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: divide(int p, int q, RoundingMode mode)
  nameWithType: IntMath.divide(int p, int q, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.divide(int p, int q, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.divide*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the result of dividing `p` by `q`, rounding using the specified `RoundingMode`.
  syntax:
    content: public static int divide(int p, int q, RoundingMode mode)
    parameters:
    - id: p
      type: int
    - id: q
      type: int
    - id: mode
      type: java.math.RoundingMode
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.factorial(int)
  id: factorial(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: factorial(int n)
  nameWithType: IntMath.factorial(int n)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.factorial(int n)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.factorial*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns `n!`, that is, the product of the first `n` positive integers, `1` if `n == 0`, or <xref uid="java.lang.Integer.MAX_VALUE" data-throw-if-not-resolved="false">Integer#MAX_VALUE</xref> if the result does not fit in a `int`.
  syntax:
    content: public static int factorial(int n)
    parameters:
    - id: n
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.floorPowerOfTwo(int)
  id: floorPowerOfTwo(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: floorPowerOfTwo(int x)
  nameWithType: IntMath.floorPowerOfTwo(int x)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.floorPowerOfTwo(int x)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.floorPowerOfTwo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the largest power of two less than or equal to `x`. This is equivalent to `checkedPow(2, log2(x, FLOOR))`.
  syntax:
    content: public static int floorPowerOfTwo(int x)
    parameters:
    - id: x
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.gcd(int,int)
  id: gcd(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: gcd(int a, int b)
  nameWithType: IntMath.gcd(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.gcd(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.gcd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the greatest common divisor of `a, b`. Returns `0` if `a == 0 && b == 0`.
  syntax:
    content: public static int gcd(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.isPowerOfTwo(int)
  id: isPowerOfTwo(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: isPowerOfTwo(int x)
  nameWithType: IntMath.isPowerOfTwo(int x)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.isPowerOfTwo(int x)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.isPowerOfTwo*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `true` if `x` represents a power of two.


    This differs from `Integer.bitCount(x) == 1`, because `Integer.bitCount(Integer.MIN_VALUE) == 1`, but <xref uid="java.lang.Integer.MIN_VALUE" data-throw-if-not-resolved="false">Integer#MIN_VALUE</xref> is not a power of two.
  syntax:
    content: public static boolean isPowerOfTwo(int x)
    parameters:
    - id: x
      type: int
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.isPrime(int)
  id: isPrime(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: isPrime(int n)
  nameWithType: IntMath.isPrime(int n)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.isPrime(int n)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.isPrime*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `true` if `n` is a [prime number][]: an integer *greater than one* that cannot be factored into a product of *smaller* positive integers. Returns `false` if `n` is zero, one, or a composite number (one which *can* be factored into smaller positive integers).


    To test larger numbers, use <xref uid="com.azure.cosmos.implementation.guava25.math.LongMath.isPrime*" data-throw-if-not-resolved="false">LongMath#isPrime</xref> or <xref uid="java.math.BigInteger.isProbablePrime" data-throw-if-not-resolved="false">BigInteger#isProbablePrime</xref>.



    [prime number]: http://mathworld.wolfram.com/PrimeNumber.html
  syntax:
    content: public static boolean isPrime(int n)
    parameters:
    - id: n
      type: int
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.log10(int,java.math.RoundingMode)
  id: log10(int,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: log10(int x, RoundingMode mode)
  nameWithType: IntMath.log10(int x, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.log10(int x, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.log10*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the base-10 logarithm of `x`, rounded according to the specified rounding mode.
  syntax:
    content: public static int log10(int x, RoundingMode mode)
    parameters:
    - id: x
      type: int
    - id: mode
      type: java.math.RoundingMode
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.log2(int,java.math.RoundingMode)
  id: log2(int,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: log2(int x, RoundingMode mode)
  nameWithType: IntMath.log2(int x, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.log2(int x, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.log2*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the base-2 logarithm of `x`, rounded according to the specified rounding mode.
  syntax:
    content: public static int log2(int x, RoundingMode mode)
    parameters:
    - id: x
      type: int
    - id: mode
      type: java.math.RoundingMode
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.mean(int,int)
  id: mean(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: mean(int x, int y)
  nameWithType: IntMath.mean(int x, int y)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.mean(int x, int y)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.mean*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the arithmetic mean of `x` and `y`, rounded towards negative infinity. This method is overflow resilient.
  syntax:
    content: public static int mean(int x, int y)
    parameters:
    - id: x
      type: int
    - id: y
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.mod(int,int)
  id: mod(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: mod(int x, int m)
  nameWithType: IntMath.mod(int x, int m)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.mod(int x, int m)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.mod*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `x mod m`, a non-negative value less than `m`. This differs from `x % m`, which might be negative.


    For example:


    ```java

    mod(7, 4) == 3
     mod(-7, 4) == 1
     mod(-1, 4) == 3
     mod(-8, 4) == 0
     mod(8, 4) == 0
    ```
  syntax:
    content: public static int mod(int x, int m)
    parameters:
    - id: x
      type: int
    - id: m
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.pow(int,int)
  id: pow(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: pow(int b, int k)
  nameWithType: IntMath.pow(int b, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.pow(int b, int k)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.pow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: >-
    Returns `b` to the `k`th power. Even if the result overflows, it will be equal to `BigInteger.valueOf(b).pow(k).intValue()`. This implementation runs in `O(log k)` time.


    Compare <xref uid="com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow*" data-throw-if-not-resolved="false">#checkedPow</xref>, which throws an <xref uid="" data-throw-if-not-resolved="false">ArithmeticException</xref> upon overflow.
  syntax:
    content: public static int pow(int b, int k)
    parameters:
    - id: b
      type: int
    - id: k
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedAdd(int,int)
  id: saturatedAdd(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: saturatedAdd(int a, int b)
  nameWithType: IntMath.saturatedAdd(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedAdd(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedAdd*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the sum of `a` and `b` unless it would overflow or underflow in which case `Integer.MAX_VALUE` or `Integer.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static int saturatedAdd(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedMultiply(int,int)
  id: saturatedMultiply(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: saturatedMultiply(int a, int b)
  nameWithType: IntMath.saturatedMultiply(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedMultiply(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedMultiply*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the product of `a` and `b` unless it would overflow or underflow in which case `Integer.MAX_VALUE` or `Integer.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static int saturatedMultiply(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedPow(int,int)
  id: saturatedPow(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: saturatedPow(int b, int k)
  nameWithType: IntMath.saturatedPow(int b, int k)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedPow(int b, int k)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedPow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the `b` to the `k`th power, unless it would overflow or underflow in which case `Integer.MAX_VALUE` or `Integer.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static int saturatedPow(int b, int k)
    parameters:
    - id: b
      type: int
    - id: k
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedSubtract(int,int)
  id: saturatedSubtract(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: saturatedSubtract(int a, int b)
  nameWithType: IntMath.saturatedSubtract(int a, int b)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedSubtract(int a, int b)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedSubtract*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the difference of `a` and `b` unless it would overflow or underflow in which case `Integer.MAX_VALUE` or `Integer.MIN_VALUE` is returned, respectively.
  syntax:
    content: public static int saturatedSubtract(int a, int b)
    parameters:
    - id: a
      type: int
    - id: b
      type: int
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.sqrt(int,java.math.RoundingMode)
  id: sqrt(int,java.math.RoundingMode)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.math.IntMath
  langs:
  - java
  name: sqrt(int x, RoundingMode mode)
  nameWithType: IntMath.sqrt(int x, RoundingMode mode)
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.sqrt(int x, RoundingMode mode)
  overload: com.azure.cosmos.implementation.guava25.math.IntMath.sqrt*
  type: Method
  package: com.azure.cosmos.implementation.guava25.math
  summary: Returns the square root of `x`, rounded with the specified rounding mode.
  syntax:
    content: public static int sqrt(int x, RoundingMode mode)
    parameters:
    - id: x
      type: int
    - id: mode
      type: java.math.RoundingMode
    return:
      type: int
references:
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.IntMath*
  name: IntMath
  nameWithType: IntMath.IntMath
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.IntMath
  package: com.azure.cosmos.implementation.guava25.math
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.ceilingPowerOfTwo*
  name: ceilingPowerOfTwo
  nameWithType: IntMath.ceilingPowerOfTwo
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.ceilingPowerOfTwo
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.floorPowerOfTwo*
  name: floorPowerOfTwo
  nameWithType: IntMath.floorPowerOfTwo
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.floorPowerOfTwo
  package: com.azure.cosmos.implementation.guava25.math
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.isPowerOfTwo*
  name: isPowerOfTwo
  nameWithType: IntMath.isPowerOfTwo
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.isPowerOfTwo
  package: com.azure.cosmos.implementation.guava25.math
- uid: java.math.RoundingMode
  spec.java:
  - uid: java.math.RoundingMode
    name: RoundingMode
    fullName: java.math.RoundingMode
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.log2*
  name: log2
  nameWithType: IntMath.log2
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.log2
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.log10*
  name: log10
  nameWithType: IntMath.log10
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.log10
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.pow*
  name: pow
  nameWithType: IntMath.pow
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.pow
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.sqrt*
  name: sqrt
  nameWithType: IntMath.sqrt
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.sqrt
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.divide*
  name: divide
  nameWithType: IntMath.divide
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.divide
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.mod*
  name: mod
  nameWithType: IntMath.mod
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.mod
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.gcd*
  name: gcd
  nameWithType: IntMath.gcd
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.gcd
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedAdd*
  name: checkedAdd
  nameWithType: IntMath.checkedAdd
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedAdd
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedSubtract*
  name: checkedSubtract
  nameWithType: IntMath.checkedSubtract
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedSubtract
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedMultiply*
  name: checkedMultiply
  nameWithType: IntMath.checkedMultiply
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedMultiply
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow*
  name: checkedPow
  nameWithType: IntMath.checkedPow
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.checkedPow
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedAdd*
  name: saturatedAdd
  nameWithType: IntMath.saturatedAdd
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedAdd
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedSubtract*
  name: saturatedSubtract
  nameWithType: IntMath.saturatedSubtract
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedSubtract
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedMultiply*
  name: saturatedMultiply
  nameWithType: IntMath.saturatedMultiply
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedMultiply
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedPow*
  name: saturatedPow
  nameWithType: IntMath.saturatedPow
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.saturatedPow
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.factorial*
  name: factorial
  nameWithType: IntMath.factorial
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.factorial
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.binomial*
  name: binomial
  nameWithType: IntMath.binomial
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.binomial
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.mean*
  name: mean
  nameWithType: IntMath.mean
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.mean
  package: com.azure.cosmos.implementation.guava25.math
- uid: com.azure.cosmos.implementation.guava25.math.IntMath.isPrime*
  name: isPrime
  nameWithType: IntMath.isPrime
  fullName: com.azure.cosmos.implementation.guava25.math.IntMath.isPrime
  package: com.azure.cosmos.implementation.guava25.math
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
