### YamlMime:JavaType
uid: "com.azure.maps.timezone.TimeZoneAsyncClient"
fullName: "com.azure.maps.timezone.TimeZoneAsyncClient"
name: "TimeZoneAsyncClient"
nameWithType: "TimeZoneAsyncClient"
summary: "Initializes a new instance of the asynchronous Time<wbr>Zone<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **TimeZoneAsyncClient**"
methods:
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.convertWindowsTimezoneToIana(java.lang.String,java.lang.String)"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.convertWindowsTimezoneToIana(String windowsTimezoneId, String windowsTerritoryCode)"
  name: "convertWindowsTimezoneToIana(String windowsTimezoneId, String windowsTerritoryCode)"
  nameWithType: "TimeZoneAsyncClient.convertWindowsTimezoneToIana(String windowsTimezoneId, String windowsTerritoryCode)"
  summary: "\\_\\_Windows to IANA Time Zone\\_\\_"
  parameters:
  - description: "The Windows time zone ID."
    name: "windowsTimezoneId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Windows Time Zone territory code."
    name: "windowsTerritoryCode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<List<IanaId>> convertWindowsTimezoneToIana(String windowsTimezoneId, String windowsTerritoryCode)"
  desc: "\\_\\_Windows to IANA Time Zone\\_\\_\n\n```java\nasyncClient.convertWindowsTimezoneToIana(\"pacific standard time\", null);\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be returned for a single Windows ID. It is possible to narrow these results by adding an optional territory parameter."
  returns:
    description: "this object is returned from a successful Timezone Windows To IANA call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.timezone.models.IanaId?alt=com.azure.maps.timezone.models.IanaId&text=IanaId\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.convertWindowsTimezoneToIanaWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.convertWindowsTimezoneToIanaWithResponse(String windowsTimezoneId, String windowsTerritoryCode)"
  name: "convertWindowsTimezoneToIanaWithResponse(String windowsTimezoneId, String windowsTerritoryCode)"
  nameWithType: "TimeZoneAsyncClient.convertWindowsTimezoneToIanaWithResponse(String windowsTimezoneId, String windowsTerritoryCode)"
  summary: "\\_\\_Windows to IANA Time Zone\\_\\_"
  parameters:
  - description: "The Windows time zone ID."
    name: "windowsTimezoneId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Windows Time Zone territory code."
    name: "windowsTerritoryCode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<List<IanaId>>> convertWindowsTimezoneToIanaWithResponse(String windowsTimezoneId, String windowsTerritoryCode)"
  desc: "\\_\\_Windows to IANA Time Zone\\_\\_\n\n```java\nasyncClient.convertWindowsTimezoneToIana(\"pacific standard time\", null);\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be returned for a single Windows ID. It is possible to narrow these results by adding an optional territory parameter."
  returns:
    description: "this object is returned from a successful Timezone Windows To IANA call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.timezone.models.IanaId?alt=com.azure.maps.timezone.models.IanaId&text=IanaId\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaTimezoneIds()"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaTimezoneIds()"
  name: "getIanaTimezoneIds()"
  nameWithType: "TimeZoneAsyncClient.getIanaTimezoneIds()"
  summary: "\\_\\_IANA Time Zones\\_\\_"
  syntax: "public Mono<List<IanaId>> getIanaTimezoneIds()"
  desc: "\\_\\_IANA Time Zones\\_\\_\n\n```java\nasyncClient.getIanaTimezoneIds();\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the system within one day."
  returns:
    description: "this object is returned from a successful Timezone Enum IANA call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.timezone.models.IanaId?alt=com.azure.maps.timezone.models.IanaId&text=IanaId\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaTimezoneIdsWithResponse()"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaTimezoneIdsWithResponse()"
  name: "getIanaTimezoneIdsWithResponse()"
  nameWithType: "TimeZoneAsyncClient.getIanaTimezoneIdsWithResponse()"
  summary: "\\_\\_IANA Time Zones\\_\\_"
  syntax: "public Mono<Response<List<IanaId>>> getIanaTimezoneIdsWithResponse()"
  desc: "\\_\\_IANA Time Zones\\_\\_\n\n```java\nasyncClient.getIanaTimezoneIds();\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the system within one day."
  returns:
    description: "this object is returned from a successful Timezone Enum IANA call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.timezone.models.IanaId?alt=com.azure.maps.timezone.models.IanaId&text=IanaId\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaVersion()"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaVersion()"
  name: "getIanaVersion()"
  nameWithType: "TimeZoneAsyncClient.getIanaVersion()"
  summary: "\\_\\_Time Zone IANA Version\\_\\_"
  syntax: "public Mono<TimeZoneIanaVersionResult> getIanaVersion()"
  desc: "\\_\\_Time Zone IANA Version\\_\\_\n\n```java\nasyncClient.getIanaVersion();\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns the current IANA version number as Metadata."
  returns:
    description: "this object is returned from a successful Timezone IANA Version call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneIanaVersionResult?alt=com.azure.maps.timezone.models.TimeZoneIanaVersionResult&text=TimeZoneIanaVersionResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaVersionWithResponse()"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getIanaVersionWithResponse()"
  name: "getIanaVersionWithResponse()"
  nameWithType: "TimeZoneAsyncClient.getIanaVersionWithResponse()"
  summary: "\\_\\_Time Zone IANA Version\\_\\_"
  syntax: "public Mono<Response<TimeZoneIanaVersionResult>> getIanaVersionWithResponse()"
  desc: "\\_\\_Time Zone IANA Version\\_\\_\n\n```java\nasyncClient.getIanaVersion();\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns the current IANA version number as Metadata."
  returns:
    description: "this object is returned from a successful Timezone IANA Version call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneIanaVersionResult?alt=com.azure.maps.timezone.models.TimeZoneIanaVersionResult&text=TimeZoneIanaVersionResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneByCoordinates(com.azure.maps.timezone.models.TimeZoneCoordinateOptions)"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneByCoordinates(TimeZoneCoordinateOptions options)"
  name: "getTimezoneByCoordinates(TimeZoneCoordinateOptions options)"
  nameWithType: "TimeZoneAsyncClient.getTimezoneByCoordinates(TimeZoneCoordinateOptions options)"
  summary: "\\_\\_Time Zone by Coordinates\\_\\_"
  parameters:
  - description: "options contains parameters for get timezone by coordinates"
    name: "options"
    type: "<xref href=\"com.azure.maps.timezone.models.TimeZoneCoordinateOptions?alt=com.azure.maps.timezone.models.TimeZoneCoordinateOptions&text=TimeZoneCoordinateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TimeZoneResult> getTimezoneByCoordinates(TimeZoneCoordinateOptions options)"
  desc: "\\_\\_Time Zone by Coordinates\\_\\_\n\n```java\nGeoPosition c2 = new GeoPosition(-122, 47.0);\n TimeZoneCoordinateOptions op2 = new TimeZoneCoordinateOptions(c2).setTimezoneOptions(TimeZoneOptions.ALL);\n asyncClient.getTimezoneByCoordinates(op2);\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns current, historical, and future time zone information for a specified latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given location."
  returns:
    description: "this object is returned from a successful Timezone By ID call or By Coordinates call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneResult?alt=com.azure.maps.timezone.models.TimeZoneResult&text=TimeZoneResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneByCoordinatesWithResponse(com.azure.maps.timezone.models.TimeZoneCoordinateOptions)"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneByCoordinatesWithResponse(TimeZoneCoordinateOptions options)"
  name: "getTimezoneByCoordinatesWithResponse(TimeZoneCoordinateOptions options)"
  nameWithType: "TimeZoneAsyncClient.getTimezoneByCoordinatesWithResponse(TimeZoneCoordinateOptions options)"
  summary: "\\_\\_Time Zone by Coordinates\\_\\_"
  parameters:
  - description: "options contains parameters for get timezone by coordinates"
    name: "options"
    type: "<xref href=\"com.azure.maps.timezone.models.TimeZoneCoordinateOptions?alt=com.azure.maps.timezone.models.TimeZoneCoordinateOptions&text=TimeZoneCoordinateOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<TimeZoneResult>> getTimezoneByCoordinatesWithResponse(TimeZoneCoordinateOptions options)"
  desc: "\\_\\_Time Zone by Coordinates\\_\\_\n\n```java\nGeoPosition c2 = new GeoPosition(-122, 47.0);\n TimeZoneCoordinateOptions op2 = new TimeZoneCoordinateOptions(c2).setTimezoneOptions(TimeZoneOptions.ALL);\n asyncClient.getTimezoneByCoordinates(op2);\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns current, historical, and future time zone information for a specified latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given location."
  returns:
    description: "this object is returned from a successful Timezone By ID call or By Coordinates call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneResult?alt=com.azure.maps.timezone.models.TimeZoneResult&text=TimeZoneResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneById(com.azure.maps.timezone.models.TimeZoneIdOptions)"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneById(TimeZoneIdOptions options)"
  name: "getTimezoneById(TimeZoneIdOptions options)"
  nameWithType: "TimeZoneAsyncClient.getTimezoneById(TimeZoneIdOptions options)"
  summary: "\\_\\_Time Zone by Id\\_\\_"
  parameters:
  - description: "contains parameters for get timezone by id"
    name: "options"
    type: "<xref href=\"com.azure.maps.timezone.models.TimeZoneIdOptions?alt=com.azure.maps.timezone.models.TimeZoneIdOptions&text=TimeZoneIdOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<TimeZoneResult> getTimezoneById(TimeZoneIdOptions options)"
  desc: "\\_\\_Time Zone by Id\\_\\_\n\n```java\nTimeZoneIdOptions options2 = new TimeZoneIdOptions(\"Asia/Bahrain\").setOptions(TimeZoneOptions.ALL);\n asyncClient.getTimezoneById(options2);\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns current, historical, and future time zone information for the specified IANA time zone ID."
  returns:
    description: "this object is returned from a successful Timezone By ID call or By Coordinates call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneResult?alt=com.azure.maps.timezone.models.TimeZoneResult&text=TimeZoneResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneByIdWithResponse(com.azure.maps.timezone.models.TimeZoneIdOptions)"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getTimezoneByIdWithResponse(TimeZoneIdOptions options)"
  name: "getTimezoneByIdWithResponse(TimeZoneIdOptions options)"
  nameWithType: "TimeZoneAsyncClient.getTimezoneByIdWithResponse(TimeZoneIdOptions options)"
  summary: "\\_\\_Time Zone by Id\\_\\_"
  parameters:
  - description: "contains parameters for get timezone by id"
    name: "options"
    type: "<xref href=\"com.azure.maps.timezone.models.TimeZoneIdOptions?alt=com.azure.maps.timezone.models.TimeZoneIdOptions&text=TimeZoneIdOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<TimeZoneResult>> getTimezoneByIdWithResponse(TimeZoneIdOptions options)"
  desc: "\\_\\_Time Zone by Id\\_\\_\n\n```java\nTimeZoneIdOptions options2 = new TimeZoneIdOptions(\"Asia/Bahrain\").setOptions(TimeZoneOptions.ALL);\n asyncClient.getTimezoneById(options2);\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns current, historical, and future time zone information for the specified IANA time zone ID."
  returns:
    description: "this object is returned from a successful Timezone By ID call or By Coordinates call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneResult?alt=com.azure.maps.timezone.models.TimeZoneResult&text=TimeZoneResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getWindowsTimezoneIds()"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getWindowsTimezoneIds()"
  name: "getWindowsTimezoneIds()"
  nameWithType: "TimeZoneAsyncClient.getWindowsTimezoneIds()"
  summary: "\\_\\_Windows Time Zones\\_\\_"
  syntax: "public Mono<List<TimeZoneWindows>> getWindowsTimezoneIds()"
  desc: "\\_\\_Windows Time Zones\\_\\_\n\n```java\nasyncClient.getWindowsTimezoneIds();\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns a full list of Windows Time Zone IDs."
  returns:
    description: "this object is returned from a successful Timezone Enum Windows call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneWindows?alt=com.azure.maps.timezone.models.TimeZoneWindows&text=TimeZoneWindows\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.timezone.TimeZoneAsyncClient.getWindowsTimezoneIdsWithResponse()"
  fullName: "com.azure.maps.timezone.TimeZoneAsyncClient.getWindowsTimezoneIdsWithResponse()"
  name: "getWindowsTimezoneIdsWithResponse()"
  nameWithType: "TimeZoneAsyncClient.getWindowsTimezoneIdsWithResponse()"
  summary: "\\_\\_Windows Time Zones\\_\\_"
  syntax: "public Mono<Response<List<TimeZoneWindows>>> getWindowsTimezoneIdsWithResponse()"
  desc: "\\_\\_Windows Time Zones\\_\\_\n\n```java\nasyncClient.getWindowsTimezoneIds();\n```\n\n\\*\\*Applies to\\*\\*: S0 and S1 pricing tiers.\n\nThis API returns a full list of Windows Time Zone IDs."
  returns:
    description: "this object is returned from a successful Timezone Enum Windows call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.timezone.models.TimeZoneWindows?alt=com.azure.maps.timezone.models.TimeZoneWindows&text=TimeZoneWindows\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous TimeZoneClient type. Creating an async client using a <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a client\n TimeZoneAsyncClient asyncClient = new TimeZoneClientBuilder()\n     .credential(keyCredential)\n     .timezoneClientId(System.getenv(\"MAPS_CLIENT_ID\"))\n     .buildAsyncClient();\n```"
metadata: {}
package: "com.azure.maps.timezone"
artifact: com.azure:azure-maps-timezone:1.0.0-beta.1
