### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  id: TreeRangeMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.<K,V>create()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asDescendingMapOfRanges()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asMapOfRanges()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.clear()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.getEntry(K)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.put(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putAll(com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putCoalescing(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.remove(com.azure.cosmos.implementation.guava25.collect.Range<K>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.span()
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.subRangeMap(com.azure.cosmos.implementation.guava25.collect.Range<K>)
  - com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.toString()
  langs:
  - java
  name: TreeRangeMap<K,V>
  nameWithType: TreeRangeMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    An implementation of `RangeMap` based on a `TreeMap`, supporting all optional operations.


    Like all `RangeMap` implementations, this supports neither null keys nor null values.
  syntax:
    content: public final class TreeRangeMap<K,V> implements RangeMap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  implements:
  - com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.<K,V>create()
  id: <K,V>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: <K,V>create()
  nameWithType: TreeRangeMap<K,V>.<K,V>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.<K,V>create()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public static TreeRangeMap<K,V> <K,V>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.TreeRangeMap()
  id: TreeRangeMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: TreeRangeMap()
  nameWithType: TreeRangeMap<K,V>.TreeRangeMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.TreeRangeMap()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.TreeRangeMap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private TreeRangeMap()
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asDescendingMapOfRanges()
  id: asDescendingMapOfRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: asDescendingMapOfRanges()
  nameWithType: TreeRangeMap<K,V>.asDescendingMapOfRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.asDescendingMapOfRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asDescendingMapOfRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this range map as an unmodifiable `Map, V>`. Modifications to this range map are guaranteed to read through to the returned `Map`.


    The returned `Map` iterates over entries in descending order of the bounds of the `Range` entries.


    It is guaranteed that no empty ranges will be in the returned `Map`.
  syntax:
    content: public Map<Range<K>,V> asDescendingMapOfRanges()
    return:
      type: java.util.Map<com.azure.cosmos.implementation.guava25.collect.Range<K>,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asMapOfRanges()
  id: asMapOfRanges()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: asMapOfRanges()
  nameWithType: TreeRangeMap<K,V>.asMapOfRanges()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.asMapOfRanges()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asMapOfRanges*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this range map as an unmodifiable `Map, V>`. Modifications to this range map are guaranteed to read through to the returned `Map`.


    The returned `Map` iterates over entries in ascending order of the bounds of the `Range` entries.


    It is guaranteed that no empty ranges will be in the returned `Map`.
  syntax:
    content: public Map<Range<K>,V> asMapOfRanges()
    return:
      type: java.util.Map<com.azure.cosmos.implementation.guava25.collect.Range<K>,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: clear()
  nameWithType: TreeRangeMap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes all associations from this range map (optional operation).
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: equals(Object o)
  nameWithType: TreeRangeMap<K,V>.equals(Object o)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.equals(Object o)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `obj` is another `RangeMap` that has an equivalent <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asMapOfRanges()" data-throw-if-not-resolved="false">#asMapOfRanges()</xref>.
  syntax:
    content: public boolean equals(Object o)
    parameters:
    - id: o
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: get(K key)
  nameWithType: TreeRangeMap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the value associated with the specified key, or `null` if there is no such value.


    Specifically, if any range in this range map contains the specified key, the value associated with that range is returned.
  syntax:
    content: public V get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.getEntry(K)
  id: getEntry(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: getEntry(K key)
  nameWithType: TreeRangeMap<K,V>.getEntry(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.getEntry(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.getEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the range containing this key and its associated value, if such a range is present in the range map, or `null` otherwise.
  syntax:
    content: public Map.Entry<Range<K>,V> getEntry(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Map.Entry<com.azure.cosmos.implementation.guava25.collect.Range<K>,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: hashCode()
  nameWithType: TreeRangeMap<K,V>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `asMapOfRanges().hashCode()`.
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.put(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)
  id: put(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: put(Range<K> range, V value)
  nameWithType: TreeRangeMap<K,V>.put(Range<K> range, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.put(Range<K> range, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Maps a range to a specified value (optional operation).


    Specifically, after a call to `put(range, value)`, if <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains*" data-throw-if-not-resolved="false">range.contains(k)</xref>, then <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get*" data-throw-if-not-resolved="false">get(k)</xref> will return `value`.


    If `range` <xref uid="com.azure.cosmos.implementation.routing.Range.isEmpty()" data-throw-if-not-resolved="false">is empty</xref>, then this is a no-op.
  syntax:
    content: public void put(Range<K> range, V value)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<K>
    - id: value
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putAll(com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>)
  id: putAll(com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: putAll(RangeMap<K,V> rangeMap)
  nameWithType: TreeRangeMap<K,V>.putAll(RangeMap<K,V> rangeMap)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.putAll(RangeMap<K,V> rangeMap)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Puts all the associations from `rangeMap` into this range map (optional operation).
  syntax:
    content: public void putAll(RangeMap<K,V> rangeMap)
    parameters:
    - id: rangeMap
      type: com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putCoalescing(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)
  id: putCoalescing(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: putCoalescing(Range<K> range, V value)
  nameWithType: TreeRangeMap<K,V>.putCoalescing(Range<K> range, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.putCoalescing(Range<K> range, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putCoalescing*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Maps a range to a specified value, coalescing this range with any existing ranges with the same value that are <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.isConnected" data-throw-if-not-resolved="false">connected</xref> to this range.


    The behavior of <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get*" data-throw-if-not-resolved="false">get(k)</xref> after calling this method is identical to the behavior described in <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.put*" data-throw-if-not-resolved="false">put(range, value)</xref>, however the ranges returned from <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asMapOfRanges" data-throw-if-not-resolved="false">#asMapOfRanges</xref> will be different if there were existing entries which connect to the given range and value.


    Even if the input range is empty, if it is connected on both sides by ranges mapped to the same value those two ranges will be coalesced.


    **Note:** coalescing requires calling `.equals()` on any connected values, which may be expensive depending on the value type. Using this method on range maps with large values such as <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref> types is discouraged.
  syntax:
    content: public void putCoalescing(Range<K> range, V value)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<K>
    - id: value
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.remove(com.azure.cosmos.implementation.guava25.collect.Range<K>)
  id: remove(com.azure.cosmos.implementation.guava25.collect.Range<K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: remove(Range<K> rangeToRemove)
  nameWithType: TreeRangeMap<K,V>.remove(Range<K> rangeToRemove)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.remove(Range<K> rangeToRemove)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all associations from this range map in the specified range (optional operation).


    If `!range.contains(k)`, <xref uid="com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get*" data-throw-if-not-resolved="false">get(k)</xref> will return the same result before and after a call to `remove(range)`. If `range.contains(k)`, then after a call to `remove(range)`, `get(k)` will return `null`.
  syntax:
    content: public void remove(Range<K> rangeToRemove)
    parameters:
    - id: rangeToRemove
      type: com.azure.cosmos.implementation.guava25.collect.Range<K>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.span()
  id: span()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: span()
  nameWithType: TreeRangeMap<K,V>.span()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.span()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.span*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the minimal range <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">enclosing</xref> the ranges in this `RangeMap`.
  syntax:
    content: public Range<K> span()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<K>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.subRangeMap(com.azure.cosmos.implementation.guava25.collect.Range<K>)
  id: subRangeMap(com.azure.cosmos.implementation.guava25.collect.Range<K>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: subRangeMap(Range<K> subRange)
  nameWithType: TreeRangeMap<K,V>.subRangeMap(Range<K> subRange)
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.subRangeMap(Range<K> subRange)
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.subRangeMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the part of this range map that intersects with `range`.


    For example, if `rangeMap` had the entries `[1, 5] => "foo", (6, 8) => "bar", (10, \u221e) => "baz"` then `rangeMap.subRangeMap(Range.open(3, 12))` would return a range map with the entries `(3, 5] => "foo", (6, 8) => "bar", (10, 12) => "baz"`.


    The returned range map supports all optional operations that this range map supports, except for `asMapOfRanges().iterator().remove()`.


    The returned range map will throw an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> on an attempt to insert a range not <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.encloses(com.azure.cosmos.implementation.guava25.collect.Range&lt;C&gt;)" data-throw-if-not-resolved="false">enclosed</xref> by `range`.
  syntax:
    content: public RangeMap<K,V> subRangeMap(Range<K> subRange)
    parameters:
    - id: subRange
      type: com.azure.cosmos.implementation.guava25.collect.Range<K>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  langs:
  - java
  name: toString()
  nameWithType: TreeRangeMap<K,V>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a readable string representation of this range map.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.TreeRangeMap*
  name: TreeRangeMap
  nameWithType: TreeRangeMap<K,V>.TreeRangeMap
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.TreeRangeMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
    name: TreeRangeMap
    fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.create*
  name: <K,V>create
  nameWithType: TreeRangeMap<K,V>.<K,V>create
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.<K,V>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.get*
  name: get
  nameWithType: TreeRangeMap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map.Entry<com.azure.cosmos.implementation.guava25.collect.Range<K>,V>
  spec.java:
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.getEntry*
  name: getEntry
  nameWithType: TreeRangeMap<K,V>.getEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.getEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.put*
  name: put
  nameWithType: TreeRangeMap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putCoalescing*
  name: putCoalescing
  nameWithType: TreeRangeMap<K,V>.putCoalescing
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.putCoalescing
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.RangeMap
    name: RangeMap
    fullName: com.azure.cosmos.implementation.guava25.collect.RangeMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.putAll*
  name: putAll
  nameWithType: TreeRangeMap<K,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.clear*
  name: clear
  nameWithType: TreeRangeMap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.span*
  name: span
  nameWithType: TreeRangeMap<K,V>.span
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.span
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.remove*
  name: remove
  nameWithType: TreeRangeMap<K,V>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<com.azure.cosmos.implementation.guava25.collect.Range<K>,V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asMapOfRanges*
  name: asMapOfRanges
  nameWithType: TreeRangeMap<K,V>.asMapOfRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.asMapOfRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.asDescendingMapOfRanges*
  name: asDescendingMapOfRanges
  nameWithType: TreeRangeMap<K,V>.asDescendingMapOfRanges
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.asDescendingMapOfRanges
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.subRangeMap*
  name: subRangeMap
  nameWithType: TreeRangeMap<K,V>.subRangeMap
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.subRangeMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.equals*
  name: equals
  nameWithType: TreeRangeMap<K,V>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.hashCode*
  name: hashCode
  nameWithType: TreeRangeMap<K,V>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap.toString*
  name: toString
  nameWithType: TreeRangeMap<K,V>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.TreeRangeMap<K,V>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.Range
  name: Range
  nameWithType: Range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: K>,V
  name: K>,V
  nameWithType: K>,V
  fullName: K>,V
- uid: com.azure.cosmos.implementation.guava25.collect.RangeMap
  name: RangeMap
  nameWithType: RangeMap
  fullName: com.azure.cosmos.implementation.guava25.collect.RangeMap
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
