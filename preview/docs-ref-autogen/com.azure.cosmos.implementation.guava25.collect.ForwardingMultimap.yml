### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  id: ForwardingMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.ForwardingMultimap()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsEntry(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.delegate()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.size()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.values()
  langs:
  - java
  name: ForwardingMultimap<K,V>
  nameWithType: ForwardingMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A multimap which forwards all its method calls to another multimap. Subclasses should override one or more methods to modify the behavior of the backing multimap as desired per the [decorator pattern][].


    **`default` method warning:** This class does *not* forward calls to `default` methods. Instead, it inherits their default implementations. When those implementations invoke methods, they invoke methods on the `ForwardingMultimap`.



    [decorator pattern]: http://en.wikipedia.org/wiki/Decorator_pattern
  syntax:
    content: public abstract class ForwardingMultimap<K,V> extends ForwardingObject implements Multimap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.ForwardingObject
  implements:
  - com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ForwardingObject.delegate()
  - com.azure.cosmos.implementation.guava25.collect.ForwardingObject.toString()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.ForwardingMultimap()
  id: ForwardingMultimap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: ForwardingMultimap()
  nameWithType: ForwardingMultimap<K,V>.ForwardingMultimap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.ForwardingMultimap()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.ForwardingMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Constructor for use by subclasses.
  syntax:
    content: protected ForwardingMultimap()
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap()
  id: asMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: asMap()
  nameWithType: ForwardingMultimap<K,V>.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.asMap()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this multimap as a `Map` from each distinct key to the nonempty collection of that key's associated values. Note that `this.asMap().get(k)` is equivalent to `this.get(k)` only when `k` is a key contained in the multimap; otherwise it returns `null` as opposed to an empty collection.


    Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support `put` or `putAll`, nor do its entries support <xref uid="java.util.Map.Entry.setValue" data-throw-if-not-resolved="false">setValue</xref>.
  syntax:
    content: public Map<K,Collection<V>> asMap()
    return:
      type: java.util.Map<K,java.util.Collection<V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: clear()
  nameWithType: ForwardingMultimap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes all key-value pairs from the multimap, leaving it <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.isEmpty" data-throw-if-not-resolved="false">empty</xref>.
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsEntry(java.lang.Object,java.lang.Object)
  id: containsEntry(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: containsEntry(Object key, Object value)
  nameWithType: ForwardingMultimap<K,V>.containsEntry(Object key, Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.containsEntry(Object key, Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains at least one key-value pair with the key `key` and the value `value`.
  syntax:
    content: public boolean containsEntry(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: ForwardingMultimap<K,V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains at least one key-value pair with the key `key`.
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: ForwardingMultimap<K,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains at least one key-value pair with the value `value`.
  syntax:
    content: public boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.delegate()
  id: delegate()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: delegate()
  nameWithType: ForwardingMultimap<K,V>.delegate()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.delegate()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.delegate*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the backing delegate instance that methods are forwarded to. Abstract subclasses generally override this method with an abstract method that has a more specific return type, such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingSet.delegate" data-throw-if-not-resolved="false">ForwardingSet#delegate</xref>. Concrete subclasses override this method to supply the instance being decorated.
  syntax:
    content: protected abstract Multimap<K,V> delegate()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.entries()
  id: entries()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: entries()
  nameWithType: ForwardingMultimap<K,V>.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.entries()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.entries*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of all key-value pairs contained in this multimap, as <xref uid="java.util.Map.Entry" data-throw-if-not-resolved="false">Entry</xref> instances.


    Changes to the returned collection or the entries it contains will update the underlying multimap, and vice versa. However, *adding* to the returned collection is not possible.
  syntax:
    content: public Collection<Map.Entry<K,V>> entries()
    return:
      type: java.util.Collection<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: equals(Object object)
  nameWithType: ForwardingMultimap<K,V>.equals(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.equals(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Compares the specified object with this multimap for equality. Two multimaps are equal when their map views, as returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref>, are also equal.


    In general, two multimaps with identical key-value mappings may or may not be equal, depending on the implementation. For example, two <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap" data-throw-if-not-resolved="false">SetMultimap</xref> instances with the same key-value mappings are equal, but equality of two <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref> instances depends on the ordering of the values for each key.


    A non-empty <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap" data-throw-if-not-resolved="false">SetMultimap</xref> cannot be equal to a non-empty <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref>, since their <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> views contain unequal collections as values. However, any two empty multimaps are equal, because they both have empty <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> views.
  syntax:
    content: public boolean equals(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: ForwardingMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of the values associated with `key` in this multimap, if any. Note that when `containsKey(key)` is false, this returns an empty collection, not `null`.


    Changes to the returned collection will update the underlying multimap, and vice versa.
  syntax:
    content: public Collection<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.Collection<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: hashCode()
  nameWithType: ForwardingMultimap<K,V>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the hash code for this multimap.


    The hash code of a multimap is defined as the hash code of the map view, as returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap.asMap" data-throw-if-not-resolved="false">Multimap#asMap</xref>.


    In general, two multimaps with identical key-value mappings may or may not have the same hash codes, depending on the implementation. For example, two <xref uid="com.azure.cosmos.implementation.guava25.collect.SetMultimap" data-throw-if-not-resolved="false">SetMultimap</xref> instances with the same key-value mappings will have the same `hashCode`, but the `hashCode` of <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap" data-throw-if-not-resolved="false">ListMultimap</xref> instances depends on the ordering of the values for each key.
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: isEmpty()
  nameWithType: ForwardingMultimap<K,V>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains no key-value pairs. Equivalent to `size() == 0`, but can in some cases be more efficient.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: keySet()
  nameWithType: ForwardingMultimap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of all *distinct* keys contained in this multimap. Note that the key set contains a key if and only if this multimap maps that key to at least one value.


    Changes to the returned set will update the underlying multimap, and vice versa. However, *adding* to the returned set is not possible.
  syntax:
    content: public Set<K> keySet()
    return:
      type: java.util.Set<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keys()
  id: keys()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: keys()
  nameWithType: ForwardingMultimap<K,V>.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.keys()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection containing the key from each key-value pair in this multimap, *without* collapsing duplicates. This collection has the same size as this multimap, and `keys().count(k) == get(k).size()` for all `k`.


    Changes to the returned multiset will update the underlying multimap, and vice versa. However, *adding* to the returned collection is not possible.
  syntax:
    content: public Multiset<K> keys()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: ForwardingMultimap<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a key-value pair in this multimap.


    Some multimap implementations allow duplicate key-value pairs, in which case `put` always adds a new key-value pair and increases the multimap size by 1. Other implementations prohibit duplicates, and storing a key-value pair that's already in the multimap has no effect.
  syntax:
    content: public boolean put(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll(K,java.lang.Iterable<? extends V>)
  id: putAll(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: putAll(K key, Iterable<? extends V> values)
  nameWithType: ForwardingMultimap<K,V>.putAll(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.putAll(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a key-value pair in this multimap for each of `values`, all using the same key, `key`. Equivalent to (but expected to be more efficient than):


    ```java

    for (V value : values) {
       put(key, value);
     }
    ```


    In particular, this is a no-op if `values` is empty.
  syntax:
    content: public boolean putAll(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: putAll(Multimap<? extends K,? extends V> multimap)
  nameWithType: ForwardingMultimap<K,V>.putAll(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.putAll(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Stores all key-value pairs of `multimap` in this multimap, in the order returned by `multimap.entries()`.
  syntax:
    content: public boolean putAll(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.remove(java.lang.Object,java.lang.Object)
  id: remove(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: remove(Object key, Object value)
  nameWithType: ForwardingMultimap<K,V>.remove(Object key, Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.remove(Object key, Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes a single key-value pair with the key `key` and the value `value` from this multimap, if such exists. If multiple key-value pairs in the multimap fit this description, which one is removed is unspecified.
  syntax:
    content: public boolean remove(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: ForwardingMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all values associated with the key `key`.


    Once this method returns, `key` will not be mapped to any values, so it will not appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keySet()" data-throw-if-not-resolved="false">#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap()" data-throw-if-not-resolved="false">#asMap()</xref>, or any other views.
  syntax:
    content: public Collection<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.util.Collection<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: ForwardingMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a collection of values with the same key, replacing any existing values for that key.


    If `values` is empty, this is equivalent to <xref uid="com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.removeAll(java.lang.Object)" data-throw-if-not-resolved="false">removeAll(key)</xref>.
  syntax:
    content: public Collection<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: java.util.Collection<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: size()
  nameWithType: ForwardingMultimap<K,V>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the number of key-value pairs in this multimap.


    **Note:** this method does not return the number of *distinct keys* in the multimap, which is given by `keySet().size()` or `asMap().size()`. See the opening section of the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> class documentation for clarification.
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap
  langs:
  - java
  name: values()
  nameWithType: ForwardingMultimap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection containing the *value* from each key-value pair contained in this multimap, without collapsing duplicates (so `values().size() == size()`).


    Changes to the returned collection will update the underlying multimap, and vice versa. However, *adding* to the returned collection is not possible.
  syntax:
    content: public Collection<V> values()
    return:
      type: java.util.Collection<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.ForwardingMultimap*
  name: ForwardingMultimap
  nameWithType: ForwardingMultimap<K,V>.ForwardingMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.ForwardingMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.delegate*
  name: delegate
  nameWithType: ForwardingMultimap<K,V>.delegate
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.delegate
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<K,java.util.Collection<V>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.asMap*
  name: asMap
  nameWithType: ForwardingMultimap<K,V>.asMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.asMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.clear*
  name: clear
  nameWithType: ForwardingMultimap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsEntry*
  name: containsEntry
  nameWithType: ForwardingMultimap<K,V>.containsEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.containsEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsKey*
  name: containsKey
  nameWithType: ForwardingMultimap<K,V>.containsKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.containsKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.containsValue*
  name: containsValue
  nameWithType: ForwardingMultimap<K,V>.containsValue
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.containsValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.entries*
  name: entries
  nameWithType: ForwardingMultimap<K,V>.entries
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.entries
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: java.util.Collection<V>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.get*
  name: get
  nameWithType: ForwardingMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.isEmpty*
  name: isEmpty
  nameWithType: ForwardingMultimap<K,V>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset
    name: Multiset
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keys*
  name: keys
  nameWithType: ForwardingMultimap<K,V>.keys
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.keys
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<K>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.keySet*
  name: keySet
  nameWithType: ForwardingMultimap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.put*
  name: put
  nameWithType: ForwardingMultimap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.putAll*
  name: putAll
  nameWithType: ForwardingMultimap<K,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.remove*
  name: remove
  nameWithType: ForwardingMultimap<K,V>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.removeAll*
  name: removeAll
  nameWithType: ForwardingMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.replaceValues*
  name: replaceValues
  nameWithType: ForwardingMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.size*
  name: size
  nameWithType: ForwardingMultimap<K,V>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.values*
  name: values
  nameWithType: ForwardingMultimap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.equals*
  name: equals
  nameWithType: ForwardingMultimap<K,V>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap.hashCode*
  name: hashCode
  nameWithType: ForwardingMultimap<K,V>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingMultimap<K,V>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingObject
  name: ForwardingObject
  nameWithType: ForwardingObject
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingObject
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingObject.delegate()
  name: ForwardingObject.delegate()
  nameWithType: ForwardingObject.delegate()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingObject.delegate()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ForwardingObject.toString()
  name: ForwardingObject.toString()
  nameWithType: ForwardingObject.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ForwardingObject.toString()
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset
  name: Multiset
  nameWithType: Multiset
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
