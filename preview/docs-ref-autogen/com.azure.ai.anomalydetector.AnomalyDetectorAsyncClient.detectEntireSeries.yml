### YamlMime:JavaMember
uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeries*"
fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeries"
name: "detectEntireSeries"
nameWithType: "AnomalyDetectorAsyncClient.detectEntireSeries"
members:
- uid: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeries(com.azure.ai.anomalydetector.models.DetectRequest)"
  fullName: "com.azure.ai.anomalydetector.AnomalyDetectorAsyncClient.detectEntireSeries(DetectRequest body)"
  name: "detectEntireSeries(DetectRequest body)"
  nameWithType: "AnomalyDetectorAsyncClient.detectEntireSeries(DetectRequest body)"
  summary: "This operation generates a model using an entire series, each point is detected with the same model. With this method, points before and after a certain point are used to determine whether it is an anomaly. The entire detection can give user an overall status of the time series."
  parameters:
  - description: "Time series points and period if needed. Advanced model parameters can also be set in the request."
    name: "body"
    type: "<xref href=\"com.azure.ai.anomalydetector.models.DetectRequest?alt=com.azure.ai.anomalydetector.models.DetectRequest&text=DetectRequest\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<EntireDetectResponse> detectEntireSeries(DetectRequest body)"
  returns:
    description: "the response."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.anomalydetector"
artifact: com.azure:azure-ai-anomalydetector:3.0.0-beta.1
