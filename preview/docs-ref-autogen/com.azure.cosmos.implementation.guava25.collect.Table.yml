### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Table"
fullName: "com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>"
name: "Table<R,C,V>"
nameWithType: "Table<R,C,V>"
summary: "A collection that associates an ordered pair of keys, called a row key and a column key, with a single value. A table may be sparse, with only a small fraction of row key / column key pairs possessing a corresponding value.\n\nThe mappings corresponding to a given row key may be viewed as a <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref> whose keys are the columns. The reverse is also available, associating a column with a row key / value map. Note that, in some implementations, data access by column key may have fewer supported operations or worse performance than data access by row key.\n\nThe methods returning collections or maps always return views of the underlying table. Updating the table can change the contents of those collections, and updating the collections will change the table.\n\nAll methods that modify the table are optional, and the views returned by the table may or may not be modifiable. When modification isn't supported, those methods will throw an <xref uid=\"java.lang.UnsupportedOperationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnsupportedOperationException\"></xref>.\n\nSee the Guava User Guide article on [ `Table`][_Table].\n\n\n[_Table]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#table"
syntax: "public interface Table<R,C,V>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Table.cellSet()"
- "com.azure.cosmos.implementation.guava25.collect.Table.clear()"
- "com.azure.cosmos.implementation.guava25.collect.Table.column(C)"
- "com.azure.cosmos.implementation.guava25.collect.Table.columnKeySet()"
- "com.azure.cosmos.implementation.guava25.collect.Table.columnMap()"
- "com.azure.cosmos.implementation.guava25.collect.Table.contains(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.containsColumn(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.containsRow(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.get(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.Table.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.Table.put(R,C,V)"
- "com.azure.cosmos.implementation.guava25.collect.Table.putAll(com.azure.cosmos.implementation.guava25.collect.Table<? extends R,? extends C,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Table.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.Table.row(R)"
- "com.azure.cosmos.implementation.guava25.collect.Table.rowKeySet()"
- "com.azure.cosmos.implementation.guava25.collect.Table.rowMap()"
- "com.azure.cosmos.implementation.guava25.collect.Table.size()"
- "com.azure.cosmos.implementation.guava25.collect.Table.values()"
type: "interface"
typeParameters:
- name: "R"
- name: "C"
- name: "V"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
