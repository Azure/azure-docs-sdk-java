### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Table
  id: Table
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Table.Cell
  - com.azure.cosmos.implementation.guava25.collect.Table.cellSet()
  - com.azure.cosmos.implementation.guava25.collect.Table.clear()
  - com.azure.cosmos.implementation.guava25.collect.Table.column(C)
  - com.azure.cosmos.implementation.guava25.collect.Table.columnKeySet()
  - com.azure.cosmos.implementation.guava25.collect.Table.columnMap()
  - com.azure.cosmos.implementation.guava25.collect.Table.contains(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.containsColumn(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.containsRow(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.get(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.Table.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.Table.put(R,C,V)
  - com.azure.cosmos.implementation.guava25.collect.Table.putAll(com.azure.cosmos.implementation.guava25.collect.Table<? extends R,? extends C,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.Table.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.Table.row(R)
  - com.azure.cosmos.implementation.guava25.collect.Table.rowKeySet()
  - com.azure.cosmos.implementation.guava25.collect.Table.rowMap()
  - com.azure.cosmos.implementation.guava25.collect.Table.size()
  - com.azure.cosmos.implementation.guava25.collect.Table.values()
  langs:
  - java
  name: Table<R,C,V>
  nameWithType: Table<R,C,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A collection that associates an ordered pair of keys, called a row key and a column key, with a single value. A table may be sparse, with only a small fraction of row key / column key pairs possessing a corresponding value.


    The mappings corresponding to a given row key may be viewed as a <xref uid="java.util.Map" data-throw-if-not-resolved="false">Map</xref> whose keys are the columns. The reverse is also available, associating a column with a row key / value map. Note that, in some implementations, data access by column key may have fewer supported operations or worse performance than data access by row key.


    The methods returning collections or maps always return views of the underlying table. Updating the table can change the contents of those collections, and updating the collections will change the table.


    All methods that modify the table are optional, and the views returned by the table may or may not be modifiable. When modification isn't supported, those methods will throw an <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    See the Guava User Guide article on [ `Table`][_Table].



    [_Table]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#table
  syntax:
    content: public interface Table<R,C,V>
    typeParameters:
    - id: R
    - id: C
    - id: V
- uid: com.azure.cosmos.implementation.guava25.collect.Table.cellSet()
  id: cellSet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: cellSet()
  nameWithType: Table<R,C,V>.cellSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.cellSet()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.cellSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a set of all row key / column key / value triplets. Changes to the returned set will update the underlying table, and vice versa. The cell set does not support the `add` or `addAll` methods.
  syntax:
    content: public abstract Set<Table.Cell<R,C,V>> cellSet()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Table.Cell<R,C,V>>
      description: set of table cells consisting of row key / column key / value triplets
- uid: com.azure.cosmos.implementation.guava25.collect.Table.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: clear()
  nameWithType: Table<R,C,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes all mappings from the table.
  syntax:
    content: public abstract void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.Table.column(C)
  id: column(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: column(C columnKey)
  nameWithType: Table<R,C,V>.column(C columnKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.column(C columnKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.column*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of all mappings that have the given column key. For each row key / column key / value mapping in the table with that column key, the returned map associates the row key with the value. If no mappings in the table have the provided column key, an empty map is returned.


    Changes to the returned map will update the underlying table, and vice versa.
  syntax:
    content: public abstract Map<R,V> column(C columnKey)
    parameters:
    - id: columnKey
      type: C
      description: key of column to search for in the table
    return:
      type: java.util.Map<R,V>
      description: the corresponding map from row keys to values
- uid: com.azure.cosmos.implementation.guava25.collect.Table.columnKeySet()
  id: columnKeySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: columnKeySet()
  nameWithType: Table<R,C,V>.columnKeySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.columnKeySet()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.columnKeySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a set of column keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa.
  syntax:
    content: public abstract Set<C> columnKeySet()
    return:
      type: java.util.Set<C>
      description: set of column keys
- uid: com.azure.cosmos.implementation.guava25.collect.Table.columnMap()
  id: columnMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: columnMap()
  nameWithType: Table<R,C,V>.columnMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.columnMap()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.columnMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view that associates each column key with the corresponding map from row keys to values. Changes to the returned map will update this table. The returned map does not support `put()` or `putAll()`, or `setValue()` on its entries.


    In contrast, the maps returned by `columnMap().get()` have the same behavior as those returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Table.column" data-throw-if-not-resolved="false">#column</xref>. Those maps may support `setValue()`, `put()`, and `putAll()`.
  syntax:
    content: public abstract Map<C,Map<R,V>> columnMap()
    return:
      type: java.util.Map<C,java.util.Map<R,V>>
      description: a map view from each column key to a secondary map from row keys to values
- uid: com.azure.cosmos.implementation.guava25.collect.Table.contains(java.lang.Object,java.lang.Object)
  id: contains(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: contains(Object rowKey, Object columnKey)
  nameWithType: Table<R,C,V>.contains(Object rowKey, Object columnKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.contains(Object rowKey, Object columnKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if the table contains a mapping with the specified row and column keys.
  syntax:
    content: public abstract boolean contains(Object rowKey, Object columnKey)
    parameters:
    - id: rowKey
      type: java.lang.Object
      description: key of row to search for
    - id: columnKey
      type: java.lang.Object
      description: key of column to search for
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.containsColumn(java.lang.Object)
  id: containsColumn(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: containsColumn(Object columnKey)
  nameWithType: Table<R,C,V>.containsColumn(Object columnKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.containsColumn(Object columnKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.containsColumn*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if the table contains a mapping with the specified column.
  syntax:
    content: public abstract boolean containsColumn(Object columnKey)
    parameters:
    - id: columnKey
      type: java.lang.Object
      description: key of column to search for
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.containsRow(java.lang.Object)
  id: containsRow(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: containsRow(Object rowKey)
  nameWithType: Table<R,C,V>.containsRow(Object rowKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.containsRow(Object rowKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.containsRow*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if the table contains a mapping with the specified row key.
  syntax:
    content: public abstract boolean containsRow(Object rowKey)
    parameters:
    - id: rowKey
      type: java.lang.Object
      description: key of row to search for
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: Table<R,C,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if the table contains a mapping with the specified value.
  syntax:
    content: public abstract boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
      description: value to search for
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: equals(Object obj)
  nameWithType: Table<R,C,V>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.equals(Object obj)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Compares the specified object with this table for equality. Two tables are equal when their cell views, as returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Table.cellSet" data-throw-if-not-resolved="false">#cellSet</xref>, are equal.
  syntax:
    content: public abstract boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.get(java.lang.Object,java.lang.Object)
  id: get(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: get(Object rowKey, Object columnKey)
  nameWithType: Table<R,C,V>.get(Object rowKey, Object columnKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.get(Object rowKey, Object columnKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the value corresponding to the given row and column keys, or `null` if no such mapping exists.
  syntax:
    content: public abstract V get(Object rowKey, Object columnKey)
    parameters:
    - id: rowKey
      type: java.lang.Object
      description: key of row to search for
    - id: columnKey
      type: java.lang.Object
      description: key of column to search for
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.Table.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: hashCode()
  nameWithType: Table<R,C,V>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the hash code for this table. The hash code of a table is defined as the hash code of its cell view, as returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Table.cellSet" data-throw-if-not-resolved="false">#cellSet</xref>.
  syntax:
    content: public abstract int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Table.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: isEmpty()
  nameWithType: Table<R,C,V>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if the table contains no mappings.
  syntax:
    content: public abstract boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.put(R,C,V)
  id: put(R,C,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: put(R rowKey, C columnKey, V value)
  nameWithType: Table<R,C,V>.put(R rowKey, C columnKey, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.put(R rowKey, C columnKey, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Associates the specified value with the specified keys. If the table already contained a mapping for those keys, the old value is replaced with the specified value.
  syntax:
    content: public abstract V put(R rowKey, C columnKey, V value)
    parameters:
    - id: rowKey
      type: R
      description: row key that the value should be associated with
    - id: columnKey
      type: C
      description: column key that the value should be associated with
    - id: value
      type: V
      description: value to be associated with the specified keys
    return:
      type: V
      description: >-
        the value previously associated with the keys, or <code>null</code> if no mapping existed
             for the keys
- uid: com.azure.cosmos.implementation.guava25.collect.Table.putAll(com.azure.cosmos.implementation.guava25.collect.Table<? extends R,? extends C,? extends V>)
  id: putAll(com.azure.cosmos.implementation.guava25.collect.Table<? extends R,? extends C,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: putAll(Table<? extends R,? extends C,? extends V> table)
  nameWithType: Table<R,C,V>.putAll(Table<? extends R,? extends C,? extends V> table)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.putAll(Table<? extends R,? extends C,? extends V> table)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Copies all mappings from the specified table to this table. The effect is equivalent to calling <xref uid="com.azure.cosmos.implementation.guava25.collect.Table.put" data-throw-if-not-resolved="false">#put</xref> with each row key / column key / value mapping in `table`.
  syntax:
    content: public abstract void putAll(Table<? extends R,? extends C,? extends V> table)
    parameters:
    - id: table
      type: com.azure.cosmos.implementation.guava25.collect.Table<? extends R,? extends C,? extends V>
      description: the table to add to this table
- uid: com.azure.cosmos.implementation.guava25.collect.Table.remove(java.lang.Object,java.lang.Object)
  id: remove(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: remove(Object rowKey, Object columnKey)
  nameWithType: Table<R,C,V>.remove(Object rowKey, Object columnKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.remove(Object rowKey, Object columnKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes the mapping, if any, associated with the given keys.
  syntax:
    content: public abstract V remove(Object rowKey, Object columnKey)
    parameters:
    - id: rowKey
      type: java.lang.Object
      description: row key of mapping to be removed
    - id: columnKey
      type: java.lang.Object
      description: column key of mapping to be removed
    return:
      type: V
      description: the value previously associated with the keys, or <code>null</code> if no such value existed
- uid: com.azure.cosmos.implementation.guava25.collect.Table.row(R)
  id: row(R)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: row(R rowKey)
  nameWithType: Table<R,C,V>.row(R rowKey)
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.row(R rowKey)
  overload: com.azure.cosmos.implementation.guava25.collect.Table.row*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of all mappings that have the given row key. For each row key / column key / value mapping in the table with that row key, the returned map associates the column key with the value. If no mappings in the table have the provided row key, an empty map is returned.


    Changes to the returned map will update the underlying table, and vice versa.
  syntax:
    content: public abstract Map<C,V> row(R rowKey)
    parameters:
    - id: rowKey
      type: R
      description: key of row to search for in the table
    return:
      type: java.util.Map<C,V>
      description: the corresponding map from column keys to values
- uid: com.azure.cosmos.implementation.guava25.collect.Table.rowKeySet()
  id: rowKeySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: rowKeySet()
  nameWithType: Table<R,C,V>.rowKeySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.rowKeySet()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.rowKeySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a set of row keys that have one or more values in the table. Changes to the set will update the underlying table, and vice versa.
  syntax:
    content: public abstract Set<R> rowKeySet()
    return:
      type: java.util.Set<R>
      description: set of row keys
- uid: com.azure.cosmos.implementation.guava25.collect.Table.rowMap()
  id: rowMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: rowMap()
  nameWithType: Table<R,C,V>.rowMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.rowMap()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.rowMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view that associates each row key with the corresponding map from column keys to values. Changes to the returned map will update this table. The returned map does not support `put()` or `putAll()`, or `setValue()` on its entries.


    In contrast, the maps returned by `rowMap().get()` have the same behavior as those returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.Table.row" data-throw-if-not-resolved="false">#row</xref>. Those maps may support `setValue()`, `put()`, and `putAll()`.
  syntax:
    content: public abstract Map<R,Map<C,V>> rowMap()
    return:
      type: java.util.Map<R,java.util.Map<C,V>>
      description: a map view from each row key to a secondary map from column keys to values
- uid: com.azure.cosmos.implementation.guava25.collect.Table.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: size()
  nameWithType: Table<R,C,V>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the number of row key / column key / value mappings in the table.
  syntax:
    content: public abstract int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.Table.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Table
  langs:
  - java
  name: values()
  nameWithType: Table<R,C,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.Table.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a collection of all values, which may contain duplicates. Changes to the returned collection will update the underlying table, and vice versa.
  syntax:
    content: public abstract Collection<V> values()
    return:
      type: java.util.Collection<V>
      description: collection of values
references:
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Table.contains*
  name: contains
  nameWithType: Table<R,C,V>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.containsRow*
  name: containsRow
  nameWithType: Table<R,C,V>.containsRow
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.containsRow
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.containsColumn*
  name: containsColumn
  nameWithType: Table<R,C,V>.containsColumn
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.containsColumn
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.containsValue*
  name: containsValue
  nameWithType: Table<R,C,V>.containsValue
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.containsValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.Table.get*
  name: get
  nameWithType: Table<R,C,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.isEmpty*
  name: isEmpty
  nameWithType: Table<R,C,V>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Table.size*
  name: size
  nameWithType: Table<R,C,V>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.equals*
  name: equals
  nameWithType: Table<R,C,V>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.hashCode*
  name: hashCode
  nameWithType: Table<R,C,V>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.clear*
  name: clear
  nameWithType: Table<R,C,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: R
  spec.java:
  - uid: R
    name: R
    fullName: R
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.Table.put*
  name: put
  nameWithType: Table<R,C,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table<? extends R,? extends C,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Table
    name: Table
    fullName: com.azure.cosmos.implementation.guava25.collect.Table
  - name: <
    fullName: <
  - uid: '? extends R'
    name: '? extends R'
    fullName: '? extends R'
  - name: ','
    fullName: ','
  - uid: '? extends C'
    name: '? extends C'
    fullName: '? extends C'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.putAll*
  name: putAll
  nameWithType: Table<R,C,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.remove*
  name: remove
  nameWithType: Table<R,C,V>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<C,V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.row*
  name: row
  nameWithType: Table<R,C,V>.row
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.row
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<R,V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.column*
  name: column
  nameWithType: Table<R,C,V>.column
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.column
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Table.Cell<R,C,V>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Table.Cell
    name: Cell
    fullName: com.azure.cosmos.implementation.guava25.collect.Table.Cell
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: ','
    fullName: ','
  - uid: C
    name: C
    fullName: C
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.cellSet*
  name: cellSet
  nameWithType: Table<R,C,V>.cellSet
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.cellSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<R>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.rowKeySet*
  name: rowKeySet
  nameWithType: Table<R,C,V>.rowKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.rowKeySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<C>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.columnKeySet*
  name: columnKeySet
  nameWithType: Table<R,C,V>.columnKeySet
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.columnKeySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<V>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.values*
  name: values
  nameWithType: Table<R,C,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<R,java.util.Map<C,V>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: ','
    fullName: ','
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.rowMap*
  name: rowMap
  nameWithType: Table<R,C,V>.rowMap
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.rowMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<C,java.util.Map<R,V>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: ','
    fullName: ','
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: R
    name: R
    fullName: R
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Table.columnMap*
  name: columnMap
  nameWithType: Table<R,C,V>.columnMap
  fullName: com.azure.cosmos.implementation.guava25.collect.Table<R,C,V>.columnMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Table.Cell
  name: Table.Cell<R,C,V>
  nameWithType: Table.Cell<R,C,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Table.Cell<R,C,V>
- uid: '? extends R,? extends C,? extends V'
  name: '? extends R,? extends C,? extends V'
  nameWithType: '? extends R,? extends C,? extends V'
  fullName: '? extends R,? extends C,? extends V'
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: C,V
  name: C,V
  nameWithType: C,V
  fullName: C,V
- uid: R,V
  name: R,V
  nameWithType: R,V
  fullName: R,V
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: R,C,V
  name: R,C,V
  nameWithType: R,C,V
  fullName: R,C,V
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: R,java.util.Map
  name: R,Map
  nameWithType: R,Map
  fullName: R,java.util.Map
- uid: C,java.util.Map
  name: C,Map
  nameWithType: C,Map
  fullName: C,java.util.Map
