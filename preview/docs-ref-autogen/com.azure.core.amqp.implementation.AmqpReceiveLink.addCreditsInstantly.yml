### YamlMime:JavaMember
uid: "com.azure.core.amqp.implementation.AmqpReceiveLink.addCreditsInstantly*"
fullName: "com.azure.core.amqp.implementation.AmqpReceiveLink.addCreditsInstantly"
name: "addCreditsInstantly"
nameWithType: "AmqpReceiveLink.addCreditsInstantly"
members:
- uid: "com.azure.core.amqp.implementation.AmqpReceiveLink.addCreditsInstantly(int)"
  fullName: "com.azure.core.amqp.implementation.AmqpReceiveLink.addCreditsInstantly(int credits)"
  name: "addCreditsInstantly(int credits)"
  nameWithType: "AmqpReceiveLink.addCreditsInstantly(int credits)"
  summary: "Adds the specified number of credits to the link. The number of link credits initialises to zero. It is the application's responsibility to call this method to allow the receiver to receive `credits` more deliveries. It will update the credits in local memory instantly so <xref uid=\"com.azure.core.amqp.implementation.AmqpReceiveLink.getCredits()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getCredits()\"></xref> will get the updated credits immediately. But the service side may get the credits added with a latency. As a contrast, <xref uid=\"com.azure.core.amqp.implementation.AmqpReceiveLink.getCredits()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#getCredits()\"></xref> may return an unchanged value for a short while after <xref uid=\"com.azure.core.amqp.implementation.AmqpReceiveLink.addCredits(int)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#addCredits(int)\"></xref> is called to schedule the credit addition and before the job dispatcher executes it."
  parameters:
  - description: "Number of credits to add to the receive link."
    name: "credits"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void addCreditsInstantly(int credits)"
type: "method"
metadata: {}
package: "com.azure.core.amqp.implementation"
artifact: com.azure:azure-core-amqp:2.1.0-beta.1
