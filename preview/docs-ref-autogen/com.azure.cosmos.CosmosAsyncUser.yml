### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncUser"
  id: "CosmosAsyncUser"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)"
  - "com.azure.cosmos.CosmosAsyncUser.createPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncUser.delete()"
  - "com.azure.cosmos.CosmosAsyncUser.getDatabase()"
  - "com.azure.cosmos.CosmosAsyncUser.getId()"
  - "com.azure.cosmos.CosmosAsyncUser.getLink()"
  - "com.azure.cosmos.CosmosAsyncUser.getParentLink()"
  - "com.azure.cosmos.CosmosAsyncUser.getPermission(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncUser.getURIPathSegment()"
  - "com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncUser.read()"
  - "com.azure.cosmos.CosmosAsyncUser.readAllPermissions(com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncUser.replace(com.azure.cosmos.models.CosmosUserProperties)"
  - "com.azure.cosmos.CosmosAsyncUser.setId(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncUser.upsertPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  langs:
  - "java"
  name: "CosmosAsyncUser"
  nameWithType: "CosmosAsyncUser"
  fullName: "com.azure.cosmos.CosmosAsyncUser"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "The type Cosmos async user."
  syntax:
    content: "public class CosmosAsyncUser"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)"
  id: "CosmosAsyncUser(java.lang.String,com.azure.cosmos.CosmosAsyncDatabase)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "CosmosAsyncUser(String id, CosmosAsyncDatabase database)"
  nameWithType: "CosmosAsyncUser.CosmosAsyncUser(String id, CosmosAsyncDatabase database)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser(String id, CosmosAsyncDatabase database)"
  overload: "com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncUser(String id, CosmosAsyncDatabase database)"
    parameters:
    - id: "id"
      type: "java.lang.String"
    - id: "database"
      type: "com.azure.cosmos.CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosAsyncUser.createPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  id: "createPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "createPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  nameWithType: "CosmosAsyncUser.createPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.createPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncUser.createPermission*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created permission. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncPermissionResponse> createPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
    parameters:
    - id: "permissionSettings"
      type: "com.azure.cosmos.models.CosmosPermissionProperties"
      description: "the permission properties to create."
    - id: "options"
      type: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the created permission or an error."
- uid: "com.azure.cosmos.CosmosAsyncUser.delete()"
  id: "delete()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CosmosAsyncUser.delete()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.delete()"
  overload: "com.azure.cosmos.CosmosAsyncUser.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Delete a cosmos user"
  syntax:
    content: "public Mono<CosmosAsyncUserResponse> delete()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the deleted user or an error."
- uid: "com.azure.cosmos.CosmosAsyncUser.getDatabase()"
  id: "getDatabase()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "getDatabase()"
  nameWithType: "CosmosAsyncUser.getDatabase()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getDatabase()"
  overload: "com.azure.cosmos.CosmosAsyncUser.getDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the parent Database"
  syntax:
    content: "public CosmosAsyncDatabase getDatabase()"
    return:
      type: "com.azure.cosmos.CosmosAsyncDatabase"
      description: "the (@link CosmosAsyncDatabase)"
- uid: "com.azure.cosmos.CosmosAsyncUser.getId()"
  id: "getId()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "CosmosAsyncUser.getId()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getId()"
  overload: "com.azure.cosmos.CosmosAsyncUser.getId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUser\" data-throw-if-not-resolved=\"false\">CosmosAsyncUser</xref>"
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUser\" data-throw-if-not-resolved=\"false\">CosmosAsyncUser</xref>"
- uid: "com.azure.cosmos.CosmosAsyncUser.getLink()"
  id: "getLink()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "getLink()"
  nameWithType: "CosmosAsyncUser.getLink()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getLink()"
  overload: "com.azure.cosmos.CosmosAsyncUser.getLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUser.getParentLink()"
  id: "getParentLink()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "getParentLink()"
  nameWithType: "CosmosAsyncUser.getParentLink()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getParentLink()"
  overload: "com.azure.cosmos.CosmosAsyncUser.getParentLink*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getParentLink()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUser.getPermission(java.lang.String)"
  id: "getPermission(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "getPermission(String id)"
  nameWithType: "CosmosAsyncUser.getPermission(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getPermission(String id)"
  overload: "com.azure.cosmos.CosmosAsyncUser.getPermission*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get cosmos permission without making a call to backend"
  syntax:
    content: "public CosmosAsyncPermission getPermission(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    return:
      type: "com.azure.cosmos.CosmosAsyncPermission"
      description: "the cosmos permission"
- uid: "com.azure.cosmos.CosmosAsyncUser.getURIPathSegment()"
  id: "getURIPathSegment()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "getURIPathSegment()"
  nameWithType: "CosmosAsyncUser.getURIPathSegment()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getURIPathSegment()"
  overload: "com.azure.cosmos.CosmosAsyncUser.getURIPathSegment*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " String getURIPathSegment()"
    return:
      type: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String)"
  id: "queryPermissions(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "queryPermissions(String query)"
  nameWithType: "CosmosAsyncUser.queryPermissions(String query)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.queryPermissions(String query)"
  overload: "com.azure.cosmos.CosmosAsyncUser.queryPermissions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for permissions.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosPermissionProperties> queryPermissions(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained permissions or\n an error."
- uid: "com.azure.cosmos.CosmosAsyncUser.queryPermissions(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  id: "queryPermissions(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "queryPermissions(String query, FeedOptions options)"
  nameWithType: "CosmosAsyncUser.queryPermissions(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.queryPermissions(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncUser.queryPermissions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for permissions.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response pages of the obtained permissions. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosPermissionProperties> queryPermissions(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the obtained permissions or\n an error."
- uid: "com.azure.cosmos.CosmosAsyncUser.read()"
  id: "read()"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "read()"
  nameWithType: "CosmosAsyncUser.read()"
  fullName: "com.azure.cosmos.CosmosAsyncUser.read()"
  overload: "com.azure.cosmos.CosmosAsyncUser.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads a cosmos user"
  syntax:
    content: "public Mono<CosmosAsyncUserResponse> read()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the read user or an error."
- uid: "com.azure.cosmos.CosmosAsyncUser.readAllPermissions(com.azure.cosmos.models.FeedOptions)"
  id: "readAllPermissions(com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "readAllPermissions(FeedOptions options)"
  nameWithType: "CosmosAsyncUser.readAllPermissions(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.readAllPermissions(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncUser.readAllPermissions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all permissions.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response pages of the read permissions. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosPermissionProperties> readAllPermissions(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of the read permissions or an \n error."
- uid: "com.azure.cosmos.CosmosAsyncUser.replace(com.azure.cosmos.models.CosmosUserProperties)"
  id: "replace(com.azure.cosmos.models.CosmosUserProperties)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "replace(CosmosUserProperties userSettings)"
  nameWithType: "CosmosAsyncUser.replace(CosmosUserProperties userSettings)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.replace(CosmosUserProperties userSettings)"
  overload: "com.azure.cosmos.CosmosAsyncUser.replace*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "REPLACE a cosmos user"
  syntax:
    content: "public Mono<CosmosAsyncUserResponse> replace(CosmosUserProperties userSettings)"
    parameters:
    - id: "userSettings"
      type: "com.azure.cosmos.models.CosmosUserProperties"
      description: "the user properties to use"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the replaced user or an error."
- uid: "com.azure.cosmos.CosmosAsyncUser.setId(java.lang.String)"
  id: "setId(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "setId(String id)"
  nameWithType: "CosmosAsyncUser.setId(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.setId(String id)"
  overload: "com.azure.cosmos.CosmosAsyncUser.setId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Set the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUser\" data-throw-if-not-resolved=\"false\">CosmosAsyncUser</xref>"
  syntax:
    content: " CosmosAsyncUser setId(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the <xref uid=\"com.azure.cosmos.CosmosAsyncUser\" data-throw-if-not-resolved=\"false\">CosmosAsyncUser</xref>"
    return:
      type: "com.azure.cosmos.CosmosAsyncUser"
      description: "the same <xref uid=\"com.azure.cosmos.CosmosAsyncUser\" data-throw-if-not-resolved=\"false\">CosmosAsyncUser</xref> that had the id set"
- uid: "com.azure.cosmos.CosmosAsyncUser.upsertPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  id: "upsertPermission(com.azure.cosmos.models.CosmosPermissionProperties,com.azure.cosmos.models.CosmosPermissionRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncUser"
  langs:
  - "java"
  name: "upsertPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  nameWithType: "CosmosAsyncUser.upsertPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncUser.upsertPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncUser.upsertPermission*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Upserts a permission.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the upserted permission. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncPermissionResponse> upsertPermission(CosmosPermissionProperties permissionSettings, CosmosPermissionRequestOptions options)"
    parameters:
    - id: "permissionSettings"
      type: "com.azure.cosmos.models.CosmosPermissionProperties"
      description: "the permission properties to upsert."
    - id: "options"
      type: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
      description: "the request options."
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the upserted permission or an error."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncDatabase"
  name: "CosmosAsyncDatabase"
  nameWithType: "CosmosAsyncDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser*"
  name: "CosmosAsyncUser"
  nameWithType: "CosmosAsyncUser.CosmosAsyncUser"
  fullName: "com.azure.cosmos.CosmosAsyncUser.CosmosAsyncUser"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.getId*"
  name: "getId"
  nameWithType: "CosmosAsyncUser.getId"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getId"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.setId*"
  name: "setId"
  nameWithType: "CosmosAsyncUser.setId"
  fullName: "com.azure.cosmos.CosmosAsyncUser.setId"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncUserResponse"
    name: "CosmosAsyncUserResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncUserResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncUser.read*"
  name: "read"
  nameWithType: "CosmosAsyncUser.read"
  fullName: "com.azure.cosmos.CosmosAsyncUser.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosUserProperties"
  name: "CosmosUserProperties"
  nameWithType: "CosmosUserProperties"
  fullName: "com.azure.cosmos.models.CosmosUserProperties"
- uid: "com.azure.cosmos.CosmosAsyncUser.replace*"
  name: "replace"
  nameWithType: "CosmosAsyncUser.replace"
  fullName: "com.azure.cosmos.CosmosAsyncUser.replace"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.delete*"
  name: "delete"
  nameWithType: "CosmosAsyncUser.delete"
  fullName: "com.azure.cosmos.CosmosAsyncUser.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosPermissionProperties"
  name: "CosmosPermissionProperties"
  nameWithType: "CosmosPermissionProperties"
  fullName: "com.azure.cosmos.models.CosmosPermissionProperties"
- uid: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
  name: "CosmosPermissionRequestOptions"
  nameWithType: "CosmosPermissionRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosPermissionRequestOptions"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncPermissionResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
    name: "CosmosAsyncPermissionResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncUser.createPermission*"
  name: "createPermission"
  nameWithType: "CosmosAsyncUser.createPermission"
  fullName: "com.azure.cosmos.CosmosAsyncUser.createPermission"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.upsertPermission*"
  name: "upsertPermission"
  nameWithType: "CosmosAsyncUser.upsertPermission"
  fullName: "com.azure.cosmos.CosmosAsyncUser.upsertPermission"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.models.FeedOptions"
- uid: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosPermissionProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosPagedFlux"
    name: "CosmosPagedFlux"
    fullName: "com.azure.cosmos.CosmosPagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosPermissionProperties"
    name: "CosmosPermissionProperties"
    fullName: "com.azure.cosmos.models.CosmosPermissionProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncUser.readAllPermissions*"
  name: "readAllPermissions"
  nameWithType: "CosmosAsyncUser.readAllPermissions"
  fullName: "com.azure.cosmos.CosmosAsyncUser.readAllPermissions"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.queryPermissions*"
  name: "queryPermissions"
  nameWithType: "CosmosAsyncUser.queryPermissions"
  fullName: "com.azure.cosmos.CosmosAsyncUser.queryPermissions"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncPermission"
  name: "CosmosAsyncPermission"
  nameWithType: "CosmosAsyncPermission"
  fullName: "com.azure.cosmos.CosmosAsyncPermission"
- uid: "com.azure.cosmos.CosmosAsyncUser.getPermission*"
  name: "getPermission"
  nameWithType: "CosmosAsyncUser.getPermission"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getPermission"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.getURIPathSegment*"
  name: "getURIPathSegment"
  nameWithType: "CosmosAsyncUser.getURIPathSegment"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getURIPathSegment"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.getParentLink*"
  name: "getParentLink"
  nameWithType: "CosmosAsyncUser.getParentLink"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getParentLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.getLink*"
  name: "getLink"
  nameWithType: "CosmosAsyncUser.getLink"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getLink"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncUser.getDatabase*"
  name: "getDatabase"
  nameWithType: "CosmosAsyncUser.getDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncUser.getDatabase"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.models.CosmosAsyncUserResponse"
  name: "CosmosAsyncUserResponse"
  nameWithType: "CosmosAsyncUserResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncUserResponse"
- uid: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
  name: "CosmosAsyncPermissionResponse"
  nameWithType: "CosmosAsyncPermissionResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncPermissionResponse"
- uid: "com.azure.cosmos.CosmosPagedFlux"
  name: "CosmosPagedFlux"
  nameWithType: "CosmosPagedFlux"
  fullName: "com.azure.cosmos.CosmosPagedFlux"
