### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  id: TimestampSynchronizer
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid
  children:
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.TimestampSynchronizer()
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()
  - com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long)
  langs:
  - java
  name: TimestampSynchronizer
  nameWithType: TimestampSynchronizer
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  type: Class
  package: com.azure.cosmos.implementation.uuid
  summary: >-
    This is the API for utility classes optionally used by <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref> to ensure that timestamp values used for generating time/location-based UUIDs are monotonically increasing, as well as that only one such generator is ever used on a single system, even in presence of multiple JVMs.


    The default implementation used by JUG is <xref uid="com.azure.cosmos.implementation.uuid.ext.FileBasedTimestampSynchronizer" data-throw-if-not-resolved="false">FileBasedTimestampSynchronizer</xref>.
  syntax:
    content: public abstract class TimestampSynchronizer
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.TimestampSynchronizer()
  id: TimestampSynchronizer()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  langs:
  - java
  name: TimestampSynchronizer()
  nameWithType: TimestampSynchronizer.TimestampSynchronizer()
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.TimestampSynchronizer()
  overload: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.TimestampSynchronizer*
  type: Constructor
  package: com.azure.cosmos.implementation.uuid
  syntax:
    content: protected TimestampSynchronizer()
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()
  id: deactivate()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  langs:
  - java
  name: deactivate()
  nameWithType: TimestampSynchronizer.deactivate()
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate()
  overload: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate*
  type: Method
  package: com.azure.cosmos.implementation.uuid
  summary: Method <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref> will call if this synchronizer object is being replaced by another synchronizer (or removed, that is, no more synchronization is to be done). It will not be called if JVM terminates.
  syntax:
    content: protected abstract void deactivate()
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()
  id: initialize()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  langs:
  - java
  name: initialize()
  nameWithType: TimestampSynchronizer.initialize()
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize()
  overload: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize*
  type: Method
  package: com.azure.cosmos.implementation.uuid
  summary: >-
    Initialization method is will be called on an instance by <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref> right after it's been configured with one. At this point the implementation instance should have been properly configured, and should be able to determine the first legal timestamp value (return value). Method should also initialize any locking that it does (if any), such as locking files it needs.


    Return value thus indicates the lowest initial time value that can be used by the caller that can not have been used by previous incarnations of the UUID generator (assuming instance was able to find properly persisted data to figure that out). However, caller also needs to make sure that it will call <xref uid="com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update*" data-throw-if-not-resolved="false">#update</xref> when it actually needs the time stamp for the first time, since this method can not allocate timestamps beyond this initial value at this point.
  syntax:
    content: protected abstract long initialize()
    return:
      type: long
      description: >-
        First (and last) legal timestamp to use; <code>0L</code> if it
          can not
           determine it and caller can use whatever value (current timestamp)
           it has access to.
  exceptions:
  - type: java.io.IOException
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long)
  id: update(long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.uuid.TimestampSynchronizer
  langs:
  - java
  name: update(long now)
  nameWithType: TimestampSynchronizer.update(long now)
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update(long now)
  overload: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update*
  type: Method
  package: com.azure.cosmos.implementation.uuid
  summary: Method called by <xref uid="com.azure.cosmos.implementation.uuid.UUIDTimer" data-throw-if-not-resolved="false">UUIDTimer</xref> to indicate that it has generated a timestamp value that is beyond last legal timestamp value. The method should only return once it has "locked" specified timestamp value (and possible additional ones).
  syntax:
    content: protected abstract long update(long now)
    parameters:
    - id: now
      type: long
      description: >-
        Timestamp value caller wants to use, and that the
           synchronizer is asked to protect.
    return:
      type: long
      description: >-
        First timestamp value that can NOT be used by the caller;
            has to be higher than the input timestamp value
  exceptions:
  - type: java.io.IOException
references:
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.TimestampSynchronizer*
  name: TimestampSynchronizer
  nameWithType: TimestampSynchronizer.TimestampSynchronizer
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.TimestampSynchronizer
  package: com.azure.cosmos.implementation.uuid
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize*
  name: initialize
  nameWithType: TimestampSynchronizer.initialize
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.initialize
  package: com.azure.cosmos.implementation.uuid
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate*
  name: deactivate
  nameWithType: TimestampSynchronizer.deactivate
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.deactivate
  package: com.azure.cosmos.implementation.uuid
- uid: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update*
  name: update
  nameWithType: TimestampSynchronizer.update
  fullName: com.azure.cosmos.implementation.uuid.TimestampSynchronizer.update
  package: com.azure.cosmos.implementation.uuid
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
