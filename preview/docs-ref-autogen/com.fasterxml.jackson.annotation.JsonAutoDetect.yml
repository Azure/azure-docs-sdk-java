### YamlMime:JavaType
uid: "com.fasterxml.jackson.annotation.JsonAutoDetect"
fullName: "com.fasterxml.jackson.annotation.JsonAutoDetect"
name: "JsonAutoDetect"
nameWithType: "JsonAutoDetect"
summary: "Class annotation that can be used to define which kinds of Methods are to be detected by auto-detection, and with what minimum access level. Auto-detection means using name conventions and/or signature templates to find methods to use for data binding. For example, so-called \"getters\" can be auto-detected by looking for public member methods that return a value, do not take argument, and have prefix \"get\" in their name.\n\nDefault setting for all accessors is <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Visibility#DEFAULT\"></xref>, which in turn means that the global defaults are used. Defaults are different for different accessor types (getters need to be public; setters can have any access modifier, for example). If you assign different <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Visibility\"></xref> type then it will override global defaults: for example, to require that all setters must be public, you would use:\n\n```java\n@JsonAutoDetect(setterVisibility=Visibility.PUBLIC_ONLY)\n```"
syntax: "public interface JsonAutoDetect implements Annotation"
methods:
- "com.fasterxml.jackson.annotation.JsonAutoDetect.creatorVisibility()"
- "com.fasterxml.jackson.annotation.JsonAutoDetect.fieldVisibility()"
- "com.fasterxml.jackson.annotation.JsonAutoDetect.getterVisibility()"
- "com.fasterxml.jackson.annotation.JsonAutoDetect.isGetterVisibility()"
- "com.fasterxml.jackson.annotation.JsonAutoDetect.setterVisibility()"
type: "interface"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
