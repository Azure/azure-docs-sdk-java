### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
  id: DigitalTwinUpdateRequestOptions
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.models
  children:
  - com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions()
  - com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.getIfMatch()
  - com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.setIfMatch(java.lang.String)
  langs:
  - java
  name: DigitalTwinUpdateRequestOptions
  nameWithType: DigitalTwinUpdateRequestOptions
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
  type: Class
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
  syntax:
    content: public final class DigitalTwinUpdateRequestOptions
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions()
  id: DigitalTwinUpdateRequestOptions()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
  langs:
  - java
  name: DigitalTwinUpdateRequestOptions()
  nameWithType: DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions()
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions()
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
  syntax:
    content: public DigitalTwinUpdateRequestOptions()
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.getIfMatch()
  id: getIfMatch()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
  langs:
  - java
  name: getIfMatch()
  nameWithType: DigitalTwinUpdateRequestOptions.getIfMatch()
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.getIfMatch()
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.getIfMatch*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
  summary: Gets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
  syntax:
    content: public String getIfMatch()
    return:
      type: java.lang.String
      description: A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.setIfMatch(java.lang.String)
  id: setIfMatch(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
  langs:
  - java
  name: setIfMatch(String ifMatch)
  nameWithType: DigitalTwinUpdateRequestOptions.setIfMatch(String ifMatch)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.setIfMatch(String ifMatch)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.setIfMatch*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
  summary: >-
    Sets a string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.


    The request's operation is performed only if this ETag matches the value maintained by the server, indicating that the entity has not been modified since it was last retrieved. To force the operation to execute only if the entity exists, set the ETag to the wildcard character '\*'. To force the operation to execute unconditionally, leave this value null. If this value is not set, it defaults to null, and the ifMatch header will not be sent with the request. This means that update will be unconditional and the operation will execute regardless of the existence of the resource.
  syntax:
    content: public DigitalTwinUpdateRequestOptions setIfMatch(String ifMatch)
    parameters:
    - id: ifMatch
      type: java.lang.String
      description: A string representing a weak ETag for the entity that this request performs an operation against, as per RFC7232.
    return:
      type: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
      description: The UpdateDigitalTwinRequestOptions object itself.
references:
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions*
  name: DigitalTwinUpdateRequestOptions
  nameWithType: DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.DigitalTwinUpdateRequestOptions
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.getIfMatch*
  name: getIfMatch
  nameWithType: DigitalTwinUpdateRequestOptions.getIfMatch
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.getIfMatch
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.setIfMatch*
  name: setIfMatch
  nameWithType: DigitalTwinUpdateRequestOptions.setIfMatch
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions.setIfMatch
  package: com.microsoft.azure.sdk.iot.service.digitaltwin.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
