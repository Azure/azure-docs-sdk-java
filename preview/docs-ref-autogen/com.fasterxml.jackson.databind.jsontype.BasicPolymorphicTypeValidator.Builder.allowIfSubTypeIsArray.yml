### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray*"
fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray"
name: "allowIfSubTypeIsArray"
nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray"
members:
- uid: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()"
  fullName: "com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()"
  name: "allowIfSubTypeIsArray()"
  nameWithType: "BasicPolymorphicTypeValidator.Builder.allowIfSubTypeIsArray()"
  summary: "Method for appending matcher that will allow all subtypes that are Java arrays (regardless of element type). Note that this does NOT validate element type itself as long as Polymorphic Type handling is enabled for element type: this is the case with all standard \"Default Typing\" inclusion criteria as well as for annotation (`@JsonTypeInfo`) use case (since annotation only applies to element types, not container).\n\nNOTE: not used with other Java collection types (<xref uid=\"java.util.List\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.List\"></xref>s, <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s), mostly since use of generic types as polymorphic values is not (well) supported."
  syntax: "public BasicPolymorphicTypeValidator.Builder allowIfSubTypeIsArray()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder?alt=com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator.Builder&text=Builder\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.jsontype"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
