### YamlMime:JavaType
uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions"
fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions"
name: "DataLakeFileAppendOptions"
nameWithType: "DataLakeFileAppendOptions"
summary: "Optional parameters for appending data to a file."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DataLakeFileAppendOptions"
constructors:
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.DataLakeFileAppendOptions()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.DataLakeFileAppendOptions()"
  name: "DataLakeFileAppendOptions()"
  nameWithType: "DataLakeFileAppendOptions.DataLakeFileAppendOptions()"
  syntax: "public DataLakeFileAppendOptions()"
methods:
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getContentMd5()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getContentMd5()"
  name: "getContentMd5()"
  nameWithType: "DataLakeFileAppendOptions.getContentMd5()"
  summary: "When this header is specified, the storage service compares the hash of the content that has arrived with this header value."
  syntax: "public byte[] getContentMd5()"
  desc: "When this header is specified, the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match, the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is associated with the request content, and not with the stored content of the file itself."
  returns:
    description: "MD5 hash of the content of the data."
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseId()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.getLeaseId()"
  name: "getLeaseId()"
  nameWithType: "DataLakeFileAppendOptions.getLeaseId()"
  summary: "Gets the lease ID to access the file."
  syntax: "public String getLeaseId()"
  desc: "Gets the lease ID to access the file."
  returns:
    description: "lease ID to access this file."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.isFlush()"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.isFlush()"
  name: "isFlush()"
  nameWithType: "DataLakeFileAppendOptions.isFlush()"
  summary: "Returns whether file will be flushed after the append."
  syntax: "public Boolean isFlush()"
  desc: "Returns whether file will be flushed after the append."
  returns:
    description: "the boolean flag for flush."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setContentHash(byte[])"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setContentHash(byte[] contentMd5)"
  name: "setContentHash(byte[] contentMd5)"
  nameWithType: "DataLakeFileAppendOptions.setContentHash(byte[] contentMd5)"
  summary: "This hash is used to verify the integrity of the request content during transport."
  parameters:
  - description: "contentMd5 An MD5 hash of the content of the data. If specified, the service will calculate\n the MD5 of the received data and fail the request if it does not match the provided MD5."
    name: "contentMd5"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public DataLakeFileAppendOptions setContentHash(byte[] contentMd5)"
  desc: "This hash is used to verify the integrity of the request content during transport. When this header is specified, the storage service compares the hash of the content that has arrived with this header value. If the two hashes do not match, the operation will fail with error code 400 (Bad Request). Note that this MD5 hash is not stored with the file. This header is associated with the request content, and not with the stored content of the file itself."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setFlush(java.lang.Boolean)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setFlush(Boolean flush)"
  name: "setFlush(Boolean flush)"
  nameWithType: "DataLakeFileAppendOptions.setFlush(Boolean flush)"
  summary: "If true, the file will be flushed after the append."
  parameters:
  - description: "boolean flag to indicate whether file should be flushed."
    name: "flush"
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileAppendOptions setFlush(Boolean flush)"
  desc: "If true, the file will be flushed after the append."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseId(java.lang.String)"
  fullName: "com.azure.storage.file.datalake.options.DataLakeFileAppendOptions.setLeaseId(String leaseId)"
  name: "setLeaseId(String leaseId)"
  nameWithType: "DataLakeFileAppendOptions.setLeaseId(String leaseId)"
  summary: "Sets the lease ID."
  parameters:
  - description: "The lease ID."
    name: "leaseId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DataLakeFileAppendOptions setLeaseId(String leaseId)"
  desc: "Sets the lease ID."
  returns:
    description: "the updated DataLakeFileAppendOptions object."
    type: "<xref href=\"com.azure.storage.file.datalake.options.DataLakeFileAppendOptions?alt=com.azure.storage.file.datalake.options.DataLakeFileAppendOptions&text=DataLakeFileAppendOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Optional parameters for appending data to a file."
metadata: {}
package: "com.azure.storage.file.datalake.options"
artifact: com.azure:azure-storage-file-datalake:12.13.0-beta.1
