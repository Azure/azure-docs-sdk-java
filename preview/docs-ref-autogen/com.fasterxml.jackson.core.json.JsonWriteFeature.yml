### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature
  id: JsonWriteFeature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json
  children:
  - com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII
  - com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES
  - com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS
  - com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS
  - com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()
  - com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()
  - com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int)
  - com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()
  - com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()
  - com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.json.JsonWriteFeature.values()
  langs:
  - java
  name: JsonWriteFeature
  nameWithType: JsonWriteFeature
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature
  type: Enum
  package: com.fasterxml.jackson.core.json
  summary: Token writer features specific to JSON backend.
  syntax:
    content: public enum JsonWriteFeature extends Enum<JsonWriteFeature> implements FormatFeature
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  implements:
  - com.fasterxml.jackson.core.FormatFeature
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII
  id: ESCAPE_NON_ASCII
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: ESCAPE_NON_ASCII
  nameWithType: JsonWriteFeature.ESCAPE_NON_ASCII
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that specifies that all characters beyond 7-bit ASCII range (i.e. code points of 128 and above) need to be output using format-specific escapes (for JSON, backslash escapes), if format uses escaping mechanisms (which is generally true for textual formats but not for binary formats).


    Feature is disabled by default.
  syntax:
    content: public static final JsonWriteFeature ESCAPE_NON_ASCII
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteFeature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.JsonWriteFeature(boolean,com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: JsonWriteFeature(boolean,com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: JsonWriteFeature(boolean defaultState, JsonGenerator.Feature mapTo)
  nameWithType: JsonWriteFeature.JsonWriteFeature(boolean defaultState, JsonGenerator.Feature mapTo)
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.JsonWriteFeature(boolean defaultState, JsonGenerator.Feature mapTo)
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.JsonWriteFeature*
  type: Constructor
  package: com.fasterxml.jackson.core.json
  syntax:
    content: private JsonWriteFeature(boolean defaultState, JsonGenerator.Feature mapTo)
    parameters:
    - id: defaultState
      type: boolean
    - id: mapTo
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES
  id: QUOTE_FIELD_NAMES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: QUOTE_FIELD_NAMES
  nameWithType: JsonWriteFeature.QUOTE_FIELD_NAMES
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether JSON Object field names are quoted using double-quotes, as specified by JSON specification or not. Ability to disable quoting was added to support use cases where they are not usually expected, which most commonly occurs when used straight from Javascript.


    Feature is enabled by default (since it is required by JSON specification).
  syntax:
    content: public static final JsonWriteFeature QUOTE_FIELD_NAMES
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteFeature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS
  id: WRITE_NAN_AS_STRINGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: WRITE_NAN_AS_STRINGS
  nameWithType: JsonWriteFeature.WRITE_NAN_AS_STRINGS
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that determines whether "NaN" ("not a number", that is, not real number) float/double values are output as JSON strings. The values checked are Double.Nan, Double.POSITIVE\_INFINITY and Double.NEGATIVE\_INIFINTY (and associated Float values). If feature is disabled, these numbers are still output using associated literal values, resulting in non-conforming output.


    Feature is enabled by default.
  syntax:
    content: public static final JsonWriteFeature WRITE_NAN_AS_STRINGS
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteFeature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS
  id: WRITE_NUMBERS_AS_STRINGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: WRITE_NUMBERS_AS_STRINGS
  nameWithType: JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS
  type: Field
  package: com.fasterxml.jackson.core.json
  summary: >-
    Feature that forces all regular number values to be written as JSON Strings, instead of as JSON Numbers. Default state is 'false', meaning that Java numbers are to be serialized using basic numeric representation but if enabled all such numeric values are instead written out as JSON Strings instead.


    One use case is to avoid problems with Javascript limitations: since Javascript standard specifies that all number handling should be done using 64-bit IEEE 754 floating point values, result being that some 64-bit integer values can not be accurately represent (as mantissa is only 51 bit wide).


    Feature is disabled by default.
  syntax:
    content: public static final JsonWriteFeature WRITE_NUMBERS_AS_STRINGS
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteFeature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()
  id: collectDefaults()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: collectDefaults()
  nameWithType: JsonWriteFeature.collectDefaults()
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int collectDefaults()
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: JsonWriteFeature.enabledByDefault()
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Accessor for checking whether this feature is enabled by default.
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: JsonWriteFeature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int flags)
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Convenience method for checking whether feature is enabled in given bitmask
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: getMask()
  nameWithType: JsonWriteFeature.getMask()
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.getMask*
  type: Method
  package: com.fasterxml.jackson.core.json
  summary: Returns bit mask for this feature instance; must be a single bit, that is of form `(1 << N)`
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()
  id: mappedFeature()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: mappedFeature()
  nameWithType: JsonWriteFeature.mappedFeature()
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public JsonGenerator.Feature mappedFeature()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonWriteFeature.valueOf(String name)
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf(String name)
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public static JsonWriteFeature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteFeature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.json.JsonWriteFeature
  langs:
  - java
  name: values()
  nameWithType: JsonWriteFeature.values()
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.values()
  overload: com.fasterxml.jackson.core.json.JsonWriteFeature.values*
  type: Method
  package: com.fasterxml.jackson.core.json
  syntax:
    content: public static JsonWriteFeature[] values()
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteFeature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature
  name: JsonGenerator.Feature
  nameWithType: JsonGenerator.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.JsonWriteFeature*
  name: JsonWriteFeature
  nameWithType: JsonWriteFeature.JsonWriteFeature
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.JsonWriteFeature
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.json.JsonWriteFeature
    name: JsonWriteFeature
    fullName: com.fasterxml.jackson.core.json.JsonWriteFeature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.values*
  name: values
  nameWithType: JsonWriteFeature.values
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.values
  package: com.fasterxml.jackson.core.json
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf*
  name: valueOf
  nameWithType: JsonWriteFeature.valueOf
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf
  package: com.fasterxml.jackson.core.json
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults*
  name: collectDefaults
  nameWithType: JsonWriteFeature.collectDefaults
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault*
  name: enabledByDefault
  nameWithType: JsonWriteFeature.enabledByDefault
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.getMask*
  name: getMask
  nameWithType: JsonWriteFeature.getMask
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.getMask
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn*
  name: enabledIn
  nameWithType: JsonWriteFeature.enabledIn
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn
  package: com.fasterxml.jackson.core.json
- uid: com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature*
  name: mappedFeature
  nameWithType: JsonWriteFeature.mappedFeature
  fullName: com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature
  package: com.fasterxml.jackson.core.json
- uid: java.lang.Enum<com.fasterxml.jackson.core.json.JsonWriteFeature>
  name: Enum<JsonWriteFeature>
  nameWithType: Enum<JsonWriteFeature>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.json.JsonWriteFeature>
- uid: com.fasterxml.jackson.core.FormatFeature
  name: FormatFeature
  nameWithType: FormatFeature
  fullName: com.fasterxml.jackson.core.FormatFeature
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
