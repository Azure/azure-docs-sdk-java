### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.json.JsonWriteFeature"
fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature"
name: "JsonWriteFeature"
nameWithType: "JsonWriteFeature"
summary: "Token writer features specific to JSON backend."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonWriteFeature extends Enum<JsonWriteFeature> implements FormatFeature"
fields:
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.ESCAPE_NON_ASCII"
  name: "ESCAPE_NON_ASCII"
  nameWithType: "JsonWriteFeature.ESCAPE_NON_ASCII"
  summary: "Feature that specifies that all characters beyond 7-bit ASCII range (i.e. code points of 128 and above) need to be output using format-specific escapes (for JSON, backslash escapes), if format uses escaping mechanisms (which is generally true for textual formats but not for binary formats).\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.QUOTE_FIELD_NAMES"
  name: "QUOTE_FIELD_NAMES"
  nameWithType: "JsonWriteFeature.QUOTE_FIELD_NAMES"
  summary: "Feature that determines whether JSON Object field names are quoted using double-quotes, as specified by JSON specification or not. Ability to disable quoting was added to support use cases where they are not usually expected, which most commonly occurs when used straight from Javascript.\n\nFeature is enabled by default (since it is required by JSON specification)."
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NAN_AS_STRINGS"
  name: "WRITE_NAN_AS_STRINGS"
  nameWithType: "JsonWriteFeature.WRITE_NAN_AS_STRINGS"
  summary: "Feature that determines whether \"NaN\" (\"not a number\", that is, not real number) float/double values are output as JSON strings. The values checked are Double.Nan, Double.POSITIVE\\_INFINITY and Double.NEGATIVE\\_INIFINTY (and associated Float values). If feature is disabled, these numbers are still output using associated literal values, resulting in non-conforming output.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS"
  name: "WRITE_NUMBERS_AS_STRINGS"
  nameWithType: "JsonWriteFeature.WRITE_NUMBERS_AS_STRINGS"
  summary: "Feature that forces all regular number values to be written as JSON Strings, instead of as JSON Numbers. Default state is 'false', meaning that Java numbers are to be serialized using basic numeric representation but if enabled all such numeric values are instead written out as JSON Strings instead.\n\nOne use case is to avoid problems with Javascript limitations: since Javascript standard specifies that all number handling should be done using 64-bit IEEE 754 floating point values, result being that some 64-bit integer values can not be accurately represent (as mantissa is only 51 bit wide).\n\nFeature is disabled by default."
methods:
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "JsonWriteFeature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "JsonWriteFeature.enabledByDefault()"
  summary: "Accessor for checking whether this feature is enabled by default."
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "JsonWriteFeature.enabledIn(int flags)"
  summary: "Convenience method for checking whether feature is enabled in given bitmask"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.getMask()"
  name: "getMask()"
  nameWithType: "JsonWriteFeature.getMask()"
  summary: "Returns bit mask for this feature instance; must be a single bit, that is of form `(1 << N)`"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.mappedFeature()"
  name: "mappedFeature()"
  nameWithType: "JsonWriteFeature.mappedFeature()"
  syntax: "public JsonGenerator.Feature mappedFeature()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator.Feature?alt=com.fasterxml.jackson.core.JsonGenerator.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonWriteFeature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonWriteFeature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.json.JsonWriteFeature?alt=com.fasterxml.jackson.core.json.JsonWriteFeature&text=JsonWriteFeature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.json.JsonWriteFeature.values()"
  fullName: "com.fasterxml.jackson.core.json.JsonWriteFeature.values()"
  name: "values()"
  nameWithType: "JsonWriteFeature.values()"
  syntax: "public static JsonWriteFeature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.json.JsonWriteFeature?alt=com.fasterxml.jackson.core.json.JsonWriteFeature&text=JsonWriteFeature\" data-throw-if-not-resolved=\"False\" />[]"
implements:
- "<xref href=\"com.fasterxml.jackson.core.FormatFeature?alt=com.fasterxml.jackson.core.FormatFeature&text=FormatFeature\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.core.json"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
