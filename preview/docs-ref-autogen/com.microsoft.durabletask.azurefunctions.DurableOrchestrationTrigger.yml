### YamlMime:JavaType
uid: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger"
fullName: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger"
name: "DurableOrchestrationTrigger"
nameWithType: "DurableOrchestrationTrigger"
summary: "Azure Functions attribute for binding a function parameter to a Durable Task orchestration request."
syntax: "public interface DurableOrchestrationTrigger implements Annotation"
methods:
- uid: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger.dataType()"
  fullName: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger.dataType()"
  name: "dataType()"
  nameWithType: "DurableOrchestrationTrigger.dataType()"
  summary: "Defines how Functions runtime should treat the parameter value."
  modifiers:
  - "abstract"
  syntax: "public abstract String dataType()"
  desc: "Defines how Functions runtime should treat the parameter value. Possible values are:\n\n *  \"\": get the value as a string, and try to deserialize to actual parameter type like POJO\n *  string: always get the value as a string\n *  binary: get the value as a binary data, and try to deserialize to actual parameter type byte\\[\\]"
  returns:
    description: "The dataType which will be used by the Functions runtime."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger.name()"
  fullName: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger.name()"
  name: "name()"
  nameWithType: "DurableOrchestrationTrigger.name()"
  summary: "The variable name used in function.<wbr>json."
  modifiers:
  - "abstract"
  syntax: "public abstract String name()"
  desc: "The variable name used in function.json."
  returns:
    description: "The variable name used in function.json."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger.orchestration()"
  fullName: "com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger.orchestration()"
  name: "orchestration()"
  nameWithType: "DurableOrchestrationTrigger.orchestration()"
  summary: "The name of the orchestrator function."
  modifiers:
  - "abstract"
  syntax: "public abstract String orchestration()"
  desc: "The name of the orchestrator function.\n\nIf not specified, the function name is used as the name of the orchestration.\n\nThis property supports binding parameters."
  returns:
    description: "The name of the orchestrator function."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "Azure Functions attribute for binding a function parameter to a Durable Task orchestration request.\n\nThe following is an example of an orchestrator function that calls three activity functions in sequence.\n\n```java\n@FunctionName(\"HelloCities\")\n public String helloCitiesOrchestrator(\n         @DurableOrchestrationTrigger(name = \"orchestratorRequestProtoBytes\") String orchestratorRequestProtoBytes) {\n     return OrchestrationRunner.loadAndRun(orchestratorRequestProtoBytes, ctx -> {\n         String result = \"\";\n         result += ctx.callActivity(\"SayHello\", \"Tokyo\", String.class).await() + \", \";\n         result += ctx.callActivity(\"SayHello\", \"London\", String.class).await() + \", \";\n         result += ctx.callActivity(\"SayHello\", \"Seattle\", String.class).await();\n         return result;\n     });\n }\n```"
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.durabletask.azurefunctions"
artifact: com.microsoft:durabletask-azure-functions:1.0.0-beta.1
