### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.base.Verify"
fullName: "com.azure.cosmos.implementation.guava25.base.Verify"
name: "Verify"
nameWithType: "Verify"
summary: "Static convenience methods that serve the same purpose as Java language [assertions][], except that they are always enabled. These methods should be used instead of Java assertions whenever there is a chance the check may fail \"in real life\". Example:\n\n```java\nBill bill = remoteService.getLastUnpaidBill();\n\n // In case bug 12345 happens again we'd rather just die\n Verify.verify(bill.status() == Status.UNPAID,\n     \"Unexpected bill status: %s\", bill.status());\n```\n\n### Comparison to alternatives ###\n\n**Note:** In some cases the differences explained below can be subtle. When it's unclear which approach to use, **don't worry** too much about it; just pick something that seems reasonable and it will be fine.\n\n *  If checking whether the *caller* has violated your method or constructor's contract (such as by passing an invalid argument), use the utilities of the <xref uid=\"com.azure.cosmos.implementation.guava25.base.Preconditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Preconditions\"></xref> class instead.\n *  If checking an *impossible* condition (which *cannot* happen unless your own class or its *trusted* dependencies is badly broken), this is what ordinary Java assertions are for. Note that assertions are not enabled by default; they are essentially considered \"compiled comments.\"\n *  An explicit `if/throw` (as illustrated below) is always acceptable; we still recommend using our <xref uid=\"com.azure.cosmos.implementation.guava25.base.VerifyException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"VerifyException\"></xref> exception type. Throwing a plain <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> is frowned upon.\n *  Use of <xref uid=\"com.azure.cosmos.implementation.guava25.base.Objects.requireNonNull*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Objects#requireNonNull(Object)\"></xref> is generally discouraged, since <xref uid=\"com.azure.cosmos.implementation.guava25.base.Verify.verifyNotNull*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#verifyNotNull(Object)\"></xref> and <xref uid=\"com.azure.cosmos.implementation.guava25.base.Preconditions.checkNotNull*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Preconditions#checkNotNull(Object)\"></xref> perform the same function with more clarity.\n\n### Warning about performance ###\n\nRemember that parameter values for message construction must all be computed eagerly, and autoboxing and varargs array creation may happen as well, even when the verification succeeds and the message ends up unneeded. Performance-sensitive verification checks should continue to use usual form:\n\n```java\nBill bill = remoteService.getLastUnpaidBill();\n if (bill.status() != Status.UNPAID) {\n   throw new VerifyException(\"Unexpected bill status: \" + bill.status());\n }\n```\n\n### Only `%s` is supported ###\n\nAs with <xref uid=\"com.azure.cosmos.implementation.guava25.base.Preconditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Preconditions\"></xref> error message template strings, only the `\"%s\"` specifier is supported, not the full range of <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Formatter\"></xref> specifiers. However, note that if the number of arguments does not match the number of occurrences of `\"%s\"` in the format string, `Verify` will still behave as expected, and will still include all argument values in the error message; the message will simply not be formatted exactly as intended.\n\n### More information ###\n\nSee [Conditional failures explained][] in the Guava User Guide for advice on when this class should be used.\n\n\n[assertions]: http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\n[Conditional failures explained]: https://github.com/google/guava/wiki/ConditionalFailuresExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Verify"
methods:
- "com.azure.cosmos.implementation.guava25.base.Verify.<T>verifyNotNull(T)"
- "com.azure.cosmos.implementation.guava25.base.Verify.<T>verifyNotNull(T,java.lang.String,java.lang.Object...)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,char)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,char,char)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,char,int)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,char,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,char,long)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,int,char)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,int,int)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,int,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,int,long)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object,char)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object,int)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object,long)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,java.lang.Object...)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,long)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,long,char)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,long,int)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,long,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.base.Verify.verify(boolean,java.lang.String,long,long)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
