### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  id: ImmutableBiMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<T,K,V>toImmutableBiMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.forcePut(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.inverse()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.values()
  langs:
  - java
  name: ImmutableBiMap<K,V>
  nameWithType: ImmutableBiMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: A <xref uid="com.azure.cosmos.implementation.guava25.collect.BiMap" data-throw-if-not-resolved="false">BiMap</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.
  syntax:
    content: public abstract class ImmutableBiMap<K,V> extends ImmutableBiMapFauxverideShim<K,V> implements BiMap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim
  implements:
  - com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>builder()
  id: <K,V>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>builder()
  nameWithType: ImmutableBiMap<K,V>.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableBiMap.Builder<K,V> <K,V>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>builderWithExpectedSize(int)
  id: <K,V>builderWithExpectedSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>builderWithExpectedSize(int expectedSize)
  nameWithType: ImmutableBiMap<K,V>.<K,V>builderWithExpectedSize(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>builderWithExpectedSize(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.builderWithExpectedSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new builder, expecting the specified number of entries to be added.


    If `expectedSize` is exactly the number of entries added to the builder before <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder.build" data-throw-if-not-resolved="false">Builder#build</xref> is called, the builder is likely to perform better than an unsized <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.&lt;K,V&gt;builder()" data-throw-if-not-resolved="false">#builder()</xref> would have.


    It is not specified if any performance benefits apply if `expectedSize` is close to, but not exactly, the number of entries added to the builder.
  syntax:
    content: public static ImmutableBiMap.Builder<K,V> <K,V>builderWithExpectedSize(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  id: <K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  nameWithType: ImmutableBiMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable bimap containing the given entries. The returned bimap iterates over entries in the same order as the original iterable.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  id: <K,V>copyOf(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>copyOf(Map<? extends K,? extends V> map)
  nameWithType: ImmutableBiMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>copyOf(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable bimap containing the same entries as `map`. If `map` somehow contains entries with duplicate keys (for example, if it is a `SortedMap` whose comparator is not *consistent with equals*), the results of this method are undefined.


    The returned `BiMap` iterates over entries in the same order as the `entrySet` of the original map.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>copyOf(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of()
  id: <K,V>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>of()
  nameWithType: ImmutableBiMap<K,V>.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty bimap.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V)
  id: <K,V>of(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>of(K k1, V v1)
  nameWithType: ImmutableBiMap<K,V>.<K,V>of(K k1, V v1)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of(K k1, V v1)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable bimap containing a single entry.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>of(K k1, V v1)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V)
  id: <K,V>of(K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2)
  nameWithType: ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>of(K k1, V v1, K k2, V v2)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  nameWithType: ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  nameWithType: ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  nameWithType: ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map containing the given entries, in order.
  syntax:
    content: public static ImmutableBiMap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    - id: k5
      type: K
    - id: v5
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<T,K,V>toImmutableBiMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  id: <T,K,V>toImmutableBiMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: <T,K,V>toImmutableBiMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  nameWithType: ImmutableBiMap<K,V>.<T,K,V>toImmutableBiMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<T,K,V>toImmutableBiMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.toImmutableBiMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a <xref uid="java.util.stream.Collector" data-throw-if-not-resolved="false">Collector</xref> that accumulates elements into an `ImmutableBiMap` whose keys and values are the result of applying the provided mapping functions to the input elements. Entries appear in the result `ImmutableBiMap` in encounter order.


    If the mapped keys or values contain duplicates (according to <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref>, an `IllegalArgumentException` is thrown when the collection operation is performed. (This differs from the `Collector` returned by <xref uid="" data-throw-if-not-resolved="false">Collectors#toMap(Function, Function)</xref>, which throws an `IllegalStateException`.)
  syntax:
    content: public static Collector<T,?,ImmutableBiMap<K,V>> <T,K,V>toImmutableBiMap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction)
    parameters:
    - id: keyFunction
      type: java.util.function.Function<? super T,? extends K>
    - id: valueFunction
      type: java.util.function.Function<? super T,? extends V>
    return:
      type: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.ImmutableBiMap()
  id: ImmutableBiMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: ImmutableBiMap()
  nameWithType: ImmutableBiMap<K,V>.ImmutableBiMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.ImmutableBiMap()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.ImmutableBiMap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableBiMap()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.forcePut(K,V)
  id: forcePut(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: forcePut(K key, V value)
  nameWithType: ImmutableBiMap<K,V>.forcePut(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.forcePut(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.forcePut*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the bimap unmodified.
  syntax:
    content: public V forcePut(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.inverse()
  id: inverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: inverse()
  nameWithType: ImmutableBiMap<K,V>.inverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.inverse()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.inverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the inverse view of this bimap, which maps each of this bimap's values to its associated key. The two bimaps are backed by the same data; any changes to one will appear in the other.


    **Note:**There is no guaranteed correspondence between the iteration order of a bimap and that of its inverse.


    The inverse of an `ImmutableBiMap` is another `ImmutableBiMap`.
  syntax:
    content: public abstract ImmutableBiMap<V,K> inverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<V,K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  langs:
  - java
  name: values()
  nameWithType: ImmutableBiMap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set of the values in this map, in the same order they appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.entrySet" data-throw-if-not-resolved="false">#entrySet</xref>.
  syntax:
    content: public ImmutableSet<V> values()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.ImmutableBiMap*
  name: ImmutableBiMap
  nameWithType: ImmutableBiMap<K,V>.ImmutableBiMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.ImmutableBiMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,? extends K>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Function<? super T,? extends V>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
    name: ImmutableBiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.toImmutableBiMap*
  name: <T,K,V>toImmutableBiMap
  nameWithType: ImmutableBiMap<K,V>.<T,K,V>toImmutableBiMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<T,K,V>toImmutableBiMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
    name: ImmutableBiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.of*
  name: <K,V>of
  nameWithType: ImmutableBiMap<K,V>.<K,V>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.builder*
  name: <K,V>builder
  nameWithType: ImmutableBiMap<K,V>.<K,V>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.builderWithExpectedSize*
  name: <K,V>builderWithExpectedSize
  nameWithType: ImmutableBiMap<K,V>.<K,V>builderWithExpectedSize
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>builderWithExpectedSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.copyOf*
  name: <K,V>copyOf
  nameWithType: ImmutableBiMap<K,V>.<K,V>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.<K,V>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Map.Entry'
    name: Entry
    fullName: '? extends java.util.Map.Entry'
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<V,K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
    name: ImmutableBiMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.inverse*
  name: inverse
  nameWithType: ImmutableBiMap<K,V>.inverse
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.inverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.values*
  name: values
  nameWithType: ImmutableBiMap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.forcePut*
  name: forcePut
  nameWithType: ImmutableBiMap<K,V>.forcePut
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>.forcePut
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim<K,V>
  name: ImmutableBiMapFauxverideShim<K,V>
  nameWithType: ImmutableBiMapFauxverideShim<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
  name: BiMap<K,V>
  nameWithType: BiMap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
  name: ImmutableMap.put(K,V)
  nameWithType: ImmutableMap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
  name: ImmutableMap.<K,V>copyOf(Map<? extends K,? extends V>)
  nameWithType: ImmutableMap.<K,V>copyOf(Map<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
  name: ImmutableMap.<K,V>of()
  nameWithType: ImmutableMap.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  name: ImmutableMap.computeIfAbsent(K,Function<? super K,? extends V>)
  nameWithType: ImmutableMap.computeIfAbsent(K,Function<? super K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
  name: ImmutableMap.hashCode()
  nameWithType: ImmutableMap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
  name: ImmutableMap.clear()
  nameWithType: ImmutableMap.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
  name: ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  nameWithType: ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ImmutableMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: ImmutableMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
  name: ImmutableMap.remove(Object)
  nameWithType: ImmutableMap.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
  name: ImmutableMap.values()
  nameWithType: ImmutableMap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
  name: ImmutableMap.equals(Object)
  nameWithType: ImmutableMap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
  name: ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>,BinaryOperator<V>)
  nameWithType: ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(Function<? super T,? extends K>,Function<? super T,? extends V>,BinaryOperator<V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
  name: ImmutableMap.remove(Object,Object)
  nameWithType: ImmutableMap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  name: ImmutableMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  nameWithType: ImmutableMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
  name: ImmutableMap.containsKey(Object)
  nameWithType: ImmutableMap.containsKey(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)
  name: ImmutableMap.<K,V>of(K,V,K,V,K,V)
  nameWithType: ImmutableMap.<K,V>of(K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  name: ImmutableMap.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  nameWithType: ImmutableMap.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)
  name: ImmutableMap.<K,V>of(K,V,K,V)
  nameWithType: ImmutableMap.<K,V>of(K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
  name: ImmutableMap.toString()
  nameWithType: ImmutableMap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)
  name: ImmutableMap.<K,V>of(K,V)
  nameWithType: ImmutableMap.<K,V>of(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
  name: ImmutableMap.get(Object)
  nameWithType: ImmutableMap.get(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
  name: ImmutableMap.putIfAbsent(K,V)
  nameWithType: ImmutableMap.putIfAbsent(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
  name: ImmutableMap.replace(K,V,V)
  nameWithType: ImmutableMap.replace(K,V,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
  name: ImmutableMap.entrySet()
  nameWithType: ImmutableMap.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
  name: ImmutableMap.asMultimap()
  nameWithType: ImmutableMap.asMultimap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
  name: ImmutableMap.getOrDefault(Object,V)
  nameWithType: ImmutableMap.getOrDefault(Object,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
  name: ImmutableMap.putAll(Map<? extends K,? extends V>)
  nameWithType: ImmutableMap.putAll(Map<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)
  name: ImmutableMap.<K,V>builderWithExpectedSize(int)
  nameWithType: ImmutableMap.<K,V>builderWithExpectedSize(int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
  name: ImmutableMap.isEmpty()
  nameWithType: ImmutableMap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
  name: ImmutableMap.replace(K,V)
  nameWithType: ImmutableMap.replace(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
  name: ImmutableMap.keySet()
  nameWithType: ImmutableMap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  name: ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  nameWithType: ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
  name: ImmutableMap.containsValue(Object)
  nameWithType: ImmutableMap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ImmutableMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: ImmutableMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ImmutableMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  nameWithType: ImmutableMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
  name: ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
  nameWithType: ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()
  name: ImmutableMap.<K,V>builder()
  nameWithType: ImmutableMap.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder
  name: ImmutableBiMap.Builder<K,V>
  nameWithType: ImmutableBiMap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.Builder<K,V>
- uid: '? super T,? extends K'
  name: '? super T,? extends K'
  nameWithType: '? super T,? extends K'
  fullName: '? super T,? extends K'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T,? extends V'
  name: '? super T,? extends V'
  nameWithType: '? super T,? extends V'
  fullName: '? super T,? extends V'
- uid: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
  name: T,?,ImmutableBiMap
  nameWithType: T,?,ImmutableBiMap
  fullName: T,?,com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: '? extends java.util.Map.Entry'
  name: '? extends Map.Entry'
  nameWithType: '? extends Map.Entry'
  fullName: '? extends java.util.Map.Entry'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: V,K
  name: V,K
  nameWithType: V,K
  fullName: V,K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim
  name: ImmutableBiMapFauxverideShim
  nameWithType: ImmutableBiMapFauxverideShim
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim
- uid: com.azure.cosmos.implementation.guava25.collect.BiMap
  name: BiMap
  nameWithType: BiMap
  fullName: com.azure.cosmos.implementation.guava25.collect.BiMap
- uid: K,V>copyOf(java.util.Map
  name: K,V>copyOf(Map
  nameWithType: K,V>copyOf(Map
  fullName: K,V>copyOf(java.util.Map
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.
  name: ImmutableMap.
  nameWithType: ImmutableMap.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: K,V>of()
  name: K,V>of()
  nameWithType: K,V>of()
  fullName: K,V>of()
- uid: '? super K,? extends V>)'
  name: '? super K,? extends V>)'
  nameWithType: '? super K,? extends V>)'
  fullName: '? super K,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function
  name: ImmutableMap.computeIfAbsent(K,Function
  nameWithType: ImmutableMap.computeIfAbsent(K,Function
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function
- uid: '? super T,? extends V>)'
  name: '? super T,? extends V>)'
  nameWithType: '? super T,? extends V>)'
  fullName: '? super T,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.
  name: ImmutableBiMapFauxverideShim.
  nameWithType: ImmutableBiMapFauxverideShim.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.
- uid: T,K,V>toImmutableMap(java.util.function.Function
  name: T,K,V>toImmutableMap(Function
  nameWithType: T,K,V>toImmutableMap(Function
  fullName: T,K,V>toImmutableMap(java.util.function.Function
- uid: '? super T,? extends K>,java.util.function.Function'
  name: '? super T,? extends K>,Function'
  nameWithType: '? super T,? extends K>,Function'
  fullName: '? super T,? extends K>,java.util.function.Function'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction
  name: ImmutableMap.compute(K,BiFunction
  nameWithType: ImmutableMap.compute(K,BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction
- uid: '? super K,? super V,? extends V>)'
  name: '? super K,? super V,? extends V>)'
  nameWithType: '? super K,? super V,? extends V>)'
  fullName: '? super K,? super V,? extends V>)'
- uid: V>)
  name: V>)
  nameWithType: V>)
  fullName: V>)
- uid: '? super T,? extends V>,java.util.function.BinaryOperator'
  name: '? super T,? extends V>,BinaryOperator'
  nameWithType: '? super T,? extends V>,BinaryOperator'
  fullName: '? super T,? extends V>,java.util.function.BinaryOperator'
- uid: '? super V,? super V,? extends V>)'
  name: '? super V,? super V,? extends V>)'
  nameWithType: '? super V,? super V,? extends V>)'
  fullName: '? super V,? super V,? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction
  name: ImmutableMap.merge(K,V,BiFunction
  nameWithType: ImmutableMap.merge(K,V,BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction
- uid: K,V>of(K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V)
- uid: K,V>copyOf(java.lang.Iterable
  name: K,V>copyOf(Iterable
  nameWithType: K,V>copyOf(Iterable
  fullName: K,V>copyOf(java.lang.Iterable
- uid: '? extends K,? extends V>>)'
  name: '? extends K,? extends V>>)'
  nameWithType: '? extends K,? extends V>>)'
  fullName: '? extends K,? extends V>>)'
- uid: K,V>of(K,V,K,V)
  name: K,V>of(K,V,K,V)
  nameWithType: K,V>of(K,V,K,V)
  fullName: K,V>of(K,V,K,V)
- uid: K,V>of(K,V)
  name: K,V>of(K,V)
  nameWithType: K,V>of(K,V)
  fullName: K,V>of(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map
  name: ImmutableMap.putAll(Map
  nameWithType: ImmutableMap.putAll(Map
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map
- uid: K,V>builderWithExpectedSize(int)
  name: K,V>builderWithExpectedSize(int)
  nameWithType: K,V>builderWithExpectedSize(int)
  fullName: K,V>builderWithExpectedSize(int)
- uid: K,V>of(K,V,K,V,K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V,K,V,K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction
  name: ImmutableMap.computeIfPresent(K,BiFunction
  nameWithType: ImmutableMap.computeIfPresent(K,BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction
  name: ImmutableMap.replaceAll(BiFunction
  nameWithType: ImmutableMap.replaceAll(BiFunction
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction
- uid: K,V>of(K,V,K,V,K,V,K,V)
  name: K,V>of(K,V,K,V,K,V,K,V)
  nameWithType: K,V>of(K,V,K,V,K,V,K,V)
  fullName: K,V>of(K,V,K,V,K,V,K,V)
- uid: K,V>builder()
  name: K,V>builder()
  nameWithType: K,V>builder()
  fullName: K,V>builder()
