### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap<K,V>"
name: "ImmutableBiMap<K,V>"
nameWithType: "ImmutableBiMap<K,V>"
summary: "A <xref uid=\"com.azure.cosmos.implementation.guava25.collect.BiMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BiMap\"></xref> whose contents will never change, with many other important properties detailed at <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableCollection\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMapFauxverideShim.<T,K,V>toImmutableMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>builderWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.asMultimap()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.entrySet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.get(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.getOrDefault(java.lang.Object,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putAll(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.putIfAbsent(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replace(K,V,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.toString()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMap.values()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ImmutableBiMap<K,V> extends ImmutableBiMapFauxverideShim<K,V> implements BiMap<K,V>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>builderWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>copyOf(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<K,V>of(K,V,K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.<T,K,V>toImmutableBiMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.forcePut(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.inverse()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableBiMap.values()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.BiMap?alt=com.azure.cosmos.implementation.guava25.collect.BiMap&text=BiMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
