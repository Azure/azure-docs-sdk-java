### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Collections2.orderedPermutations*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations"
name: "<E>orderedPermutations"
nameWithType: "Collections2.<E>orderedPermutations"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(Iterable<E> elements)"
  name: "<E>orderedPermutations(Iterable<E> elements)"
  nameWithType: "Collections2.<E>orderedPermutations(Iterable<E> elements)"
  summary: "Returns a <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Collection\"></xref> of all the permutations of the specified <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref>.\n\n*Notes:* This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order.\n\nDuplicate elements are considered equal. For example, the list \\[1, 1\\] will have only one permutation, instead of two. This is why the elements have to implement <xref uid=\"java.lang.Comparable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparable\"></xref>.\n\nAn empty iterable has only one permutation, which is an empty list.\n\nThis method is equivalent to `Collections2.orderedPermutations(list, Ordering.natural())`."
  parameters:
  - description: "the original iterable whose elements have to be permuted."
    name: "elements"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Collection<List<E>> <E>orderedPermutations(Iterable<E> elements)"
  returns:
    description: "an immutable <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Collection\"></xref> containing all the different permutations of the\n     original iterable."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>,java.util.Comparator<? super E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)"
  name: "<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)"
  nameWithType: "Collections2.<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)"
  summary: "Returns a <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Collection\"></xref> of all the permutations of the specified <xref uid=\"java.lang.Iterable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterable\"></xref> using the specified <xref uid=\"java.util.Comparator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Comparator\"></xref> for establishing the lexicographical ordering.\n\nExamples:\n\n```java\nfor (List perm : orderedPermutations(asList(\"b\", \"c\", \"a\"))) {\n   println(perm);\n }\n // -> [\"a\", \"b\", \"c\"]\n // -> [\"a\", \"c\", \"b\"]\n // -> [\"b\", \"a\", \"c\"]\n // -> [\"b\", \"c\", \"a\"]\n // -> [\"c\", \"a\", \"b\"]\n // -> [\"c\", \"b\", \"a\"]\n\n for (List perm : orderedPermutations(asList(1, 2, 2, 1))) {\n   println(perm);\n }\n // -> [1, 1, 2, 2]\n // -> [1, 2, 1, 2]\n // -> [1, 2, 2, 1]\n // -> [2, 1, 1, 2]\n // -> [2, 1, 2, 1]\n // -> [2, 2, 1, 1]\n```\n\n*Notes:* This is an implementation of the algorithm for Lexicographical Permutations Generation, described in Knuth's \"The Art of Computer Programming\", Volume 4, Chapter 7, Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the first permutation will be in ascending order, and the last will be in descending order.\n\nElements that compare equal are considered equal and no new permutations are created by swapping them.\n\nAn empty iterable has only one permutation, which is an empty list."
  parameters:
  - description: "the original iterable whose elements have to be permuted."
    name: "elements"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "a comparator for the iterable's elements."
    name: "comparator"
    type: "<xref href=\"java.util.Comparator?alt=java.util.Comparator&text=Comparator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super E?alt=? super E&text=? super E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Collection<List<E>> <E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)"
  returns:
    description: "an immutable <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Collection\"></xref> containing all the different permutations of the\n     original iterable."
    type: "<xref href=\"java.util.Collection?alt=java.util.Collection&text=Collection\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
