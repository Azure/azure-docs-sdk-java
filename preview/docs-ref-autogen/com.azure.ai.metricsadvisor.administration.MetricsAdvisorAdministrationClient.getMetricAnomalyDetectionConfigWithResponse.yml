### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse"
name: "getMetricAnomalyDetectionConfigWithResponse"
nameWithType: "MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  name: "getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  nameWithType: "MetricsAdvisorAdministrationClient.getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  summary: "Get the anomaly detection configuration by its id.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n Response<AnomalyDetectionConfiguration> response = metricsAdvisorAdminClient\n     .getMetricAnomalyDetectionConfigWithResponse(detectionConfigId, Context.NONE);\n System.out.printf(\"Response statusCode: %d%n\", response.getStatusCode());\n AnomalyDetectionConfiguration detectionConfig = response.getValue();\n System.out.printf(\"Detection config Id: %s%n\", detectionConfig.getId());\n System.out.printf(\"Name: %s%n\", detectionConfig.getName());\n System.out.printf(\"Description: %s%n\", detectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", detectionConfig.getMetricId());\n \n System.out.printf(\"Detection conditions specified for configuration...%n\");\n \n System.out.printf(\"Whole Series Detection Conditions:%n\");\n MetricWholeSeriesDetectionCondition wholeSeriesDetectionCondition\n     = detectionConfig.getWholeSeriesDetectionCondition();\n \n System.out.printf(\"- Use %s operator for multiple detection conditions:%n\",\n     wholeSeriesDetectionCondition.getCrossConditionsOperator());\n \n System.out.printf(\"- Smart Detection Condition:%n\");\n System.out.printf(\" - Sensitivity: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSensitivity());\n System.out.printf(\" - Detection direction: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getAnomalyDetectorDirection());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getSmartDetectionCondition()\n         .getSuppressCondition().getMinRatio());\n \n System.out.printf(\"- Hard Threshold Condition:%n\");\n System.out.printf(\" - Lower bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getLowerBound());\n System.out.printf(\" - Upper bound: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getUpperBound());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getHardThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n \n System.out.printf(\"- Change Threshold Condition:%n\");\n System.out.printf(\" - Change percentage: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getChangePercentage());\n System.out.printf(\" - Shift point: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getShiftPoint());\n System.out.printf(\" - Detect anomaly if within range: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .isWithinRange());\n System.out.printf(\" - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinNumber(),\n     wholeSeriesDetectionCondition.getChangeThresholdCondition()\n         .getSuppressCondition().getMinRatio());\n \n List<MetricSingleSeriesDetectionCondition> seriesDetectionConditions\n     = detectionConfig.getSeriesDetectionConditions();\n System.out.printf(\"Series Detection Conditions:%n\");\n for (MetricSingleSeriesDetectionCondition seriesDetectionCondition : seriesDetectionConditions) {\n     DimensionKey seriesKey = seriesDetectionCondition.getSeriesKey();\n     final String seriesKeyStr\n         = Arrays.toString(seriesKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Key:%s%n\", seriesKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesDetectionCondition.getCrossConditionsOperator());\n \n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n \n List<MetricSeriesGroupDetectionCondition> seriesGroupDetectionConditions\n     = detectionConfig.getSeriesGroupDetectionConditions();\n System.out.printf(\"Series Group Detection Conditions:%n\");\n for (MetricSeriesGroupDetectionCondition seriesGroupDetectionCondition\n     : seriesGroupDetectionConditions) {\n     DimensionKey seriesGroupKey = seriesGroupDetectionCondition.getSeriesGroupKey();\n     final String seriesGroupKeyStr\n         = Arrays.toString(seriesGroupKey.asMap().entrySet().toArray());\n     System.out.printf(\"- Series Group Key:%s%n\", seriesGroupKeyStr);\n     System.out.printf(\" - Use %s operator for multiple detection conditions:%n\",\n         seriesGroupDetectionCondition.getCrossConditionsOperator());\n \n     System.out.printf(\" - Smart Detection Condition:%n\");\n     System.out.printf(\"  - Sensitivity: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSensitivity());\n     System.out.printf(\"  - Detection direction: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getAnomalyDetectorDirection());\n     System.out.printf(\"  - Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getSmartDetectionCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Hard Threshold Condition:%n\");\n     System.out.printf(\"  -  Lower bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getLowerBound());\n     System.out.printf(\"  -  Upper bound: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getUpperBound());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getHardThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n \n     System.out.printf(\" - Change Threshold Condition:%n\");\n     System.out.printf(\"  -  Change percentage: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getChangePercentage());\n     System.out.printf(\"  -  Shift point: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getShiftPoint());\n     System.out.printf(\"  -  Detect anomaly if within range: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .isWithinRange());\n     System.out.printf(\"  -  Suppress conditions: minimum number: %s; minimum ratio: %s%n\",\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinNumber(),\n         seriesGroupDetectionCondition.getChangeThresholdCondition()\n             .getSuppressCondition().getMinRatio());\n }\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<AnomalyDetectionConfiguration> getMetricAnomalyDetectionConfigWithResponse(String detectionConfigurationId, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> containing the <xref uid=\"com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref> for the provided id."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
