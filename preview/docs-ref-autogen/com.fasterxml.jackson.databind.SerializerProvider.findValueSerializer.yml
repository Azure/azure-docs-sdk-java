### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer*"
fullName: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer"
name: "findValueSerializer"
nameWithType: "SerializerProvider.findValueSerializer"
members:
- uid: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(JavaType valueType)"
  name: "findValueSerializer(JavaType valueType)"
  nameWithType: "SerializerProvider.findValueSerializer(JavaType valueType)"
  summary: "Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops"
  parameters:
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonSerializer<Object> findValueSerializer(JavaType valueType)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonSerializer?alt=com.fasterxml.jackson.databind.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)"
  fullName: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(JavaType valueType, BeanProperty property)"
  name: "findValueSerializer(JavaType valueType, BeanProperty property)"
  nameWithType: "SerializerProvider.findValueSerializer(JavaType valueType, BeanProperty property)"
  summary: "Similar to <xref uid=\"com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class&lt;?&gt;,com.fasterxml.jackson.databind.BeanProperty)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#findValueSerializer(Class,BeanProperty)\"></xref>, but takes full generics-aware type instead of raw class. This is necessary for accurate handling of external type information, to handle polymorphic types.\n\nNote: this call will also contextualize serializer before returning it."
  parameters:
  - name: "valueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - description: "When creating secondary serializers, property for which\n   serializer is needed: annotations of the property (or bean that contains it)\n   may be checked to create contextual serializers."
    name: "property"
    type: "<xref href=\"com.fasterxml.jackson.databind.BeanProperty?alt=com.fasterxml.jackson.databind.BeanProperty&text=BeanProperty\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonSerializer<Object> findValueSerializer(JavaType valueType, BeanProperty property)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonSerializer?alt=com.fasterxml.jackson.databind.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(Class<?> valueType)"
  name: "findValueSerializer(Class<?> valueType)"
  nameWithType: "SerializerProvider.findValueSerializer(Class<?> valueType)"
  summary: "Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops"
  parameters:
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public JsonSerializer<Object> findValueSerializer(Class<?> valueType)"
  exceptions:
  - type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonSerializer?alt=com.fasterxml.jackson.databind.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)"
  fullName: "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(Class<?> valueType, BeanProperty property)"
  name: "findValueSerializer(Class<?> valueType, BeanProperty property)"
  nameWithType: "SerializerProvider.findValueSerializer(Class<?> valueType, BeanProperty property)"
  summary: "Method called to get hold of a serializer for a value of given type; or if no such serializer can be found, a default handler (which may do a best-effort generic serialization or just simply throw an exception when invoked).\n\nNote: this method is only called for non-null values; not for keys or null values. For these, check out other accessor methods.\n\nNote that serializers produced should NOT handle polymorphic serialization aspects; separate <xref uid=\"com.fasterxml.jackson.databind.jsontype.TypeSerializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeSerializer\"></xref> is to be constructed by caller if and as necessary."
  parameters:
  - name: "valueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "property"
    type: "<xref href=\"com.fasterxml.jackson.databind.BeanProperty?alt=com.fasterxml.jackson.databind.BeanProperty&text=BeanProperty\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonSerializer<Object> findValueSerializer(Class<?> valueType, BeanProperty property)"
  exceptions:
  - description: "if there are fatal problems with\n   accessing suitable serializer; including that of not\n   finding any serializer"
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonMappingException?alt=com.fasterxml.jackson.databind.JsonMappingException&text=JsonMappingException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JsonSerializer?alt=com.fasterxml.jackson.databind.JsonSerializer&text=JsonSerializer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
