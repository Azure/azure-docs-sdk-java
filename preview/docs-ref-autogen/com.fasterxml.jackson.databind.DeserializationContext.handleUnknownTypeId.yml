### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId*"
fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId"
name: "handleUnknownTypeId"
nameWithType: "DeserializationContext.handleUnknownTypeId"
members:
- uid: "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)"
  fullName: "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)"
  name: "handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)"
  nameWithType: "DeserializationContext.handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)"
  summary: "Method that deserializers should call if they encounter a type id (for polymorphic deserialization) that cannot be resolved to an actual type; usually since there is no mapping defined. Default implementation will try to call <xref uid=\"com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DeserializationProblemHandler#handleUnknownTypeId\"></xref> on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with <xref uid=\"com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#invalidTypeIdException\"></xref>."
  parameters:
  - description: "Base type from which resolution starts"
    name: "baseType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  - description: "Type id that could not be converted"
    name: "id"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "idResolver"
    type: "<xref href=\"com.fasterxml.jackson.databind.jsontype.TypeIdResolver?alt=com.fasterxml.jackson.databind.jsontype.TypeIdResolver&text=TypeIdResolver\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional problem description to add to default exception message,\n    if resolution fails."
    name: "extraDesc"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JavaType handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc)"
  exceptions:
  - description: "To indicate unrecoverable problem, if resolution cannot\n    be made to work"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    description: "<xref uid=\"com.fasterxml.jackson.databind.JavaType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JavaType\"></xref> that id resolves to"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
