### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  id: ArrayBasedUnicodeEscaper
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape
  children:
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,int,int,java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(java.util.Map<java.lang.Character,java.lang.String>,int,int,java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe(int)
  - com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  langs:
  - java
  name: ArrayBasedUnicodeEscaper
  nameWithType: ArrayBasedUnicodeEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  type: Class
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper" data-throw-if-not-resolved="false">UnicodeEscaper</xref> that uses an array to quickly look up replacement characters for a given code point. An additional safe range is provided that determines whether code points without specific replacements are to be considered safe and left unescaped or should be escaped in a general way.


    A good example of usage of this class is for HTML escaping where the replacement array contains information about the named HTML entities such as `&` and `"` while <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is overridden to handle general escaping of the form `&#NNNNN;`.


    The size of the data structure used by <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper" data-throw-if-not-resolved="false">ArrayBasedUnicodeEscaper</xref> is proportional to the highest valued code point that requires escaping. For example a replacement map containing the single character '`\``u1000`' will require approximately 16K of memory. If you need to create multiple escaper instances that have the same character replacement mapping consider using <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap" data-throw-if-not-resolved="false">ArrayBasedEscaperMap</xref>.
  syntax:
    content: public abstract class ArrayBasedUnicodeEscaper extends UnicodeEscaper
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.escape.Escaper
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,int,int,java.lang.String)
  id: ArrayBasedUnicodeEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,int,int,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  langs:
  - java
  name: ArrayBasedUnicodeEscaper(ArrayBasedEscaperMap escaperMap, int safeMin, int safeMax, String unsafeReplacement)
  nameWithType: ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(ArrayBasedEscaperMap escaperMap, int safeMin, int safeMax, String unsafeReplacement)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(ArrayBasedEscaperMap escaperMap, int safeMin, int safeMax, String unsafeReplacement)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If `safeMax < safeMin` then no code points are considered safe. This initializer is useful when explicit instances of ArrayBasedEscaperMap are used to allow the sharing of large replacement mappings.


    If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called, otherwise no escaping is performed.
  syntax:
    content: protected ArrayBasedUnicodeEscaper(ArrayBasedEscaperMap escaperMap, int safeMin, int safeMax, String unsafeReplacement)
    parameters:
    - id: escaperMap
      type: com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap
      description: the map of replacements
    - id: safeMin
      type: int
      description: the lowest character value in the safe range
    - id: safeMax
      type: int
      description: the highest character value in the safe range
    - id: unsafeReplacement
      type: java.lang.String
      description: >-
        the default replacement for unsafe characters or null if no default
             replacement is required
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(java.util.Map<java.lang.Character,java.lang.String>,int,int,java.lang.String)
  id: ArrayBasedUnicodeEscaper(java.util.Map<java.lang.Character,java.lang.String>,int,int,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  langs:
  - java
  name: ArrayBasedUnicodeEscaper(Map<Character,String> replacementMap, int safeMin, int safeMax, String unsafeReplacement)
  nameWithType: ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(Map<Character,String> replacementMap, int safeMin, int safeMax, String unsafeReplacement)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(Map<Character,String> replacementMap, int safeMin, int safeMax, String unsafeReplacement)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Creates a new ArrayBasedUnicodeEscaper instance with the given replacement map and specified safe range. If `safeMax < safeMin` then no code points are considered safe.


    If a code point has no mapped replacement then it is checked against the safe range. If it lies outside that, then <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called, otherwise no escaping is performed.
  syntax:
    content: protected ArrayBasedUnicodeEscaper(Map<Character,String> replacementMap, int safeMin, int safeMax, String unsafeReplacement)
    parameters:
    - id: replacementMap
      type: java.util.Map<java.lang.Character,java.lang.String>
      description: a map of characters to their escaped representations
    - id: safeMin
      type: int
      description: the lowest character value in the safe range
    - id: safeMax
      type: int
      description: the highest character value in the safe range
    - id: unsafeReplacement
      type: java.lang.String
      description: >-
        the default replacement for unsafe characters or null if no default
             replacement is required
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int)
  id: escape(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  langs:
  - java
  name: escape(int cp)
  nameWithType: ArrayBasedUnicodeEscaper.escape(int cp)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int cp)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: Escapes a single Unicode code point using the replacement array and safe range values. If the given character does not have an explicit replacement and lies outside the safe range then <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called.
  syntax:
    content: protected final char[] escape(int cp)
    parameters:
    - id: cp
      type: int
    return:
      type: char[]
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)
  id: escape(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  langs:
  - java
  name: escape(String s)
  nameWithType: ArrayBasedUnicodeEscaper.escape(String s)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(String s)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Returns the escaped form of a given literal string.


    If you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref>. You should ensure your input is valid [UTF-16][] before calling this method.


    **Note:** When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)" data-throw-if-not-resolved="false">#nextEscapeIndex(CharSequence, int, int)</xref> directly. Doing this for <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.net.PercentEscaper</xref> more than doubled the performance for unescaped strings (as measured by <xref uid="" data-throw-if-not-resolved="false">CharEscapersBenchmark</xref>).



    [UTF-16]: http://en.wikipedia.org/wiki/UTF-16
  syntax:
    content: public final String escape(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe(int)
  id: escapeUnsafe(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  langs:
  - java
  name: escapeUnsafe(int cp)
  nameWithType: ArrayBasedUnicodeEscaper.escapeUnsafe(int cp)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe(int cp)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Escapes a code point that has no direct explicit value in the replacement array and lies outside the stated safe range. Subclasses should override this method to provide generalized escaping for code points if required.


    Note that arrays returned by this method must not be modified once they have been returned. However it is acceptable to return the same array multiple times (even for different input characters).
  syntax:
    content: protected abstract char[] escapeUnsafe(int cp)
    parameters:
    - id: cp
      type: int
      description: the Unicode code point to escape
    return:
      type: char[]
      description: the replacement characters, or <code>null</code> if no escaping was required
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  id: nextEscapeIndex(java.lang.CharSequence,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper
  langs:
  - java
  name: nextEscapeIndex(CharSequence csq, int index, int end)
  nameWithType: ArrayBasedUnicodeEscaper.nextEscapeIndex(CharSequence csq, int index, int end)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(CharSequence csq, int index, int end)
  overload: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.escape
  summary: >-
    Scans a sub-sequence of characters from a given <xref uid="java.lang.CharSequence" data-throw-if-not-resolved="false">CharSequence</xref>, returning the index of the next character that requires escaping.


    **Note:** When implementing an escaper, it is a good idea to override this method for efficiency. The base class implementation determines successive Unicode code points and invokes <xref uid="com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int)" data-throw-if-not-resolved="false">#escape(int)</xref> for each of them. If the semantics of your escaper are such that code points in the supplementary range are either all escaped or all unescaped, this method can be implemented more efficiently using <xref uid="java.lang.CharSequence.charAt*" data-throw-if-not-resolved="false">CharSequence#charAt(int)</xref>.


    Note however that if your escaper does not escape characters in the supplementary range, you should either continue to validate the correctness of any surrogate characters encountered or provide a clear warning to users that your escaper does not validate its input.


    See <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.net.PercentEscaper</xref> for an example.
  syntax:
    content: protected final int nextEscapeIndex(CharSequence csq, int index, int end)
    parameters:
    - id: csq
      type: java.lang.CharSequence
    - id: index
      type: int
    - id: end
      type: int
    return:
      type: int
references:
- uid: java.util.Map<java.lang.Character,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.Character
    name: Character
    fullName: java.lang.Character
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper*
  name: ArrayBasedUnicodeEscaper
  nameWithType: ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap
  name: ArrayBasedEscaperMap
  nameWithType: ArrayBasedEscaperMap
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape*
  name: escape
  nameWithType: ArrayBasedUnicodeEscaper.escape
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape
  package: com.azure.cosmos.implementation.guava25.escape
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex*
  name: nextEscapeIndex
  nameWithType: ArrayBasedUnicodeEscaper.nextEscapeIndex
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*
  name: escapeUnsafe
  nameWithType: ArrayBasedUnicodeEscaper.escapeUnsafe
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe
  package: com.azure.cosmos.implementation.guava25.escape
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
  name: UnicodeEscaper
  nameWithType: UnicodeEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  name: UnicodeEscaper.nextEscapeIndex(CharSequence,int,int)
  nameWithType: UnicodeEscaper.nextEscapeIndex(CharSequence,int,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
  name: UnicodeEscaper.escape(String)
  nameWithType: UnicodeEscaper.escape(String)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)
  name: UnicodeEscaper.escapeSlow(String,int)
  nameWithType: UnicodeEscaper.escapeSlow(String,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  name: Escaper.asFunction()
  nameWithType: Escaper.asFunction()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
  name: UnicodeEscaper.escape(int)
  nameWithType: UnicodeEscaper.escape(int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)
  name: UnicodeEscaper.codePointAt(CharSequence,int,int)
  nameWithType: UnicodeEscaper.codePointAt(CharSequence,int,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.Character,java.lang.String
  name: Character,String
  nameWithType: Character,String
  fullName: java.lang.Character,java.lang.String
