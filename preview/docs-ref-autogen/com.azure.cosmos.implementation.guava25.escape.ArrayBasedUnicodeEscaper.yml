### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper"
fullName: "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper"
name: "ArrayBasedUnicodeEscaper"
nameWithType: "ArrayBasedUnicodeEscaper"
summary: "A <xref uid=\"com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UnicodeEscaper\"></xref> that uses an array to quickly look up replacement characters for a given code point. An additional safe range is provided that determines whether code points without specific replacements are to be considered safe and left unescaped or should be escaped in a general way.\n\nA good example of usage of this class is for HTML escaping where the replacement array contains information about the named HTML entities such as `&` and `\"` while <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#escapeUnsafe\"></xref> is overridden to handle general escaping of the form `&#NNNNN;`.\n\nThe size of the data structure used by <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArrayBasedUnicodeEscaper\"></xref> is proportional to the highest valued code point that requires escaping. For example a replacement map containing the single character '`\\``u1000`' will require approximately 16K of memory. If you need to create multiple escaper instances that have the same character replacement mapping consider using <xref uid=\"com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ArrayBasedEscaperMap\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.escape.Escaper\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()"
- "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)"
- "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)"
- "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)"
- "com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ArrayBasedUnicodeEscaper extends UnicodeEscaper"
constructors:
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(com.azure.cosmos.implementation.guava25.escape.ArrayBasedEscaperMap,int,int,java.lang.String)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.ArrayBasedUnicodeEscaper(java.util.Map<java.lang.Character,java.lang.String>,int,int,java.lang.String)"
methods:
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escapeUnsafe(int)"
- "com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.escape"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
