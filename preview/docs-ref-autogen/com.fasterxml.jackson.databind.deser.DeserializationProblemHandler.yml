### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  id: DeserializationProblemHandler
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser
  children:
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.DeserializationProblemHandler()
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.Object,java.lang.Throwable)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.Number,java.lang.String)
  - com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.String,java.lang.String)
  langs:
  - java
  name: DeserializationProblemHandler
  nameWithType: DeserializationProblemHandler
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  type: Class
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    This is the class that can be registered (via <xref uid="com.fasterxml.jackson.databind.DeserializationConfig" data-throw-if-not-resolved="false">DeserializationConfig</xref> object owner by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>) to get called when a potentially recoverable problem is encountered during deserialization process. Handlers can try to resolve the problem, throw an exception or just skip the content.


    Default implementations for all methods implemented minimal "do nothing" functionality, which is roughly equivalent to not having a registered listener at all. This allows for only implemented handler methods one is interested in, without handling other cases.


    NOTE: it is typically **NOT** acceptable to simply do nothing, because this will result in unprocessed tokens being left in token stream (read via <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>, in case a structured (JSON Object or JSON Array) value is being pointed to by parser.
  syntax:
    content: public abstract class DeserializationProblemHandler
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.DeserializationProblemHandler()
  id: DeserializationProblemHandler()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: DeserializationProblemHandler()
  nameWithType: DeserializationProblemHandler.DeserializationProblemHandler()
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.DeserializationProblemHandler()
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.DeserializationProblemHandler*
  type: Constructor
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: public DeserializationProblemHandler()
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED
  id: NOT_HANDLED
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: NOT_HANDLED
  nameWithType: DeserializationProblemHandler.NOT_HANDLED
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED
  type: Field
  package: com.fasterxml.jackson.databind.deser
  summary: Marker value returned by some handler methods to indicate that they could not handle problem and produce replacement value.
  syntax:
    content: public static final Object NOT_HANDLED
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.Object,java.lang.Throwable)
  id: handleInstantiationProblem(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.Object,java.lang.Throwable)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleInstantiationProblem(DeserializationContext ctxt, Class<?> instClass, Object argument, Throwable t)
  nameWithType: DeserializationProblemHandler.handleInstantiationProblem(DeserializationContext ctxt, Class<?> instClass, Object argument, Throwable t)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem(DeserializationContext ctxt, Class<?> instClass, Object argument, Throwable t)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when instance creation for a type fails due to an exception. Handler may choose to do one of following things:

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual instantiated value (of type `targetType`) to use as replacement, and continue processing.
     *  Return `null` to use null as value but not to try further processing (in cases where properties would otherwise be bound)
  syntax:
    content: public Object handleInstantiationProblem(DeserializationContext ctxt, Class<?> instClass, Object argument, Throwable t)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: instClass
      type: java.lang.Class<?>
      description: Type that was to be instantiated
    - id: argument
      type: java.lang.Object
      description: (optional) Additional argument that was passed to creator, if any
    - id: t
      type: java.lang.Throwable
      description: Exception that caused instantiation failure
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use (possibly
            <code>null</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  id: handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, JsonParser p, String msg)
  nameWithType: DeserializationProblemHandler.handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, JsonParser p, String msg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, JsonParser p, String msg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: public Object handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, JsonParser p, String msg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: instClass
      type: java.lang.Class<?>
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: msg
      type: java.lang.String
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  id: handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.databind.deser.ValueInstantiator,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, ValueInstantiator valueInsta, JsonParser p, String msg)
  nameWithType: DeserializationProblemHandler.handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, ValueInstantiator valueInsta, JsonParser p, String msg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, ValueInstantiator valueInsta, JsonParser p, String msg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when instance creation for a type fails due to lack of an instantiator. Method is called before actual deserialization from input is attempted, so handler may do one of following things:

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Handle content to match (by consuming or skipping it), and return actual instantiated value (of type `targetType`) to use as replacement; value may be \`null\` as well as expected target type.
  syntax:
    content: public Object handleMissingInstantiator(DeserializationContext ctxt, Class<?> instClass, ValueInstantiator valueInsta, JsonParser p, String msg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: instClass
      type: java.lang.Class<?>
      description: Type that was to be instantiated
    - id: valueInsta
      type: com.fasterxml.jackson.databind.deser.ValueInstantiator
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: >-
        Parser to use for accessing content that needs handling, to either
           use it or skip it (latter with <xref uid="com.fasterxml.jackson.core.JsonParser.skipChildren()" data-throw-if-not-resolved="false">JsonParser#skipChildren()</xref>.
    - id: msg
      type: java.lang.String
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use (possibly
            <code>null</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  id: handleMissingTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Handler method called if an expected type id for a polymorphic value is not found and no "default type" is specified or allowed. Handler may choose to do one of following things:

     *  Indicate it does not know what to do by returning \`null\`
     *  Indicate that nothing should be deserialized, by return \`Void.class\`
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual resolved type to use for this particular case.
  syntax:
    content: public JavaType handleMissingTypeId(DeserializationContext ctxt, JavaType baseType, TypeIdResolver idResolver, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
      description: >-
        Deserialization context to use for accessing information or
            constructing exception to throw
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Base type to use for resolving subtype id
    - id: idResolver
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
    - id: failureMsg
      type: java.lang.String
      description: >-
        Informational message that would be thrown as part of
            exception, if resolution still fails
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Actual type to use, if resolved; `null` if handler does not know what
             to do; or `Void.class` to indicate that nothing should be deserialized for
             type with the id (which caller may choose to do... or not)
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  id: handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleUnexpectedToken(DeserializationContext ctxt, JavaType targetType, JsonToken t, JsonParser p, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleUnexpectedToken(DeserializationContext ctxt, JavaType targetType, JsonToken t, JsonParser p, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(DeserializationContext ctxt, JavaType targetType, JsonToken t, JsonParser p, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> instead of <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>.

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Handle content to match (by consuming or skipping it), and return actual instantiated value (of type `targetType`) to use as replacement; value may be \`null\` as well as expected target type.
  syntax:
    content: public Object handleUnexpectedToken(DeserializationContext ctxt, JavaType targetType, JsonToken t, JsonParser p, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: failureMsg
      type: java.lang.String
      description: >-
        Message that will be used by caller
            to indicate type of failure unless handler produces value to use
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use (possibly
            <code>null</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  id: handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleUnexpectedToken(DeserializationContext ctxt, Class<?> targetType, JsonToken t, JsonParser p, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleUnexpectedToken(DeserializationContext ctxt, Class<?> targetType, JsonToken t, JsonParser p, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(DeserializationContext ctxt, Class<?> targetType, JsonToken t, JsonParser p, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: Deprecated variant of <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonToken,com.fasterxml.jackson.core.JsonParser,java.lang.String)" data-throw-if-not-resolved="false">#handleUnexpectedToken(DeserializationContext, JavaType, JsonToken, JsonParser, String)</xref>
  syntax:
    content: public Object handleUnexpectedToken(DeserializationContext ctxt, Class<?> targetType, JsonToken t, JsonParser p, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: targetType
      type: java.lang.Class<?>
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: failureMsg
      type: java.lang.String
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)
  id: handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.JsonDeserializer<?>,java.lang.Object,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)
  nameWithType: DeserializationProblemHandler.handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when a JSON Object property with an unrecognized name is encountered. Content (supposedly) matching the property are accessible via parser that can be obtained from passed deserialization context. Handler can also choose to skip the content; if so, it MUST return true to indicate it did handle property successfully. Skipping is usually done like so:


    ```java

    parser.skipChildren();

    ```


    Note: <xref uid="com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES</xref>) takes effect only **after** handler is called, and only if handler did **not** handle the problem.
  syntax:
    content: public boolean handleUnknownProperty(DeserializationContext ctxt, JsonParser p, JsonDeserializer<?> deserializer, Object beanOrClass, String propertyName)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser to use for handling problematic content
    - id: deserializer
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    - id: beanOrClass
      type: java.lang.Object
      description: >-
        Either bean instance being deserialized (if one
           has been instantiated so far); or Class that indicates type that
           will be instantiated (if no instantiation done yet: for example
           when bean uses non-default constructors)
    - id: propertyName
      type: java.lang.String
    return:
      type: boolean
      description: >-
        True if the problem is resolved (and content available used or skipped);
          false if the handler did not anything and the problem is unresolved. Note that in
          latter case caller will either throw an exception or explicitly skip the content,
          depending on configuration.
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  id: handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.TypeIdResolver,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Handler method called if resolution of type id from given String failed to produce a subtype; usually because logical id is not mapped to actual implementation class. Handler may choose to do one of following things:

     *  Indicate it does not know what to do by returning \`null\`
     *  Indicate that nothing should be deserialized, by return \`Void.class\`
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual resolved type to use for type id.
  syntax:
    content: public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
      description: >-
        Deserialization context to use for accessing information or
            constructing exception to throw
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
      description: Base type to use for resolving subtype id
    - id: subTypeId
      type: java.lang.String
      description: Subtype id that failed to resolve
    - id: idResolver
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
    - id: failureMsg
      type: java.lang.String
      description: >-
        Informational message that would be thrown as part of
            exception, if resolution still fails
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Actual type to use, if resolved; `null` if handler does not know what
             to do; or `Void.class` to indicate that nothing should be deserialized for
             type with the id (which caller may choose to do... or not)
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.String,java.lang.String)
  id: handleWeirdKey(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleWeirdKey(DeserializationContext ctxt, Class<?> rawKeyType, String keyValue, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleWeirdKey(DeserializationContext ctxt, Class<?> rawKeyType, String keyValue, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey(DeserializationContext ctxt, Class<?> rawKeyType, String keyValue, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when a property name from input cannot be converted to a non-Java-String key type (passed as `rawKeyType`) due to format problem. Handler may choose to do one of 3 things:

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual key value to use as replacement, and continue processing.
  syntax:
    content: public Object handleWeirdKey(DeserializationContext ctxt, Class<?> rawKeyType, String keyValue, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: rawKeyType
      type: java.lang.Class<?>
    - id: keyValue
      type: java.lang.String
    - id: failureMsg
      type: java.lang.String
      description: >-
        Message that will be used by caller (by calling
            <xref uid="com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(java.lang.Class<?>,java.lang.String,java.lang.String)" data-throw-if-not-resolved="false">DeserializationContext#weirdKeyException(Class, String, String)</xref>)
            to indicate type of failure unless handler produces key to use
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use as key (possibly
            <code>null</code>
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.JsonParser)
  id: handleWeirdNativeValue(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,java.lang.Object,com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleWeirdNativeValue(DeserializationContext ctxt, JavaType targetType, Object valueToConvert, JsonParser p)
  nameWithType: DeserializationProblemHandler.handleWeirdNativeValue(DeserializationContext ctxt, JavaType targetType, Object valueToConvert, JsonParser p)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue(DeserializationContext ctxt, JavaType targetType, Object valueToConvert, JsonParser p)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when an embedded (native) value (<xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>) cannot be converted directly into expected value type (usually POJO). Handler may choose to do one of 3 things:

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual converted value (of type `targetType`) to use as replacement, and continue processing.
  syntax:
    content: public Object handleWeirdNativeValue(DeserializationContext ctxt, JavaType targetType, Object valueToConvert, JsonParser p)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: targetType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueToConvert
      type: java.lang.Object
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use (possibly
            <code>null</code>)
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.Number,java.lang.String)
  id: handleWeirdNumberValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.Number,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleWeirdNumberValue(DeserializationContext ctxt, Class<?> targetType, Number valueToConvert, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleWeirdNumberValue(DeserializationContext ctxt, Class<?> targetType, Number valueToConvert, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue(DeserializationContext ctxt, Class<?> targetType, Number valueToConvert, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when a numeric value (integral or floating-point from input cannot be converted to a non-numeric value type due to specific problem (as opposed to numeric values never being usable). Handler may choose to do one of 3 things:

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual converted value (of type `targetType`) to use as replacement, and continue processing.
  syntax:
    content: public Object handleWeirdNumberValue(DeserializationContext ctxt, Class<?> targetType, Number valueToConvert, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: targetType
      type: java.lang.Class<?>
    - id: valueToConvert
      type: java.lang.Number
    - id: failureMsg
      type: java.lang.String
      description: >-
        Message that will be used by caller (by calling
            <xref uid="com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException*" data-throw-if-not-resolved="false">DeserializationContext#weirdNumberException</xref>)
            to indicate type of failure unless handler produces key to use
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use as (possibly
            <code>null</code>)
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.String,java.lang.String)
  id: handleWeirdStringValue(com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>,java.lang.String,java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler
  langs:
  - java
  name: handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg)
  nameWithType: DeserializationProblemHandler.handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg)
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg)
  overload: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called when a String value cannot be converted to a non-String value type due to specific problem (as opposed to String values never being usable). Handler may choose to do one of 3 things:

     *  Indicate it does not know what to do by returning <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref>
     *  Throw a <xref uid="java.io.IOException" data-throw-if-not-resolved="false">IOException</xref> to indicate specific fail message (instead of standard exception caller would throw
     *  Return actual converted value (of type `targetType`) to use as replacement, and continue processing.
  syntax:
    content: public Object handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: targetType
      type: java.lang.Class<?>
    - id: valueToConvert
      type: java.lang.String
    - id: failureMsg
      type: java.lang.String
      description: >-
        Message that will be used by caller (by calling
            <xref uid="com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException*" data-throw-if-not-resolved="false">DeserializationContext#weirdNumberException</xref>)
            to indicate type of failure unless handler produces key to use
    return:
      type: java.lang.Object
      description: >-
        Either <xref uid="com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.NOT_HANDLED" data-throw-if-not-resolved="false">#NOT_HANDLED</xref> to indicate that handler does not know
            what to do (and exception may be thrown), or value to use as (possibly
            <code>null</code>)
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.DeserializationProblemHandler*
  name: DeserializationProblemHandler
  nameWithType: DeserializationProblemHandler.DeserializationProblemHandler
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.DeserializationProblemHandler
  package: com.fasterxml.jackson.databind.deser
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.JsonDeserializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty*
  name: handleUnknownProperty
  nameWithType: DeserializationProblemHandler.handleUnknownProperty
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty
  package: com.fasterxml.jackson.databind.deser
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey*
  name: handleWeirdKey
  nameWithType: DeserializationProblemHandler.handleWeirdKey
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue*
  name: handleWeirdStringValue
  nameWithType: DeserializationProblemHandler.handleWeirdStringValue
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue
  package: com.fasterxml.jackson.databind.deser
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue*
  name: handleWeirdNumberValue
  nameWithType: DeserializationProblemHandler.handleWeirdNumberValue
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue*
  name: handleWeirdNativeValue
  nameWithType: DeserializationProblemHandler.handleWeirdNativeValue
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken*
  name: handleUnexpectedToken
  nameWithType: DeserializationProblemHandler.handleUnexpectedToken
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken
  package: com.fasterxml.jackson.databind.deser
- uid: java.lang.Throwable
  spec.java:
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem*
  name: handleInstantiationProblem
  nameWithType: DeserializationProblemHandler.handleInstantiationProblem
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.ValueInstantiator
  name: ValueInstantiator
  nameWithType: ValueInstantiator
  fullName: com.fasterxml.jackson.databind.deser.ValueInstantiator
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator*
  name: handleMissingInstantiator
  nameWithType: DeserializationProblemHandler.handleMissingInstantiator
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId*
  name: handleUnknownTypeId
  nameWithType: DeserializationProblemHandler.handleUnknownTypeId
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId*
  name: handleMissingTypeId
  nameWithType: DeserializationProblemHandler.handleMissingTypeId
  fullName: com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId
  package: com.fasterxml.jackson.databind.deser
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer
  nameWithType: JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
