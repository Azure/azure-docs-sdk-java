### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Multisets.filter*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter"
name: "<E>filter"
nameWithType: "Multisets.<E>filter"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)"
  name: "<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)"
  nameWithType: "Multisets.<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)"
  summary: "Returns a view of the elements of `unfiltered` that satisfy a predicate. The returned multiset is a live view of `unfiltered`; changes to one affect the other.\n\nThe resulting multiset's iterators, and those of its `entrySet()` and `elementSet()`, do not support `remove()`. However, all other multiset methods supported by `unfiltered` are supported by the returned multiset. When given an element that doesn't satisfy the predicate, the multiset's `add()` and `addAll()` methods throw an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref>. When methods such as `removeAll()` and `clear()` are called on the filtered multiset, only elements that satisfy the filter will be removed from the underlying multiset.\n\nThe returned multiset isn't threadsafe or serializable, even if `unfiltered` is.\n\nMany of the filtered multiset's methods, such as `size()`, iterate across every element in the underlying multiset and determine which elements satisfy the filter. When a live view is *not* needed, it may be faster to copy the returned multiset and use the copy.\n\n**Warning:** `predicate` must be *consistent with equals*, as documented at <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate.apply\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate#apply\"></xref>. Do not provide a predicate such as `Predicates.instanceOf(ArrayList.class)`, which is inconsistent with equals. (See <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Iterables.&lt;T&gt;filter(java.lang.Iterable&lt;?&gt;,java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Iterables#filter(Iterable, Class)\"></xref> for related functionality.)"
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Multiset?alt=com.azure.cosmos.implementation.guava25.collect.Multiset&text=Multiset\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super E?alt=? super E&text=? super E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Multiset<E> <E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Multiset?alt=com.azure.cosmos.implementation.guava25.collect.Multiset&text=Multiset\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
