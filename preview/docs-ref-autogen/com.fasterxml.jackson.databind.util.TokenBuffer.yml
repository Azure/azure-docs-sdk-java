### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.util.TokenBuffer
  id: TokenBuffer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util
  children:
  - com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES
  - com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  - com.fasterxml.jackson.databind.util.TokenBuffer.Segment
  - com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(com.fasterxml.jackson.core.ObjectCodec,boolean)
  - com.fasterxml.jackson.databind.util.TokenBuffer._appendAt
  - com.fasterxml.jackson.databind.util.TokenBuffer._appendEndMarker(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.util.TokenBuffer._appendFieldName(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer._appendStartMarker(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.util.TokenBuffer._appendValue(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.util.TokenBuffer._appendValue(com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer._closed
  - com.fasterxml.jackson.databind.util.TokenBuffer._copyBufferContents(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.util.TokenBuffer._first
  - com.fasterxml.jackson.databind.util.TokenBuffer._forceBigDecimal
  - com.fasterxml.jackson.databind.util.TokenBuffer._generatorFeatures
  - com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeId
  - com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeObjectIds
  - com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeTypeIds
  - com.fasterxml.jackson.databind.util.TokenBuffer._last
  - com.fasterxml.jackson.databind.util.TokenBuffer._mayHaveNativeIds
  - com.fasterxml.jackson.databind.util.TokenBuffer._objectCodec
  - com.fasterxml.jackson.databind.util.TokenBuffer._objectId
  - com.fasterxml.jackson.databind.util.TokenBuffer._parentContext
  - com.fasterxml.jackson.databind.util.TokenBuffer._reportUnsupportedOperation()
  - com.fasterxml.jackson.databind.util.TokenBuffer._typeId
  - com.fasterxml.jackson.databind.util.TokenBuffer._writeContext
  - com.fasterxml.jackson.databind.util.TokenBuffer.append(com.fasterxml.jackson.databind.util.TokenBuffer)
  - com.fasterxml.jackson.databind.util.TokenBuffer.asCopyOfValue(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.util.TokenBuffer.asParser()
  - com.fasterxml.jackson.databind.util.TokenBuffer.asParser(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.util.TokenBuffer.asParser(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.databind.util.TokenBuffer.asParserOnFirstToken()
  - com.fasterxml.jackson.databind.util.TokenBuffer.canWriteBinaryNatively()
  - com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId()
  - com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId()
  - com.fasterxml.jackson.databind.util.TokenBuffer.close()
  - com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.databind.util.TokenBuffer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.util.TokenBuffer.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.databind.util.TokenBuffer.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.databind.util.TokenBuffer.firstToken()
  - com.fasterxml.jackson.databind.util.TokenBuffer.flush()
  - com.fasterxml.jackson.databind.util.TokenBuffer.forceUseOfBigDecimal(boolean)
  - com.fasterxml.jackson.databind.util.TokenBuffer.getCodec()
  - com.fasterxml.jackson.databind.util.TokenBuffer.getFeatureMask()
  - com.fasterxml.jackson.databind.util.TokenBuffer.getOutputContext()
  - com.fasterxml.jackson.databind.util.TokenBuffer.isClosed()
  - com.fasterxml.jackson.databind.util.TokenBuffer.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.databind.util.TokenBuffer.overrideParentContext(com.fasterxml.jackson.core.JsonStreamContext)
  - com.fasterxml.jackson.databind.util.TokenBuffer.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.serialize(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.util.TokenBuffer.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.databind.util.TokenBuffer.setFeatureMask(int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.toString()
  - com.fasterxml.jackson.databind.util.TokenBuffer.useDefaultPrettyPrinter()
  - com.fasterxml.jackson.databind.util.TokenBuffer.version()
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean(boolean)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeEmbeddedObject(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray()
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeEndObject()
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNull()
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(double)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(float)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(java.lang.String)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(long)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(short)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeObject(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(char)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(char[],int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(java.lang.String)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray()
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject()
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeString(char[],int,int)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeString(java.lang.String)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeTree(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.databind.util.TokenBuffer.writeUTF8String(byte[],int,int)
  langs:
  - java
  name: TokenBuffer
  nameWithType: TokenBuffer
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer
  type: Class
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Utility class used for efficient storage of <xref uid="com.fasterxml.jackson.core.JsonToken" data-throw-if-not-resolved="false">JsonToken</xref> sequences, needed for temporary buffering. Space efficient for different sequence lengths (especially so for smaller ones; but not significantly less efficient for larger), highly efficient for linear iteration and appending. Implemented as segmented/chunked linked list of tokens; only modifications are via appends.


    Note that before version 2.0, this class was located in the "core" bundle, not data-binding; but since it was only used by data binding, was moved here to reduce size of core package
  syntax:
    content: public class TokenBuffer extends JsonGenerator
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonGenerator
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  - com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  - com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
  - com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
  - com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
  - com.fasterxml.jackson.core.JsonGenerator.close()
  - com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.JsonGenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonGenerator.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonGenerator.flush()
  - com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()
  - com.fasterxml.jackson.core.JsonGenerator.getCodec()
  - com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()
  - com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()
  - com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputContext()
  - com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
  - com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
  - com.fasterxml.jackson.core.JsonGenerator.getSchema()
  - com.fasterxml.jackson.core.JsonGenerator.isClosed()
  - com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  - com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  - com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  - com.fasterxml.jackson.core.JsonGenerator.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)
  - com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)
  - com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  - com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()
  - com.fasterxml.jackson.core.JsonGenerator.version()
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  - com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  - com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
  - com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNull()
  - com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  - com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  - com.fasterxml.jackson.core.JsonGenerator.writeObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String,int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.writeTree(com.fasterxml.jackson.core.TreeNode)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  - com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES
  id: DEFAULT_GENERATOR_FEATURES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: DEFAULT_GENERATOR_FEATURES
  nameWithType: TokenBuffer.DEFAULT_GENERATOR_FEATURES
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.DEFAULT_GENERATOR_FEATURES
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected static final int DEFAULT_GENERATOR_FEATURES
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(com.fasterxml.jackson.core.JsonParser)
  id: TokenBuffer(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: TokenBuffer(JsonParser p)
  nameWithType: TokenBuffer.TokenBuffer(JsonParser p)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(JsonParser p)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public TokenBuffer(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: TokenBuffer(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: TokenBuffer(JsonParser p, DeserializationContext ctxt)
  nameWithType: TokenBuffer.TokenBuffer(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public TokenBuffer(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(com.fasterxml.jackson.core.ObjectCodec,boolean)
  id: TokenBuffer(com.fasterxml.jackson.core.ObjectCodec,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: TokenBuffer(ObjectCodec codec, boolean hasNativeIds)
  nameWithType: TokenBuffer.TokenBuffer(ObjectCodec codec, boolean hasNativeIds)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer(ObjectCodec codec, boolean hasNativeIds)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer*
  type: Constructor
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public TokenBuffer(ObjectCodec codec, boolean hasNativeIds)
    parameters:
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
      description: >-
        Object codec to use for stream-based object
           conversion through parser/generator interfaces. If null,
           such methods cannot be used.
    - id: hasNativeIds
      type: boolean
      description: >-
        Whether resulting <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> (if created)
           is considered to support native type and object ids
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendAt
  id: _appendAt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _appendAt
  nameWithType: TokenBuffer._appendAt
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendAt
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Offset within last segment,
  syntax:
    content: protected int _appendAt
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendEndMarker(com.fasterxml.jackson.core.JsonToken)
  id: _appendEndMarker(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _appendEndMarker(JsonToken type)
  nameWithType: TokenBuffer._appendEndMarker(JsonToken type)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendEndMarker(JsonToken type)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._appendEndMarker*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Specialized method used for appending a structural end Object/Array marker
  syntax:
    content: protected final void _appendEndMarker(JsonToken type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendFieldName(java.lang.Object)
  id: _appendFieldName(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _appendFieldName(Object value)
  nameWithType: TokenBuffer._appendFieldName(Object value)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendFieldName(Object value)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._appendFieldName*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Specialized method used for appending a field name, appending either <xref uid="java.lang.String" data-throw-if-not-resolved="false">String</xref> or <xref uid="com.fasterxml.jackson.core.SerializableString" data-throw-if-not-resolved="false">SerializableString</xref>.
  syntax:
    content: protected final void _appendFieldName(Object value)
    parameters:
    - id: value
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendStartMarker(com.fasterxml.jackson.core.JsonToken)
  id: _appendStartMarker(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _appendStartMarker(JsonToken type)
  nameWithType: TokenBuffer._appendStartMarker(JsonToken type)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendStartMarker(JsonToken type)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._appendStartMarker*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Specialized method used for appending a structural start Object/Array marker
  syntax:
    content: protected final void _appendStartMarker(JsonToken type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue(com.fasterxml.jackson.core.JsonToken)
  id: _appendValue(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _appendValue(JsonToken type)
  nameWithType: TokenBuffer._appendValue(JsonToken type)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue(JsonToken type)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method used for appending token known to represent a "simple" scalar value where token is the only information
  syntax:
    content: protected final void _appendValue(JsonToken type)
    parameters:
    - id: type
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue(com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  id: _appendValue(com.fasterxml.jackson.core.JsonToken,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _appendValue(JsonToken type, Object value)
  nameWithType: TokenBuffer._appendValue(JsonToken type, Object value)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue(JsonToken type, Object value)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method used for appending token known to represent a scalar value where there is additional content (text, number) beyond type token
  syntax:
    content: protected final void _appendValue(JsonToken type, Object value)
    parameters:
    - id: type
      type: com.fasterxml.jackson.core.JsonToken
    - id: value
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._closed
  id: _closed
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _closed
  nameWithType: TokenBuffer._closed
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._closed
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected boolean _closed
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._copyBufferContents(com.fasterxml.jackson.core.JsonParser)
  id: _copyBufferContents(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _copyBufferContents(JsonParser p)
  nameWithType: TokenBuffer._copyBufferContents(JsonParser p)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._copyBufferContents(JsonParser p)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._copyBufferContents*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected void _copyBufferContents(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._first
  id: _first
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _first
  nameWithType: TokenBuffer._first
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._first
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: First segment, for contents this buffer has
  syntax:
    content: protected TokenBuffer.Segment _first
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._forceBigDecimal
  id: _forceBigDecimal
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _forceBigDecimal
  nameWithType: TokenBuffer._forceBigDecimal
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._forceBigDecimal
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Flag set during construction, if use of <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref> is to be forced on all floating-point values.
  syntax:
    content: protected boolean _forceBigDecimal
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._generatorFeatures
  id: _generatorFeatures
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _generatorFeatures
  nameWithType: TokenBuffer._generatorFeatures
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._generatorFeatures
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Bit flag composed of bits that indicate which <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.JsonGenerator.Feature</xref>s are enabled.


    NOTE: most features have no effect on this class
  syntax:
    content: protected int _generatorFeatures
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeId
  id: _hasNativeId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _hasNativeId
  nameWithType: TokenBuffer._hasNativeId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeId
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Do we currently have a native type or object id buffered?
  syntax:
    content: protected boolean _hasNativeId
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeObjectIds
  id: _hasNativeObjectIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _hasNativeObjectIds
  nameWithType: TokenBuffer._hasNativeObjectIds
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeObjectIds
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected boolean _hasNativeObjectIds
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeTypeIds
  id: _hasNativeTypeIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _hasNativeTypeIds
  nameWithType: TokenBuffer._hasNativeTypeIds
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._hasNativeTypeIds
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected boolean _hasNativeTypeIds
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._last
  id: _last
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _last
  nameWithType: TokenBuffer._last
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._last
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Last segment of this buffer, one that is used for appending more tokens
  syntax:
    content: protected TokenBuffer.Segment _last
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._mayHaveNativeIds
  id: _mayHaveNativeIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _mayHaveNativeIds
  nameWithType: TokenBuffer._mayHaveNativeIds
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._mayHaveNativeIds
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected boolean _mayHaveNativeIds
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._objectCodec
  id: _objectCodec
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _objectCodec
  nameWithType: TokenBuffer._objectCodec
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._objectCodec
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: Object codec to use for stream-based object conversion through parser/generator interfaces. If null, such methods cannot be used.
  syntax:
    content: protected ObjectCodec _objectCodec
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._objectId
  id: _objectId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _objectId
  nameWithType: TokenBuffer._objectId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._objectId
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: If native object ids supported, this is the id for following value (or first token of one) to be written.
  syntax:
    content: protected Object _objectId
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._parentContext
  id: _parentContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _parentContext
  nameWithType: TokenBuffer._parentContext
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._parentContext
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: 'Parse context from "parent" parser (one from which content to buffer is read, if specified). Used, if available, when reading content, to present full context as if content was read from the original parser: this is useful in error reporting and sometimes processing as well.'
  syntax:
    content: protected JsonStreamContext _parentContext
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._reportUnsupportedOperation()
  id: _reportUnsupportedOperation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _reportUnsupportedOperation()
  nameWithType: TokenBuffer._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._reportUnsupportedOperation()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer._reportUnsupportedOperation*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected void _reportUnsupportedOperation()
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._typeId
  id: _typeId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _typeId
  nameWithType: TokenBuffer._typeId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._typeId
  type: Field
  package: com.fasterxml.jackson.databind.util
  summary: If native type ids supported, this is the id for following value (or first token of one) to be written.
  syntax:
    content: protected Object _typeId
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._writeContext
  id: _writeContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: _writeContext
  nameWithType: TokenBuffer._writeContext
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._writeContext
  type: Field
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: protected JsonWriteContext _writeContext
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.append(com.fasterxml.jackson.databind.util.TokenBuffer)
  id: append(com.fasterxml.jackson.databind.util.TokenBuffer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: append(TokenBuffer other)
  nameWithType: TokenBuffer.append(TokenBuffer other)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.append(TokenBuffer other)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.append*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Helper method that will append contents of given buffer into this buffer. Not particularly optimized; can be made faster if there is need.
  syntax:
    content: public TokenBuffer append(TokenBuffer other)
    parameters:
    - id: other
      type: com.fasterxml.jackson.databind.util.TokenBuffer
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer
      description: This buffer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asCopyOfValue(com.fasterxml.jackson.core.JsonParser)
  id: asCopyOfValue(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: asCopyOfValue(JsonParser p)
  nameWithType: TokenBuffer.asCopyOfValue(JsonParser p)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asCopyOfValue(JsonParser p)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.asCopyOfValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Convenience method, equivalent to:


    ```java

    TokenBuffer b = new TokenBuffer(p);
     b.copyCurrentStructure(p);
     return b;
    ```
  syntax:
    content: public static TokenBuffer asCopyOfValue(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asParser()
  id: asParser()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: asParser()
  nameWithType: TokenBuffer.asParser()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asParser()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.asParser*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method used to create a <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> that can read contents stored in this buffer. Will use default `_objectCodec` for object conversions.


    Note: instances are not synchronized, that is, they are not thread-safe if there are concurrent appends to the underlying buffer.
  syntax:
    content: public JsonParser asParser()
    return:
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that can be used for reading contents stored in this buffer
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asParser(com.fasterxml.jackson.core.JsonParser)
  id: asParser(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: asParser(JsonParser src)
  nameWithType: TokenBuffer.asParser(JsonParser src)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asParser(JsonParser src)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.asParser*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public JsonParser asParser(JsonParser src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.core.JsonParser
      description: >-
        Parser to use for accessing source information
            like location, configured codec
    return:
      type: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asParser(com.fasterxml.jackson.core.ObjectCodec)
  id: asParser(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: asParser(ObjectCodec codec)
  nameWithType: TokenBuffer.asParser(ObjectCodec codec)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asParser(ObjectCodec codec)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.asParser*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method used to create a <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> that can read contents stored in this buffer.


    Note: instances are not synchronized, that is, they are not thread-safe if there are concurrent appends to the underlying buffer.
  syntax:
    content: public JsonParser asParser(ObjectCodec codec)
    parameters:
    - id: codec
      type: com.fasterxml.jackson.core.ObjectCodec
      description: >-
        Object codec to use for stream-based object
           conversion through parser/generator interfaces. If null,
           such methods cannot be used.
    return:
      type: com.fasterxml.jackson.core.JsonParser
      description: Parser that can be used for reading contents stored in this buffer
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asParserOnFirstToken()
  id: asParserOnFirstToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: asParserOnFirstToken()
  nameWithType: TokenBuffer.asParserOnFirstToken()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asParserOnFirstToken()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.asParserOnFirstToken*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Same as:


    ```java

    JsonParser p = asParser();
      p.nextToken();
      return p;
    ```
  syntax:
    content: public JsonParser asParserOnFirstToken()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteBinaryNatively()
  id: canWriteBinaryNatively()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: canWriteBinaryNatively()
  nameWithType: TokenBuffer.canWriteBinaryNatively()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteBinaryNatively()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteBinaryNatively*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Since we can efficiently store `byte[]`, yes.
  syntax:
    content: public boolean canWriteBinaryNatively()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId()
  id: canWriteObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: canWriteObjectId()
  nameWithType: TokenBuffer.canWriteObjectId()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Object Ids natively (many do not; for example, JSON doesn't). This method **must** be called prior to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId*" data-throw-if-not-resolved="false">#writeObjectId</xref> or <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectRef" data-throw-if-not-resolved="false">#writeObjectRef</xref>.


    Default implementation returns false; overridden by data formats that do support native Object Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native object ids.
  syntax:
    content: public boolean canWriteObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId()
  id: canWriteTypeId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: canWriteTypeId()
  nameWithType: TokenBuffer.canWriteTypeId()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Introspection method that may be called to see if the underlying data format supports some kind of Type Ids natively (many do not; for example, JSON doesn't). This method **must** be called prior to calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId*" data-throw-if-not-resolved="false">#writeTypeId</xref>.


    Default implementation returns false; overridden by data formats that do support native Type Ids. Caller is expected to either use a non-native notation (explicit property or such), or fail, in case it can not use native type ids.
  syntax:
    content: public boolean canWriteTypeId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.close()
  id: close()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: close()
  nameWithType: TokenBuffer.close()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.close()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.close*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method called to close this generator, so that no more content can be written.


    Whether the underlying target (stream, writer) gets closed depends on whether this generator either manages the target (i.e. is the only one with access to the target -- case if caller passes a reference to the resource such as File, but not stream); or has feature <xref uid="" data-throw-if-not-resolved="false">Feature#AUTO_CLOSE_TARGET</xref> enabled. If either of above is true, the target is also closed. Otherwise (not managing, feature not enabled), target is not closed.
  syntax:
    content: public void close()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  id: copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: copyCurrentEvent(JsonParser p)
  nameWithType: TokenBuffer.copyCurrentEvent(JsonParser p)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent(JsonParser p)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for copying contents of the current event that the given parser instance points to. Note that the method **will not** copy any other events, such as events contained within JSON Array or Object structures.


    Calling this method will not advance the given parser, although it may cause parser to internally process more data (if it lazy loads contents of value events, for example)
  syntax:
    content: public void copyCurrentEvent(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  id: copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: copyCurrentStructure(JsonParser p)
  nameWithType: TokenBuffer.copyCurrentStructure(JsonParser p)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentStructure(JsonParser p)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentStructure*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for copying contents of the current event **and following events that it encloses** the given parser instance points to.


    So what constitutes enclosing? Here is the list of events that have associated enclosed events that will get copied:

     *  <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref>: all events up to and including matching (closing) <xref uid="com.fasterxml.jackson.core.JsonToken.END_OBJECT" data-throw-if-not-resolved="false">JsonToken#END_OBJECT</xref> will be copied
     *  <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> all events up to and including matching (closing) <xref uid="com.fasterxml.jackson.core.JsonToken.END_ARRAY" data-throw-if-not-resolved="false">JsonToken#END_ARRAY</xref> will be copied
     *  <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> the logical value (which can consist of a single scalar value; or a sequence of related events for structured types (JSON Arrays, Objects)) will be copied along with the name itself. So essentially the whole **field entry** (name and value) will be copied.

    After calling this method, parser will point to the **last event** that was copied. This will either be the event parser already pointed to (if there were no enclosed events), or the last enclosed event copied.
  syntax:
    content: public void copyCurrentStructure(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: deserialize(JsonParser p, DeserializationContext ctxt)
  nameWithType: TokenBuffer.deserialize(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.deserialize(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.deserialize*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Helper method used by standard deserializer.
  syntax:
    content: public TokenBuffer deserialize(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: disable(JsonGenerator.Feature f)
  nameWithType: TokenBuffer.disable(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.disable(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.disable*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for disabling specified features (check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of features)
  syntax:
    content: public JsonGenerator disable(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: enable(JsonGenerator.Feature f)
  nameWithType: TokenBuffer.enable(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.enable(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.enable*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: 'Method for enabling specified parser features: check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of available features.'
  syntax:
    content: public JsonGenerator enable(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.firstToken()
  id: firstToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: firstToken()
  nameWithType: TokenBuffer.firstToken()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.firstToken()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.firstToken*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public JsonToken firstToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.flush()
  id: flush()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: flush()
  nameWithType: TokenBuffer.flush()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.flush()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.flush*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method called to flush any buffered content to the underlying target (output stream, writer), and to flush the target itself as well.
  syntax:
    content: public void flush()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.forceUseOfBigDecimal(boolean)
  id: forceUseOfBigDecimal(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: forceUseOfBigDecimal(boolean b)
  nameWithType: TokenBuffer.forceUseOfBigDecimal(boolean b)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.forceUseOfBigDecimal(boolean b)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.forceUseOfBigDecimal*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public TokenBuffer forceUseOfBigDecimal(boolean b)
    parameters:
    - id: b
      type: boolean
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.getCodec()
  id: getCodec()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: getCodec()
  nameWithType: TokenBuffer.getCodec()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.getCodec()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.getCodec*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for accessing the object used for writing Java object as JSON content (using method <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref>).
  syntax:
    content: public ObjectCodec getCodec()
    return:
      type: com.fasterxml.jackson.core.ObjectCodec
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.getFeatureMask()
  id: getFeatureMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: getFeatureMask()
  nameWithType: TokenBuffer.getFeatureMask()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.getFeatureMask()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.getFeatureMask*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Bulk access method for getting state of all standard (non-dataformat-specific) <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature" data-throw-if-not-resolved="false">JsonGenerator.Feature</xref>s.
  syntax:
    content: public int getFeatureMask()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.getOutputContext()
  id: getOutputContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: getOutputContext()
  nameWithType: TokenBuffer.getOutputContext()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.getOutputContext()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.getOutputContext*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public final JsonWriteContext getOutputContext()
    return:
      type: com.fasterxml.jackson.core.json.JsonWriteContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.isClosed()
  id: isClosed()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: isClosed()
  nameWithType: TokenBuffer.isClosed()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.isClosed()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.isClosed*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that can be called to determine whether this generator is closed or not. If it is closed, no more output can be done.
  syntax:
    content: public boolean isClosed()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  id: isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: isEnabled(JsonGenerator.Feature f)
  nameWithType: TokenBuffer.isEnabled(JsonGenerator.Feature f)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.isEnabled(JsonGenerator.Feature f)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.isEnabled*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for checking whether given feature is enabled. Check <xref uid="" data-throw-if-not-resolved="false">Feature</xref> for list of available features.
  syntax:
    content: public boolean isEnabled(JsonGenerator.Feature f)
    parameters:
    - id: f
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.overrideParentContext(com.fasterxml.jackson.core.JsonStreamContext)
  id: overrideParentContext(com.fasterxml.jackson.core.JsonStreamContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: overrideParentContext(JsonStreamContext ctxt)
  nameWithType: TokenBuffer.overrideParentContext(JsonStreamContext ctxt)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.overrideParentContext(JsonStreamContext ctxt)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.overrideParentContext*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that allows explicitly specifying parent parse context to associate with contents of this buffer. Usually context is assigned at construction, based on given parser; but it is not always available, and may not contain intended context.
  syntax:
    content: public TokenBuffer overrideParentContext(JsonStreamContext ctxt)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.core.JsonStreamContext
    return:
      type: com.fasterxml.jackson.databind.util.TokenBuffer
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.overrideStdFeatures(int,int)
  id: overrideStdFeatures(int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: overrideStdFeatures(int values, int mask)
  nameWithType: TokenBuffer.overrideStdFeatures(int values, int mask)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.overrideStdFeatures(int values, int mask)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.overrideStdFeatures*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Bulk set method for (re)setting states of features specified by `mask`. Functionally equivalent to `int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); setFeatureMask(newState);` but preferred as this lets caller more efficiently specify actual changes made.
  syntax:
    content: public JsonGenerator overrideStdFeatures(int values, int mask)
    parameters:
    - id: values
      type: int
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.serialize(com.fasterxml.jackson.core.JsonGenerator)
  id: serialize(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: serialize(JsonGenerator gen)
  nameWithType: TokenBuffer.serialize(JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.serialize(JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Helper method that will write all contents of this buffer using given <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref>.


    Note: this method would be enough to implement `JsonSerializer` for `TokenBuffer` type; but we cannot have upwards references (from core to mapper package); and as such we also cannot take second argument.
  syntax:
    content: public void serialize(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  id: setCodec(com.fasterxml.jackson.core.ObjectCodec)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: setCodec(ObjectCodec oc)
  nameWithType: TokenBuffer.setCodec(ObjectCodec oc)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.setCodec(ObjectCodec oc)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.setCodec*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that can be called to set or reset the object to use for writing Java objects as JsonContent (using method <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref>).
  syntax:
    content: public JsonGenerator setCodec(ObjectCodec oc)
    parameters:
    - id: oc
      type: com.fasterxml.jackson.core.ObjectCodec
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.setFeatureMask(int)
  id: setFeatureMask(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: setFeatureMask(int mask)
  nameWithType: TokenBuffer.setFeatureMask(int mask)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.setFeatureMask(int mask)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.setFeatureMask*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Bulk set method for (re)setting states of all standard <xref uid="" data-throw-if-not-resolved="false">Feature</xref>s
  syntax:
    content: public JsonGenerator setFeatureMask(int mask)
    parameters:
    - id: mask
      type: int
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.toString()
  id: toString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: toString()
  nameWithType: TokenBuffer.toString()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.toString()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.toString*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.useDefaultPrettyPrinter()
  id: useDefaultPrettyPrinter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: useDefaultPrettyPrinter()
  nameWithType: TokenBuffer.useDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.useDefaultPrettyPrinter()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.useDefaultPrettyPrinter*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Convenience method for enabling pretty-printing using the default pretty printer (<xref uid="com.fasterxml.jackson.core.util.DefaultPrettyPrinter" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.util.DefaultPrettyPrinter</xref>).
  syntax:
    content: public JsonGenerator useDefaultPrettyPrinter()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.version()
  id: version()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: version()
  nameWithType: TokenBuffer.version()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.version()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.version*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Accessor for finding out version of the bundle that provided this generator instance.
  syntax:
    content: public Version version()
    return:
      type: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  nameWithType: TokenBuffer.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that will output given chunk of binary data as base64 encoded, as a complete String value (surrounded by double quotes). This method defaults


    Note: because JSON Strings can not contain unescaped linefeeds, if linefeeds are included (as per last argument), they must be escaped. This adds overhead for decoding without improving readability. Alternatively if linefeeds are not included, resulting String value may violate the requirement of base64 RFC which mandates line-length of 76 characters and use of linefeeds. However, all <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref> implementations are required to accept such "long line base64"; as do typical production-level base64 decoders.
  syntax:
    content: public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: byte[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  id: writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  nameWithType: TokenBuffer.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: 'Although we could support this method, it does not necessarily make sense: we cannot make good use of streaming because buffer must hold all the data. Because of this, currently this will simply throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>'
  syntax:
    content: public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: data
      type: java.io.InputStream
    - id: dataLength
      type: int
    return:
      type: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean(boolean)
  id: writeBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeBoolean(boolean state)
  nameWithType: TokenBuffer.writeBoolean(boolean state)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean(boolean state)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting literal JSON boolean value (one of Strings 'true' and 'false'). Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeBoolean(boolean state)
    parameters:
    - id: state
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeEmbeddedObject(java.lang.Object)
  id: writeEmbeddedObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeEmbeddedObject(Object object)
  nameWithType: TokenBuffer.writeEmbeddedObject(Object object)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeEmbeddedObject(Object object)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that can be called on backends that support passing opaque datatypes of non-JSON formats
  syntax:
    content: public void writeEmbeddedObject(Object object)
    parameters:
    - id: object
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray()
  id: writeEndArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeEndArray()
  nameWithType: TokenBuffer.writeEndArray()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing closing marker of a JSON Array value (character '\]'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Array.
  syntax:
    content: public final void writeEndArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndObject()
  id: writeEndObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeEndObject()
  nameWithType: TokenBuffer.writeEndObject()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndObject()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing closing marker of an Object value (character '\}'; plus possible white space decoration if pretty-printing is enabled).


    Marker can be written if the innermost structured type is Object, and the last written event was either a complete value, or START-OBJECT marker (see JSON specification for more details).
  syntax:
    content: public final void writeEndObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  id: writeFieldName(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeFieldName(SerializableString name)
  nameWithType: TokenBuffer.writeFieldName(SerializableString name)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(SerializableString name)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(java.lang.String)" data-throw-if-not-resolved="false">#writeFieldName(String)</xref>, main difference being that it may perform better as some of processing (such as quoting of certain characters, or encoding into external encoding if supported by generator) can be done just once and reused for later calls.


    Default implementation simple uses unprocessed name container in serialized String; implementations are strongly encouraged to make use of more efficient methods argument object has.
  syntax:
    content: public void writeFieldName(SerializableString name)
    parameters:
    - id: name
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(java.lang.String)
  id: writeFieldName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeFieldName(String name)
  nameWithType: TokenBuffer.writeFieldName(String name)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName(String name)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing a field name (JSON String surrounded by double quotes: syntactically identical to a JSON String value), possibly decorated by white space if pretty-printing is enabled.


    Field names can only be written in Object context (check out JSON specification for details), when field name is expected (field names alternate with values).
  syntax:
    content: public final void writeFieldName(String name)
    parameters:
    - id: name
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNull()
  id: writeNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNull()
  nameWithType: TokenBuffer.writeNull()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNull()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNull*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting literal JSON null value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNull()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(double)
  id: writeNumber(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(double d)
  nameWithType: TokenBuffer.writeNumber(double d)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(double d)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(double d)
    parameters:
    - id: d
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(float)
  id: writeNumber(float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(float f)
  nameWithType: TokenBuffer.writeNumber(float f)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(float f)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(float f)
    parameters:
    - id: f
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(int)
  id: writeNumber(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(int i)
  nameWithType: TokenBuffer.writeNumber(int i)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(int i)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(int i)
    parameters:
    - id: i
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(java.lang.String)
  id: writeNumber(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(String encodedValue)
  nameWithType: TokenBuffer.writeNumber(String encodedValue)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(String encodedValue)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Write method that can be used for custom numeric types that can not be (easily?) converted to "standard" Java number types. Because numbers are not surrounded by double quotes, regular <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeString*" data-throw-if-not-resolved="false">#writeString</xref> method can not be used; nor <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*" data-throw-if-not-resolved="false">#writeRaw</xref> because that does not properly handle value separators needed in Array or Object contexts.


    Note: because of lack of type safety, some generator implementations may not be able to implement this method. For example, if a binary JSON format is used, it may require type information for encoding; similarly for generator-wrappers around Java objects or JSON nodes. If implementation does not implement this method, it needs to throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeNumber(String encodedValue)
    parameters:
    - id: encodedValue
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(java.math.BigDecimal)
  id: writeNumber(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(BigDecimal dec)
  nameWithType: TokenBuffer.writeNumber(BigDecimal dec)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(BigDecimal dec)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting indicate JSON numeric value. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigDecimal dec)
    parameters:
    - id: dec
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(java.math.BigInteger)
  id: writeNumber(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(BigInteger v)
  nameWithType: TokenBuffer.writeNumber(BigInteger v)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(BigInteger v)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(BigInteger v)
    parameters:
    - id: v
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(long)
  id: writeNumber(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(long l)
  nameWithType: TokenBuffer.writeNumber(long l)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(long l)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(long l)
    parameters:
    - id: l
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(short)
  id: writeNumber(short)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeNumber(short i)
  nameWithType: TokenBuffer.writeNumber(short i)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber(short i)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting given value as JSON number. Can be called in any context where a value is expected (Array value, Object field value, root-level value). Additional white space may be added around the value if pretty-printing is enabled.
  syntax:
    content: public void writeNumber(short i)
    parameters:
    - id: i
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeObject(java.lang.Object)
  id: writeObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeObject(Object value)
  nameWithType: TokenBuffer.writeObject(Object value)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeObject(Object value)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: 'Method for writing given Java object (POJO) as Json. Exactly how the object gets written depends on object in question (ad on codec, its configuration); for most beans it will result in JSON Object, but for others JSON Array, or String or numeric value (and for nulls, JSON null literal. **NOTE**: generator must have its **object codec** set to non-null value; for generators created by a mapping factory this is the case, for others not.'
  syntax:
    content: public void writeObject(Object value)
    parameters:
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId(java.lang.Object)
  id: writeObjectId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeObjectId(Object id)
  nameWithType: TokenBuffer.writeObjectId(Object id)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId(Object id)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that can be called to output so-called native Object Id. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId()" data-throw-if-not-resolved="false">#canWriteObjectId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeObjectId(Object id)
    parameters:
    - id: id
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(char)
  id: writeRaw(char)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRaw(char c)
  nameWithType: TokenBuffer.writeRaw(char c)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(char c)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char c)
    parameters:
    - id: c
      type: char
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(char[],int,int)
  id: writeRaw(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRaw(char[] text, int offset, int len)
  nameWithType: TokenBuffer.writeRaw(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(com.fasterxml.jackson.core.SerializableString)
  id: writeRaw(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRaw(SerializableString text)
  nameWithType: TokenBuffer.writeRaw(SerializableString text)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(SerializableString text)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    The default implementation delegates to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(java.lang.String)" data-throw-if-not-resolved="false">#writeRaw(String)</xref>; other backends that support raw inclusion of text are encouraged to implement it in more efficient manner (especially if they use UTF-8 encoding).
  syntax:
    content: public void writeRaw(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(java.lang.String)
  id: writeRaw(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRaw(String text)
  nameWithType: TokenBuffer.writeRaw(String text)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(String text)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(java.lang.String,int,int)
  id: writeRaw(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRaw(String text, int offset, int len)
  nameWithType: TokenBuffer.writeRaw(String text, int offset, int len)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw(String text, int offset, int len)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method that will force generator to copy input text verbatim with **no** modifications (including that no escaping is done and no separators are added even if context \[array, object\] would otherwise require such). If such separators are desired, use <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)" data-throw-if-not-resolved="false">#writeRawValue(String)</xref> instead.


    Note that not all generator implementations necessarily support such by-pass methods: those that do not will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.
  syntax:
    content: public void writeRaw(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawUTF8String(byte[],int,int)
  id: writeRawUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRawUTF8String(byte[] text, int offset, int length)
  nameWithType: TokenBuffer.writeRawUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawUTF8String*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String that is to be output as-is, without additional escaping (type of which depends on data format; backslashes for JSON). However, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. If so, implementation may instead choose to throw a <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeRawUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(char[],int,int)
  id: writeRawValue(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRawValue(char[] text, int offset, int len)
  nameWithType: TokenBuffer.writeRawValue(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public void writeRawValue(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String)
  id: writeRawValue(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRawValue(String text)
  nameWithType: TokenBuffer.writeRawValue(String text)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(String text)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that will force generator to copy input text verbatim without any modifications, but assuming it must constitute a single legal JSON value (number, string, boolean, null, Array or List). Assuming this, proper separators are added if and as needed (comma or colon), and generator state updated to reflect this.
  syntax:
    content: public void writeRawValue(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(java.lang.String,int,int)
  id: writeRawValue(java.lang.String,int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeRawValue(String text, int offset, int len)
  nameWithType: TokenBuffer.writeRawValue(String text, int offset, int len)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue(String text, int offset, int len)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public void writeRawValue(String text, int offset, int len)
    parameters:
    - id: text
      type: java.lang.String
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray()
  id: writeStartArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartArray()
  nameWithType: TokenBuffer.writeStartArray()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing starting marker of a Array value (for JSON this is character '\['; plus possible white space decoration if pretty-printing is enabled).


    Array values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public final void writeStartArray()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(int)
  id: writeStartArray(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartArray(int size)
  nameWithType: TokenBuffer.writeStartArray(int size)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(int size)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing start marker of an Array value, similar to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>, but also specifying how many elements will be written for the array before calling <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray()" data-throw-if-not-resolved="false">#writeEndArray()</xref>.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray()" data-throw-if-not-resolved="false">#writeStartArray()</xref>.
  syntax:
    content: public final void writeStartArray(int size)
    parameters:
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(java.lang.Object)
  id: writeStartArray(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartArray(Object forValue)
  nameWithType: TokenBuffer.writeStartArray(Object forValue)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(Object forValue)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public void writeStartArray(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(java.lang.Object,int)
  id: writeStartArray(java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartArray(Object forValue, int size)
  nameWithType: TokenBuffer.writeStartArray(Object forValue, int size)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray(Object forValue, int size)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray*
  type: Method
  package: com.fasterxml.jackson.databind.util
  syntax:
    content: public void writeStartArray(Object forValue, int size)
    parameters:
    - id: forValue
      type: java.lang.Object
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject()
  id: writeStartObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartObject()
  nameWithType: TokenBuffer.writeStartObject()
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject()
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing starting marker of an Object value (character '\{'; plus possible white space decoration if pretty-printing is enabled).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public final void writeStartObject()
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject(java.lang.Object)
  id: writeStartObject(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartObject(Object forValue)
  nameWithType: TokenBuffer.writeStartObject(Object forValue)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject(Object forValue)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized.


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue)
    parameters:
    - id: forValue
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject(java.lang.Object,int)
  id: writeStartObject(java.lang.Object,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeStartObject(Object forValue, int size)
  nameWithType: TokenBuffer.writeStartObject(Object forValue, int size)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject(Object forValue, int size)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method for writing starting marker of an Object value to represent the given Java Object value. Argument is offered as metadata, but more importantly it should be assigned as the "current value" for the Object content that gets constructed and initialized. In addition, caller knows number of key/value pairs ("properties") that will get written for the Object value: this is relevant for some format backends (but not, as an example, for JSON).


    Object values can be written in any context where values are allowed: meaning everywhere except for when a field name is expected.
  syntax:
    content: public void writeStartObject(Object forValue, int size)
    parameters:
    - id: forValue
      type: java.lang.Object
    - id: size
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeString(char[],int,int)
  id: writeString(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeString(char[] text, int offset, int len)
  nameWithType: TokenBuffer.writeString(char[] text, int offset, int len)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeString(char[] text, int offset, int len)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeString*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(char[] text, int offset, int len)
    parameters:
    - id: text
      type: char[]
    - id: offset
      type: int
    - id: len
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeString(com.fasterxml.jackson.core.SerializableString)
  id: writeString(com.fasterxml.jackson.core.SerializableString)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeString(SerializableString text)
  nameWithType: TokenBuffer.writeString(SerializableString text)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeString(SerializableString text)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeString*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>, but that takes <xref uid="com.fasterxml.jackson.core.SerializableString" data-throw-if-not-resolved="false">SerializableString</xref> which can make this potentially more efficient to call as generator may be able to reuse quoted and/or encoded representation.


    Default implementation just calls <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref>; sub-classes should override it with more efficient implementation if possible.
  syntax:
    content: public void writeString(SerializableString text)
    parameters:
    - id: text
      type: com.fasterxml.jackson.core.SerializableString
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeString(java.lang.String)
  id: writeString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeString(String text)
  nameWithType: TokenBuffer.writeString(String text)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeString(String text)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeString*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for outputting a String value. Depending on context this means either array element, (object) field value or a stand alone String; but in all cases, String will be surrounded in double quotes, and contents will be properly escaped as required by JSON specification.
  syntax:
    content: public void writeString(String text)
    parameters:
    - id: text
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeTree(com.fasterxml.jackson.core.TreeNode)
  id: writeTree(com.fasterxml.jackson.core.TreeNode)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeTree(TreeNode node)
  nameWithType: TokenBuffer.writeTree(TreeNode node)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeTree(TreeNode node)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeTree*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method for writing given JSON tree (expressed as a tree where given JsonNode is the root) using this generator. This will generally just call <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeObject*" data-throw-if-not-resolved="false">#writeObject</xref> with given node, but is added for convenience and to make code more explicit in cases where it deals specifically with trees.
  syntax:
    content: public void writeTree(TreeNode node)
    parameters:
    - id: node
      type: com.fasterxml.jackson.core.TreeNode
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId(java.lang.Object)
  id: writeTypeId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeTypeId(Object id)
  nameWithType: TokenBuffer.writeTypeId(Object id)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId(Object id)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: Method that can be called to output so-called native Type Id. Note that it may only be called after ensuring this is legal (with <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId()" data-throw-if-not-resolved="false">#canWriteTypeId()</xref>), as not all data formats have native type id support; and some may only allow them in certain positions or locations. If output is not allowed by the data format in this position, a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref> will be thrown.
  syntax:
    content: public void writeTypeId(Object id)
    parameters:
    - id: id
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeUTF8String(byte[],int,int)
  id: writeUTF8String(byte[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.util.TokenBuffer
  langs:
  - java
  name: writeUTF8String(byte[] text, int offset, int length)
  nameWithType: TokenBuffer.writeUTF8String(byte[] text, int offset, int length)
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeUTF8String(byte[] text, int offset, int length)
  overload: com.fasterxml.jackson.databind.util.TokenBuffer.writeUTF8String*
  type: Method
  package: com.fasterxml.jackson.databind.util
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.databind.util.TokenBuffer.writeString(java.lang.String)" data-throw-if-not-resolved="false">#writeString(String)</xref> but that takes as its input a UTF-8 encoded String which has **not** been escaped using whatever escaping scheme data format requires (for JSON that is backslash-escaping for control characters and double-quotes; for other formats something else). This means that textual JSON backends need to check if value needs JSON escaping, but otherwise can just be copied as is to output. Also, quoting that data format requires (like double-quotes for JSON) will be added around the value if and as necessary.


    Note that some backends may choose not to support this method: for example, if underlying destination is a <xref uid="java.io.Writer" data-throw-if-not-resolved="false">java.io.Writer</xref> using this method would require UTF-8 decoding. In this case generator implementation may instead choose to throw a <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> due to ineffectiveness of having to decode input.
  syntax:
    content: public void writeUTF8String(byte[] text, int offset, int length)
    parameters:
    - id: text
      type: byte[]
    - id: offset
      type: int
    - id: length
      type: int
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.ObjectCodec
  name: ObjectCodec
  nameWithType: ObjectCodec
  fullName: com.fasterxml.jackson.core.ObjectCodec
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer*
  name: TokenBuffer
  nameWithType: TokenBuffer.TokenBuffer
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.TokenBuffer
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asCopyOfValue*
  name: asCopyOfValue
  nameWithType: TokenBuffer.asCopyOfValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asCopyOfValue
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.overrideParentContext*
  name: overrideParentContext
  nameWithType: TokenBuffer.overrideParentContext
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.overrideParentContext
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.forceUseOfBigDecimal*
  name: forceUseOfBigDecimal
  nameWithType: TokenBuffer.forceUseOfBigDecimal
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.forceUseOfBigDecimal
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.Version
  name: Version
  nameWithType: Version
  fullName: com.fasterxml.jackson.core.Version
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.version*
  name: version
  nameWithType: TokenBuffer.version
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.version
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asParser*
  name: asParser
  nameWithType: TokenBuffer.asParser
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asParser
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.asParserOnFirstToken*
  name: asParserOnFirstToken
  nameWithType: TokenBuffer.asParserOnFirstToken
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.asParserOnFirstToken
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.firstToken*
  name: firstToken
  nameWithType: TokenBuffer.firstToken
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.firstToken
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.append*
  name: append
  nameWithType: TokenBuffer.append
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.append
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.serialize*
  name: serialize
  nameWithType: TokenBuffer.serialize
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.serialize
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.deserialize*
  name: deserialize
  nameWithType: TokenBuffer.deserialize
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.deserialize
  package: com.fasterxml.jackson.databind.util
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.toString*
  name: toString
  nameWithType: TokenBuffer.toString
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.toString
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature
  name: JsonGenerator.Feature
  nameWithType: JsonGenerator.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.enable*
  name: enable
  nameWithType: TokenBuffer.enable
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.enable
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.disable*
  name: disable
  nameWithType: TokenBuffer.disable
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.disable
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.isEnabled*
  name: isEnabled
  nameWithType: TokenBuffer.isEnabled
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.isEnabled
  package: com.fasterxml.jackson.databind.util
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.getFeatureMask*
  name: getFeatureMask
  nameWithType: TokenBuffer.getFeatureMask
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.getFeatureMask
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.setFeatureMask*
  name: setFeatureMask
  nameWithType: TokenBuffer.setFeatureMask
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.setFeatureMask
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.overrideStdFeatures*
  name: overrideStdFeatures
  nameWithType: TokenBuffer.overrideStdFeatures
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.overrideStdFeatures
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.useDefaultPrettyPrinter*
  name: useDefaultPrettyPrinter
  nameWithType: TokenBuffer.useDefaultPrettyPrinter
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.useDefaultPrettyPrinter
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.setCodec*
  name: setCodec
  nameWithType: TokenBuffer.setCodec
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.setCodec
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.getCodec*
  name: getCodec
  nameWithType: TokenBuffer.getCodec
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.getCodec
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.json.JsonWriteContext
  name: JsonWriteContext
  nameWithType: JsonWriteContext
  fullName: com.fasterxml.jackson.core.json.JsonWriteContext
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.getOutputContext*
  name: getOutputContext
  nameWithType: TokenBuffer.getOutputContext
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.getOutputContext
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteBinaryNatively*
  name: canWriteBinaryNatively
  nameWithType: TokenBuffer.canWriteBinaryNatively
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteBinaryNatively
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.flush*
  name: flush
  nameWithType: TokenBuffer.flush
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.flush
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.close*
  name: close
  nameWithType: TokenBuffer.close
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.close
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.isClosed*
  name: isClosed
  nameWithType: TokenBuffer.isClosed
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.isClosed
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray*
  name: writeStartArray
  nameWithType: TokenBuffer.writeStartArray
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartArray
  package: com.fasterxml.jackson.databind.util
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray*
  name: writeEndArray
  nameWithType: TokenBuffer.writeEndArray
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndArray
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject*
  name: writeStartObject
  nameWithType: TokenBuffer.writeStartObject
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeStartObject
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndObject*
  name: writeEndObject
  nameWithType: TokenBuffer.writeEndObject
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeEndObject
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName*
  name: writeFieldName
  nameWithType: TokenBuffer.writeFieldName
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeFieldName
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.SerializableString
  name: SerializableString
  nameWithType: SerializableString
  fullName: com.fasterxml.jackson.core.SerializableString
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeString*
  name: writeString
  nameWithType: TokenBuffer.writeString
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeString
  package: com.fasterxml.jackson.databind.util
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawUTF8String*
  name: writeRawUTF8String
  nameWithType: TokenBuffer.writeRawUTF8String
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawUTF8String
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeUTF8String*
  name: writeUTF8String
  nameWithType: TokenBuffer.writeUTF8String
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeUTF8String
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw*
  name: writeRaw
  nameWithType: TokenBuffer.writeRaw
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRaw
  package: com.fasterxml.jackson.databind.util
- uid: char
  spec.java:
  - uid: char
    name: char
    fullName: char
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue*
  name: writeRawValue
  nameWithType: TokenBuffer.writeRawValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeRawValue
  package: com.fasterxml.jackson.databind.util
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber*
  name: writeNumber
  nameWithType: TokenBuffer.writeNumber
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNumber
  package: com.fasterxml.jackson.databind.util
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean*
  name: writeBoolean
  nameWithType: TokenBuffer.writeBoolean
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeBoolean
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeNull*
  name: writeNull
  nameWithType: TokenBuffer.writeNull
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeNull
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeObject*
  name: writeObject
  nameWithType: TokenBuffer.writeObject
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeObject
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.TreeNode
  name: TreeNode
  nameWithType: TreeNode
  fullName: com.fasterxml.jackson.core.TreeNode
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeTree*
  name: writeTree
  nameWithType: TokenBuffer.writeTree
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeTree
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary*
  name: writeBinary
  nameWithType: TokenBuffer.writeBinary
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeBinary
  package: com.fasterxml.jackson.databind.util
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId*
  name: canWriteTypeId
  nameWithType: TokenBuffer.canWriteTypeId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteTypeId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId*
  name: canWriteObjectId
  nameWithType: TokenBuffer.canWriteObjectId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.canWriteObjectId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId*
  name: writeTypeId
  nameWithType: TokenBuffer.writeTypeId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeTypeId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId*
  name: writeObjectId
  nameWithType: TokenBuffer.writeObjectId
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeObjectId
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.writeEmbeddedObject*
  name: writeEmbeddedObject
  nameWithType: TokenBuffer.writeEmbeddedObject
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.writeEmbeddedObject
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent*
  name: copyCurrentEvent
  nameWithType: TokenBuffer.copyCurrentEvent
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentEvent
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentStructure*
  name: copyCurrentStructure
  nameWithType: TokenBuffer.copyCurrentStructure
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.copyCurrentStructure
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._copyBufferContents*
  name: _copyBufferContents
  nameWithType: TokenBuffer._copyBufferContents
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._copyBufferContents
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue*
  name: _appendValue
  nameWithType: TokenBuffer._appendValue
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendValue
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendFieldName*
  name: _appendFieldName
  nameWithType: TokenBuffer._appendFieldName
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendFieldName
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendStartMarker*
  name: _appendStartMarker
  nameWithType: TokenBuffer._appendStartMarker
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendStartMarker
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._appendEndMarker*
  name: _appendEndMarker
  nameWithType: TokenBuffer._appendEndMarker
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._appendEndMarker
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer._reportUnsupportedOperation*
  name: _reportUnsupportedOperation
  nameWithType: TokenBuffer._reportUnsupportedOperation
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer._reportUnsupportedOperation
  package: com.fasterxml.jackson.databind.util
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
  name: TokenBuffer.Segment
  nameWithType: TokenBuffer.Segment
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Segment
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
  name: JsonGenerator.writeObjectField(String,Object)
  nameWithType: JsonGenerator.writeObjectField(String,Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectField(java.lang.String,java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()
  name: JsonGenerator.getFeatureMask()
  nameWithType: JsonGenerator.getFeatureMask()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getFeatureMask()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
  name: JsonGenerator.writeArray(double[],int,int)
  nameWithType: JsonGenerator.writeArray(double[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(double[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
  name: JsonGenerator.writeBinary(byte[])
  nameWithType: JsonGenerator.writeBinary(byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[])
- uid: com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator.copyCurrentEvent(JsonParser)
  nameWithType: JsonGenerator.copyCurrentEvent(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator.copyCurrentEvent(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)
  name: JsonGenerator.setFeatureMask(int)
  nameWithType: JsonGenerator.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
  name: JsonGenerator.writeStartObject()
  nameWithType: JsonGenerator.writeStartObject()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
  name: JsonGenerator.writeArrayFieldStart(String)
  nameWithType: JsonGenerator.writeArrayFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArrayFieldStart(java.lang.String)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
  name: JsonGenerator.writeNumber(double)
  nameWithType: JsonGenerator.writeNumber(double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(double)
- uid: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
  name: JsonGenerator.isEnabled(StreamWriteFeature)
  nameWithType: JsonGenerator.isEnabled(StreamWriteFeature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.StreamWriteFeature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
  name: JsonGenerator.writeEndObject()
  nameWithType: JsonGenerator.writeEndObject()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEndObject()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.JsonGenerator.getSchema()
  name: JsonGenerator.getSchema()
  nameWithType: JsonGenerator.getSchema()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getSchema()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNull()
  name: JsonGenerator.writeNull()
  nameWithType: JsonGenerator.writeNull()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNull()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String,int,int)
  name: JsonGenerator.writeRawValue(String,int,int)
  nameWithType: JsonGenerator.writeRawValue(String,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
  name: JsonGenerator.writeStartObject(Object,int)
  nameWithType: JsonGenerator.writeStartObject(Object,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
  name: JsonGenerator.getPrettyPrinter()
  nameWithType: JsonGenerator.getPrettyPrinter()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getPrettyPrinter()
- uid: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
  name: JsonGenerator._reportUnsupportedOperation()
  nameWithType: JsonGenerator._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
  name: JsonGenerator.writeStartArray(int)
  nameWithType: JsonGenerator.writeStartArray(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGenerator.isEnabled(JsonGenerator.Feature)
  nameWithType: JsonGenerator.isEnabled(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.isEnabled(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String)
  name: JsonGenerator.writeRawValue(String)
  nameWithType: JsonGenerator.writeRawValue(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
  name: JsonGenerator.canWriteTypeId()
  nameWithType: JsonGenerator.canWriteTypeId()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteTypeId()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
  name: JsonGenerator.writeNumber(BigDecimal)
  nameWithType: JsonGenerator.writeNumber(BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator.copyCurrentStructure(JsonParser)
  nameWithType: JsonGenerator.copyCurrentStructure(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator.copyCurrentStructure(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)
  name: JsonGenerator.writeStartObject(Object)
  nameWithType: JsonGenerator.writeStartObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
  name: JsonGenerator.canWriteObjectId()
  nameWithType: JsonGenerator.canWriteObjectId()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteObjectId()
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
  name: JsonGenerator.getOutputBuffered()
  nameWithType: JsonGenerator.getOutputBuffered()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputBuffered()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
  name: JsonGenerator.writeObjectRef(Object)
  nameWithType: JsonGenerator.writeObjectRef(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectRef(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.setRootValueSeparator(SerializableString)
  nameWithType: JsonGenerator.setRootValueSeparator(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setRootValueSeparator(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
  name: JsonGenerator.writeObjectId(Object)
  nameWithType: JsonGenerator.writeObjectId(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectId(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getCodec()
  name: JsonGenerator.getCodec()
  nameWithType: JsonGenerator.getCodec()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getCodec()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
  name: JsonGenerator.writeArray(int[],int,int)
  nameWithType: JsonGenerator.writeArray(int[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(int[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
  name: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  nameWithType: JsonGenerator.configure(JsonGenerator.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.configure(com.fasterxml.jackson.core.JsonGenerator.Feature,boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
  name: JsonGenerator.writeEndArray()
  nameWithType: JsonGenerator.writeEndArray()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEndArray()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
  name: JsonGenerator.writeUTF8String(byte[],int,int)
  nameWithType: JsonGenerator.writeUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
  name: JsonGenerator.writeBoolean(boolean)
  nameWithType: JsonGenerator.writeBoolean(boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBoolean(boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeRaw(SerializableString)
  nameWithType: JsonGenerator.writeRaw(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()
  name: JsonGenerator.getCurrentValue()
  nameWithType: JsonGenerator.getCurrentValue()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getCurrentValue()
- uid: com.fasterxml.jackson.core.JsonGenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGenerator.disable(JsonGenerator.Feature)
  nameWithType: JsonGenerator.disable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.disable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.JsonGenerator.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonGenerator.setCodec(ObjectCodec)
  nameWithType: JsonGenerator.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.JsonGenerator.close()
  name: JsonGenerator.close()
  nameWithType: JsonGenerator.close()
  fullName: com.fasterxml.jackson.core.JsonGenerator.close()
- uid: com.fasterxml.jackson.core.JsonGenerator.flush()
  name: JsonGenerator.flush()
  nameWithType: JsonGenerator.flush()
  fullName: com.fasterxml.jackson.core.JsonGenerator.flush()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
  name: JsonGenerator.writeTypeId(Object)
  nameWithType: JsonGenerator.writeTypeId(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeId(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()
  name: JsonGenerator.getHighestEscapedChar()
  nameWithType: JsonGenerator.getHighestEscapedChar()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getHighestEscapedChar()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)
  name: JsonGenerator.writeRawValue(char[],int,int)
  nameWithType: JsonGenerator.writeRawValue(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
  name: JsonGenerator.writeBinary(byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
  name: JsonGenerator.writeObjectFieldStart(String)
  nameWithType: JsonGenerator.writeObjectFieldStart(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObjectFieldStart(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
  name: JsonGenerator._throwInternal()
  nameWithType: JsonGenerator._throwInternal()
  fullName: com.fasterxml.jackson.core.JsonGenerator._throwInternal()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
  name: JsonGenerator.writeRaw(char[],int,int)
  nameWithType: JsonGenerator.writeRaw(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()
  name: JsonGenerator.getCharacterEscapes()
  nameWithType: JsonGenerator.getCharacterEscapes()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getCharacterEscapes()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
  name: JsonGenerator.writeStartArray()
  nameWithType: JsonGenerator.writeStartArray()
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray()
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
  name: JsonGenerator.getOutputTarget()
  nameWithType: JsonGenerator.getOutputTarget()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputTarget()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeFieldName(SerializableString)
  nameWithType: JsonGenerator.writeFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
  name: JsonGenerator.writeBinaryField(String,byte[])
  nameWithType: JsonGenerator.writeBinaryField(String,byte[])
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinaryField(java.lang.String,byte[])
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
  name: JsonGenerator.writeStartArray(Object,int)
  nameWithType: JsonGenerator.writeStartArray(Object,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)
  name: JsonGenerator.setCurrentValue(Object)
  nameWithType: JsonGenerator.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
  name: JsonGenerator.writeNumber(String)
  nameWithType: JsonGenerator.writeNumber(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
  name: JsonGenerator.writeNumber(char[],int,int)
  nameWithType: JsonGenerator.writeNumber(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
  name: JsonGenerator.writeRaw(char)
  nameWithType: JsonGenerator.writeRaw(char)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(char)
- uid: com.fasterxml.jackson.core.JsonGenerator.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
  name: JsonGenerator.enable(JsonGenerator.Feature)
  nameWithType: JsonGenerator.enable(JsonGenerator.Feature)
  fullName: com.fasterxml.jackson.core.JsonGenerator.enable(com.fasterxml.jackson.core.JsonGenerator.Feature)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
  name: JsonGenerator.writeNumber(long)
  nameWithType: JsonGenerator.writeNumber(long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(long)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
  name: JsonGenerator.writeNumber(float)
  nameWithType: JsonGenerator.writeNumber(float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(float)
- uid: com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
  name: JsonGenerator.setCharacterEscapes(CharacterEscapes)
  nameWithType: JsonGenerator.setCharacterEscapes(CharacterEscapes)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes)
- uid: com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)
  name: JsonGenerator.overrideStdFeatures(int,int)
  nameWithType: JsonGenerator.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
  name: JsonGenerator.writeNumber(BigInteger)
  nameWithType: JsonGenerator.writeNumber(BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(java.math.BigInteger)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
  name: JsonGenerator.writeRaw(String)
  nameWithType: JsonGenerator.writeRaw(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
  name: JsonGenerator.writeRawUTF8String(byte[],int,int)
  nameWithType: JsonGenerator.writeRawUTF8String(byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawUTF8String(byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
  name: JsonGenerator.canWriteFormattedNumbers()
  nameWithType: JsonGenerator.canWriteFormattedNumbers()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteFormattedNumbers()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
  name: JsonGenerator.writeBinary(Base64Variant,InputStream,int)
  nameWithType: JsonGenerator.writeBinary(Base64Variant,InputStream,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,java.io.InputStream,int)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
  name: JsonGenerator.writeArray(long[],int,int)
  nameWithType: JsonGenerator.writeArray(long[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(long[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
  name: JsonGenerator._reportError(String)
  nameWithType: JsonGenerator._reportError(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator._reportError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
  name: JsonGenerator.writeStringField(String,String)
  nameWithType: JsonGenerator.writeStringField(String,String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStringField(java.lang.String,java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypePrefix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypePrefix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypePrefix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
  name: JsonGenerator.writeNumber(short)
  nameWithType: JsonGenerator.writeNumber(short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(short)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
  name: JsonGenerator.writeTypeSuffix(WritableTypeId)
  nameWithType: JsonGenerator.writeTypeSuffix(WritableTypeId)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTypeSuffix(com.fasterxml.jackson.core.type.WritableTypeId)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
  name: JsonGenerator.writeString(String)
  nameWithType: JsonGenerator.writeString(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGenerator.canUseSchema(FormatSchema)
  nameWithType: JsonGenerator.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonGenerator.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
  name: JsonGenerator.writeBooleanField(String,boolean)
  nameWithType: JsonGenerator.writeBooleanField(String,boolean)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBooleanField(java.lang.String,boolean)
- uid: com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonGenerator.setSchema(FormatSchema)
  nameWithType: JsonGenerator.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
  name: JsonGenerator.writeArray(String[],int,int)
  nameWithType: JsonGenerator.writeArray(String[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeArray(java.lang.String[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.version()
  name: JsonGenerator.version()
  nameWithType: JsonGenerator.version()
  fullName: com.fasterxml.jackson.core.JsonGenerator.version()
- uid: com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()
  name: JsonGenerator.useDefaultPrettyPrinter()
  nameWithType: JsonGenerator.useDefaultPrettyPrinter()
  fullName: com.fasterxml.jackson.core.JsonGenerator.useDefaultPrettyPrinter()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
  name: JsonGenerator.writeNumberField(String,long)
  nameWithType: JsonGenerator.writeNumberField(String,long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,long)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
  name: JsonGenerator.writeNullField(String)
  nameWithType: JsonGenerator.writeNullField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNullField(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)
  name: JsonGenerator.setHighestNonEscapedChar(int)
  nameWithType: JsonGenerator.setHighestNonEscapedChar(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setHighestNonEscapedChar(int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
  name: JsonGenerator.writeStartArray(Object)
  nameWithType: JsonGenerator.writeStartArray(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeStartArray(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.isClosed()
  name: JsonGenerator.isClosed()
  nameWithType: JsonGenerator.isClosed()
  fullName: com.fasterxml.jackson.core.JsonGenerator.isClosed()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeObject(java.lang.Object)
  name: JsonGenerator.writeObject(Object)
  nameWithType: JsonGenerator.writeObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
  name: JsonGenerator.writeRaw(String,int,int)
  nameWithType: JsonGenerator.writeRaw(String,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRaw(java.lang.String,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
  name: JsonGenerator._verifyOffsets(int,int,int)
  nameWithType: JsonGenerator._verifyOffsets(int,int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator._verifyOffsets(int,int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
  name: JsonGenerator.writeEmbeddedObject(Object)
  nameWithType: JsonGenerator.writeEmbeddedObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeEmbeddedObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
  name: JsonGenerator.writeNumberField(String,float)
  nameWithType: JsonGenerator.writeNumberField(String,float)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,float)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
  name: JsonGenerator.writeString(Reader,int)
  nameWithType: JsonGenerator.writeString(Reader,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(java.io.Reader,int)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
  name: JsonGenerator.canOmitFields()
  nameWithType: JsonGenerator.canOmitFields()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canOmitFields()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
  name: JsonGenerator.writeBinary(Base64Variant,byte[],int,int)
  nameWithType: JsonGenerator.writeBinary(Base64Variant,byte[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(com.fasterxml.jackson.core.Base64Variant,byte[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeString(SerializableString)
  nameWithType: JsonGenerator.writeString(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
  name: JsonGenerator.canWriteBinaryNatively()
  nameWithType: JsonGenerator.canWriteBinaryNatively()
  fullName: com.fasterxml.jackson.core.JsonGenerator.canWriteBinaryNatively()
- uid: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
  name: JsonGenerator.getFormatFeatures()
  nameWithType: JsonGenerator.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getFormatFeatures()
- uid: com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
  name: JsonGenerator.overrideFormatFeatures(int,int)
  nameWithType: JsonGenerator.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.overrideFormatFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
  name: JsonGenerator.setPrettyPrinter(PrettyPrinter)
  nameWithType: JsonGenerator.setPrettyPrinter(PrettyPrinter)
  fullName: com.fasterxml.jackson.core.JsonGenerator.setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter)
- uid: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
  name: JsonGenerator._writeSimpleObject(Object)
  nameWithType: JsonGenerator._writeSimpleObject(Object)
  fullName: com.fasterxml.jackson.core.JsonGenerator._writeSimpleObject(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonGenerator.getOutputContext()
  name: JsonGenerator.getOutputContext()
  nameWithType: JsonGenerator.getOutputContext()
  fullName: com.fasterxml.jackson.core.JsonGenerator.getOutputContext()
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
  name: JsonGenerator.writeNumberField(String,int)
  nameWithType: JsonGenerator.writeNumberField(String,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
  name: JsonGenerator.writeNumber(int)
  nameWithType: JsonGenerator.writeNumber(int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumber(int)
- uid: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
  name: JsonGenerator._copyCurrentContents(JsonParser)
  nameWithType: JsonGenerator._copyCurrentContents(JsonParser)
  fullName: com.fasterxml.jackson.core.JsonGenerator._copyCurrentContents(com.fasterxml.jackson.core.JsonParser)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
  name: JsonGenerator.writeOmittedField(String)
  nameWithType: JsonGenerator.writeOmittedField(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeOmittedField(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
  name: JsonGenerator.writeFieldId(long)
  nameWithType: JsonGenerator.writeFieldId(long)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldId(long)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
  name: JsonGenerator.writeBinary(InputStream,int)
  nameWithType: JsonGenerator.writeBinary(InputStream,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeBinary(java.io.InputStream,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
  name: JsonGenerator.writeNumberField(String,BigInteger)
  nameWithType: JsonGenerator.writeNumberField(String,BigInteger)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigInteger)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
  name: JsonGenerator.writeNumberField(String,BigDecimal)
  nameWithType: JsonGenerator.writeNumberField(String,BigDecimal)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,java.math.BigDecimal)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
  name: JsonGenerator.writeNumberField(String,double)
  nameWithType: JsonGenerator.writeNumberField(String,double)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,double)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
  name: JsonGenerator.writeNumberField(String,short)
  nameWithType: JsonGenerator.writeNumberField(String,short)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeNumberField(java.lang.String,short)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
  name: JsonGenerator.writeFieldName(String)
  nameWithType: JsonGenerator.writeFieldName(String)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeFieldName(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
  name: JsonGenerator.writeRawValue(SerializableString)
  nameWithType: JsonGenerator.writeRawValue(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeRawValue(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
  name: JsonGenerator.writeString(char[],int,int)
  nameWithType: JsonGenerator.writeString(char[],int,int)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeString(char[],int,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.writeTree(com.fasterxml.jackson.core.TreeNode)
  name: JsonGenerator.writeTree(TreeNode)
  nameWithType: JsonGenerator.writeTree(TreeNode)
  fullName: com.fasterxml.jackson.core.JsonGenerator.writeTree(com.fasterxml.jackson.core.TreeNode)
- uid: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
  name: TokenBuffer.Parser
  nameWithType: TokenBuffer.Parser
  fullName: com.fasterxml.jackson.databind.util.TokenBuffer.Parser
