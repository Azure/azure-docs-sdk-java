### YamlMime:JavaType
uid: "com.azure.maps.search.MapsSearchAsyncClient"
fullName: "com.azure.maps.search.MapsSearchAsyncClient"
name: "MapsSearchAsyncClient"
nameWithType: "MapsSearchAsyncClient"
summary: "Initializes a new instance of the asynchronous Search<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **MapsSearchAsyncClient**"
methods:
- uid: "com.azure.maps.search.MapsSearchAsyncClient.beginFuzzySearchBatch(java.util.List<com.azure.maps.search.models.FuzzySearchOptions>)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.beginFuzzySearchBatch(List<FuzzySearchOptions> optionsList)"
  name: "beginFuzzySearchBatch(List<FuzzySearchOptions> optionsList)"
  nameWithType: "MapsSearchAsyncClient.beginFuzzySearchBatch(List<FuzzySearchOptions> optionsList)"
  summary: "Batch Fuzzy Search"
  parameters:
  - description: "a list of <xref uid=\"com.azure.maps.search.models.FuzzySearchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FuzzySearchOptions\"></xref> to be searched."
    name: "optionsList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.models.FuzzySearchOptions?alt=com.azure.maps.search.models.FuzzySearchOptions&text=FuzzySearchOptions\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<BatchSearchResult,BatchSearchResult> beginFuzzySearchBatch(List<FuzzySearchOptions> optionsList)"
  desc: "Batch Fuzzy Search\n\n```java\nList<FuzzySearchOptions> fuzzySearchBatchOptionsList = new ArrayList<>();\n fuzzySearchBatchOptionsList.add(new FuzzySearchOptions(\"atm\", new GeoPosition(-122.128362, 47.639769))\n     .setRadiusInMeters(5000).setTop(5));\n fuzzySearchBatchOptionsList.add(new FuzzySearchOptions(\"Statue of Liberty\").setTop(2));\n fuzzySearchBatchOptionsList.add(new FuzzySearchOptions(\"Starbucks\", new GeoPosition(-122.128362, 47.639769))\n     .setRadiusInMeters(5000));\n\n System.out.println(\"Post Search Fuzzy Batch Async\");\n asyncClient.beginFuzzySearchBatch(fuzzyOptionsList).getSyncPoller().getFinalResult();\n```"
  returns:
    description: "this object is returned from a successful Batch Fuzzy Search service call."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.beginGetFuzzySearchBatch(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.beginGetFuzzySearchBatch(String batchId)"
  name: "beginGetFuzzySearchBatch(String batchId)"
  nameWithType: "MapsSearchAsyncClient.beginGetFuzzySearchBatch(String batchId)"
  summary: "Get Fuzzy Batch Search by Id"
  parameters:
  - description: "Batch id for querying the operation."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchSearchResult,BatchSearchResult> beginGetFuzzySearchBatch(String batchId)"
  desc: "Get Fuzzy Batch Search by Id\n\n```java\nList<FuzzySearchOptions> fuzzySearchBatchOptionsList = new ArrayList<>();\n fuzzySearchBatchOptionsList.add(new FuzzySearchOptions(\"atm\", new GeoPosition(-122.128362, 47.639769))\n     .setRadiusInMeters(5000).setTop(5));\n fuzzySearchBatchOptionsList.add(new FuzzySearchOptions(\"Statue of Liberty\").setTop(2));\n fuzzySearchBatchOptionsList.add(new FuzzySearchOptions(\"Starbucks\", new GeoPosition(-122.128362, 47.639769))\n     .setRadiusInMeters(5000));\n\n System.out.println(\"Post Search Fuzzy Batch Async\");\n asyncClient.beginFuzzySearchBatch(fuzzyOptionsList).getSyncPoller().getFinalResult();\n```"
  returns:
    description: "this object is returned from a successful Search Address Batch service call."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.beginGetReverseSearchAddressBatch(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.beginGetReverseSearchAddressBatch(String batchId)"
  name: "beginGetReverseSearchAddressBatch(String batchId)"
  nameWithType: "MapsSearchAsyncClient.beginGetReverseSearchAddressBatch(String batchId)"
  summary: "Returns a batch of previously searched addressed given a batch id."
  parameters:
  - description: "Batch id for querying the operation."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchReverseSearchResult,BatchReverseSearchResult> beginGetReverseSearchAddressBatch(String batchId)"
  desc: "Returns a batch of previously searched addressed given a batch id.\n\n```java\nList<ReverseSearchAddressOptions> list2 = new ArrayList<>();\n list2.add(new ReverseSearchAddressOptions(new GeoPosition(2.294911, 48.858561)));\n list2.add(\n     new ReverseSearchAddressOptions(new GeoPosition(-122.127896, 47.639765))\n         .setRadiusInMeters(5000)\n );\n list2.add(new ReverseSearchAddressOptions(new GeoPosition(-122.348170, 47.621028)));\n\n System.out.println(\"Reverse Search Address Batch Async\");\n BatchReverseSearchResult batchReverseSearchResult =\n     asyncClient.beginReverseSearchAddressBatch(list2).getSyncPoller().getFinalResult();\n```"
  returns:
    description: "a <code>SyncPoller</code> wrapping the service call."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.BatchReverseSearchResult?alt=com.azure.maps.search.models.BatchReverseSearchResult&text=BatchReverseSearchResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.BatchReverseSearchResult?alt=com.azure.maps.search.models.BatchReverseSearchResult&text=BatchReverseSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.beginGetSearchAddressBatch(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.beginGetSearchAddressBatch(String batchId)"
  name: "beginGetSearchAddressBatch(String batchId)"
  nameWithType: "MapsSearchAsyncClient.beginGetSearchAddressBatch(String batchId)"
  summary: "Get Batch Search Id"
  parameters:
  - description: "Batch id for querying the operation."
    name: "batchId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PollerFlux<BatchSearchResult,BatchSearchResult> beginGetSearchAddressBatch(String batchId)"
  desc: "Get Batch Search Id\n\n```java\nList<SearchAddressOptions> list = new ArrayList<>();\n list.add(new SearchAddressOptions(\"400 Broad St, Seattle, WA 98109\").setTop(3));\n list.add(new SearchAddressOptions(\"One, Microsoft Way, Redmond, WA 98052\").setTop(3));\n list.add(new SearchAddressOptions(\"350 5th Ave, New York, NY 10118\").setTop(3));\n list.add(new SearchAddressOptions(\"1 Main Street\")\n     .setCountryFilter(Arrays.asList(\"GB\", \"US\", \"AU\")).setTop(3));\n\n // Search address batch async -\n // https://docs.microsoft.com/en-us/rest/api/maps/search/post-search-address-batch\n // This call posts addresses for search using the Asynchronous Batch API.\n // SyncPoller will do the polling automatically and you can retrieve the result\n // with getFinalResult()\n System.out.println(\"Search Address Batch Async\");\n asyncClient.beginSearchAddressBatch(list).blockFirst().getFinalResult();\n SyncPoller<BatchSearchResult, BatchSearchResult> bp2 = asyncClient.beginSearchAddressBatch(list).getSyncPoller();\n BatchSearchResult batchResult2 = bp2.getFinalResult();\n```"
  returns:
    description: "this object is returned from a successful Search Address Batch service call."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.beginReverseSearchAddressBatch(java.util.List<com.azure.maps.search.models.ReverseSearchAddressOptions>)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.beginReverseSearchAddressBatch(List<ReverseSearchAddressOptions> optionsList)"
  name: "beginReverseSearchAddressBatch(List<ReverseSearchAddressOptions> optionsList)"
  nameWithType: "MapsSearchAsyncClient.beginReverseSearchAddressBatch(List<ReverseSearchAddressOptions> optionsList)"
  summary: "Searches a batch of addresses given their coordinates."
  parameters:
  - description: "a list of <xref uid=\"com.azure.maps.search.models.ReverseSearchAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReverseSearchAddressOptions\"></xref> to be searched."
    name: "optionsList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchAddressOptions?alt=com.azure.maps.search.models.ReverseSearchAddressOptions&text=ReverseSearchAddressOptions\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<BatchReverseSearchResult,BatchReverseSearchResult> beginReverseSearchAddressBatch(List<ReverseSearchAddressOptions> optionsList)"
  desc: "Searches a batch of addresses given their coordinates.\n\n```java\nList<ReverseSearchAddressOptions> list2 = new ArrayList<>();\n list2.add(new ReverseSearchAddressOptions(new GeoPosition(2.294911, 48.858561)));\n list2.add(\n     new ReverseSearchAddressOptions(new GeoPosition(-122.127896, 47.639765))\n         .setRadiusInMeters(5000)\n );\n list2.add(new ReverseSearchAddressOptions(new GeoPosition(-122.348170, 47.621028)));\n\n System.out.println(\"Reverse Search Address Batch Async\");\n BatchReverseSearchResult batchReverseSearchResult =\n     asyncClient.beginReverseSearchAddressBatch(list2).getSyncPoller().getFinalResult();\n```"
  returns:
    description: "a <code>SyncPoller</code> wrapping the service call."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.BatchReverseSearchResult?alt=com.azure.maps.search.models.BatchReverseSearchResult&text=BatchReverseSearchResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.BatchReverseSearchResult?alt=com.azure.maps.search.models.BatchReverseSearchResult&text=BatchReverseSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.beginSearchAddressBatch(java.util.List<com.azure.maps.search.models.SearchAddressOptions>)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.beginSearchAddressBatch(List<SearchAddressOptions> optionsList)"
  name: "beginSearchAddressBatch(List<SearchAddressOptions> optionsList)"
  nameWithType: "MapsSearchAsyncClient.beginSearchAddressBatch(List<SearchAddressOptions> optionsList)"
  summary: "Batch Address Search"
  parameters:
  - description: "a list of <xref uid=\"com.azure.maps.search.models.FuzzySearchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FuzzySearchOptions\"></xref> to be searched."
    name: "optionsList"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.models.SearchAddressOptions?alt=com.azure.maps.search.models.SearchAddressOptions&text=SearchAddressOptions\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public PollerFlux<BatchSearchResult,BatchSearchResult> beginSearchAddressBatch(List<SearchAddressOptions> optionsList)"
  desc: "Batch Address Search\n\n```java\nList<SearchAddressOptions> list = new ArrayList<>();\n list.add(new SearchAddressOptions(\"400 Broad St, Seattle, WA 98109\").setTop(3));\n list.add(new SearchAddressOptions(\"One, Microsoft Way, Redmond, WA 98052\").setTop(3));\n list.add(new SearchAddressOptions(\"350 5th Ave, New York, NY 10118\").setTop(3));\n list.add(new SearchAddressOptions(\"1 Main Street\")\n     .setCountryFilter(Arrays.asList(\"GB\", \"US\", \"AU\")).setTop(3));\n\n // Search address batch async -\n // https://docs.microsoft.com/en-us/rest/api/maps/search/post-search-address-batch\n // This call posts addresses for search using the Asynchronous Batch API.\n // SyncPoller will do the polling automatically and you can retrieve the result\n // with getFinalResult()\n System.out.println(\"Search Address Batch Async\");\n asyncClient.beginSearchAddressBatch(list).blockFirst().getFinalResult();\n SyncPoller<BatchSearchResult, BatchSearchResult> bp2 = asyncClient.beginSearchAddressBatch(list).getSyncPoller();\n BatchSearchResult batchResult2 = bp2.getFinalResult();\n```"
  returns:
    description: "this object is returned from a successful Search Address Batch service call."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.BatchSearchResult?alt=com.azure.maps.search.models.BatchSearchResult&text=BatchSearchResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.fuzzySearch(com.azure.maps.search.models.FuzzySearchOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.fuzzySearch(FuzzySearchOptions options)"
  name: "fuzzySearch(FuzzySearchOptions options)"
  nameWithType: "MapsSearchAsyncClient.fuzzySearch(FuzzySearchOptions options)"
  summary: "Fuzzy Search"
  parameters:
  - description: "<xref uid=\"com.azure.maps.search.models.FuzzySearchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FuzzySearchOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.FuzzySearchOptions?alt=com.azure.maps.search.models.FuzzySearchOptions&text=FuzzySearchOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> fuzzySearch(FuzzySearchOptions options)"
  desc: "Fuzzy Search\n\n```java\nSystem.out.println(\"Search Fuzzy:\");\n\n // simple\n asyncClient.fuzzySearch(new FuzzySearchOptions(\"starbucks\"));\n\n // with options\n SearchAddressResult fuzzySearchResults = asyncClient.fuzzySearch(\n     new FuzzySearchOptions(\"1 Microsoft Way\", new GeoPosition(-74.011454, 40.706270))\n         .setTop(5)).block();\n\n // with response\n Response<SearchAddressResult> fuzzySearchResponse = asyncClient.fuzzySearchWithResponse(\n     new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n         .setTop(5)).block();\n```"
  returns:
    description: "this object is returned from a successful Fuzzy Search call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.fuzzySearch(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.fuzzySearch(String query)"
  name: "fuzzySearch(String query)"
  nameWithType: "MapsSearchAsyncClient.fuzzySearch(String query)"
  summary: "Fuzzy Search"
  parameters:
  - description: "the query string used in the search."
    name: "query"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchAddressResult> fuzzySearch(String query)"
  desc: "Fuzzy Search\n\n```java\nSystem.out.println(\"Search Fuzzy:\");\n\n // simple\n asyncClient.fuzzySearch(new FuzzySearchOptions(\"starbucks\"));\n\n // with options\n SearchAddressResult fuzzySearchResults = asyncClient.fuzzySearch(\n     new FuzzySearchOptions(\"1 Microsoft Way\", new GeoPosition(-74.011454, 40.706270))\n         .setTop(5)).block();\n\n // with response\n Response<SearchAddressResult> fuzzySearchResponse = asyncClient.fuzzySearchWithResponse(\n     new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n         .setTop(5)).block();\n```"
  returns:
    description: "this object is returned from a successful Fuzzy Search call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.fuzzySearchWithResponse(com.azure.maps.search.models.FuzzySearchOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.fuzzySearchWithResponse(FuzzySearchOptions options)"
  name: "fuzzySearchWithResponse(FuzzySearchOptions options)"
  nameWithType: "MapsSearchAsyncClient.fuzzySearchWithResponse(FuzzySearchOptions options)"
  summary: "Fuzzy Search"
  parameters:
  - description: "<xref uid=\"com.azure.maps.search.models.FuzzySearchOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FuzzySearchOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.FuzzySearchOptions?alt=com.azure.maps.search.models.FuzzySearchOptions&text=FuzzySearchOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> fuzzySearchWithResponse(FuzzySearchOptions options)"
  desc: "Fuzzy Search\n\n```java\nSystem.out.println(\"Search Fuzzy:\");\n\n // simple\n asyncClient.fuzzySearch(new FuzzySearchOptions(\"starbucks\"));\n\n // with options\n SearchAddressResult fuzzySearchResults = asyncClient.fuzzySearch(\n     new FuzzySearchOptions(\"1 Microsoft Way\", new GeoPosition(-74.011454, 40.706270))\n         .setTop(5)).block();\n\n // with response\n Response<SearchAddressResult> fuzzySearchResponse = asyncClient.fuzzySearchWithResponse(\n     new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n         .setTop(5)).block();\n```"
  returns:
    description: "this object is returned from a successful Fuzzy Search call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.getPointOfInterestCategoryTree()"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.getPointOfInterestCategoryTree()"
  name: "getPointOfInterestCategoryTree()"
  nameWithType: "MapsSearchAsyncClient.getPointOfInterestCategoryTree()"
  summary: "Get Point of Interest Category Tree"
  syntax: "public Mono<PointOfInterestCategoryTreeResult> getPointOfInterestCategoryTree()"
  desc: "Get Point of Interest Category Tree\n\n```java\nSystem.out.println(\"Get Search POI Category Tree:\");\n client.getPointOfInterestCategoryTree();\n```"
  returns:
    description: "this object is returned from a successful POI Category Tree call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.PointOfInterestCategoryTreeResult?alt=com.azure.maps.search.models.PointOfInterestCategoryTreeResult&text=PointOfInterestCategoryTreeResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.getPointOfInterestCategoryTreeWithResponse(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.getPointOfInterestCategoryTreeWithResponse(String language)"
  name: "getPointOfInterestCategoryTreeWithResponse(String language)"
  nameWithType: "MapsSearchAsyncClient.getPointOfInterestCategoryTreeWithResponse(String language)"
  summary: "Get Point of Interest Category Tree"
  parameters:
  - description: "Language in which search results should be returned. Should be one of supported IETF language\n     tags, except NGT and NGT-Latn. Language tag is case insensitive. When data in specified language is not\n     available for a specific field, default language is used (English).\n     <p>Please refer to [Supported Languages](https://docs.microsoft.com/azure/azure-maps/supported-languages) for\n     details."
    name: "language"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Response<PointOfInterestCategoryTreeResult>> getPointOfInterestCategoryTreeWithResponse(String language)"
  desc: "Get Point of Interest Category Tree\n\n```java\nSystem.out.println(\"Get Search POI Category Tree:\");\n client.getPointOfInterestCategoryTree();\n```"
  returns:
    description: "this object is returned from a successful POI Category Tree call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.PointOfInterestCategoryTreeResult?alt=com.azure.maps.search.models.PointOfInterestCategoryTreeResult&text=PointOfInterestCategoryTreeResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.getPolygons(java.util.List<java.lang.String>)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.getPolygons(List<String> geometryIds)"
  name: "getPolygons(List<String> geometryIds)"
  nameWithType: "MapsSearchAsyncClient.getPolygons(List<String> geometryIds)"
  summary: "List Polygons"
  parameters:
  - description: "Comma separated list of geometry UUIDs, previously retrieved from an Online Search request."
    name: "geometryIds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<List<MapsPolygon>> getPolygons(List<String> geometryIds)"
  desc: "List Polygons\n\n```java\nResponse<SearchAddressResult> fuzzySearchResponse = asyncClient.fuzzySearchWithResponse(\n     new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n         .setTop(5)).block();\n String fuzzySearchId = fuzzySearchResponse.getValue().getResults().get(0).getDataSource().getGeometry();\n List<String> getPolygonIds = results.getResults().stream()\n     .filter(item -> item.getDataSource() != null && item.getDataSource().getGeometry() != null)\n     .map(item -> item.getDataSource().getGeometry())\n     .collect(Collectors.toList());\n getPolygonIds.add(fuzzySearchId);\n\n if (ids != null && !getPolygonIds.isEmpty()) {\n     System.out.println(\"Get Polygon: \" + ids);\n }\n```"
  returns:
    description: "this object is returned from a successful Search Polygon call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.models.MapsPolygon?alt=com.azure.maps.search.models.MapsPolygon&text=MapsPolygon\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.getPolygonsWithResponse(java.util.List<java.lang.String>)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.getPolygonsWithResponse(List<String> geometryIds)"
  name: "getPolygonsWithResponse(List<String> geometryIds)"
  nameWithType: "MapsSearchAsyncClient.getPolygonsWithResponse(List<String> geometryIds)"
  summary: "List Polygons"
  parameters:
  - description: "Comma separated list of geometry UUIDs, previously retrieved from an Online Search request."
    name: "geometryIds"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public Mono<Response<List<MapsPolygon>>> getPolygonsWithResponse(List<String> geometryIds)"
  desc: "List Polygons\n\n```java\nResponse<SearchAddressResult> fuzzySearchResponse = asyncClient.fuzzySearchWithResponse(\n     new FuzzySearchOptions(\"Monaco\").setEntityType(GeographicEntityType.COUNTRY)\n         .setTop(5)).block();\n String fuzzySearchId = fuzzySearchResponse.getValue().getResults().get(0).getDataSource().getGeometry();\n List<String> getPolygonIds = results.getResults().stream()\n     .filter(item -> item.getDataSource() != null && item.getDataSource().getGeometry() != null)\n     .map(item -> item.getDataSource().getGeometry())\n     .collect(Collectors.toList());\n getPolygonIds.add(fuzzySearchId);\n\n if (ids != null && !getPolygonIds.isEmpty()) {\n     System.out.println(\"Get Polygon: \" + ids);\n }\n```"
  returns:
    description: "this object is returned from a successful Search Polygon call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.models.MapsPolygon?alt=com.azure.maps.search.models.MapsPolygon&text=MapsPolygon\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchAddress(com.azure.core.models.GeoPosition)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchAddress(GeoPosition query)"
  name: "reverseSearchAddress(GeoPosition query)"
  nameWithType: "MapsSearchAsyncClient.reverseSearchAddress(GeoPosition query)"
  summary: "Reverse Address Search"
  parameters:
  - description: "The applicable query as a pair of coordinates."
    name: "query"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ReverseSearchAddressResult> reverseSearchAddress(GeoPosition query)"
  desc: "Reverse Address Search\n\n```java\nSystem.out.println(\"Search Address Reverse:\");\n\n // simple\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n // options\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setIncludeSpeedLimit(true)\n         .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION) // returns only city\n );\n\n // complete\n asyncClient.reverseSearchAddressWithResponse(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setIncludeSpeedLimit(true)\n         .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchAddressResult?alt=com.azure.maps.search.models.ReverseSearchAddressResult&text=ReverseSearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchAddress(com.azure.maps.search.models.ReverseSearchAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchAddress(ReverseSearchAddressOptions options)"
  name: "reverseSearchAddress(ReverseSearchAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.reverseSearchAddress(ReverseSearchAddressOptions options)"
  summary: "Reverse Address Search"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.ReverseSearchAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReverseSearchAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.ReverseSearchAddressOptions?alt=com.azure.maps.search.models.ReverseSearchAddressOptions&text=ReverseSearchAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ReverseSearchAddressResult> reverseSearchAddress(ReverseSearchAddressOptions options)"
  desc: "Reverse Address Search\n\n```java\nSystem.out.println(\"Search Address Reverse:\");\n\n // simple\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n // options\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setIncludeSpeedLimit(true)\n         .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION) // returns only city\n );\n\n // complete\n asyncClient.reverseSearchAddressWithResponse(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setIncludeSpeedLimit(true)\n         .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchAddressResult?alt=com.azure.maps.search.models.ReverseSearchAddressResult&text=ReverseSearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchAddressWithResponse(com.azure.maps.search.models.ReverseSearchAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchAddressWithResponse(ReverseSearchAddressOptions options)"
  name: "reverseSearchAddressWithResponse(ReverseSearchAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.reverseSearchAddressWithResponse(ReverseSearchAddressOptions options)"
  summary: "Reverse Address Search"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.ReverseSearchAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReverseSearchAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.ReverseSearchAddressOptions?alt=com.azure.maps.search.models.ReverseSearchAddressOptions&text=ReverseSearchAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ReverseSearchAddressResult>> reverseSearchAddressWithResponse(ReverseSearchAddressOptions options)"
  desc: "Reverse Address Search\n\n```java\nSystem.out.println(\"Search Address Reverse:\");\n\n // simple\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n // options\n asyncClient.reverseSearchAddress(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setIncludeSpeedLimit(true)\n         .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION) // returns only city\n );\n\n // complete\n asyncClient.reverseSearchAddressWithResponse(\n     new ReverseSearchAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setIncludeSpeedLimit(true)\n         .setEntityType(GeographicEntityType.COUNTRY_SECONDARY_SUBDIVISION)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchAddressResult?alt=com.azure.maps.search.models.ReverseSearchAddressResult&text=ReverseSearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchCrossStreetAddress(com.azure.core.models.GeoPosition)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchCrossStreetAddress(GeoPosition query)"
  name: "reverseSearchCrossStreetAddress(GeoPosition query)"
  nameWithType: "MapsSearchAsyncClient.reverseSearchCrossStreetAddress(GeoPosition query)"
  summary: "Reverse Address Search to a Cross Street"
  parameters:
  - description: "with a pair of coordinates."
    name: "query"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ReverseSearchCrossStreetAddressResult> reverseSearchCrossStreetAddress(GeoPosition query)"
  desc: "Reverse Address Search to a Cross Street\n\n```java\nSystem.out.println(\"Revere Search Cross Street Address:\");\n\n // options\n asyncClient.reverseSearchCrossStreetAddress(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n // options\n asyncClient.reverseSearchCrossStreetAddress(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setTop(2)\n         .setHeading(5));\n\n // complete\n asyncClient.reverseSearchCrossStreetAddressWithResponse(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setTop(2)\n         .setHeading(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult?alt=com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult&text=ReverseSearchCrossStreetAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchCrossStreetAddress(com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchCrossStreetAddress(ReverseSearchCrossStreetAddressOptions options)"
  name: "reverseSearchCrossStreetAddress(ReverseSearchCrossStreetAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.reverseSearchCrossStreetAddress(ReverseSearchCrossStreetAddressOptions options)"
  summary: "Reverse Address Search to a Cross Street"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReverseSearchCrossStreetAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions?alt=com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions&text=ReverseSearchCrossStreetAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ReverseSearchCrossStreetAddressResult> reverseSearchCrossStreetAddress(ReverseSearchCrossStreetAddressOptions options)"
  desc: "Reverse Address Search to a Cross Street\n\n```java\nSystem.out.println(\"Revere Search Cross Street Address:\");\n\n // options\n asyncClient.reverseSearchCrossStreetAddress(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n // options\n asyncClient.reverseSearchCrossStreetAddress(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setTop(2)\n         .setHeading(5));\n\n // complete\n asyncClient.reverseSearchCrossStreetAddressWithResponse(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setTop(2)\n         .setHeading(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult?alt=com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult&text=ReverseSearchCrossStreetAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchCrossStreetAddressWithResponse(com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.reverseSearchCrossStreetAddressWithResponse(ReverseSearchCrossStreetAddressOptions options)"
  name: "reverseSearchCrossStreetAddressWithResponse(ReverseSearchCrossStreetAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.reverseSearchCrossStreetAddressWithResponse(ReverseSearchCrossStreetAddressOptions options)"
  summary: "Reverse Address Search to a Cross Street"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ReverseSearchCrossStreetAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions?alt=com.azure.maps.search.models.ReverseSearchCrossStreetAddressOptions&text=ReverseSearchCrossStreetAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<ReverseSearchCrossStreetAddressResult>> reverseSearchCrossStreetAddressWithResponse(ReverseSearchCrossStreetAddressOptions options)"
  desc: "Reverse Address Search to a Cross Street\n\n```java\nSystem.out.println(\"Revere Search Cross Street Address:\");\n\n // options\n asyncClient.reverseSearchCrossStreetAddress(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337)));\n\n // options\n asyncClient.reverseSearchCrossStreetAddress(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setTop(2)\n         .setHeading(5));\n\n // complete\n asyncClient.reverseSearchCrossStreetAddressWithResponse(\n     new ReverseSearchCrossStreetAddressOptions(new GeoPosition(-121.89, 37.337))\n         .setTop(2)\n         .setHeading(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult?alt=com.azure.maps.search.models.ReverseSearchCrossStreetAddressResult&text=ReverseSearchCrossStreetAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchAddress(com.azure.maps.search.models.SearchAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchAddress(SearchAddressOptions options)"
  name: "searchAddress(SearchAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchAddress(SearchAddressOptions options)"
  summary: "Search Address"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchAddressOptions?alt=com.azure.maps.search.models.SearchAddressOptions&text=SearchAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchAddress(SearchAddressOptions options)"
  desc: "Search Address\n\n```java\nSystem.out.println(\"Search Address:\");\n\n // simple\n asyncClient.searchAddress(\n     new SearchAddressOptions(\"15127 NE 24th Street, Redmond, WA 98052\"));\n\n // options\n asyncClient.searchAddress(\n     new SearchAddressOptions(\"1 Main Street\")\n         .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n         .setRadiusInMeters(40000)\n         .setTop(5));\n\n // complete\n asyncClient.searchAddressWithResponse(\n     new SearchAddressOptions(\"1 Main Street\")\n         .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n         .setRadiusInMeters(40000)\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchAddress(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchAddress(String query)"
  name: "searchAddress(String query)"
  nameWithType: "MapsSearchAsyncClient.searchAddress(String query)"
  summary: "Search Address"
  parameters:
  - description: "the query string used in the fuzzy search."
    name: "query"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchAddressResult> searchAddress(String query)"
  desc: "Search Address\n\n```java\nSystem.out.println(\"Search Address:\");\n\n // simple\n asyncClient.searchAddress(\n     new SearchAddressOptions(\"15127 NE 24th Street, Redmond, WA 98052\"));\n\n // options\n asyncClient.searchAddress(\n     new SearchAddressOptions(\"1 Main Street\")\n         .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n         .setRadiusInMeters(40000)\n         .setTop(5));\n\n // complete\n asyncClient.searchAddressWithResponse(\n     new SearchAddressOptions(\"1 Main Street\")\n         .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n         .setRadiusInMeters(40000)\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchAddressWithResponse(com.azure.maps.search.models.SearchAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchAddressWithResponse(SearchAddressOptions options)"
  name: "searchAddressWithResponse(SearchAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchAddressWithResponse(SearchAddressOptions options)"
  summary: "Search Address"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchAddressOptions?alt=com.azure.maps.search.models.SearchAddressOptions&text=SearchAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchAddressWithResponse(SearchAddressOptions options)"
  desc: "Search Address\n\n```java\nSystem.out.println(\"Search Address:\");\n\n // simple\n asyncClient.searchAddress(\n     new SearchAddressOptions(\"15127 NE 24th Street, Redmond, WA 98052\"));\n\n // options\n asyncClient.searchAddress(\n     new SearchAddressOptions(\"1 Main Street\")\n         .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n         .setRadiusInMeters(40000)\n         .setTop(5));\n\n // complete\n asyncClient.searchAddressWithResponse(\n     new SearchAddressOptions(\"1 Main Street\")\n         .setCoordinates(new GeoPosition(-74.011454, 40.706270))\n         .setRadiusInMeters(40000)\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchAlongRoute(com.azure.maps.search.models.SearchAlongRouteOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchAlongRoute(SearchAlongRouteOptions options)"
  name: "searchAlongRoute(SearchAlongRouteOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchAlongRoute(SearchAlongRouteOptions options)"
  summary: "Search Along Route"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchAlongRouteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAlongRouteOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchAlongRouteOptions?alt=com.azure.maps.search.models.SearchAlongRouteOptions&text=SearchAlongRouteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchAlongRoute(SearchAlongRouteOptions options)"
  desc: "Search Along Route\n\n```java\nSystem.out.println(\"Search Along Route\");\n\n // create route points\n List<GeoPosition> getPolygonPoints = new ArrayList<>();\n points.add(new GeoPosition(-122.143035, 47.653536));\n points.add(new GeoPosition(-122.187164, 47.617556));\n points.add(new GeoPosition(-122.114981, 47.570599));\n points.add(new GeoPosition(-122.132756, 47.654009));\n GeoLineString getPolygonRoute = new GeoLineString(getPolygonPoints);\n\n // simple\n asyncClient.searchAlongRoute(new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute));\n\n // options\n asyncClient.searchAlongRoute(\n     new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute)\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(5));\n\n // complete\n asyncClient.searchAlongRouteWithResponse(\n     new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute)\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Along Route call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchAlongRoute(java.lang.String,int)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchAlongRoute(String query, int maxDetourTime)"
  name: "searchAlongRoute(String query, int maxDetourTime)"
  nameWithType: "MapsSearchAsyncClient.searchAlongRoute(String query, int maxDetourTime)"
  summary: "Search Along Route"
  parameters:
  - description: "the search query"
    name: "query"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the maximum detour time allowed"
    name: "maxDetourTime"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchAlongRoute(String query, int maxDetourTime)"
  desc: "Search Along Route\n\n```java\nSystem.out.println(\"Search Along Route\");\n\n // create route points\n List<GeoPosition> getPolygonPoints = new ArrayList<>();\n points.add(new GeoPosition(-122.143035, 47.653536));\n points.add(new GeoPosition(-122.187164, 47.617556));\n points.add(new GeoPosition(-122.114981, 47.570599));\n points.add(new GeoPosition(-122.132756, 47.654009));\n GeoLineString getPolygonRoute = new GeoLineString(getPolygonPoints);\n\n // simple\n asyncClient.searchAlongRoute(new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute));\n\n // options\n asyncClient.searchAlongRoute(\n     new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute)\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(5));\n\n // complete\n asyncClient.searchAlongRouteWithResponse(\n     new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute)\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Along Route call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchAlongRouteWithResponse(com.azure.maps.search.models.SearchAlongRouteOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchAlongRouteWithResponse(SearchAlongRouteOptions options)"
  name: "searchAlongRouteWithResponse(SearchAlongRouteOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchAlongRouteWithResponse(SearchAlongRouteOptions options)"
  summary: "Search Along Route"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchAlongRouteOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchAlongRouteOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchAlongRouteOptions?alt=com.azure.maps.search.models.SearchAlongRouteOptions&text=SearchAlongRouteOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchAlongRouteWithResponse(SearchAlongRouteOptions options)"
  desc: "Search Along Route\n\n```java\nSystem.out.println(\"Search Along Route\");\n\n // create route points\n List<GeoPosition> getPolygonPoints = new ArrayList<>();\n points.add(new GeoPosition(-122.143035, 47.653536));\n points.add(new GeoPosition(-122.187164, 47.617556));\n points.add(new GeoPosition(-122.114981, 47.570599));\n points.add(new GeoPosition(-122.132756, 47.654009));\n GeoLineString getPolygonRoute = new GeoLineString(getPolygonPoints);\n\n // simple\n asyncClient.searchAlongRoute(new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute));\n\n // options\n asyncClient.searchAlongRoute(\n     new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute)\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(5));\n\n // complete\n asyncClient.searchAlongRouteWithResponse(\n     new SearchAlongRouteOptions(\"burger\", 1000, getPolygonRoute)\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Along Route call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchInsideGeometry(com.azure.maps.search.models.SearchInsideGeometryOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchInsideGeometry(SearchInsideGeometryOptions options)"
  name: "searchInsideGeometry(SearchInsideGeometryOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchInsideGeometry(SearchInsideGeometryOptions options)"
  summary: "Search Inside Geometry"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchInsideGeometryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchInsideGeometryOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchInsideGeometryOptions?alt=com.azure.maps.search.models.SearchInsideGeometryOptions&text=SearchInsideGeometryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchInsideGeometry(SearchInsideGeometryOptions options)"
  desc: "Search Inside Geometry\n\n```java\nSystem.out.println(\"Search Inside Geometry\");\n\n // create GeoPolygon\n List<GeoPosition> searchInsideGeometryCoordinates = new ArrayList<>();\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43301391601562, 37.70660472542312));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.36434936523438, 37.712059855877314));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\n GeoLinearRing searchInsideGeometryRing = new GeoLinearRing(searchInsideGeometryCoordinates);\n GeoPolygon searchInsideGeometryPolygon = new GeoPolygon(searchInsideGeometryRing);\n\n // simple\n asyncClient.searchInsideGeometry(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon));\n\n // options\n asyncClient.searchInsideGeometry(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon)\n         .setTop(5));\n\n // complete\n asyncClient.searchInsideGeometryWithResponse(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon)\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Inside Geometry call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchInsideGeometry(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchInsideGeometry(String query)"
  name: "searchInsideGeometry(String query)"
  nameWithType: "MapsSearchAsyncClient.searchInsideGeometry(String query)"
  summary: "Search Inside Geometry"
  parameters:
  - description: "query string"
    name: "query"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchAddressResult> searchInsideGeometry(String query)"
  desc: "Search Inside Geometry\n\n```java\nSystem.out.println(\"Search Inside Geometry\");\n\n // create GeoPolygon\n List<GeoPosition> searchInsideGeometryCoordinates = new ArrayList<>();\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43301391601562, 37.70660472542312));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.36434936523438, 37.712059855877314));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\n GeoLinearRing searchInsideGeometryRing = new GeoLinearRing(searchInsideGeometryCoordinates);\n GeoPolygon searchInsideGeometryPolygon = new GeoPolygon(searchInsideGeometryRing);\n\n // simple\n asyncClient.searchInsideGeometry(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon));\n\n // options\n asyncClient.searchInsideGeometry(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon)\n         .setTop(5));\n\n // complete\n asyncClient.searchInsideGeometryWithResponse(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon)\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Inside Geometry call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchInsideGeometryWithResponse(com.azure.maps.search.models.SearchInsideGeometryOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchInsideGeometryWithResponse(SearchInsideGeometryOptions options)"
  name: "searchInsideGeometryWithResponse(SearchInsideGeometryOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchInsideGeometryWithResponse(SearchInsideGeometryOptions options)"
  summary: "Search Inside Geometry"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchInsideGeometryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchInsideGeometryOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchInsideGeometryOptions?alt=com.azure.maps.search.models.SearchInsideGeometryOptions&text=SearchInsideGeometryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchInsideGeometryWithResponse(SearchInsideGeometryOptions options)"
  desc: "Search Inside Geometry\n\n```java\nSystem.out.println(\"Search Inside Geometry\");\n\n // create GeoPolygon\n List<GeoPosition> searchInsideGeometryCoordinates = new ArrayList<>();\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43301391601562, 37.70660472542312));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.36434936523438, 37.712059855877314));\n searchInsideGeometryCoordinates.add(new GeoPosition(-122.43576049804686, 37.7524152343544));\n GeoLinearRing searchInsideGeometryRing = new GeoLinearRing(searchInsideGeometryCoordinates);\n GeoPolygon searchInsideGeometryPolygon = new GeoPolygon(searchInsideGeometryRing);\n\n // simple\n asyncClient.searchInsideGeometry(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon));\n\n // options\n asyncClient.searchInsideGeometry(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon)\n         .setTop(5));\n\n // complete\n asyncClient.searchInsideGeometryWithResponse(\n     new SearchInsideGeometryOptions(\"Leland Avenue\", searchInsideGeometryPolygon)\n         .setTop(5)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Inside Geometry call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchNearbyPointsOfInterest(com.azure.core.models.GeoPosition)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchNearbyPointsOfInterest(GeoPosition query)"
  name: "searchNearbyPointsOfInterest(GeoPosition query)"
  nameWithType: "MapsSearchAsyncClient.searchNearbyPointsOfInterest(GeoPosition query)"
  summary: "Search Nearby Points of Interest"
  parameters:
  - description: "A pair of coordinates for query."
    name: "query"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchNearbyPointsOfInterest(GeoPosition query)"
  desc: "Search Nearby Points of Interest\n\n```java\nSystem.out.println(\"Search Nearby:\");\n\n // options\n asyncClient.searchNearbyPointsOfInterest(\n     new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n         .setCountryFilter(Arrays.asList(\"US\"))\n         .setTop(10));\n\n // response\n asyncClient.searchNearbyPointsOfInterestWithResponse(\n     new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n         .setCountryFilter(Arrays.asList(\"US\"))\n         .setTop(10)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Nearby Point of Interest call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchNearbyPointsOfInterest(com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchNearbyPointsOfInterest(SearchNearbyPointsOfInterestOptions options)"
  name: "searchNearbyPointsOfInterest(SearchNearbyPointsOfInterestOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchNearbyPointsOfInterest(SearchNearbyPointsOfInterestOptions options)"
  summary: "Search Nearby Points of Interest"
  parameters:
  - description: "<xref uid=\"com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchNearbyPointsOfInterestOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions?alt=com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions&text=SearchNearbyPointsOfInterestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchNearbyPointsOfInterest(SearchNearbyPointsOfInterestOptions options)"
  desc: "Search Nearby Points of Interest\n\n```java\nSystem.out.println(\"Search Nearby:\");\n\n // options\n asyncClient.searchNearbyPointsOfInterest(\n     new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n         .setCountryFilter(Arrays.asList(\"US\"))\n         .setTop(10));\n\n // response\n asyncClient.searchNearbyPointsOfInterestWithResponse(\n     new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n         .setCountryFilter(Arrays.asList(\"US\"))\n         .setTop(10)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Nearby Point of Interest call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchNearbyPointsOfInterestWithResponse(com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchNearbyPointsOfInterestWithResponse(SearchNearbyPointsOfInterestOptions options)"
  name: "searchNearbyPointsOfInterestWithResponse(SearchNearbyPointsOfInterestOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchNearbyPointsOfInterestWithResponse(SearchNearbyPointsOfInterestOptions options)"
  summary: "Search Nearby Points of Interest"
  parameters:
  - description: "<xref uid=\"com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchNearbyPointsOfInterestOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions?alt=com.azure.maps.search.models.SearchNearbyPointsOfInterestOptions&text=SearchNearbyPointsOfInterestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchNearbyPointsOfInterestWithResponse(SearchNearbyPointsOfInterestOptions options)"
  desc: "Search Nearby Points of Interest\n\n```java\nSystem.out.println(\"Search Nearby:\");\n\n // options\n asyncClient.searchNearbyPointsOfInterest(\n     new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n         .setCountryFilter(Arrays.asList(\"US\"))\n         .setTop(10));\n\n // response\n asyncClient.searchNearbyPointsOfInterestWithResponse(\n     new SearchNearbyPointsOfInterestOptions(new GeoPosition(-74.011454, 40.706270))\n         .setCountryFilter(Arrays.asList(\"US\"))\n         .setTop(10)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Nearby Point of Interest call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterest(com.azure.maps.search.models.SearchPointOfInterestOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterest(SearchPointOfInterestOptions options)"
  name: "searchPointOfInterest(SearchPointOfInterestOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchPointOfInterest(SearchPointOfInterestOptions options)"
  summary: "Search Point of Interest"
  parameters:
  - description: "<xref uid=\"com.azure.maps.search.models.SearchPointOfInterestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchPointOfInterestOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchPointOfInterestOptions?alt=com.azure.maps.search.models.SearchPointOfInterestOptions&text=SearchPointOfInterestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchPointOfInterest(SearchPointOfInterestOptions options)"
  desc: "Search Point of Interest\n\n```java\nSystem.out.println(\"Search Points of Interest:\");\n\n // coordinates\n asyncClient.searchPointOfInterest(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844)));\n\n // options\n asyncClient.searchPointOfInterest(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n         .setTop(10)\n         .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS));\n\n // with response\n asyncClient.searchPointOfInterestWithResponse(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n         .setTop(10)\n         .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Point of Interest call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterest(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterest(String query)"
  name: "searchPointOfInterest(String query)"
  nameWithType: "MapsSearchAsyncClient.searchPointOfInterest(String query)"
  summary: "Search Point of Interest"
  parameters:
  - description: "The query to be used to search for points of interest."
    name: "query"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchAddressResult> searchPointOfInterest(String query)"
  desc: "Search Point of Interest\n\n```java\nSystem.out.println(\"Search Points of Interest:\");\n\n // coordinates\n asyncClient.searchPointOfInterest(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844)));\n\n // options\n asyncClient.searchPointOfInterest(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n         .setTop(10)\n         .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS));\n\n // with response\n asyncClient.searchPointOfInterestWithResponse(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n         .setTop(10)\n         .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Point of Interest call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestCategory(com.azure.maps.search.models.SearchPointOfInterestCategoryOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestCategory(SearchPointOfInterestCategoryOptions options)"
  name: "searchPointOfInterestCategory(SearchPointOfInterestCategoryOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchPointOfInterestCategory(SearchPointOfInterestCategoryOptions options)"
  summary: "Search Point of Interest per Category"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchPointOfInterestCategoryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchPointOfInterestCategoryOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchPointOfInterestCategoryOptions?alt=com.azure.maps.search.models.SearchPointOfInterestCategoryOptions&text=SearchPointOfInterestCategoryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchPointOfInterestCategory(SearchPointOfInterestCategoryOptions options)"
  desc: "Search Point of Interest per Category\n\n```java\nSystem.out.println(\"Get Point of Interest Category:\");\n\n // complete - search for italian restaurant in NYC\n asyncClient.searchPointOfInterestCategory(\n     new SearchPointOfInterestCategoryOptions(\"pasta\", new GeoPosition(-74.011454, 40.706270))\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(3));\n\n // with response\n asyncClient.searchPointOfInterestCategoryWithResponse(\n     new SearchPointOfInterestCategoryOptions(\"pasta\", new GeoPosition(-74.011454, 40.706270))\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(3)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Point of Interest per Category calls."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestCategory(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestCategory(String query)"
  name: "searchPointOfInterestCategory(String query)"
  nameWithType: "MapsSearchAsyncClient.searchPointOfInterestCategory(String query)"
  summary: "Search Point of Interest per Category"
  parameters:
  - description: "The query to be used to search for points of interest."
    name: "query"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchAddressResult> searchPointOfInterestCategory(String query)"
  desc: "Search Point of Interest per Category\n\n```java\nSystem.out.println(\"Get Point of Interest Category:\");\n\n // complete - search for italian restaurant in NYC\n asyncClient.searchPointOfInterestCategory(\n     new SearchPointOfInterestCategoryOptions(\"pasta\", new GeoPosition(-74.011454, 40.706270))\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(3));\n\n // with response\n asyncClient.searchPointOfInterestCategoryWithResponse(\n     new SearchPointOfInterestCategoryOptions(\"pasta\", new GeoPosition(-74.011454, 40.706270))\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(3)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Point of Interest per Category calls."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestCategoryWithResponse(com.azure.maps.search.models.SearchPointOfInterestCategoryOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestCategoryWithResponse(SearchPointOfInterestCategoryOptions options)"
  name: "searchPointOfInterestCategoryWithResponse(SearchPointOfInterestCategoryOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchPointOfInterestCategoryWithResponse(SearchPointOfInterestCategoryOptions options)"
  summary: "Search Point of Interest per Category"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchPointOfInterestCategoryOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchPointOfInterestCategoryOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchPointOfInterestCategoryOptions?alt=com.azure.maps.search.models.SearchPointOfInterestCategoryOptions&text=SearchPointOfInterestCategoryOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchPointOfInterestCategoryWithResponse(SearchPointOfInterestCategoryOptions options)"
  desc: "Search Point of Interest per Category\n\n```java\nSystem.out.println(\"Get Point of Interest Category:\");\n\n // complete - search for italian restaurant in NYC\n asyncClient.searchPointOfInterestCategory(\n     new SearchPointOfInterestCategoryOptions(\"pasta\", new GeoPosition(-74.011454, 40.706270))\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(3));\n\n // with response\n asyncClient.searchPointOfInterestCategoryWithResponse(\n     new SearchPointOfInterestCategoryOptions(\"pasta\", new GeoPosition(-74.011454, 40.706270))\n         .setCategoryFilter(Arrays.asList(7315))\n         .setTop(3)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Point of Interest per Category calls."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestWithResponse(com.azure.maps.search.models.SearchPointOfInterestOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchPointOfInterestWithResponse(SearchPointOfInterestOptions options)"
  name: "searchPointOfInterestWithResponse(SearchPointOfInterestOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchPointOfInterestWithResponse(SearchPointOfInterestOptions options)"
  summary: "Search Point of Interest"
  parameters:
  - description: "<xref uid=\"com.azure.maps.search.models.SearchPointOfInterestOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchPointOfInterestOptions\"></xref> the options to be used in this search."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchPointOfInterestOptions?alt=com.azure.maps.search.models.SearchPointOfInterestOptions&text=SearchPointOfInterestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchPointOfInterestWithResponse(SearchPointOfInterestOptions options)"
  desc: "Search Point of Interest\n\n```java\nSystem.out.println(\"Search Points of Interest:\");\n\n // coordinates\n asyncClient.searchPointOfInterest(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844)));\n\n // options\n asyncClient.searchPointOfInterest(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n         .setTop(10)\n         .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS));\n\n // with response\n asyncClient.searchPointOfInterestWithResponse(\n     new SearchPointOfInterestOptions(\"pizza\", new GeoPosition(-121.97483, 36.98844))\n         .setTop(10)\n         .setOperatingHours(OperatingHoursRange.NEXT_SEVEN_DAYS)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Search Point of Interest call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchStructuredAddress(com.azure.maps.search.models.StructuredAddress,com.azure.maps.search.models.SearchStructuredAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchStructuredAddress(StructuredAddress address, SearchStructuredAddressOptions options)"
  name: "searchStructuredAddress(StructuredAddress address, SearchStructuredAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchStructuredAddress(StructuredAddress address, SearchStructuredAddressOptions options)"
  summary: "Structured Address Search"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.StructuredAddress\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StructuredAddress\"></xref> to be searched by the API."
    name: "address"
    type: "<xref href=\"com.azure.maps.search.models.StructuredAddress?alt=com.azure.maps.search.models.StructuredAddress&text=StructuredAddress\" data-throw-if-not-resolved=\"False\" />"
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchStructuredAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchStructuredAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchStructuredAddressOptions?alt=com.azure.maps.search.models.SearchStructuredAddressOptions&text=SearchStructuredAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<SearchAddressResult> searchStructuredAddress(StructuredAddress address, SearchStructuredAddressOptions options)"
  desc: "Structured Address Search\n\n```java\nSystem.out.println(\"Search Address Structured:\");\n\n // simple\n asyncClient.searchStructuredAddress(new StructuredAddress(\"US\")\n     .setPostalCode(\"98121\")\n     .setStreetNumber(\"15127\")\n     .setStreetName(\"NE 24th Street\")\n     .setMunicipality(\"Redmond\")\n     .setCountrySubdivision(\"WA\"), null);\n\n // complete\n asyncClient.searchStructuredAddressWithResponse(new StructuredAddress(\"US\")\n     .setPostalCode(\"98121\")\n     .setStreetNumber(\"15127\")\n     .setStreetName(\"NE 24th Street\")\n     .setMunicipality(\"Redmond\")\n     .setCountrySubdivision(\"WA\"),\n     new SearchStructuredAddressOptions()\n             .setTop(2)\n             .setRadiusInMeters(1000)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchStructuredAddress(java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchStructuredAddress(String countryCode)"
  name: "searchStructuredAddress(String countryCode)"
  nameWithType: "MapsSearchAsyncClient.searchStructuredAddress(String countryCode)"
  summary: "Structured Address Search"
  parameters:
  - description: "the country code for query."
    name: "countryCode"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<SearchAddressResult> searchStructuredAddress(String countryCode)"
  desc: "Structured Address Search\n\n```java\nSystem.out.println(\"Search Address Structured:\");\n\n // simple\n asyncClient.searchStructuredAddress(new StructuredAddress(\"US\")\n     .setPostalCode(\"98121\")\n     .setStreetNumber(\"15127\")\n     .setStreetName(\"NE 24th Street\")\n     .setMunicipality(\"Redmond\")\n     .setCountrySubdivision(\"WA\"), null);\n\n // complete\n asyncClient.searchStructuredAddressWithResponse(new StructuredAddress(\"US\")\n     .setPostalCode(\"98121\")\n     .setStreetNumber(\"15127\")\n     .setStreetName(\"NE 24th Street\")\n     .setMunicipality(\"Redmond\")\n     .setCountrySubdivision(\"WA\"),\n     new SearchStructuredAddressOptions()\n             .setTop(2)\n             .setRadiusInMeters(1000)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchAsyncClient.searchStructuredAddressWithResponse(com.azure.maps.search.models.StructuredAddress,com.azure.maps.search.models.SearchStructuredAddressOptions)"
  fullName: "com.azure.maps.search.MapsSearchAsyncClient.searchStructuredAddressWithResponse(StructuredAddress address, SearchStructuredAddressOptions options)"
  name: "searchStructuredAddressWithResponse(StructuredAddress address, SearchStructuredAddressOptions options)"
  nameWithType: "MapsSearchAsyncClient.searchStructuredAddressWithResponse(StructuredAddress address, SearchStructuredAddressOptions options)"
  summary: "Structured Address Search"
  parameters:
  - description: "a <xref uid=\"com.azure.maps.search.models.StructuredAddress\" data-throw-if-not-resolved=\"false\" data-raw-source=\"StructuredAddress\"></xref> to be searched by the API."
    name: "address"
    type: "<xref href=\"com.azure.maps.search.models.StructuredAddress?alt=com.azure.maps.search.models.StructuredAddress&text=StructuredAddress\" data-throw-if-not-resolved=\"False\" />"
  - description: "a <xref uid=\"com.azure.maps.search.models.SearchStructuredAddressOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchStructuredAddressOptions\"></xref> representing the search parameters."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.SearchStructuredAddressOptions?alt=com.azure.maps.search.models.SearchStructuredAddressOptions&text=SearchStructuredAddressOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<SearchAddressResult>> searchStructuredAddressWithResponse(StructuredAddress address, SearchStructuredAddressOptions options)"
  desc: "Structured Address Search\n\n```java\nSystem.out.println(\"Search Address Structured:\");\n\n // simple\n asyncClient.searchStructuredAddress(new StructuredAddress(\"US\")\n     .setPostalCode(\"98121\")\n     .setStreetNumber(\"15127\")\n     .setStreetName(\"NE 24th Street\")\n     .setMunicipality(\"Redmond\")\n     .setCountrySubdivision(\"WA\"), null);\n\n // complete\n asyncClient.searchStructuredAddressWithResponse(new StructuredAddress(\"US\")\n     .setPostalCode(\"98121\")\n     .setStreetNumber(\"15127\")\n     .setStreetName(\"NE 24th Street\")\n     .setMunicipality(\"Redmond\")\n     .setCountrySubdivision(\"WA\"),\n     new SearchStructuredAddressOptions()\n             .setTop(2)\n             .setRadiusInMeters(1000)).block().getStatusCode();\n```"
  returns:
    description: "this object is returned from a successful Reverse Search Address call."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.SearchAddressResult?alt=com.azure.maps.search.models.SearchAddressResult&text=SearchAddressResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous SearchClient type. Creating an async client using a <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a builder\n MapsSearchClientBuilder builder = new MapsSearchClientBuilder();\n builder.credential(keyCredential);\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds the client\n MapsSearchAsyncClient client = builder.buildAsyncClient();\n```\n\nCreating an async client using a <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.TokenCredential\"></xref>:\n\n```java\n// Authenticates using Azure AD building a default credential\n // This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\n DefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n // Creates a builder\n MapsSearchClientBuilder builder = new MapsSearchClientBuilder();\n builder.credential(tokenCredential);\n builder.mapsClientId(System.getenv(\"MAPS_CLIENT_ID\"));\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds a client\n MapsSearchAsyncClient client = builder.buildAsyncClient();\n```"
metadata: {}
package: "com.azure.maps.search"
artifact: com.azure:azure-maps-search:1.0.0-beta.1
