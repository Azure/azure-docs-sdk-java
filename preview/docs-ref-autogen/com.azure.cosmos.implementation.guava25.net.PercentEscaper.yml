### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper
  id: PercentEscaper
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.net
  children:
  - com.azure.cosmos.implementation.guava25.net.PercentEscaper.PercentEscaper(java.lang.String,boolean)
  - com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(int)
  - com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  langs:
  - java
  name: PercentEscaper
  nameWithType: PercentEscaper
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper
  type: Class
  package: com.azure.cosmos.implementation.guava25.net
  summary: >-
    A `UnicodeEscaper` that escapes some set of Java characters using a UTF-8 based percent encoding scheme. The set of safe characters (those which remain unescaped) can be specified on construction.


    This class is primarily used for creating URI escapers in <xref uid="" data-throw-if-not-resolved="false">UrlEscapers</xref> but can be used directly if required. While URI escapers impose specific semantics on which characters are considered 'safe', this class has a minimal set of restrictions.


    When escaping a String, the following rules apply:

     *  All specified safe characters remain unchanged.
     *  If `plusForSpace` was specified, the space character " " is converted into a plus sign `"+"`.
     *  All other characters are converted into one or more bytes using UTF-8 encoding and each byte is then represented by the 3-character string "%XX", where "XX" is the two-digit, uppercase, hexadecimal representation of the byte value.

    For performance reasons the only currently supported character encoding of this class is UTF-8.


    **Note:** This escaper produces [uppercase][] hexadecimal sequences.



    [uppercase]: https://url.spec.whatwg.org/#percent-encode
  syntax:
    content: public final class PercentEscaper extends UnicodeEscaper
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.escape.Escaper
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)
  - com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.PercentEscaper(java.lang.String,boolean)
  id: PercentEscaper(java.lang.String,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.net.PercentEscaper
  langs:
  - java
  name: PercentEscaper(String safeChars, boolean plusForSpace)
  nameWithType: PercentEscaper.PercentEscaper(String safeChars, boolean plusForSpace)
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.PercentEscaper(String safeChars, boolean plusForSpace)
  overload: com.azure.cosmos.implementation.guava25.net.PercentEscaper.PercentEscaper*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.net
  summary: >-
    Constructs a percent escaper with the specified safe characters and optional handling of the space character.


    Not that it is allowed, but not necessarily desirable to specify `%` as a safe character. This has the effect of creating an escaper which has no well defined inverse but it can be useful when escaping additional characters.
  syntax:
    content: public PercentEscaper(String safeChars, boolean plusForSpace)
    parameters:
    - id: safeChars
      type: java.lang.String
      description: >-
        a non null string specifying additional safe characters for this escaper (the
             ranges 0..9, a..z and A..Z are always safe and should not be specified here)
    - id: plusForSpace
      type: boolean
      description: true if ASCII space should be escaped to <code>+</code> rather than <code>%20</code>
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(int)
  id: escape(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.net.PercentEscaper
  langs:
  - java
  name: escape(int cp)
  nameWithType: PercentEscaper.escape(int cp)
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(int cp)
  overload: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.net
  summary: Escapes the given Unicode code point in UTF-8.
  syntax:
    content: protected char[] escape(int cp)
    parameters:
    - id: cp
      type: int
    return:
      type: char[]
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(java.lang.String)
  id: escape(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.net.PercentEscaper
  langs:
  - java
  name: escape(String s)
  nameWithType: PercentEscaper.escape(String s)
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(String s)
  overload: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape*
  type: Method
  package: com.azure.cosmos.implementation.guava25.net
  summary: >-
    Returns the escaped form of a given literal string.


    If you are escaping input in arbitrary successive chunks, then it is not generally safe to use this method. If an input string ends with an unmatched high surrogate character, then this method will throw <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref>. You should ensure your input is valid [UTF-16][] before calling this method.


    **Note:** When implementing an escaper it is a good idea to override this method for efficiency by inlining the implementation of <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)" data-throw-if-not-resolved="false">#nextEscapeIndex(CharSequence, int, int)</xref> directly. Doing this for <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.net.PercentEscaper</xref> more than doubled the performance for unescaped strings (as measured by <xref uid="" data-throw-if-not-resolved="false">CharEscapersBenchmark</xref>).



    [UTF-16]: http://en.wikipedia.org/wiki/UTF-16
  syntax:
    content: public String escape(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  id: nextEscapeIndex(java.lang.CharSequence,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.net.PercentEscaper
  langs:
  - java
  name: nextEscapeIndex(CharSequence csq, int index, int end)
  nameWithType: PercentEscaper.nextEscapeIndex(CharSequence csq, int index, int end)
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex(CharSequence csq, int index, int end)
  overload: com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex*
  type: Method
  package: com.azure.cosmos.implementation.guava25.net
  summary: >-
    Scans a sub-sequence of characters from a given <xref uid="java.lang.CharSequence" data-throw-if-not-resolved="false">CharSequence</xref>, returning the index of the next character that requires escaping.


    **Note:** When implementing an escaper, it is a good idea to override this method for efficiency. The base class implementation determines successive Unicode code points and invokes <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape(int)" data-throw-if-not-resolved="false">#escape(int)</xref> for each of them. If the semantics of your escaper are such that code points in the supplementary range are either all escaped or all unescaped, this method can be implemented more efficiently using <xref uid="java.lang.CharSequence.charAt*" data-throw-if-not-resolved="false">CharSequence#charAt(int)</xref>.


    Note however that if your escaper does not escape characters in the supplementary range, you should either continue to validate the correctness of any surrogate characters encountered or provide a clear warning to users that your escaper does not validate its input.


    See <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.net.PercentEscaper</xref> for an example.
  syntax:
    content: protected int nextEscapeIndex(CharSequence csq, int index, int end)
    parameters:
    - id: csq
      type: java.lang.CharSequence
    - id: index
      type: int
    - id: end
      type: int
    return:
      type: int
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.PercentEscaper*
  name: PercentEscaper
  nameWithType: PercentEscaper.PercentEscaper
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.PercentEscaper
  package: com.azure.cosmos.implementation.guava25.net
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex*
  name: nextEscapeIndex
  nameWithType: PercentEscaper.nextEscapeIndex
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.nextEscapeIndex
  package: com.azure.cosmos.implementation.guava25.net
- uid: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape*
  name: escape
  nameWithType: PercentEscaper.escape
  fullName: com.azure.cosmos.implementation.guava25.net.PercentEscaper.escape
  package: com.azure.cosmos.implementation.guava25.net
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
  name: UnicodeEscaper
  nameWithType: UnicodeEscaper
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
  name: UnicodeEscaper.nextEscapeIndex(CharSequence,int,int)
  nameWithType: UnicodeEscaper.nextEscapeIndex(CharSequence,int,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence,int,int)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
  name: UnicodeEscaper.escape(String)
  nameWithType: UnicodeEscaper.escape(String)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)
  name: UnicodeEscaper.escapeSlow(String,int)
  nameWithType: UnicodeEscaper.escapeSlow(String,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escapeSlow(java.lang.String,int)
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
  name: Escaper.asFunction()
  nameWithType: Escaper.asFunction()
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.asFunction()
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
  name: UnicodeEscaper.escape(int)
  nameWithType: UnicodeEscaper.escape(int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
- uid: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)
  name: UnicodeEscaper.codePointAt(CharSequence,int,int)
  nameWithType: UnicodeEscaper.codePointAt(CharSequence,int,int)
  fullName: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence,int,int)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
