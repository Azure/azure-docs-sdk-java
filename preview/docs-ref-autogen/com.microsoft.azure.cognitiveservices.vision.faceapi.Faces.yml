### YamlMime:JavaType
uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces"
fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces"
name: "Faces"
nameWithType: "Faces"
summary: "An instance of this class provides access to all the operations defined in Faces."
syntax: "public interface Faces"
methods:
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream()"
  name: "detectWithStream()"
  nameWithType: "Faces.detectWithStream()"
  summary: "Detect human faces in an image and returns face locations, and optionally with face<wbr>Ids, landmarks, and attributes."
  modifiers:
  - "abstract"
  syntax: "public abstract Faces.FacesDetectWithStreamDefinitionStages.WithImage detectWithStream()"
  desc: "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes."
  returns:
    description: "the first stage of the detectWithStream call"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesDetectWithStreamDefinitionStages.WithImage?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesDetectWithStreamDefinitionStages.WithImage&text=WithImage\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream(byte[],com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  name: "detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  nameWithType: "Faces.detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  summary: "Detect human faces in an image and returns face locations, and optionally with face<wbr>Ids, landmarks, and attributes."
  modifiers:
  - "abstract"
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectWithStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter&text=DetectWithStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract List<DetectedFace> detectWithStream(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  desc: "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes."
  returns:
    description: "the List&lt;DetectedFace&gt; object if successful."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStreamAsync(byte[],com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  name: "detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  nameWithType: "Faces.detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  summary: "Detect human faces in an image and returns face locations, and optionally with face<wbr>Ids, landmarks, and attributes."
  modifiers:
  - "abstract"
  parameters:
  - description: "An image stream."
    name: "image"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectWithStreamOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithStreamOptionalParameter&text=DetectWithStreamOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<List<DetectedFace>> detectWithStreamAsync(byte[] image, DetectWithStreamOptionalParameter detectWithStreamOptionalParameter)"
  desc: "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes."
  returns:
    description: "the observable to the List&lt;DetectedFace&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl()"
  name: "detectWithUrl()"
  nameWithType: "Faces.detectWithUrl()"
  summary: "Detect human faces in an image and returns face locations, and optionally with face<wbr>Ids, landmarks, and attributes."
  modifiers:
  - "abstract"
  syntax: "public abstract Faces.FacesDetectWithUrlDefinitionStages.WithUrl detectWithUrl()"
  desc: "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes."
  returns:
    description: "the first stage of the detectWithUrl call"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesDetectWithUrlDefinitionStages.WithUrl?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesDetectWithUrlDefinitionStages.WithUrl&text=WithUrl\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl(java.lang.String,com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  name: "detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  nameWithType: "Faces.detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  summary: "Detect human faces in an image and returns face locations, and optionally with face<wbr>Ids, landmarks, and attributes."
  modifiers:
  - "abstract"
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectWithUrlOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter&text=DetectWithUrlOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract List<DetectedFace> detectWithUrl(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  desc: "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes."
  returns:
    description: "the List&lt;DetectedFace&gt; object if successful."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrlAsync(java.lang.String,com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  name: "detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  nameWithType: "Faces.detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  summary: "Detect human faces in an image and returns face locations, and optionally with face<wbr>Ids, landmarks, and attributes."
  modifiers:
  - "abstract"
  parameters:
  - description: "Publicly reachable URL of an image."
    name: "url"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "detectWithUrlOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectWithUrlOptionalParameter&text=DetectWithUrlOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<List<DetectedFace>> detectWithUrlAsync(String url, DetectWithUrlOptionalParameter detectWithUrlOptionalParameter)"
  desc: "Detect human faces in an image and returns face locations, and optionally with faceIds, landmarks, and attributes."
  returns:
    description: "the observable to the List&lt;DetectedFace&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.DetectedFace&text=DetectedFace\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar()"
  name: "findSimilar()"
  nameWithType: "Faces.findSimilar()"
  summary: "Given query face's face<wbr>Id, find the similar-looking faces from a face<wbr>Id array or a face<wbr>List<wbr>Id."
  modifiers:
  - "abstract"
  syntax: "public abstract Faces.FacesFindSimilarDefinitionStages.WithFaceId findSimilar()"
  desc: "Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId."
  returns:
    description: "the first stage of the findSimilar call"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesFindSimilarDefinitionStages.WithFaceId?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesFindSimilarDefinitionStages.WithFaceId&text=WithFaceId\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar(java.util.UUID,com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  name: "findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  nameWithType: "Faces.findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  summary: "Given query face's face<wbr>Id, find the similar-looking faces from a face<wbr>Id array or a face<wbr>List<wbr>Id."
  modifiers:
  - "abstract"
  parameters:
  - description: "FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this\n   faceId is not persisted and will expire 24 hours after the detection call."
    name: "faceId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "findSimilarOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter&text=FindSimilarOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract List<SimilarFace> findSimilar(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  desc: "Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId."
  returns:
    description: "the List&lt;SimilarFace&gt; object if successful."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace&text=SimilarFace\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilarAsync(java.util.UUID,com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  name: "findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  nameWithType: "Faces.findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  summary: "Given query face's face<wbr>Id, find the similar-looking faces from a face<wbr>Id array or a face<wbr>List<wbr>Id."
  modifiers:
  - "abstract"
  parameters:
  - description: "FaceId of the query face. User needs to call Face - Detect first to get a valid faceId. Note that this\n   faceId is not persisted and will expire 24 hours after the detection call."
    name: "faceId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "findSimilarOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.FindSimilarOptionalParameter&text=FindSimilarOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<List<SimilarFace>> findSimilarAsync(UUID faceId, FindSimilarOptionalParameter findSimilarOptionalParameter)"
  desc: "Given query face's faceId, find the similar-looking faces from a faceId array or a faceListId."
  returns:
    description: "the observable to the List&lt;SimilarFace&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.SimilarFace&text=SimilarFace\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.group(java.util.List<java.util.UUID>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.group(List<UUID> faceIds)"
  name: "group(List<UUID> faceIds)"
  nameWithType: "Faces.group(List<UUID> faceIds)"
  summary: "Divide candidate faces into groups based on face similarity."
  modifiers:
  - "abstract"
  parameters:
  - description: "Array of candidate faceId created by Face - Detect. The maximum is 1000 faces."
    name: "faceIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract GroupResult group(List<UUID> faceIds)"
  desc: "Divide candidate faces into groups based on face similarity."
  returns:
    description: "the GroupResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult&text=GroupResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.groupAsync(java.util.List<java.util.UUID>)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.groupAsync(List<UUID> faceIds)"
  name: "groupAsync(List<UUID> faceIds)"
  nameWithType: "Faces.groupAsync(List<UUID> faceIds)"
  summary: "Divide candidate faces into groups based on face similarity."
  modifiers:
  - "abstract"
  parameters:
  - description: "Array of candidate faceId created by Face - Detect. The maximum is 1000 faces."
    name: "faceIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public abstract Observable<GroupResult> groupAsync(List<UUID> faceIds)"
  desc: "Divide candidate faces into groups based on face similarity."
  returns:
    description: "the observable to the GroupResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.GroupResult&text=GroupResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify()"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify()"
  name: "identify()"
  nameWithType: "Faces.identify()"
  summary: "Identify unknown faces from a person group."
  modifiers:
  - "abstract"
  syntax: "public abstract Faces.FacesIdentifyDefinitionStages.WithPersonGroupId identify()"
  desc: "Identify unknown faces from a person group."
  returns:
    description: "the first stage of the identify call"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesIdentifyDefinitionStages.WithPersonGroupId?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.FacesIdentifyDefinitionStages.WithPersonGroupId&text=WithPersonGroupId\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify(java.lang.String,java.util.List<java.util.UUID>,com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  name: "identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  nameWithType: "Faces.identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  summary: "Identify unknown faces from a person group."
  modifiers:
  - "abstract"
  parameters:
  - description: "PersonGroupId of the target person group, created by PersonGroups.Create."
    name: "personGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently.\n   The valid number of faceIds is between [1, 10]."
    name: "faceIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "identifyOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter&text=IdentifyOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract List<IdentifyResult> identify(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  desc: "Identify unknown faces from a person group."
  returns:
    description: "the List&lt;IdentifyResult&gt; object if successful."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult&text=IdentifyResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identifyAsync(java.lang.String,java.util.List<java.util.UUID>,com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  name: "identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  nameWithType: "Faces.identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  summary: "Identify unknown faces from a person group."
  modifiers:
  - "abstract"
  parameters:
  - description: "PersonGroupId of the target person group, created by PersonGroups.Create."
    name: "personGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Array of query faces faceIds, created by the Face - Detect. Each of the faces are identified independently.\n   The valid number of faceIds is between [1, 10]."
    name: "faceIds"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "identifyOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyOptionalParameter&text=IdentifyOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<List<IdentifyResult>> identifyAsync(String personGroupId, List<UUID> faceIds, IdentifyOptionalParameter identifyOptionalParameter)"
  desc: "Identify unknown faces from a person group."
  returns:
    description: "the observable to the List&lt;IdentifyResult&gt; object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.IdentifyResult&text=IdentifyResult\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFace(java.util.UUID,java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFace(UUID faceId1, UUID faceId2)"
  name: "verifyFaceToFace(UUID faceId1, UUID faceId2)"
  nameWithType: "Faces.verifyFaceToFace(UUID faceId1, UUID faceId2)"
  summary: "Verify whether two faces belong to a same person or whether one face belongs to a person."
  modifiers:
  - "abstract"
  parameters:
  - description: "FaceId of the first face, comes from Face - Detect."
    name: "faceId1"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "FaceId of the second face, comes from Face - Detect."
    name: "faceId2"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract VerifyResult verifyFaceToFace(UUID faceId1, UUID faceId2)"
  desc: "Verify whether two faces belong to a same person or whether one face belongs to a person."
  returns:
    description: "the VerifyResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFaceAsync(java.util.UUID,java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)"
  name: "verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)"
  nameWithType: "Faces.verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)"
  summary: "Verify whether two faces belong to a same person or whether one face belongs to a person."
  modifiers:
  - "abstract"
  parameters:
  - description: "FaceId of the first face, comes from Face - Detect."
    name: "faceId1"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "FaceId of the second face, comes from Face - Detect."
    name: "faceId2"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<VerifyResult> verifyFaceToFaceAsync(UUID faceId1, UUID faceId2)"
  desc: "Verify whether two faces belong to a same person or whether one face belongs to a person."
  returns:
    description: "the observable to the VerifyResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPerson(java.util.UUID,java.lang.String,java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)"
  name: "verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)"
  nameWithType: "Faces.verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)"
  summary: "Verify whether two faces belong to a same person."
  modifiers:
  - "abstract"
  parameters:
  - description: "FaceId the face, comes from Face - Detect."
    name: "faceId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Using existing personGroupId and personId for fast loading a specified person. personGroupId is\n  created in Person Groups.Create."
    name: "personGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specify a certain person in a person group. personId is created in Persons.Create."
    name: "personId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract VerifyResult verifyFaceToPerson(UUID faceId, String personGroupId, UUID personId)"
  desc: "Verify whether two faces belong to a same person. Compares a face Id with a Person Id."
  returns:
    description: "the VerifyResult object if successful."
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPersonAsync(java.util.UUID,java.lang.String,java.util.UUID)"
  fullName: "com.microsoft.azure.cognitiveservices.vision.faceapi.Faces.verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)"
  name: "verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)"
  nameWithType: "Faces.verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)"
  summary: "Verify whether two faces belong to a same person."
  modifiers:
  - "abstract"
  parameters:
  - description: "FaceId the face, comes from Face - Detect."
    name: "faceId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  - description: "Using existing personGroupId and personId for fast loading a specified person. personGroupId is\n  created in Person Groups.Create."
    name: "personGroupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specify a certain person in a person group. personId is created in Persons.Create."
    name: "personId"
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract Observable<VerifyResult> verifyFaceToPersonAsync(UUID faceId, String personGroupId, UUID personId)"
  desc: "Verify whether two faces belong to a same person. Compares a face Id with a Person Id."
  returns:
    description: "the observable to the VerifyResult object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult?alt=com.microsoft.azure.cognitiveservices.vision.faceapi.models.VerifyResult&text=VerifyResult\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "interface"
desc: "An instance of this class provides access to all the operations defined in Faces."
metadata: {}
package: "com.microsoft.azure.cognitiveservices.vision.faceapi"
artifact: com.microsoft.azure.cognitiveservices:azure-cognitiveservices-faceapi:1.0.1-beta
