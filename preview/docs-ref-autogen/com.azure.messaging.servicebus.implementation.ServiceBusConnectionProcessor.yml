### YamlMime:ManagedReference
items:
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
  id: "ServiceBusConnectionProcessor"
  parent: "com.azure.messaging.servicebus.implementation"
  children:
  - "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.ServiceBusConnectionProcessor(java.lang.String,com.azure.core.amqp.AmqpRetryOptions)"
  - "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getFullyQualifiedNamespace()"
  - "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getRetryOptions()"
  langs:
  - "java"
  name: "ServiceBusConnectionProcessor"
  nameWithType: "ServiceBusConnectionProcessor"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
  type: "Class"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Responsible for emitting an active <xref uid=\"com.azure.messaging.servicebus.implementation.ServiceBusAmqpConnection\" data-throw-if-not-resolved=\"false\">ServiceBusAmqpConnection</xref> to downstream subscribers. Fetches a new connection when the existing connection closes."
  syntax:
    content: "public class ServiceBusConnectionProcessor extends AmqpChannelProcessor<ServiceBusAmqpConnection>"
  inheritance:
  - "java.lang.Object"
  - "reactor.core.publisher.Mono"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor"
  inheritedMembers:
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.dispose()"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.isDisposed()"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.onComplete()"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.onError(java.lang.Throwable)"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.onNext(T)"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.onSubscribe(org.reactivestreams.Subscription)"
  - "com.azure.core.amqp.implementation.AmqpChannelProcessor.subscribe(reactor.core.CoreSubscriber<? super T>)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "reactor.core.publisher.Mono.<E>cast(java.lang.Class<E>)"
  - "reactor.core.publisher.Mono.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)"
  - "reactor.core.publisher.Mono.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
  - "reactor.core.publisher.Mono.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
  - "reactor.core.publisher.Mono.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends reactor.core.publisher.Mono<? extends T>>)"
  - "reactor.core.publisher.Mono.<E>onErrorReturn(java.lang.Class<E>,T)"
  - "reactor.core.publisher.Mono.<E>subscribeWith(E)"
  - "reactor.core.publisher.Mono.<I>fromDirect(org.reactivestreams.Publisher<? extends I>)"
  - "reactor.core.publisher.Mono.<P>as(java.util.function.Function<? super reactor.core.publisher.Mono<T>,P>)"
  - "reactor.core.publisher.Mono.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)"
  - "reactor.core.publisher.Mono.<R>flatMap(java.util.function.Function<? super T,? extends reactor.core.publisher.Mono<? extends R>>)"
  - "reactor.core.publisher.Mono.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)"
  - "reactor.core.publisher.Mono.<R>flatMapMany(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)"
  - "reactor.core.publisher.Mono.<R>flatMapMany(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)"
  - "reactor.core.publisher.Mono.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)"
  - "reactor.core.publisher.Mono.<R>map(java.util.function.Function<? super T,? extends R>)"
  - "reactor.core.publisher.Mono.<R>publish(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends reactor.core.publisher.Mono<? extends R>>)"
  - "reactor.core.publisher.Mono.<R>zip(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>,java.util.function.Function<? super java.lang.Object[],? extends R>)"
  - "reactor.core.publisher.Mono.<R>zip(java.util.function.Function<? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono<?>...)"
  - "reactor.core.publisher.Mono.<R>zipDelayError(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>,java.util.function.Function<? super java.lang.Object[],? extends R>)"
  - "reactor.core.publisher.Mono.<R>zipDelayError(java.util.function.Function<? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono<?>...)"
  - "reactor.core.publisher.Mono.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Consumer<? super D>)"
  - "reactor.core.publisher.Mono.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Consumer<? super D>,boolean)"
  - "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.<T1,T2,O>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>,reactor.core.publisher.Mono<? extends T8>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>,reactor.core.publisher.Mono<? extends T8>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3,T4>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>)"
  - "reactor.core.publisher.Mono.<T1,T2,T3>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>)"
  - "reactor.core.publisher.Mono.<T1,T2>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>)"
  - "reactor.core.publisher.Mono.<T1,T2>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>)"
  - "reactor.core.publisher.Mono.<T2,O>zipWhen(java.util.function.Function<T,reactor.core.publisher.Mono<? extends T2>>,java.util.function.BiFunction<T,T2,O>)"
  - "reactor.core.publisher.Mono.<T2,O>zipWith(reactor.core.publisher.Mono<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends O>)"
  - "reactor.core.publisher.Mono.<T2>zipWhen(java.util.function.Function<T,reactor.core.publisher.Mono<? extends T2>>)"
  - "reactor.core.publisher.Mono.<T2>zipWith(reactor.core.publisher.Mono<? extends T2>)"
  - "reactor.core.publisher.Mono.<T>create(java.util.function.Consumer<reactor.core.publisher.MonoSink<T>>)"
  - "reactor.core.publisher.Mono.<T>defer(java.util.function.Supplier<? extends reactor.core.publisher.Mono<? extends T>>)"
  - "reactor.core.publisher.Mono.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends reactor.core.publisher.Mono<? extends T>>)"
  - "reactor.core.publisher.Mono.<T>doOnSignal(reactor.core.publisher.Mono<T>,java.util.function.Consumer<? super org.reactivestreams.Subscription>,java.util.function.Consumer<? super T>,java.util.function.LongConsumer,java.lang.Runnable)"
  - "reactor.core.publisher.Mono.<T>doOnTerminalSignal(reactor.core.publisher.Mono<T>,java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.<T>empty()"
  - "reactor.core.publisher.Mono.<T>empty(org.reactivestreams.Publisher<T>)"
  - "reactor.core.publisher.Mono.<T>equalsBiPredicate()"
  - "reactor.core.publisher.Mono.<T>error(java.lang.Throwable)"
  - "reactor.core.publisher.Mono.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.<T>first(java.lang.Iterable<? extends reactor.core.publisher.Mono<? extends T>>)"
  - "reactor.core.publisher.Mono.<T>first(reactor.core.publisher.Mono<? extends T>...)"
  - "reactor.core.publisher.Mono.<T>from(org.reactivestreams.Publisher<? extends T>)"
  - "reactor.core.publisher.Mono.<T>fromCallable(java.util.concurrent.Callable<? extends T>)"
  - "reactor.core.publisher.Mono.<T>fromCompletionStage(java.util.concurrent.CompletionStage<? extends T>)"
  - "reactor.core.publisher.Mono.<T>fromCompletionStage(java.util.function.Supplier<? extends java.util.concurrent.CompletionStage<? extends T>>)"
  - "reactor.core.publisher.Mono.<T>fromFuture(java.util.concurrent.CompletableFuture<? extends T>)"
  - "reactor.core.publisher.Mono.<T>fromFuture(java.util.function.Supplier<? extends java.util.concurrent.CompletableFuture<? extends T>>)"
  - "reactor.core.publisher.Mono.<T>fromRunnable(java.lang.Runnable)"
  - "reactor.core.publisher.Mono.<T>fromSupplier(java.util.function.Supplier<? extends T>)"
  - "reactor.core.publisher.Mono.<T>ignoreElements(org.reactivestreams.Publisher<T>)"
  - "reactor.core.publisher.Mono.<T>just(T)"
  - "reactor.core.publisher.Mono.<T>justOrEmpty(T)"
  - "reactor.core.publisher.Mono.<T>justOrEmpty(java.util.Optional<? extends T>)"
  - "reactor.core.publisher.Mono.<T>never()"
  - "reactor.core.publisher.Mono.<T>onAssembly(reactor.core.publisher.Mono<T>)"
  - "reactor.core.publisher.Mono.<T>onLastAssembly(reactor.core.publisher.Mono<T>)"
  - "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>)"
  - "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>,java.util.function.BiPredicate<? super T,? super T>)"
  - "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>,java.util.function.BiPredicate<? super T,? super T>,int)"
  - "reactor.core.publisher.Mono.<U>delaySubscription(org.reactivestreams.Publisher<U>)"
  - "reactor.core.publisher.Mono.<U>ofType(java.lang.Class<U>)"
  - "reactor.core.publisher.Mono.<U>timeout(org.reactivestreams.Publisher<U>)"
  - "reactor.core.publisher.Mono.<U>timeout(org.reactivestreams.Publisher<U>,reactor.core.publisher.Mono<? extends T>)"
  - "reactor.core.publisher.Mono.<V>compose(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
  - "reactor.core.publisher.Mono.<V>then(reactor.core.publisher.Mono<V>)"
  - "reactor.core.publisher.Mono.<V>thenMany(org.reactivestreams.Publisher<V>)"
  - "reactor.core.publisher.Mono.<V>thenReturn(V)"
  - "reactor.core.publisher.Mono.<V>transform(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
  - "reactor.core.publisher.Mono.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
  - "reactor.core.publisher.Mono.<X>dematerialize()"
  - "reactor.core.publisher.Mono.and(org.reactivestreams.Publisher<?>)"
  - "reactor.core.publisher.Mono.block()"
  - "reactor.core.publisher.Mono.block(java.time.Duration)"
  - "reactor.core.publisher.Mono.blockOptional()"
  - "reactor.core.publisher.Mono.blockOptional(java.time.Duration)"
  - "reactor.core.publisher.Mono.cache()"
  - "reactor.core.publisher.Mono.cache(java.time.Duration)"
  - "reactor.core.publisher.Mono.cache(java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.cache(java.util.function.Function<? super T,java.time.Duration>,java.util.function.Function<java.lang.Throwable,java.time.Duration>,java.util.function.Supplier<java.time.Duration>)"
  - "reactor.core.publisher.Mono.cancelOn(reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.checkpoint()"
  - "reactor.core.publisher.Mono.checkpoint(java.lang.String)"
  - "reactor.core.publisher.Mono.checkpoint(java.lang.String,boolean)"
  - "reactor.core.publisher.Mono.concatWith(org.reactivestreams.Publisher<? extends T>)"
  - "reactor.core.publisher.Mono.defaultIfEmpty(T)"
  - "reactor.core.publisher.Mono.delay(java.time.Duration)"
  - "reactor.core.publisher.Mono.delay(java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.delayElement(java.time.Duration)"
  - "reactor.core.publisher.Mono.delayElement(java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.delaySubscription(java.time.Duration)"
  - "reactor.core.publisher.Mono.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.doAfterSuccessOrError(java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.doAfterTerminate(java.lang.Runnable)"
  - "reactor.core.publisher.Mono.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)"
  - "reactor.core.publisher.Mono.doFirst(java.lang.Runnable)"
  - "reactor.core.publisher.Mono.doOnCancel(java.lang.Runnable)"
  - "reactor.core.publisher.Mono.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)"
  - "reactor.core.publisher.Mono.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.doOnNext(java.util.function.Consumer<? super T>)"
  - "reactor.core.publisher.Mono.doOnRequest(java.util.function.LongConsumer)"
  - "reactor.core.publisher.Mono.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
  - "reactor.core.publisher.Mono.doOnSuccess(java.util.function.Consumer<? super T>)"
  - "reactor.core.publisher.Mono.doOnSuccessOrError(java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.doOnTerminate(java.lang.Runnable)"
  - "reactor.core.publisher.Mono.elapsed()"
  - "reactor.core.publisher.Mono.elapsed(reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
  - "reactor.core.publisher.Mono.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
  - "reactor.core.publisher.Mono.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
  - "reactor.core.publisher.Mono.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
  - "reactor.core.publisher.Mono.filter(java.util.function.Predicate<? super T>)"
  - "reactor.core.publisher.Mono.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)"
  - "reactor.core.publisher.Mono.flux()"
  - "reactor.core.publisher.Mono.hasElement()"
  - "reactor.core.publisher.Mono.hide()"
  - "reactor.core.publisher.Mono.ignoreElement()"
  - "reactor.core.publisher.Mono.log()"
  - "reactor.core.publisher.Mono.log(java.lang.String)"
  - "reactor.core.publisher.Mono.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
  - "reactor.core.publisher.Mono.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)"
  - "reactor.core.publisher.Mono.log(reactor.util.Logger)"
  - "reactor.core.publisher.Mono.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
  - "reactor.core.publisher.Mono.materialize()"
  - "reactor.core.publisher.Mono.mergeWith(org.reactivestreams.Publisher<? extends T>)"
  - "reactor.core.publisher.Mono.metrics()"
  - "reactor.core.publisher.Mono.name(java.lang.String)"
  - "reactor.core.publisher.Mono.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
  - "reactor.core.publisher.Mono.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends reactor.core.publisher.Mono<? extends T>>)"
  - "reactor.core.publisher.Mono.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends reactor.core.publisher.Mono<? extends T>>)"
  - "reactor.core.publisher.Mono.onErrorReturn(T)"
  - "reactor.core.publisher.Mono.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)"
  - "reactor.core.publisher.Mono.onErrorStop()"
  - "reactor.core.publisher.Mono.onTerminateDetach()"
  - "reactor.core.publisher.Mono.or(reactor.core.publisher.Mono<? extends T>)"
  - "reactor.core.publisher.Mono.publishOn(reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.repeat()"
  - "reactor.core.publisher.Mono.repeat(java.util.function.BooleanSupplier)"
  - "reactor.core.publisher.Mono.repeat(long)"
  - "reactor.core.publisher.Mono.repeat(long,java.util.function.BooleanSupplier)"
  - "reactor.core.publisher.Mono.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.repeatWhenEmpty(int,java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.repeatWhenEmpty(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.retry()"
  - "reactor.core.publisher.Mono.retry(java.util.function.Predicate<? super java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.retry(long)"
  - "reactor.core.publisher.Mono.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration)"
  - "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration)"
  - "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,double)"
  - "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.single()"
  - "reactor.core.publisher.Mono.subscribe()"
  - "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>)"
  - "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)"
  - "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)"
  - "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
  - "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)"
  - "reactor.core.publisher.Mono.subscribe(org.reactivestreams.Subscriber<? super T>)"
  - "reactor.core.publisher.Mono.subscribeOn(reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.subscriberContext()"
  - "reactor.core.publisher.Mono.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)"
  - "reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)"
  - "reactor.core.publisher.Mono.switchIfEmpty(reactor.core.publisher.Mono<? extends T>)"
  - "reactor.core.publisher.Mono.tag(java.lang.String,java.lang.String)"
  - "reactor.core.publisher.Mono.take(java.time.Duration)"
  - "reactor.core.publisher.Mono.take(java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.takeUntilOther(org.reactivestreams.Publisher<?>)"
  - "reactor.core.publisher.Mono.then()"
  - "reactor.core.publisher.Mono.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)"
  - "reactor.core.publisher.Mono.timeout(java.time.Duration)"
  - "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono<? extends T>)"
  - "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono<? extends T>,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.timestamp()"
  - "reactor.core.publisher.Mono.timestamp(reactor.core.scheduler.Scheduler)"
  - "reactor.core.publisher.Mono.toFuture()"
  - "reactor.core.publisher.Mono.toProcessor()"
  - "reactor.core.publisher.Mono.toString()"
  - "reactor.core.publisher.Mono.when(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.when(org.reactivestreams.Publisher<?>...)"
  - "reactor.core.publisher.Mono.whenDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>)"
  - "reactor.core.publisher.Mono.whenDelayError(org.reactivestreams.Publisher<?>...)"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.ServiceBusConnectionProcessor(java.lang.String,com.azure.core.amqp.AmqpRetryOptions)"
  id: "ServiceBusConnectionProcessor(java.lang.String,com.azure.core.amqp.AmqpRetryOptions)"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
  langs:
  - "java"
  name: "ServiceBusConnectionProcessor(String fullyQualifiedNamespace, AmqpRetryOptions retryOptions)"
  nameWithType: "ServiceBusConnectionProcessor.ServiceBusConnectionProcessor(String fullyQualifiedNamespace, AmqpRetryOptions retryOptions)"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.ServiceBusConnectionProcessor(String fullyQualifiedNamespace, AmqpRetryOptions retryOptions)"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.ServiceBusConnectionProcessor*"
  type: "Constructor"
  package: "com.azure.messaging.servicebus.implementation"
  syntax:
    content: "public ServiceBusConnectionProcessor(String fullyQualifiedNamespace, AmqpRetryOptions retryOptions)"
    parameters:
    - id: "fullyQualifiedNamespace"
      type: "java.lang.String"
    - id: "retryOptions"
      type: "com.azure.core.amqp.AmqpRetryOptions"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getFullyQualifiedNamespace()"
  id: "getFullyQualifiedNamespace()"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
  langs:
  - "java"
  name: "getFullyQualifiedNamespace()"
  nameWithType: "ServiceBusConnectionProcessor.getFullyQualifiedNamespace()"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getFullyQualifiedNamespace()"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getFullyQualifiedNamespace*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Gets the fully qualified namespace for the connection."
  syntax:
    content: "public String getFullyQualifiedNamespace()"
    return:
      type: "java.lang.String"
      description: "The fully qualified namespace this is connection."
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getRetryOptions()"
  id: "getRetryOptions()"
  parent: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor"
  langs:
  - "java"
  name: "getRetryOptions()"
  nameWithType: "ServiceBusConnectionProcessor.getRetryOptions()"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getRetryOptions()"
  overload: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getRetryOptions*"
  type: "Method"
  package: "com.azure.messaging.servicebus.implementation"
  summary: "Gets the retry options associated with the Service Bus connection."
  syntax:
    content: "public AmqpRetryOptions getRetryOptions()"
    return:
      type: "com.azure.core.amqp.AmqpRetryOptions"
      description: "The retry options associated with the Service Bus connection."
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.amqp.AmqpRetryOptions"
  spec.java:
  - uid: "com.azure.core.amqp.AmqpRetryOptions"
    name: "AmqpRetryOptions"
    fullName: "com.azure.core.amqp.AmqpRetryOptions"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.ServiceBusConnectionProcessor*"
  name: "ServiceBusConnectionProcessor"
  nameWithType: "ServiceBusConnectionProcessor.ServiceBusConnectionProcessor"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.ServiceBusConnectionProcessor"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getFullyQualifiedNamespace*"
  name: "getFullyQualifiedNamespace"
  nameWithType: "ServiceBusConnectionProcessor.getFullyQualifiedNamespace"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getFullyQualifiedNamespace"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getRetryOptions*"
  name: "getRetryOptions"
  nameWithType: "ServiceBusConnectionProcessor.getRetryOptions"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusConnectionProcessor.getRetryOptions"
  package: "com.azure.messaging.servicebus.implementation"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor<com.azure.messaging.servicebus.implementation.ServiceBusAmqpConnection>"
  name: "AmqpChannelProcessor<ServiceBusAmqpConnection>"
  nameWithType: "AmqpChannelProcessor<ServiceBusAmqpConnection>"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor<com.azure.messaging.servicebus.implementation.ServiceBusAmqpConnection>"
- uid: "reactor.core.publisher.Mono.<T>first(java.lang.Iterable<? extends reactor.core.publisher.Mono<? extends T>>)"
  name: "Mono.<T>first(Iterable<? extends Mono<? extends T>>)"
  nameWithType: "Mono.<T>first(Iterable<? extends Mono<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.<T>first(java.lang.Iterable<? extends reactor.core.publisher.Mono<? extends T>>)"
- uid: "reactor.core.publisher.Mono.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)"
  name: "Mono.doOnError(Consumer<? super Throwable>)"
  nameWithType: "Mono.doOnError(Consumer<? super Throwable>)"
  fullName: "reactor.core.publisher.Mono.doOnError(java.util.function.Consumer<? super java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.metrics()"
  name: "Mono.metrics()"
  nameWithType: "Mono.metrics()"
  fullName: "reactor.core.publisher.Mono.metrics()"
- uid: "reactor.core.publisher.Mono.delayElement(java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.delayElement(Duration,Scheduler)"
  nameWithType: "Mono.delayElement(Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.delayElement(java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)"
  name: "Mono.doOnEach(Consumer<? super Signal<T>>)"
  nameWithType: "Mono.doOnEach(Consumer<? super Signal<T>>)"
  fullName: "reactor.core.publisher.Mono.doOnEach(java.util.function.Consumer<? super reactor.core.publisher.Signal<T>>)"
- uid: "reactor.core.publisher.Mono.doOnTerminate(java.lang.Runnable)"
  name: "Mono.doOnTerminate(Runnable)"
  nameWithType: "Mono.doOnTerminate(Runnable)"
  fullName: "reactor.core.publisher.Mono.doOnTerminate(java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.checkpoint()"
  name: "Mono.checkpoint()"
  nameWithType: "Mono.checkpoint()"
  fullName: "reactor.core.publisher.Mono.checkpoint()"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>)"
  name: "Mono.<T1,T2,T3,T4,T5,T6,T7>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5,T6,T7>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>)"
- uid: "reactor.core.publisher.Mono.<T>justOrEmpty(java.util.Optional<? extends T>)"
  name: "Mono.<T>justOrEmpty(Optional<? extends T>)"
  nameWithType: "Mono.<T>justOrEmpty(Optional<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>justOrEmpty(java.util.Optional<? extends T>)"
- uid: "reactor.core.publisher.Mono.<T>error(java.lang.Throwable)"
  name: "Mono.<T>error(Throwable)"
  nameWithType: "Mono.<T>error(Throwable)"
  fullName: "reactor.core.publisher.Mono.<T>error(java.lang.Throwable)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>)"
  name: "Mono.<T1,T2,T3,T4,T5>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>)"
- uid: "reactor.core.publisher.Mono.<T>create(java.util.function.Consumer<reactor.core.publisher.MonoSink<T>>)"
  name: "Mono.<T>create(Consumer<MonoSink<T>>)"
  nameWithType: "Mono.<T>create(Consumer<MonoSink<T>>)"
  fullName: "reactor.core.publisher.Mono.<T>create(java.util.function.Consumer<reactor.core.publisher.MonoSink<T>>)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>)"
  name: "Mono.<T1,T2,T3>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>)"
  nameWithType: "Mono.<T1,T2,T3>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "reactor.core.publisher.Mono.<P>as(java.util.function.Function<? super reactor.core.publisher.Mono<T>,P>)"
  name: "Mono.<P>as(Function<? super Mono<T>,P>)"
  nameWithType: "Mono.<P>as(Function<? super Mono<T>,P>)"
  fullName: "reactor.core.publisher.Mono.<P>as(java.util.function.Function<? super reactor.core.publisher.Mono<T>,P>)"
- uid: "reactor.core.publisher.Mono.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
  name: "Mono.<V>transformDeferred(Function<? super Mono<T>,? extends Publisher<V>>)"
  nameWithType: "Mono.<V>transformDeferred(Function<? super Mono<T>,? extends Publisher<V>>)"
  fullName: "reactor.core.publisher.Mono.<V>transformDeferred(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
- uid: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.timeout(Duration,Scheduler)"
  nameWithType: "Mono.timeout(Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>)"
  nameWithType: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>,reactor.core.publisher.Mono<? extends T8>)"
  name: "Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>,Mono<? extends T8>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>,Mono<? extends T8>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>,reactor.core.publisher.Mono<? extends T8>)"
- uid: "reactor.core.publisher.Mono.repeat()"
  name: "Mono.repeat()"
  nameWithType: "Mono.repeat()"
  fullName: "reactor.core.publisher.Mono.repeat()"
- uid: "reactor.core.publisher.Mono.<T>fromRunnable(java.lang.Runnable)"
  name: "Mono.<T>fromRunnable(Runnable)"
  nameWithType: "Mono.<T>fromRunnable(Runnable)"
  fullName: "reactor.core.publisher.Mono.<T>fromRunnable(java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.hide()"
  name: "Mono.hide()"
  nameWithType: "Mono.hide()"
  fullName: "reactor.core.publisher.Mono.hide()"
- uid: "reactor.core.publisher.Mono.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)"
  name: "Mono.filterWhen(Function<? super T,? extends Publisher<Boolean>>)"
  nameWithType: "Mono.filterWhen(Function<? super T,? extends Publisher<Boolean>>)"
  fullName: "reactor.core.publisher.Mono.filterWhen(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<java.lang.Boolean>>)"
- uid: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration)"
  name: "Mono.retryBackoff(long,Duration)"
  nameWithType: "Mono.retryBackoff(long,Duration)"
  fullName: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration)"
- uid: "reactor.core.publisher.Mono.<U>delaySubscription(org.reactivestreams.Publisher<U>)"
  name: "Mono.<U>delaySubscription(Publisher<U>)"
  nameWithType: "Mono.<U>delaySubscription(Publisher<U>)"
  fullName: "reactor.core.publisher.Mono.<U>delaySubscription(org.reactivestreams.Publisher<U>)"
- uid: "reactor.core.publisher.Mono.or(reactor.core.publisher.Mono<? extends T>)"
  name: "Mono.or(Mono<? extends T>)"
  nameWithType: "Mono.or(Mono<? extends T>)"
  fullName: "reactor.core.publisher.Mono.or(reactor.core.publisher.Mono<? extends T>)"
- uid: "reactor.core.publisher.Mono.<E>onErrorReturn(java.lang.Class<E>,T)"
  name: "Mono.<E>onErrorReturn(Class<E>,T)"
  nameWithType: "Mono.<E>onErrorReturn(Class<E>,T)"
  fullName: "reactor.core.publisher.Mono.<E>onErrorReturn(java.lang.Class<E>,T)"
- uid: "reactor.core.publisher.Mono.<U>ofType(java.lang.Class<U>)"
  name: "Mono.<U>ofType(Class<U>)"
  nameWithType: "Mono.<U>ofType(Class<U>)"
  fullName: "reactor.core.publisher.Mono.<U>ofType(java.lang.Class<U>)"
- uid: "reactor.core.publisher.Mono.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.delayUntil(Function<? super T,? extends Publisher<?>>)"
  nameWithType: "Mono.delayUntil(Function<? super T,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.delayUntil(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<?>>)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.dispose()"
  name: "AmqpChannelProcessor.dispose()"
  nameWithType: "AmqpChannelProcessor.dispose()"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.dispose()"
- uid: "reactor.core.publisher.Mono.<R>flatMapMany(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)"
  name: "Mono.<R>flatMapMany(Function<? super T,? extends Publisher<? extends R>>,Function<? super Throwable,? extends Publisher<? extends R>>,Supplier<? extends Publisher<? extends R>>)"
  nameWithType: "Mono.<R>flatMapMany(Function<? super T,? extends Publisher<? extends R>>,Function<? super Throwable,? extends Publisher<? extends R>>,Supplier<? extends Publisher<? extends R>>)"
  fullName: "reactor.core.publisher.Mono.<R>flatMapMany(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Function<? super java.lang.Throwable,? extends org.reactivestreams.Publisher<? extends R>>,java.util.function.Supplier<? extends org.reactivestreams.Publisher<? extends R>>)"
- uid: "reactor.core.publisher.Mono.mergeWith(org.reactivestreams.Publisher<? extends T>)"
  name: "Mono.mergeWith(Publisher<? extends T>)"
  nameWithType: "Mono.mergeWith(Publisher<? extends T>)"
  fullName: "reactor.core.publisher.Mono.mergeWith(org.reactivestreams.Publisher<? extends T>)"
- uid: "reactor.core.publisher.Mono.whenDelayError(org.reactivestreams.Publisher<?>...)"
  name: "Mono.whenDelayError(Publisher<?>...)"
  nameWithType: "Mono.whenDelayError(Publisher<?>...)"
  fullName: "reactor.core.publisher.Mono.whenDelayError(org.reactivestreams.Publisher<?>...)"
- uid: "reactor.core.publisher.Mono.delay(java.time.Duration)"
  name: "Mono.delay(Duration)"
  nameWithType: "Mono.delay(Duration)"
  fullName: "reactor.core.publisher.Mono.delay(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>)"
  name: "Mono.<T1,T2,T3,T4>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>)"
  nameWithType: "Mono.<T1,T2,T3,T4>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>)"
- uid: "reactor.core.publisher.Mono.defaultIfEmpty(T)"
  name: "Mono.defaultIfEmpty(T)"
  nameWithType: "Mono.defaultIfEmpty(T)"
  fullName: "reactor.core.publisher.Mono.defaultIfEmpty(T)"
- uid: "reactor.core.publisher.Mono.repeat(long,java.util.function.BooleanSupplier)"
  name: "Mono.repeat(long,BooleanSupplier)"
  nameWithType: "Mono.repeat(long,BooleanSupplier)"
  fullName: "reactor.core.publisher.Mono.repeat(long,java.util.function.BooleanSupplier)"
- uid: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
  name: "Mono.onErrorMap(Function<? super Throwable,? extends Throwable>)"
  nameWithType: "Mono.onErrorMap(Function<? super Throwable,? extends Throwable>)"
  fullName: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>,BiFunction<? super D,? super Throwable,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)"
  nameWithType: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>,BiFunction<? super D,? super Throwable,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.BiFunction<? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.<T1,T2,O>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)"
  name: "Mono.<T1,T2,O>zip(Mono<? extends T1>,Mono<? extends T2>,BiFunction<? super T1,? super T2,? extends O>)"
  nameWithType: "Mono.<T1,T2,O>zip(Mono<? extends T1>,Mono<? extends T2>,BiFunction<? super T1,? super T2,? extends O>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,O>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,java.util.function.BiFunction<? super T1,? super T2,? extends O>)"
- uid: "reactor.core.publisher.Mono.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)"
  name: "Mono.retry(long,Predicate<? super Throwable>)"
  nameWithType: "Mono.retry(long,Predicate<? super Throwable>)"
  fullName: "reactor.core.publisher.Mono.retry(long,java.util.function.Predicate<? super java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)"
  name: "Mono.log(String,Level,SignalType)"
  nameWithType: "Mono.log(String,Level,SignalType)"
  fullName: "reactor.core.publisher.Mono.log(java.lang.String,java.util.logging.Level,reactor.core.publisher.SignalType...)"
- uid: "reactor.core.publisher.Mono.<R>zip(java.util.function.Function<? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono<?>...)"
  name: "Mono.<R>zip(Function<? super Object[],? extends R>,Mono<?>...)"
  nameWithType: "Mono.<R>zip(Function<? super Object[],? extends R>,Mono<?>...)"
  fullName: "reactor.core.publisher.Mono.<R>zip(java.util.function.Function<? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono<?>...)"
- uid: "reactor.core.publisher.Mono.<T>empty()"
  name: "Mono.<T>empty()"
  nameWithType: "Mono.<T>empty()"
  fullName: "reactor.core.publisher.Mono.<T>empty()"
- uid: "reactor.core.publisher.Mono.<T>doOnSignal(reactor.core.publisher.Mono<T>,java.util.function.Consumer<? super org.reactivestreams.Subscription>,java.util.function.Consumer<? super T>,java.util.function.LongConsumer,java.lang.Runnable)"
  name: "Mono.<T>doOnSignal(Mono<T>,Consumer<? super Subscription>,Consumer<? super T>,LongConsumer,Runnable)"
  nameWithType: "Mono.<T>doOnSignal(Mono<T>,Consumer<? super Subscription>,Consumer<? super T>,LongConsumer,Runnable)"
  fullName: "reactor.core.publisher.Mono.<T>doOnSignal(reactor.core.publisher.Mono<T>,java.util.function.Consumer<? super org.reactivestreams.Subscription>,java.util.function.Consumer<? super T>,java.util.function.LongConsumer,java.lang.Runnable)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onSubscribe(org.reactivestreams.Subscription)"
  name: "AmqpChannelProcessor.onSubscribe(Subscription)"
  nameWithType: "AmqpChannelProcessor.onSubscribe(Subscription)"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onSubscribe(org.reactivestreams.Subscription)"
- uid: "reactor.core.publisher.Mono.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends reactor.core.publisher.Mono<? extends T>>)"
  name: "Mono.<E>onErrorResume(Class<E>,Function<? super E,? extends Mono<? extends T>>)"
  nameWithType: "Mono.<E>onErrorResume(Class<E>,Function<? super E,? extends Mono<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.<E>onErrorResume(java.lang.Class<E>,java.util.function.Function<? super E,? extends reactor.core.publisher.Mono<? extends T>>)"
- uid: "reactor.core.publisher.Mono.<V>compose(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
  name: "Mono.<V>compose(Function<? super Mono<T>,? extends Publisher<V>>)"
  nameWithType: "Mono.<V>compose(Function<? super Mono<T>,? extends Publisher<V>>)"
  fullName: "reactor.core.publisher.Mono.<V>compose(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
- uid: "reactor.core.publisher.Mono.blockOptional()"
  name: "Mono.blockOptional()"
  nameWithType: "Mono.blockOptional()"
  fullName: "reactor.core.publisher.Mono.blockOptional()"
- uid: "reactor.core.publisher.Mono.<T>fromFuture(java.util.function.Supplier<? extends java.util.concurrent.CompletableFuture<? extends T>>)"
  name: "Mono.<T>fromFuture(Supplier<? extends CompletableFuture<? extends T>>)"
  nameWithType: "Mono.<T>fromFuture(Supplier<? extends CompletableFuture<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.<T>fromFuture(java.util.function.Supplier<? extends java.util.concurrent.CompletableFuture<? extends T>>)"
- uid: "reactor.core.publisher.Mono.name(java.lang.String)"
  name: "Mono.name(String)"
  nameWithType: "Mono.name(String)"
  fullName: "reactor.core.publisher.Mono.name(java.lang.String)"
- uid: "reactor.core.publisher.Mono.<R>map(java.util.function.Function<? super T,? extends R>)"
  name: "Mono.<R>map(Function<? super T,? extends R>)"
  nameWithType: "Mono.<R>map(Function<? super T,? extends R>)"
  fullName: "reactor.core.publisher.Mono.<R>map(java.util.function.Function<? super T,? extends R>)"
- uid: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>)"
  name: "Mono.subscribe(Consumer<? super T>)"
  nameWithType: "Mono.subscribe(Consumer<? super T>)"
  fullName: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>)"
- uid: "reactor.core.publisher.Mono.<T>ignoreElements(org.reactivestreams.Publisher<T>)"
  name: "Mono.<T>ignoreElements(Publisher<T>)"
  nameWithType: "Mono.<T>ignoreElements(Publisher<T>)"
  fullName: "reactor.core.publisher.Mono.<T>ignoreElements(org.reactivestreams.Publisher<T>)"
- uid: "reactor.core.publisher.Mono.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
  name: "Mono.doOnSubscribe(Consumer<? super Subscription>)"
  nameWithType: "Mono.doOnSubscribe(Consumer<? super Subscription>)"
  fullName: "reactor.core.publisher.Mono.doOnSubscribe(java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
- uid: "reactor.core.publisher.Mono.<T2>zipWhen(java.util.function.Function<T,reactor.core.publisher.Mono<? extends T2>>)"
  name: "Mono.<T2>zipWhen(Function<T,Mono<? extends T2>>)"
  nameWithType: "Mono.<T2>zipWhen(Function<T,Mono<? extends T2>>)"
  fullName: "reactor.core.publisher.Mono.<T2>zipWhen(java.util.function.Function<T,reactor.core.publisher.Mono<? extends T2>>)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onNext(T)"
  name: "AmqpChannelProcessor.onNext(T)"
  nameWithType: "AmqpChannelProcessor.onNext(T)"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onNext(T)"
- uid: "reactor.core.publisher.Mono.toFuture()"
  name: "Mono.toFuture()"
  nameWithType: "Mono.toFuture()"
  fullName: "reactor.core.publisher.Mono.toFuture()"
- uid: "reactor.core.publisher.Mono.<R>zipDelayError(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>,java.util.function.Function<? super java.lang.Object[],? extends R>)"
  name: "Mono.<R>zipDelayError(Iterable<? extends Mono<?>>,Function<? super Object[],? extends R>)"
  nameWithType: "Mono.<R>zipDelayError(Iterable<? extends Mono<?>>,Function<? super Object[],? extends R>)"
  fullName: "reactor.core.publisher.Mono.<R>zipDelayError(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>,java.util.function.Function<? super java.lang.Object[],? extends R>)"
- uid: "reactor.core.publisher.Mono.repeatWhenEmpty(int,java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.repeatWhenEmpty(int,Function<Flux<Long>,? extends Publisher<?>>)"
  nameWithType: "Mono.repeatWhenEmpty(int,Function<Flux<Long>,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.repeatWhenEmpty(int,java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.<T>defer(java.util.function.Supplier<? extends reactor.core.publisher.Mono<? extends T>>)"
  name: "Mono.<T>defer(Supplier<? extends Mono<? extends T>>)"
  nameWithType: "Mono.<T>defer(Supplier<? extends Mono<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.<T>defer(java.util.function.Supplier<? extends reactor.core.publisher.Mono<? extends T>>)"
- uid: "reactor.core.publisher.Mono.and(org.reactivestreams.Publisher<?>)"
  name: "Mono.and(Publisher<?>)"
  nameWithType: "Mono.and(Publisher<?>)"
  fullName: "reactor.core.publisher.Mono.and(org.reactivestreams.Publisher<?>)"
- uid: "reactor.core.publisher.Mono.checkpoint(java.lang.String)"
  name: "Mono.checkpoint(String)"
  nameWithType: "Mono.checkpoint(String)"
  fullName: "reactor.core.publisher.Mono.checkpoint(java.lang.String)"
- uid: "reactor.core.publisher.Mono.retry()"
  name: "Mono.retry()"
  nameWithType: "Mono.retry()"
  fullName: "reactor.core.publisher.Mono.retry()"
- uid: "reactor.core.publisher.Mono.tag(java.lang.String,java.lang.String)"
  name: "Mono.tag(String,String)"
  nameWithType: "Mono.tag(String,String)"
  fullName: "reactor.core.publisher.Mono.tag(java.lang.String,java.lang.String)"
- uid: "reactor.core.publisher.Mono.<U>timeout(org.reactivestreams.Publisher<U>)"
  name: "Mono.<U>timeout(Publisher<U>)"
  nameWithType: "Mono.<U>timeout(Publisher<U>)"
  fullName: "reactor.core.publisher.Mono.<U>timeout(org.reactivestreams.Publisher<U>)"
- uid: "reactor.core.publisher.Mono.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)"
  name: "Mono.doOnError(Predicate<? super Throwable>,Consumer<? super Throwable>)"
  nameWithType: "Mono.doOnError(Predicate<? super Throwable>,Consumer<? super Throwable>)"
  fullName: "reactor.core.publisher.Mono.doOnError(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Consumer<? super java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.log(reactor.util.Logger)"
  name: "Mono.log(Logger)"
  nameWithType: "Mono.log(Logger)"
  fullName: "reactor.core.publisher.Mono.log(reactor.util.Logger)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "reactor.core.publisher.Mono.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.retryWhen(Function<Flux<Throwable>,? extends Publisher<?>>)"
  nameWithType: "Mono.retryWhen(Function<Flux<Throwable>,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.retryWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Throwable>,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
  name: "Mono.<E>onErrorContinue(Class<E>,BiConsumer<Throwable,Object>)"
  nameWithType: "Mono.<E>onErrorContinue(Class<E>,BiConsumer<Throwable,Object>)"
  fullName: "reactor.core.publisher.Mono.<E>onErrorContinue(java.lang.Class<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
- uid: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,double)"
  name: "Mono.retryBackoff(long,Duration,Duration,double)"
  nameWithType: "Mono.retryBackoff(long,Duration,Duration,double)"
  fullName: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,double)"
- uid: "reactor.core.publisher.Mono.<V>thenReturn(V)"
  name: "Mono.<V>thenReturn(V)"
  nameWithType: "Mono.<V>thenReturn(V)"
  fullName: "reactor.core.publisher.Mono.<V>thenReturn(V)"
- uid: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
  name: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Consumer<? super Subscription>)"
  nameWithType: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Consumer<? super Subscription>)"
  fullName: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer<? super org.reactivestreams.Subscription>)"
- uid: "reactor.core.publisher.Mono.<V>thenMany(org.reactivestreams.Publisher<V>)"
  name: "Mono.<V>thenMany(Publisher<V>)"
  nameWithType: "Mono.<V>thenMany(Publisher<V>)"
  fullName: "reactor.core.publisher.Mono.<V>thenMany(org.reactivestreams.Publisher<V>)"
- uid: "reactor.core.publisher.Mono.flux()"
  name: "Mono.flux()"
  nameWithType: "Mono.flux()"
  fullName: "reactor.core.publisher.Mono.flux()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "reactor.core.publisher.Mono.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends reactor.core.publisher.Mono<? extends T>>)"
  name: "Mono.<T>deferWithContext(Function<Context,? extends Mono<? extends T>>)"
  nameWithType: "Mono.<T>deferWithContext(Function<Context,? extends Mono<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.<T>deferWithContext(java.util.function.Function<reactor.util.context.Context,? extends reactor.core.publisher.Mono<? extends T>>)"
- uid: "reactor.core.publisher.Mono.<T>onLastAssembly(reactor.core.publisher.Mono<T>)"
  name: "Mono.<T>onLastAssembly(Mono<T>)"
  nameWithType: "Mono.<T>onLastAssembly(Mono<T>)"
  fullName: "reactor.core.publisher.Mono.<T>onLastAssembly(reactor.core.publisher.Mono<T>)"
- uid: "reactor.core.publisher.Mono.timestamp(reactor.core.scheduler.Scheduler)"
  name: "Mono.timestamp(Scheduler)"
  nameWithType: "Mono.timestamp(Scheduler)"
  fullName: "reactor.core.publisher.Mono.timestamp(reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.retry(java.util.function.Predicate<? super java.lang.Throwable>)"
  name: "Mono.retry(Predicate<? super Throwable>)"
  nameWithType: "Mono.retry(Predicate<? super Throwable>)"
  fullName: "reactor.core.publisher.Mono.retry(java.util.function.Predicate<? super java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.<T>onAssembly(reactor.core.publisher.Mono<T>)"
  name: "Mono.<T>onAssembly(Mono<T>)"
  nameWithType: "Mono.<T>onAssembly(Mono<T>)"
  fullName: "reactor.core.publisher.Mono.<T>onAssembly(reactor.core.publisher.Mono<T>)"
- uid: "reactor.core.publisher.Mono.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)"
  name: "Mono.<R>flatMapIterable(Function<? super T,? extends Iterable<? extends R>>)"
  nameWithType: "Mono.<R>flatMapIterable(Function<? super T,? extends Iterable<? extends R>>)"
  fullName: "reactor.core.publisher.Mono.<R>flatMapIterable(java.util.function.Function<? super T,? extends java.lang.Iterable<? extends R>>)"
- uid: "reactor.core.publisher.Mono.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
  name: "Mono.expand(Function<? super T,? extends Publisher<? extends T>>)"
  nameWithType: "Mono.expand(Function<? super T,? extends Publisher<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
- uid: "reactor.core.publisher.Mono.doFirst(java.lang.Runnable)"
  name: "Mono.doFirst(Runnable)"
  nameWithType: "Mono.doFirst(Runnable)"
  fullName: "reactor.core.publisher.Mono.doFirst(java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.<T2>zipWith(reactor.core.publisher.Mono<? extends T2>)"
  name: "Mono.<T2>zipWith(Mono<? extends T2>)"
  nameWithType: "Mono.<T2>zipWith(Mono<? extends T2>)"
  fullName: "reactor.core.publisher.Mono.<T2>zipWith(reactor.core.publisher.Mono<? extends T2>)"
- uid: "reactor.core.publisher.Mono.repeat(long)"
  name: "Mono.repeat(long)"
  nameWithType: "Mono.repeat(long)"
  fullName: "reactor.core.publisher.Mono.repeat(long)"
- uid: "reactor.core.publisher.Mono.doOnCancel(java.lang.Runnable)"
  name: "Mono.doOnCancel(Runnable)"
  nameWithType: "Mono.doOnCancel(Runnable)"
  fullName: "reactor.core.publisher.Mono.doOnCancel(java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.onTerminateDetach()"
  name: "Mono.onTerminateDetach()"
  nameWithType: "Mono.onTerminateDetach()"
  fullName: "reactor.core.publisher.Mono.onTerminateDetach()"
- uid: "reactor.core.publisher.Mono.subscribe(org.reactivestreams.Subscriber<? super T>)"
  name: "Mono.subscribe(Subscriber<? super T>)"
  nameWithType: "Mono.subscribe(Subscriber<? super T>)"
  fullName: "reactor.core.publisher.Mono.subscribe(org.reactivestreams.Subscriber<? super T>)"
- uid: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)"
  name: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Context)"
  nameWithType: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable,Context)"
  fullName: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>)"
  name: "Mono.<T1,T2,T3,T4,T5,T6>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5,T6>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>,reactor.core.publisher.Mono<? extends T8>)"
  name: "Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>,Mono<? extends T8>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>,Mono<? extends T8>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7,T8>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>,reactor.core.publisher.Mono<? extends T8>)"
- uid: "reactor.core.publisher.Mono.<T>fromCompletionStage(java.util.function.Supplier<? extends java.util.concurrent.CompletionStage<? extends T>>)"
  name: "Mono.<T>fromCompletionStage(Supplier<? extends CompletionStage<? extends T>>)"
  nameWithType: "Mono.<T>fromCompletionStage(Supplier<? extends CompletionStage<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.<T>fromCompletionStage(java.util.function.Supplier<? extends java.util.concurrent.CompletionStage<? extends T>>)"
- uid: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)"
  nameWithType: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.switchIfEmpty(reactor.core.publisher.Mono<? extends T>)"
  name: "Mono.switchIfEmpty(Mono<? extends T>)"
  nameWithType: "Mono.switchIfEmpty(Mono<? extends T>)"
  fullName: "reactor.core.publisher.Mono.switchIfEmpty(reactor.core.publisher.Mono<? extends T>)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>)"
  name: "Mono.<T1,T2,T3,T4,T5,T6>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5,T6>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>)"
- uid: "reactor.core.publisher.Mono.ignoreElement()"
  name: "Mono.ignoreElement()"
  nameWithType: "Mono.ignoreElement()"
  fullName: "reactor.core.publisher.Mono.ignoreElement()"
- uid: "reactor.core.publisher.Mono.doOnRequest(java.util.function.LongConsumer)"
  name: "Mono.doOnRequest(LongConsumer)"
  nameWithType: "Mono.doOnRequest(LongConsumer)"
  fullName: "reactor.core.publisher.Mono.doOnRequest(java.util.function.LongConsumer)"
- uid: "reactor.core.publisher.Mono.<R>publish(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends reactor.core.publisher.Mono<? extends R>>)"
  name: "Mono.<R>publish(Function<? super Mono<T>,? extends Mono<? extends R>>)"
  nameWithType: "Mono.<R>publish(Function<? super Mono<T>,? extends Mono<? extends R>>)"
  fullName: "reactor.core.publisher.Mono.<R>publish(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends reactor.core.publisher.Mono<? extends R>>)"
- uid: "reactor.core.publisher.Mono.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)"
  name: "Mono.<R>handle(BiConsumer<? super T,SynchronousSink<R>>)"
  nameWithType: "Mono.<R>handle(BiConsumer<? super T,SynchronousSink<R>>)"
  fullName: "reactor.core.publisher.Mono.<R>handle(java.util.function.BiConsumer<? super T,reactor.core.publisher.SynchronousSink<R>>)"
- uid: "reactor.core.publisher.Mono.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)"
  name: "Mono.<R>doOnDiscard(Class<R>,Consumer<? super R>)"
  nameWithType: "Mono.<R>doOnDiscard(Class<R>,Consumer<? super R>)"
  fullName: "reactor.core.publisher.Mono.<R>doOnDiscard(java.lang.Class<R>,java.util.function.Consumer<? super R>)"
- uid: "reactor.core.publisher.Mono.<T>just(T)"
  name: "Mono.<T>just(T)"
  nameWithType: "Mono.<T>just(T)"
  fullName: "reactor.core.publisher.Mono.<T>just(T)"
- uid: "reactor.core.publisher.Mono.block()"
  name: "Mono.block()"
  nameWithType: "Mono.block()"
  fullName: "reactor.core.publisher.Mono.block()"
- uid: "reactor.core.publisher.Mono.<X>dematerialize()"
  name: "Mono.<X>dematerialize()"
  nameWithType: "Mono.<X>dematerialize()"
  fullName: "reactor.core.publisher.Mono.<X>dematerialize()"
- uid: "reactor.core.publisher.Mono.<R>zipDelayError(java.util.function.Function<? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono<?>...)"
  name: "Mono.<R>zipDelayError(Function<? super Object[],? extends R>,Mono<?>...)"
  nameWithType: "Mono.<R>zipDelayError(Function<? super Object[],? extends R>,Mono<?>...)"
  fullName: "reactor.core.publisher.Mono.<R>zipDelayError(java.util.function.Function<? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono<?>...)"
- uid: "reactor.core.publisher.Mono.<T>doOnTerminalSignal(reactor.core.publisher.Mono<T>,java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
  name: "Mono.<T>doOnTerminalSignal(Mono<T>,Consumer<? super T>,Consumer<? super Throwable>,BiConsumer<? super T,Throwable>)"
  nameWithType: "Mono.<T>doOnTerminalSignal(Mono<T>,Consumer<? super T>,Consumer<? super Throwable>,BiConsumer<? super T,Throwable>)"
  fullName: "reactor.core.publisher.Mono.<T>doOnTerminalSignal(reactor.core.publisher.Mono<T>,java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>,java.util.function.BiPredicate<? super T,? super T>,int)"
  name: "Mono.<T>sequenceEqual(Publisher<? extends T>,Publisher<? extends T>,BiPredicate<? super T,? super T>,int)"
  nameWithType: "Mono.<T>sequenceEqual(Publisher<? extends T>,Publisher<? extends T>,BiPredicate<? super T,? super T>,int)"
  fullName: "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>,java.util.function.BiPredicate<? super T,? super T>,int)"
- uid: "reactor.core.publisher.Mono.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)"
  name: "Mono.subscriberContext(Function<Context,Context>)"
  nameWithType: "Mono.subscriberContext(Function<Context,Context>)"
  fullName: "reactor.core.publisher.Mono.subscriberContext(java.util.function.Function<reactor.util.context.Context,reactor.util.context.Context>)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "reactor.core.publisher.Mono.doOnSuccessOrError(java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
  name: "Mono.doOnSuccessOrError(BiConsumer<? super T,Throwable>)"
  nameWithType: "Mono.doOnSuccessOrError(BiConsumer<? super T,Throwable>)"
  fullName: "reactor.core.publisher.Mono.doOnSuccessOrError(java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)"
  nameWithType: "Mono.<T,D>usingWhen(Publisher<D>,Function<? super D,? extends Mono<? extends T>>,Function<? super D,? extends Publisher<?>>,Function<? super D,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.<T,D>usingWhen(org.reactivestreams.Publisher<D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>,java.util.function.Function<? super D,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.when(org.reactivestreams.Publisher<?>...)"
  name: "Mono.when(Publisher<?>...)"
  nameWithType: "Mono.when(Publisher<?>...)"
  fullName: "reactor.core.publisher.Mono.when(org.reactivestreams.Publisher<?>...)"
- uid: "reactor.core.publisher.Mono.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)"
  name: "Mono.<E>doOnError(Class<E>,Consumer<? super E>)"
  nameWithType: "Mono.<E>doOnError(Class<E>,Consumer<? super E>)"
  fullName: "reactor.core.publisher.Mono.<E>doOnError(java.lang.Class<E>,java.util.function.Consumer<? super E>)"
- uid: "reactor.core.publisher.Mono.retry(long)"
  name: "Mono.retry(long)"
  nameWithType: "Mono.retry(long)"
  fullName: "reactor.core.publisher.Mono.retry(long)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>)"
  name: "Mono.<T1,T2,T3,T4>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>)"
  nameWithType: "Mono.<T1,T2,T3,T4>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>)"
- uid: "reactor.core.publisher.Mono.filter(java.util.function.Predicate<? super T>)"
  name: "Mono.filter(Predicate<? super T>)"
  nameWithType: "Mono.filter(Predicate<? super T>)"
  fullName: "reactor.core.publisher.Mono.filter(java.util.function.Predicate<? super T>)"
- uid: "reactor.core.publisher.Mono.cache(java.time.Duration)"
  name: "Mono.cache(Duration)"
  nameWithType: "Mono.cache(Duration)"
  fullName: "reactor.core.publisher.Mono.cache(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>)"
  name: "Mono.<T1,T2,T3,T4,T5>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5>zip(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>)"
- uid: "reactor.core.publisher.Mono.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
  name: "Mono.onErrorContinue(BiConsumer<Throwable,Object>)"
  nameWithType: "Mono.onErrorContinue(BiConsumer<Throwable,Object>)"
  fullName: "reactor.core.publisher.Mono.onErrorContinue(java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
- uid: "reactor.core.publisher.Mono.when(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.when(Iterable<? extends Publisher<?>>)"
  nameWithType: "Mono.when(Iterable<? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.when(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.onErrorReturn(T)"
  name: "Mono.onErrorReturn(T)"
  nameWithType: "Mono.onErrorReturn(T)"
  fullName: "reactor.core.publisher.Mono.onErrorReturn(T)"
- uid: "reactor.core.publisher.Mono.elapsed(reactor.core.scheduler.Scheduler)"
  name: "Mono.elapsed(Scheduler)"
  nameWithType: "Mono.elapsed(Scheduler)"
  fullName: "reactor.core.publisher.Mono.elapsed(reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>,java.util.function.BiPredicate<? super T,? super T>)"
  name: "Mono.<T>sequenceEqual(Publisher<? extends T>,Publisher<? extends T>,BiPredicate<? super T,? super T>)"
  nameWithType: "Mono.<T>sequenceEqual(Publisher<? extends T>,Publisher<? extends T>,BiPredicate<? super T,? super T>)"
  fullName: "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>,java.util.function.BiPredicate<? super T,? super T>)"
- uid: "reactor.core.publisher.Mono.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)"
  name: "Mono.onErrorReturn(Predicate<? super Throwable>,T)"
  nameWithType: "Mono.onErrorReturn(Predicate<? super Throwable>,T)"
  fullName: "reactor.core.publisher.Mono.onErrorReturn(java.util.function.Predicate<? super java.lang.Throwable>,T)"
- uid: "reactor.core.publisher.Mono.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
  name: "Mono.expandDeep(Function<? super T,? extends Publisher<? extends T>>)"
  nameWithType: "Mono.expandDeep(Function<? super T,? extends Publisher<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>)"
- uid: "reactor.core.publisher.Mono.doOnNext(java.util.function.Consumer<? super T>)"
  name: "Mono.doOnNext(Consumer<? super T>)"
  nameWithType: "Mono.doOnNext(Consumer<? super T>)"
  fullName: "reactor.core.publisher.Mono.doOnNext(java.util.function.Consumer<? super T>)"
- uid: "reactor.core.publisher.Mono.<E>cast(java.lang.Class<E>)"
  name: "Mono.<E>cast(Class<E>)"
  nameWithType: "Mono.<E>cast(Class<E>)"
  fullName: "reactor.core.publisher.Mono.<E>cast(java.lang.Class<E>)"
- uid: "reactor.core.publisher.Mono.delaySubscription(java.time.Duration)"
  name: "Mono.delaySubscription(Duration)"
  nameWithType: "Mono.delaySubscription(Duration)"
  fullName: "reactor.core.publisher.Mono.delaySubscription(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.<T2,O>zipWhen(java.util.function.Function<T,reactor.core.publisher.Mono<? extends T2>>,java.util.function.BiFunction<T,T2,O>)"
  name: "Mono.<T2,O>zipWhen(Function<T,Mono<? extends T2>>,BiFunction<T,T2,O>)"
  nameWithType: "Mono.<T2,O>zipWhen(Function<T,Mono<? extends T2>>,BiFunction<T,T2,O>)"
  fullName: "reactor.core.publisher.Mono.<T2,O>zipWhen(java.util.function.Function<T,reactor.core.publisher.Mono<? extends T2>>,java.util.function.BiFunction<T,T2,O>)"
- uid: "reactor.core.publisher.Mono.<T>from(org.reactivestreams.Publisher<? extends T>)"
  name: "Mono.<T>from(Publisher<? extends T>)"
  nameWithType: "Mono.<T>from(Publisher<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>from(org.reactivestreams.Publisher<? extends T>)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "reactor.core.publisher.Mono.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.repeatWhen(Function<Flux<Long>,? extends Publisher<?>>)"
  nameWithType: "Mono.repeatWhen(Function<Flux<Long>,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.repeatWhen(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
  name: "Mono.log(Logger,Level,boolean,SignalType)"
  nameWithType: "Mono.log(Logger,Level,boolean,SignalType)"
  fullName: "reactor.core.publisher.Mono.log(reactor.util.Logger,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
- uid: "reactor.core.publisher.Mono.publishOn(reactor.core.scheduler.Scheduler)"
  name: "Mono.publishOn(Scheduler)"
  nameWithType: "Mono.publishOn(Scheduler)"
  fullName: "reactor.core.publisher.Mono.publishOn(reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.cancelOn(reactor.core.scheduler.Scheduler)"
  name: "Mono.cancelOn(Scheduler)"
  nameWithType: "Mono.cancelOn(Scheduler)"
  fullName: "reactor.core.publisher.Mono.cancelOn(reactor.core.scheduler.Scheduler)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.subscribe(reactor.core.CoreSubscriber<? super T>)"
  name: "AmqpChannelProcessor.subscribe(CoreSubscriber<? super T>)"
  nameWithType: "AmqpChannelProcessor.subscribe(CoreSubscriber<? super T>)"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.subscribe(reactor.core.CoreSubscriber<? super T>)"
- uid: "reactor.core.publisher.Mono.delayElement(java.time.Duration)"
  name: "Mono.delayElement(Duration)"
  nameWithType: "Mono.delayElement(Duration)"
  fullName: "reactor.core.publisher.Mono.delayElement(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.<T>fromFuture(java.util.concurrent.CompletableFuture<? extends T>)"
  name: "Mono.<T>fromFuture(CompletableFuture<? extends T>)"
  nameWithType: "Mono.<T>fromFuture(CompletableFuture<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>fromFuture(java.util.concurrent.CompletableFuture<? extends T>)"
- uid: "reactor.core.publisher.Mono.<T>fromCompletionStage(java.util.concurrent.CompletionStage<? extends T>)"
  name: "Mono.<T>fromCompletionStage(CompletionStage<? extends T>)"
  nameWithType: "Mono.<T>fromCompletionStage(CompletionStage<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>fromCompletionStage(java.util.concurrent.CompletionStage<? extends T>)"
- uid: "reactor.core.publisher.Mono.cache()"
  name: "Mono.cache()"
  nameWithType: "Mono.cache()"
  fullName: "reactor.core.publisher.Mono.cache()"
- uid: "reactor.core.publisher.Mono.log()"
  name: "Mono.log()"
  nameWithType: "Mono.log()"
  fullName: "reactor.core.publisher.Mono.log()"
- uid: "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>)"
  name: "Mono.<T>sequenceEqual(Publisher<? extends T>,Publisher<? extends T>)"
  nameWithType: "Mono.<T>sequenceEqual(Publisher<? extends T>,Publisher<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>sequenceEqual(org.reactivestreams.Publisher<? extends T>,org.reactivestreams.Publisher<? extends T>)"
- uid: "reactor.core.publisher.Mono.subscribe()"
  name: "Mono.subscribe()"
  nameWithType: "Mono.subscribe()"
  fullName: "reactor.core.publisher.Mono.subscribe()"
- uid: "reactor.core.publisher.Mono.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Consumer<? super D>)"
  name: "Mono.<T,D>using(Callable<? extends D>,Function<? super D,? extends Mono<? extends T>>,Consumer<? super D>)"
  nameWithType: "Mono.<T,D>using(Callable<? extends D>,Function<? super D,? extends Mono<? extends T>>,Consumer<? super D>)"
  fullName: "reactor.core.publisher.Mono.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Consumer<? super D>)"
- uid: "reactor.core.publisher.Mono.<T1,T2>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>)"
  name: "Mono.<T1,T2>zipDelayError(Mono<? extends T1>,Mono<? extends T2>)"
  nameWithType: "Mono.<T1,T2>zipDelayError(Mono<? extends T1>,Mono<? extends T2>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>)"
- uid: "reactor.core.publisher.Mono.<R>zip(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>,java.util.function.Function<? super java.lang.Object[],? extends R>)"
  name: "Mono.<R>zip(Iterable<? extends Mono<?>>,Function<? super Object[],? extends R>)"
  nameWithType: "Mono.<R>zip(Iterable<? extends Mono<?>>,Function<? super Object[],? extends R>)"
  fullName: "reactor.core.publisher.Mono.<R>zip(java.lang.Iterable<? extends reactor.core.publisher.Mono<?>>,java.util.function.Function<? super java.lang.Object[],? extends R>)"
- uid: "reactor.core.publisher.Mono.block(java.time.Duration)"
  name: "Mono.block(Duration)"
  nameWithType: "Mono.block(Duration)"
  fullName: "reactor.core.publisher.Mono.block(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.delaySubscription(Duration,Scheduler)"
  nameWithType: "Mono.delaySubscription(Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.delaySubscription(java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono<? extends T>,reactor.core.scheduler.Scheduler)"
  name: "Mono.timeout(Duration,Mono<? extends T>,Scheduler)"
  nameWithType: "Mono.timeout(Duration,Mono<? extends T>,Scheduler)"
  fullName: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono<? extends T>,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.doAfterSuccessOrError(java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
  name: "Mono.doAfterSuccessOrError(BiConsumer<? super T,Throwable>)"
  nameWithType: "Mono.doAfterSuccessOrError(BiConsumer<? super T,Throwable>)"
  fullName: "reactor.core.publisher.Mono.doAfterSuccessOrError(java.util.function.BiConsumer<? super T,java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.<E>subscribeWith(E)"
  name: "Mono.<E>subscribeWith(E)"
  nameWithType: "Mono.<E>subscribeWith(E)"
  fullName: "reactor.core.publisher.Mono.<E>subscribeWith(E)"
- uid: "reactor.core.publisher.Mono.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)"
  name: "Mono.<E>onErrorMap(Class<E>,Function<? super E,? extends Throwable>)"
  nameWithType: "Mono.<E>onErrorMap(Class<E>,Function<? super E,? extends Throwable>)"
  fullName: "reactor.core.publisher.Mono.<E>onErrorMap(java.lang.Class<E>,java.util.function.Function<? super E,? extends java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.subscriberContext()"
  name: "Mono.subscriberContext()"
  nameWithType: "Mono.subscriberContext()"
  fullName: "reactor.core.publisher.Mono.subscriberContext()"
- uid: "reactor.core.publisher.Mono.<T>fromCallable(java.util.concurrent.Callable<? extends T>)"
  name: "Mono.<T>fromCallable(Callable<? extends T>)"
  nameWithType: "Mono.<T>fromCallable(Callable<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>fromCallable(java.util.concurrent.Callable<? extends T>)"
- uid: "reactor.core.publisher.Mono.take(java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.take(Duration,Scheduler)"
  nameWithType: "Mono.take(Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.take(java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.subscribeOn(reactor.core.scheduler.Scheduler)"
  name: "Mono.subscribeOn(Scheduler)"
  nameWithType: "Mono.subscribeOn(Scheduler)"
  fullName: "reactor.core.publisher.Mono.subscribeOn(reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
  name: "Mono.<E>onErrorContinue(Predicate<E>,BiConsumer<Throwable,Object>)"
  nameWithType: "Mono.<E>onErrorContinue(Predicate<E>,BiConsumer<Throwable,Object>)"
  fullName: "reactor.core.publisher.Mono.<E>onErrorContinue(java.util.function.Predicate<E>,java.util.function.BiConsumer<java.lang.Throwable,java.lang.Object>)"
- uid: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)"
  name: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>)"
  nameWithType: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>)"
  fullName: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.cache(java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.cache(Duration,Scheduler)"
  nameWithType: "Mono.cache(Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.cache(java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends reactor.core.publisher.Mono<? extends T>>)"
  name: "Mono.onErrorResume(Predicate<? super Throwable>,Function<? super Throwable,? extends Mono<? extends T>>)"
  nameWithType: "Mono.onErrorResume(Predicate<? super Throwable>,Function<? super Throwable,? extends Mono<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends reactor.core.publisher.Mono<? extends T>>)"
- uid: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.retryBackoff(long,Duration,Duration,Scheduler)"
  nameWithType: "Mono.retryBackoff(long,Duration,Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)"
  name: "Mono.retryBackoff(long,Duration,Duration,double,Scheduler)"
  nameWithType: "Mono.retryBackoff(long,Duration,Duration,double,Scheduler)"
  fullName: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration,double,reactor.core.scheduler.Scheduler)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onError(java.lang.Throwable)"
  name: "AmqpChannelProcessor.onError(Throwable)"
  nameWithType: "AmqpChannelProcessor.onError(Throwable)"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onError(java.lang.Throwable)"
- uid: "reactor.core.publisher.Mono.<U>timeout(org.reactivestreams.Publisher<U>,reactor.core.publisher.Mono<? extends T>)"
  name: "Mono.<U>timeout(Publisher<U>,Mono<? extends T>)"
  nameWithType: "Mono.<U>timeout(Publisher<U>,Mono<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<U>timeout(org.reactivestreams.Publisher<U>,reactor.core.publisher.Mono<? extends T>)"
- uid: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono<? extends T>)"
  name: "Mono.timeout(Duration,Mono<? extends T>)"
  nameWithType: "Mono.timeout(Duration,Mono<? extends T>)"
  fullName: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono<? extends T>)"
- uid: "reactor.core.publisher.Mono.doAfterTerminate(java.lang.Runnable)"
  name: "Mono.doAfterTerminate(Runnable)"
  nameWithType: "Mono.doAfterTerminate(Runnable)"
  fullName: "reactor.core.publisher.Mono.doAfterTerminate(java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.repeat(java.util.function.BooleanSupplier)"
  name: "Mono.repeat(BooleanSupplier)"
  nameWithType: "Mono.repeat(BooleanSupplier)"
  fullName: "reactor.core.publisher.Mono.repeat(java.util.function.BooleanSupplier)"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "reactor.core.publisher.Mono.materialize()"
  name: "Mono.materialize()"
  nameWithType: "Mono.materialize()"
  fullName: "reactor.core.publisher.Mono.materialize()"
- uid: "reactor.core.publisher.Mono.<T>fromSupplier(java.util.function.Supplier<? extends T>)"
  name: "Mono.<T>fromSupplier(Supplier<? extends T>)"
  nameWithType: "Mono.<T>fromSupplier(Supplier<? extends T>)"
  fullName: "reactor.core.publisher.Mono.<T>fromSupplier(java.util.function.Supplier<? extends T>)"
- uid: "reactor.core.publisher.Mono.log(java.lang.String)"
  name: "Mono.log(String)"
  nameWithType: "Mono.log(String)"
  fullName: "reactor.core.publisher.Mono.log(java.lang.String)"
- uid: "reactor.core.publisher.Mono.doOnSuccess(java.util.function.Consumer<? super T>)"
  name: "Mono.doOnSuccess(Consumer<? super T>)"
  nameWithType: "Mono.doOnSuccess(Consumer<? super T>)"
  fullName: "reactor.core.publisher.Mono.doOnSuccess(java.util.function.Consumer<? super T>)"
- uid: "reactor.core.publisher.Mono.<T>justOrEmpty(T)"
  name: "Mono.<T>justOrEmpty(T)"
  nameWithType: "Mono.<T>justOrEmpty(T)"
  fullName: "reactor.core.publisher.Mono.<T>justOrEmpty(T)"
- uid: "reactor.core.publisher.Mono.<V>transform(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
  name: "Mono.<V>transform(Function<? super Mono<T>,? extends Publisher<V>>)"
  nameWithType: "Mono.<V>transform(Function<? super Mono<T>,? extends Publisher<V>>)"
  fullName: "reactor.core.publisher.Mono.<V>transform(java.util.function.Function<? super reactor.core.publisher.Mono<T>,? extends org.reactivestreams.Publisher<V>>)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "reactor.core.publisher.Mono.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
  name: "Mono.expandDeep(Function<? super T,? extends Publisher<? extends T>>,int)"
  nameWithType: "Mono.expandDeep(Function<? super T,? extends Publisher<? extends T>>,int)"
  fullName: "reactor.core.publisher.Mono.expandDeep(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
- uid: "reactor.core.publisher.Mono.elapsed()"
  name: "Mono.elapsed()"
  nameWithType: "Mono.elapsed()"
  fullName: "reactor.core.publisher.Mono.elapsed()"
- uid: "reactor.core.publisher.Mono.<T>never()"
  name: "Mono.<T>never()"
  nameWithType: "Mono.<T>never()"
  fullName: "reactor.core.publisher.Mono.<T>never()"
- uid: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
  name: "Mono.onErrorMap(Predicate<? super Throwable>,Function<? super Throwable,? extends Throwable>)"
  nameWithType: "Mono.onErrorMap(Predicate<? super Throwable>,Function<? super Throwable,? extends Throwable>)"
  fullName: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Predicate<? super java.lang.Throwable>,java.util.function.Function<? super java.lang.Throwable,? extends java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.cache(java.util.function.Function<? super T,java.time.Duration>,java.util.function.Function<java.lang.Throwable,java.time.Duration>,java.util.function.Supplier<java.time.Duration>)"
  name: "Mono.cache(Function<? super T,Duration>,Function<Throwable,Duration>,Supplier<Duration>)"
  nameWithType: "Mono.cache(Function<? super T,Duration>,Function<Throwable,Duration>,Supplier<Duration>)"
  fullName: "reactor.core.publisher.Mono.cache(java.util.function.Function<? super T,java.time.Duration>,java.util.function.Function<java.lang.Throwable,java.time.Duration>,java.util.function.Supplier<java.time.Duration>)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onComplete()"
  name: "AmqpChannelProcessor.onComplete()"
  nameWithType: "AmqpChannelProcessor.onComplete()"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.onComplete()"
- uid: "reactor.core.publisher.Mono.single()"
  name: "Mono.single()"
  nameWithType: "Mono.single()"
  fullName: "reactor.core.publisher.Mono.single()"
- uid: "reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)"
  name: "Mono.subscriberContext(Context)"
  nameWithType: "Mono.subscriberContext(Context)"
  fullName: "reactor.core.publisher.Mono.subscriberContext(reactor.util.context.Context)"
- uid: "reactor.core.publisher.Mono.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)"
  name: "Mono.doFinally(Consumer<SignalType>)"
  nameWithType: "Mono.doFinally(Consumer<SignalType>)"
  fullName: "reactor.core.publisher.Mono.doFinally(java.util.function.Consumer<reactor.core.publisher.SignalType>)"
- uid: "reactor.core.publisher.Mono.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
  name: "Mono.log(String,Level,boolean,SignalType)"
  nameWithType: "Mono.log(String,Level,boolean,SignalType)"
  fullName: "reactor.core.publisher.Mono.log(java.lang.String,java.util.logging.Level,boolean,reactor.core.publisher.SignalType...)"
- uid: "reactor.core.publisher.Mono.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)"
  name: "Mono.thenEmpty(Publisher<Void>)"
  nameWithType: "Mono.thenEmpty(Publisher<Void>)"
  fullName: "reactor.core.publisher.Mono.thenEmpty(org.reactivestreams.Publisher<java.lang.Void>)"
- uid: "reactor.core.publisher.Mono.hasElement()"
  name: "Mono.hasElement()"
  nameWithType: "Mono.hasElement()"
  fullName: "reactor.core.publisher.Mono.hasElement()"
- uid: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration)"
  name: "Mono.retryBackoff(long,Duration,Duration)"
  nameWithType: "Mono.retryBackoff(long,Duration,Duration)"
  fullName: "reactor.core.publisher.Mono.retryBackoff(long,java.time.Duration,java.time.Duration)"
- uid: "reactor.core.publisher.Mono.toString()"
  name: "Mono.toString()"
  nameWithType: "Mono.toString()"
  fullName: "reactor.core.publisher.Mono.toString()"
- uid: "reactor.core.publisher.Mono.repeatWhenEmpty(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.repeatWhenEmpty(Function<Flux<Long>,? extends Publisher<?>>)"
  nameWithType: "Mono.repeatWhenEmpty(Function<Flux<Long>,? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.repeatWhenEmpty(java.util.function.Function<reactor.core.publisher.Flux<java.lang.Long>,? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.take(java.time.Duration)"
  name: "Mono.take(Duration)"
  nameWithType: "Mono.take(Duration)"
  fullName: "reactor.core.publisher.Mono.take(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)"
  name: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable)"
  nameWithType: "Mono.subscribe(Consumer<? super T>,Consumer<? super Throwable>,Runnable)"
  fullName: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer<? super T>,java.util.function.Consumer<? super java.lang.Throwable>,java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends reactor.core.publisher.Mono<? extends T>>)"
  name: "Mono.onErrorResume(Function<? super Throwable,? extends Mono<? extends T>>)"
  nameWithType: "Mono.onErrorResume(Function<? super Throwable,? extends Mono<? extends T>>)"
  fullName: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Function<? super java.lang.Throwable,? extends reactor.core.publisher.Mono<? extends T>>)"
- uid: "reactor.core.publisher.Mono.<R>flatMapMany(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)"
  name: "Mono.<R>flatMapMany(Function<? super T,? extends Publisher<? extends R>>)"
  nameWithType: "Mono.<R>flatMapMany(Function<? super T,? extends Publisher<? extends R>>)"
  fullName: "reactor.core.publisher.Mono.<R>flatMapMany(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends R>>)"
- uid: "reactor.core.publisher.Mono.<T1,T2>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>)"
  name: "Mono.<T1,T2>zip(Mono<? extends T1>,Mono<? extends T2>)"
  nameWithType: "Mono.<T1,T2>zip(Mono<? extends T1>,Mono<? extends T2>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2>zip(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>)"
- uid: "reactor.core.publisher.Mono.<I>fromDirect(org.reactivestreams.Publisher<? extends I>)"
  name: "Mono.<I>fromDirect(Publisher<? extends I>)"
  nameWithType: "Mono.<I>fromDirect(Publisher<? extends I>)"
  fullName: "reactor.core.publisher.Mono.<I>fromDirect(org.reactivestreams.Publisher<? extends I>)"
- uid: "reactor.core.publisher.Mono.timeout(java.time.Duration)"
  name: "Mono.timeout(Duration)"
  nameWithType: "Mono.timeout(Duration)"
  fullName: "reactor.core.publisher.Mono.timeout(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.<T>equalsBiPredicate()"
  name: "Mono.<T>equalsBiPredicate()"
  nameWithType: "Mono.<T>equalsBiPredicate()"
  fullName: "reactor.core.publisher.Mono.<T>equalsBiPredicate()"
- uid: "reactor.core.publisher.Mono.delay(java.time.Duration,reactor.core.scheduler.Scheduler)"
  name: "Mono.delay(Duration,Scheduler)"
  nameWithType: "Mono.delay(Duration,Scheduler)"
  fullName: "reactor.core.publisher.Mono.delay(java.time.Duration,reactor.core.scheduler.Scheduler)"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.isDisposed()"
  name: "AmqpChannelProcessor.isDisposed()"
  nameWithType: "AmqpChannelProcessor.isDisposed()"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.isDisposed()"
- uid: "reactor.core.publisher.Mono.toProcessor()"
  name: "Mono.toProcessor()"
  nameWithType: "Mono.toProcessor()"
  fullName: "reactor.core.publisher.Mono.toProcessor()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>)"
  name: "Mono.<T1,T2,T3>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>)"
  nameWithType: "Mono.<T1,T2,T3>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>)"
- uid: "reactor.core.publisher.Mono.<T>empty(org.reactivestreams.Publisher<T>)"
  name: "Mono.<T>empty(Publisher<T>)"
  nameWithType: "Mono.<T>empty(Publisher<T>)"
  fullName: "reactor.core.publisher.Mono.<T>empty(org.reactivestreams.Publisher<T>)"
- uid: "reactor.core.publisher.Mono.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)"
  name: "Mono.<T>error(Supplier<? extends Throwable>)"
  nameWithType: "Mono.<T>error(Supplier<? extends Throwable>)"
  fullName: "reactor.core.publisher.Mono.<T>error(java.util.function.Supplier<? extends java.lang.Throwable>)"
- uid: "reactor.core.publisher.Mono.timestamp()"
  name: "Mono.timestamp()"
  nameWithType: "Mono.timestamp()"
  fullName: "reactor.core.publisher.Mono.timestamp()"
- uid: "reactor.core.publisher.Mono.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
  name: "Mono.expand(Function<? super T,? extends Publisher<? extends T>>,int)"
  nameWithType: "Mono.expand(Function<? super T,? extends Publisher<? extends T>>,int)"
  fullName: "reactor.core.publisher.Mono.expand(java.util.function.Function<? super T,? extends org.reactivestreams.Publisher<? extends T>>,int)"
- uid: "reactor.core.publisher.Mono.checkpoint(java.lang.String,boolean)"
  name: "Mono.checkpoint(String,boolean)"
  nameWithType: "Mono.checkpoint(String,boolean)"
  fullName: "reactor.core.publisher.Mono.checkpoint(java.lang.String,boolean)"
- uid: "reactor.core.publisher.Mono.concatWith(org.reactivestreams.Publisher<? extends T>)"
  name: "Mono.concatWith(Publisher<? extends T>)"
  nameWithType: "Mono.concatWith(Publisher<? extends T>)"
  fullName: "reactor.core.publisher.Mono.concatWith(org.reactivestreams.Publisher<? extends T>)"
- uid: "reactor.core.publisher.Mono.blockOptional(java.time.Duration)"
  name: "Mono.blockOptional(Duration)"
  nameWithType: "Mono.blockOptional(Duration)"
  fullName: "reactor.core.publisher.Mono.blockOptional(java.time.Duration)"
- uid: "reactor.core.publisher.Mono.then()"
  name: "Mono.then()"
  nameWithType: "Mono.then()"
  fullName: "reactor.core.publisher.Mono.then()"
- uid: "reactor.core.publisher.Mono.onErrorStop()"
  name: "Mono.onErrorStop()"
  nameWithType: "Mono.onErrorStop()"
  fullName: "reactor.core.publisher.Mono.onErrorStop()"
- uid: "reactor.core.publisher.Mono.<T>first(reactor.core.publisher.Mono<? extends T>...)"
  name: "Mono.<T>first(Mono<? extends T>...)"
  nameWithType: "Mono.<T>first(Mono<? extends T>...)"
  fullName: "reactor.core.publisher.Mono.<T>first(reactor.core.publisher.Mono<? extends T>...)"
- uid: "reactor.core.publisher.Mono.whenDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>)"
  name: "Mono.whenDelayError(Iterable<? extends Publisher<?>>)"
  nameWithType: "Mono.whenDelayError(Iterable<? extends Publisher<?>>)"
  fullName: "reactor.core.publisher.Mono.whenDelayError(java.lang.Iterable<? extends org.reactivestreams.Publisher<?>>)"
- uid: "reactor.core.publisher.Mono.takeUntilOther(org.reactivestreams.Publisher<?>)"
  name: "Mono.takeUntilOther(Publisher<?>)"
  nameWithType: "Mono.takeUntilOther(Publisher<?>)"
  fullName: "reactor.core.publisher.Mono.takeUntilOther(org.reactivestreams.Publisher<?>)"
- uid: "reactor.core.publisher.Mono.<T2,O>zipWith(reactor.core.publisher.Mono<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends O>)"
  name: "Mono.<T2,O>zipWith(Mono<? extends T2>,BiFunction<? super T,? super T2,? extends O>)"
  nameWithType: "Mono.<T2,O>zipWith(Mono<? extends T2>,BiFunction<? super T,? super T2,? extends O>)"
  fullName: "reactor.core.publisher.Mono.<T2,O>zipWith(reactor.core.publisher.Mono<? extends T2>,java.util.function.BiFunction<? super T,? super T2,? extends O>)"
- uid: "reactor.core.publisher.Mono.<V>then(reactor.core.publisher.Mono<V>)"
  name: "Mono.<V>then(Mono<V>)"
  nameWithType: "Mono.<V>then(Mono<V>)"
  fullName: "reactor.core.publisher.Mono.<V>then(reactor.core.publisher.Mono<V>)"
- uid: "reactor.core.publisher.Mono.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Consumer<? super D>,boolean)"
  name: "Mono.<T,D>using(Callable<? extends D>,Function<? super D,? extends Mono<? extends T>>,Consumer<? super D>,boolean)"
  nameWithType: "Mono.<T,D>using(Callable<? extends D>,Function<? super D,? extends Mono<? extends T>>,Consumer<? super D>,boolean)"
  fullName: "reactor.core.publisher.Mono.<T,D>using(java.util.concurrent.Callable<? extends D>,java.util.function.Function<? super D,? extends reactor.core.publisher.Mono<? extends T>>,java.util.function.Consumer<? super D>,boolean)"
- uid: "reactor.core.publisher.Mono.<R>flatMap(java.util.function.Function<? super T,? extends reactor.core.publisher.Mono<? extends R>>)"
  name: "Mono.<R>flatMap(Function<? super T,? extends Mono<? extends R>>)"
  nameWithType: "Mono.<R>flatMap(Function<? super T,? extends Mono<? extends R>>)"
  fullName: "reactor.core.publisher.Mono.<R>flatMap(java.util.function.Function<? super T,? extends reactor.core.publisher.Mono<? extends R>>)"
- uid: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>)"
  name: "Mono.<T1,T2,T3,T4,T5,T6,T7>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>)"
  nameWithType: "Mono.<T1,T2,T3,T4,T5,T6,T7>zipDelayError(Mono<? extends T1>,Mono<? extends T2>,Mono<? extends T3>,Mono<? extends T4>,Mono<? extends T5>,Mono<? extends T6>,Mono<? extends T7>)"
  fullName: "reactor.core.publisher.Mono.<T1,T2,T3,T4,T5,T6,T7>zipDelayError(reactor.core.publisher.Mono<? extends T1>,reactor.core.publisher.Mono<? extends T2>,reactor.core.publisher.Mono<? extends T3>,reactor.core.publisher.Mono<? extends T4>,reactor.core.publisher.Mono<? extends T5>,reactor.core.publisher.Mono<? extends T6>,reactor.core.publisher.Mono<? extends T7>)"
- uid: "com.azure.messaging.servicebus.implementation.ServiceBusAmqpConnection"
  name: "ServiceBusAmqpConnection"
  nameWithType: "ServiceBusAmqpConnection"
  fullName: "com.azure.messaging.servicebus.implementation.ServiceBusAmqpConnection"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor"
  name: "AmqpChannelProcessor"
  nameWithType: "AmqpChannelProcessor"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor"
- uid: "T>first(java.lang.Iterable"
  name: "T>first(Iterable"
  nameWithType: "T>first(Iterable"
  fullName: "T>first(java.lang.Iterable"
- uid: "? extends T>>)"
  name: "? extends T>>)"
  nameWithType: "? extends T>>)"
  fullName: "? extends T>>)"
- uid: "? extends reactor.core.publisher.Mono"
  name: "? extends Mono"
  nameWithType: "? extends Mono"
  fullName: "? extends reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Mono."
  name: "Mono."
  nameWithType: "Mono."
  fullName: "reactor.core.publisher.Mono."
- uid: "reactor.core.publisher.Mono.doOnError(java.util.function.Consumer"
  name: "Mono.doOnError(Consumer"
  nameWithType: "Mono.doOnError(Consumer"
  fullName: "reactor.core.publisher.Mono.doOnError(java.util.function.Consumer"
- uid: "? super java.lang.Throwable>)"
  name: "? super Throwable>)"
  nameWithType: "? super Throwable>)"
  fullName: "? super java.lang.Throwable>)"
- uid: "? super reactor.core.publisher.Signal"
  name: "? super Signal"
  nameWithType: "? super Signal"
  fullName: "? super reactor.core.publisher.Signal"
- uid: "T>>)"
  name: "T>>)"
  nameWithType: "T>>)"
  fullName: "T>>)"
- uid: "reactor.core.publisher.Mono.doOnEach(java.util.function.Consumer"
  name: "Mono.doOnEach(Consumer"
  nameWithType: "Mono.doOnEach(Consumer"
  fullName: "reactor.core.publisher.Mono.doOnEach(java.util.function.Consumer"
- uid: "? extends T1>,reactor.core.publisher.Mono"
  name: "? extends T1>,Mono"
  nameWithType: "? extends T1>,Mono"
  fullName: "? extends T1>,reactor.core.publisher.Mono"
- uid: "? extends T6>,reactor.core.publisher.Mono"
  name: "? extends T6>,Mono"
  nameWithType: "? extends T6>,Mono"
  fullName: "? extends T6>,reactor.core.publisher.Mono"
- uid: "? extends T2>,reactor.core.publisher.Mono"
  name: "? extends T2>,Mono"
  nameWithType: "? extends T2>,Mono"
  fullName: "? extends T2>,reactor.core.publisher.Mono"
- uid: "? extends T5>,reactor.core.publisher.Mono"
  name: "? extends T5>,Mono"
  nameWithType: "? extends T5>,Mono"
  fullName: "? extends T5>,reactor.core.publisher.Mono"
- uid: "? extends T4>,reactor.core.publisher.Mono"
  name: "? extends T4>,Mono"
  nameWithType: "? extends T4>,Mono"
  fullName: "? extends T4>,reactor.core.publisher.Mono"
- uid: "? extends T7>)"
  name: "? extends T7>)"
  nameWithType: "? extends T7>)"
  fullName: "? extends T7>)"
- uid: "T1,T2,T3,T4,T5,T6,T7>zip(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5,T6,T7>zip(Mono"
  nameWithType: "T1,T2,T3,T4,T5,T6,T7>zip(Mono"
  fullName: "T1,T2,T3,T4,T5,T6,T7>zip(reactor.core.publisher.Mono"
- uid: "? extends T3>,reactor.core.publisher.Mono"
  name: "? extends T3>,Mono"
  nameWithType: "? extends T3>,Mono"
  fullName: "? extends T3>,reactor.core.publisher.Mono"
- uid: "T>justOrEmpty(java.util.Optional"
  name: "T>justOrEmpty(Optional"
  nameWithType: "T>justOrEmpty(Optional"
  fullName: "T>justOrEmpty(java.util.Optional"
- uid: "? extends T>)"
  name: "? extends T>)"
  nameWithType: "? extends T>)"
  fullName: "? extends T>)"
- uid: "T>error(java.lang.Throwable)"
  name: "T>error(Throwable)"
  nameWithType: "T>error(Throwable)"
  fullName: "T>error(java.lang.Throwable)"
- uid: "? extends T5>)"
  name: "? extends T5>)"
  nameWithType: "? extends T5>)"
  fullName: "? extends T5>)"
- uid: "T1,T2,T3,T4,T5>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5>zipDelayError(Mono"
  nameWithType: "T1,T2,T3,T4,T5>zipDelayError(Mono"
  fullName: "T1,T2,T3,T4,T5>zipDelayError(reactor.core.publisher.Mono"
- uid: "T>create(java.util.function.Consumer"
  name: "T>create(Consumer"
  nameWithType: "T>create(Consumer"
  fullName: "T>create(java.util.function.Consumer"
- uid: "reactor.core.publisher.MonoSink"
  name: "MonoSink"
  nameWithType: "MonoSink"
  fullName: "reactor.core.publisher.MonoSink"
- uid: "T1,T2,T3>zip(reactor.core.publisher.Mono"
  name: "T1,T2,T3>zip(Mono"
  nameWithType: "T1,T2,T3>zip(Mono"
  fullName: "T1,T2,T3>zip(reactor.core.publisher.Mono"
- uid: "? extends T3>)"
  name: "? extends T3>)"
  nameWithType: "? extends T3>)"
  fullName: "? extends T3>)"
- uid: "? super reactor.core.publisher.Mono"
  name: "? super Mono"
  nameWithType: "? super Mono"
  fullName: "? super reactor.core.publisher.Mono"
- uid: "P>as(java.util.function.Function"
  name: "P>as(Function"
  nameWithType: "P>as(Function"
  fullName: "P>as(java.util.function.Function"
- uid: "T>,P>)"
  name: "T>,P>)"
  nameWithType: "T>,P>)"
  fullName: "T>,P>)"
- uid: "V>transformDeferred(java.util.function.Function"
  name: "V>transformDeferred(Function"
  nameWithType: "V>transformDeferred(Function"
  fullName: "V>transformDeferred(java.util.function.Function"
- uid: "V>>)"
  name: "V>>)"
  nameWithType: "V>>)"
  fullName: "V>>)"
- uid: "T>,? extends org.reactivestreams.Publisher"
  name: "T>,? extends Publisher"
  nameWithType: "T>,? extends Publisher"
  fullName: "T>,? extends org.reactivestreams.Publisher"
- uid: "? extends T>>,java.util.function.Function"
  name: "? extends T>>,Function"
  nameWithType: "? extends T>>,Function"
  fullName: "? extends T>>,java.util.function.Function"
- uid: "? super D,? extends org.reactivestreams.Publisher"
  name: "? super D,? extends Publisher"
  nameWithType: "? super D,? extends Publisher"
  fullName: "? super D,? extends org.reactivestreams.Publisher"
- uid: "?>>)"
  name: "?>>)"
  nameWithType: "?>>)"
  fullName: "?>>)"
- uid: "D>,java.util.function.Function"
  name: "D>,Function"
  nameWithType: "D>,Function"
  fullName: "D>,java.util.function.Function"
- uid: "T,D>usingWhen(org.reactivestreams.Publisher"
  name: "T,D>usingWhen(Publisher"
  nameWithType: "T,D>usingWhen(Publisher"
  fullName: "T,D>usingWhen(org.reactivestreams.Publisher"
- uid: "? super D,? extends reactor.core.publisher.Mono"
  name: "? super D,? extends Mono"
  nameWithType: "? super D,? extends Mono"
  fullName: "? super D,? extends reactor.core.publisher.Mono"
- uid: "T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(Mono"
  nameWithType: "T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(Mono"
  fullName: "T1,T2,T3,T4,T5,T6,T7,T8>zipDelayError(reactor.core.publisher.Mono"
- uid: "? extends T8>)"
  name: "? extends T8>)"
  nameWithType: "? extends T8>)"
  fullName: "? extends T8>)"
- uid: "? extends T7>,reactor.core.publisher.Mono"
  name: "? extends T7>,Mono"
  nameWithType: "? extends T7>,Mono"
  fullName: "? extends T7>,reactor.core.publisher.Mono"
- uid: "T>fromRunnable(java.lang.Runnable)"
  name: "T>fromRunnable(Runnable)"
  nameWithType: "T>fromRunnable(Runnable)"
  fullName: "T>fromRunnable(java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.filterWhen(java.util.function.Function"
  name: "Mono.filterWhen(Function"
  nameWithType: "Mono.filterWhen(Function"
  fullName: "reactor.core.publisher.Mono.filterWhen(java.util.function.Function"
- uid: "java.lang.Boolean>>)"
  name: "Boolean>>)"
  nameWithType: "Boolean>>)"
  fullName: "java.lang.Boolean>>)"
- uid: "? super T,? extends org.reactivestreams.Publisher"
  name: "? super T,? extends Publisher"
  nameWithType: "? super T,? extends Publisher"
  fullName: "? super T,? extends org.reactivestreams.Publisher"
- uid: "U>)"
  name: "U>)"
  nameWithType: "U>)"
  fullName: "U>)"
- uid: "U>delaySubscription(org.reactivestreams.Publisher"
  name: "U>delaySubscription(Publisher"
  nameWithType: "U>delaySubscription(Publisher"
  fullName: "U>delaySubscription(org.reactivestreams.Publisher"
- uid: "reactor.core.publisher.Mono.or(reactor.core.publisher.Mono"
  name: "Mono.or(Mono"
  nameWithType: "Mono.or(Mono"
  fullName: "reactor.core.publisher.Mono.or(reactor.core.publisher.Mono"
- uid: "E>,T)"
  name: "E>,T)"
  nameWithType: "E>,T)"
  fullName: "E>,T)"
- uid: "E>onErrorReturn(java.lang.Class"
  name: "E>onErrorReturn(Class"
  nameWithType: "E>onErrorReturn(Class"
  fullName: "E>onErrorReturn(java.lang.Class"
- uid: "U>ofType(java.lang.Class"
  name: "U>ofType(Class"
  nameWithType: "U>ofType(Class"
  fullName: "U>ofType(java.lang.Class"
- uid: "reactor.core.publisher.Mono.delayUntil(java.util.function.Function"
  name: "Mono.delayUntil(Function"
  nameWithType: "Mono.delayUntil(Function"
  fullName: "reactor.core.publisher.Mono.delayUntil(java.util.function.Function"
- uid: "R>flatMapMany(java.util.function.Function"
  name: "R>flatMapMany(Function"
  nameWithType: "R>flatMapMany(Function"
  fullName: "R>flatMapMany(java.util.function.Function"
- uid: "? extends R>>)"
  name: "? extends R>>)"
  nameWithType: "? extends R>>)"
  fullName: "? extends R>>)"
- uid: "? extends org.reactivestreams.Publisher"
  name: "? extends Publisher"
  nameWithType: "? extends Publisher"
  fullName: "? extends org.reactivestreams.Publisher"
- uid: "? extends R>>,java.util.function.Function"
  name: "? extends R>>,Function"
  nameWithType: "? extends R>>,Function"
  fullName: "? extends R>>,java.util.function.Function"
- uid: "? extends R>>,java.util.function.Supplier"
  name: "? extends R>>,Supplier"
  nameWithType: "? extends R>>,Supplier"
  fullName: "? extends R>>,java.util.function.Supplier"
- uid: "? super java.lang.Throwable,? extends org.reactivestreams.Publisher"
  name: "? super Throwable,? extends Publisher"
  nameWithType: "? super Throwable,? extends Publisher"
  fullName: "? super java.lang.Throwable,? extends org.reactivestreams.Publisher"
- uid: "reactor.core.publisher.Mono.mergeWith(org.reactivestreams.Publisher"
  name: "Mono.mergeWith(Publisher"
  nameWithType: "Mono.mergeWith(Publisher"
  fullName: "reactor.core.publisher.Mono.mergeWith(org.reactivestreams.Publisher"
- uid: "reactor.core.publisher.Mono.whenDelayError(org.reactivestreams.Publisher"
  name: "Mono.whenDelayError(Publisher"
  nameWithType: "Mono.whenDelayError(Publisher"
  fullName: "reactor.core.publisher.Mono.whenDelayError(org.reactivestreams.Publisher"
- uid: "?>...)"
  name: "?>...)"
  nameWithType: "?>...)"
  fullName: "?>...)"
- uid: "T1,T2,T3,T4>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4>zipDelayError(Mono"
  nameWithType: "T1,T2,T3,T4>zipDelayError(Mono"
  fullName: "T1,T2,T3,T4>zipDelayError(reactor.core.publisher.Mono"
- uid: "? extends T4>)"
  name: "? extends T4>)"
  nameWithType: "? extends T4>)"
  fullName: "? extends T4>)"
- uid: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Function"
  name: "Mono.onErrorMap(Function"
  nameWithType: "Mono.onErrorMap(Function"
  fullName: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Function"
- uid: "? super java.lang.Throwable,? extends java.lang.Throwable>)"
  name: "? super Throwable,? extends Throwable>)"
  nameWithType: "? super Throwable,? extends Throwable>)"
  fullName: "? super java.lang.Throwable,? extends java.lang.Throwable>)"
- uid: "? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher"
  name: "? super D,? super Throwable,? extends Publisher"
  nameWithType: "? super D,? super Throwable,? extends Publisher"
  fullName: "? super D,? super java.lang.Throwable,? extends org.reactivestreams.Publisher"
- uid: "?>>,java.util.function.Function"
  name: "?>>,Function"
  nameWithType: "?>>,Function"
  fullName: "?>>,java.util.function.Function"
- uid: "?>>,java.util.function.BiFunction"
  name: "?>>,BiFunction"
  nameWithType: "?>>,BiFunction"
  fullName: "?>>,java.util.function.BiFunction"
- uid: "T1,T2,O>zip(reactor.core.publisher.Mono"
  name: "T1,T2,O>zip(Mono"
  nameWithType: "T1,T2,O>zip(Mono"
  fullName: "T1,T2,O>zip(reactor.core.publisher.Mono"
- uid: "? super T1,? super T2,? extends O>)"
  name: "? super T1,? super T2,? extends O>)"
  nameWithType: "? super T1,? super T2,? extends O>)"
  fullName: "? super T1,? super T2,? extends O>)"
- uid: "? extends T2>,java.util.function.BiFunction"
  name: "? extends T2>,BiFunction"
  nameWithType: "? extends T2>,BiFunction"
  fullName: "? extends T2>,java.util.function.BiFunction"
- uid: "reactor.core.publisher.Mono.retry(long,java.util.function.Predicate"
  name: "Mono.retry(long,Predicate"
  nameWithType: "Mono.retry(long,Predicate"
  fullName: "reactor.core.publisher.Mono.retry(long,java.util.function.Predicate"
- uid: "R>zip(java.util.function.Function"
  name: "R>zip(Function"
  nameWithType: "R>zip(Function"
  fullName: "R>zip(java.util.function.Function"
- uid: "? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono"
  name: "? super Object[],? extends R>,Mono"
  nameWithType: "? super Object[],? extends R>,Mono"
  fullName: "? super java.lang.Object[],? extends R>,reactor.core.publisher.Mono"
- uid: "T>empty()"
  name: "T>empty()"
  nameWithType: "T>empty()"
  fullName: "T>empty()"
- uid: "T>,java.util.function.Consumer"
  name: "T>,Consumer"
  nameWithType: "T>,Consumer"
  fullName: "T>,java.util.function.Consumer"
- uid: "? super T>,java.util.function.LongConsumer,java.lang.Runnable)"
  name: "? super T>,LongConsumer,Runnable)"
  nameWithType: "? super T>,LongConsumer,Runnable)"
  fullName: "? super T>,java.util.function.LongConsumer,java.lang.Runnable)"
- uid: "? super org.reactivestreams.Subscription>,java.util.function.Consumer"
  name: "? super Subscription>,Consumer"
  nameWithType: "? super Subscription>,Consumer"
  fullName: "? super org.reactivestreams.Subscription>,java.util.function.Consumer"
- uid: "T>doOnSignal(reactor.core.publisher.Mono"
  name: "T>doOnSignal(Mono"
  nameWithType: "T>doOnSignal(Mono"
  fullName: "T>doOnSignal(reactor.core.publisher.Mono"
- uid: "E>,java.util.function.Function"
  name: "E>,Function"
  nameWithType: "E>,Function"
  fullName: "E>,java.util.function.Function"
- uid: "? super E,? extends reactor.core.publisher.Mono"
  name: "? super E,? extends Mono"
  nameWithType: "? super E,? extends Mono"
  fullName: "? super E,? extends reactor.core.publisher.Mono"
- uid: "E>onErrorResume(java.lang.Class"
  name: "E>onErrorResume(Class"
  nameWithType: "E>onErrorResume(Class"
  fullName: "E>onErrorResume(java.lang.Class"
- uid: "V>compose(java.util.function.Function"
  name: "V>compose(Function"
  nameWithType: "V>compose(Function"
  fullName: "V>compose(java.util.function.Function"
- uid: "T>fromFuture(java.util.function.Supplier"
  name: "T>fromFuture(Supplier"
  nameWithType: "T>fromFuture(Supplier"
  fullName: "T>fromFuture(java.util.function.Supplier"
- uid: "? extends java.util.concurrent.CompletableFuture"
  name: "? extends CompletableFuture"
  nameWithType: "? extends CompletableFuture"
  fullName: "? extends java.util.concurrent.CompletableFuture"
- uid: "R>map(java.util.function.Function"
  name: "R>map(Function"
  nameWithType: "R>map(Function"
  fullName: "R>map(java.util.function.Function"
- uid: "? super T,? extends R>)"
  name: "? super T,? extends R>)"
  nameWithType: "? super T,? extends R>)"
  fullName: "? super T,? extends R>)"
- uid: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer"
  name: "Mono.subscribe(Consumer"
  nameWithType: "Mono.subscribe(Consumer"
  fullName: "reactor.core.publisher.Mono.subscribe(java.util.function.Consumer"
- uid: "? super T>)"
  name: "? super T>)"
  nameWithType: "? super T>)"
  fullName: "? super T>)"
- uid: "T>ignoreElements(org.reactivestreams.Publisher"
  name: "T>ignoreElements(Publisher"
  nameWithType: "T>ignoreElements(Publisher"
  fullName: "T>ignoreElements(org.reactivestreams.Publisher"
- uid: "T>)"
  name: "T>)"
  nameWithType: "T>)"
  fullName: "T>)"
- uid: "? super org.reactivestreams.Subscription>)"
  name: "? super Subscription>)"
  nameWithType: "? super Subscription>)"
  fullName: "? super org.reactivestreams.Subscription>)"
- uid: "reactor.core.publisher.Mono.doOnSubscribe(java.util.function.Consumer"
  name: "Mono.doOnSubscribe(Consumer"
  nameWithType: "Mono.doOnSubscribe(Consumer"
  fullName: "reactor.core.publisher.Mono.doOnSubscribe(java.util.function.Consumer"
- uid: "? extends T2>>)"
  name: "? extends T2>>)"
  nameWithType: "? extends T2>>)"
  fullName: "? extends T2>>)"
- uid: "T,reactor.core.publisher.Mono"
  name: "T,Mono"
  nameWithType: "T,Mono"
  fullName: "T,reactor.core.publisher.Mono"
- uid: "T2>zipWhen(java.util.function.Function"
  name: "T2>zipWhen(Function"
  nameWithType: "T2>zipWhen(Function"
  fullName: "T2>zipWhen(java.util.function.Function"
- uid: "? super java.lang.Object[],? extends R>)"
  name: "? super Object[],? extends R>)"
  nameWithType: "? super Object[],? extends R>)"
  fullName: "? super java.lang.Object[],? extends R>)"
- uid: "R>zipDelayError(java.lang.Iterable"
  name: "R>zipDelayError(Iterable"
  nameWithType: "R>zipDelayError(Iterable"
  fullName: "R>zipDelayError(java.lang.Iterable"
- uid: "reactor.core.publisher.Flux"
  name: "Flux"
  nameWithType: "Flux"
  fullName: "reactor.core.publisher.Flux"
- uid: "reactor.core.publisher.Mono.repeatWhenEmpty(int,java.util.function.Function"
  name: "Mono.repeatWhenEmpty(int,Function"
  nameWithType: "Mono.repeatWhenEmpty(int,Function"
  fullName: "reactor.core.publisher.Mono.repeatWhenEmpty(int,java.util.function.Function"
- uid: "java.lang.Long>,? extends org.reactivestreams.Publisher"
  name: "Long>,? extends Publisher"
  nameWithType: "Long>,? extends Publisher"
  fullName: "java.lang.Long>,? extends org.reactivestreams.Publisher"
- uid: "T>defer(java.util.function.Supplier"
  name: "T>defer(Supplier"
  nameWithType: "T>defer(Supplier"
  fullName: "T>defer(java.util.function.Supplier"
- uid: "reactor.core.publisher.Mono.and(org.reactivestreams.Publisher"
  name: "Mono.and(Publisher"
  nameWithType: "Mono.and(Publisher"
  fullName: "reactor.core.publisher.Mono.and(org.reactivestreams.Publisher"
- uid: "?>)"
  name: "?>)"
  nameWithType: "?>)"
  fullName: "?>)"
- uid: "U>timeout(org.reactivestreams.Publisher"
  name: "U>timeout(Publisher"
  nameWithType: "U>timeout(Publisher"
  fullName: "U>timeout(org.reactivestreams.Publisher"
- uid: "reactor.core.publisher.Mono.doOnError(java.util.function.Predicate"
  name: "Mono.doOnError(Predicate"
  nameWithType: "Mono.doOnError(Predicate"
  fullName: "reactor.core.publisher.Mono.doOnError(java.util.function.Predicate"
- uid: "? super java.lang.Throwable>,java.util.function.Consumer"
  name: "? super Throwable>,Consumer"
  nameWithType: "? super Throwable>,Consumer"
  fullName: "? super java.lang.Throwable>,java.util.function.Consumer"
- uid: "reactor.core.publisher.Mono.retryWhen(java.util.function.Function"
  name: "Mono.retryWhen(Function"
  nameWithType: "Mono.retryWhen(Function"
  fullName: "reactor.core.publisher.Mono.retryWhen(java.util.function.Function"
- uid: "java.lang.Throwable>,? extends org.reactivestreams.Publisher"
  name: "Throwable>,? extends Publisher"
  nameWithType: "Throwable>,? extends Publisher"
  fullName: "java.lang.Throwable>,? extends org.reactivestreams.Publisher"
- uid: "java.lang.Throwable,java.lang.Object>)"
  name: "Throwable,Object>)"
  nameWithType: "Throwable,Object>)"
  fullName: "java.lang.Throwable,java.lang.Object>)"
- uid: "E>onErrorContinue(java.lang.Class"
  name: "E>onErrorContinue(Class"
  nameWithType: "E>onErrorContinue(Class"
  fullName: "E>onErrorContinue(java.lang.Class"
- uid: "E>,java.util.function.BiConsumer"
  name: "E>,BiConsumer"
  nameWithType: "E>,BiConsumer"
  fullName: "E>,java.util.function.BiConsumer"
- uid: "V>thenReturn(V)"
  name: "V>thenReturn(V)"
  nameWithType: "V>thenReturn(V)"
  fullName: "V>thenReturn(V)"
- uid: "? super T>,java.util.function.Consumer"
  name: "? super T>,Consumer"
  nameWithType: "? super T>,Consumer"
  fullName: "? super T>,java.util.function.Consumer"
- uid: "? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer"
  name: "? super Throwable>,Runnable,Consumer"
  nameWithType: "? super Throwable>,Runnable,Consumer"
  fullName: "? super java.lang.Throwable>,java.lang.Runnable,java.util.function.Consumer"
- uid: "V>)"
  name: "V>)"
  nameWithType: "V>)"
  fullName: "V>)"
- uid: "V>thenMany(org.reactivestreams.Publisher"
  name: "V>thenMany(Publisher"
  nameWithType: "V>thenMany(Publisher"
  fullName: "V>thenMany(org.reactivestreams.Publisher"
- uid: "T>deferWithContext(java.util.function.Function"
  name: "T>deferWithContext(Function"
  nameWithType: "T>deferWithContext(Function"
  fullName: "T>deferWithContext(java.util.function.Function"
- uid: "reactor.util.context.Context,? extends reactor.core.publisher.Mono"
  name: "Context,? extends Mono"
  nameWithType: "Context,? extends Mono"
  fullName: "reactor.util.context.Context,? extends reactor.core.publisher.Mono"
- uid: "T>onLastAssembly(reactor.core.publisher.Mono"
  name: "T>onLastAssembly(Mono"
  nameWithType: "T>onLastAssembly(Mono"
  fullName: "T>onLastAssembly(reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Mono.retry(java.util.function.Predicate"
  name: "Mono.retry(Predicate"
  nameWithType: "Mono.retry(Predicate"
  fullName: "reactor.core.publisher.Mono.retry(java.util.function.Predicate"
- uid: "T>onAssembly(reactor.core.publisher.Mono"
  name: "T>onAssembly(Mono"
  nameWithType: "T>onAssembly(Mono"
  fullName: "T>onAssembly(reactor.core.publisher.Mono"
- uid: "? super T,? extends java.lang.Iterable"
  name: "? super T,? extends Iterable"
  nameWithType: "? super T,? extends Iterable"
  fullName: "? super T,? extends java.lang.Iterable"
- uid: "R>flatMapIterable(java.util.function.Function"
  name: "R>flatMapIterable(Function"
  nameWithType: "R>flatMapIterable(Function"
  fullName: "R>flatMapIterable(java.util.function.Function"
- uid: "reactor.core.publisher.Mono.expand(java.util.function.Function"
  name: "Mono.expand(Function"
  nameWithType: "Mono.expand(Function"
  fullName: "reactor.core.publisher.Mono.expand(java.util.function.Function"
- uid: "T2>zipWith(reactor.core.publisher.Mono"
  name: "T2>zipWith(Mono"
  nameWithType: "T2>zipWith(Mono"
  fullName: "T2>zipWith(reactor.core.publisher.Mono"
- uid: "? extends T2>)"
  name: "? extends T2>)"
  nameWithType: "? extends T2>)"
  fullName: "? extends T2>)"
- uid: "reactor.core.publisher.Mono.subscribe(org.reactivestreams.Subscriber"
  name: "Mono.subscribe(Subscriber"
  nameWithType: "Mono.subscribe(Subscriber"
  fullName: "reactor.core.publisher.Mono.subscribe(org.reactivestreams.Subscriber"
- uid: "? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)"
  name: "? super Throwable>,Runnable,Context)"
  nameWithType: "? super Throwable>,Runnable,Context)"
  fullName: "? super java.lang.Throwable>,java.lang.Runnable,reactor.util.context.Context)"
- uid: "T1,T2,T3,T4,T5,T6>zip(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5,T6>zip(Mono"
  nameWithType: "T1,T2,T3,T4,T5,T6>zip(Mono"
  fullName: "T1,T2,T3,T4,T5,T6>zip(reactor.core.publisher.Mono"
- uid: "? extends T6>)"
  name: "? extends T6>)"
  nameWithType: "? extends T6>)"
  fullName: "? extends T6>)"
- uid: "T1,T2,T3,T4,T5,T6,T7,T8>zip(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5,T6,T7,T8>zip(Mono"
  nameWithType: "T1,T2,T3,T4,T5,T6,T7,T8>zip(Mono"
  fullName: "T1,T2,T3,T4,T5,T6,T7,T8>zip(reactor.core.publisher.Mono"
- uid: "T>fromCompletionStage(java.util.function.Supplier"
  name: "T>fromCompletionStage(Supplier"
  nameWithType: "T>fromCompletionStage(Supplier"
  fullName: "T>fromCompletionStage(java.util.function.Supplier"
- uid: "? extends java.util.concurrent.CompletionStage"
  name: "? extends CompletionStage"
  nameWithType: "? extends CompletionStage"
  fullName: "? extends java.util.concurrent.CompletionStage"
- uid: "reactor.core.publisher.Mono.switchIfEmpty(reactor.core.publisher.Mono"
  name: "Mono.switchIfEmpty(Mono"
  nameWithType: "Mono.switchIfEmpty(Mono"
  fullName: "reactor.core.publisher.Mono.switchIfEmpty(reactor.core.publisher.Mono"
- uid: "T1,T2,T3,T4,T5,T6>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5,T6>zipDelayError(Mono"
  nameWithType: "T1,T2,T3,T4,T5,T6>zipDelayError(Mono"
  fullName: "T1,T2,T3,T4,T5,T6>zipDelayError(reactor.core.publisher.Mono"
- uid: "T>,? extends reactor.core.publisher.Mono"
  name: "T>,? extends Mono"
  nameWithType: "T>,? extends Mono"
  fullName: "T>,? extends reactor.core.publisher.Mono"
- uid: "R>publish(java.util.function.Function"
  name: "R>publish(Function"
  nameWithType: "R>publish(Function"
  fullName: "R>publish(java.util.function.Function"
- uid: "R>handle(java.util.function.BiConsumer"
  name: "R>handle(BiConsumer"
  nameWithType: "R>handle(BiConsumer"
  fullName: "R>handle(java.util.function.BiConsumer"
- uid: "R>>)"
  name: "R>>)"
  nameWithType: "R>>)"
  fullName: "R>>)"
- uid: "? super T,reactor.core.publisher.SynchronousSink"
  name: "? super T,SynchronousSink"
  nameWithType: "? super T,SynchronousSink"
  fullName: "? super T,reactor.core.publisher.SynchronousSink"
- uid: "? super R>)"
  name: "? super R>)"
  nameWithType: "? super R>)"
  fullName: "? super R>)"
- uid: "R>,java.util.function.Consumer"
  name: "R>,Consumer"
  nameWithType: "R>,Consumer"
  fullName: "R>,java.util.function.Consumer"
- uid: "R>doOnDiscard(java.lang.Class"
  name: "R>doOnDiscard(Class"
  nameWithType: "R>doOnDiscard(Class"
  fullName: "R>doOnDiscard(java.lang.Class"
- uid: "T>just(T)"
  name: "T>just(T)"
  nameWithType: "T>just(T)"
  fullName: "T>just(T)"
- uid: "X>dematerialize()"
  name: "X>dematerialize()"
  nameWithType: "X>dematerialize()"
  fullName: "X>dematerialize()"
- uid: "R>zipDelayError(java.util.function.Function"
  name: "R>zipDelayError(Function"
  nameWithType: "R>zipDelayError(Function"
  fullName: "R>zipDelayError(java.util.function.Function"
- uid: "T>doOnTerminalSignal(reactor.core.publisher.Mono"
  name: "T>doOnTerminalSignal(Mono"
  nameWithType: "T>doOnTerminalSignal(Mono"
  fullName: "T>doOnTerminalSignal(reactor.core.publisher.Mono"
- uid: "? super java.lang.Throwable>,java.util.function.BiConsumer"
  name: "? super Throwable>,BiConsumer"
  nameWithType: "? super Throwable>,BiConsumer"
  fullName: "? super java.lang.Throwable>,java.util.function.BiConsumer"
- uid: "? super T,java.lang.Throwable>)"
  name: "? super T,Throwable>)"
  nameWithType: "? super T,Throwable>)"
  fullName: "? super T,java.lang.Throwable>)"
- uid: "? extends T>,org.reactivestreams.Publisher"
  name: "? extends T>,Publisher"
  nameWithType: "? extends T>,Publisher"
  fullName: "? extends T>,org.reactivestreams.Publisher"
- uid: "? super T,? super T>,int)"
  name: "? super T,? super T>,int)"
  nameWithType: "? super T,? super T>,int)"
  fullName: "? super T,? super T>,int)"
- uid: "T>sequenceEqual(org.reactivestreams.Publisher"
  name: "T>sequenceEqual(Publisher"
  nameWithType: "T>sequenceEqual(Publisher"
  fullName: "T>sequenceEqual(org.reactivestreams.Publisher"
- uid: "? extends T>,java.util.function.BiPredicate"
  name: "? extends T>,BiPredicate"
  nameWithType: "? extends T>,BiPredicate"
  fullName: "? extends T>,java.util.function.BiPredicate"
- uid: "reactor.core.publisher.Mono.subscriberContext(java.util.function.Function"
  name: "Mono.subscriberContext(Function"
  nameWithType: "Mono.subscriberContext(Function"
  fullName: "reactor.core.publisher.Mono.subscriberContext(java.util.function.Function"
- uid: "reactor.util.context.Context,reactor.util.context.Context>)"
  name: "Context,Context>)"
  nameWithType: "Context,Context>)"
  fullName: "reactor.util.context.Context,reactor.util.context.Context>)"
- uid: "reactor.core.publisher.Mono.doOnSuccessOrError(java.util.function.BiConsumer"
  name: "Mono.doOnSuccessOrError(BiConsumer"
  nameWithType: "Mono.doOnSuccessOrError(BiConsumer"
  fullName: "reactor.core.publisher.Mono.doOnSuccessOrError(java.util.function.BiConsumer"
- uid: "reactor.core.publisher.Mono.when(org.reactivestreams.Publisher"
  name: "Mono.when(Publisher"
  nameWithType: "Mono.when(Publisher"
  fullName: "reactor.core.publisher.Mono.when(org.reactivestreams.Publisher"
- uid: "E>doOnError(java.lang.Class"
  name: "E>doOnError(Class"
  nameWithType: "E>doOnError(Class"
  fullName: "E>doOnError(java.lang.Class"
- uid: "E>,java.util.function.Consumer"
  name: "E>,Consumer"
  nameWithType: "E>,Consumer"
  fullName: "E>,java.util.function.Consumer"
- uid: "? super E>)"
  name: "? super E>)"
  nameWithType: "? super E>)"
  fullName: "? super E>)"
- uid: "T1,T2,T3,T4>zip(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4>zip(Mono"
  nameWithType: "T1,T2,T3,T4>zip(Mono"
  fullName: "T1,T2,T3,T4>zip(reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Mono.filter(java.util.function.Predicate"
  name: "Mono.filter(Predicate"
  nameWithType: "Mono.filter(Predicate"
  fullName: "reactor.core.publisher.Mono.filter(java.util.function.Predicate"
- uid: "T1,T2,T3,T4,T5>zip(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5>zip(Mono"
  nameWithType: "T1,T2,T3,T4,T5>zip(Mono"
  fullName: "T1,T2,T3,T4,T5>zip(reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Mono.onErrorContinue(java.util.function.BiConsumer"
  name: "Mono.onErrorContinue(BiConsumer"
  nameWithType: "Mono.onErrorContinue(BiConsumer"
  fullName: "reactor.core.publisher.Mono.onErrorContinue(java.util.function.BiConsumer"
- uid: "reactor.core.publisher.Mono.when(java.lang.Iterable"
  name: "Mono.when(Iterable"
  nameWithType: "Mono.when(Iterable"
  fullName: "reactor.core.publisher.Mono.when(java.lang.Iterable"
- uid: "? super T,? super T>)"
  name: "? super T,? super T>)"
  nameWithType: "? super T,? super T>)"
  fullName: "? super T,? super T>)"
- uid: "reactor.core.publisher.Mono.onErrorReturn(java.util.function.Predicate"
  name: "Mono.onErrorReturn(Predicate"
  nameWithType: "Mono.onErrorReturn(Predicate"
  fullName: "reactor.core.publisher.Mono.onErrorReturn(java.util.function.Predicate"
- uid: "? super java.lang.Throwable>,T)"
  name: "? super Throwable>,T)"
  nameWithType: "? super Throwable>,T)"
  fullName: "? super java.lang.Throwable>,T)"
- uid: "reactor.core.publisher.Mono.expandDeep(java.util.function.Function"
  name: "Mono.expandDeep(Function"
  nameWithType: "Mono.expandDeep(Function"
  fullName: "reactor.core.publisher.Mono.expandDeep(java.util.function.Function"
- uid: "reactor.core.publisher.Mono.doOnNext(java.util.function.Consumer"
  name: "Mono.doOnNext(Consumer"
  nameWithType: "Mono.doOnNext(Consumer"
  fullName: "reactor.core.publisher.Mono.doOnNext(java.util.function.Consumer"
- uid: "E>)"
  name: "E>)"
  nameWithType: "E>)"
  fullName: "E>)"
- uid: "E>cast(java.lang.Class"
  name: "E>cast(Class"
  nameWithType: "E>cast(Class"
  fullName: "E>cast(java.lang.Class"
- uid: "? extends T2>>,java.util.function.BiFunction"
  name: "? extends T2>>,BiFunction"
  nameWithType: "? extends T2>>,BiFunction"
  fullName: "? extends T2>>,java.util.function.BiFunction"
- uid: "T,T2,O>)"
  name: "T,T2,O>)"
  nameWithType: "T,T2,O>)"
  fullName: "T,T2,O>)"
- uid: "T2,O>zipWhen(java.util.function.Function"
  name: "T2,O>zipWhen(Function"
  nameWithType: "T2,O>zipWhen(Function"
  fullName: "T2,O>zipWhen(java.util.function.Function"
- uid: "T>from(org.reactivestreams.Publisher"
  name: "T>from(Publisher"
  nameWithType: "T>from(Publisher"
  fullName: "T>from(org.reactivestreams.Publisher"
- uid: "reactor.core.publisher.Mono.repeatWhen(java.util.function.Function"
  name: "Mono.repeatWhen(Function"
  nameWithType: "Mono.repeatWhen(Function"
  fullName: "reactor.core.publisher.Mono.repeatWhen(java.util.function.Function"
- uid: "com.azure.core.amqp.implementation.AmqpChannelProcessor.subscribe(reactor.core.CoreSubscriber"
  name: "AmqpChannelProcessor.subscribe(CoreSubscriber"
  nameWithType: "AmqpChannelProcessor.subscribe(CoreSubscriber"
  fullName: "com.azure.core.amqp.implementation.AmqpChannelProcessor.subscribe(reactor.core.CoreSubscriber"
- uid: "T>fromFuture(java.util.concurrent.CompletableFuture"
  name: "T>fromFuture(CompletableFuture"
  nameWithType: "T>fromFuture(CompletableFuture"
  fullName: "T>fromFuture(java.util.concurrent.CompletableFuture"
- uid: "T>fromCompletionStage(java.util.concurrent.CompletionStage"
  name: "T>fromCompletionStage(CompletionStage"
  nameWithType: "T>fromCompletionStage(CompletionStage"
  fullName: "T>fromCompletionStage(java.util.concurrent.CompletionStage"
- uid: "T,D>using(java.util.concurrent.Callable"
  name: "T,D>using(Callable"
  nameWithType: "T,D>using(Callable"
  fullName: "T,D>using(java.util.concurrent.Callable"
- uid: "? extends D>,java.util.function.Function"
  name: "? extends D>,Function"
  nameWithType: "? extends D>,Function"
  fullName: "? extends D>,java.util.function.Function"
- uid: "? extends T>>,java.util.function.Consumer"
  name: "? extends T>>,Consumer"
  nameWithType: "? extends T>>,Consumer"
  fullName: "? extends T>>,java.util.function.Consumer"
- uid: "? super D>)"
  name: "? super D>)"
  nameWithType: "? super D>)"
  fullName: "? super D>)"
- uid: "T1,T2>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2>zipDelayError(Mono"
  nameWithType: "T1,T2>zipDelayError(Mono"
  fullName: "T1,T2>zipDelayError(reactor.core.publisher.Mono"
- uid: "R>zip(java.lang.Iterable"
  name: "R>zip(Iterable"
  nameWithType: "R>zip(Iterable"
  fullName: "R>zip(java.lang.Iterable"
- uid: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono"
  name: "Mono.timeout(Duration,Mono"
  nameWithType: "Mono.timeout(Duration,Mono"
  fullName: "reactor.core.publisher.Mono.timeout(java.time.Duration,reactor.core.publisher.Mono"
- uid: "? extends T>,reactor.core.scheduler.Scheduler)"
  name: "? extends T>,Scheduler)"
  nameWithType: "? extends T>,Scheduler)"
  fullName: "? extends T>,reactor.core.scheduler.Scheduler)"
- uid: "reactor.core.publisher.Mono.doAfterSuccessOrError(java.util.function.BiConsumer"
  name: "Mono.doAfterSuccessOrError(BiConsumer"
  nameWithType: "Mono.doAfterSuccessOrError(BiConsumer"
  fullName: "reactor.core.publisher.Mono.doAfterSuccessOrError(java.util.function.BiConsumer"
- uid: "E>subscribeWith(E)"
  name: "E>subscribeWith(E)"
  nameWithType: "E>subscribeWith(E)"
  fullName: "E>subscribeWith(E)"
- uid: "E>onErrorMap(java.lang.Class"
  name: "E>onErrorMap(Class"
  nameWithType: "E>onErrorMap(Class"
  fullName: "E>onErrorMap(java.lang.Class"
- uid: "? super E,? extends java.lang.Throwable>)"
  name: "? super E,? extends Throwable>)"
  nameWithType: "? super E,? extends Throwable>)"
  fullName: "? super E,? extends java.lang.Throwable>)"
- uid: "T>fromCallable(java.util.concurrent.Callable"
  name: "T>fromCallable(Callable"
  nameWithType: "T>fromCallable(Callable"
  fullName: "T>fromCallable(java.util.concurrent.Callable"
- uid: "E>onErrorContinue(java.util.function.Predicate"
  name: "E>onErrorContinue(Predicate"
  nameWithType: "E>onErrorContinue(Predicate"
  fullName: "E>onErrorContinue(java.util.function.Predicate"
- uid: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Predicate"
  name: "Mono.onErrorResume(Predicate"
  nameWithType: "Mono.onErrorResume(Predicate"
  fullName: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Predicate"
- uid: "? super java.lang.Throwable>,java.util.function.Function"
  name: "? super Throwable>,Function"
  nameWithType: "? super Throwable>,Function"
  fullName: "? super java.lang.Throwable>,java.util.function.Function"
- uid: "? super java.lang.Throwable,? extends reactor.core.publisher.Mono"
  name: "? super Throwable,? extends Mono"
  nameWithType: "? super Throwable,? extends Mono"
  fullName: "? super java.lang.Throwable,? extends reactor.core.publisher.Mono"
- uid: "U>,reactor.core.publisher.Mono"
  name: "U>,Mono"
  nameWithType: "U>,Mono"
  fullName: "U>,reactor.core.publisher.Mono"
- uid: "T>fromSupplier(java.util.function.Supplier"
  name: "T>fromSupplier(Supplier"
  nameWithType: "T>fromSupplier(Supplier"
  fullName: "T>fromSupplier(java.util.function.Supplier"
- uid: "reactor.core.publisher.Mono.doOnSuccess(java.util.function.Consumer"
  name: "Mono.doOnSuccess(Consumer"
  nameWithType: "Mono.doOnSuccess(Consumer"
  fullName: "reactor.core.publisher.Mono.doOnSuccess(java.util.function.Consumer"
- uid: "T>justOrEmpty(T)"
  name: "T>justOrEmpty(T)"
  nameWithType: "T>justOrEmpty(T)"
  fullName: "T>justOrEmpty(T)"
- uid: "V>transform(java.util.function.Function"
  name: "V>transform(Function"
  nameWithType: "V>transform(Function"
  fullName: "V>transform(java.util.function.Function"
- uid: "? extends T>>,int)"
  name: "? extends T>>,int)"
  nameWithType: "? extends T>>,int)"
  fullName: "? extends T>>,int)"
- uid: "T>never()"
  name: "T>never()"
  nameWithType: "T>never()"
  fullName: "T>never()"
- uid: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Predicate"
  name: "Mono.onErrorMap(Predicate"
  nameWithType: "Mono.onErrorMap(Predicate"
  fullName: "reactor.core.publisher.Mono.onErrorMap(java.util.function.Predicate"
- uid: "reactor.core.publisher.Mono.cache(java.util.function.Function"
  name: "Mono.cache(Function"
  nameWithType: "Mono.cache(Function"
  fullName: "reactor.core.publisher.Mono.cache(java.util.function.Function"
- uid: "java.lang.Throwable,java.time.Duration>,java.util.function.Supplier"
  name: "Throwable,Duration>,Supplier"
  nameWithType: "Throwable,Duration>,Supplier"
  fullName: "java.lang.Throwable,java.time.Duration>,java.util.function.Supplier"
- uid: "java.time.Duration>)"
  name: "Duration>)"
  nameWithType: "Duration>)"
  fullName: "java.time.Duration>)"
- uid: "? super T,java.time.Duration>,java.util.function.Function"
  name: "? super T,Duration>,Function"
  nameWithType: "? super T,Duration>,Function"
  fullName: "? super T,java.time.Duration>,java.util.function.Function"
- uid: "reactor.core.publisher.SignalType>)"
  name: "SignalType>)"
  nameWithType: "SignalType>)"
  fullName: "reactor.core.publisher.SignalType>)"
- uid: "reactor.core.publisher.Mono.doFinally(java.util.function.Consumer"
  name: "Mono.doFinally(Consumer"
  nameWithType: "Mono.doFinally(Consumer"
  fullName: "reactor.core.publisher.Mono.doFinally(java.util.function.Consumer"
- uid: "java.lang.Void>)"
  name: "Void>)"
  nameWithType: "Void>)"
  fullName: "java.lang.Void>)"
- uid: "reactor.core.publisher.Mono.thenEmpty(org.reactivestreams.Publisher"
  name: "Mono.thenEmpty(Publisher"
  nameWithType: "Mono.thenEmpty(Publisher"
  fullName: "reactor.core.publisher.Mono.thenEmpty(org.reactivestreams.Publisher"
- uid: "reactor.core.publisher.Mono.repeatWhenEmpty(java.util.function.Function"
  name: "Mono.repeatWhenEmpty(Function"
  nameWithType: "Mono.repeatWhenEmpty(Function"
  fullName: "reactor.core.publisher.Mono.repeatWhenEmpty(java.util.function.Function"
- uid: "? super java.lang.Throwable>,java.lang.Runnable)"
  name: "? super Throwable>,Runnable)"
  nameWithType: "? super Throwable>,Runnable)"
  fullName: "? super java.lang.Throwable>,java.lang.Runnable)"
- uid: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Function"
  name: "Mono.onErrorResume(Function"
  nameWithType: "Mono.onErrorResume(Function"
  fullName: "reactor.core.publisher.Mono.onErrorResume(java.util.function.Function"
- uid: "T1,T2>zip(reactor.core.publisher.Mono"
  name: "T1,T2>zip(Mono"
  nameWithType: "T1,T2>zip(Mono"
  fullName: "T1,T2>zip(reactor.core.publisher.Mono"
- uid: "? extends I>)"
  name: "? extends I>)"
  nameWithType: "? extends I>)"
  fullName: "? extends I>)"
- uid: "I>fromDirect(org.reactivestreams.Publisher"
  name: "I>fromDirect(Publisher"
  nameWithType: "I>fromDirect(Publisher"
  fullName: "I>fromDirect(org.reactivestreams.Publisher"
- uid: "T>equalsBiPredicate()"
  name: "T>equalsBiPredicate()"
  nameWithType: "T>equalsBiPredicate()"
  fullName: "T>equalsBiPredicate()"
- uid: "T1,T2,T3>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2,T3>zipDelayError(Mono"
  nameWithType: "T1,T2,T3>zipDelayError(Mono"
  fullName: "T1,T2,T3>zipDelayError(reactor.core.publisher.Mono"
- uid: "T>empty(org.reactivestreams.Publisher"
  name: "T>empty(Publisher"
  nameWithType: "T>empty(Publisher"
  fullName: "T>empty(org.reactivestreams.Publisher"
- uid: "? extends java.lang.Throwable>)"
  name: "? extends Throwable>)"
  nameWithType: "? extends Throwable>)"
  fullName: "? extends java.lang.Throwable>)"
- uid: "T>error(java.util.function.Supplier"
  name: "T>error(Supplier"
  nameWithType: "T>error(Supplier"
  fullName: "T>error(java.util.function.Supplier"
- uid: "reactor.core.publisher.Mono.concatWith(org.reactivestreams.Publisher"
  name: "Mono.concatWith(Publisher"
  nameWithType: "Mono.concatWith(Publisher"
  fullName: "reactor.core.publisher.Mono.concatWith(org.reactivestreams.Publisher"
- uid: "? extends T>...)"
  name: "? extends T>...)"
  nameWithType: "? extends T>...)"
  fullName: "? extends T>...)"
- uid: "T>first(reactor.core.publisher.Mono"
  name: "T>first(Mono"
  nameWithType: "T>first(Mono"
  fullName: "T>first(reactor.core.publisher.Mono"
- uid: "reactor.core.publisher.Mono.whenDelayError(java.lang.Iterable"
  name: "Mono.whenDelayError(Iterable"
  nameWithType: "Mono.whenDelayError(Iterable"
  fullName: "reactor.core.publisher.Mono.whenDelayError(java.lang.Iterable"
- uid: "reactor.core.publisher.Mono.takeUntilOther(org.reactivestreams.Publisher"
  name: "Mono.takeUntilOther(Publisher"
  nameWithType: "Mono.takeUntilOther(Publisher"
  fullName: "reactor.core.publisher.Mono.takeUntilOther(org.reactivestreams.Publisher"
- uid: "T2,O>zipWith(reactor.core.publisher.Mono"
  name: "T2,O>zipWith(Mono"
  nameWithType: "T2,O>zipWith(Mono"
  fullName: "T2,O>zipWith(reactor.core.publisher.Mono"
- uid: "? super T,? super T2,? extends O>)"
  name: "? super T,? super T2,? extends O>)"
  nameWithType: "? super T,? super T2,? extends O>)"
  fullName: "? super T,? super T2,? extends O>)"
- uid: "V>then(reactor.core.publisher.Mono"
  name: "V>then(Mono"
  nameWithType: "V>then(Mono"
  fullName: "V>then(reactor.core.publisher.Mono"
- uid: "? super D>,boolean)"
  name: "? super D>,boolean)"
  nameWithType: "? super D>,boolean)"
  fullName: "? super D>,boolean)"
- uid: "R>flatMap(java.util.function.Function"
  name: "R>flatMap(Function"
  nameWithType: "R>flatMap(Function"
  fullName: "R>flatMap(java.util.function.Function"
- uid: "? super T,? extends reactor.core.publisher.Mono"
  name: "? super T,? extends Mono"
  nameWithType: "? super T,? extends Mono"
  fullName: "? super T,? extends reactor.core.publisher.Mono"
- uid: "T1,T2,T3,T4,T5,T6,T7>zipDelayError(reactor.core.publisher.Mono"
  name: "T1,T2,T3,T4,T5,T6,T7>zipDelayError(Mono"
  nameWithType: "T1,T2,T3,T4,T5,T6,T7>zipDelayError(Mono"
  fullName: "T1,T2,T3,T4,T5,T6,T7>zipDelayError(reactor.core.publisher.Mono"
