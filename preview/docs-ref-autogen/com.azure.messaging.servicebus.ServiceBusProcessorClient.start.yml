### YamlMime:JavaMember
uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start*"
fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start"
name: "start"
nameWithType: "ServiceBusProcessorClient.start"
members:
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
  name: "start()"
  nameWithType: "ServiceBusProcessorClient.start()"
  summary: "Starts the processor in the background. When this method is called, the processor will initiate a message receiver that will invoke the message handler when new messages are available. This method is idempotent i.e calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> again after the processor is already running is a no-op. Calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> after calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#stop()\"></xref> will resume processing messages using the same underlying links or active sessions. Calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> after calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.close()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#close()\"></xref> will start the processor with new links and a new set of sessions will be processed."
  syntax: "public synchronized void start()"
type: "method"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
