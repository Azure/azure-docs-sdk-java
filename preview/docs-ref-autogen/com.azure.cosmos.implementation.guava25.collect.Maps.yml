### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.Maps"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps"
name: "Maps"
nameWithType: "Maps"
summary: "Static utility methods pertaining to <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map\"></xref> instances (including instances of <xref uid=\"java.util.SortedMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SortedMap\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.BiMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BiMap\"></xref>, etc.). Also see this class's counterparts <xref uid=\"com.azure.cosmos.implementation.Lists\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Lists\"></xref>, <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Sets\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Sets\"></xref>.\n\nSee the Guava User Guide article on [ `Maps`][_Maps].\n\n\n[_Maps]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#maps"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class Maps"
methods:
- "com.azure.cosmos.implementation.guava25.collect.Maps.<A,B>asConverter(com.azure.cosmos.implementation.guava25.collect.BiMap<A,B>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<C,K,V>newTreeMap(java.util.Comparator<C>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformEntries(java.util.Map<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformEntries(java.util.NavigableMap<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformEntries(java.util.SortedMap<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(java.util.Map<K,V1>,com.azure.cosmos.implementation.guava25.base.Function<? super V1,V2>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(java.util.NavigableMap<K,V1>,com.azure.cosmos.implementation.guava25.base.Function<? super V1,V2>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V1,V2>transformValues(java.util.SortedMap<K,V1>,com.azure.cosmos.implementation.guava25.base.Function<? super V1,V2>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(java.util.NavigableSet<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(java.util.Set<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>asMap(java.util.SortedSet<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>difference(java.util.Map<? extends K,? extends V>,java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>difference(java.util.Map<? extends K,? extends V>,java.util.Map<? extends K,? extends V>,com.azure.cosmos.implementation.guava25.base.Equivalence<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>difference(java.util.SortedMap<K,? extends V>,java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(java.util.Map<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(java.util.NavigableMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(java.util.SortedMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(java.util.Map<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(java.util.NavigableMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(java.util.SortedMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterValues(com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterValues(java.util.Map<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterValues(java.util.NavigableMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterValues(java.util.SortedMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>immutableEntry(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>immutableEnumMap(java.util.Map<K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newConcurrentMap()"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newEnumMap(java.lang.Class<K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newEnumMap(java.util.Map<K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newHashMap()"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newHashMap(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newHashMapWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newIdentityHashMap()"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newLinkedHashMap()"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newLinkedHashMap(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newLinkedHashMapWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newTreeMap()"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>newTreeMap(java.util.SortedMap<K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>subMap(java.util.NavigableMap<K,V>,com.azure.cosmos.implementation.guava25.collect.Range<K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedBiMap(com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap(java.util.NavigableMap<K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>toMap(java.lang.Iterable<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>toMap(java.util.Iterator<K>,com.azure.cosmos.implementation.guava25.base.Function<? super K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex(java.lang.Iterable<V>,com.azure.cosmos.implementation.guava25.base.Function<? super V,K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex(java.util.Iterator<V>,com.azure.cosmos.implementation.guava25.base.Function<? super V,K>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>unmodifiableBiMap(com.azure.cosmos.implementation.guava25.collect.BiMap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>unmodifiableNavigableMap(java.util.NavigableMap<K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<T,K,V>toImmutableEnumMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.<T,K,V>toImmutableEnumMap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.BinaryOperator<V>)"
- "com.azure.cosmos.implementation.guava25.collect.Maps.fromProperties(java.util.Properties)"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
