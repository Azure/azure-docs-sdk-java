### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.FormRecognizerClient
  id: FormRecognizerClient
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer
  children:
  - com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,boolean,java.time.Duration)
  - com.azure.ai.formrecognizer.FormRecognizerClient.getFormTrainingClient()
  langs:
  - java
  name: FormRecognizerClient
  nameWithType: FormRecognizerClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient
  type: Class
  package: com.azure.ai.formrecognizer
  summary: >-
    This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer. Operations allowed by the client are recognizing receipt data from documents, extracting layout information and analyzing custom forms for predefined data.


    **Instantiating a synchronous Form Recognizer Client**


    ```java

    FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildClient();
    ```
  syntax:
    content: public final class FormRecognizerClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  id: FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: FormRecognizerClient(FormRecognizerAsyncClient client)
  nameWithType: FormRecognizerClient.FormRecognizerClient(FormRecognizerAsyncClient client)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(FormRecognizerAsyncClient client)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient*
  type: Constructor
  package: com.azure.ai.formrecognizer
  summary: Create a <xref uid="com.azure.ai.formrecognizer.FormRecognizerClient" data-throw-if-not-resolved="false">client</xref> that sends requests to the Form Recognizer service's endpoint. Each service call goes through the <xref uid="com.azure.ai.formrecognizer.FormRecognizerClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " FormRecognizerClient(FormRecognizerAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
      description: The <xref uid="com.azure.ai.formrecognizer.FormRecognizerClient" data-throw-if-not-resolved="false">FormRecognizerClient</xref> that the client routes its request through.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType)
  id: beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContent(InputStream data, long length, FormContentType formContentType)
  nameWithType: FormRecognizerClient.beginRecognizeContent(InputStream data, long length, FormContentType formContentType)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(InputStream data, long length, FormContentType formContentType)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts layout data using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeContent(targetStream, sourceFile.length(), FormContentType.APPLICATION_PDF)\n     .getFinalResult().forEach(recognizedForm -> {\n         System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         recognizedForm.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<FormPage>> beginRecognizeContent(InputStream data, long length, FormContentType formContentType)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 20 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract layout operation until it has completed, has failed, or has
         been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType,java.time.Duration)
  id: beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContent(InputStream data, long length, FormContentType formContentType, Duration pollInterval)
  nameWithType: FormRecognizerClient.beginRecognizeContent(InputStream data, long length, FormContentType formContentType, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(InputStream data, long length, FormContentType formContentType, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts layout data from the provided document data using optical character recognition (OCR) and a prebuilt trained receipt model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeContent(targetStream, sourceFile.length(), FormContentType.APPLICATION_PDF,\n     Duration.ofSeconds(5)).getFinalResult().forEach(recognizedForm -> {\n         System.out.printf(\"Page Angle: %s%n\", recognizedForm.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         recognizedForm.getTables().forEach(formTable ->\n             formTable.getCells().forEach(recognizedTableCell ->\n                 System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<FormPage>> beginRecognizeContent(InputStream data, long length, FormContentType formContentType, Duration pollInterval)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 20 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract layout operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String)
  id: beginRecognizeContentFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String fileSourceUrl)
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl(String fileSourceUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(String fileSourceUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts layout data from documents using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String sourceFilePath = "{file_source_url}";
     formRecognizerClient.beginRecognizeContentFromUrl(sourceFilePath).getFinalResult()
         .forEach(recognizedForm -> {
             System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             recognizedForm.getTables().forEach(formTable ->
                 formTable.getCells().forEach(recognizedTableCell ->
                     System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<FormPage>> beginRecognizeContentFromUrl(String fileSourceUrl)
    parameters:
    - id: fileSourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 20 MB.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract layout form operation until it has completed, has failed,
         or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String,java.time.Duration)
  id: beginRecognizeContentFromUrl(java.lang.String,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts layout data using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String sourceFilePath = "{file_source_url}";
     formRecognizerClient.beginRecognizeContentFromUrl(sourceFilePath, Duration.ofSeconds(5)).getFinalResult()
         .forEach(recognizedForm -> {
             System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             recognizedForm.getTables().forEach(formTable ->
                 formTable.getCells().forEach(recognizedTableCell ->
                     System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<FormPage>> beginRecognizeContentFromUrl(String sourceUrl, Duration pollInterval)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 20 MB.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract layout operation until it has completed, has
         failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType)
  id: beginRecognizeCustomForms(java.io.InputStream,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType)
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n String modelId = \"{model_id}\";\n byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeCustomForms(targetStream, modelId, sourceFile.length(),\n     FormContentType.IMAGE_JPEG).getFinalResult().forEach(recognizedForm -> {\n         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n             System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n             System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n         });\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data of the document to be extract receipt information from.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 20 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract custom form operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  id: beginRecognizeCustomForms(java.io.InputStream,java.lang.String,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile sourceFile = new File(\"{file_source_url}\");\n String modelId = \"{model_id}\";\n boolean includeTextDetails = true;\n \n byte[] fileContent = Files.readAllBytes(sourceFile.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeCustomForms(targetStream, modelId, sourceFile.length(),\n     FormContentType.IMAGE_JPEG, includeTextDetails, Duration.ofSeconds(5)).getFinalResult()\n         .forEach(recognizedForm -> {\n             recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n                 System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n                 System.out.printf(\"Field text: %s%n\", fieldText);\n                 System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n                 System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n             });\n         });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomForms(InputStream data, String modelId, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data of the document to be extract receipt information from.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 20 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract custom form operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts receipt data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString analyzeFilePath = \"{file_source_url}\";\n String modelId = \"{model_id}\";\n \n formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId).getFinalResult()\n     .forEach(recognizedForm -> {\n         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n             System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n             System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n         });\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId)
    parameters:
    - id: fileSourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 20 MB.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the extract custom form operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,boolean,java.time.Duration)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts receipt data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString analyzeFilePath = \"{file_source_url}\";\n String modelId = \"{model_id}\";\n boolean includeTextDetails = true;\n \n formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId, includeTextDetails,\n     Duration.ofSeconds(5)).getFinalResult().forEach(recognizedForm -> {\n         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n             System.out.printf(\"Page number: %s%n\", fieldValue.getPageNumber());\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value: %s%n\", fieldValue.getFieldValue());\n             System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n         });\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String fileSourceUrl, String modelId, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: fileSourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 20 MB.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the extract custom form operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType)
  id: beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType)
  nameWithType: FormRecognizerClient.beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts data from the provided document data using optical character recognition (OCR) and a prebuilt trained receipt model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    **Code sample**


    ```java

    File sourceFile = new File("{file_source_url}");
     byte[] fileContent = Files.readAllBytes(sourceFile.toPath());
     InputStream targetStream = new ByteArrayInputStream(fileContent);
     formRecognizerClient.beginRecognizeReceipts(targetStream, sourceFile.length(), FormContentType.IMAGE_JPEG)
         .getFinalResult().forEach(recognizedReceipt -> {
             USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
             System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
             System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                 usReceipt.getMerchantName().getFieldValue(),
                 usReceipt.getMerchantName().getConfidence());
             System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                 usReceipt.getMerchantAddress().getFieldValue(),
                 usReceipt.getMerchantAddress().getConfidence());
             System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                 usReceipt.getMerchantPhoneNumber().getFieldValue(),
                 usReceipt.getMerchantPhoneNumber().getConfidence());
             System.out.printf("Total: %.2f, confidence: %.2f%n",
                 usReceipt.getTotal().getFieldValue(),
                 usReceipt.getTotal().getConfidence());
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 20 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract receipt operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  id: beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.FormContentType,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerClient.beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts data from the providedd document data using optical character recognition (OCR) and a prebuilt trained receipt model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    **Code sample**


    ```java

    File sourceFile = new File("{file_source_url}");
     boolean includeTextDetails = true;
     byte[] fileContent = Files.readAllBytes(sourceFile.toPath());
     InputStream targetStream = new ByteArrayInputStream(fileContent);
     formRecognizerClient.beginRecognizeReceipts(targetStream, sourceFile.length(), FormContentType.IMAGE_JPEG,
         includeTextDetails, Duration.ofSeconds(5)).getFinalResult().forEach(recognizedReceipt -> {
             USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
             System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
             System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                 usReceipt.getMerchantName().getFieldValue(),
                 usReceipt.getMerchantName().getConfidence());
             System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                 usReceipt.getMerchantAddress().getFieldValue(),
                 usReceipt.getMerchantAddress().getConfidence());
             System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                 usReceipt.getMerchantPhoneNumber().getFieldValue(),
                 usReceipt.getMerchantPhoneNumber().getConfidence());
             System.out.printf("Total: %.2f, confidence: %.2f%n",
                 usReceipt.getTotal().getFieldValue(),
                 usReceipt.getTotal().getConfidence());
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceipts(InputStream data, long length, FormContentType formContentType, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: data
      type: java.io.InputStream
      description: The data of the document to be extract receipt information from.
    - id: length
      type: long
      description: The exact length of the data. Size of the file must be less than 20 MB.
    - id: formContentType
      type: com.azure.ai.formrecognizer.models.FormContentType
      description: Supported Media types including .pdf, .jpg, .png or .tiff type file stream.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the extract receipt operation until it
         has completed, has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  id: beginRecognizeReceiptsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String sourceUrl)
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl(String sourceUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String sourceUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes and extracts receipt data from document susing optical character recognition (OCR) and a prebuilt receipt trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    **Code sample**


    ```java

    String receiptUrl = "{file_source_url}";
     formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl).getFinalResult()
         .forEach(recognizedReceipt -> {
             USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);
             System.out.printf("Page Number: %s%n", usReceipt.getMerchantName().getPageNumber());
             System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                 usReceipt.getMerchantName().getFieldValue(),
                 usReceipt.getMerchantName().getConfidence());
             System.out.printf("Merchant Address: %s, confidence: %.2f%n",
                 usReceipt.getMerchantAddress().getFieldValue(),
                 usReceipt.getMerchantAddress().getConfidence());
             System.out.printf("Merchant Phone Number %s, confidence: %.2f%n",
                 usReceipt.getMerchantPhoneNumber().getFieldValue(),
                 usReceipt.getMerchantPhoneNumber().getConfidence());
             System.out.printf("Total: %.2f, confidence: %.2f%n",
                 usReceipt.getTotal().getFieldValue(),
                 usReceipt.getTotal().getConfidence());
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceiptsFromUrl(String sourceUrl)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 20 MB.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the extract receipt operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,boolean,java.time.Duration)
  id: beginRecognizeReceiptsFromUrl(java.lang.String,boolean,java.time.Duration)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes and extracts receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString receiptUrl = \"{file_source_url}\";\n boolean includeTextDetails = true;\n \n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl, includeTextDetails, Duration.ofSeconds(5))\n     .getFinalResult().forEach(recognizedReceipt -> {\n         USReceipt usReceipt = ReceiptExtensions.asUSReceipt(recognizedReceipt);\n         System.out.printf(\"Page Number: %s%n\", usReceipt.getMerchantName().getPageNumber());\n         System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n             usReceipt.getMerchantName().getFieldValue(),\n             usReceipt.getMerchantName().getConfidence());\n         System.out.printf(\"Merchant Address: %s, confidence: %.2f%n\",\n             usReceipt.getMerchantAddress().getFieldValue(),\n             usReceipt.getMerchantAddress().getConfidence());\n         System.out.printf(\"Merchant Phone Number %s, confidence: %.2f%n\",\n             usReceipt.getMerchantPhoneNumber().getFieldValue(),\n             usReceipt.getMerchantPhoneNumber().getConfidence());\n         System.out.printf(\"Total: %.2f, confidence: %.2f%n\",\n             usReceipt.getTotal().getFieldValue(),\n             usReceipt.getTotal().getConfidence());\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,IterableStream<RecognizedReceipt>> beginRecognizeReceiptsFromUrl(String sourceUrl, boolean includeTextDetails, Duration pollInterval)
    parameters:
    - id: sourceUrl
      type: java.lang.String
      description: The source URL to the input document. Size of the file must be less than 20 MB.
    - id: includeTextDetails
      type: boolean
      description: Include text lines and element references in the result.
    - id: pollInterval
      type: java.time.Duration
      description: >-
        Duration between each poll for the operation status. If none is specified, a default of
         5 seconds is used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the extract receipt operation until it has completed,
         has failed, or has been cancelled.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.getFormTrainingClient()
  id: getFormTrainingClient()
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.2
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: getFormTrainingClient()
  nameWithType: FormRecognizerClient.getFormTrainingClient()
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.getFormTrainingClient()
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.getFormTrainingClient*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: Creates a new <xref uid="com.azure.ai.formrecognizer.FormTrainingClient" data-throw-if-not-resolved="false">FormTrainingClient</xref> object.The new `FormRecognizerClient` uses the same request policy pipeline as the `FormRecognizerClient`.
  syntax:
    content: public FormTrainingClient getFormTrainingClient()
    return:
      type: com.azure.ai.formrecognizer.FormTrainingClient
      description: A new <xref uid="com.azure.ai.formrecognizer.FormTrainingClient" data-throw-if-not-resolved="false">FormTrainingClient</xref> object.
references:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient*
  name: FormRecognizerClient
  nameWithType: FormRecognizerClient.FormRecognizerClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormTrainingClient
  name: FormTrainingClient
  nameWithType: FormTrainingClient
  fullName: com.azure.ai.formrecognizer.FormTrainingClient
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.getFormTrainingClient*
  name: getFormTrainingClient
  nameWithType: FormRecognizerClient.getFormTrainingClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.getFormTrainingClient
  package: com.azure.ai.formrecognizer
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedForm>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedForm
    name: RecognizedForm
    fullName: com.azure.ai.formrecognizer.models.RecognizedForm
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  name: beginRecognizeCustomFormsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl
  package: com.azure.ai.formrecognizer
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: java.time.Duration
  spec.java:
  - uid: java.time.Duration
    name: Duration
    fullName: java.time.Duration
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.ai.formrecognizer.models.FormContentType
  name: FormContentType
  nameWithType: FormContentType
  fullName: com.azure.ai.formrecognizer.models.FormContentType
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  name: beginRecognizeCustomForms
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.FormPage>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormPage
    name: FormPage
    fullName: com.azure.ai.formrecognizer.models.FormPage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  name: beginRecognizeContentFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  name: beginRecognizeContent
  nameWithType: FormRecognizerClient.beginRecognizeContent
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream<com.azure.ai.formrecognizer.models.RecognizedReceipt>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: com.azure.core.util.IterableStream
    name: IterableStream
    fullName: com.azure.core.util.IterableStream
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedReceipt
    name: RecognizedReceipt
    fullName: com.azure.ai.formrecognizer.models.RecognizedReceipt
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  name: beginRecognizeReceiptsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  name: beginRecognizeReceipts
  nameWithType: FormRecognizerClient.beginRecognizeReceipts
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts
  package: com.azure.ai.formrecognizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: com.azure.ai.formrecognizer.models.RecognizedForm
  name: RecognizedForm
  nameWithType: RecognizedForm
  fullName: com.azure.ai.formrecognizer.models.RecognizedForm
- uid: com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream
  name: OperationResult,IterableStream
  nameWithType: OperationResult,IterableStream
  fullName: com.azure.ai.formrecognizer.models.OperationResult,com.azure.core.util.IterableStream
- uid: com.azure.ai.formrecognizer.models.FormPage
  name: FormPage
  nameWithType: FormPage
  fullName: com.azure.ai.formrecognizer.models.FormPage
- uid: com.azure.ai.formrecognizer.models.RecognizedReceipt
  name: RecognizedReceipt
  nameWithType: RecognizedReceipt
  fullName: com.azure.ai.formrecognizer.models.RecognizedReceipt
