### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.FormRecognizerClient
  id: FormRecognizerClient
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer
  children:
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards(java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.lang.String,java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.lang.String,java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices(java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)
  langs:
  - java
  name: FormRecognizerClient
  nameWithType: FormRecognizerClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient
  type: Class
  package: com.azure.ai.formrecognizer
  summary: >-
    This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer. Operations allowed by the client are recognizing receipt, business card and invoice data from documents, recognizing layout information and analyzing custom forms for predefined data.


    **Instantiating a synchronous Form Recognizer Client**


    ```java

    FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildClient();
    ```
  syntax:
    content: public final class FormRecognizerClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  id: FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: FormRecognizerClient(FormRecognizerAsyncClient client)
  nameWithType: FormRecognizerClient.FormRecognizerClient(FormRecognizerAsyncClient client)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(FormRecognizerAsyncClient client)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient*
  type: Constructor
  package: com.azure.ai.formrecognizer
  summary: Create a <xref uid="com.azure.ai.formrecognizer.FormRecognizerClient" data-throw-if-not-resolved="false">client</xref> that sends requests to the Form Recognizer service's endpoint. Each service call goes through the <xref uid="com.azure.ai.formrecognizer.FormRecognizerClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " FormRecognizerClient(FormRecognizerAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
      description: The <xref uid="com.azure.ai.formrecognizer.FormRecognizerClient" data-throw-if-not-resolved="false">FormRecognizerClient</xref> that the client routes its request through.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards(java.io.InputStream,long)
  id: beginRecognizeBusinessCards(java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeBusinessCards(InputStream businessCard, long length)
  nameWithType: FormRecognizerClient.beginRecognizeBusinessCards(InputStream businessCard, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards(InputStream businessCard, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes business card data from the provided document data using optical character recognition (OCR) and a prebuilt trained business card model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a business card.


    **Code sample**


    ```java

    File businessCard = new File("{local/file_path/fileName.jpg}");
     byte[] fileContent = Files.readAllBytes(businessCard.toPath());
     try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {
         formRecognizerClient.beginRecognizeBusinessCards(targetStream, businessCard.length()).getFinalResult()
             .forEach(recognizedBusinessCard -> {
                 Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();
                 FormField contactNamesFormField = recognizedFields.get("ContactNames");
                 if (contactNamesFormField != null) {
                     if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {
                         List<FormField> contactNamesList = contactNamesFormField.getValue().asList();
                         contactNamesList.stream()
                             .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())
                             .map(contactName -> {
                                 System.out.printf("Contact name: %s%n", contactName.getValueData().getText());
                                 return contactName.getValue().asMap();
                             })
                             .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {
                                 if ("FirstName".equals(key)) {
                                     if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                         String firstName = contactName.getValue().asString();
                                         System.out.printf("\tFirst Name: %s, confidence: %.2f%n",
                                             firstName, contactName.getConfidence());
                                     }
                                 }
                                 if ("LastName".equals(key)) {
                                     if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                         String lastName = contactName.getValue().asString();
                                         System.out.printf("\tLast Name: %s, confidence: %.2f%n",
                                             lastName, contactName.getConfidence());
                                     }
                                 }
                             }));
                     }
                 }
                 FormField jobTitles = recognizedFields.get("JobTitles");
                 if (jobTitles != null) {
                     if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {
                         List<FormField> jobTitlesItems = jobTitles.getValue().asList();
                         jobTitlesItems.stream().forEach(jobTitlesItem -> {
                             if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {
                                 String jobTitle = jobTitlesItem.getValue().asString();
                                 System.out.printf("Job Title: %s, confidence: %.2f%n",
                                     jobTitle, jobTitlesItem.getConfidence());
                             }
                         });
                     }
                 }
             });
     }
    ```



    [here]: https://aka.ms/formrecognizer/businesscardfields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCards(InputStream businessCard, long length)
    parameters:
    - id: businessCard
      type: java.io.InputStream
      description: The data of the business card to recognize business card information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize business card operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)
  id: beginRecognizeBusinessCards(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeBusinessCards(InputStream businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeBusinessCards(InputStream businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards(InputStream businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes business card data from the provided document data using optical character recognition (OCR) and a prebuilt trained business card model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a business card.


    **Code sample**


    ```java

    File businessCard = new File("{local/file_path/fileName.jpg}");
     boolean includeFieldElements = true;
     byte[] fileContent = Files.readAllBytes(businessCard.toPath());
     try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {
         for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeBusinessCards(targetStream,
             businessCard.length(),
             new RecognizeBusinessCardsOptions()
                 .setContentType(FormContentType.IMAGE_JPEG)
                 .setFieldElementsIncluded(includeFieldElements)
                 .setPollInterval(Duration.ofSeconds(5)), Context.NONE)
                                                  .getFinalResult()) {
             Map<String, FormField> recognizedFields = recognizedForm.getFields();
             FormField contactNamesFormField = recognizedFields.get("ContactNames");
             if (contactNamesFormField != null) {
                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {
                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();
                     contactNamesList.stream()
                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())
                         .map(contactName -> {
                             System.out.printf("Contact name: %s%n", contactName.getValueData().getText());
                             return contactName.getValue().asMap();
                         })
                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {
                             if ("FirstName".equals(key)) {
                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                     String firstName = contactName.getValue().asString();
                                     System.out.printf("\tFirst Name: %s, confidence: %.2f%n",
                                         firstName, contactName.getConfidence());
                                 }
                             }
                             if ("LastName".equals(key)) {
                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                     String lastName = contactName.getValue().asString();
                                     System.out.printf("\tLast Name: %s, confidence: %.2f%n",
                                         lastName, contactName.getConfidence());
                                 }
                             }
                         }));
                 }
             }
             FormField jobTitles = recognizedFields.get("JobTitles");
             if (jobTitles != null) {
                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {
                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();
                     jobTitlesItems.stream().forEach(jobTitlesItem -> {
                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {
                             String jobTitle = jobTitlesItem.getValue().asString();
                             System.out.printf("Job Title: %s, confidence: %.2f%n",
                                 jobTitle, jobTitlesItem.getConfidence());
                         }
                     });
                 }
             }
         }
     }
    ```



    [here]: https://aka.ms/formrecognizer/businesscardfields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCards(InputStream businessCard, long length, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
    parameters:
    - id: businessCard
      type: java.io.InputStream
      description: The data of the business card to recognize business card information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeBusinessCardsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a business card.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize business card operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(java.lang.String)
  id: beginRecognizeBusinessCardsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeBusinessCardsFromUrl(String businessCardUrl)
  nameWithType: FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes business card data from document using optical character recognition (OCR) and a prebuilt business card trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a business card.


    **Code sample**


    ```java

    String businessCardUrl = "{business_card_url}";
     formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)
         .getFinalResult()
         .forEach(recognizedBusinessCard -> {
             Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();
             FormField contactNamesFormField = recognizedFields.get("ContactNames");
             if (contactNamesFormField != null) {
                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {
                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();
                     contactNamesList.stream()
                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())
                         .map(contactName -> {
                             System.out.printf("Contact name: %s%n", contactName.getValueData().getText());
                             return contactName.getValue().asMap();
                         })
                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {
                             if ("FirstName".equals(key)) {
                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                     String firstName = contactName.getValue().asString();
                                     System.out.printf("\tFirst Name: %s, confidence: %.2f%n",
                                         firstName, contactName.getConfidence());
                                 }
                             }
                             if ("LastName".equals(key)) {
                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                     String lastName = contactName.getValue().asString();
                                     System.out.printf("\tLast Name: %s, confidence: %.2f%n",
                                         lastName, contactName.getConfidence());
                                 }
                             }
                         }));
                 }
             }
             FormField jobTitles = recognizedFields.get("JobTitles");
             if (jobTitles != null) {
                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {
                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();
                     jobTitlesItems.stream().forEach(jobTitlesItem -> {
                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {
                             String jobTitle = jobTitlesItem.getValue().asString();
                             System.out.printf("Job Title: %s, confidence: %.2f%n",
                                 jobTitle, jobTitlesItem.getConfidence());
                         }
                     });
                 }
             }
         });
    ```



    [here]: https://aka.ms/formrecognizer/businesscardfields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl)
    parameters:
    - id: businessCardUrl
      type: java.lang.String
      description: The source URL to the input business card.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize business card operation until it has
         completed, has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)
  id: beginRecognizeBusinessCardsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes business card data from documents using optical character recognition (OCR) and a prebuilt business card trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a business card.


    **Code sample**


    ```java

    String businessCardUrl = "{business_card_url}";
     formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl,
         new RecognizeBusinessCardsOptions()
             .setPollInterval(Duration.ofSeconds(5))
             .setFieldElementsIncluded(true), Context.NONE).getFinalResult()
         .forEach(recognizedBusinessCard -> {
             Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();
             FormField contactNamesFormField = recognizedFields.get("ContactNames");
             if (contactNamesFormField != null) {
                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {
                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();
                     contactNamesList.stream()
                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())
                         .map(contactName -> {
                             System.out.printf("Contact name: %s%n", contactName.getValueData().getText());
                             return contactName.getValue().asMap();
                         })
                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {
                             if ("FirstName".equals(key)) {
                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                     String firstName = contactName.getValue().asString();
                                     System.out.printf("\tFirst Name: %s, confidence: %.2f%n",
                                         firstName, contactName.getConfidence());
                                 }
                             }
                             if ("LastName".equals(key)) {
                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {
                                     String lastName = contactName.getValue().asString();
                                     System.out.printf("\tLast Name: %s, confidence: %.2f%n",
                                         lastName, contactName.getConfidence());
                                 }
                             }
                         }));
                 }
             }
             FormField jobTitles = recognizedFields.get("JobTitles");
             if (jobTitles != null) {
                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {
                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();
                     jobTitlesItems.stream().forEach(jobTitlesItem -> {
                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {
                             String jobTitle = jobTitlesItem.getValue().asString();
                             System.out.printf("Job Title: %s, confidence: %.2f%n",
                                 jobTitle, jobTitlesItem.getConfidence());
                         }
                     });
                 }
             }
         });
    ```



    [here]: https://aka.ms/formrecognizer/businesscardfields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)
    parameters:
    - id: businessCardUrl
      type: java.lang.String
      description: The source URL to the input business card.
    - id: recognizeBusinessCardsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a business card.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize business card operation until it has
         completed, has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long)
  id: beginRecognizeContent(java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContent(InputStream form, long length)
  nameWithType: FormRecognizerClient.beginRecognizeContent(InputStream form, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(InputStream form, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes layout data using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    File form = new File("{local/file_path/fileName.pdf}");
     byte[] fileContent = Files.readAllBytes(form.toPath());
     try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {
         formRecognizerClient.beginRecognizeContent(targetStream, form.length())
             .getFinalResult()
             .forEach(formPage -> {
                 System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
                 System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
                 // Table information
                 System.out.println("Recognized Tables: ");
                 formPage.getTables()
                     .stream()
                     .flatMap(formTable -> formTable.getCells().stream())
                     .forEach(recognizedTableCell -> System.out.printf("%s ", recognizedTableCell.getText()));
             });
     }
    ```
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(InputStream form, long length)
    parameters:
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize content operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions,com.azure.core.util.Context)
  id: beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContent(InputStream form, long length, RecognizeContentOptions recognizeContentOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeContent(InputStream form, long length, RecognizeContentOptions recognizeContentOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(InputStream form, long length, RecognizeContentOptions recognizeContentOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes content/layout data from the provided document data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nContent recognition supports auto language identification and multilanguage documents, so only provide a language code if you would like to force the documented to be processed as that specific language in the <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeContentOptions\" data-throw-if-not-resolved=\"false\">options</xref>.\n\n**Code sample**\n\n```java\nFile form = new File(\"{file_source_url}\");\n byte[] fileContent = Files.readAllBytes(form.toPath());\n try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n \n     for (FormPage formPage : formRecognizerClient.beginRecognizeContent(targetStream, form.length(),\n         new RecognizeContentOptions()\n             .setPollInterval(Duration.ofSeconds(5)), Context.NONE)\n         .getFinalResult()) {\n         System.out.printf(\"Page Angle: %s%n\", formPage.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", formPage.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         formPage.getTables()\n             .stream()\n             .flatMap(formTable -> formTable.getCells().stream())\n             .forEach(recognizedTableCell -> System.out.printf(\"%s \", recognizedTableCell.getText()));\n     }\n }\n```"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(InputStream form, long length, RecognizeContentOptions recognizeContentOptions, Context context)
    parameters:
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeContentOptions
      type: com.azure.ai.formrecognizer.models.RecognizeContentOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeContentOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when recognizing content/layout on a form.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize content operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String)
  id: beginRecognizeContentFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl)
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data from documents using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formUrl = "{form_url}";
     formRecognizerClient.beginRecognizeContentFromUrl(formUrl)
         .getFinalResult()
         .forEach(formPage -> {
             System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             formPage.getTables()
                 .stream()
                 .flatMap(formTable -> formTable.getCells().stream())
                 .forEach(recognizedTableCell -> System.out.printf("%s ", recognizedTableCell.getText()));
         });
    ```
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize content form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions,com.azure.core.util.Context)
  id: beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeContentOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    Content recognition supports auto language identification and multilanguage documents, so only provide a language code if you would like to force the documented to be processed as that specific language in the <xref uid="com.azure.ai.formrecognizer.models.RecognizeContentOptions" data-throw-if-not-resolved="false">options</xref>.


    **Code sample**


    ```java

    String formPath = "{file_source_url}";
     formRecognizerClient.beginRecognizeContentFromUrl(formPath,
         new RecognizeContentOptions()
             .setPollInterval(Duration.ofSeconds(5)), Context.NONE)
         .getFinalResult()
         .forEach(formPage -> {
             System.out.printf("Page Angle: %s%n", formPage.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", formPage.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             formPage.getTables()
                 .stream()
                 .flatMap(formTable -> formTable.getCells().stream())
                 .forEach(recognizedTableCell -> System.out.printf("%s ", recognizedTableCell.getText()));
         });
    ```
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl, RecognizeContentOptions recognizeContentOptions, Context context)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: recognizeContentOptions
      type: com.azure.ai.formrecognizer.models.RecognizeContentOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeContentOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when recognizing content/layout on a form.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize layout operation until it has completed, has
         failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.lang.String,java.io.InputStream,long)
  id: beginRecognizeCustomForms(java.lang.String,java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomForms(String modelId, InputStream form, long length)
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms(String modelId, InputStream form, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(String modelId, InputStream form, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n byte[] fileContent = Files.readAllBytes(form.toPath());\n try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n \n     formRecognizerClient.beginRecognizeCustomForms(modelId, targetStream, form.length())\n         .getFinalResult()\n         .stream()\n         .map(RecognizedForm::getFields)\n         .forEach(formFieldMap -> formFieldMap.forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n }\n```"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, InputStream form, long length)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.lang.String,java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions,com.azure.core.util.Context)
  id: beginRecognizeCustomForms(java.lang.String,java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomForms(String modelId, InputStream form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms(String modelId, InputStream form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(String modelId, InputStream form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n boolean includeFieldElements = true;\n byte[] fileContent = Files.readAllBytes(form.toPath());\n \n try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n     formRecognizerClient.beginRecognizeCustomForms(modelId, targetStream, form.length(),\n         new RecognizeCustomFormsOptions()\n             .setContentType(FormContentType.IMAGE_JPEG)\n             .setFieldElementsIncluded(includeFieldElements)\n             .setPollInterval(Duration.ofSeconds(10)), Context.NONE)\n         .getFinalResult()\n         .stream()\n         .map(RecognizedForm::getFields)\n         .forEach(formFieldMap -> formFieldMap.forEach((fieldText, formField) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n             System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n         }));\n }\n```"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, InputStream form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeCustomFormsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
      description: >-
        The additional configurable
         <xref uid="com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when recognizing custom forms.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n \n formRecognizerClient.beginRecognizeCustomFormsFromUrl(modelId, formUrl).getFinalResult()\n     .stream()\n     .map(RecognizedForm::getFields)\n     .forEach(formFieldMap -> formFieldMap.forEach((fieldText, formField) -> {\n         System.out.printf(\"Field text: %s%n\", fieldText);\n         System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n         System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n     }));\n```"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String modelId, String formUrl)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions,com.azure.core.util.Context)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString analyzeFilePath = \"{file_source_url}\";\n String modelId = \"{model_id}\";\n boolean includeFieldElements = true;\n \n formRecognizerClient.beginRecognizeCustomFormsFromUrl(modelId, analyzeFilePath,\n     new RecognizeCustomFormsOptions()\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(10)), Context.NONE)\n     .getFinalResult()\n     .stream()\n     .map(RecognizedForm::getFields)\n     .forEach(formFieldMap -> formFieldMap.forEach((fieldText, formField) -> {\n         System.out.printf(\"Field text: %s%n\", fieldText);\n         System.out.printf(\"Field value data text: %s%n\", formField.getValueData().getText());\n         System.out.printf(\"Confidence score: %.2f%n\", formField.getConfidence());\n     }));\n```"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String modelId, String formUrl, RecognizeCustomFormsOptions recognizeCustomFormsOptions, Context context)
    parameters:
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: recognizeCustomFormsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
      description: >-
        The additional configurable
         <xref uid="com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when recognizing custom forms.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices(java.io.InputStream,long)
  id: beginRecognizeInvoices(java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeInvoices(InputStream invoice, long length)
  nameWithType: FormRecognizerClient.beginRecognizeInvoices(InputStream invoice, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices(InputStream invoice, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes data from the provided document data using optical character recognition (OCR) and a prebuilt trained invoice model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a invoice.


    **Code sample**


    ```java

    File invoice = new File("local/file_path/invoice.jpg");
     ByteArrayInputStream inputStream = new ByteArrayInputStream(Files.readAllBytes(invoice.toPath()));
     // if training polling operation completed, retrieve the final result.
     formRecognizerClient.beginRecognizeInvoices(inputStream, invoice.length())
         .getFinalResult()
         .stream()
         .map(RecognizedForm::getFields)
         .forEach(recognizedFields -> {
             FormField customAddrFormField = recognizedFields.get("CustomerAddress");
             if (customAddrFormField != null) {
                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {
                     System.out.printf("Customer Address: %s%n", customAddrFormField.getValue().asString());
                 }
             }
             FormField invoiceDateFormField = recognizedFields.get("InvoiceDate");
             if (invoiceDateFormField != null) {
                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {
                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();
                     System.out.printf("Invoice Date: %s, confidence: %.2f%n",
                         invoiceDate, invoiceDateFormField.getConfidence());
                 }
             }
         });
    ```



    [here]: https://aka.ms/formrecognizer/invoicefields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoices(InputStream invoice, long length)
    parameters:
    - id: invoice
      type: java.io.InputStream
      description: The data of the invoice to recognize invoice related information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize invoice operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions,com.azure.core.util.Context)
  id: beginRecognizeInvoices(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeInvoices(InputStream invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeInvoices(InputStream invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices(InputStream invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes data from the provided document data using optical character recognition (OCR) and a prebuilt trained invoice model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a invoice.


    **Code sample**


    ```java

    File invoice = new File("local/file_path/invoice.jpg");
     boolean includeFieldElements = true;
     // Utility method to convert input stream to Byte buffer
     ByteArrayInputStream inputStream = new ByteArrayInputStream(Files.readAllBytes(invoice.toPath()));
     // if training polling operation completed, retrieve the final result.
     formRecognizerClient.beginRecognizeInvoices(inputStream,
         invoice.length(),
         new RecognizeInvoicesOptions()
             .setContentType(FormContentType.IMAGE_JPEG)
             .setFieldElementsIncluded(includeFieldElements)
             .setPollInterval(Duration.ofSeconds(5)),
         Context.NONE)
         .getFinalResult()
         .stream()
         .map(RecognizedForm::getFields)
         .forEach(recognizedFields -> {
             FormField customAddrFormField = recognizedFields.get("CustomerAddress");
             if (customAddrFormField != null) {
                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {
                     System.out.printf("Customer Address: %s%n", customAddrFormField.getValue().asString());
                 }
             }
             FormField invoiceDateFormField = recognizedFields.get("InvoiceDate");
             if (invoiceDateFormField != null) {
                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {
                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();
                     System.out.printf("Invoice Date: %s, confidence: %.2f%n",
                         invoiceDate, invoiceDateFormField.getConfidence());
                 }
             }
         });
    ```



    [here]: https://aka.ms/formrecognizer/invoicefields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoices(InputStream invoice, long length, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
    parameters:
    - id: invoice
      type: java.io.InputStream
      description: The data of the invoice to recognize invoice related information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeInvoicesOptions
      type: com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a invoice.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize invoice operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl(java.lang.String)
  id: beginRecognizeInvoicesFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeInvoicesFromUrl(String invoiceUrl)
  nameWithType: FormRecognizerClient.beginRecognizeInvoicesFromUrl(String invoiceUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl(String invoiceUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes invoice data from document using optical character recognition (OCR) and a prebuilt invoice trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on an invoice.


    **Code sample**


    ```java

    String invoiceUrl = "invoice_url";
     // if training polling operation completed, retrieve the final result.
     formRecognizerClient.beginRecognizeInvoicesFromUrl(invoiceUrl)
         .getFinalResult()
         .stream()
         .map(RecognizedForm::getFields)
         .forEach(recognizedFields -> {
             FormField customAddrFormField = recognizedFields.get("CustomerAddress");
             if (customAddrFormField != null) {
                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {
                     System.out.printf("Customer Address: %s%n", customAddrFormField.getValue().asString());
                 }
             }
             FormField invoiceDateFormField = recognizedFields.get("InvoiceDate");
             if (invoiceDateFormField != null) {
                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {
                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();
                     System.out.printf("Invoice Date: %s, confidence: %.2f%n",
                         invoiceDate, invoiceDateFormField.getConfidence());
                 }
             }
         });
    ```



    [here]: https://aka.ms/formrecognizer/invoicefields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoicesFromUrl(String invoiceUrl)
    parameters:
    - id: invoiceUrl
      type: java.lang.String
      description: The URL of the invoice document to analyze.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize invoice operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions,com.azure.core.util.Context)
  id: beginRecognizeInvoicesFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes invoice data from documents using optical character recognition (OCR) and a prebuilt invoice trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    **Code sample**


    ```java

    String invoiceUrl = "invoice_url";
     boolean includeFieldElements = true;
     // if training polling operation completed, retrieve the final result.
     formRecognizerClient.beginRecognizeInvoicesFromUrl(invoiceUrl,
         new RecognizeInvoicesOptions()
             .setFieldElementsIncluded(includeFieldElements)
             .setPollInterval(Duration.ofSeconds(5)), Context.NONE)
         .getFinalResult()
         .stream()
         .map(RecognizedForm::getFields)
         .forEach(recognizedFields -> {
             FormField customAddrFormField = recognizedFields.get("CustomerAddress");
             if (customAddrFormField != null) {
                 if (FieldValueType.STRING == customAddrFormField.getValue().getValueType()) {
                     System.out.printf("Customer Address: %s%n", customAddrFormField.getValue().asString());
                 }
             }
             FormField invoiceDateFormField = recognizedFields.get("InvoiceDate");
             if (invoiceDateFormField != null) {
                 if (FieldValueType.DATE == invoiceDateFormField.getValue().getValueType()) {
                     LocalDate invoiceDate = invoiceDateFormField.getValue().asDate();
                     System.out.printf("Invoice Date: %s, confidence: %.2f%n",
                         invoiceDate, invoiceDateFormField.getConfidence());
                 }
             }
         });
    ```
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeInvoicesFromUrl(String invoiceUrl, RecognizeInvoicesOptions recognizeInvoicesOptions, Context context)
    parameters:
    - id: invoiceUrl
      type: java.lang.String
      description: The source URL to the input invoice document.
    - id: recognizeInvoicesOptions
      type: com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing an invoice.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize invoice operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long)
  id: beginRecognizeReceipts(java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceipts(InputStream receipt, long length)
  nameWithType: FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes data from the provided document data using optical character recognition (OCR) and a prebuilt trained receipt model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{receipt_url}\");\n byte[] fileContent = Files.readAllBytes(receipt.toPath());\n try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {\n \n     formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length()).getFinalResult()\n         .forEach(recognizedReceipt -> {\n             Map<String, FormField> recognizedFields = recognizedReceipt.getFields();\n             FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n             if (merchantNameField != null) {\n                 if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                     String merchantName = merchantNameField.getValue().asString();\n                     System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                         merchantName, merchantNameField.getConfidence());\n                 }\n             }\n \n             FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n             if (merchantPhoneNumberField != null) {\n                 if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                     String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                     System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                         merchantAddress, merchantPhoneNumberField.getConfidence());\n                 }\n             }\n \n             FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n             if (transactionDateField != null) {\n                 if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                     LocalDate transactionDate = transactionDateField.getValue().asDate();\n                     System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                         transactionDate, transactionDateField.getConfidence());\n                 }\n             }\n \n             FormField receiptItemsField = recognizedFields.get(\"Items\");\n             if (receiptItemsField != null) {\n                 System.out.printf(\"Receipt Items: %n\");\n                 if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                     List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                     receiptItems.stream()\n                         .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                         .map(formField -> formField.getValue().asMap())\n                         .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                     Float quantity = formField.getValue().asFloat();\n                                     System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n         });\n }\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceipts(InputStream receipt, long length)
    parameters:
    - id: receipt
      type: java.io.InputStream
      description: The data of the receipt to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize receipt operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)
  id: beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceipts(InputStream receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes data from the provided document data using optical character recognition (OCR) and a prebuilt trained receipt model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support


    See [here][] for fields found on a receipt.


    **Code sample**


    ```java

    File receipt = new File("{local/file_path/fileName.jpg}");
     boolean includeFieldElements = true;
     byte[] fileContent = Files.readAllBytes(receipt.toPath());
     try (InputStream targetStream = new ByteArrayInputStream(fileContent)) {
         for (RecognizedForm recognizedForm : formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),
             new RecognizeReceiptsOptions()
                 .setContentType(FormContentType.IMAGE_JPEG)
                 .setFieldElementsIncluded(includeFieldElements)
                 .setLocale("en-US")
                 .setPollInterval(Duration.ofSeconds(5)), Context.NONE)
             .getFinalResult()) {
             Map<String, FormField> recognizedFields = recognizedForm.getFields();
             FormField merchantNameField = recognizedFields.get("MerchantName");
             if (merchantNameField != null) {
                 if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {
                     String merchantName = merchantNameField.getValue().asString();
                     System.out.printf("Merchant Name: %s, confidence: %.2f%n",
                         merchantName, merchantNameField.getConfidence());
                 }
             }
             FormField merchantPhoneNumberField = recognizedFields.get("MerchantPhoneNumber");
             if (merchantPhoneNumberField != null) {
                 if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {
                     String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();
                     System.out.printf("Merchant Phone number: %s, confidence: %.2f%n",
                         merchantAddress, merchantPhoneNumberField.getConfidence());
                 }
             }
             FormField transactionDateField = recognizedFields.get("TransactionDate");
             if (transactionDateField != null) {
                 if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {
                     LocalDate transactionDate = transactionDateField.getValue().asDate();
                     System.out.printf("Transaction Date: %s, confidence: %.2f%n",
                         transactionDate, transactionDateField.getConfidence());
                 }
             }
             FormField receiptItemsField = recognizedFields.get("Items");
             if (receiptItemsField != null) {
                 System.out.printf("Receipt Items: %n");
                 if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {
                     List<FormField> receiptItems = receiptItemsField.getValue().asList();
                     receiptItems.stream()
                         .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())
                         .map(formField -> formField.getValue().asMap())
                         .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {
                             if ("Quantity".equals(key)) {
                                 if (FieldValueType.FLOAT == formField.getValue().getValueType()) {
                                     Float quantity = formField.getValue().asFloat();
                                     System.out.printf("Quantity: %f, confidence: %.2f%n",
                                         quantity, formField.getConfidence());
                                 }
                             }
                         }));
                 }
             }
         }
     }
    ```



    [here]: https://aka.ms/formrecognizer/receiptfields
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceipts(InputStream receipt, long length, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
    parameters:
    - id: receipt
      type: java.io.InputStream
      description: The data of the receipt to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeReceiptsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a receipt.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  id: beginRecognizeReceiptsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl)
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from document using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{file_source_url}\";\n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl)\n     .getFinalResult()\n     .forEach(recognizedReceipt -> {\n         Map<String, FormField> recognizedFields = recognizedReceipt.getFields();\n         FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                 String merchantName = merchantNameField.getValue().asString();\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                 String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                 LocalDate transactionDate = transactionDateField.getValue().asDate();\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                 List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                 receiptItems.stream()\n                     .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                     .map(formField -> formField.getValue().asMap())\n                     .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                         if (\"Quantity\".equals(key)) {\n                             if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                 Float quantity = formField.getValue().asFloat();\n                                 System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                     quantity, formField.getConfidence());\n                             }\n                         }\n                     }));\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/receiptfields"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The URL of the receipt to analyze.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize receipt operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)
  id: beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receipt_url}\";\n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl,\n     new RecognizeReceiptsOptions()\n         .setLocale(\"en-US\")\n         .setPollInterval(Duration.ofSeconds(5))\n         .setFieldElementsIncluded(true), Context.NONE)\n     .getFinalResult()\n     .forEach(recognizedReceipt -> {\n         Map<String, FormField> recognizedFields = recognizedReceipt.getFields();\n         FormField merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING == merchantNameField.getValue().getValueType()) {\n                 String merchantName = merchantNameField.getValue().asString();\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER == merchantPhoneNumberField.getValue().getValueType()) {\n                 String merchantAddress = merchantPhoneNumberField.getValue().asPhoneNumber();\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE == transactionDateField.getValue().getValueType()) {\n                 LocalDate transactionDate = transactionDateField.getValue().asDate();\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST == receiptItemsField.getValue().getValueType()) {\n                 List<FormField> receiptItems = receiptItemsField.getValue().asList();\n                 receiptItems.stream()\n                     .filter(receiptItem -> FieldValueType.MAP == receiptItem.getValue().getValueType())\n                     .map(formField -> formField.getValue().asMap())\n                     .forEach(formFieldMap -> formFieldMap.forEach((key, formField) -> {\n                         if (\"Quantity\".equals(key)) {\n                             if (FieldValueType.FLOAT == formField.getValue().getValueType()) {\n                                 Float quantity = formField.getValue().asFloat();\n                                 System.out.printf(\"Quantity: %f, confidence: %.2f%n\",\n                                     quantity, formField.getConfidence());\n                             }\n                         }\n                     }));\n             }\n         }\n     });\n```"
  syntax:
    content: public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeReceiptsOptions recognizeReceiptsOptions, Context context)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The source URL to the input receipt.
    - id: recognizeReceiptsOptions
      type: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions" data-throw-if-not-resolved="false">options</xref>
         that may be passed when analyzing a receipt.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the HTTP pipeline during the service call.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize receipt operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a list of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
references:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient*
  name: FormRecognizerClient
  nameWithType: FormRecognizerClient.FormRecognizerClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient
  package: com.azure.ai.formrecognizer
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
    name: FormRecognizerOperationResult
    fullName: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedForm
    name: RecognizedForm
    fullName: com.azure.ai.formrecognizer.models.RecognizedForm
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  name: beginRecognizeCustomFormsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
  name: RecognizeCustomFormsOptions
  nameWithType: RecognizeCustomFormsOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  name: beginRecognizeCustomForms
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
    name: FormRecognizerOperationResult
    fullName: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormPage
    name: FormPage
    fullName: com.azure.ai.formrecognizer.models.FormPage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  name: beginRecognizeContentFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeContentOptions
  name: RecognizeContentOptions
  nameWithType: RecognizeContentOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeContentOptions
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  name: beginRecognizeContent
  nameWithType: FormRecognizerClient.beginRecognizeContent
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  name: beginRecognizeReceiptsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
  name: RecognizeReceiptsOptions
  nameWithType: RecognizeReceiptsOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeReceiptsOptions
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  name: beginRecognizeReceipts
  nameWithType: FormRecognizerClient.beginRecognizeReceipts
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl*
  name: beginRecognizeBusinessCardsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeBusinessCardsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions
  name: RecognizeBusinessCardsOptions
  nameWithType: RecognizeBusinessCardsOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards*
  name: beginRecognizeBusinessCards
  nameWithType: FormRecognizerClient.beginRecognizeBusinessCards
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCards
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl*
  name: beginRecognizeInvoicesFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeInvoicesFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoicesFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions
  name: RecognizeInvoicesOptions
  nameWithType: RecognizeInvoicesOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeInvoicesOptions
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices*
  name: beginRecognizeInvoices
  nameWithType: FormRecognizerClient.beginRecognizeInvoices
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeInvoices
  package: com.azure.ai.formrecognizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List
  name: FormRecognizerOperationResult,List
  nameWithType: FormRecognizerOperationResult,List
  fullName: com.azure.ai.formrecognizer.models.FormRecognizerOperationResult,java.util.List
- uid: com.azure.ai.formrecognizer.models.RecognizedForm
  name: RecognizedForm
  nameWithType: RecognizedForm
  fullName: com.azure.ai.formrecognizer.models.RecognizedForm
- uid: com.azure.ai.formrecognizer.models.FormPage
  name: FormPage
  nameWithType: FormPage
  fullName: com.azure.ai.formrecognizer.models.FormPage
