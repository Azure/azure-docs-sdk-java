### YamlMime:ManagedReference
items:
- uid: com.azure.ai.formrecognizer.FormRecognizerClient
  id: FormRecognizerClient
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer
  children:
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,long,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,long,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  - com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  langs:
  - java
  name: FormRecognizerClient
  nameWithType: FormRecognizerClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient
  type: Class
  package: com.azure.ai.formrecognizer
  summary: >-
    This class provides a synchronous client that contains all the operations that apply to Azure Form Recognizer. Operations allowed by the client are recognizing receipt data from documents, recognizing layout information and analyzing custom forms for predefined data.


    **Instantiating a synchronous Form Recognizer Client**


    ```java

    FormRecognizerClient formRecognizerClient = new FormRecognizerClientBuilder()
         .credential(new AzureKeyCredential("{key}"))
         .endpoint("{endpoint}")
         .buildClient();
    ```
  syntax:
    content: public final class FormRecognizerClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  id: FormRecognizerClient(com.azure.ai.formrecognizer.FormRecognizerAsyncClient)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: FormRecognizerClient(FormRecognizerAsyncClient client)
  nameWithType: FormRecognizerClient.FormRecognizerClient(FormRecognizerAsyncClient client)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient(FormRecognizerAsyncClient client)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient*
  type: Constructor
  package: com.azure.ai.formrecognizer
  summary: Create a <xref uid="com.azure.ai.formrecognizer.FormRecognizerClient" data-throw-if-not-resolved="false">client</xref> that sends requests to the Form Recognizer service's endpoint. Each service call goes through the <xref uid="com.azure.ai.formrecognizer.FormRecognizerClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " FormRecognizerClient(FormRecognizerAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
      description: The <xref uid="com.azure.ai.formrecognizer.FormRecognizerClient" data-throw-if-not-resolved="false">FormRecognizerClient</xref> that the client routes its request through.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long)
  id: beginRecognizeContent(java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContent(InputStream form, long length)
  nameWithType: FormRecognizerClient.beginRecognizeContent(InputStream form, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(InputStream form, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes layout data using optical character recognition (OCR) and a custom trained model.


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    File form = new File("{local/file_path/fileName.pdf}");
     byte[] fileContent = Files.readAllBytes(form.toPath());
     InputStream targetStream = new ByteArrayInputStream(fileContent);
     formRecognizerClient.beginRecognizeContent(targetStream, form.length()).getFinalResult()
         .forEach(recognizedForm -> {
             System.out.printf("Page Angle: %f%n", recognizedForm.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
             System.out.println("Recognized Tables: ");
             recognizedForm.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->
                 System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,List<FormPage>> beginRecognizeContent(InputStream form, long length)
    parameters:
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize content operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeContent(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContent(InputStream form, long length, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerClient.beginRecognizeContent(InputStream form, long length, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent(InputStream form, long length, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes content/layout data from the provided document data using optical character recognition (OCR).\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nFile form = new File(\"{file_source_url}\");\n byte[] fileContent = Files.readAllBytes(form.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeContent(targetStream, form.length(),\n     new RecognizeOptions()\n         .setPollInterval(Duration.ofSeconds(5)))\n     .getFinalResult().forEach(recognizedForm -> {\n         System.out.printf(\"Page Angle: %f%n\", recognizedForm.getTextAngle());\n         System.out.printf(\"Page Dimension unit: %s%n\", recognizedForm.getUnit());\n         // Table information\n         System.out.println(\"Recognized Tables: \");\n         recognizedForm.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->\n             System.out.printf(\"%s \", recognizedTableCell.getText())));\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,List<FormPage>> beginRecognizeContent(InputStream form, long length, RecognizeOptions recognizeOptions)
    parameters:
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize content information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         analyzing a receipt. The configurable <code>RecognizeOptions options</code> that may be passed when recognizing
         content on a form.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize content operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String)
  id: beginRecognizeContentFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl)
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data from documents using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formUrl = "{form_url}";
     formRecognizerClient.beginRecognizeContentFromUrl(formUrl).getFinalResult().forEach(recognizedForm -> {
         System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
         System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
         // Table information
         System.out.println("Recognized Tables: ");
         recognizedForm.getTables().forEach(formTable -> formTable.getCells().forEach(recognizedTableCell ->
             System.out.printf("%s ", recognizedTableCell.getText())));
     });
    ```
  syntax:
    content: public SyncPoller<OperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize content form operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeContentFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: >-
    Recognizes content/layout data using optical character recognition (OCR).


    The service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.


    **Code sample**


    ```java

    String formPath = "{file_source_url}";
     formRecognizerClient.beginRecognizeContentFromUrl(formPath,
         new RecognizeOptions()
             .setPollInterval(Duration.ofSeconds(5)))
         .getFinalResult()
         .forEach(recognizedForm -> {
             System.out.printf("Page Angle: %s%n", recognizedForm.getTextAngle());
             System.out.printf("Page Dimension unit: %s%n", recognizedForm.getUnit());
             // Table information
             System.out.println("Recognized Tables: ");
             recognizedForm.getTables().forEach(formTable ->
                 formTable.getCells().forEach(recognizedTableCell ->
                     System.out.printf("%s ", recognizedTableCell.getText())));
         });
    ```
  syntax:
    content: public SyncPoller<OperationResult,List<FormPage>> beginRecognizeContentFromUrl(String formUrl, RecognizeOptions recognizeOptions)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing content/layout on a form.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize layout operation until it has completed, has
         failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,long,java.lang.String)
  id: beginRecognizeCustomForms(java.io.InputStream,long,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomForms(InputStream form, long length, String modelId)
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms(InputStream form, long length, String modelId)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(InputStream form, long length, String modelId)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n byte[] fileContent = Files.readAllBytes(form.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeCustomForms(targetStream, form.length(), modelId).getFinalResult()\n     .forEach(recognizedForm -> recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n         System.out.printf(\"Field text: %s%n\", fieldText);\n         System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n         System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n     }));\n```"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeCustomForms(InputStream form, long length, String modelId)
    parameters:
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(java.io.InputStream,long,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeCustomForms(java.io.InputStream,long,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomForms(InputStream form, long length, String modelId, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms(InputStream form, long length, String modelId, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms(InputStream form, long length, String modelId, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\n**Code sample**\n\n```java\nFile form = new File(\"{local/file_path/fileName.jpg}\");\n String modelId = \"{custom_trained_model_id}\";\n boolean includeFieldElements = true;\n \n byte[] fileContent = Files.readAllBytes(form.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeCustomForms(targetStream, form.length(), modelId,\n     new RecognizeOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setIncludeFieldElements(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(10)))\n     .getFinalResult()\n     .forEach(recognizedForm -> recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n         System.out.printf(\"Field text: %s%n\", fieldText);\n         System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n         System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n     }));\n```"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeCustomForms(InputStream form, long length, String modelId, RecognizeOptions recognizeOptions)
    parameters:
    - id: form
      type: java.io.InputStream
      description: The data of the form to recognize form information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing custom form.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained model with or without labels.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString formUrl = \"{form_url}\";\n String modelId = \"{custom_trained_model_id}\";\n \n formRecognizerClient.beginRecognizeCustomFormsFromUrl(formUrl, modelId).getFinalResult()\n     .forEach(recognizedForm ->\n         recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n             System.out.printf(\"Field text: %s%n\", fieldText);\n             System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n             System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n         }));\n```"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String formUrl, String modelId)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The URL of the form to analyze.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeCustomFormsFromUrl(java.lang.String,java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a custom trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString analyzeFilePath = \"{file_source_url}\";\n String modelId = \"{model_id}\";\n boolean includeFieldElements = true;\n \n formRecognizerClient.beginRecognizeCustomFormsFromUrl(analyzeFilePath, modelId,\n     new RecognizeOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setIncludeFieldElements(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(10)))\n     .getFinalResult()\n     .forEach(recognizedForm -> recognizedForm.getFields().forEach((fieldText, fieldValue) -> {\n         System.out.printf(\"Field text: %s%n\", fieldText);\n         System.out.printf(\"Field value: %s%n\", fieldValue.getValue());\n         System.out.printf(\"Confidence score: %.2f%n\", fieldValue.getConfidence());\n     }));\n```"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeCustomFormsFromUrl(String formUrl, String modelId, RecognizeOptions recognizeOptions)
    parameters:
    - id: formUrl
      type: java.lang.String
      description: The source URL to the input form.
    - id: modelId
      type: java.lang.String
      description: The UUID string format custom trained model Id to be used.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         recognizing custom form.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize custom form operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long)
  id: beginRecognizeReceipts(java.io.InputStream,long)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceipts(InputStream receipt, long length)
  nameWithType: FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes data from the provided document data using optical character recognition (OCR) and a prebuilt trained receipt model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{receipt_url}\");\n byte[] fileContent = Files.readAllBytes(receipt.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n \n formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length())\n     .getFinalResult().forEach(recognizedReceipt -> {\n         Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n         FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                 String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                 String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                 LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                 List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                 receiptItems.forEach(receiptItem -> {\n                     if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n                         Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                         formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                     Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                     System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         });\n                     }\n                 });\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/azsdk/python/formrecognizer/receiptfields"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeReceipts(InputStream receipt, long length)
    parameters:
    - id: receipt
      type: java.io.InputStream
      description: The data of the receipt to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize receipt operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeReceipts(java.io.InputStream,long,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceipts(InputStream receipt, long length, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts(InputStream receipt, long length, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes data from the provided document data using optical character recognition (OCR) and a prebuilt trained receipt model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nFile receipt = new File(\"{local/file_path/fileName.jpg}\");\n boolean includeFieldElements = true;\n byte[] fileContent = Files.readAllBytes(receipt.toPath());\n InputStream targetStream = new ByteArrayInputStream(fileContent);\n formRecognizerClient.beginRecognizeReceipts(targetStream, receipt.length(),\n     new RecognizeOptions()\n         .setContentType(FormContentType.IMAGE_JPEG)\n         .setIncludeFieldElements(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .getFinalResult().forEach(recognizedReceipt -> {\n         Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n         FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                 String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                 String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                 LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                 List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                 receiptItems.forEach(receiptItem -> {\n                     if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n                         Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                         formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                     Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                     System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         });\n                     }\n                 });\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/azsdk/python/formrecognizer/receiptfields"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeReceipts(InputStream receipt, long length, RecognizeOptions recognizeOptions)
    parameters:
    - id: receipt
      type: java.io.InputStream
      description: The data of the receipt to recognize receipt information from.
    - id: length
      type: long
      description: The exact length of the data.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         analyzing a receipt.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> that polls the recognize receipt operation until it has completed, has failed,
         or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String)
  id: beginRecognizeReceiptsFromUrl(java.lang.String)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl)
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from document using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a receipt.\n\n**Code sample**\n\n```java\nString receiptUrl = \"{file_source_url}\";\n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl).getFinalResult()\n     .forEach(recognizedReceipt -> {\n         Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n         FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                 String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                 String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                 LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                 List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                 receiptItems.forEach(receiptItem -> {\n                     if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n                         Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                         formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                     Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                     System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         });\n                     }\n                 });\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/azsdk/python/formrecognizer/receiptfields"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The URL of the receipt to analyze.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize receipt operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  id: beginRecognizeReceiptsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeOptions)
  artifact: com.azure:azure-ai-formrecognizer:1.0.0-beta.4
  parent: com.azure.ai.formrecognizer.FormRecognizerClient
  langs:
  - java
  name: beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
  overload: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  type: Method
  package: com.azure.ai.formrecognizer
  summary: "Recognizes receipt data from documents using optical character recognition (OCR) and a prebuilt receipt trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\n**Code sample**\n\n```java\nString receiptUrl = \"{receipt_url}\";\n formRecognizerClient.beginRecognizeReceiptsFromUrl(receiptUrl).getFinalResult()\n     .forEach(recognizedReceipt -> {\n         Map<String, FormField<?>> recognizedFields = recognizedReceipt.getFields();\n         FormField<?> merchantNameField = recognizedFields.get(\"MerchantName\");\n         if (merchantNameField != null) {\n             if (FieldValueType.STRING.equals(merchantNameField.getValueType())) {\n                 String merchantName = FieldValueType.STRING.cast(merchantNameField);\n                 System.out.printf(\"Merchant Name: %s, confidence: %.2f%n\",\n                     merchantName, merchantNameField.getConfidence());\n             }\n         }\n \n         FormField<?> merchantPhoneNumberField = recognizedFields.get(\"MerchantPhoneNumber\");\n         if (merchantPhoneNumberField != null) {\n             if (FieldValueType.PHONE_NUMBER.equals(merchantNameField.getValueType())) {\n                 String merchantAddress = FieldValueType.PHONE_NUMBER.cast(merchantPhoneNumberField);\n                 System.out.printf(\"Merchant Phone number: %s, confidence: %.2f%n\",\n                     merchantAddress, merchantPhoneNumberField.getConfidence());\n             }\n         }\n \n         FormField<?> transactionDateField = recognizedFields.get(\"TransactionDate\");\n         if (transactionDateField != null) {\n             if (FieldValueType.DATE.equals(transactionDateField.getValueType())) {\n                 LocalDate transactionDate = FieldValueType.DATE.cast(transactionDateField);\n                 System.out.printf(\"Transaction Date: %s, confidence: %.2f%n\",\n                     transactionDate, transactionDateField.getConfidence());\n             }\n         }\n \n         FormField<?> receiptItemsField = recognizedFields.get(\"Items\");\n         if (receiptItemsField != null) {\n             System.out.printf(\"Receipt Items: %n\");\n             if (FieldValueType.LIST.equals(receiptItemsField.getValueType())) {\n                 List<FormField<?>> receiptItems = FieldValueType.LIST.cast(receiptItemsField);\n                 receiptItems.forEach(receiptItem -> {\n                     if (FieldValueType.MAP.equals(receiptItem.getValueType())) {\n                         Map<String, FormField<?>> formFieldMap = FieldValueType.MAP.cast(receiptItem);\n                         formFieldMap.forEach((key, formField) -> {\n                             if (\"Quantity\".equals(key)) {\n                                 if (FieldValueType.DOUBLE.equals(formField.getValueType())) {\n                                     Float quantity = FieldValueType.DOUBLE.cast(formField);\n                                     System.out.printf(\"Quantity: %d, confidence: %.2f%n\",\n                                         quantity, formField.getConfidence());\n                                 }\n                             }\n                         });\n                     }\n                 });\n             }\n         }\n     });\n```"
  syntax:
    content: public SyncPoller<OperationResult,List<RecognizedForm>> beginRecognizeReceiptsFromUrl(String receiptUrl, RecognizeOptions recognizeOptions)
    parameters:
    - id: receiptUrl
      type: java.lang.String
      description: The source URL to the input receipt.
    - id: recognizeOptions
      type: com.azure.ai.formrecognizer.models.RecognizeOptions
      description: >-
        The additional configurable <xref uid="com.azure.ai.formrecognizer.models.RecognizeOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when
         analyzing a receipt. Include text lines and element references in the result.
    return:
      type: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
      description: >-
        A <xref uid="com.azure.core.util.polling.SyncPoller" data-throw-if-not-resolved="false">SyncPoller</xref> to poll the progress of the recognize receipt operation until it has completed,
         has failed, or has been cancelled. The completed operation returns a List of <xref uid="com.azure.ai.formrecognizer.models.RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
references:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
  name: FormRecognizerAsyncClient
  nameWithType: FormRecognizerAsyncClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient*
  name: FormRecognizerClient
  nameWithType: FormRecognizerClient.FormRecognizerClient
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.FormRecognizerClient
  package: com.azure.ai.formrecognizer
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.RecognizedForm>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.RecognizedForm
    name: RecognizedForm
    fullName: com.azure.ai.formrecognizer.models.RecognizedForm
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl*
  name: beginRecognizeCustomFormsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeCustomFormsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomFormsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.models.RecognizeOptions
  name: RecognizeOptions
  nameWithType: RecognizeOptions
  fullName: com.azure.ai.formrecognizer.models.RecognizeOptions
- uid: java.io.InputStream
  spec.java:
  - uid: java.io.InputStream
    name: InputStream
    fullName: java.io.InputStream
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms*
  name: beginRecognizeCustomForms
  nameWithType: FormRecognizerClient.beginRecognizeCustomForms
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeCustomForms
  package: com.azure.ai.formrecognizer
- uid: com.azure.core.util.polling.SyncPoller<com.azure.ai.formrecognizer.models.OperationResult,java.util.List<com.azure.ai.formrecognizer.models.FormPage>>
  spec.java:
  - uid: com.azure.core.util.polling.SyncPoller
    name: SyncPoller
    fullName: com.azure.core.util.polling.SyncPoller
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.OperationResult
    name: OperationResult
    fullName: com.azure.ai.formrecognizer.models.OperationResult
  - name: ','
    fullName: ','
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.ai.formrecognizer.models.FormPage
    name: FormPage
    fullName: com.azure.ai.formrecognizer.models.FormPage
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl*
  name: beginRecognizeContentFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeContentFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContentFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent*
  name: beginRecognizeContent
  nameWithType: FormRecognizerClient.beginRecognizeContent
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeContent
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl*
  name: beginRecognizeReceiptsFromUrl
  nameWithType: FormRecognizerClient.beginRecognizeReceiptsFromUrl
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceiptsFromUrl
  package: com.azure.ai.formrecognizer
- uid: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts*
  name: beginRecognizeReceipts
  nameWithType: FormRecognizerClient.beginRecognizeReceipts
  fullName: com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeReceipts
  package: com.azure.ai.formrecognizer
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.core.util.polling.SyncPoller
  name: SyncPoller
  nameWithType: SyncPoller
  fullName: com.azure.core.util.polling.SyncPoller
- uid: com.azure.ai.formrecognizer.models.RecognizedForm
  name: RecognizedForm
  nameWithType: RecognizedForm
  fullName: com.azure.ai.formrecognizer.models.RecognizedForm
- uid: com.azure.ai.formrecognizer.models.OperationResult,java.util.List
  name: OperationResult,List
  nameWithType: OperationResult,List
  fullName: com.azure.ai.formrecognizer.models.OperationResult,java.util.List
- uid: com.azure.ai.formrecognizer.models.FormPage
  name: FormPage
  nameWithType: FormPage
  fullName: com.azure.ai.formrecognizer.models.FormPage
