### YamlMime:JavaMember
uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.serializeAsync*"
fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.serializeAsync"
name: "serializeAsync"
nameWithType: "SchemaRegistryApacheAvroSerializer.serializeAsync"
members:
- uid: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.serializeAsync(java.io.OutputStream,java.lang.Object)"
  fullName: "com.azure.data.schemaregistry.apacheavro.SchemaRegistryApacheAvroSerializer.serializeAsync(OutputStream outputStream, Object object)"
  name: "serializeAsync(OutputStream outputStream, Object object)"
  nameWithType: "SchemaRegistryApacheAvroSerializer.serializeAsync(OutputStream outputStream, Object object)"
  summary: "Serializes the `object` into the `outputStream`."
  parameters:
  - description: "Output stream to write serialization of <code>object</code> to."
    name: "outputStream"
    type: "<xref href=\"java.io.OutputStream?alt=java.io.OutputStream&text=OutputStream\" data-throw-if-not-resolved=\"False\" />"
  - description: "The object to serialize into <code>outputStream</code>."
    name: "object"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> serializeAsync(OutputStream outputStream, Object object)"
  returns:
    description: "A Mono that completes when the object has been serialized into the stream."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.data.schemaregistry.apacheavro"
artifact: com.azure:azure-data-schemaregistry-apacheavro:1.0.0-beta.8
