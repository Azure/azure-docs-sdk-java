### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  id: ConcurrentHashMultiset
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<E>create()
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<E>create(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<E>create(java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.clear()
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.count(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.createEntrySet()
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.size()
  - com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.toArray()
  langs:
  - java
  name: ConcurrentHashMultiset<E>
  nameWithType: ConcurrentHashMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A multiset that supports concurrent modifications and that provides atomic versions of most `Multiset` operations (exceptions where noted). Null elements are not supported.


    See the Guava User Guide article on [ `Multiset`][_Multiset].



    [_Multiset]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multiset
  syntax:
    content: public final class ConcurrentHashMultiset<E> extends AbstractMultiset<E> implements Serializable
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.clear()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.elementSet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.entrySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.iterator()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<E>create()
  id: <E>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: <E>create()
  nameWithType: ConcurrentHashMultiset<E>.<E>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.<E>create()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new, empty `ConcurrentHashMultiset` using the default initial capacity, load factor, and concurrency settings.
  syntax:
    content: public static ConcurrentHashMultiset<E> <E>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<E>create(java.lang.Iterable<? extends E>)
  id: <E>create(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: <E>create(Iterable<? extends E> elements)
  nameWithType: ConcurrentHashMultiset<E>.<E>create(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.<E>create(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a new `ConcurrentHashMultiset` containing the specified elements, using the default initial capacity, load factor, and concurrency settings.


    This implementation is highly efficient when `elements` is itself a <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset" data-throw-if-not-resolved="false">Multiset</xref>.
  syntax:
    content: public static ConcurrentHashMultiset<E> <E>create(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
      description: the elements that the multiset should contain
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<E>create(java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>)
  id: <E>create(java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: <E>create(ConcurrentMap<E,AtomicInteger> countMap)
  nameWithType: ConcurrentHashMultiset<E>.<E>create(ConcurrentMap<E,AtomicInteger> countMap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.<E>create(ConcurrentMap<E,AtomicInteger> countMap)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a new, empty `ConcurrentHashMultiset` using `countMap` as the internal backing map.


    This instance will assume ownership of `countMap`, and other code should not maintain references to the map or modify it in any way.


    The returned multiset is serializable if the input map is.
  syntax:
    content: public static ConcurrentHashMultiset<E> <E>create(ConcurrentMap<E,AtomicInteger> countMap)
    parameters:
    - id: countMap
      type: java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>
      description: >-
        backing map for storing the elements in the multiset and their counts. It must
             be empty.
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.<T>toArray(T[])
  id: <T>toArray(T[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: <T>toArray(T[] array)
  nameWithType: ConcurrentHashMultiset<E>.<T>toArray(T[] array)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.<T>toArray(T[] array)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public T[] <T>toArray(T[] array)
    parameters:
    - id: array
      type: T[]
    return:
      type: T[]
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>)
  id: ConcurrentHashMultiset(java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: ConcurrentHashMultiset(ConcurrentMap<E,AtomicInteger> countMap)
  nameWithType: ConcurrentHashMultiset<E>.ConcurrentHashMultiset(ConcurrentMap<E,AtomicInteger> countMap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.ConcurrentHashMultiset(ConcurrentMap<E,AtomicInteger> countMap)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.ConcurrentHashMultiset*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ConcurrentHashMultiset(ConcurrentMap<E,AtomicInteger> countMap)"
    parameters:
    - id: countMap
      type: java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.add(E,int)
  id: add(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: add(E element, int occurrences)
  nameWithType: ConcurrentHashMultiset<E>.add(E element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.add(E element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds a number of occurrences of the specified element to this multiset.
  syntax:
    content: public int add(E element, int occurrences)
    parameters:
    - id: element
      type: E
      description: the element to add
    - id: occurrences
      type: int
      description: the number of occurrences to add
    return:
      type: int
      description: the previous count of the element before the operation; possibly zero
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: clear()
  nameWithType: ConcurrentHashMultiset<E>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.count(java.lang.Object)
  id: count(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: count(Object element)
  nameWithType: ConcurrentHashMultiset<E>.count(Object element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.count(Object element)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.count*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the number of occurrences of `element` in this multiset.
  syntax:
    content: public int count(Object element)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element to look for
    return:
      type: int
      description: the nonnegative number of occurrences of the element
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.createEntrySet()
  id: createEntrySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: createEntrySet()
  nameWithType: ConcurrentHashMultiset<E>.createEntrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.createEntrySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.createEntrySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Set<Multiset.Entry<E>> createEntrySet()
    return:
      type: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: isEmpty()
  nameWithType: ConcurrentHashMultiset<E>.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.isEmpty()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: iterator()
  nameWithType: ConcurrentHashMultiset<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Iterator<E> iterator()
    return:
      type: java.util.Iterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.remove(java.lang.Object,int)
  id: remove(java.lang.Object,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: remove(Object element, int occurrences)
  nameWithType: ConcurrentHashMultiset<E>.remove(Object element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.remove(Object element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes a number of occurrences of the specified element from this multiset. If the multiset contains fewer than this number of occurrences to begin with, all occurrences will be removed.
  syntax:
    content: public int remove(Object element, int occurrences)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element whose occurrences should be removed
    - id: occurrences
      type: int
      description: the number of occurrences of the element to remove
    return:
      type: int
      description: the count of the element before the operation; possibly zero
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object,int)
  id: removeExactly(java.lang.Object,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: removeExactly(Object element, int occurrences)
  nameWithType: ConcurrentHashMultiset<E>.removeExactly(Object element, int occurrences)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.removeExactly(Object element, int occurrences)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.removeExactly*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes exactly the specified number of occurrences of `element`, or makes no change if this is not possible.


    This method, in contrast to <xref uid="com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.remove(java.lang.Object,int)" data-throw-if-not-resolved="false">#remove(Object, int)</xref>, has no effect when the element count is smaller than `occurrences`.
  syntax:
    content: public boolean removeExactly(Object element, int occurrences)
    parameters:
    - id: element
      type: java.lang.Object
      description: the element to remove
    - id: occurrences
      type: int
      description: the number of occurrences of <code>element</code> to remove
    return:
      type: boolean
      description: <code>true</code> if the removal was possible (including if <code>occurrences</code> is zero)
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount(E,int)
  id: setCount(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: setCount(E element, int count)
  nameWithType: ConcurrentHashMultiset<E>.setCount(E element, int count)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.setCount(E element, int count)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds or removes occurrences of `element` such that the <xref uid="com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.count" data-throw-if-not-resolved="false">#count</xref> of the element becomes `count`.
  syntax:
    content: public int setCount(E element, int count)
    parameters:
    - id: element
      type: E
    - id: count
      type: int
    return:
      type: int
      description: the count of <code>element</code> in the multiset before this call
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount(E,int,int)
  id: setCount(E,int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: setCount(E element, int expectedOldCount, int newCount)
  nameWithType: ConcurrentHashMultiset<E>.setCount(E element, int expectedOldCount, int newCount)
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.setCount(E element, int expectedOldCount, int newCount)
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Sets the number of occurrences of `element` to `newCount`, but only if the count is currently `expectedOldCount`. If `element` does not appear in the multiset exactly `expectedOldCount` times, no changes will be made.
  syntax:
    content: public boolean setCount(E element, int expectedOldCount, int newCount)
    parameters:
    - id: element
      type: E
    - id: expectedOldCount
      type: int
    - id: newCount
      type: int
    return:
      type: boolean
      description: >-
        <code>true</code> if the change was successful. This usually indicates that the multiset has
             been modified, but not always: in the case that <code>expectedOldCount == newCount</code>, the
             method will return <code>true</code> if the condition was met.
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: size()
  nameWithType: ConcurrentHashMultiset<E>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: If the data in the multiset is modified by any other threads during this method, it is undefined which (if any) of these modifications will be reflected in the result.
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.toArray()
  id: toArray()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  langs:
  - java
  name: toArray()
  nameWithType: ConcurrentHashMultiset<E>.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.toArray()
  overload: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Object[] toArray()
    return:
      type: java.lang.Object[]
references:
- uid: java.util.concurrent.ConcurrentMap<E,java.util.concurrent.atomic.AtomicInteger>
  spec.java:
  - uid: java.util.concurrent.ConcurrentMap
    name: ConcurrentMap
    fullName: java.util.concurrent.ConcurrentMap
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: java.util.concurrent.atomic.AtomicInteger
    name: AtomicInteger
    fullName: java.util.concurrent.atomic.AtomicInteger
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.ConcurrentHashMultiset*
  name: ConcurrentHashMultiset
  nameWithType: ConcurrentHashMultiset<E>.ConcurrentHashMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.ConcurrentHashMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
    name: ConcurrentHashMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.create*
  name: <E>create
  nameWithType: ConcurrentHashMultiset<E>.<E>create
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.<E>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.count*
  name: count
  nameWithType: ConcurrentHashMultiset<E>.count
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.count
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.size*
  name: size
  nameWithType: ConcurrentHashMultiset<E>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.toArray*
  name: toArray
  nameWithType: ConcurrentHashMultiset<E>.toArray
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.toArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: T[]
  spec.java:
  - uid: T
    name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.add*
  name: add
  nameWithType: ConcurrentHashMultiset<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.remove*
  name: remove
  nameWithType: ConcurrentHashMultiset<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.removeExactly*
  name: removeExactly
  nameWithType: ConcurrentHashMultiset<E>.removeExactly
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.removeExactly
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.setCount*
  name: setCount
  nameWithType: ConcurrentHashMultiset<E>.setCount
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.setCount
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Set<com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
    name: Entry
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.createEntrySet*
  name: createEntrySet
  nameWithType: ConcurrentHashMultiset<E>.createEntrySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.createEntrySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.isEmpty*
  name: isEmpty
  nameWithType: ConcurrentHashMultiset<E>.isEmpty
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.isEmpty
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.iterator*
  name: iterator
  nameWithType: ConcurrentHashMultiset<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset.clear*
  name: clear
  nameWithType: ConcurrentHashMultiset<E>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.ConcurrentHashMultiset<E>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset<E>
  name: AbstractMultiset<E>
  nameWithType: AbstractMultiset<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset<E>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
  name: AbstractMultiset.contains(Object)
  nameWithType: AbstractMultiset.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.contains(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
  name: AbstractMultiset.retainAll(Collection<?>)
  nameWithType: AbstractMultiset.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
  name: AbstractMultiset.setCount(E,int,int)
  nameWithType: AbstractMultiset.setCount(E,int,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.clear()
  name: AbstractMultiset.clear()
  nameWithType: AbstractMultiset.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.clear()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.util.AbstractCollection.iterator()
  name: AbstractCollection.iterator()
  nameWithType: AbstractCollection.iterator()
  fullName: java.util.AbstractCollection.iterator()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
  name: AbstractMultiset.removeAll(Collection<?>)
  nameWithType: AbstractMultiset.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object,int)
  name: AbstractMultiset.remove(Object,int)
  nameWithType: AbstractMultiset.remove(Object,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
  name: AbstractMultiset.toString()
  nameWithType: AbstractMultiset.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
  name: AbstractMultiset.isEmpty()
  nameWithType: AbstractMultiset.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.entrySet()
  name: AbstractMultiset.entrySet()
  nameWithType: AbstractMultiset.entrySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.entrySet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
  name: AbstractMultiset.hashCode()
  nameWithType: AbstractMultiset.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.hashCode()
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E,int)
  name: AbstractMultiset.add(E,int)
  nameWithType: AbstractMultiset.add(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
  name: AbstractMultiset.remove(Object)
  nameWithType: AbstractMultiset.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
  name: AbstractMultiset.addAll(Collection<? extends E>)
  nameWithType: AbstractMultiset.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
  name: AbstractMultiset.add(E)
  nameWithType: AbstractMultiset.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.elementSet()
  name: AbstractMultiset.elementSet()
  nameWithType: AbstractMultiset.elementSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.elementSet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int)
  name: AbstractMultiset.setCount(E,int)
  nameWithType: AbstractMultiset.setCount(E,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.setCount(E,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
  name: AbstractMultiset.equals(Object)
  nameWithType: AbstractMultiset.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.equals(java.lang.Object)
- uid: E,java.util.concurrent.atomic.AtomicInteger
  name: E,AtomicInteger
  nameWithType: E,AtomicInteger
  fullName: E,java.util.concurrent.atomic.AtomicInteger
- uid: java.util.concurrent.ConcurrentMap
  name: ConcurrentMap
  nameWithType: ConcurrentMap
  fullName: java.util.concurrent.ConcurrentMap
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  name: Multiset.Entry
  nameWithType: Multiset.Entry
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset
  name: AbstractMultiset
  nameWithType: AbstractMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection
  name: AbstractMultiset.retainAll(Collection
  nameWithType: AbstractMultiset.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.retainAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection
  name: AbstractMultiset.removeAll(Collection
  nameWithType: AbstractMultiset.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.removeAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection
  name: AbstractMultiset.addAll(Collection
  nameWithType: AbstractMultiset.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultiset.addAll(java.util.Collection
