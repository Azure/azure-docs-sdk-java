### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ObjectMapper.convertValue*"
fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue"
name: "<T>convertValue"
nameWithType: "ObjectMapper.<T>convertValue"
members:
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,com.fasterxml.jackson.core.type.TypeReference<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)"
  name: "<T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)"
  nameWithType: "ObjectMapper.<T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)"
  summary: "See <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;convertValue(java.lang.Object,java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#convertValue(Object, Class)\"></xref>"
  parameters:
  - name: "fromValue"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - name: "toValueTypeRef"
    type: "<xref href=\"com.fasterxml.jackson.core.type.TypeReference?alt=com.fasterxml.jackson.core.type.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>convertValue(Object fromValue, TypeReference<T> toValueTypeRef)"
  exceptions:
  - type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,com.fasterxml.jackson.databind.JavaType)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(Object fromValue, JavaType toValueType)"
  name: "<T>convertValue(Object fromValue, JavaType toValueType)"
  nameWithType: "ObjectMapper.<T>convertValue(Object fromValue, JavaType toValueType)"
  summary: "See <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper.&lt;T&gt;convertValue(java.lang.Object,java.lang.Class&lt;T&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#convertValue(Object, Class)\"></xref>"
  parameters:
  - name: "fromValue"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - name: "toValueType"
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public T <T>convertValue(Object fromValue, JavaType toValueType)"
  exceptions:
  - type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(java.lang.Object,java.lang.Class<T>)"
  fullName: "com.fasterxml.jackson.databind.ObjectMapper.<T>convertValue(Object fromValue, Class<T> toValueType)"
  name: "<T>convertValue(Object fromValue, Class<T> toValueType)"
  nameWithType: "ObjectMapper.<T>convertValue(Object fromValue, Class<T> toValueType)"
  summary: "Convenience method for doing two-step conversion from given value, into instance of given value type, by writing value into temporary buffer and reading from the buffer into specified target type.\n\nThis method is functionally similar to first serializing given value into JSON, and then binding JSON data into value of given type, but should be more efficient since full serialization does not (need to) occur. However, same converters (serializers, deserializers) will be used as for data binding, meaning same object mapper configuration works.\n\nNote that behavior changed slightly between Jackson 2.9 and 2.10 so that whereas earlier some optimizations were used to avoid write/read cycle in case input was of target type, from 2.10 onwards full processing is always performed. See [databind\\#2220][databind_2220] for full details of the change.\n\nFurther note that it is possible that in some cases behavior does differ from full serialize-then-deserialize cycle: in most case differences are unintentional (that is, flaws to fix) and should be reported, but the behavior is not guaranteed to be 100% the same: the goal is to allow efficient value conversions for structurally compatible Objects, according to standard Jackson configuration.\n\nFinally, this functionality is not designed to support \"advanced\" use cases, such as conversion of polymorphic values, or cases where Object Identity is used.\n\n\n[databind_2220]: https://github.com/FasterXML/jackson-databind/issues/2220"
  parameters:
  - name: "fromValue"
    type: "<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />"
  - name: "toValueType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public T <T>convertValue(Object fromValue, Class<T> toValueType)"
  exceptions:
  - description: "If conversion fails due to incompatible type;\n    if so, root cause will contain underlying checked exception data binding\n    functionality threw"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  returns:
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
