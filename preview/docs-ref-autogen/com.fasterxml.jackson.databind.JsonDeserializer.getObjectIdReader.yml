### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader*"
fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.getObjectIdReader"
name: "getObjectIdReader"
nameWithType: "JsonDeserializer<T>.getObjectIdReader"
members:
- uid: "com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()"
  fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>.getObjectIdReader()"
  name: "getObjectIdReader()"
  nameWithType: "JsonDeserializer<T>.getObjectIdReader()"
  summary: "Accessor that can be used to check whether this deserializer is expecting to possibly get an Object Identifier value instead of full value serialization, and if so, should be able to resolve it to actual Object instance to return as deserialized value.\n\nDefault implementation returns null, as support cannot be implemented generically. Some standard deserializers (most notably <xref uid=\"com.fasterxml.jackson.databind.deser.BeanDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.BeanDeserializer\"></xref>) do implement this feature, and may return reader instance, depending on exact configuration of instance (which is based on type, and referring property)."
  syntax: "public ObjectIdReader getObjectIdReader()"
  returns:
    description: "ObjectIdReader used for resolving possible Object Identifier\n    value, instead of full value serialization, if deserializer can do that;\n    null if no Object Id is expected."
    type: "<xref href=\"com.fasterxml.jackson.databind.deser.impl.ObjectIdReader?alt=com.fasterxml.jackson.databind.deser.impl.ObjectIdReader&text=ObjectIdReader\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
