### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.SearchClient
  id: SearchClient
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents
  children:
  - com.azure.search.documents.SearchClient.<T>getDocument(java.lang.String,java.lang.Class<T>)
  - com.azure.search.documents.SearchClient.<T>getDocumentWithResponse(java.lang.String,java.lang.Class<T>,java.util.List<java.lang.String>,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.autocomplete(java.lang.String,java.lang.String)
  - com.azure.search.documents.SearchClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.deleteDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchClient.deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.getDocumentCount()
  - com.azure.search.documents.SearchClient.getDocumentCountWithResponse(com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.getEndpoint()
  - com.azure.search.documents.SearchClient.getIndexName()
  - com.azure.search.documents.SearchClient.indexDocuments(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>)
  - com.azure.search.documents.SearchClient.indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.mergeDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.mergeOrUploadDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.search(java.lang.String)
  - com.azure.search.documents.SearchClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.suggest(java.lang.String,java.lang.String)
  - com.azure.search.documents.SearchClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.core.util.Context)
  - com.azure.search.documents.SearchClient.uploadDocuments(java.lang.Iterable<?>)
  - com.azure.search.documents.SearchClient.uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  langs:
  - java
  name: SearchClient
  nameWithType: SearchClient
  fullName: com.azure.search.documents.SearchClient
  type: Class
  package: com.azure.search.documents
  summary: This class provides a client that contains the operations for querying an index and uploading, merging, or deleting documents in an Azure Cognitive Search service.
  syntax:
    content: public final class SearchClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.SearchClient.<T>getDocument(java.lang.String,java.lang.Class<T>)
  id: <T>getDocument(java.lang.String,java.lang.Class<T>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: <T>getDocument(String key, Class<T> modelClass)
  nameWithType: SearchClient.<T>getDocument(String key, Class<T> modelClass)
  fullName: com.azure.search.documents.SearchClient.<T>getDocument(String key, Class<T> modelClass)
  overload: com.azure.search.documents.SearchClient.getDocument*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Retrieves a document from the Azure Cognitive Search index.


    View [naming rules][] for guidelines on constructing valid document keys.


    **Code Sample**


    Get dynamic SearchDocument.


    ```java

    SearchDocument result = searchClient.getDocument("hotelId", SearchDocument.class);
     for (Map.Entry<String, Object> keyValuePair : result.entrySet()) {
         System.out.printf("Document key %s, Document value %s", keyValuePair.getKey(), keyValuePair.getValue());
     }
    ```



    [naming rules]: https://docs.microsoft.com/rest/api/searchservice/Naming-rules
  syntax:
    content: public T <T>getDocument(String key, Class<T> modelClass)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the document to retrieve.
    - id: modelClass
      type: java.lang.Class<T>
      description: The model class converts to.
    return:
      type: T
      description: document object
- uid: com.azure.search.documents.SearchClient.<T>getDocumentWithResponse(java.lang.String,java.lang.Class<T>,java.util.List<java.lang.String>,com.azure.core.util.Context)
  id: <T>getDocumentWithResponse(java.lang.String,java.lang.Class<T>,java.util.List<java.lang.String>,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: <T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields, Context context)
  nameWithType: SearchClient.<T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields, Context context)
  fullName: com.azure.search.documents.SearchClient.<T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields, Context context)
  overload: com.azure.search.documents.SearchClient.getDocumentWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Retrieves a document from the Azure Cognitive Search index.


    View [naming rules][] for guidelines on constructing valid document keys.


    **Code Sample**


    Get dynamic SearchDocument.


    ```java

    Response<SearchDocument> resultResponse = searchClient.getDocumentWithResponse("hotelId",
         SearchDocument.class, null, new Context(key1, value1));
     System.out.println("The status code of the response is " + resultResponse.getStatusCode());
     for (Map.Entry<String, Object> keyValuePair : resultResponse.getValue().entrySet()) {
         System.out.printf("Document key %s, Document value %s", keyValuePair.getKey(), keyValuePair.getValue());
     }
    ```



    [naming rules]: https://docs.microsoft.com/rest/api/searchservice/Naming-rules
  syntax:
    content: public Response<T> <T>getDocumentWithResponse(String key, Class<T> modelClass, List<String> selectedFields, Context context)
    parameters:
    - id: key
      type: java.lang.String
      description: The key of the document to retrieve.
    - id: modelClass
      type: java.lang.Class<T>
      description: The model class converts to.
    - id: selectedFields
      type: java.util.List<java.lang.String>
      description: >-
        List of field names to retrieve for the document; Any field not retrieved will have null or
         default as its corresponding property value in the returned object.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<T>
      description: response containing a document object
- uid: com.azure.search.documents.SearchClient.SearchClient(com.azure.search.documents.SearchAsyncClient)
  id: SearchClient(com.azure.search.documents.SearchAsyncClient)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: SearchClient(SearchAsyncClient searchAsyncClient)
  nameWithType: SearchClient.SearchClient(SearchAsyncClient searchAsyncClient)
  fullName: com.azure.search.documents.SearchClient.SearchClient(SearchAsyncClient searchAsyncClient)
  overload: com.azure.search.documents.SearchClient.SearchClient*
  type: Constructor
  package: com.azure.search.documents
  summary: Package private constructor to be used by <xref uid="com.azure.search.documents.SearchClientBuilder" data-throw-if-not-resolved="false">SearchClientBuilder</xref>
  syntax:
    content: " SearchClient(SearchAsyncClient searchAsyncClient)"
    parameters:
    - id: searchAsyncClient
      type: com.azure.search.documents.SearchAsyncClient
      description: Async SearchIndex Client
- uid: com.azure.search.documents.SearchClient.autocomplete(java.lang.String,java.lang.String)
  id: autocomplete(java.lang.String,java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: autocomplete(String searchText, String suggesterName)
  nameWithType: SearchClient.autocomplete(String searchText, String suggesterName)
  fullName: com.azure.search.documents.SearchClient.autocomplete(String searchText, String suggesterName)
  overload: com.azure.search.documents.SearchClient.autocomplete*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Autocompletes incomplete query terms based on input text and matching terms in the index.


    **Code Sample**


    Autocomplete text from documents in service.


    ```java

    AutocompletePagedIterable autocompletePagedIterable = searchClient.autocomplete("searchText", "sg");
     for (AutocompleteItem result: autocompletePagedIterable) {
         System.out.printf("The complete term is %s", result.getText());
     }
    ```
  syntax:
    content: public AutocompletePagedIterable autocomplete(String searchText, String suggesterName)
    parameters:
    - id: searchText
      type: java.lang.String
      description: search text
    - id: suggesterName
      type: java.lang.String
      description: suggester name
    return:
      type: com.azure.search.documents.util.AutocompletePagedIterable
      description: auto complete result.
- uid: com.azure.search.documents.SearchClient.autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.core.util.Context)
  id: autocomplete(java.lang.String,java.lang.String,com.azure.search.documents.models.AutocompleteOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, Context context)
  nameWithType: SearchClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, Context context)
  fullName: com.azure.search.documents.SearchClient.autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, Context context)
  overload: com.azure.search.documents.SearchClient.autocomplete*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Autocompletes incomplete query terms based on input text and matching terms in the index.


    **Code Sample**


    Autocomplete text from documents in service with option.


    ```java

    AutocompletePagedIterable autocompletePagedIterable = searchClient.autocomplete("searchText", "sg",
         new AutocompleteOptions().setAutocompleteMode(AutocompleteMode.ONE_TERM_WITH_CONTEXT),
         new Context(key1, value1));
     for (AutocompleteItem result: autocompletePagedIterable) {
         System.out.printf("The complete term is %s", result.getText());
     }
    ```
  syntax:
    content: public AutocompletePagedIterable autocomplete(String searchText, String suggesterName, AutocompleteOptions autocompleteOptions, Context context)
    parameters:
    - id: searchText
      type: java.lang.String
      description: search text
    - id: suggesterName
      type: java.lang.String
      description: suggester name
    - id: autocompleteOptions
      type: com.azure.search.documents.models.AutocompleteOptions
      description: autocomplete options
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the HTTP pipeline during the service call
    return:
      type: com.azure.search.documents.util.AutocompletePagedIterable
      description: auto complete result.
- uid: com.azure.search.documents.SearchClient.deleteDocuments(java.lang.Iterable<?>)
  id: deleteDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: deleteDocuments(Iterable<?> documents)
  nameWithType: SearchClient.deleteDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchClient.deleteDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchClient.deleteDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Deletes a collection of documents from the target index.


    **Code Sample**


    Delete dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     IndexDocumentsResult result = searchClient.deleteDocuments(Collections.singletonList(searchDocument));
     for (IndexingResult indexingResult : result.getResults()) {
         System.out.printf("Does document with key %s delete successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public IndexDocumentsResult deleteDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to delete from the target Index. Fields other than the key are ignored.
    return:
      type: com.azure.search.documents.models.IndexDocumentsResult
      description: document index result.
- uid: com.azure.search.documents.SearchClient.deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  id: deleteDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  nameWithType: SearchClient.deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  fullName: com.azure.search.documents.SearchClient.deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  overload: com.azure.search.documents.SearchClient.deleteDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Deletes a collection of documents from the target index.


    **Code Sample**


    Delete dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     Response<IndexDocumentsResult> resultResponse = searchClient.deleteDocumentsWithResponse(
         Collections.singletonList(searchDocument), null, new Context(key1, value1));
     System.out.println("The status code of the response is " + resultResponse.getStatusCode());
     for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
         System.out.printf("Does document with key %s delete successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public Response<IndexDocumentsResult> deleteDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to delete from the target Index. Fields other than the key are ignored.
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>
      description: response containing a document index result.
- uid: com.azure.search.documents.SearchClient.getDocumentCount()
  id: getDocumentCount()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: getDocumentCount()
  nameWithType: SearchClient.getDocumentCount()
  fullName: com.azure.search.documents.SearchClient.getDocumentCount()
  overload: com.azure.search.documents.SearchClient.getDocumentCount*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Queries the number of documents in the search index.


    **Code Sample**


    Get document count.


    ```java

    long count = searchClient.getDocumentCount();
     System.out.printf("There are %d documents in service.", count);
    ```
  syntax:
    content: public long getDocumentCount()
    return:
      type: long
      description: the number of documents.
- uid: com.azure.search.documents.SearchClient.getDocumentCountWithResponse(com.azure.core.util.Context)
  id: getDocumentCountWithResponse(com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: getDocumentCountWithResponse(Context context)
  nameWithType: SearchClient.getDocumentCountWithResponse(Context context)
  fullName: com.azure.search.documents.SearchClient.getDocumentCountWithResponse(Context context)
  overload: com.azure.search.documents.SearchClient.getDocumentCountWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Queries the number of documents in the search index.


    **Code Sample**


    Get document count.


    ```java

    Response<Long> countResponse = searchClient.getDocumentCountWithResponse(new Context(key1, value1));
     System.out.println("The status code of the response is " + countResponse.getStatusCode());
     System.out.printf("There are %d documents in service.", countResponse.getValue());
    ```
  syntax:
    content: public Response<Long> getDocumentCountWithResponse(Context context)
    parameters:
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<java.lang.Long>
      description: response containing the number of documents.
- uid: com.azure.search.documents.SearchClient.getEndpoint()
  id: getEndpoint()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: getEndpoint()
  nameWithType: SearchClient.getEndpoint()
  fullName: com.azure.search.documents.SearchClient.getEndpoint()
  overload: com.azure.search.documents.SearchClient.getEndpoint*
  type: Method
  package: com.azure.search.documents
  summary: Gets the endpoint for the Azure Cognitive Search service.
  syntax:
    content: public String getEndpoint()
    return:
      type: java.lang.String
      description: the endpoint value.
- uid: com.azure.search.documents.SearchClient.getIndexName()
  id: getIndexName()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: getIndexName()
  nameWithType: SearchClient.getIndexName()
  fullName: com.azure.search.documents.SearchClient.getIndexName()
  overload: com.azure.search.documents.SearchClient.getIndexName*
  type: Method
  package: com.azure.search.documents
  summary: Gets the name of the Azure Cognitive Search index.
  syntax:
    content: public String getIndexName()
    return:
      type: java.lang.String
      description: the indexName value.
- uid: com.azure.search.documents.SearchClient.indexDocuments(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>)
  id: indexDocuments(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: indexDocuments(IndexDocumentsBatch<?> batch)
  nameWithType: SearchClient.indexDocuments(IndexDocumentsBatch<?> batch)
  fullName: com.azure.search.documents.SearchClient.indexDocuments(IndexDocumentsBatch<?> batch)
  overload: com.azure.search.documents.SearchClient.indexDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Sends a batch of upload, merge, and/or delete actions to the search index.


    **Code Sample**


    Index batch operation on dynamic SearchDocument.


    ```java

    SearchDocument searchDocument1 = new SearchDocument();
     searchDocument1.put("hotelId", "1");
     searchDocument1.put("hotelName", "test1");
     SearchDocument searchDocument2 = new SearchDocument();
     searchDocument2.put("hotelId", "2");
     searchDocument2.put("hotelName", "test2");
     IndexDocumentsBatch<SearchDocument> indexDocumentsBatch = new IndexDocumentsBatch<>();
     indexDocumentsBatch.addUploadActions(Collections.singletonList(searchDocument1));
     indexDocumentsBatch.addDeleteActions(Collections.singletonList(searchDocument2));
     IndexDocumentsResult result = searchClient.indexDocuments(indexDocumentsBatch);
     for (IndexingResult indexingResult : result.getResults()) {
         System.out.printf("Does document with key %s finish successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public IndexDocumentsResult indexDocuments(IndexDocumentsBatch<?> batch)
    parameters:
    - id: batch
      type: com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>
      description: The batch of index actions
    return:
      type: com.azure.search.documents.models.IndexDocumentsResult
      description: Response containing the status of operations for all actions in the batch
- uid: com.azure.search.documents.SearchClient.indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  id: indexDocumentsWithResponse(com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)
  nameWithType: SearchClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)
  fullName: com.azure.search.documents.SearchClient.indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)
  overload: com.azure.search.documents.SearchClient.indexDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Sends a batch of upload, merge, and/or delete actions to the search index.


    **Code Sample**


    Index batch operation on dynamic SearchDocument.


    ```java

    SearchDocument searchDocument1 = new SearchDocument();
     searchDocument1.put("hotelId", "1");
     searchDocument1.put("hotelName", "test1");
     SearchDocument searchDocument2 = new SearchDocument();
     searchDocument2.put("hotelId", "2");
     searchDocument2.put("hotelName", "test2");
     IndexDocumentsBatch<SearchDocument> indexDocumentsBatch = new IndexDocumentsBatch<>();
     indexDocumentsBatch.addUploadActions(Collections.singletonList(searchDocument1));
     indexDocumentsBatch.addDeleteActions(Collections.singletonList(searchDocument2));
     Response<IndexDocumentsResult> resultResponse = searchClient.indexDocumentsWithResponse(indexDocumentsBatch,
         null, new Context(key1, value1));
     System.out.println("The status code of the response is " + resultResponse.getStatusCode());
     for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
         System.out.printf("Does document with key %s finish successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public Response<IndexDocumentsResult> indexDocumentsWithResponse(IndexDocumentsBatch<?> batch, IndexDocumentsOptions options, Context context)
    parameters:
    - id: batch
      type: com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>
      description: The batch of index actions
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>
      description: Response containing the status of operations for all actions in the batch
- uid: com.azure.search.documents.SearchClient.mergeDocuments(java.lang.Iterable<?>)
  id: mergeDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: mergeDocuments(Iterable<?> documents)
  nameWithType: SearchClient.mergeDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchClient.mergeDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchClient.mergeDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Merges a collection of documents with existing documents in the target index.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelName", "merge");
     IndexDocumentsResult result = searchClient.mergeDocuments(Collections.singletonList(searchDocument));
     for (IndexingResult indexingResult : result.getResults()) {
         System.out.printf("Does document with key %s merge successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public IndexDocumentsResult mergeDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged
    return:
      type: com.azure.search.documents.models.IndexDocumentsResult
      description: document index result
- uid: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  id: mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  nameWithType: SearchClient.mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  fullName: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  overload: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Merges a collection of documents with existing documents in the target index.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelName", "test");
     Response<IndexDocumentsResult> resultResponse = searchClient.mergeDocumentsWithResponse(
         Collections.singletonList(searchDocument), null, new Context(key1, value1));
     System.out.println("The status code of the response is " + resultResponse.getStatusCode());
     for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
         System.out.printf("Does document with key %s merge successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public Response<IndexDocumentsResult> mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged.
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>
      description: response containing the document index result.
- uid: com.azure.search.documents.SearchClient.mergeOrUploadDocuments(java.lang.Iterable<?>)
  id: mergeOrUploadDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: mergeOrUploadDocuments(Iterable<?> documents)
  nameWithType: SearchClient.mergeOrUploadDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchClient.mergeOrUploadDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchClient.mergeOrUploadDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge or upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     IndexDocumentsResult result = searchClient.mergeOrUploadDocuments(Collections.singletonList(searchDocument));
     for (IndexingResult indexingResult : result.getResults()) {
         System.out.printf("Does document with key %s mergeOrUpload successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public IndexDocumentsResult mergeOrUploadDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged, if exists, otherwise uploaded
    return:
      type: com.azure.search.documents.models.IndexDocumentsResult
      description: document index result
- uid: com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  id: mergeOrUploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  nameWithType: SearchClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  fullName: com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  overload: com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    This action behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.


    If the type of the document contains non-nullable primitive-typed properties, these properties may not merge correctly. If you do not set such a property, it will automatically take its default value (for example, `0` for `int` or `false` for `boolean`), which will override the value of the property currently stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you always declare primitive-typed properties with their class equivalents (for example, an integer property should be of type `Integer` instead of `int`).


    **Code Sample**


    Merge or upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     Response<IndexDocumentsResult> resultResponse = searchClient.mergeOrUploadDocumentsWithResponse(
         Collections.singletonList(searchDocument), null, new Context(key1, value1));
     System.out.println("The status code of the response is " + resultResponse.getStatusCode());
     for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
         System.out.printf("Does document with key %s mergeOrUpload successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public Response<IndexDocumentsResult> mergeOrUploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to be merged, if exists, otherwise uploaded
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>
      description: response containing a document index result
- uid: com.azure.search.documents.SearchClient.search(java.lang.String)
  id: search(java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: search(String searchText)
  nameWithType: SearchClient.search(String searchText)
  fullName: com.azure.search.documents.SearchClient.search(String searchText)
  overload: com.azure.search.documents.SearchClient.search*
  type: Method
  package: com.azure.search.documents
  summary: "Searches for documents in the Azure Cognitive Search index.\n\nIf `searchText` is set to `null` or `\"*\"` all documents will be matched, see [simple query syntax in Azure Cognitive Search][] for more information about search query syntax.\n\n**Code Sample**\n\nSearch text from documents in service.\n\n```java\nSearchPagedIterable searchPagedIterable = searchClient.search(\"searchText\");\n System.out.printf(\"There are around %d results.\", searchPagedIterable.getTotalCount());\n \n for (SearchPagedResponse resultResponse: searchPagedIterable.iterableByPage()) {\n     System.out.println(\"The status code of the response is \" + resultResponse.getStatusCode());\n     resultResponse.getValue().forEach(searchResult -> {\n         for (Map.Entry<String, Object> keyValuePair: searchResult\n             .getDocument(SearchDocument.class).entrySet()) {\n             System.out.printf(\"Document key %s, document value %s\", keyValuePair.getKey(),\n                 keyValuePair.getValue());\n         }\n     });\n }\n```\n\n\n[simple query syntax in Azure Cognitive Search]: https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search"
  syntax:
    content: public SearchPagedIterable search(String searchText)
    parameters:
    - id: searchText
      type: java.lang.String
      description: A full-text search query expression.
    return:
      type: com.azure.search.documents.util.SearchPagedIterable
      description: >-
        A <xref uid="com.azure.search.documents.util.SearchPagedIterable" data-throw-if-not-resolved="false">SearchPagedIterable</xref> that iterates over <xref uid="com.azure.search.documents.models.SearchResult" data-throw-if-not-resolved="false">SearchResult</xref> objects and provides access to the
         <xref uid="com.azure.search.documents.util.SearchPagedResponse" data-throw-if-not-resolved="false">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage
         information.
- uid: com.azure.search.documents.SearchClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.core.util.Context)
  id: search(java.lang.String,com.azure.search.documents.models.SearchOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: search(String searchText, SearchOptions searchOptions, Context context)
  nameWithType: SearchClient.search(String searchText, SearchOptions searchOptions, Context context)
  fullName: com.azure.search.documents.SearchClient.search(String searchText, SearchOptions searchOptions, Context context)
  overload: com.azure.search.documents.SearchClient.search*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Searches for documents in the Azure Cognitive Search index.


    If `searchText` is set to `null` or `"*"` all documents will be matched, see [simple query syntax in Azure Cognitive Search][] for more information about search query syntax.


    **Code Sample**


    Search text from documents in service with option.


    ```java

    SearchPagedIterable searchPagedIterable = searchClient.search("searchText",
         new SearchOptions().setOrderBy("hotelId desc"), new Context(key1, value1));
     System.out.printf("There are around %d results.", searchPagedIterable.getTotalCount());
     for (SearchPagedResponse resultResponse: searchPagedIterable.iterableByPage()) {
         System.out.println("The status code of the response is " + resultResponse.getStatusCode());
         resultResponse.getValue().forEach(searchResult -> {
             for (Map.Entry<String, Object> keyValuePair: searchResult
                 .getDocument(SearchDocument.class).entrySet()) {
                 System.out.printf("Document key %s, document value %s", keyValuePair.getKey(),
                     keyValuePair.getValue());
             }
         });
     }
    ```



    [simple query syntax in Azure Cognitive Search]: https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search
  syntax:
    content: public SearchPagedIterable search(String searchText, SearchOptions searchOptions, Context context)
    parameters:
    - id: searchText
      type: java.lang.String
      description: A full-text search query expression.
    - id: searchOptions
      type: com.azure.search.documents.models.SearchOptions
      description: Parameters to further refine the search query
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.search.documents.util.SearchPagedIterable
      description: >-
        A <xref uid="com.azure.search.documents.util.SearchPagedIterable" data-throw-if-not-resolved="false">SearchPagedIterable</xref> that iterates over <xref uid="com.azure.search.documents.models.SearchResult" data-throw-if-not-resolved="false">SearchResult</xref> objects and provides access to the
         <xref uid="com.azure.search.documents.util.SearchPagedResponse" data-throw-if-not-resolved="false">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage
         information.
- uid: com.azure.search.documents.SearchClient.suggest(java.lang.String,java.lang.String)
  id: suggest(java.lang.String,java.lang.String)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: suggest(String searchText, String suggesterName)
  nameWithType: SearchClient.suggest(String searchText, String suggesterName)
  fullName: com.azure.search.documents.SearchClient.suggest(String searchText, String suggesterName)
  overload: com.azure.search.documents.SearchClient.suggest*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Suggests documents in the index that match the given partial query.


    **Code Sample**


    Suggest text from documents in service.


    ```java

    SuggestPagedIterable suggestPagedIterable = searchClient.suggest("searchText", "sg");
     for (SuggestResult result: suggestPagedIterable) {
         SearchDocument searchDocument = result.getDocument(SearchDocument.class);
         for (Map.Entry<String, Object> keyValuePair: searchDocument.entrySet()) {
             System.out.printf("Document key %s, document value %s", keyValuePair.getKey(), keyValuePair.getValue());
         }
     }
    ```
  syntax:
    content: public SuggestPagedIterable suggest(String searchText, String suggesterName)
    parameters:
    - id: searchText
      type: java.lang.String
      description: The search text on which to base suggestions
    - id: suggesterName
      type: java.lang.String
      description: >-
        The name of the suggester as specified in the suggesters collection that's part of the index
         definition
    return:
      type: com.azure.search.documents.util.SuggestPagedIterable
      description: >-
        A <xref uid="com.azure.search.documents.util.SuggestPagedIterable" data-throw-if-not-resolved="false">SuggestPagedIterable</xref> that iterates over <xref uid="com.azure.search.documents.models.SuggestResult" data-throw-if-not-resolved="false">SuggestResult</xref> objects and provides access to
         the <xref uid="com.azure.search.documents.util.SuggestPagedResponse" data-throw-if-not-resolved="false">SuggestPagedResponse</xref> object for each page containing HTTP response and coverage information.
- uid: com.azure.search.documents.SearchClient.suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.core.util.Context)
  id: suggest(java.lang.String,java.lang.String,com.azure.search.documents.models.SuggestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, Context context)
  nameWithType: SearchClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, Context context)
  fullName: com.azure.search.documents.SearchClient.suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, Context context)
  overload: com.azure.search.documents.SearchClient.suggest*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Suggests documents in the index that match the given partial query.


    **Code Sample**


    Suggest text from documents in service with option.


    ```java

    SuggestPagedIterable suggestPagedIterable = searchClient.suggest("searchText", "sg",
         new SuggestOptions().setOrderBy("hotelId desc"), new Context(key1, value1));
     for (SuggestResult result: suggestPagedIterable) {
         SearchDocument searchDocument = result.getDocument(SearchDocument.class);
         for (Map.Entry<String, Object> keyValuePair: searchDocument.entrySet()) {
             System.out.printf("Document key %s, document value %s", keyValuePair.getKey(), keyValuePair.getValue());
         }
     }
    ```
  syntax:
    content: public SuggestPagedIterable suggest(String searchText, String suggesterName, SuggestOptions suggestOptions, Context context)
    parameters:
    - id: searchText
      type: java.lang.String
      description: The search text on which to base suggestions
    - id: suggesterName
      type: java.lang.String
      description: >-
        The name of the suggester as specified in the suggesters collection that's part of the index
         definition
    - id: suggestOptions
      type: com.azure.search.documents.models.SuggestOptions
      description: Parameters to further refine the suggestion query.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.search.documents.util.SuggestPagedIterable
      description: >-
        A <xref uid="com.azure.search.documents.util.SuggestPagedIterable" data-throw-if-not-resolved="false">SuggestPagedIterable</xref> that iterates over <xref uid="com.azure.search.documents.models.SuggestResult" data-throw-if-not-resolved="false">SuggestResult</xref> objects and provides access to
         the <xref uid="com.azure.search.documents.util.SuggestPagedResponse" data-throw-if-not-resolved="false">SuggestPagedResponse</xref> object for each page containing HTTP response and coverage information.
- uid: com.azure.search.documents.SearchClient.uploadDocuments(java.lang.Iterable<?>)
  id: uploadDocuments(java.lang.Iterable<?>)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: uploadDocuments(Iterable<?> documents)
  nameWithType: SearchClient.uploadDocuments(Iterable<?> documents)
  fullName: com.azure.search.documents.SearchClient.uploadDocuments(Iterable<?> documents)
  overload: com.azure.search.documents.SearchClient.uploadDocuments*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Uploads a collection of documents to the target index.


    **Code Sample**


    Upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     IndexDocumentsResult result = searchClient.uploadDocuments(Collections.singletonList(searchDocument));
     for (IndexingResult indexingResult : result.getResults()) {
         System.out.printf("Does document with key %s upload successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public IndexDocumentsResult uploadDocuments(Iterable<?> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to upload to the target Index.
    return:
      type: com.azure.search.documents.models.IndexDocumentsResult
      description: document index result.
- uid: com.azure.search.documents.SearchClient.uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  id: uploadDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.SearchClient
  langs:
  - java
  name: uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  nameWithType: SearchClient.uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  fullName: com.azure.search.documents.SearchClient.uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  overload: com.azure.search.documents.SearchClient.uploadDocumentsWithResponse*
  type: Method
  package: com.azure.search.documents
  summary: >-
    Uploads a collection of documents to the target index.


    **Code Sample**


    Upload dynamic SearchDocument.


    ```java

    SearchDocument searchDocument = new SearchDocument();
     searchDocument.put("hotelId", "1");
     searchDocument.put("hotelName", "test");
     Response<IndexDocumentsResult> resultResponse = searchClient.uploadDocumentsWithResponse(
         Collections.singletonList(searchDocument), null, new Context(key1, value1));
     System.out.println("The status code of the response is " + resultResponse.getStatusCode());
     for (IndexingResult indexingResult : resultResponse.getValue().getResults()) {
         System.out.printf("Does document with key %s upload successfully? %b%n", indexingResult.getKey(),
             indexingResult.isSucceeded());
     }
    ```
  syntax:
    content: public Response<IndexDocumentsResult> uploadDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<?>
      description: collection of documents to upload to the target Index.
    - id: options
      type: com.azure.search.documents.models.IndexDocumentsOptions
      description: Options that allow specifying document indexing behavior.
    - id: context
      type: com.azure.core.util.Context
      description: additional context that is passed through the Http pipeline during the service call
    return:
      type: com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>
      description: response containing the document index result.
references:
- uid: com.azure.search.documents.SearchAsyncClient
  name: SearchAsyncClient
  nameWithType: SearchAsyncClient
  fullName: com.azure.search.documents.SearchAsyncClient
- uid: com.azure.search.documents.SearchClient.SearchClient*
  name: SearchClient
  nameWithType: SearchClient.SearchClient
  fullName: com.azure.search.documents.SearchClient.SearchClient
  package: com.azure.search.documents
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.SearchClient.getIndexName*
  name: getIndexName
  nameWithType: SearchClient.getIndexName
  fullName: com.azure.search.documents.SearchClient.getIndexName
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.getEndpoint*
  name: getEndpoint
  nameWithType: SearchClient.getEndpoint
  fullName: com.azure.search.documents.SearchClient.getEndpoint
  package: com.azure.search.documents
- uid: java.lang.Iterable<?>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.models.IndexDocumentsResult
  name: IndexDocumentsResult
  nameWithType: IndexDocumentsResult
  fullName: com.azure.search.documents.models.IndexDocumentsResult
- uid: com.azure.search.documents.SearchClient.uploadDocuments*
  name: uploadDocuments
  nameWithType: SearchClient.uploadDocuments
  fullName: com.azure.search.documents.SearchClient.uploadDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.IndexDocumentsOptions
  name: IndexDocumentsOptions
  nameWithType: IndexDocumentsOptions
  fullName: com.azure.search.documents.models.IndexDocumentsOptions
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.core.http.rest.Response<com.azure.search.documents.models.IndexDocumentsResult>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.search.documents.models.IndexDocumentsResult
    name: IndexDocumentsResult
    fullName: com.azure.search.documents.models.IndexDocumentsResult
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchClient.uploadDocumentsWithResponse*
  name: uploadDocumentsWithResponse
  nameWithType: SearchClient.uploadDocumentsWithResponse
  fullName: com.azure.search.documents.SearchClient.uploadDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.mergeDocuments*
  name: mergeDocuments
  nameWithType: SearchClient.mergeDocuments
  fullName: com.azure.search.documents.SearchClient.mergeDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse*
  name: mergeDocumentsWithResponse
  nameWithType: SearchClient.mergeDocumentsWithResponse
  fullName: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.mergeOrUploadDocuments*
  name: mergeOrUploadDocuments
  nameWithType: SearchClient.mergeOrUploadDocuments
  fullName: com.azure.search.documents.SearchClient.mergeOrUploadDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse*
  name: mergeOrUploadDocumentsWithResponse
  nameWithType: SearchClient.mergeOrUploadDocumentsWithResponse
  fullName: com.azure.search.documents.SearchClient.mergeOrUploadDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.deleteDocuments*
  name: deleteDocuments
  nameWithType: SearchClient.deleteDocuments
  fullName: com.azure.search.documents.SearchClient.deleteDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.deleteDocumentsWithResponse*
  name: deleteDocumentsWithResponse
  nameWithType: SearchClient.deleteDocumentsWithResponse
  fullName: com.azure.search.documents.SearchClient.deleteDocumentsWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.indexes.models.IndexDocumentsBatch<?>
  spec.java:
  - uid: com.azure.search.documents.indexes.models.IndexDocumentsBatch
    name: IndexDocumentsBatch
    fullName: com.azure.search.documents.indexes.models.IndexDocumentsBatch
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchClient.indexDocuments*
  name: indexDocuments
  nameWithType: SearchClient.indexDocuments
  fullName: com.azure.search.documents.SearchClient.indexDocuments
  package: com.azure.search.documents
- uid: com.azure.search.documents.SearchClient.indexDocumentsWithResponse*
  name: indexDocumentsWithResponse
  nameWithType: SearchClient.indexDocumentsWithResponse
  fullName: com.azure.search.documents.SearchClient.indexDocumentsWithResponse
  package: com.azure.search.documents
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.azure.search.documents.SearchClient.getDocument*
  name: <T>getDocument
  nameWithType: SearchClient.<T>getDocument
  fullName: com.azure.search.documents.SearchClient.<T>getDocument
  package: com.azure.search.documents
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.core.http.rest.Response<T>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchClient.getDocumentWithResponse*
  name: <T>getDocumentWithResponse
  nameWithType: SearchClient.<T>getDocumentWithResponse
  fullName: com.azure.search.documents.SearchClient.<T>getDocumentWithResponse
  package: com.azure.search.documents
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.search.documents.SearchClient.getDocumentCount*
  name: getDocumentCount
  nameWithType: SearchClient.getDocumentCount
  fullName: com.azure.search.documents.SearchClient.getDocumentCount
  package: com.azure.search.documents
- uid: com.azure.core.http.rest.Response<java.lang.Long>
  spec.java:
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.SearchClient.getDocumentCountWithResponse*
  name: getDocumentCountWithResponse
  nameWithType: SearchClient.getDocumentCountWithResponse
  fullName: com.azure.search.documents.SearchClient.getDocumentCountWithResponse
  package: com.azure.search.documents
- uid: com.azure.search.documents.util.SearchPagedIterable
  name: SearchPagedIterable
  nameWithType: SearchPagedIterable
  fullName: com.azure.search.documents.util.SearchPagedIterable
- uid: com.azure.search.documents.SearchClient.search*
  name: search
  nameWithType: SearchClient.search
  fullName: com.azure.search.documents.SearchClient.search
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.SearchOptions
  name: SearchOptions
  nameWithType: SearchOptions
  fullName: com.azure.search.documents.models.SearchOptions
- uid: com.azure.search.documents.util.SuggestPagedIterable
  name: SuggestPagedIterable
  nameWithType: SuggestPagedIterable
  fullName: com.azure.search.documents.util.SuggestPagedIterable
- uid: com.azure.search.documents.SearchClient.suggest*
  name: suggest
  nameWithType: SearchClient.suggest
  fullName: com.azure.search.documents.SearchClient.suggest
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.SuggestOptions
  name: SuggestOptions
  nameWithType: SuggestOptions
  fullName: com.azure.search.documents.models.SuggestOptions
- uid: com.azure.search.documents.util.AutocompletePagedIterable
  name: AutocompletePagedIterable
  nameWithType: AutocompletePagedIterable
  fullName: com.azure.search.documents.util.AutocompletePagedIterable
- uid: com.azure.search.documents.SearchClient.autocomplete*
  name: autocomplete
  nameWithType: SearchClient.autocomplete
  fullName: com.azure.search.documents.SearchClient.autocomplete
  package: com.azure.search.documents
- uid: com.azure.search.documents.models.AutocompleteOptions
  name: AutocompleteOptions
  nameWithType: AutocompleteOptions
  fullName: com.azure.search.documents.models.AutocompleteOptions
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: com.azure.search.documents.indexes.models.IndexDocumentsBatch
  name: IndexDocumentsBatch
  nameWithType: IndexDocumentsBatch
  fullName: com.azure.search.documents.indexes.models.IndexDocumentsBatch
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
