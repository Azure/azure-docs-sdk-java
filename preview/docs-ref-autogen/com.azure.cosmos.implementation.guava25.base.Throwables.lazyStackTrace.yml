### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace*"
fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace"
name: "lazyStackTrace"
nameWithType: "Throwables.lazyStackTrace"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace(java.lang.Throwable)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTrace(Throwable throwable)"
  name: "lazyStackTrace(Throwable throwable)"
  nameWithType: "Throwables.lazyStackTrace(Throwable throwable)"
  summary: "Returns the stack trace of `throwable`, possibly providing slower iteration over the full trace but faster iteration over parts of the trace. Here, \"slower\" and \"faster\" are defined in comparison to the normal way to access the stack trace, <xref uid=\"java.lang.Throwable.getStackTrace()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"throwable.getStackTrace()\"></xref>. Note, however, that this method's special implementation is not available for all platforms and configurations. If that implementation is unavailable, this method falls back to `getStackTrace`. Callers that require the special implementation can check its availability with <xref uid=\"com.azure.cosmos.implementation.guava25.base.Throwables.lazyStackTraceIsLazy()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#lazyStackTraceIsLazy()\"></xref>.\n\nThe expected (but not guaranteed) performance of the special implementation differs from `getStackTrace` in one main way: The `lazyStackTrace` call itself returns quickly by delaying the per-stack-frame work until each element is accessed. Roughly speaking:\n\n *  `getStackTrace` takes `stackSize` time to return but then negligible time to retrieve each element of the returned list.\n *  `lazyStackTrace` takes negligible time to return but then `1/stackSize` time to retrieve each element of the returned list (probably slightly more than `1/stackSize`).\n\nNote: The special implementation does not respect calls to <xref uid=\"java.lang.Throwable.setStackTrace\" data-throw-if-not-resolved=\"false\" data-raw-source=\"throwable.setStackTrace\"></xref>. Instead, it always reflects the original stack trace from the exception's creation."
  parameters:
  - name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static List<StackTraceElement> lazyStackTrace(Throwable throwable)"
  returns:
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.StackTraceElement?alt=java.lang.StackTraceElement&text=StackTraceElement\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
