### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  id: ImmutableMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values()
  langs:
  - java
  name: ImmutableMultimap<K,V>
  nameWithType: ImmutableMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    **Warning:** avoid *direct* usage of <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap" data-throw-if-not-resolved="false">ImmutableMultimap</xref> as a type (as with <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> itself). Prefer subtypes such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap" data-throw-if-not-resolved="false">ImmutableSetMultimap</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap" data-throw-if-not-resolved="false">ImmutableListMultimap</xref>, which have well-defined <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.equals" data-throw-if-not-resolved="false">#equals</xref> semantics, thus avoiding a common source of bugs and confusion.


    **Note:** every <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap" data-throw-if-not-resolved="false">ImmutableMultimap</xref> offers an <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse" data-throw-if-not-resolved="false">#inverse</xref> view, so there is no need for a distinct `ImmutableBiMultimap` type.


    **Key-grouped iteration.** All view collections follow the same iteration order. In all current implementations, the iteration order always keeps multiple entries with the same key together. Any creation method that would customarily respect insertion order (such as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.&lt;K,V&gt;copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap&lt;? extends K,? extends V&gt;)" data-throw-if-not-resolved="false">#copyOf(Multimap)</xref>) instead preserves key-grouped order by inserting entries for an existing key immediately after the last entry having that key.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableMultimap<K,V> extends AbstractMultimap<K,V> implements Serializable
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  - com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>builder()
  id: <K,V>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>builder()
  nameWithType: ImmutableMultimap<K,V>.<K,V>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableMultimap.Builder<K,V> <K,V>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: <K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>copyOf(Multimap<? extends K,? extends V> multimap)
  nameWithType: ImmutableMultimap<K,V>.<K,V>copyOf(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>copyOf(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable multimap containing the same mappings as `multimap`, in the "key-grouped" iteration order described in the class documentation.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>copyOf(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  id: <K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  nameWithType: ImmutableMultimap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the specified entries. The returned multimap iterates over keys in the order they were first encountered in the input, and the values for each key are iterated in the order they were encountered.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>copyOf(Iterable<? extends Map.Entry<? extends K,? extends V>> entries)
    parameters:
    - id: entries
      type: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of()
  id: <K,V>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>of()
  nameWithType: ImmutableMultimap<K,V>.<K,V>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an empty multimap.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V)
  id: <K,V>of(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1)
  nameWithType: ImmutableMultimap<K,V>.<K,V>of(K k1, V v1)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of(K k1, V v1)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing a single entry.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>of(K k1, V v1)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V)
  id: <K,V>of(K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2)
  nameWithType: ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in order.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  nameWithType: ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the class documentation.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  nameWithType: ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the class documentation.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)
  id: <K,V>of(K,V,K,V,K,V,K,V,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  nameWithType: ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap containing the given entries, in the "key-grouped" insertion order described in the class documentation.
  syntax:
    content: public static ImmutableMultimap<K,V> <K,V>of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5)
    parameters:
    - id: k1
      type: K
    - id: v1
      type: V
    - id: k2
      type: K
    - id: v2
      type: V
    - id: k3
      type: K
    - id: v3
      type: V
    - id: k4
      type: K
    - id: v4
      type: V
    - id: k5
      type: K
    - id: v5
      type: V
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.ImmutableMultimap(com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>>,int)
  id: ImmutableMultimap(com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: ImmutableMultimap(ImmutableMap<K,? extends ImmutableCollection<V>> map, int size)
  nameWithType: ImmutableMultimap<K,V>.ImmutableMultimap(ImmutableMap<K,? extends ImmutableCollection<V>> map, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.ImmutableMultimap(ImmutableMap<K,? extends ImmutableCollection<V>> map, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.ImmutableMultimap*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableMultimap(ImmutableMap<K,? extends ImmutableCollection<V>> map, int size)"
    parameters:
    - id: map
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>>
    - id: size
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap()
  id: asMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: asMap()
  nameWithType: ImmutableMultimap<K,V>.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.asMap()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable map that associates each key with its corresponding values in the multimap. Keys and values appear in the same order as in this multimap.
  syntax:
    content: public ImmutableMap<K,Collection<V>> asMap()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,java.util.Collection<V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: clear()
  nameWithType: ImmutableMultimap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: ImmutableMultimap<K,V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: ImmutableMultimap<K,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if this multimap contains at least one key-value pair with the value `value`.
  syntax:
    content: public boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries()
  id: entries()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: entries()
  nameWithType: ImmutableMultimap<K,V>.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.entries()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable collection of all key-value pairs in the multimap.
  syntax:
    content: public ImmutableCollection<Map.Entry<K,V>> entries()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<java.util.Map.Entry<K,V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  id: forEach(java.util.function.BiConsumer<? super K,? super V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: forEach(BiConsumer<? super K,? super V> action)
  nameWithType: ImmutableMultimap<K,V>.forEach(BiConsumer<? super K,? super V> action)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.forEach(BiConsumer<? super K,? super V> action)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void forEach(BiConsumer<? super K,? super V> action)
    parameters:
    - id: action
      type: java.util.function.BiConsumer<? super K,? super V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: ImmutableMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable collection of the values for the given key. If no mappings in the multimap have the provided key, an empty immutable collection is returned. The values are in the same order as the parameters used to build this multimap.
  syntax:
    content: public abstract ImmutableCollection<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse()
  id: inverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: inverse()
  nameWithType: ImmutableMultimap<K,V>.inverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.inverse()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multimap which is the inverse of this one. For every key-value mapping in the original, the result will have a mapping with key and value reversed.
  syntax:
    content: public abstract ImmutableMultimap<V,K> inverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<V,K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: keySet()
  nameWithType: ImmutableMultimap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable set of the distinct keys in this multimap, in the same order as they appear in this multimap.
  syntax:
    content: public ImmutableSet<K> keySet()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys()
  id: keys()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: keys()
  nameWithType: ImmutableMultimap<K,V>.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.keys()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset containing all the keys in this multimap, in the same order and with the same frequencies as they appear in this multimap; to get only a single occurrence of each key, use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet" data-throw-if-not-resolved="false">#keySet</xref>.
  syntax:
    content: public ImmutableMultiset<K> keys()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<K>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: ImmutableMultimap<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public boolean put(K key, V value)
    parameters:
    - id: key
      type: K
    - id: value
      type: V
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable<? extends V>)
  id: putAll(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: putAll(K key, Iterable<? extends V> values)
  nameWithType: ImmutableMultimap<K,V>.putAll(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.putAll(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public boolean putAll(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  id: putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: putAll(Multimap<? extends K,? extends V> multimap)
  nameWithType: ImmutableMultimap<K,V>.putAll(Multimap<? extends K,? extends V> multimap)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.putAll(Multimap<? extends K,? extends V> multimap)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public boolean putAll(Multimap<? extends K,? extends V> multimap)
    parameters:
    - id: multimap
      type: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove(java.lang.Object,java.lang.Object)
  id: remove(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: remove(Object key, Object value)
  nameWithType: ImmutableMultimap<K,V>.remove(Object key, Object value)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.remove(Object key, Object value)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public boolean remove(Object key, Object value)
    parameters:
    - id: key
      type: java.lang.Object
    - id: value
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: ImmutableMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public ImmutableCollection<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: ImmutableMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the multimap unmodified.
  syntax:
    content: public ImmutableCollection<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: size()
  nameWithType: ImmutableMultimap<K,V>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  langs:
  - java
  name: values()
  nameWithType: ImmutableMultimap<K,V>.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.values()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable collection of the values in this multimap. Its iterator traverses the values for the first key, the values for the second key, and so on.
  syntax:
    content: public ImmutableCollection<V> values()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: '? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection'
    name: ImmutableCollection
    fullName: '? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection'
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.ImmutableMultimap*
  name: ImmutableMultimap
  nameWithType: ImmutableMultimap<K,V>.ImmutableMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.ImmutableMultimap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
    name: ImmutableMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.of*
  name: <K,V>of
  nameWithType: ImmutableMultimap<K,V>.<K,V>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.builder*
  name: <K,V>builder
  nameWithType: ImmutableMultimap<K,V>.<K,V>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multimap
    name: Multimap
    fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.copyOf*
  name: <K,V>copyOf
  nameWithType: ImmutableMultimap<K,V>.<K,V>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.<K,V>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends java.util.Map.Entry'
    name: Entry
    fullName: '? extends java.util.Map.Entry'
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<V>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
    name: ImmutableCollection
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll*
  name: removeAll
  nameWithType: ImmutableMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues*
  name: replaceValues
  nameWithType: ImmutableMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear*
  name: clear
  nameWithType: ImmutableMultimap<K,V>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get*
  name: get
  nameWithType: ImmutableMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<V,K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
    name: ImmutableMultimap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: ','
    fullName: ','
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse*
  name: inverse
  nameWithType: ImmutableMultimap<K,V>.inverse
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.inverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put*
  name: put
  nameWithType: ImmutableMultimap<K,V>.put
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.put
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll*
  name: putAll
  nameWithType: ImmutableMultimap<K,V>.putAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.putAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove*
  name: remove
  nameWithType: ImmutableMultimap<K,V>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey*
  name: containsKey
  nameWithType: ImmutableMultimap<K,V>.containsKey
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.containsKey
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue*
  name: containsValue
  nameWithType: ImmutableMultimap<K,V>.containsValue
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.containsValue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size*
  name: size
  nameWithType: ImmutableMultimap<K,V>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
    name: ImmutableSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet*
  name: keySet
  nameWithType: ImmutableMultimap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.keySet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap<K,java.util.Collection<V>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
    name: ImmutableMap
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap*
  name: asMap
  nameWithType: ImmutableMultimap<K,V>.asMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.asMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
    name: ImmutableCollection
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries*
  name: entries
  nameWithType: ImmutableMultimap<K,V>.entries
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.entries
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.BiConsumer<? super K,? super V>
  spec.java:
  - uid: java.util.function.BiConsumer
    name: BiConsumer
    fullName: java.util.function.BiConsumer
  - name: <
    fullName: <
  - uid: '? super K'
    name: '? super K'
    fullName: '? super K'
  - name: ','
    fullName: ','
  - uid: '? super V'
    name: '? super V'
    fullName: '? super V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach*
  name: forEach
  nameWithType: ImmutableMultimap<K,V>.forEach
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.forEach
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<K>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
    name: ImmutableMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys*
  name: keys
  nameWithType: ImmutableMultimap<K,V>.keys
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.keys
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values*
  name: values
  nameWithType: ImmutableMultimap<K,V>.values
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>.values
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap<K,V>
  name: AbstractMultimap<K,V>
  nameWithType: AbstractMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap<K,V>
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
  name: AbstractMultimap.keys()
  nameWithType: AbstractMultimap.keys()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
  name: AbstractMultimap.isEmpty()
  nameWithType: AbstractMultimap.isEmpty()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()
  name: AbstractMultimap.entries()
  nameWithType: AbstractMultimap.entries()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()
  name: AbstractMultimap.asMap()
  nameWithType: AbstractMultimap.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
  name: AbstractMultimap.hashCode()
  nameWithType: AbstractMultimap.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
  name: AbstractMultimap.containsValue(Object)
  nameWithType: AbstractMultimap.containsValue(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
  name: AbstractMultimap.toString()
  nameWithType: AbstractMultimap.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
  name: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  nameWithType: AbstractMultimap.putAll(Multimap<? extends K,? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.containsEntry(Object,Object)
  nameWithType: AbstractMultimap.containsEntry(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
  name: AbstractMultimap.equals(Object)
  nameWithType: AbstractMultimap.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
  name: AbstractMultimap.putAll(K,Iterable<? extends V>)
  nameWithType: AbstractMultimap.putAll(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  name: AbstractMultimap.replaceValues(K,Iterable<? extends V>)
  nameWithType: AbstractMultimap.replaceValues(K,Iterable<? extends V>)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
  name: AbstractMultimap.remove(Object,Object)
  nameWithType: AbstractMultimap.remove(Object,Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)
  name: AbstractMultimap.put(K,V)
  nameWithType: AbstractMultimap.put(K,V)
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
  name: AbstractMultimap.keySet()
  nameWithType: AbstractMultimap.keySet()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()
  name: AbstractMultimap.values()
  nameWithType: AbstractMultimap.values()
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder
  name: ImmutableMultimap.Builder<K,V>
  nameWithType: ImmutableMultimap.Builder<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.Builder<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
  name: ImmutableMap
  nameWithType: ImmutableMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMap
- uid: K,? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: K,? extends ImmutableCollection
  nameWithType: K,? extends ImmutableCollection
  fullName: K,? extends com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends java.util.Map.Entry'
  name: '? extends Map.Entry'
  nameWithType: '? extends Map.Entry'
  fullName: '? extends java.util.Map.Entry'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: ImmutableCollection
  nameWithType: ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: V,K
  name: V,K
  nameWithType: V,K
  fullName: V,K
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  name: ImmutableSet
  nameWithType: ImmutableSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: '? super K,? super V'
  name: '? super K,? super V'
  nameWithType: '? super K,? super V'
  fullName: '? super K,? super V'
- uid: java.util.function.BiConsumer
  name: BiConsumer
  nameWithType: BiConsumer
  fullName: java.util.function.BiConsumer
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  name: ImmutableMultiset
  nameWithType: ImmutableMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
  name: AbstractMultimap
  nameWithType: AbstractMultimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
  name: AbstractMultimap.putAll(Multimap
  nameWithType: AbstractMultimap.putAll(Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: '? extends V>)'
  name: '? extends V>)'
  nameWithType: '? extends V>)'
  fullName: '? extends V>)'
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
  name: AbstractMultimap.putAll(K,Iterable
  nameWithType: AbstractMultimap.putAll(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable
- uid: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable
  name: AbstractMultimap.replaceValues(K,Iterable
  nameWithType: AbstractMultimap.replaceValues(K,Iterable
  fullName: com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable
