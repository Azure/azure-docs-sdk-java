### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap<K,V>"
name: "ImmutableMultimap<K,V>"
nameWithType: "ImmutableMultimap<K,V>"
summary: "A <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimap\"></xref> whose contents will never change, with many other important properties detailed at <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableCollection\"></xref>.\n\n**Warning:** avoid *direct* usage of <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableMultimap\"></xref> as a type (as with <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimap\"></xref> itself). Prefer subtypes such as <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSetMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableSetMultimap\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableListMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableListMultimap\"></xref>, which have well-defined <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#equals\"></xref> semantics, thus avoiding a common source of bugs and confusion.\n\n**Note:** every <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableMultimap\"></xref> offers an <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#inverse\"></xref> view, so there is no need for a distinct `ImmutableBiMultimap` type.\n\n**Key-grouped iteration.** All view collections follow the same iteration order. In all current implementations, the iteration order always keeps multiple entries with the same key together. Any creation method that would customarily respect insertion order (such as <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.&lt;K,V&gt;copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap&lt;? extends K,? extends V&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#copyOf(Multimap)\"></xref>) instead preserves key-grouped order by inserting entries for an existing key immediately after the last entry having that key.\n\nSee the Guava User Guide article on [ immutable collections][immutable collections].\n\n\n[immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.AbstractMultimap\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.asMap()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsEntry(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.keys()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.toString()"
- "com.azure.cosmos.implementation.guava25.collect.AbstractMultimap.values()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ImmutableMultimap<K,V> extends AbstractMultimap<K,V> implements Serializable"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>copyOf(java.lang.Iterable<? extends java.util.Map.Entry<? extends K,? extends V>>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.<K,V>of(K,V,K,V,K,V,K,V,K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.asMap()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.entries()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.get(K)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.inverse()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.keys()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.putAll(com.azure.cosmos.implementation.guava25.collect.Multimap<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.remove(java.lang.Object,java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.removeAll(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.replaceValues(K,java.lang.Iterable<? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.size()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableMultimap.values()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
