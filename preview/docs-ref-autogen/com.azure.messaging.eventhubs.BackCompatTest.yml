### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.BackCompatTest
  id: BackCompatTest
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.BackCompatTest.afterTest()
  - com.azure.messaging.eventhubs.BackCompatTest.BackCompatTest()
  - com.azure.messaging.eventhubs.BackCompatTest.backCompatWithJavaSDKOlderThan0110()
  - com.azure.messaging.eventhubs.BackCompatTest.beforeTest()
  - com.azure.messaging.eventhubs.BackCompatTest.testName
  - com.azure.messaging.eventhubs.BackCompatTest.testName()
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: BackCompatTest
  nameWithType: BackCompatTest
  fullName: com.azure.messaging.eventhubs.BackCompatTest
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 34
  package: com.azure.messaging.eventhubs
  summary: "<p>Integration test that verifies backwards compatibility with a previous version of the SDK. </p>"
  syntax:
    content: public class BackCompatTest extends ApiTestBase
  inheritance:
  - java.lang.Object
  - com.azure.core.test.TestBase
  - com.azure.messaging.eventhubs.implementation.ApiTestBase
  inheritedMembers:
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger)
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable...)
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  - com.azure.core.test.TestBase.interceptorManager
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType)
  - com.azure.core.test.TestBase.setupClass()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  - com.azure.core.test.TestBase.testResourceNamer
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
- uid: com.azure.messaging.eventhubs.BackCompatTest.afterTest()
  id: afterTest()
  parent: com.azure.messaging.eventhubs.BackCompatTest
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: afterTest()
  nameWithType: BackCompatTest.afterTest()
  fullName: com.azure.messaging.eventhubs.BackCompatTest.afterTest()
  overload: com.azure.messaging.eventhubs.BackCompatTest.afterTest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 67
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected void afterTest()
- uid: com.azure.messaging.eventhubs.BackCompatTest.BackCompatTest()
  id: BackCompatTest()
  parent: com.azure.messaging.eventhubs.BackCompatTest
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: BackCompatTest()
  nameWithType: BackCompatTest.BackCompatTest()
  fullName: com.azure.messaging.eventhubs.BackCompatTest.BackCompatTest()
  overload: com.azure.messaging.eventhubs.BackCompatTest.BackCompatTest*
  type: Constructor
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 42
  package: com.azure.messaging.eventhubs
  syntax:
    content: public BackCompatTest()
- uid: com.azure.messaging.eventhubs.BackCompatTest.backCompatWithJavaSDKOlderThan0110()
  id: backCompatWithJavaSDKOlderThan0110()
  parent: com.azure.messaging.eventhubs.BackCompatTest
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: backCompatWithJavaSDKOlderThan0110()
  nameWithType: BackCompatTest.backCompatWithJavaSDKOlderThan0110()
  fullName: com.azure.messaging.eventhubs.BackCompatTest.backCompatWithJavaSDKOlderThan0110()
  overload: com.azure.messaging.eventhubs.BackCompatTest.backCompatWithJavaSDKOlderThan0110*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 75
  package: com.azure.messaging.eventhubs
  summary: "<p>Verifies test work with SDK versions before 0.11.0. </p>"
  syntax:
    content: public void backCompatWithJavaSDKOlderThan0110()
- uid: com.azure.messaging.eventhubs.BackCompatTest.beforeTest()
  id: beforeTest()
  parent: com.azure.messaging.eventhubs.BackCompatTest
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: beforeTest()
  nameWithType: BackCompatTest.beforeTest()
  fullName: com.azure.messaging.eventhubs.BackCompatTest.beforeTest()
  overload: com.azure.messaging.eventhubs.BackCompatTest.beforeTest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 55
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected void beforeTest()
- uid: com.azure.messaging.eventhubs.BackCompatTest.testName
  id: testName
  parent: com.azure.messaging.eventhubs.BackCompatTest
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: testName
  nameWithType: BackCompatTest.testName
  fullName: com.azure.messaging.eventhubs.BackCompatTest.testName
  type: Field
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 47
  package: com.azure.messaging.eventhubs
  syntax:
    content: public TestName testName= new TestName()
    return:
      type: 1e0ad879
- uid: com.azure.messaging.eventhubs.BackCompatTest.testName()
  id: testName()
  parent: com.azure.messaging.eventhubs.BackCompatTest
  href: com.azure.messaging.eventhubs.BackCompatTest.yml
  langs:
  - java
  name: testName()
  nameWithType: BackCompatTest.testName()
  fullName: com.azure.messaging.eventhubs.BackCompatTest.testName()
  overload: com.azure.messaging.eventhubs.BackCompatTest.testName*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/BackCompatTest.java
    startLine: 50
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected String testName()
    return:
      type: "26831127"
references:
- uid: 1e0ad879
  spec.java:
  - name: TestName
    fullName: TestName
- uid: com.azure.messaging.eventhubs.BackCompatTest.BackCompatTest*
  name: BackCompatTest
  nameWithType: BackCompatTest.BackCompatTest
  fullName: com.azure.messaging.eventhubs.BackCompatTest.BackCompatTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.BackCompatTest.backCompatWithJavaSDKOlderThan0110*
  name: backCompatWithJavaSDKOlderThan0110
  nameWithType: BackCompatTest.backCompatWithJavaSDKOlderThan0110
  fullName: com.azure.messaging.eventhubs.BackCompatTest.backCompatWithJavaSDKOlderThan0110
  package: com.azure.messaging.eventhubs
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.azure.messaging.eventhubs.BackCompatTest.testName*
  name: testName
  nameWithType: BackCompatTest.testName
  fullName: com.azure.messaging.eventhubs.BackCompatTest.testName
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.BackCompatTest.beforeTest*
  name: beforeTest
  nameWithType: BackCompatTest.beforeTest
  fullName: com.azure.messaging.eventhubs.BackCompatTest.beforeTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.BackCompatTest.afterTest*
  name: afterTest
  nameWithType: BackCompatTest.afterTest
  fullName: com.azure.messaging.eventhubs.BackCompatTest.afterTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: ApiTestBase(ClientLogger logger)
  nameWithType: ApiTestBase.ApiTestBase(ClientLogger logger)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger logger)
  type: Constructor
  syntax:
    content: protected ApiTestBase(ClientLogger logger)
    parameters:
    - id: logger
      type: com.azure.core.util.logging.ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable...)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: dispose(Closeable... closeables)
  nameWithType: ApiTestBase.dispose(Closeable... closeables)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable... closeables)
  type: Method
  summary: "<p>Disposes of any <xref uid=\"\" data-throw-if-not-resolved=\"false\">Closeable</xref> resources.</p>\r\n<p></p>"
  syntax:
    content: protected void dispose(Closeable... closeables)
    parameters:
    - id: closeables
      type: 05580a22
      description: >-
        <p>The closeables to dispose of. If a closeable is<code>nullÂ 

            </code> , it is skipped. </p>
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getAuthorizationType()
  nameWithType: ApiTestBase.getAuthorizationType()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  type: Method
  syntax:
    content: protected CBSAuthorizationType getAuthorizationType()
    return:
      type: com.azure.messaging.eventhubs.implementation.CBSAuthorizationType
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionOptions()
  nameWithType: ApiTestBase.getConnectionOptions()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  type: Method
  syntax:
    content: protected ConnectionOptions getConnectionOptions()
    return:
      type: com.azure.messaging.eventhubs.implementation.ConnectionOptions
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionString()
  nameWithType: ApiTestBase.getConnectionString()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  type: Method
  syntax:
    content: protected String getConnectionString()
    return:
      type: "26831127"
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionStringProperties()
  nameWithType: ApiTestBase.getConnectionStringProperties()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  type: Method
  syntax:
    content: protected ConnectionStringProperties getConnectionStringProperties()
    return:
      type: com.azure.messaging.eventhubs.implementation.ConnectionStringProperties
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getReactor()
  nameWithType: ApiTestBase.getReactor()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  type: Method
  syntax:
    content: protected Reactor getReactor()
    return:
      type: 5f183614
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getReactorProvider()
  nameWithType: ApiTestBase.getReactorProvider()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  type: Method
  syntax:
    content: protected ReactorProvider getReactorProvider()
    return:
      type: com.azure.messaging.eventhubs.implementation.ReactorProvider
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getTestMode()
  nameWithType: ApiTestBase.getTestMode()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  type: Method
  summary: "<p>Gets the test mode for this API test. If AZURE_TEST_MODE equals <xref uid=\"com.azure.core.test.TestMode.RECORD\" data-throw-if-not-resolved=\"false\">TestMode#RECORD</xref> and Event Hubs connection string is set, then we return <xref uid=\"com.azure.core.test.TestMode.RECORD\" data-throw-if-not-resolved=\"false\">TestMode#RECORD</xref>. Otherwise, <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\">TestMode#PLAYBACK</xref> is returned. </p>"
  syntax:
    content: public TestMode getTestMode()
    return:
      type: com.azure.core.test.TestMode
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getTokenCredential()
  nameWithType: ApiTestBase.getTokenCredential()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  type: Method
  syntax:
    content: protected TokenCredential getTokenCredential()
    return:
      type: com.azure.core.credentials.TokenCredential
- uid: com.azure.core.test.TestBase.interceptorManager
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: interceptorManager
  nameWithType: TestBase.interceptorManager
  fullName: com.azure.core.test.TestBase.interceptorManager
  type: Field
  syntax:
    content: protected InterceptorManager interceptorManager
    return:
      type: com.azure.core.test.InterceptorManager
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: logger
  nameWithType: ApiTestBase.logger
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  type: Field
  syntax:
    content: protected final ClientLogger logger
    return:
      type: 93de0ef9com.azure.core.util.logging.ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: setTransportType(TransportType transportType)
  nameWithType: ApiTestBase.setTransportType(TransportType transportType)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType transportType)
  type: Method
  syntax:
    content: protected void setTransportType(TransportType transportType)
    parameters:
    - id: transportType
      type: com.azure.core.amqp.TransportType
- uid: com.azure.core.test.TestBase.setupClass()
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: setupClass()
  nameWithType: TestBase.setupClass()
  fullName: com.azure.core.test.TestBase.setupClass()
  type: Method
  summary: "<p>Before tests are executed, determines the test mode by reading the <xref uid=\"\" data-throw-if-not-resolved=\"false\">TestBase#AZURE_TEST_MODE</xref> environment variable. If it is not set, <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\">TestMode#PLAYBACK</xref></p>"
  syntax:
    content: public static void setupClass()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: setupTest()
  nameWithType: ApiTestBase.setupTest()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  type: Method
  syntax:
    content: public void setupTest()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: skipIfNotRecordMode()
  nameWithType: ApiTestBase.skipIfNotRecordMode()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  type: Method
  syntax:
    content: protected void skipIfNotRecordMode()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: teardownTest()
  nameWithType: ApiTestBase.teardownTest()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  type: Method
  syntax:
    content: public void teardownTest()
- uid: com.azure.core.test.TestBase.testResourceNamer
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: testResourceNamer
  nameWithType: TestBase.testResourceNamer
  fullName: com.azure.core.test.TestBase.testResourceNamer
  type: Field
  syntax:
    content: protected TestResourceNamer testResourceNamer
    return:
      type: com.azure.core.test.utils.TestResourceNamer
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: TIMEOUT
  nameWithType: ApiTestBase.TIMEOUT
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
  type: Field
  syntax:
    content: protected static final Duration TIMEOUT= Duration.ofSeconds(30)
    return:
      type: 89ac7c4d
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: ApiTestBase
  nameWithType: ApiTestBase
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase
  type: Class
  summary: "<p>Test base for running live and offline tests. </p>"
  syntax:
    content: public class ApiTestBase extends TestBase
- uid: com.azure.messaging.eventhubs.EventHubAsyncClient
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubAsyncClient.yml
  name: EventHubAsyncClient
  nameWithType: EventHubAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubAsyncClient
  type: Class
  summary: "<p>The main point of interaction with Azure Event Hubs, the client offers a connection to a specific Event Hub within the Event Hubs namespace and offers operations for sending event data, receiving events, and inspecting the connected Event Hub.</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hubs namespace connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionString::string-string}</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hub instance connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionstring::string}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubAsyncClient
- uid: com.azure.messaging.eventhubs.EventHubProducer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  name: EventHubProducer
  nameWithType: EventHubProducer
  fullName: com.azure.messaging.eventhubs.EventHubProducer
  type: Class
  summary: "<p>A producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific Event Hub, grouped together in batches. Depending on the options specified at creation, the producer may be created to allow event data to be automatically routed to an available partition or specific to a partition.</p>\r\n<p>Allowing automatic routing of partitions is recommended when: <ul><li><p>The sending of events needs to be highly available. </p></li><li><p>The event data should be evenly distributed among all available partitions. </p></li></ul></p>\r\n<p>If no partition is specified, the following rules are used for automatically selecting one: <orderedlist><li><p>Distribute the events equally amongst all available partitions using a round-robin approach. </p></li><li><p>If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition. </p></li></orderedlist></p>\r\n<p>\r\n  <b>Create a producer that routes events to any partition</b>\r\n</p>\r\n<p>To allow automatic routing of messages to available partition, do not specify the <xref uid=\"com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId()\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.instantiate}</p>\r\n<p>\r\n  <b>Create a producer that publishes events to partition \"foo\" with a timeout of 45 seconds.</b>\r\n</p>\r\n<p>Developers can push events to a single partition by specifying the <xref uid=\"com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId(String)\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.instantiatePartitionProducer}</p>\r\n<p>\r\n  <b>Publish events to the same partition, grouped together using <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)\" data-throw-if-not-resolved=\"false\">SendOptions#partitionKey(String)</xref>.</b>\r\n</p>\r\n<p>If developers want to push similar events to end up at the same partition, but do not require them to go to a specific partition, they can use <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)\" data-throw-if-not-resolved=\"false\">SendOptions#partitionKey(String)</xref>.</p>\r\n<p>In the sample below, all the \"sandwiches\" end up in the same partition, but it could end up in partition 0, 1, etc. of the available partitions. All that matters to the end user is that they are grouped together.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.send::publisher-sendOptions}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubProducer
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumer
- uid: com.azure.messaging.eventhubs.EventData
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventData.yml
  name: EventData
  nameWithType: EventData
  fullName: com.azure.messaging.eventhubs.EventData
  type: Class
  summary: "<p>The data structure encapsulating the event being sent-to and received-from Event Hubs. Each Event Hub partition can be visualized as a stream of <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>.</p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. For reference, the specification can be found here: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">AMQP 1.0 specification</a></p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.properties()\" data-throw-if-not-resolved=\"false\">properties()</xref> - AMQPMessage.ApplicationProperties section </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.body()\" data-throw-if-not-resolved=\"false\">body()</xref> - if AMQPMessage.Body has Data section </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p>Serializing a received <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive Java types) and Data section is not supported. </p>\r\n<p></p>"
  syntax:
    content: public class EventData
