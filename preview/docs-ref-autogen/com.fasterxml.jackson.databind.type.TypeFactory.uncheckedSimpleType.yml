### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType"
name: "uncheckedSimpleType"
nameWithType: "TypeFactory.uncheckedSimpleType"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(Class<?> cls)"
  name: "uncheckedSimpleType(Class<?> cls)"
  nameWithType: "TypeFactory.uncheckedSimpleType(Class<?> cls)"
  summary: "Method that use by core Databind functionality, and that should NOT be called by application code outside databind package.\n\nUnchecked here not only means that no checks are made as to whether given class might be non-simple type (like <xref uid=\"com.fasterxml.jackson.databind.type.CollectionType\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CollectionType\"></xref>) but also that most of supertype information is not gathered. This means that unless called on primitive types or <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>, results are probably not what you want to use."
  parameters:
  - name: "cls"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public JavaType uncheckedSimpleType(Class<?> cls)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.JavaType?alt=com.fasterxml.jackson.databind.JavaType&text=JavaType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
