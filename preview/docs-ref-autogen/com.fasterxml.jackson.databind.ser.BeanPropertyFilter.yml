### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  id: BeanPropertyFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.BeanPropertyFilter.serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)
  langs:
  - java
  name: BeanPropertyFilter
  nameWithType: BeanPropertyFilter
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  type: Interface
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Interface that defines API for filter objects use (as configured using <xref uid="com.fasterxml.jackson.annotation.JsonFilter" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonFilter</xref>) for filtering bean properties to serialize.


    Starting with version 2.3 this class is deprecated; use <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref> instead.
  syntax:
    content: public interface BeanPropertyFilter
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)
  id: depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  langs:
  - java
  name: depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)
  nameWithType: BeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method called by <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializer" data-throw-if-not-resolved="false">BeanSerializer</xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property


    Typical implementation is something like:


    ```java

    if (include(writer)) {
          writer.depositSchemaProperty(objectVisitor, provider);
     }
    ```
  syntax:
    content: public abstract void depositSchemaProperty(BeanPropertyWriter writer, jsonFormatVisitors.JsonObjectFormatVisitor objectVisitor, SerializerProvider provider)
    parameters:
    - id: writer
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
      description: Bean property serializer to use to create schema value
    - id: objectVisitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor
      description: "JsonObjectFormatVisitor which should be aware of \n the property's existence"
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that can be used for accessing dynamic aspects of serialization
         	processing
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)
  id: depositSchemaProperty(com.fasterxml.jackson.databind.ser.BeanPropertyWriter,com.fasterxml.jackson.databind.node.ObjectNode,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  langs:
  - java
  name: depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)
  nameWithType: BeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method called by <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializer" data-throw-if-not-resolved="false">BeanSerializer</xref> to let the filter determine whether, and in what form the given property exist within the parent, or root, schema. Filters can omit adding the property to the node, or choose the form of the schema value for the property.


    Typical implementation is something like:


    ```java

    if (include(writer)) {
          writer.depositSchemaProperty(propertiesNode, provider);
     }
    ```
  syntax:
    content: public abstract void depositSchemaProperty(BeanPropertyWriter writer, ObjectNode propertiesNode, SerializerProvider provider)
    parameters:
    - id: writer
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
      description: Bean property writer to use to create schema value
    - id: propertiesNode
      type: com.fasterxml.jackson.databind.node.ObjectNode
      description: Node which the given property would exist within
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that can be used for accessing dynamic aspects of serialization
         	processing
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)
  id: serializeAsField(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.BeanPropertyFilter
  langs:
  - java
  name: serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider prov, BeanPropertyWriter writer)
  nameWithType: BeanPropertyFilter.serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider prov, BeanPropertyWriter writer)
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider prov, BeanPropertyWriter writer)
  overload: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.serializeAsField*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method called by <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializer" data-throw-if-not-resolved="false">BeanSerializer</xref> to let filter decide what to do with given bean property value: the usual choices are to either filter out (i.e. do nothing) or write using given <xref uid="com.fasterxml.jackson.databind.ser.BeanPropertyWriter" data-throw-if-not-resolved="false">BeanPropertyWriter</xref>, although filters can choose other to do something different altogether.


    Typical implementation is something like:


    ```java

    if (include(writer)) {
          writer.serializeAsField(pojo, jgen, prov);
     }
    ```
  syntax:
    content: public abstract void serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider prov, BeanPropertyWriter writer)
    parameters:
    - id: pojo
      type: java.lang.Object
      description: Object that contains property value to serialize
    - id: jgen
      type: com.fasterxml.jackson.core.JsonGenerator
      description: Generator use for serializing value
    - id: prov
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that can be used for accessing dynamic aspects of serialization
            processing
    - id: writer
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
      description: Default bean property serializer to use
  exceptions:
  - type: java.lang.Exception
references:
- uid: java.lang.Exception
  spec.java:
  - uid: java.lang.Exception
    name: Exception
    fullName: java.lang.Exception
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
  name: BeanPropertyWriter
  nameWithType: BeanPropertyWriter
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.serializeAsField*
  name: serializeAsField
  nameWithType: BeanPropertyFilter.serializeAsField
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.serializeAsField
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.node.ObjectNode
  name: ObjectNode
  nameWithType: ObjectNode
  fullName: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty*
  name: depositSchemaProperty
  nameWithType: BeanPropertyFilter.depositSchemaProperty
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyFilter.depositSchemaProperty
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor
  name: jsonFormatVisitors.JsonObjectFormatVisitor
  nameWithType: jsonFormatVisitors.JsonObjectFormatVisitor
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor
