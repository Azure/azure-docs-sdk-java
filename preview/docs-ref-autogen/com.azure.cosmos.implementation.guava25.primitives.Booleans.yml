### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans
  id: Booleans
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives
  children:
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.asList(boolean...)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.compare(boolean,boolean)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.concat(boolean[]...)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.contains(boolean[],boolean)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.countTrue(boolean...)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.ensureCapacity(boolean[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.falseFirst()
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.hashCode(boolean)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf(boolean[],boolean)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf(boolean[],boolean[])
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.join(java.lang.String,boolean...)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.lastIndexOf(boolean[],boolean)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.lexicographicalComparator()
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse(boolean[])
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse(boolean[],int,int)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.toArray(java.util.Collection<java.lang.Boolean>)
  - com.azure.cosmos.implementation.guava25.primitives.Booleans.trueFirst()
  langs:
  - java
  name: Booleans
  nameWithType: Booleans
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans
  type: Class
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Static utility methods pertaining to `boolean` primitives, that are not already found in either <xref uid="java.lang.Boolean" data-throw-if-not-resolved="false">Boolean</xref> or <xref uid="" data-throw-if-not-resolved="false">Arrays</xref>.


    See the Guava User Guide article on [primitive utilities][].



    [primitive utilities]: https://github.com/google/guava/wiki/PrimitivesExplained
  syntax:
    content: public final class Booleans
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.Booleans()
  id: Booleans()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: Booleans()
  nameWithType: Booleans.Booleans()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.Booleans()
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.Booleans*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.primitives
  syntax:
    content: private Booleans()
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.asList(boolean...)
  id: asList(boolean...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: asList(boolean[] backingArray)
  nameWithType: Booleans.asList(boolean[] backingArray)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.asList(boolean[] backingArray)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a fixed-size list backed by the specified array, similar to <xref uid="" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>. The list supports <xref uid="java.util.List.set*" data-throw-if-not-resolved="false">List#set(int, Object)</xref>, but any attempt to set a value to `null` will result in a <xref uid="" data-throw-if-not-resolved="false">NullPointerException</xref>.


    The returned list maintains the values, but not the identities, of `Boolean` objects written to or read from it. For example, whether `list.get(0) == list.get(0)` is true for the returned list is unspecified.
  syntax:
    content: public static List<Boolean> asList(boolean[] backingArray)
    parameters:
    - id: backingArray
      type: boolean[]
      description: the array to back the list
    return:
      type: java.util.List<java.lang.Boolean>
      description: a list view of the array
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.compare(boolean,boolean)
  id: compare(boolean,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: compare(boolean a, boolean b)
  nameWithType: Booleans.compare(boolean a, boolean b)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.compare(boolean a, boolean b)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.compare*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Compares the two specified `boolean` values in the standard way (`false` is considered less than `true`). The sign of the value returned is the same as that of `((Boolean) a).compareTo(b)`.


    **Note for Java 7 and later:** this method should be treated as deprecated; use the equivalent <xref uid="java.lang.Boolean.compare" data-throw-if-not-resolved="false">Boolean#compare</xref> method instead.
  syntax:
    content: public static int compare(boolean a, boolean b)
    parameters:
    - id: a
      type: boolean
      description: the first <code>boolean</code> to compare
    - id: b
      type: boolean
      description: the second <code>boolean</code> to compare
    return:
      type: int
      description: >-
        a positive number if only <code>a</code> is <code>true</code>, a negative number if only <code>
             b</code> is true, or zero if <code>a == b</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.concat(boolean[]...)
  id: concat(boolean[]...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: concat(boolean[][] arrays)
  nameWithType: Booleans.concat(boolean[][] arrays)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.concat(boolean[][] arrays)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.concat*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the values from each provided array combined into a single array. For example, `concat(new boolean[] {a, b}, new boolean[] {}, new boolean[] {c}` returns the array `{a, b, c}`.
  syntax:
    content: public static boolean[] concat(boolean[][] arrays)
    parameters:
    - id: arrays
      type: boolean[][]
      description: zero or more <code>boolean</code> arrays
    return:
      type: boolean[]
      description: a single array containing all the values from the source arrays, in order
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.contains(boolean[],boolean)
  id: contains(boolean[],boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: contains(boolean[] array, boolean target)
  nameWithType: Booleans.contains(boolean[] array, boolean target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.contains(boolean[] array, boolean target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns `true` if `target` is present as an element anywhere in `array`.


    **Note:** consider representing the array as a <xref uid="" data-throw-if-not-resolved="false">java.util.BitSet</xref> instead, replacing `Booleans.contains(array, true)` with `!bitSet.isEmpty()` and `Booleans.contains(array, false)` with `bitSet.nextClearBit(0) == sizeOfBitSet`.
  syntax:
    content: public static boolean contains(boolean[] array, boolean target)
    parameters:
    - id: array
      type: boolean[]
      description: an array of <code>boolean</code> values, possibly empty
    - id: target
      type: boolean
      description: a primitive <code>boolean</code> value
    return:
      type: boolean
      description: <code>true</code> if <code>array[i] == target</code> for some value of <code>i</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.countTrue(boolean...)
  id: countTrue(boolean...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: countTrue(boolean[] values)
  nameWithType: Booleans.countTrue(boolean[] values)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.countTrue(boolean[] values)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.countTrue*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the number of `values` that are `true`.
  syntax:
    content: public static int countTrue(boolean[] values)
    parameters:
    - id: values
      type: boolean[]
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.ensureCapacity(boolean[],int,int)
  id: ensureCapacity(boolean[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: ensureCapacity(boolean[] array, int minLength, int padding)
  nameWithType: Booleans.ensureCapacity(boolean[] array, int minLength, int padding)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.ensureCapacity(boolean[] array, int minLength, int padding)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.ensureCapacity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns an array containing the same values as `array`, but guaranteed to be of a specified minimum length. If `array` already has a length of at least `minLength`, it is returned directly. Otherwise, a new array of size `minLength + padding` is returned, containing the values of `array`, and zeroes in the remaining places.
  syntax:
    content: public static boolean[] ensureCapacity(boolean[] array, int minLength, int padding)
    parameters:
    - id: array
      type: boolean[]
      description: the source array
    - id: minLength
      type: int
      description: the minimum length the returned array must guarantee
    - id: padding
      type: int
      description: an extra amount to "grow" the array by if growth is necessary
    return:
      type: boolean[]
      description: >-
        an array containing the values of <code>array</code>, with guaranteed minimum length <code>
             minLength</code>
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.falseFirst()
  id: falseFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: falseFirst()
  nameWithType: Booleans.falseFirst()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.falseFirst()
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.falseFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a `Comparator` that sorts `false` before `true`.


    This is particularly useful in Java 8+ in combination with `Comparators.comparing`, e.g. `Comparators.comparing(Foo::hasBar, falseFirst())`.
  syntax:
    content: public static Comparator<Boolean> falseFirst()
    return:
      type: java.util.Comparator<java.lang.Boolean>
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.hashCode(boolean)
  id: hashCode(boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: hashCode(boolean value)
  nameWithType: Booleans.hashCode(boolean value)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.hashCode(boolean value)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a hash code for `value`; equal to the result of invoking `((Boolean) value).hashCode()`.


    **Java 8 users:** use <xref uid="java.lang.Boolean.hashCode*" data-throw-if-not-resolved="false">Boolean#hashCode(boolean)</xref> instead.
  syntax:
    content: public static int hashCode(boolean value)
    parameters:
    - id: value
      type: boolean
      description: a primitive <code>boolean</code> value
    return:
      type: int
      description: a hash code for the value
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf(boolean[],boolean)
  id: indexOf(boolean[],boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: indexOf(boolean[] array, boolean target)
  nameWithType: Booleans.indexOf(boolean[] array, boolean target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf(boolean[] array, boolean target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the index of the first appearance of the value `target` in `array`.


    **Note:** consider representing the array as a <xref uid="" data-throw-if-not-resolved="false">java.util.BitSet</xref> instead, and using <xref uid="" data-throw-if-not-resolved="false">java.util.BitSet#nextSetBit(int)</xref> or <xref uid="" data-throw-if-not-resolved="false">java.util.BitSet#nextClearBit(int)</xref>.
  syntax:
    content: public static int indexOf(boolean[] array, boolean target)
    parameters:
    - id: array
      type: boolean[]
      description: an array of <code>boolean</code> values, possibly empty
    - id: target
      type: boolean
      description: a primitive <code>boolean</code> value
    return:
      type: int
      description: >-
        the least index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf(boolean[],boolean[])
  id: indexOf(boolean[],boolean[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: indexOf(boolean[] array, boolean[] target)
  nameWithType: Booleans.indexOf(boolean[] array, boolean[] target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf(boolean[] array, boolean[] target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns the start position of the first occurrence of the specified `target` within `array`, or `-1` if there is no such occurrence.


    More formally, returns the lowest index `i` such that `Arrays.copyOfRange(array, i, i + target.length)` contains exactly the same elements as `target`.
  syntax:
    content: public static int indexOf(boolean[] array, boolean[] target)
    parameters:
    - id: array
      type: boolean[]
      description: the array to search for the sequence <code>target</code>
    - id: target
      type: boolean[]
      description: the array to search for as a sub-sequence of <code>array</code>
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.join(java.lang.String,boolean...)
  id: join(java.lang.String,boolean...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: join(String separator, boolean[] array)
  nameWithType: Booleans.join(String separator, boolean[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.join(String separator, boolean[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.join*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns a string containing the supplied `boolean` values separated by `separator`. For example, `join("-", false, true, false)` returns the string `"false-true-false"`.
  syntax:
    content: public static String join(String separator, boolean[] array)
    parameters:
    - id: separator
      type: java.lang.String
      description: >-
        the text that should appear between consecutive values in the resulting string
             (but not at the start or end)
    - id: array
      type: boolean[]
      description: an array of <code>boolean</code> values, possibly empty
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.lastIndexOf(boolean[],boolean)
  id: lastIndexOf(boolean[],boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: lastIndexOf(boolean[] array, boolean target)
  nameWithType: Booleans.lastIndexOf(boolean[] array, boolean target)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.lastIndexOf(boolean[] array, boolean target)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.lastIndexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Returns the index of the last appearance of the value `target` in `array`.
  syntax:
    content: public static int lastIndexOf(boolean[] array, boolean target)
    parameters:
    - id: array
      type: boolean[]
      description: an array of <code>boolean</code> values, possibly empty
    - id: target
      type: boolean
      description: a primitive <code>boolean</code> value
    return:
      type: int
      description: >-
        the greatest index <code>i</code> for which <code>array[i] == target</code>, or <code>-1</code> if no
             such index exists.
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.lexicographicalComparator()
  id: lexicographicalComparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: lexicographicalComparator()
  nameWithType: Booleans.lexicographicalComparator()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.lexicographicalComparator()
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.lexicographicalComparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a comparator that compares two `boolean` arrays [lexicographically][]. That is, it compares, using <xref uid="com.azure.cosmos.implementation.guava25.primitives.Booleans.compare(boolean,boolean)" data-throw-if-not-resolved="false">#compare(boolean, boolean)</xref>), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, `[] < [false] < [false, true] < [true]`.


    The returned comparator is inconsistent with <xref uid="java.lang.Object.equals(java.lang.Object)" data-throw-if-not-resolved="false">Object#equals(Object)</xref> (since arrays support only identity equality), but it is consistent with <xref uid="Arrays#equals(boolean[],
     boolean[])" data-throw-if-not-resolved="false">Arrays#equals(boolean[],
     boolean[])</xref>.


    [lexicographically]: http://en.wikipedia.org/wiki/Lexicographical_order
  syntax:
    content: public static Comparator<boolean[]> lexicographicalComparator()
    return:
      type: java.util.Comparator<boolean[]>
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse(boolean[])
  id: reverse(boolean[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: reverse(boolean[] array)
  nameWithType: Booleans.reverse(boolean[] array)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse(boolean[] array)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array`. This is equivalent to `Collections.reverse(Booleans.asList(array))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(boolean[] array)
    parameters:
    - id: array
      type: boolean[]
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse(boolean[],int,int)
  id: reverse(boolean[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: reverse(boolean[] array, int fromIndex, int toIndex)
  nameWithType: Booleans.reverse(boolean[] array, int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse(boolean[] array, int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: Reverses the elements of `array` between `fromIndex` inclusive and `toIndex` exclusive. This is equivalent to `Collections.reverse(Booleans.asList(array).subList(fromIndex, toIndex))`, but is likely to be more efficient.
  syntax:
    content: public static void reverse(boolean[] array, int fromIndex, int toIndex)
    parameters:
    - id: array
      type: boolean[]
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.toArray(java.util.Collection<java.lang.Boolean>)
  id: toArray(java.util.Collection<java.lang.Boolean>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: toArray(Collection<Boolean> collection)
  nameWithType: Booleans.toArray(Collection<Boolean> collection)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.toArray(Collection<Boolean> collection)
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Copies a collection of `Boolean` instances into a new array of primitive `boolean` values.


    Elements are copied from the argument collection as if by `collection.toArray()`. Calling this method is as thread-safe as calling that method.


    **Note:** consider representing the collection as a <xref uid="" data-throw-if-not-resolved="false">java.util.BitSet</xref> instead.
  syntax:
    content: public static boolean[] toArray(Collection<Boolean> collection)
    parameters:
    - id: collection
      type: java.util.Collection<java.lang.Boolean>
      description: a collection of <code>Boolean</code> objects
    return:
      type: boolean[]
      description: >-
        an array containing the same values as <code>collection</code>, in the same order, converted
             to primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.trueFirst()
  id: trueFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.primitives.Booleans
  langs:
  - java
  name: trueFirst()
  nameWithType: Booleans.trueFirst()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.trueFirst()
  overload: com.azure.cosmos.implementation.guava25.primitives.Booleans.trueFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.primitives
  summary: >-
    Returns a `Comparator` that sorts `true` before `false`.


    This is particularly useful in Java 8+ in combination with `Comparators.comparing`, e.g. `Comparators.comparing(Foo::hasBar, trueFirst())`.
  syntax:
    content: public static Comparator<Boolean> trueFirst()
    return:
      type: java.util.Comparator<java.lang.Boolean>
references:
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.Booleans*
  name: Booleans
  nameWithType: Booleans.Booleans
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.Booleans
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Comparator<java.lang.Boolean>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.trueFirst*
  name: trueFirst
  nameWithType: Booleans.trueFirst
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.trueFirst
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.falseFirst*
  name: falseFirst
  nameWithType: Booleans.falseFirst
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.falseFirst
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.hashCode*
  name: hashCode
  nameWithType: Booleans.hashCode
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.hashCode
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.compare*
  name: compare
  nameWithType: Booleans.compare
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.compare
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: boolean[]
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.contains*
  name: contains
  nameWithType: Booleans.contains
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.contains
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf*
  name: indexOf
  nameWithType: Booleans.indexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.indexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.lastIndexOf*
  name: lastIndexOf
  nameWithType: Booleans.lastIndexOf
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.lastIndexOf
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: boolean[][]
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.concat*
  name: concat
  nameWithType: Booleans.concat
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.concat
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.ensureCapacity*
  name: ensureCapacity
  nameWithType: Booleans.ensureCapacity
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.ensureCapacity
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.join*
  name: join
  nameWithType: Booleans.join
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.join
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Comparator<boolean[]>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: boolean
    name: boolean
    fullName: boolean
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.lexicographicalComparator*
  name: lexicographicalComparator
  nameWithType: Booleans.lexicographicalComparator
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.lexicographicalComparator
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.Collection<java.lang.Boolean>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.toArray*
  name: toArray
  nameWithType: Booleans.toArray
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.toArray
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.util.List<java.lang.Boolean>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.asList*
  name: asList
  nameWithType: Booleans.asList
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.asList
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.countTrue*
  name: countTrue
  nameWithType: Booleans.countTrue
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.countTrue
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse*
  name: reverse
  nameWithType: Booleans.reverse
  fullName: com.azure.cosmos.implementation.guava25.primitives.Booleans.reverse
  package: com.azure.cosmos.implementation.guava25.primitives
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: java.lang.Boolean
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
