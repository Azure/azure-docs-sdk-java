### YamlMime:JavaMember
uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions*"
fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions"
name: "AnalyzeTextOptions"
nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions"
members:
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  name: "AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes analyzerName."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the analyzer to use to break the\n given text. If this parameter is not specified, you must specify a\n tokenizer instead. The tokenizer and analyzer parameters are mutually\n exclusive. Possible values include: 'ArMicrosoft', 'ArLucene',\n 'HyLucene', 'BnMicrosoft', 'EuLucene', 'BgMicrosoft', 'BgLucene',\n 'CaMicrosoft', 'CaLucene', 'ZhHansMicrosoft', 'ZhHansLucene',\n 'ZhHantMicrosoft', 'ZhHantLucene', 'HrMicrosoft', 'CsMicrosoft',\n 'CsLucene', 'DaMicrosoft', 'DaLucene', 'NlMicrosoft', 'NlLucene',\n 'EnMicrosoft', 'EnLucene', 'EtMicrosoft', 'FiMicrosoft', 'FiLucene',\n 'FrMicrosoft', 'FrLucene', 'GlLucene', 'DeMicrosoft', 'DeLucene',\n 'ElMicrosoft', 'ElLucene', 'GuMicrosoft', 'HeMicrosoft', 'HiMicrosoft',\n 'HiLucene', 'HuMicrosoft', 'HuLucene', 'IsMicrosoft', 'IdMicrosoft',\n 'IdLucene', 'GaLucene', 'ItMicrosoft', 'ItLucene', 'JaMicrosoft',\n 'JaLucene', 'KnMicrosoft', 'KoMicrosoft', 'KoLucene', 'LvMicrosoft',\n 'LvLucene', 'LtMicrosoft', 'MlMicrosoft', 'MsMicrosoft', 'MrMicrosoft',\n 'NbMicrosoft', 'NoLucene', 'FaLucene', 'PlMicrosoft', 'PlLucene',\n 'PtBrMicrosoft', 'PtBrLucene', 'PtPtMicrosoft', 'PtPtLucene',\n 'PaMicrosoft', 'RoMicrosoft', 'RoLucene', 'RuMicrosoft', 'RuLucene',\n 'SrCyrillicMicrosoft', 'SrLatinMicrosoft', 'SkMicrosoft', 'SlMicrosoft',\n 'EsMicrosoft', 'EsLucene', 'SvMicrosoft', 'SvLucene', 'TaMicrosoft',\n 'TeMicrosoft', 'ThMicrosoft', 'ThLucene', 'TrMicrosoft', 'TrLucene',\n 'UkMicrosoft', 'UrMicrosoft', 'ViMicrosoft', 'StandardLucene',\n 'StandardAsciiFoldingLucene', 'Keyword', 'Pattern', 'Simple', 'Stop',\n 'Whitespace'."
    name: "analyzerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  name: "AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes tokenizerName."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the tokenizer to use to break\n the given text. If this parameter is not specified, you must specify an\n analyzer instead. The tokenizer and analyzer parameters are mutually\n exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword',\n 'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer',\n 'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy',\n 'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'."
    name: "tokenizerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizerName?alt=com.azure.search.documents.indexes.models.LexicalTokenizerName&text=LexicalTokenizerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
type: "constructor"
metadata: {}
package: "com.azure.search.documents.indexes.models"
artifact: com.azure:azure-search-documents:11.2.0-beta.3
