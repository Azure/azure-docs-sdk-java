### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  id: DefaultSerializerProvider
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap()
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._generator
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._objectIdGenerators
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._seenObjectIds
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount()
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers()
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator()
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  langs:
  - java
  name: DefaultSerializerProvider
  nameWithType: DefaultSerializerProvider
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  type: Class
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Standard implementation used by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>: adds methods only exposed to <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref>, as well as constructors.


    Note that class is abstract just because it does not define <xref uid="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance*" data-throw-if-not-resolved="false">#createInstance</xref> method.


    Also note that all custom <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> implementations must sub-class this class: <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> requires this type, not basic provider type.
  syntax:
    content: public abstract class DefaultSerializerProvider extends SerializerProvider implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.DatabindContext
  - com.fasterxml.jackson.databind.SerializerProvider
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
  - com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  - com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  - com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  - com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String,java.lang.Throwable)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider._dateFormat()
  - com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()
  - com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  - com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class<?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.getActiveView()
  - com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()
  - com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.getConfig()
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()
  - com.fasterxml.jackson.databind.SerializerProvider.getGenerator()
  - com.fasterxml.jackson.databind.SerializerProvider.getLocale()
  - com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()
  - com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()
  - com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()
  - com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)
  - com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  - com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  - com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  - com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()
  id: DefaultSerializerProvider()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: DefaultSerializerProvider()
  nameWithType: DefaultSerializerProvider.DefaultSerializerProvider()
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected DefaultSerializerProvider()
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  id: DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: DefaultSerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
  nameWithType: DefaultSerializerProvider.DefaultSerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected DefaultSerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: f
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)
  id: DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: DefaultSerializerProvider(DefaultSerializerProvider src)
  nameWithType: DefaultSerializerProvider.DefaultSerializerProvider(DefaultSerializerProvider src)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(DefaultSerializerProvider src)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected DefaultSerializerProvider(DefaultSerializerProvider src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap()
  id: _createObjectIdMap()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: _createObjectIdMap()
  nameWithType: DefaultSerializerProvider._createObjectIdMap()
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap()
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Overridable helper method used for creating <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> used for storing mappings from serializable objects to their Object Ids.
  syntax:
    content: protected Map<Object,WritableObjectId> _createObjectIdMap()
    return:
      type: java.util.Map<java.lang.Object,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._generator
  id: _generator
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: _generator
  nameWithType: DefaultSerializerProvider._generator
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._generator
  type: Field
  package: com.fasterxml.jackson.databind.ser
  summary: Generator used for serialization. Needed mostly for error reporting purposes.
  syntax:
    content: protected transient JsonGenerator _generator
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._objectIdGenerators
  id: _objectIdGenerators
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: _objectIdGenerators
  nameWithType: DefaultSerializerProvider._objectIdGenerators
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._objectIdGenerators
  type: Field
  package: com.fasterxml.jackson.databind.ser
  syntax:
    content: protected transient ArrayList<ObjectIdGenerator<?>> _objectIdGenerators
    return:
      type: java.util.ArrayList<com.fasterxml.jackson.annotation.ObjectIdGenerator<?>>
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._seenObjectIds
  id: _seenObjectIds
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: _seenObjectIds
  nameWithType: DefaultSerializerProvider._seenObjectIds
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._seenObjectIds
  type: Field
  package: com.fasterxml.jackson.databind.ser
  summary: Per-serialization map Object Ids that have seen so far, iff Object Id handling is enabled.
  syntax:
    content: protected transient Map<Object,WritableObjectId> _seenObjectIds
    return:
      type: java.util.Map<java.lang.Object,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull(com.fasterxml.jackson.core.JsonGenerator)
  id: _serializeNull(com.fasterxml.jackson.core.JsonGenerator)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: _serializeNull(JsonGenerator gen)
  nameWithType: DefaultSerializerProvider._serializeNull(JsonGenerator gen)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull(JsonGenerator gen)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Helper method called when root value to serialize is null
  syntax:
    content: protected void _serializeNull(JsonGenerator gen)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: acceptJsonFormatVisitor(JavaType javaType, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  nameWithType: DefaultSerializerProvider.acceptJsonFormatVisitor(JavaType javaType, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor(JavaType javaType, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: The method to be called by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> to to expose the format of the given to to the given visitor
  syntax:
    content: public void acceptJsonFormatVisitor(JavaType javaType, jsonFormatVisitors.JsonFormatVisitorWrapper visitor)
    parameters:
    - id: javaType
      type: com.fasterxml.jackson.databind.JavaType
      description: The type for which to generate format
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
      description: the visitor to accept the format
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount()
  id: cachedSerializersCount()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: cachedSerializersCount()
  nameWithType: DefaultSerializerProvider.cachedSerializersCount()
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount()
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method that can be used to determine how many serializers this provider is caching currently (if it does caching: default implementation does) Exact count depends on what kind of serializers get cached; default implementation caches all serializers, including ones that are eagerly constructed (for optimal access speed)


    The main use case for this method is to allow conditional flushing of serializer cache, if certain number of entries is reached.
  syntax:
    content: public int cachedSerializersCount()
    return:
      type: int
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()
  id: copy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: copy()
  nameWithType: DefaultSerializerProvider.copy()
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method needed to ensure that <xref uid="com.fasterxml.jackson.databind.ObjectMapper.copy*" data-throw-if-not-resolved="false">ObjectMapper#copy</xref> will work properly; specifically, that caches are cleared, but settings will otherwise remain identical; and that no sharing of state occurs.
  syntax:
    content: public DefaultSerializerProvider copy()
    return:
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  id: createInstance(com.fasterxml.jackson.databind.SerializationConfig,com.fasterxml.jackson.databind.ser.SerializerFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: createInstance(SerializationConfig config, SerializerFactory jsf)
  nameWithType: DefaultSerializerProvider.createInstance(SerializationConfig config, SerializerFactory jsf)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(SerializationConfig config, SerializerFactory jsf)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: 'Method that sub-classes need to implement: used to create a non-blueprint instances from the blueprint. This is needed to retain state during serialization.'
  syntax:
    content: public abstract DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.SerializationConfig
    - id: jsf
      type: com.fasterxml.jackson.databind.ser.SerializerFactory
    return:
      type: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  id: findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
  nameWithType: DefaultSerializerProvider.findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method called to find the Object Id for given POJO, if one has been generated. Will always return a non-null Object; contents vary depending on whether an Object Id already exists or not.
  syntax:
    content: public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)
    parameters:
    - id: forPojo
      type: java.lang.Object
    - id: generatorType
      type: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
    return:
      type: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers()
  id: flushCachedSerializers()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: flushCachedSerializers()
  nameWithType: DefaultSerializerProvider.flushCachedSerializers()
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers()
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method that will drop all serializers currently cached by this provider. This can be used to remove memory usage (in case some serializers are only used once or so), or to force re-construction of serializers after configuration changes for mapper than owns the provider.
  syntax:
    content: public void flushCachedSerializers()
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema(java.lang.Class<?>)
  id: generateJsonSchema(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: generateJsonSchema(Class<?> type)
  nameWithType: DefaultSerializerProvider.generateJsonSchema(Class<?> type)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema(Class<?> type)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    The method to be called by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> to generate [JSON schema][] for given type.



    [JSON schema]: http://json-schema.org/
  syntax:
    content: public JsonSchema generateJsonSchema(Class<?> type)
    parameters:
    - id: type
      type: java.lang.Class<?>
      description: The type for which to generate schema
    return:
      type: com.fasterxml.jackson.databind.jsonschema.JsonSchema
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator()
  id: getGenerator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: getGenerator()
  nameWithType: DefaultSerializerProvider.getGenerator()
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator()
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Accessor for the <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> currently in use for serializing content. Null for blueprint instances; non-null for actual active provider instances.
  syntax:
    content: public JsonGenerator getGenerator()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  id: hasSerializerFor(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)
  nameWithType: DefaultSerializerProvider.hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method that can be called to see if this serializer provider can find a serializer for an instance of given class.


    Note that no Exceptions are thrown, including unchecked ones: implementations are to swallow exceptions if necessary.
  syntax:
    content: public boolean hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)
    parameters:
    - id: cls
      type: java.lang.Class<?>
    - id: cause
      type: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  id: includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
  nameWithType: DefaultSerializerProvider.includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method that can be called to construct and configure <xref uid="com.fasterxml.jackson.annotation.JsonInclude" data-throw-if-not-resolved="false">JsonInclude</xref> filter instance, given a <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> to instantiate (with default constructor, by default).
  syntax:
    content: public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass)
    parameters:
    - id: forProperty
      type: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
    - id: filterClass
      type: java.lang.Class<?>
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls(java.lang.Object)
  id: includeFilterSuppressNulls(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: includeFilterSuppressNulls(Object filter)
  nameWithType: DefaultSerializerProvider.includeFilterSuppressNulls(Object filter)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls(Object filter)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Follow-up method that may be called after calling <xref uid="com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance*" data-throw-if-not-resolved="false">#includeFilterInstance</xref>, to check handling of \`null\` values by the filter.
  syntax:
    content: public boolean includeFilterSuppressNulls(Object filter)
    parameters:
    - id: filter
      type: java.lang.Object
    return:
      type: boolean
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializePolymorphic(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer)
  nameWithType: DefaultSerializerProvider.serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Alternate serialization call used for polymorphic types, when <xref uid="com.fasterxml.jackson.databind.jsontype.TypeSerializer" data-throw-if-not-resolved="false">TypeSerializer</xref> is already known, but the actual serializer may or may not be.
  syntax:
    content: public void serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
    - id: valueSer
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  id: serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: serializeValue(JsonGenerator gen, Object value)
  nameWithType: DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: The method to be called by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> for serializing given value, using serializers that this provider has access to (via caching and/or creating new serializers as need be).
  syntax:
    content: public void serializeValue(JsonGenerator gen, Object value)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  id: serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: serializeValue(JsonGenerator gen, Object value, JavaType rootType)
  nameWithType: DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: The method to be called by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> and <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> for serializing given value (assumed to be of specified root type, instead of runtime type of value), using serializers that this provider has access to (via caching and/or creating new serializers as need be),
  syntax:
    content: public void serializeValue(JsonGenerator gen, Object value, JavaType rootType)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Type to use for locating serializer to use, instead of actual
            runtime type. Must be actual type, or one of its super types
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  id: serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)
  nameWithType: DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: The method to be called by <xref uid="com.fasterxml.jackson.databind.ObjectWriter" data-throw-if-not-resolved="false">ObjectWriter</xref> for serializing given value (assumed to be of specified root type, instead of runtime type of value), when it may know specific <xref uid="com.fasterxml.jackson.databind.JsonSerializer" data-throw-if-not-resolved="false">JsonSerializer</xref> to use.
  syntax:
    content: public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser)
    parameters:
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: value
      type: java.lang.Object
    - id: rootType
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Type to use for locating serializer to use, instead of actual
            runtime type, if no serializer is passed
    - id: ser
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
      description: Root Serializer to use, if not null
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  id: serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider
  langs:
  - java
  name: serializerInstance(Annotated annotated, Object serDef)
  nameWithType: DefaultSerializerProvider.serializerInstance(Annotated annotated, Object serDef)
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance(Annotated annotated, Object serDef)
  overload: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: Method that can be called to construct and configure serializer instance, either given a <xref uid="java.lang.Class" data-throw-if-not-resolved="false">Class</xref> to instantiate (with default constructor), or an uninitialized serializer instance. Either way, serialize will be properly resolved (via <xref uid="com.fasterxml.jackson.databind.ser.ResolvableSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ResolvableSerializer</xref>) and/or contextualized (via <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.ContextualSerializer</xref>) as necessary.
  syntax:
    content: public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef)
    parameters:
    - id: annotated
      type: com.fasterxml.jackson.databind.introspect.Annotated
    - id: serDef
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
references:
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider*
  name: DefaultSerializerProvider
  nameWithType: DefaultSerializerProvider.DefaultSerializerProvider
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.SerializationConfig
  name: SerializationConfig
  nameWithType: SerializationConfig
  fullName: com.fasterxml.jackson.databind.SerializationConfig
- uid: com.fasterxml.jackson.databind.ser.SerializerFactory
  name: SerializerFactory
  nameWithType: SerializerFactory
  fullName: com.fasterxml.jackson.databind.ser.SerializerFactory
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance*
  name: createInstance
  nameWithType: DefaultSerializerProvider.createInstance
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy*
  name: copy
  nameWithType: DefaultSerializerProvider.copy
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.introspect.Annotated
  name: Annotated
  nameWithType: Annotated
  fullName: com.fasterxml.jackson.databind.introspect.Annotated
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance*
  name: serializerInstance
  nameWithType: DefaultSerializerProvider.serializerInstance
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
  name: BeanPropertyDefinition
  nameWithType: BeanPropertyDefinition
  fullName: com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance*
  name: includeFilterInstance
  nameWithType: DefaultSerializerProvider.includeFilterInstance
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance
  package: com.fasterxml.jackson.databind.ser
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls*
  name: includeFilterSuppressNulls
  nameWithType: DefaultSerializerProvider.includeFilterSuppressNulls
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator<?>
  spec.java:
  - uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
    name: ObjectIdGenerator
    fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
  name: WritableObjectId
  nameWithType: WritableObjectId
  fullName: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId*
  name: findObjectId
  nameWithType: DefaultSerializerProvider.findObjectId
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId
  package: com.fasterxml.jackson.databind.ser
- uid: java.util.Map<java.lang.Object,com.fasterxml.jackson.databind.ser.impl.WritableObjectId>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
    name: WritableObjectId
    fullName: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap*
  name: _createObjectIdMap
  nameWithType: DefaultSerializerProvider._createObjectIdMap
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap
  package: com.fasterxml.jackson.databind.ser
- uid: java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>
  spec.java:
  - uid: java.util.concurrent.atomic.AtomicReference
    name: AtomicReference
    fullName: java.util.concurrent.atomic.AtomicReference
  - name: <
    fullName: <
  - uid: java.lang.Throwable
    name: Throwable
    fullName: java.lang.Throwable
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor*
  name: hasSerializerFor
  nameWithType: DefaultSerializerProvider.hasSerializerFor
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator*
  name: getGenerator
  nameWithType: DefaultSerializerProvider.getGenerator
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator
  package: com.fasterxml.jackson.databind.ser
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue*
  name: serializeValue
  nameWithType: DefaultSerializerProvider.serializeValue
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic*
  name: serializePolymorphic
  nameWithType: DefaultSerializerProvider.serializePolymorphic
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull*
  name: _serializeNull
  nameWithType: DefaultSerializerProvider._serializeNull
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull
  package: com.fasterxml.jackson.databind.ser
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount*
  name: cachedSerializersCount
  nameWithType: DefaultSerializerProvider.cachedSerializersCount
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers*
  name: flushCachedSerializers
  nameWithType: DefaultSerializerProvider.flushCachedSerializers
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: DefaultSerializerProvider.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind.ser
- uid: com.fasterxml.jackson.databind.jsonschema.JsonSchema
  name: JsonSchema
  nameWithType: JsonSchema
  fullName: com.fasterxml.jackson.databind.jsonschema.JsonSchema
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema*
  name: generateJsonSchema
  nameWithType: DefaultSerializerProvider.generateJsonSchema
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema
  package: com.fasterxml.jackson.databind.ser
- uid: java.util.ArrayList<com.fasterxml.jackson.annotation.ObjectIdGenerator<?>>
  spec.java:
  - uid: java.util.ArrayList
    name: ArrayList
    fullName: java.util.ArrayList
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
    name: ObjectIdGenerator
    fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeDateKey(long,JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeDateKey(long,JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long,com.fasterxml.jackson.core.JsonGenerator)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.handleSecondaryContextualization(JsonSerializer<?>,BeanProperty)
  nameWithType: SerializerProvider.handleSecondaryContextualization(JsonSerializer<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeNull(JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeNull(JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(com.fasterxml.jackson.core.JsonGenerator)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()
  name: SerializerProvider.getTypeFactory()
  nameWithType: SerializerProvider.getTypeFactory()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()
- uid: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  name: SerializerProvider.setDefaultKeySerializer(JsonSerializer<Object>)
  nameWithType: SerializerProvider.setDefaultKeySerializer(JsonSerializer<Object>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
  name: SerializerProvider.isEnabled(MapperFeature)
  nameWithType: SerializerProvider.isEnabled(MapperFeature)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)
- uid: com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
  name: DatabindContext._desc(String)
  nameWithType: DatabindContext._desc(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  name: DatabindContext.objectIdResolverInstance(Annotated,ObjectIdInfo)
  nameWithType: DatabindContext.objectIdResolverInstance(Annotated,ObjectIdInfo)
  fullName: com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findContentValueSerializer(JavaType,BeanProperty)
  nameWithType: SerializerProvider.findContentValueSerializer(JavaType,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()
  name: SerializerProvider.getTimeZone()
  nameWithType: SerializerProvider.getTimeZone()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()
- uid: com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
  name: DatabindContext.constructType(Type)
  nameWithType: DatabindContext.constructType(Type)
  fullName: com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  name: SerializerProvider.setNullKeySerializer(JsonSerializer<Object>)
  nameWithType: SerializerProvider.setNullKeySerializer(JsonSerializer<Object>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
- uid: com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.resolveAndValidateSubType(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.resolveAndValidateSubType(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.resolveAndValidateSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class<?>)
  name: SerializerProvider._findExplicitUntypedSerializer(Class<?>)
  nameWithType: SerializerProvider._findExplicitUntypedSerializer(Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
  name: DatabindContext._colonConcat(String,String)
  nameWithType: DatabindContext._colonConcat(String,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String,java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.handlePrimaryContextualization(JsonSerializer<?>,BeanProperty)
  nameWithType: SerializerProvider.handlePrimaryContextualization(JsonSerializer<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeDateKey(Date,JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeDateKey(Date,JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
  name: DatabindContext.<T>reportBadDefinition(Class<?>,String)
  nameWithType: DatabindContext.<T>reportBadDefinition(Class<?>,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String)
- uid: com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
  name: DatabindContext.objectIdGeneratorInstance(Annotated,ObjectIdInfo)
  nameWithType: DatabindContext.objectIdGeneratorInstance(Annotated,ObjectIdInfo)
  fullName: com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated,com.fasterxml.jackson.databind.introspect.ObjectIdInfo)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeField(String,Object,JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeField(String,Object,JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String,java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()
  name: SerializerProvider.getFilterProvider()
  nameWithType: SerializerProvider.getFilterProvider()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class<?>)
  name: SerializerProvider._createAndCacheUntypedSerializer(Class<?>)
  nameWithType: SerializerProvider._createAndCacheUntypedSerializer(Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class<?>)
  name: SerializerProvider.getDefaultPropertyInclusion(Class<?>)
  nameWithType: SerializerProvider.getDefaultPropertyInclusion(Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findKeySerializer(JavaType,BeanProperty)
  nameWithType: SerializerProvider.findKeySerializer(JavaType,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object...)
  name: SerializerProvider.reportMappingProblem(Throwable,String,Object)
  nameWithType: SerializerProvider.reportMappingProblem(Throwable,String,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable,java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findValueSerializer(Class<?>,BeanProperty)
  nameWithType: SerializerProvider.findValueSerializer(Class<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)
  name: SerializerProvider.includeFilterSuppressNulls(Object)
  nameWithType: SerializerProvider.includeFilterSuppressNulls(Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)
- uid: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()
  name: SerializerProvider.canOverrideAccessModifiers()
  nameWithType: SerializerProvider.canOverrideAccessModifiers()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()
- uid: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()
  name: SerializerProvider.getSerializationView()
  nameWithType: SerializerProvider.getSerializationView()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.<T>_throwNotASubtype(JavaType,String)
  nameWithType: DatabindContext.<T>_throwNotASubtype(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  name: SerializerProvider._createUntypedSerializer(JavaType)
  nameWithType: SerializerProvider._createUntypedSerializer(JavaType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.<T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.<T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)
  name: SerializerProvider.findValueSerializer(JavaType)
  nameWithType: SerializerProvider.findValueSerializer(JavaType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getActiveView()
  name: SerializerProvider.getActiveView()
  nameWithType: SerializerProvider.getActiveView()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getActiveView()
- uid: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
  name: SerializerProvider.constructSpecializedType(JavaType,Class<?>)
  nameWithType: SerializerProvider.constructSpecializedType(JavaType,Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)
  name: SerializerProvider.getAttribute(Object)
  nameWithType: SerializerProvider.getAttribute(Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)
- uid: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
  name: SerializerProvider._createAndCacheUntypedSerializer(JavaType)
  nameWithType: SerializerProvider._createAndCacheUntypedSerializer(JavaType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getLocale()
  name: SerializerProvider.getLocale()
  nameWithType: SerializerProvider.getLocale()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getLocale()
- uid: com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
  name: DatabindContext._quotedString(String)
  nameWithType: DatabindContext._quotedString(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findContentValueSerializer(Class<?>,BeanProperty)
  nameWithType: SerializerProvider.findContentValueSerializer(Class<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()
  name: SerializerProvider.getAnnotationIntrospector()
  nameWithType: SerializerProvider.getAnnotationIntrospector()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()
- uid: com.fasterxml.jackson.databind.SerializerProvider.getConfig()
  name: SerializerProvider.getConfig()
  nameWithType: SerializerProvider.getConfig()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getConfig()
- uid: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  name: SerializerProvider.serializerInstance(Annotated,Object)
  nameWithType: SerializerProvider.serializerInstance(Annotated,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  name: SerializerProvider.<T>reportBadTypeDefinition(BeanDescription,String,Object)
  nameWithType: SerializerProvider.<T>reportBadTypeDefinition(BeanDescription,String,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
  name: SerializerProvider.<T>reportBadDefinition(JavaType,String,Throwable)
  nameWithType: SerializerProvider.<T>reportBadDefinition(JavaType,String,Throwable)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>)
  name: SerializerProvider.findValueSerializer(Class<?>)
  nameWithType: SerializerProvider.findValueSerializer(Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)
  name: SerializerProvider.hasSerializationFeatures(int)
  nameWithType: SerializerProvider.hasSerializationFeatures(int)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)
- uid: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: DatabindContext.<T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: DatabindContext.<T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: com.fasterxml.jackson.databind.DatabindContext.<T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.SerializerProvider._dateFormat()
  name: SerializerProvider._dateFormat()
  nameWithType: SerializerProvider._dateFormat()
  fullName: com.fasterxml.jackson.databind.SerializerProvider._dateFormat()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeValue(Object,JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeValue(Object,JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator)
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeDateValue(Date,JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeDateValue(Date,JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date,com.fasterxml.jackson.core.JsonGenerator)
- uid: com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
  name: DatabindContext._format(String,Object)
  nameWithType: DatabindContext._format(String,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String,java.lang.Object...)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: DatabindContext.resolveSubType(JavaType,String)
  nameWithType: DatabindContext.resolveSubType(JavaType,String)
  fullName: com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: SerializerProvider.<T>reportBadDefinition(JavaType,String)
  nameWithType: SerializerProvider.<T>reportBadDefinition(JavaType,String)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
  name: SerializerProvider.findObjectId(Object,ObjectIdGenerator<?>)
  nameWithType: SerializerProvider.findObjectId(Object,ObjectIdGenerator<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findKeySerializer(Class<?>,BeanProperty)
  nameWithType: SerializerProvider.findKeySerializer(Class<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
  name: SerializerProvider.invalidTypeIdException(JavaType,String,String)
  nameWithType: SerializerProvider.invalidTypeIdException(JavaType,String,String)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
  name: SerializerProvider._reportIncompatibleRootType(Object,JavaType)
  nameWithType: SerializerProvider._reportIncompatibleRootType(Object,JavaType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)
  name: SerializerProvider.findTypeSerializer(JavaType)
  nameWithType: SerializerProvider.findTypeSerializer(JavaType)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String,java.lang.Throwable)
  name: SerializerProvider.<T>reportBadDefinition(Class<?>,String,Throwable)
  nameWithType: SerializerProvider.<T>reportBadDefinition(Class<?>,String,Throwable)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadDefinition(java.lang.Class<?>,java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: SerializerProvider._handleResolvable(JsonSerializer<?>)
  nameWithType: SerializerProvider._handleResolvable(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String,java.lang.Object...)
  name: SerializerProvider.reportMappingProblem(String,Object)
  nameWithType: SerializerProvider.reportMappingProblem(String,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  name: SerializerProvider.<T>reportBadPropertyDefinition(BeanDescription,BeanPropertyDefinition,String,Object)
  nameWithType: SerializerProvider.<T>reportBadPropertyDefinition(BeanDescription,BeanPropertyDefinition,String,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.<T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long,com.fasterxml.jackson.core.JsonGenerator)
  name: SerializerProvider.defaultSerializeDateValue(long,JsonGenerator)
  nameWithType: SerializerProvider.defaultSerializeDateValue(long,JsonGenerator)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long,com.fasterxml.jackson.core.JsonGenerator)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findNullValueSerializer(BeanProperty)
  nameWithType: SerializerProvider.findNullValueSerializer(BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getGenerator()
  name: SerializerProvider.getGenerator()
  nameWithType: SerializerProvider.getGenerator()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getGenerator()
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
  name: SerializerProvider.setNullValueSerializer(JsonSerializer<Object>)
  nameWithType: SerializerProvider.setNullValueSerializer(JsonSerializer<Object>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
  name: SerializerProvider.isEnabled(SerializationFeature)
  nameWithType: SerializerProvider.isEnabled(SerializationFeature)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findTypedValueSerializer(JavaType,boolean,BeanProperty)
  nameWithType: SerializerProvider.findTypedValueSerializer(JavaType,boolean,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType,boolean,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: SerializerProvider.isUnknownTypeSerializer(JsonSerializer<?>)
  nameWithType: SerializerProvider.isUnknownTypeSerializer(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()
  name: SerializerProvider.getDefaultNullValueSerializer()
  nameWithType: SerializerProvider.getDefaultNullValueSerializer()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()
- uid: com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object,java.lang.Object)
  name: SerializerProvider.setAttribute(Object,Object)
  nameWithType: SerializerProvider.setAttribute(Object,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
  name: DatabindContext._truncate(String)
  nameWithType: DatabindContext._truncate(String)
  fullName: com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider._handleContextualResolvable(JsonSerializer<?>,BeanProperty)
  nameWithType: SerializerProvider._handleContextualResolvable(JsonSerializer<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class<?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findTypedValueSerializer(Class<?>,boolean,BeanProperty)
  nameWithType: SerializerProvider.findTypedValueSerializer(Class<?>,boolean,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class<?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findPrimaryPropertySerializer(Class<?>,BeanProperty)
  nameWithType: SerializerProvider.findPrimaryPropertySerializer(Class<?>,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class<?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable,java.lang.String,java.lang.Object...)
  name: SerializerProvider.mappingException(Throwable,String,Object)
  nameWithType: SerializerProvider.mappingException(Throwable,String,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable,java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findPrimaryPropertySerializer(JavaType,BeanProperty)
  nameWithType: SerializerProvider.findPrimaryPropertySerializer(JavaType,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class<?>)
  name: SerializerProvider.getUnknownTypeSerializer(Class<?>)
  nameWithType: SerializerProvider.getUnknownTypeSerializer(Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()
  name: SerializerProvider.getDefaultNullKeySerializer()
  nameWithType: SerializerProvider.getDefaultNullKeySerializer()
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()
- uid: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findNullKeySerializer(JavaType,BeanProperty)
  nameWithType: SerializerProvider.findNullKeySerializer(JavaType,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
  name: SerializerProvider.includeFilterInstance(BeanPropertyDefinition,Class<?>)
  nameWithType: SerializerProvider.includeFilterInstance(BeanPropertyDefinition,Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class<?>)
  name: SerializerProvider.getDefaultPropertyFormat(Class<?>)
  nameWithType: SerializerProvider.getDefaultPropertyFormat(Class<?>)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
  name: SerializerProvider.findValueSerializer(JavaType,BeanProperty)
  nameWithType: SerializerProvider.findValueSerializer(JavaType,BeanProperty)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
  name: DatabindContext.converterInstance(Annotated,Object)
  nameWithType: DatabindContext.converterInstance(Annotated,Object)
  fullName: com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated,java.lang.Object)
- uid: com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String,java.lang.Object...)
  name: SerializerProvider.mappingException(String,Object)
  nameWithType: SerializerProvider.mappingException(String,Object)
  fullName: com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl
  name: DefaultSerializerProvider.Impl
  nameWithType: DefaultSerializerProvider.Impl
  fullName: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: com.fasterxml.jackson.annotation.ObjectIdGenerator
  name: ObjectIdGenerator
  nameWithType: ObjectIdGenerator
  fullName: com.fasterxml.jackson.annotation.ObjectIdGenerator
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.Object,com.fasterxml.jackson.databind.ser.impl.WritableObjectId
  name: Object,WritableObjectId
  nameWithType: Object,WritableObjectId
  fullName: java.lang.Object,com.fasterxml.jackson.databind.ser.impl.WritableObjectId
- uid: java.lang.Throwable
  name: Throwable
  nameWithType: Throwable
  fullName: java.lang.Throwable
- uid: java.util.concurrent.atomic.AtomicReference
  name: AtomicReference
  nameWithType: AtomicReference
  fullName: java.util.concurrent.atomic.AtomicReference
- uid: java.util.ArrayList
  name: ArrayList
  nameWithType: ArrayList
  fullName: java.util.ArrayList
- uid: ?>,com.fasterxml.jackson.databind.BeanProperty)
  name: ?>,BeanProperty)
  nameWithType: ?>,BeanProperty)
  fullName: ?>,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider.handleSecondaryContextualization(JsonSerializer
  nameWithType: SerializerProvider.handleSecondaryContextualization(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider.setDefaultKeySerializer(JsonSerializer
  nameWithType: SerializerProvider.setDefaultKeySerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: java.lang.Object>)
  name: Object>)
  nameWithType: Object>)
  fullName: java.lang.Object>)
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider.setNullKeySerializer(JsonSerializer
  nameWithType: SerializerProvider.setNullKeySerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class
  name: SerializerProvider._findExplicitUntypedSerializer(Class
  nameWithType: SerializerProvider._findExplicitUntypedSerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider.handlePrimaryContextualization(JsonSerializer
  nameWithType: SerializerProvider.handlePrimaryContextualization(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,java.lang.String)
  name: ?>,String)
  nameWithType: ?>,String)
  fullName: ?>,java.lang.String)
- uid: T>reportBadDefinition(java.lang.Class
  name: T>reportBadDefinition(Class
  nameWithType: T>reportBadDefinition(Class
  fullName: T>reportBadDefinition(java.lang.Class
- uid: com.fasterxml.jackson.databind.DatabindContext.
  name: DatabindContext.
  nameWithType: DatabindContext.
  fullName: com.fasterxml.jackson.databind.DatabindContext.
- uid: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class
  name: SerializerProvider._createAndCacheUntypedSerializer(Class
  nameWithType: SerializerProvider._createAndCacheUntypedSerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class
  name: SerializerProvider.getDefaultPropertyInclusion(Class
  nameWithType: SerializerProvider.getDefaultPropertyInclusion(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class
  name: SerializerProvider.findValueSerializer(Class
  nameWithType: SerializerProvider.findValueSerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class
- uid: T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: T>_throwNotASubtype(JavaType,String)
  nameWithType: T>_throwNotASubtype(JavaType,String)
  fullName: T>_throwNotASubtype(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: T>_throwSubtypeClassNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: T>_throwSubtypeClassNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class
  name: SerializerProvider.constructSpecializedType(JavaType,Class
  nameWithType: SerializerProvider.constructSpecializedType(JavaType,Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.constructSpecializedType(com.fasterxml.jackson.databind.JavaType,java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class
  name: SerializerProvider.findContentValueSerializer(Class
  nameWithType: SerializerProvider.findContentValueSerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findContentValueSerializer(java.lang.Class
- uid: T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
  name: T>reportBadTypeDefinition(BeanDescription,String,Object)
  nameWithType: T>reportBadTypeDefinition(BeanDescription,String,Object)
  fullName: T>reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription,java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.
  name: SerializerProvider.
  nameWithType: SerializerProvider.
  fullName: com.fasterxml.jackson.databind.SerializerProvider.
- uid: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
  name: T>reportBadDefinition(JavaType,String,Throwable)
  nameWithType: T>reportBadDefinition(JavaType,String,Throwable)
  fullName: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String,java.lang.Throwable)
- uid: T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
  name: T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  nameWithType: T>_throwSubtypeNameNotAllowed(JavaType,String,PolymorphicTypeValidator)
  fullName: T>_throwSubtypeNameNotAllowed(com.fasterxml.jackson.databind.JavaType,java.lang.String,com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator)
- uid: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
  name: T>reportBadDefinition(JavaType,String)
  nameWithType: T>reportBadDefinition(JavaType,String)
  fullName: T>reportBadDefinition(com.fasterxml.jackson.databind.JavaType,java.lang.String)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator
  name: SerializerProvider.findObjectId(Object,ObjectIdGenerator
  nameWithType: SerializerProvider.findObjectId(Object,ObjectIdGenerator
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object,com.fasterxml.jackson.annotation.ObjectIdGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class
  name: SerializerProvider.findKeySerializer(Class
  nameWithType: SerializerProvider.findKeySerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class
- uid: ?>,java.lang.String,java.lang.Throwable)
  name: ?>,String,Throwable)
  nameWithType: ?>,String,Throwable)
  fullName: ?>,java.lang.String,java.lang.Throwable)
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider._handleResolvable(JsonSerializer
  nameWithType: SerializerProvider._handleResolvable(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer
- uid: T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
  name: T>reportBadPropertyDefinition(BeanDescription,BeanPropertyDefinition,String,Object)
  nameWithType: T>reportBadPropertyDefinition(BeanDescription,BeanPropertyDefinition,String,Object)
  fullName: T>reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider.setNullValueSerializer(JsonSerializer
  nameWithType: SerializerProvider.setNullValueSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider.isUnknownTypeSerializer(JsonSerializer
  nameWithType: SerializerProvider.isUnknownTypeSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer
  name: SerializerProvider._handleContextualResolvable(JsonSerializer
  nameWithType: SerializerProvider._handleContextualResolvable(JsonSerializer
  fullName: com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
  name: ?>,boolean,BeanProperty)
  nameWithType: ?>,boolean,BeanProperty)
  fullName: ?>,boolean,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class
  name: SerializerProvider.findTypedValueSerializer(Class
  nameWithType: SerializerProvider.findTypedValueSerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class
  name: SerializerProvider.findPrimaryPropertySerializer(Class
  nameWithType: SerializerProvider.findPrimaryPropertySerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class
  name: SerializerProvider.getUnknownTypeSerializer(Class
  nameWithType: SerializerProvider.getUnknownTypeSerializer(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class
  name: SerializerProvider.includeFilterInstance(BeanPropertyDefinition,Class
  nameWithType: SerializerProvider.includeFilterInstance(BeanPropertyDefinition,Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition,java.lang.Class
- uid: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class
  name: SerializerProvider.getDefaultPropertyFormat(Class
  nameWithType: SerializerProvider.getDefaultPropertyFormat(Class
  fullName: com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class
