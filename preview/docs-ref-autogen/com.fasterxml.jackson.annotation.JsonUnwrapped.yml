### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped
  id: JsonUnwrapped
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonUnwrapped.enabled()
  - com.fasterxml.jackson.annotation.JsonUnwrapped.prefix()
  - com.fasterxml.jackson.annotation.JsonUnwrapped.suffix()
  langs:
  - java
  name: JsonUnwrapped
  nameWithType: JsonUnwrapped
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Annotation used to indicate that a property should be serialized "unwrapped"; that is, if it would be serialized as JSON Object, its properties are instead included as properties of its containing Object. For example, consider case of POJO like:


    ```java

    public class Parent {
        public int age;
        public Name name;
      }
      public class Name {
        public String first, last;
      }
    ```


    which would normally be serialized as follows (assuming @JsonUnwrapped had no effect):


    ```java

    {
        "age" : 18,
        "name" : {
          "first" : "Joey",
          "last" : "Sixpack"
        }
      }
    ```


    can be changed to this:


    ```java

    {
        "age" : 18,
        "first" : "Joey",
        "last" : "Sixpack"
      }
    ```


    by changing Parent class to:


    ```java

    public class Parent {
        public int age;
        @JsonUnwrapped
        public Name name;
      }
    ```


    Annotation can only be added to properties, and not classes, as it is contextual.


    Also note that annotation only applies if

     *  Value is serialized as JSON Object (can not unwrap JSON arrays using this mechanism)
     *  Serialization is done using `BeanSerializer`, not a custom serializer
     *  No type information is added; if type information needs to be added, structure can not be altered regardless of inclusion strategy; so annotation is basically ignored.
  syntax:
    content: public interface JsonUnwrapped implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped.enabled()
  id: enabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonUnwrapped
  langs:
  - java
  name: enabled()
  nameWithType: JsonUnwrapped.enabled()
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped.enabled()
  overload: com.fasterxml.jackson.annotation.JsonUnwrapped.enabled*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Property that is usually only used when overriding (masking) annotations, using mix-in annotations. Otherwise default value of 'true' is fine, and value need not be explicitly included.
  syntax:
    content: public abstract boolean enabled()
    return:
      type: boolean
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped.prefix()
  id: prefix()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonUnwrapped
  langs:
  - java
  name: prefix()
  nameWithType: JsonUnwrapped.prefix()
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped.prefix()
  overload: com.fasterxml.jackson.annotation.JsonUnwrapped.prefix*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: 'Optional property that can be used to add prefix String to use in front of names of properties that are unwrapped: this can be done for example to prevent name collisions.'
  syntax:
    content: public abstract String prefix()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped.suffix()
  id: suffix()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonUnwrapped
  langs:
  - java
  name: suffix()
  nameWithType: JsonUnwrapped.suffix()
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped.suffix()
  overload: com.fasterxml.jackson.annotation.JsonUnwrapped.suffix*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: 'Optional property that can be used to add suffix String to append at the end of names of properties that are unwrapped: this can be done for example to prevent name collisions.'
  syntax:
    content: public abstract String suffix()
    return:
      type: java.lang.String
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped.enabled*
  name: enabled
  nameWithType: JsonUnwrapped.enabled
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped.enabled
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped.prefix*
  name: prefix
  nameWithType: JsonUnwrapped.prefix
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped.prefix
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonUnwrapped.suffix*
  name: suffix
  nameWithType: JsonUnwrapped.suffix
  fullName: com.fasterxml.jackson.annotation.JsonUnwrapped.suffix
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
