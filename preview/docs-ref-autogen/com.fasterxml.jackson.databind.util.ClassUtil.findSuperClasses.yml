### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses*"
fullName: "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses"
name: "findSuperClasses"
nameWithType: "ClassUtil.findSuperClasses"
members:
- uid: "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses(java.lang.Class<?>,java.lang.Class<?>,boolean)"
  fullName: "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses(Class<?> cls, Class<?> endBefore, boolean addClassItself)"
  name: "findSuperClasses(Class<?> cls, Class<?> endBefore, boolean addClassItself)"
  nameWithType: "ClassUtil.findSuperClasses(Class<?> cls, Class<?> endBefore, boolean addClassItself)"
  summary: "Method for finding all super classes (but not super interfaces) of given class, starting with the immediate super class and ending in the most distant one. Class itself is included if `addClassItself` is true.\n\nNOTE: mostly/only called to resolve mix-ins as that's where we do not care about fully-resolved types, just associated annotations."
  parameters:
  - name: "cls"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "endBefore"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "addClassItself"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static List<Class<?>> findSuperClasses(Class<?> cls, Class<?> endBefore, boolean addClassItself)"
  returns:
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;&gt;"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
