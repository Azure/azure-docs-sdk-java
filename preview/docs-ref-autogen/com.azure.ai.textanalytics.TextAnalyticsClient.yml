### YamlMime:ManagedReference
items:
- uid: com.azure.ai.textanalytics.TextAnalyticsClient
  id: TextAnalyticsClient
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics
  children:
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint()
  - com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage()
  - com.azure.ai.textanalytics.TextAnalyticsClient.getServiceVersion()
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  - com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  langs:
  - java
  name: TextAnalyticsClient
  nameWithType: TextAnalyticsClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient
  type: Class
  package: com.azure.ai.textanalytics
  summary: >-
    This class provides a synchronous client that contains all the operations that apply to Azure Text Analytics. Operations allowed by the client are language detection, entities recognition, linked entities recognition, key phrases extraction, and sentiment analysis of a document or a list of documents.


    **Instantiating a synchronous Text Analytics Client**


    ```java

    TextAnalyticsClient textAnalyticsClient = new TextAnalyticsClientBuilder()
         .apiKey(new AzureKeyCredential("{api_key}"))
         .endpoint("{endpoint}")
         .buildClient();
    ```


    View <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder" data-throw-if-not-resolved="false">this</xref> for additional ways to construct the client.
  syntax:
    content: public final class TextAnalyticsClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient(com.azure.ai.textanalytics.TextAnalyticsAsyncClient)
  id: TextAnalyticsClient(com.azure.ai.textanalytics.TextAnalyticsAsyncClient)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: TextAnalyticsClient(TextAnalyticsAsyncClient client)
  nameWithType: TextAnalyticsClient.TextAnalyticsClient(TextAnalyticsAsyncClient client)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient(TextAnalyticsAsyncClient client)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient*
  type: Constructor
  package: com.azure.ai.textanalytics
  summary: Create a `TextAnalyticsClient client` that sends requests to the Text Analytics service's endpoint. Each service call goes through the <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.pipeline*" data-throw-if-not-resolved="false">http pipeline</xref>.
  syntax:
    content: " TextAnalyticsClient(TextAnalyticsAsyncClient client)"
    parameters:
    - id: client
      type: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
      description: The <xref uid="com.azure.ai.textanalytics.TextAnalyticsClient" data-throw-if-not-resolved="false">TextAnalyticsClient</xref> that the client routes its request through.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String)
  id: analyzeSentiment(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentiment(String document)
  nameWithType: TextAnalyticsClient.analyzeSentiment(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within i This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nAnalyze the sentiments of documents\n\n```java\nfinal DocumentSentiment documentSentiment =\n     textAnalyticsClient.analyzeSentiment(\"The hotel was dark and unclean.\");\n \n System.out.printf(\"Recognized sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n     documentSentiment.getSentiment(),\n     documentSentiment.getConfidenceScores().getPositive(),\n     documentSentiment.getConfidenceScores().getNeutral(),\n     documentSentiment.getConfidenceScores().getNegative());\n \n for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n     System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative());\n }\n```"
  syntax:
    content: public DocumentSentiment analyzeSentiment(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.DocumentSentiment
      description: A <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(java.lang.String,java.lang.String)
  id: analyzeSentiment(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentiment(String document, String language)
  nameWithType: TextAnalyticsClient.analyzeSentiment(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within i\n\n**Code Sample**\n\nAnalyze the sentiments in a document with a provided language representation.\n\n```java\nfinal DocumentSentiment documentSentiment = textAnalyticsClient.analyzeSentiment(\n     \"The hotel was dark and unclean.\", \"en\");\n \n System.out.printf(\n     \"Recognized sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n     documentSentiment.getSentiment(),\n     documentSentiment.getConfidenceScores().getPositive(),\n     documentSentiment.getConfidenceScores().getNeutral(),\n     documentSentiment.getConfidenceScores().getNegative());\n \n for (SentenceSentiment sentenceSentiment : documentSentiment.getSentences()) {\n     System.out.printf(\n         \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f, negative score: %.2f.%n\",\n         sentenceSentiment.getSentiment(),\n         sentenceSentiment.getConfidenceScores().getPositive(),\n         sentenceSentiment.getConfidenceScores().getNeutral(),\n         sentenceSentiment.getConfidenceScores().getNegative());\n }\n```"
  syntax:
    content: public DocumentSentiment analyzeSentiment(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.models.DocumentSentiment
      description: A <xref uid="com.azure.ai.textanalytics.models.DocumentSentiment" data-throw-if-not-resolved="false">analyzed document sentiment</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n**Code Sample**\n\nAnalyze the sentiments with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">documents</xref> with request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\", \"en\"),\n     new TextDocumentInput(\"2\", \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\", \"en\")\n );\n \n // Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE).iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         // Analyzed sentiment for each of documents from a batch of documents\n         response.getElements().forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             // Valid document\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\n                 \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n                     + \"negative score: %.2f.%n\",\n                 documentSentiment.getSentiment(),\n                 documentSentiment.getConfidenceScores().getPositive(),\n                 documentSentiment.getConfidenceScores().getNeutral(),\n                 documentSentiment.getConfidenceScores().getNegative());\n             documentSentiment.getSentences().forEach(sentenceSentiment -> {\n                 System.out.printf(\n                     \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                         + \" negative score: %.2f.%n\",\n                     sentenceSentiment.getSentiment(),\n                     sentenceSentiment.getConfidenceScores().getPositive(),\n                     sentenceSentiment.getConfidenceScores().getNeutral(),\n                     sentenceSentiment.getConfidenceScores().getNegative());\n             });\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nAnalyze the sentiments in a list of documents.\n\n```java\nfinal List<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\",\n     \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\"\n );\n \n // Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch(documents).iterableByPage().forEach(response -> {\n     // Batch statistics\n     final TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\n         \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     // Analyzed sentiment for each of documents from a batch of documents\n     response.getElements().forEach(analyzeSentimentResult -> {\n         System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n         // Valid document\n         final DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n         System.out.printf(\n             \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f, \"\n                 + \"negative score: %.2f.%n\",\n             documentSentiment.getSentiment(),\n             documentSentiment.getConfidenceScores().getPositive(),\n             documentSentiment.getConfidenceScores().getNeutral(),\n             documentSentiment.getConfidenceScores().getNegative());\n         documentSentiment.getSentences().forEach(sentenceSentiment -> System.out.printf(\n             \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                 + \" negative score: %.2f.%n\",\n             sentenceSentiment.getSentiment(),\n             sentenceSentiment.getConfidenceScores().getPositive(),\n             sentenceSentiment.getConfidenceScores().getNeutral(),\n             sentenceSentiment.getConfidenceScores().getNegative()));\n     });\n });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n**Code Sample**\n\nAnalyze the sentiments in a list of documents with a provided language code.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\",\n     \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\"\n );\n \n // Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch(documents, \"en\").iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         // Analyzed sentiment for each of documents from a batch of documents\n         response.getElements().forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             // Valid document\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\n                 \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                     + \" negative score: %.2f.%n\",\n                 documentSentiment.getSentiment(),\n                 documentSentiment.getConfidenceScores().getPositive(),\n                 documentSentiment.getConfidenceScores().getNeutral(),\n                 documentSentiment.getConfidenceScores().getNegative());\n             documentSentiment.getSentences().forEach(sentenceSentiment -> System.out.printf(\n                 \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                     + \" negative score: %.2f.%n\",\n                 sentenceSentiment.getSentiment(),\n                 sentenceSentiment.getConfidenceScores().getPositive(),\n                 sentenceSentiment.getConfidenceScores().getNeutral(),\n                 sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default..
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n**Code Sample**\n\nAnalyze the sentiments in a list of documents with a provided language representation and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"The hotel was dark and unclean. The restaurant had amazing gnocchi.\",\n     \"The restaurant had amazing gnocchi. The hotel was dark and unclean.\"\n );\n \n // Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch(documents, \"en\", null).iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         // Analyzed sentiment for each of documents from a batch of documents\n         response.getElements().forEach(analyzeSentimentResult -> {\n             System.out.printf(\"Document ID: %s%n\", analyzeSentimentResult.getId());\n             // Valid document\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment();\n             System.out.printf(\n                 \"Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                     + \" negative score: %.2f.%n\",\n                 documentSentiment.getSentiment(),\n                 documentSentiment.getConfidenceScores().getPositive(),\n                 documentSentiment.getConfidenceScores().getNeutral(),\n                 documentSentiment.getConfidenceScores().getNegative());\n             documentSentiment.getSentences().forEach(sentenceSentiment -> System.out.printf(\n                 \"Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,\"\n                     + \" negative score: %.2f.%n\",\n                 sentenceSentiment.getSentiment(),\n                 sentenceSentiment.getConfidenceScores().getPositive(),\n                 sentenceSentiment.getConfidenceScores().getNeutral(),\n                 sentenceSentiment.getConfidenceScores().getNegative()));\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String)
  id: detectLanguage(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguage(String document)
  nameWithType: TextAnalyticsClient.detectLanguage(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true. This method will use the default country hint that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultCountryHint(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultCountryHint(String)</xref>. If none is specified, service will use 'US' as the country hint.


    **Code Sample**


    Detects the language of single document.


    ```java

    DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage("Bonjour tout le monde");
     System.out.printf("Detected language name: %s, ISO 6391 name: %s, score: %f.%n",
         detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());
    ```
  syntax:
    content: public DetectedLanguage detectLanguage(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.models.DetectedLanguage
      description: The <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(java.lang.String,java.lang.String)
  id: detectLanguage(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguage(String document, String countryHint)
  nameWithType: TextAnalyticsClient.detectLanguage(String document, String countryHint)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage(String document, String countryHint)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns the detected language and a confidence score between zero and one. Scores close to one indicate 100% certainty that the identified language is true.


    **Code Sample**


    Detects the language of documents with a provided country hint.


    ```java

    DetectedLanguage detectedLanguage = textAnalyticsClient.detectLanguage(
         "This text is in English", "US");
     System.out.printf("Detected language name: %s, ISO 6391 name: %s, score: %f.%n",
         detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());
    ```
  syntax:
    content: public DetectedLanguage detectLanguage(String document, String countryHint)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    return:
      type: com.azure.ai.textanalytics.models.DetectedLanguage
      description: The <xref uid="com.azure.ai.textanalytics.models.DetectedLanguage" data-throw-if-not-resolved="false">detected language</xref> of the document.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: detectLanguageBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Detects Language for a batch of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code Sample**\n\nDetects the languages with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.DetectLanguageInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n```java\nList<DetectLanguageInput> detectLanguageInputs = Arrays.asList(\n     new DetectLanguageInput(\"1\", \"This is written in English.\", \"US\"),\n     new DetectLanguageInput(\"2\", \"Este es un documento  escrito en Espa�ol.\", \"es\")\n );\n \n textAnalyticsClient.detectLanguageBatch(detectLanguageInputs,\n     new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE).iterableByPage().forEach(\n         response -> {\n             // Batch statistics\n             TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n             System.out.printf(\n                 \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n             // Batch result of languages\n             response.getElements().forEach(detectLanguageResult -> {\n                 System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n                 DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n                 System.out.printf(\"Primary language name: %s, ISO 6391 name: %s, score: %f.%n\",\n                     detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n             });\n         });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<DetectLanguageResult> detectLanguageBatch(Iterable<DetectLanguageInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
      description: >-
        The list of <xref uid="com.azure.ai.textanalytics.models.DetectLanguageInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Detects Language for a batch of documents. This method will use the default country hint that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultCountryHint(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultCountryHint(String)</xref>. If none is specified, service will use 'US' as the country hint.\n\n**Code Sample**\n\nDetects the languages in a list of documents.\n\n```java\nList<String> documents = Arrays.asList(\n     \"This is written in English\",\n     \"Este es un documento  escrito en Espa�ol.\");\n \n textAnalyticsClient.detectLanguageBatch(documents).iterableByPage().forEach(response -> {\n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     response.getElements().forEach(detectLanguageResult -> {\n         DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n         System.out.printf(\"Primary language name: %s, ISO 6391 name: %s, score: %f.%n\",\n             detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n     });\n });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents, String countryHint)
  nameWithType: TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents, String countryHint)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents, String countryHint)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Detects Language for a batch of document with provided country hint.\n\n**Code Sample**\n\nDetects the language in a list of documents with a provided country hint.\n\n```java\nList<String> documents = Arrays.asList(\n     \"This is written in English\",\n     \"Este es un documento  escrito en Espa�ol.\"\n );\n \n textAnalyticsClient.detectLanguageBatch(documents, \"US\").iterableByPage().forEach(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch result of languages\n         response.getElements().forEach(detectLanguageResult -> {\n             System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n             DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n             System.out.printf(\"Primary language name: %s, ISO 6391 name: %s, score: %f.%n\",\n                 detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents, String countryHint)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: detectLanguageBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Detects Language for a batch of document with the provided country hint and request options.\n\n**Code Sample**\n\nDetects the language in a list of documents with a provided country hint and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"This is written in English\",\n     \"Este es un documento  escrito en Espa�ol.\"\n );\n \n textAnalyticsClient.detectLanguageBatch(documents, \"US\", null).iterableByPage().forEach(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n         // Batch result of languages\n         response.getElements().forEach(detectLanguageResult -> {\n             System.out.printf(\"Document ID: %s%n\", detectLanguageResult.getId());\n             DetectedLanguage detectedLanguage = detectLanguageResult.getPrimaryLanguage();\n             System.out.printf(\"Primary language name: %s, ISO 6391 name: %s, score: %f.%n\",\n                 detectedLanguage.getName(), detectedLanguage.getIso6391Name(), detectedLanguage.getScore());\n         });\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<DetectLanguageResult> detectLanguageBatch(Iterable<String> documents, String countryHint, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        The list of documents to detect languages for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: countryHint
      type: java.lang.String
      description: >-
        Accepts two letter country codes specified by ISO 3166-1 alpha-2. Defaults to "US" if not
         specified. To remove this behavior you can reset this parameter by setting this value to empty string
         <code>countryHint</code> = "" or "none".
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.DetectLanguageResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.DetectLanguageResult" data-throw-if-not-resolved="false">detected language document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String)
  id: extractKeyPhrases(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrases(String document)
  nameWithType: TextAnalyticsClient.extractKeyPhrases(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code Sample**


    Extracts key phrases of documents


    ```java

    System.out.println("Extracted phrases:");
     for (String keyPhrase : textAnalyticsClient.extractKeyPhrases("My cat might need to see a veterinarian.")) {
         System.out.printf("%s.%n", keyPhrase);
     }
    ```
  syntax:
    content: public TextAnalyticsPagedIterable<String> extractKeyPhrases(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<java.lang.String>
      description: A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of extracted key phrases.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(java.lang.String,java.lang.String)
  id: extractKeyPhrases(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrases(String document, String language)
  nameWithType: TextAnalyticsClient.extractKeyPhrases(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of strings denoting the key phrases in the document. See [this][] for the list of enabled languages.


    **Code Sample**


    Extracts key phrases in a document with a provided language representation.


    ```java

    System.out.println("Extracted phrases:");
     textAnalyticsClient.extractKeyPhrases("My cat might need to see a veterinarian.", "en")
         .forEach(kegPhrase -> System.out.printf("%s.%n", kegPhrase));
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedIterable<String> extractKeyPhrases(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<java.lang.String>
      description: A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of extracted key phrases.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: extractKeyPhrasesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the a batch of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with request options. See [this][] for the list of enabled languages.\n\n**Code Sample**\n\nExtracts key phrases with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">TextDocumentInput</xref> with request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"My cat might need to see a veterinarian.\", \"en\"),\n     new TextDocumentInput(\"2\", \"The pitot tube is used to measure airspeed.\", \"en\")\n );\n \n // Extracting batch key phrases\n textAnalyticsClient.extractKeyPhrasesBatch(textDocumentInputs,\n     new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE).iterableByPage().forEach(\n         response -> {\n             // Batch statistics\n             TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n             System.out.printf(\n                 \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n             // Extracted key phrase for each of documents from a batch of documents\n             response.getElements().forEach(extractKeyPhraseResult -> {\n                 System.out.printf(\"Document ID: %s%n\", extractKeyPhraseResult.getId());\n                 // Valid document\n                 System.out.println(\"Extracted phrases:\");\n                 extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase ->\n                     System.out.printf(\"%s.%n\", keyPhrase));\n             });\n         });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the document. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nExtracts key phrases in a list of documents.\n\n```java\nfinal List<String> documents = Arrays.asList(\n     \"My cat might need to see a veterinarian.\",\n     \"The pitot tube is used to measure airspeed.\"\n );\n \n // Extracting batch key phrases\n textAnalyticsClient.extractKeyPhrasesBatch(documents).iterableByPage().forEach(response -> {\n     // Batch statistics\n     final TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     // Extracted key phrase for each of documents from a batch of documents\n     response.getElements().forEach(extractKeyPhraseResult -> {\n         System.out.printf(\"Document ID: %s%n\", extractKeyPhraseResult.getId());\n         // Valid document\n         System.out.println(\"Extracted phrases:\");\n         extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n     });\n });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the documents with provided language code. See [this][] for the list of enabled languages.\n\n**Code Sample**\n\nExtracts key phrases in a list of documents with a provided language code.\n\n```java\nList<String> documents = Arrays.asList(\n     \"My cat might need to see a veterinarian.\",\n     \"The pitot tube is used to measure airspeed.\"\n );\n \n // Extracting batch key phrases\n textAnalyticsClient.extractKeyPhrasesBatch(documents, \"en\").iterableByPage().forEach(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\n             \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         // Extracted key phrase for each of documents from a batch of documents\n         response.getElements().forEach(extractKeyPhraseResult -> {\n             System.out.printf(\"Document ID: %s%n\", extractKeyPhraseResult.getId());\n             // Valid document\n             System.out.println(\"Extracted phrases:\");\n             extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n         });\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: extractKeyPhrasesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of strings denoting the key phrases in the documents with provided language code and request options. See [this][] for the list of enabled languages.\n\n**Code Sample**\n\nExtracts key phrases in a list of documents with a provided language code and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"My cat might need to see a veterinarian.\",\n     \"The pitot tube is used to measure airspeed.\"\n );\n \n // Extracting batch key phrases\n textAnalyticsClient.extractKeyPhrasesBatch(documents, \"en\", null).iterableByPage().forEach(\n     response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\n             \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         // Extracted key phrase for each of documents from a batch of documents\n         response.getElements().forEach(extractKeyPhraseResult -> {\n             System.out.printf(\"Document ID: %s%n\", extractKeyPhraseResult.getId());\n             // Valid document\n             System.out.println(\"Extracted phrases:\");\n             extractKeyPhraseResult.getKeyPhrases().forEach(keyPhrase -> System.out.printf(\"%s.%n\", keyPhrase));\n         });\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<ExtractKeyPhraseResult> extractKeyPhrasesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to be analyzed.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.ExtractKeyPhraseResult" data-throw-if-not-resolved="false">extracted key phrases document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint()
  id: getDefaultCountryHint()
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: getDefaultCountryHint()
  nameWithType: TextAnalyticsClient.getDefaultCountryHint()
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint()
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default country hint code.
  syntax:
    content: public String getDefaultCountryHint()
    return:
      type: java.lang.String
      description: The default country hint code
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage()
  id: getDefaultLanguage()
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: getDefaultLanguage()
  nameWithType: TextAnalyticsClient.getDefaultLanguage()
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage()
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Get default language when the builder is setup.
  syntax:
    content: public String getDefaultLanguage()
    return:
      type: java.lang.String
      description: The default language
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: TextAnalyticsClient.getServiceVersion()
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getServiceVersion()
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.getServiceVersion*
  type: Method
  package: com.azure.ai.textanalytics
  summary: Gets the service version the client is using.
  syntax:
    content: public TextAnalyticsServiceVersion getServiceVersion()
    return:
      type: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
      description: The service version the client is using.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String)
  id: recognizeEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntities(String document)
  nameWithType: TextAnalyticsClient.recognizeEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of general categorized entities in the provided document. For a list of supported entity types, check: [this][] This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code Sample**


    Recognize the entities of documents


    ```java

    final TextAnalyticsPagedIterable<CategorizedEntity> recognizeEntitiesResult =
         textAnalyticsClient.recognizeEntities("Satya Nadella is the CEO of Microsoft");
     for (CategorizedEntity entity : recognizeEntitiesResult) {
         System.out.printf("Recognized entity: %s, entity category: %s, score: %f.%n",
             entity.getText(), entity.getCategory(), entity.getConfidenceScore());
     }
    ```



    [this]: https://aka.ms/taner
  syntax:
    content: public TextAnalyticsPagedIterable<CategorizedEntity> recognizeEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        the document to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.CategorizedEntity>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.CategorizedEntity" data-throw-if-not-resolved="false">recognized categorized entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(java.lang.String,java.lang.String)
  id: recognizeEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntities(String document, String language)
  nameWithType: TextAnalyticsClient.recognizeEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities in the provided document with provided language code. For a list of supported entity types, check: [this][] For a list of enabled languages, check: [this][this 1]\n\n**Code Sample**\n\nRecognizes the entities in a document with a provided language code.\n\n```java\nfinal TextAnalyticsPagedIterable<CategorizedEntity> recognizeEntitiesResult =\n     textAnalyticsClient.recognizeEntities(\"Satya Nadella is the CEO of Microsoft\", \"en\");\n \n for (CategorizedEntity entity : recognizeEntitiesResult) {\n     System.out.printf(\"Recognized entity: %s, entity category: %s, score: %f.%n\",\n         entity.getText(), entity.getCategory(), entity.getConfidenceScore());\n }\n```\n\n\n[this]: https://aka.ms/taner\n[this 1]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<CategorizedEntity> recognizeEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.CategorizedEntity>
      description: >-
        The <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.CategorizedEntity" data-throw-if-not-resolved="false">recognized categorized entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: recognizeEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n**Code Sample**\n\nRecognizes the entities with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> with provided request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"0\", \"I had a wonderful trip to Seattle last week.\"),\n     new TextDocumentInput(\"1\", \"I work at Microsoft.\")\n );\n \n textAnalyticsClient.recognizeEntitiesBatch(textDocumentInputs,\n         new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE).iterableByPage().forEach(\n             response -> {\n                 // Batch statistics\n                 TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n                 System.out.printf(\n                     \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n                     batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n                 response.getElements().forEach(recognizeEntitiesResult ->\n                     recognizeEntitiesResult.getEntities().forEach(entity -> {\n                         System.out.printf(\"Recognized entity: %s, entity category: %s, score: %f.%n\",\n                             entity.getText(), entity.getCategory(), entity.getConfidenceScore());\n                     }));\n             });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        The <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nRecognizes the entities in a list of documents.\n\n```java\nfinal List<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\",\n     \"I work at Microsoft.\");\n \n textAnalyticsClient.recognizeEntitiesBatch(documents).iterableByPage().forEach(response -> {\n     // Batch statistics\n     final TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     response.getElements().forEach(recognizeEntitiesResult ->\n         recognizeEntitiesResult.getEntities().forEach(entity ->\n             System.out.printf(\"Recognized entity: %s, entity category: %s, score: %f.%n\",\n                 entity.getText(), entity.getCategory(), entity.getConfidenceScore())));\n });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        The <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents with provided language code.\n\n**Code Sample**\n\nRecognizes the entities in a list of documents with a provided language code.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\",\n     \"I work at Microsoft.\");\n \n textAnalyticsClient.recognizeEntitiesBatch(documents, \"en\").iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\n             \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> {\n                 System.out.printf(\"Recognized entity: %s, entity category: %s, score: %f.%n\",\n                     entity.getText(), entity.getCategory(), entity.getConfidenceScore());\n             }));\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        The <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of general categorized entities for the provided list of documents with provided language code and request options.\n\n**Code Sample**\n\nRecognizes the entities in a list of documents with a provided language code and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"I had a wonderful trip to Seattle last week.\",\n     \"I work at Microsoft.\");\n \n textAnalyticsClient.recognizeEntitiesBatch(documents, \"en\", null).iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\n             \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(recognizeEntitiesResult ->\n             recognizeEntitiesResult.getEntities().forEach(entity -> {\n                 System.out.printf(\"Recognized entity: %s, entity category: %s, score: %f.%n\",\n                     entity.getText(), entity.getCategory(), entity.getConfidenceScore());\n             }));\n     });\n```"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeCategorizedEntitiesResult> recognizeEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: The 2 letter ISO 639-1 representation of language. If not set, uses "en" for English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
      description: >-
        The <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult" data-throw-if-not-resolved="false">recognized categorized entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String)
  id: recognizeLinkedEntities(java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntities(String document)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntities(String document)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(String document)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document. See [this][] for supported languages in Text Analytics API. This method will use the default language that sets up in <xref uid="com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)" data-throw-if-not-resolved="false">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.


    **Code Sample**


    Recognize the linked entities of documents


    ```java

    final String document = "Old Faithful is a geyser at Yellowstone Park.";
     System.out.println("Linked Entities:");
     textAnalyticsClient.recognizeLinkedEntities(document).forEach(linkedEntity -> {
         System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
             linkedEntity.getDataSource());
         linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(
             "Matched entity: %s, score: %f.%n", entityMatch.getText(), entityMatch.getConfidenceScore()));
     });
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedIterable<LinkedEntity> recognizeLinkedEntities(String document)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        the document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.LinkedEntity>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(java.lang.String,java.lang.String)
  id: recognizeLinkedEntities(java.lang.String,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntities(String document, String language)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntities(String document, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities(String document, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities*
  type: Method
  package: com.azure.ai.textanalytics
  summary: >-
    Returns a list of recognized entities with links to a well-known knowledge base for the provided document with language code. See [this][] for supported languages in Text Analytics API.


    **Code Sample**


    Recognizes the linked entities in a document with a provided language code.


    ```java

    String document = "Old Faithful is a geyser at Yellowstone Park.";
     textAnalyticsClient.recognizeLinkedEntities(document, "en").forEach(linkedEntity -> {
         System.out.printf("Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n",
             linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),
             linkedEntity.getDataSource());
         linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(
             "Matched entity: %s, score: %f.%n", entityMatch.getText(), entityMatch.getConfidenceScore()));
     });
    ```



    [this]: https://aka.ms/talangs
  syntax:
    content: public TextAnalyticsPagedIterable<LinkedEntity> recognizeLinkedEntities(String document, String language)
    parameters:
    - id: document
      type: java.lang.String
      description: >-
        The document to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the document. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.LinkedEntity>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">document</xref> and request options. See [this][] for supported languages in Text Analytics API.\n\n**Code Sample**\n\nRecognizes the linked entities with http response in a list of <xref uid=\"com.azure.ai.textanalytics.models.TextDocumentInput\" data-throw-if-not-resolved=\"false\">TextDocumentInput</xref> with request options.\n\n```java\nList<TextDocumentInput> textDocumentInputs = Arrays.asList(\n     new TextDocumentInput(\"1\", \"Old Faithful is a geyser at Yellowstone Park.\", \"en\"),\n     new TextDocumentInput(\"2\", \"Mount Shasta has lenticular clouds.\", \"en\")\n );\n \n textAnalyticsClient.recognizeLinkedEntitiesBatch(textDocumentInputs,\n     new TextAnalyticsRequestOptions().setIncludeStatistics(true), Context.NONE).iterableByPage().forEach(\n         response -> {\n             // Batch statistics\n             TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n             System.out.printf(\n                 \"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n                 batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n             response.getElements().forEach(recognizeLinkedEntitiesResult ->\n                 recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                     System.out.println(\"Linked Entities:\");\n                     System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                         linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                         linkedEntity.getDataSource());\n                     linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                         \"Matched entity: %s, score: %.2f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n                 }));\n         });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
    parameters:
    - id: documents
      type: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
      description: >-
        A list of <xref uid="com.azure.ai.textanalytics.models.TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    - id: context
      type: com.azure.core.util.Context
      description: Additional context that is passed through the Http pipeline during the service call.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> of the
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents. See [this][] for supported languages in Text Analytics API. This method will use the default language that sets up in <xref uid=\"com.azure.ai.textanalytics.TextAnalyticsClientBuilder.defaultLanguage(java.lang.String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as the language.\n\n**Code Sample**\n\nRecognizes the linked entities in a list of documents.\n\n```java\nfinal List<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\");\n \n textAnalyticsClient.recognizeLinkedEntitiesBatch(documents).iterableByPage().forEach(response -> {\n     // Batch statistics\n     TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n     System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n         batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n     response.getElements().forEach(recognizeLinkedEntitiesResult ->\n         recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n             System.out.println(\"Linked Entities:\");\n             System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                 linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                 linkedEntity.getDataSource());\n             linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                 \"Matched entity: %s, score: %f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n         }));\n });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<String> documents)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> of the
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents with provided language code. See [this][] for supported languages in Text Analytics API.\n\n**Code Sample**\n\nRecognizes the linked entities in a list of documents with a provided language code.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n textAnalyticsClient.recognizeLinkedEntitiesBatch(documents, \"en\").iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, score: %f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<String> documents, String language)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> of the
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  id: recognizeLinkedEntitiesBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
  parent: com.azure.ai.textanalytics.TextAnalyticsClient
  langs:
  - java
  name: recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  overload: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  type: Method
  package: com.azure.ai.textanalytics
  summary: "Returns a list of recognized entities with links to a well-known knowledge base for the list of documents with provided language code and request options. See [this][] for supported languages in Text Analytics API.\n\n**Code Sample**\n\nRecognizes the linked entities in a list of documents with a provided language code and request options.\n\n```java\nList<String> documents = Arrays.asList(\n     \"Old Faithful is a geyser at Yellowstone Park.\",\n     \"Mount Shasta has lenticular clouds.\"\n );\n \n textAnalyticsClient.recognizeLinkedEntitiesBatch(documents, \"en\", null).iterableByPage()\n     .forEach(response -> {\n         // Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics();\n         System.out.printf(\"A batch of documents statistics, transaction count: %s, valid document count: %s.%n\",\n             batchStatistics.getTransactionCount(), batchStatistics.getValidDocumentCount());\n \n         response.getElements().forEach(recognizeLinkedEntitiesResult ->\n             recognizeLinkedEntitiesResult.getEntities().forEach(linkedEntity -> {\n                 System.out.println(\"Linked Entities:\");\n                 System.out.printf(\"Name: %s, entity ID in data source: %s, URL: %s, data source: %s.%n\",\n                     linkedEntity.getName(), linkedEntity.getDataSourceEntityId(), linkedEntity.getUrl(),\n                     linkedEntity.getDataSource());\n                 linkedEntity.getLinkedEntityMatches().forEach(entityMatch -> System.out.printf(\n                     \"Matched entity: %s, score: %f.%n\", entityMatch.getText(), entityMatch.getConfidenceScore()));\n             }));\n     });\n```\n\n\n[this]: https://aka.ms/talangs"
  syntax:
    content: public TextAnalyticsPagedIterable<RecognizeLinkedEntitiesResult> recognizeLinkedEntitiesBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
    parameters:
    - id: documents
      type: java.lang.Iterable<java.lang.String>
      description: >-
        A list of documents to recognize linked entities for.
         For text length limits, maximum batch size, and supported text encoding, see
         <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    - id: language
      type: java.lang.String
      description: >-
        The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
         English as default.
    - id: options
      type: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
      description: >-
        The <xref uid="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
         and show statistics.
    return:
      type: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
      description: >-
        A <xref uid="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> of the
         <xref uid="com.azure.ai.textanalytics.models.LinkedEntity" data-throw-if-not-resolved="false">recognized linked entities document result</xref>.
references:
- uid: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
  name: TextAnalyticsAsyncClient
  nameWithType: TextAnalyticsAsyncClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsAsyncClient
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient*
  name: TextAnalyticsClient
  nameWithType: TextAnalyticsClient.TextAnalyticsClient
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.TextAnalyticsClient
  package: com.azure.ai.textanalytics
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint*
  name: getDefaultCountryHint
  nameWithType: TextAnalyticsClient.getDefaultCountryHint
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultCountryHint
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage*
  name: getDefaultLanguage
  nameWithType: TextAnalyticsClient.getDefaultLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getDefaultLanguage
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
  name: TextAnalyticsServiceVersion
  nameWithType: TextAnalyticsServiceVersion
  fullName: com.azure.ai.textanalytics.TextAnalyticsServiceVersion
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: TextAnalyticsClient.getServiceVersion
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.getServiceVersion
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.DetectedLanguage
  name: DetectedLanguage
  nameWithType: DetectedLanguage
  fullName: com.azure.ai.textanalytics.models.DetectedLanguage
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage*
  name: detectLanguage
  nameWithType: TextAnalyticsClient.detectLanguage
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguage
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<java.lang.String>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.DetectLanguageResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectLanguageResult
    name: DetectLanguageResult
    fullName: com.azure.ai.textanalytics.models.DetectLanguageResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch*
  name: detectLanguageBatch
  nameWithType: TextAnalyticsClient.detectLanguageBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.detectLanguageBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
  name: TextAnalyticsRequestOptions
  nameWithType: TextAnalyticsRequestOptions
  fullName: com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.DetectLanguageInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.DetectLanguageInput
    name: DetectLanguageInput
    fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
  - name: '>'
    fullName: '>'
- uid: com.azure.core.util.Context
  spec.java:
  - uid: com.azure.core.util.Context
    name: Context
    fullName: com.azure.core.util.Context
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.CategorizedEntity>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.CategorizedEntity
    name: CategorizedEntity
    fullName: com.azure.ai.textanalytics.models.CategorizedEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities*
  name: recognizeEntities
  nameWithType: TextAnalyticsClient.recognizeEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntities
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
    name: RecognizeCategorizedEntitiesResult
    fullName: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch*
  name: recognizeEntitiesBatch
  nameWithType: TextAnalyticsClient.recognizeEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.TextDocumentInput
    name: TextDocumentInput
    fullName: com.azure.ai.textanalytics.models.TextDocumentInput
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.LinkedEntity>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.LinkedEntity
    name: LinkedEntity
    fullName: com.azure.ai.textanalytics.models.LinkedEntity
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities*
  name: recognizeLinkedEntities
  nameWithType: TextAnalyticsClient.recognizeLinkedEntities
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntities
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
    name: RecognizeLinkedEntitiesResult
    fullName: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch*
  name: recognizeLinkedEntitiesBatch
  nameWithType: TextAnalyticsClient.recognizeLinkedEntitiesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.recognizeLinkedEntitiesBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<java.lang.String>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases*
  name: extractKeyPhrases
  nameWithType: TextAnalyticsClient.extractKeyPhrases
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrases
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.ExtractKeyPhraseResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
    name: ExtractKeyPhraseResult
    fullName: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch*
  name: extractKeyPhrasesBatch
  nameWithType: TextAnalyticsClient.extractKeyPhrasesBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.extractKeyPhrasesBatch
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.models.DocumentSentiment
  name: DocumentSentiment
  nameWithType: DocumentSentiment
  fullName: com.azure.ai.textanalytics.models.DocumentSentiment
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment*
  name: analyzeSentiment
  nameWithType: TextAnalyticsClient.analyzeSentiment
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentiment
  package: com.azure.ai.textanalytics
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable<com.azure.ai.textanalytics.models.AnalyzeSentimentResult>
  spec.java:
  - uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
    name: TextAnalyticsPagedIterable
    fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
    name: AnalyzeSentimentResult
    fullName: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
  - name: '>'
    fullName: '>'
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
  name: analyzeSentimentBatch
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch
  package: com.azure.ai.textanalytics
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: com.azure.ai.textanalytics.models.DetectLanguageResult
  name: DetectLanguageResult
  nameWithType: DetectLanguageResult
  fullName: com.azure.ai.textanalytics.models.DetectLanguageResult
- uid: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
  name: TextAnalyticsPagedIterable
  nameWithType: TextAnalyticsPagedIterable
  fullName: com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable
- uid: com.azure.ai.textanalytics.models.DetectLanguageInput
  name: DetectLanguageInput
  nameWithType: DetectLanguageInput
  fullName: com.azure.ai.textanalytics.models.DetectLanguageInput
- uid: com.azure.ai.textanalytics.models.CategorizedEntity
  name: CategorizedEntity
  nameWithType: CategorizedEntity
  fullName: com.azure.ai.textanalytics.models.CategorizedEntity
- uid: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
  name: RecognizeCategorizedEntitiesResult
  nameWithType: RecognizeCategorizedEntitiesResult
  fullName: com.azure.ai.textanalytics.models.RecognizeCategorizedEntitiesResult
- uid: com.azure.ai.textanalytics.models.TextDocumentInput
  name: TextDocumentInput
  nameWithType: TextDocumentInput
  fullName: com.azure.ai.textanalytics.models.TextDocumentInput
- uid: com.azure.ai.textanalytics.models.LinkedEntity
  name: LinkedEntity
  nameWithType: LinkedEntity
  fullName: com.azure.ai.textanalytics.models.LinkedEntity
- uid: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
  name: RecognizeLinkedEntitiesResult
  nameWithType: RecognizeLinkedEntitiesResult
  fullName: com.azure.ai.textanalytics.models.RecognizeLinkedEntitiesResult
- uid: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
  name: ExtractKeyPhraseResult
  nameWithType: ExtractKeyPhraseResult
  fullName: com.azure.ai.textanalytics.models.ExtractKeyPhraseResult
- uid: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
  name: AnalyzeSentimentResult
  nameWithType: AnalyzeSentimentResult
  fullName: com.azure.ai.textanalytics.models.AnalyzeSentimentResult
