### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  id: ListMultimap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap.asMap()
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap.get(K)
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap.removeAll(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  langs:
  - java
  name: ListMultimap<K,V>
  nameWithType: ListMultimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>
  type: Interface
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A `Multimap` that can hold duplicate key-value pairs and that maintains the insertion ordering of values for a given key. See the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> documentation for information common to all multimaps.


    The <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.get" data-throw-if-not-resolved="false">#get</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.removeAll" data-throw-if-not-resolved="false">#removeAll</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.replaceValues" data-throw-if-not-resolved="false">#replaceValues</xref> methods each return a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref> of values. Though the method signature doesn't say so explicitly, the map returned by <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.asMap" data-throw-if-not-resolved="false">#asMap</xref> has `List` values.


    See the Guava User Guide article on [ `Multimap`][_Multimap].



    [_Multimap]: https://github.com/google/guava/wiki/NewCollectionTypesExplained#multimap
  syntax:
    content: public interface ListMultimap<K,V> extends Multimap<K,V>
    typeParameters:
    - id: K
    - id: V
  implements:
  - com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.asMap()
  id: asMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  langs:
  - java
  name: asMap()
  nameWithType: ListMultimap<K,V>.asMap()
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.asMap()
  overload: com.azure.cosmos.implementation.guava25.collect.ListMultimap.asMap*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of this multimap as a `Map` from each distinct key to the nonempty collection of that key's associated values. Note that `this.asMap().get(k)` is equivalent to `this.get(k)` only when `k` is a key contained in the multimap; otherwise it returns `null` as opposed to an empty collection.


    Changes to the returned map or the collections that serve as its values will update the underlying multimap, and vice versa. The map does not support `put` or `putAll`, nor do its entries support <xref uid="" data-throw-if-not-resolved="false">setValue</xref>.


    **Note:** The returned map's values are guaranteed to be of type <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>. To obtain this map with the more specific generic type `Map>`, call <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimaps.&lt;K,V&gt;asMap(com.azure.cosmos.implementation.guava25.collect.ListMultimap&lt;K,V&gt;)" data-throw-if-not-resolved="false">Multimaps#asMap(ListMultimap)</xref> instead.
  syntax:
    content: public abstract Map<K,Collection<V>> asMap()
    return:
      type: java.util.Map<K,java.util.Collection<V>>
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  langs:
  - java
  name: equals(Object obj)
  nameWithType: ListMultimap<K,V>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.equals(Object obj)
  overload: com.azure.cosmos.implementation.guava25.collect.ListMultimap.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Compares the specified object to this multimap for equality.


    Two `ListMultimap` instances are equal if, for each key, they contain the same values in the same order. If the value orderings disagree, the multimaps will not be considered equal.


    An empty `ListMultimap` is equal to any other empty `Multimap`, including an empty `SetMultimap`.
  syntax:
    content: public abstract boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.get(K)
  id: get(K)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  langs:
  - java
  name: get(K key)
  nameWithType: ListMultimap<K,V>.get(K key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.get(K key)
  overload: com.azure.cosmos.implementation.guava25.collect.ListMultimap.get*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view collection of the values associated with `key` in this multimap, if any. Note that when `containsKey(key)` is false, this returns an empty collection, not `null`.


    Changes to the returned collection will update the underlying multimap, and vice versa.


    Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract List<V> get(K key)
    parameters:
    - id: key
      type: K
    return:
      type: java.util.List<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.removeAll(java.lang.Object)
  id: removeAll(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  langs:
  - java
  name: removeAll(Object key)
  nameWithType: ListMultimap<K,V>.removeAll(Object key)
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.removeAll(Object key)
  overload: com.azure.cosmos.implementation.guava25.collect.ListMultimap.removeAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Removes all values associated with the key `key`.


    Once this method returns, `key` will not be mapped to any values, so it will not appear in <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.keySet*" data-throw-if-not-resolved="false">#keySet()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.asMap()" data-throw-if-not-resolved="false">#asMap()</xref>, or any other views.


    Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract List<V> removeAll(Object key)
    parameters:
    - id: key
      type: java.lang.Object
    return:
      type: java.util.List<V>
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.replaceValues(K,java.lang.Iterable<? extends V>)
  id: replaceValues(K,java.lang.Iterable<? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ListMultimap
  langs:
  - java
  name: replaceValues(K key, Iterable<? extends V> values)
  nameWithType: ListMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.replaceValues(K key, Iterable<? extends V> values)
  overload: com.azure.cosmos.implementation.guava25.collect.ListMultimap.replaceValues*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Stores a collection of values with the same key, replacing any existing values for that key.


    If `values` is empty, this is equivalent to <xref uid="com.azure.cosmos.implementation.guava25.collect.ListMultimap.removeAll(java.lang.Object)" data-throw-if-not-resolved="false">removeAll(key)</xref>.


    Because the values for a given key may have duplicates and follow the insertion ordering, this method returns a <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, instead of the <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> specified in the <xref uid="com.azure.cosmos.implementation.guava25.collect.Multimap" data-throw-if-not-resolved="false">Multimap</xref> interface.
  syntax:
    content: public abstract List<V> replaceValues(K key, Iterable<? extends V> values)
    parameters:
    - id: key
      type: K
    - id: values
      type: java.lang.Iterable<? extends V>
    return:
      type: java.util.List<V>
references:
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: java.util.List<V>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.get*
  name: get
  nameWithType: ListMultimap<K,V>.get
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.get
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.removeAll*
  name: removeAll
  nameWithType: ListMultimap<K,V>.removeAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.removeAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends V>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.replaceValues*
  name: replaceValues
  nameWithType: ListMultimap<K,V>.replaceValues
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.replaceValues
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Map<K,java.util.Collection<V>>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.asMap*
  name: asMap
  nameWithType: ListMultimap<K,V>.asMap
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.asMap
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ListMultimap.equals*
  name: equals
  nameWithType: ListMultimap<K,V>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: V
  name: V
  nameWithType: V
  fullName: V
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
  name: Multimap<K,V>
  nameWithType: Multimap<K,V>
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: '? extends V'
  name: '? extends V'
  nameWithType: '? extends V'
  fullName: '? extends V'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: K,java.util.Collection
  name: K,Collection
  nameWithType: K,Collection
  fullName: K,java.util.Collection
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.guava25.collect.Multimap
  name: Multimap
  nameWithType: Multimap
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimap
