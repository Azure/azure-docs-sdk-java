### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.transformEntries*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries"
name: "<K,V1,V2>transformEntries"
nameWithType: "Multimaps.<K,V1,V2>transformEntries"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  name: "<K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  nameWithType: "Multimaps.<K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  summary: "Returns a view of a `ListMultimap` whose values are derived from the original multimap's entries. In contrast to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.&lt;K,V1,V2&gt;transformValues(com.azure.cosmos.implementation.guava25.collect.ListMultimap&lt;K,V1&gt;,com.azure.cosmos.implementation.guava25.base.Function&lt;? super V1,V2&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#transformValues(ListMultimap, Function)\"></xref>, this method's entry-transformation logic may depend on the key as well as the value.\n\nAll other properties of the transformed multimap, such as iteration order, are left intact. For example, the code:\n\n```java\nMultimap multimap =\n     ImmutableMultimap.of(\"a\", 1, \"a\", 4, \"b\", 6);\n EntryTransformer transformer =\n     new EntryTransformer() {\n       public String transformEntry(String key, Integer value) {\n         return key + value;\n       }\n     };\n Multimap transformed =\n     Multimaps.transformEntries(multimap, transformer);\n System.out.println(transformed);\n```\n\n... prints `{\"a\"=[\"a1\", \"a4\"], \"b\"=[\"b6\"]}`.\n\nChanges in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap.\n\nIt's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result.\n\nThe returned multimap is not thread-safe or serializable, even if the underlying multimap is.\n\nThe transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimap.containsValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimap#containsValue\"></xref> and <xref uid=\"java.lang.Object.toString\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#toString\"></xref>. For this to perform well, `transformer` should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.\n\n**Warning:** This method assumes that for any instance `k` of `EntryTransformer` key type `K`, `k.equals(k2)` implies that `k2` is also of type `K`. Using an `EntryTransformer` key type for which this may not hold, such as `ArrayList`, may risk a `ClassCastException` when calling methods on the transformed multimap."
  parameters:
  - name: "fromMap"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V1?alt=V1&text=V1\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transformer"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer?alt=com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer&text=EntryTransformer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"? super V1?alt=? super V1&text=? super V1\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ListMultimap<K,V2> <K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(com.azure.cosmos.implementation.guava25.collect.Multimap<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  name: "<K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  nameWithType: "Multimaps.<K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  summary: "Returns a view of a multimap whose values are derived from the original multimap's entries. In contrast to <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.transformValues\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#transformValues\"></xref>, this method's entry-transformation logic may depend on the key as well as the value.\n\nAll other properties of the transformed multimap, such as iteration order, are left intact. For example, the code:\n\n```java\nSetMultimap multimap =\n     ImmutableSetMultimap.of(\"a\", 1, \"a\", 4, \"b\", -6);\n EntryTransformer transformer =\n     new EntryTransformer() {\n       public String transformEntry(String key, Integer value) {\n          return (value >= 0) ? key : \"no\" + key;\n       }\n     };\n Multimap transformed =\n     Multimaps.transformEntries(multimap, transformer);\n System.out.println(transformed);\n```\n\n... prints `{a=[a, a], b=[nob]}`.\n\nChanges in the underlying multimap are reflected in this view. Conversely, this view supports removal operations, and these are reflected in the underlying multimap.\n\nIt's acceptable for the underlying multimap to contain null keys and null values provided that the transformer is capable of accepting null inputs. The transformed multimap might contain null values if the transformer sometimes gives a null result.\n\nThe returned multimap is not thread-safe or serializable, even if the underlying multimap is. The `equals` and `hashCode` methods of the returned multimap are meaningless, since there is not a definition of `equals` or `hashCode` for general collections, and `get()` will return a general `Collection` as opposed to a `List` or a `Set`.\n\nThe transformer is applied lazily, invoked when needed. This is necessary for the returned multimap to be a view, but it means that the transformer will be applied many times for bulk operations like <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimap.containsValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimap#containsValue\"></xref> and <xref uid=\"java.lang.Object.toString\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#toString\"></xref>. For this to perform well, `transformer` should be fast. To avoid lazy evaluation when the returned multimap doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.\n\n**Warning:** This method assumes that for any instance `k` of `EntryTransformer` key type `K`, `k.equals(k2)` implies that `k2` is also of type `K`. Using an `EntryTransformer` key type for which this may not hold, such as `ArrayList`, may risk a `ClassCastException` when calling methods on the transformed multimap."
  parameters:
  - name: "fromMap"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Multimap?alt=com.azure.cosmos.implementation.guava25.collect.Multimap&text=Multimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V1?alt=V1&text=V1\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "transformer"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer?alt=com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer&text=EntryTransformer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"? super V1?alt=? super V1&text=? super V1\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Multimap<K,V2> <K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Multimap?alt=com.azure.cosmos.implementation.guava25.collect.Multimap&text=Multimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V2?alt=V2&text=V2\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
