### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ContiguousSet"
fullName: "com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>"
name: "ContiguousSet<C>"
nameWithType: "ContiguousSet<C>"
summary: "A sorted set of contiguous values in a given <xref uid=\"com.azure.cosmos.implementation.guava25.collect.DiscreteDomain\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DiscreteDomain\"></xref>. Example:\n\n```java\nContiguousSet.create(Range.closed(5, 42), DiscreteDomain.integers())\n```\n\nNote that because bounded ranges over `int` and `long` values are so common, this particular example can be written as just:\n\n```java\nContiguousSet.closed(5, 42)\n```\n\n**Warning:** Be extremely careful what you do with conceptually large instances (such as `ContiguousSet.create(Range.greaterThan(0), DiscreteDomain.integers()`). Certain operations on such a set can be performed efficiently, but others (such as <xref uid=\"java.util.Set.hashCode\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Set#hashCode\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Collections#frequency\"></xref>) can cause major performance problems."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.AbstractCollection\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSet\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()"
- "java.lang.Object.clone()"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
- "java.util.AbstractCollection.isEmpty()"
- "java.util.AbstractCollection.size()"
- "java.util.AbstractCollection.toString()"
syntax: "public abstract class ContiguousSet<C> extends ImmutableSortedSet<C>"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.<C>create(com.azure.cosmos.implementation.guava25.collect.Range<C>,com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.<E>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed(int,int)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed(long,long)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen(int,int)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen(long,long)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet(C)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet(C,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.intersection(com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range()"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range(com.azure.cosmos.implementation.guava25.collect.BoundType,com.azure.cosmos.implementation.guava25.collect.BoundType)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet(C,C)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet(C,boolean,C,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet(C)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet(C,boolean)"
- "com.azure.cosmos.implementation.guava25.collect.ContiguousSet.toString()"
type: "class"
typeParameters:
- name: "C"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
