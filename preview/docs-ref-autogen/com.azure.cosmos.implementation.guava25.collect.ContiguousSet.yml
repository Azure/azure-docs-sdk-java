### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  id: ContiguousSet
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.<C>create(com.azure.cosmos.implementation.guava25.collect.Range<C>,com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed(int,int)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed(long,long)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen(int,int)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen(long,long)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet(C)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet(C,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.intersection(com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range()
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range(com.azure.cosmos.implementation.guava25.collect.BoundType,com.azure.cosmos.implementation.guava25.collect.BoundType)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet(C,C)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet(C,boolean,C,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet(C)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet(C,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ContiguousSet.toString()
  langs:
  - java
  name: ContiguousSet<C>
  nameWithType: ContiguousSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A sorted set of contiguous values in a given <xref uid="com.azure.cosmos.implementation.guava25.collect.DiscreteDomain" data-throw-if-not-resolved="false">DiscreteDomain</xref>. Example:


    ```java

    ContiguousSet.create(Range.closed(5, 42), DiscreteDomain.integers())

    ```


    Note that because bounded ranges over `int` and `long` values are so common, this particular example can be written as just:


    ```java

    ContiguousSet.closed(5, 42)

    ```


    **Warning:** Be extremely careful what you do with conceptually large instances (such as `ContiguousSet.create(Range.greaterThan(0), DiscreteDomain.integers()`). Certain operations on such a set can be performed efficiently, but others (such as <xref uid="java.util.Set.hashCode" data-throw-if-not-resolved="false">Set#hashCode</xref> or <xref uid="" data-throw-if-not-resolved="false">Collections#frequency</xref>) can cause major performance problems.
  syntax:
    content: public abstract class ContiguousSet<C> extends ImmutableSortedSet<C>
    typeParameters:
    - id: C
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.<C>create(com.azure.cosmos.implementation.guava25.collect.Range<C>,com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  id: <C>create(com.azure.cosmos.implementation.guava25.collect.Range<C>,com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: <C>create(Range<C> range, DiscreteDomain<C> domain)
  nameWithType: ContiguousSet<C>.<C>create(Range<C> range, DiscreteDomain<C> domain)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.<C>create(Range<C> range, DiscreteDomain<C> domain)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `ContiguousSet` containing the same values in the given domain <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains" data-throw-if-not-resolved="false">contained</xref> by the range.
  syntax:
    content: public static ContiguousSet<C> <C>create(Range<C> range, DiscreteDomain<C> domain)
    parameters:
    - id: range
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
    - id: domain
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.<E>builder()
  id: <E>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: <E>builder()
  nameWithType: ContiguousSet<C>.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.<E>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Not supported. `ContiguousSet` instances are constructed with <xref uid="com.azure.cosmos.implementation.guava25.collect.ContiguousSet.create" data-throw-if-not-resolved="false">#create</xref>. This method exists only to hide <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableSet.builder" data-throw-if-not-resolved="false">ImmutableSet#builder</xref> from consumers of `ContiguousSet`.
  syntax:
    content: public static ImmutableSortedSet.Builder<E> <E>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.ContiguousSet(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  id: ContiguousSet(com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: ContiguousSet(DiscreteDomain<C> domain)
  nameWithType: ContiguousSet<C>.ContiguousSet(DiscreteDomain<C> domain)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.ContiguousSet(DiscreteDomain<C> domain)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.ContiguousSet*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ContiguousSet(DiscreteDomain<C> domain)"
    parameters:
    - id: domain
      type: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed(int,int)
  id: closed(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: closed(int lower, int upper)
  nameWithType: ContiguousSet<C>.closed(int lower, int upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.closed(int lower, int upper)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a nonempty contiguous set containing all `int` values from `lower` (inclusive) to `upper` (inclusive). (These are the same values contained in `Range.closed(lower, upper)`.)
  syntax:
    content: public static ContiguousSet<Integer> closed(int lower, int upper)
    parameters:
    - id: lower
      type: int
    - id: upper
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<java.lang.Integer>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed(long,long)
  id: closed(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: closed(long lower, long upper)
  nameWithType: ContiguousSet<C>.closed(long lower, long upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.closed(long lower, long upper)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a nonempty contiguous set containing all `long` values from `lower` (inclusive) to `upper` (inclusive). (These are the same values contained in `Range.closed(lower, upper)`.)
  syntax:
    content: public static ContiguousSet<Long> closed(long lower, long upper)
    parameters:
    - id: lower
      type: long
    - id: upper
      type: long
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<java.lang.Long>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen(int,int)
  id: closedOpen(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: closedOpen(int lower, int upper)
  nameWithType: ContiguousSet<C>.closedOpen(int lower, int upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.closedOpen(int lower, int upper)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a contiguous set containing all `int` values from `lower` (inclusive) to `upper` (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in `Range.closedOpen(lower, upper)`.)
  syntax:
    content: public static ContiguousSet<Integer> closedOpen(int lower, int upper)
    parameters:
    - id: lower
      type: int
    - id: upper
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<java.lang.Integer>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen(long,long)
  id: closedOpen(long,long)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: closedOpen(long lower, long upper)
  nameWithType: ContiguousSet<C>.closedOpen(long lower, long upper)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.closedOpen(long lower, long upper)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a contiguous set containing all `long` values from `lower` (inclusive) to `upper` (exclusive). If the endpoints are equal, an empty set is returned. (These are the same values contained in `Range.closedOpen(lower, upper)`.)
  syntax:
    content: public static ContiguousSet<Long> closedOpen(long lower, long upper)
    parameters:
    - id: lower
      type: long
    - id: upper
      type: long
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<java.lang.Long>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet(C)
  id: headSet(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: headSet(C toElement)
  nameWithType: ContiguousSet<C>.headSet(C toElement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.headSet(C toElement)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a serializable `ImmutableSortedSet`.


    The <xref uid="java.util.SortedSet.headSet" data-throw-if-not-resolved="false">SortedSet#headSet</xref> documentation states that a subset of a subset throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `toElement` greater than an earlier `toElement`. However, this method doesn't throw an exception in that situation, but instead keeps the original `toElement`.
  syntax:
    content: public ContiguousSet<C> headSet(C toElement)
    parameters:
    - id: toElement
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet(C,boolean)
  id: headSet(C,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: headSet(C toElement, boolean inclusive)
  nameWithType: ContiguousSet<C>.headSet(C toElement, boolean inclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.headSet(C toElement, boolean inclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ContiguousSet<C> headSet(C toElement, boolean inclusive)
    parameters:
    - id: toElement
      type: C
    - id: inclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.intersection(com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>)
  id: intersection(com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: intersection(ContiguousSet<C> other)
  nameWithType: ContiguousSet<C>.intersection(ContiguousSet<C> other)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.intersection(ContiguousSet<C> other)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.intersection*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the set of values that are contained in both this set and the other.


    This method should always be used instead of <xref uid="com.azure.cosmos.implementation.guava25.collect.Sets.intersection" data-throw-if-not-resolved="false">Sets#intersection</xref> for <xref uid="com.azure.cosmos.implementation.guava25.collect.ContiguousSet" data-throw-if-not-resolved="false">ContiguousSet</xref> instances.
  syntax:
    content: public abstract ContiguousSet<C> intersection(ContiguousSet<C> other)
    parameters:
    - id: other
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range()
  id: range()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: range()
  nameWithType: ContiguousSet<C>.range()
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.range()
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a range, closed on both ends, whose endpoints are the minimum and maximum values contained in this set. This is equivalent to `range(CLOSED, CLOSED)`.
  syntax:
    content: public abstract Range<C> range()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range(com.azure.cosmos.implementation.guava25.collect.BoundType,com.azure.cosmos.implementation.guava25.collect.BoundType)
  id: range(com.azure.cosmos.implementation.guava25.collect.BoundType,com.azure.cosmos.implementation.guava25.collect.BoundType)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: range(BoundType lowerBoundType, BoundType upperBoundType)
  nameWithType: ContiguousSet<C>.range(BoundType lowerBoundType, BoundType upperBoundType)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.range(BoundType lowerBoundType, BoundType upperBoundType)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns the minimal range with the given boundary types for which all values in this set are <xref uid="com.azure.cosmos.implementation.guava25.collect.Range.contains*" data-throw-if-not-resolved="false">contained</xref> within the range.


    Note that this method will return ranges with unbounded endpoints if <xref uid="com.azure.cosmos.implementation.guava25.collect.BoundType.OPEN" data-throw-if-not-resolved="false">BoundType#OPEN</xref> is requested for a domain minimum or maximum. For example, if `set` was created from the range `[1..Integer.MAX_VALUE]` then `set.range(CLOSED, OPEN)` must return `[1..\u221e)`.
  syntax:
    content: public abstract Range<C> range(BoundType lowerBoundType, BoundType upperBoundType)
    parameters:
    - id: lowerBoundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    - id: upperBoundType
      type: com.azure.cosmos.implementation.guava25.collect.BoundType
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Range<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet(C,C)
  id: subSet(C,C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: subSet(C fromElement, C toElement)
  nameWithType: ContiguousSet<C>.subSet(C fromElement, C toElement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.subSet(C fromElement, C toElement)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a serializable `ImmutableSortedSet`.


    The <xref uid="java.util.SortedSet.subSet" data-throw-if-not-resolved="false">SortedSet#subSet</xref> documentation states that a subset of a subset throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromElement` smaller than an earlier `fromElement`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromElement`. Similarly, this method keeps the original `toElement`, instead of throwing an exception, if passed a `toElement` greater than an earlier `toElement`.
  syntax:
    content: public ContiguousSet<C> subSet(C fromElement, C toElement)
    parameters:
    - id: fromElement
      type: C
    - id: toElement
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet(C,boolean,C,boolean)
  id: subSet(C,boolean,C,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: subSet(C fromElement, boolean fromInclusive, C toElement, boolean toInclusive)
  nameWithType: ContiguousSet<C>.subSet(C fromElement, boolean fromInclusive, C toElement, boolean toInclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.subSet(C fromElement, boolean fromInclusive, C toElement, boolean toInclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ContiguousSet<C> subSet(C fromElement, boolean fromInclusive, C toElement, boolean toInclusive)
    parameters:
    - id: fromElement
      type: C
    - id: fromInclusive
      type: boolean
    - id: toElement
      type: C
    - id: toInclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet(C)
  id: tailSet(C)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: tailSet(C fromElement)
  nameWithType: ContiguousSet<C>.tailSet(C fromElement)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.tailSet(C fromElement)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    This method returns a serializable `ImmutableSortedSet`.


    The <xref uid="java.util.SortedSet.tailSet" data-throw-if-not-resolved="false">SortedSet#tailSet</xref> documentation states that a subset of a subset throws an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref> if passed a `fromElement` smaller than an earlier `fromElement`. However, this method doesn't throw an exception in that situation, but instead keeps the original `fromElement`.
  syntax:
    content: public ContiguousSet<C> tailSet(C fromElement)
    parameters:
    - id: fromElement
      type: C
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet(C,boolean)
  id: tailSet(C,boolean)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: tailSet(C fromElement, boolean inclusive)
  nameWithType: ContiguousSet<C>.tailSet(C fromElement, boolean inclusive)
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.tailSet(C fromElement, boolean inclusive)
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public ContiguousSet<C> tailSet(C fromElement, boolean inclusive)
    parameters:
    - id: fromElement
      type: C
    - id: inclusive
      type: boolean
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  langs:
  - java
  name: toString()
  nameWithType: ContiguousSet<C>.toString()
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.toString()
  overload: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.toString*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a short-hand representation of the contents such as `"[1..100]"`.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
references:
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
    name: DiscreteDomain
    fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.ContiguousSet*
  name: ContiguousSet
  nameWithType: ContiguousSet<C>.ContiguousSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.ContiguousSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Range<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Range
    name: Range
    fullName: com.azure.cosmos.implementation.guava25.collect.Range
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
    name: ContiguousSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  - name: <
    fullName: <
  - uid: C
    name: C
    fullName: C
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.create*
  name: <C>create
  nameWithType: ContiguousSet<C>.<C>create
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.<C>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<java.lang.Integer>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
    name: ContiguousSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  - name: <
    fullName: <
  - uid: java.lang.Integer
    name: Integer
    fullName: java.lang.Integer
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closed*
  name: closed
  nameWithType: ContiguousSet<C>.closed
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.closed
  package: com.azure.cosmos.implementation.guava25.collect
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<java.lang.Long>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
    name: ContiguousSet
    fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet
  - name: <
    fullName: <
  - uid: java.lang.Long
    name: Long
    fullName: java.lang.Long
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.closedOpen*
  name: closedOpen
  nameWithType: ContiguousSet<C>.closedOpen
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.closedOpen
  package: com.azure.cosmos.implementation.guava25.collect
- uid: C
  spec.java:
  - uid: C
    name: C
    fullName: C
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.headSet*
  name: headSet
  nameWithType: ContiguousSet<C>.headSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.headSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.subSet*
  name: subSet
  nameWithType: ContiguousSet<C>.subSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.subSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.tailSet*
  name: tailSet
  nameWithType: ContiguousSet<C>.tailSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.tailSet
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.intersection*
  name: intersection
  nameWithType: ContiguousSet<C>.intersection
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.intersection
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.range*
  name: range
  nameWithType: ContiguousSet<C>.range
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.range
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.BoundType
  name: BoundType
  nameWithType: BoundType
  fullName: com.azure.cosmos.implementation.guava25.collect.BoundType
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.toString*
  name: toString
  nameWithType: ContiguousSet<C>.toString
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.toString
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ContiguousSet.builder*
  name: <E>builder
  nameWithType: ContiguousSet<C>.<E>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ContiguousSet<C>.<E>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<C>
  name: ImmutableSortedSet<C>
  nameWithType: ImmutableSortedSet<C>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet<C>
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  name: ImmutableCollection.removeAll(Collection<?>)
  nameWithType: ImmutableCollection.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  name: ImmutableCollection.toArray()
  nameWithType: ImmutableCollection.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()
  name: ImmutableSortedSet.<E>reverseOrder()
  nameWithType: ImmutableSortedSet.<E>reverseOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>reverseOrder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)
  name: ImmutableSortedSet.headSet(E,boolean)
  nameWithType: ImmutableSortedSet.headSet(E,boolean)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E,boolean)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)
  name: ImmutableSortedSet.lower(E)
  nameWithType: ImmutableSortedSet.lower(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.lower(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)
  name: ImmutableSortedSet.floor(E)
  nameWithType: ImmutableSortedSet.floor(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.floor(E)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)
  name: ImmutableSortedSet.<E>copyOf(Iterator<? extends E>)
  nameWithType: ImmutableSortedSet.<E>copyOf(Iterator<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Iterator<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
  name: ImmutableSet.hashCode()
  nameWithType: ImmutableSet.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)
  name: ImmutableSortedSet.<E>copyOf(Iterable<? extends E>)
  nameWithType: ImmutableSortedSet.<E>copyOf(Iterable<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.lang.Iterable<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])
  name: ImmutableSortedSet.<E>copyOf(E[])
  nameWithType: ImmutableSortedSet.<E>copyOf(E[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(E[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()
  name: ImmutableSortedSet.first()
  nameWithType: ImmutableSortedSet.first()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.first()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()
  name: ImmutableSortedSet.pollFirst()
  nameWithType: ImmutableSortedSet.pollFirst()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollFirst()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)
  name: ImmutableSortedSet.subSet(E,E)
  nameWithType: ImmutableSortedSet.subSet(E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
  name: ImmutableSortedSet.<E>copyOf(Comparator<? super E>,Iterator<? extends E>)
  nameWithType: ImmutableSortedSet.<E>copyOf(Comparator<? super E>,Iterator<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Iterator<? extends E>)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)
  name: ImmutableSortedSet.<E>of(E,E,E)
  nameWithType: ImmutableSortedSet.<E>of(E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()
  name: ImmutableSortedSet.<E>of()
  nameWithType: ImmutableSortedSet.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  name: ImmutableCollection.addAll(Collection<? extends E>)
  nameWithType: ImmutableCollection.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  name: ImmutableCollection.retainAll(Collection<?>)
  nameWithType: ImmutableCollection.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)
  name: ImmutableSortedSet.<E>of(E,E)
  nameWithType: ImmutableSortedSet.<E>of(E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)
  name: ImmutableSortedSet.<E>of(E)
  nameWithType: ImmutableSortedSet.<E>of(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)
  name: ImmutableSortedSet.subSet(E,boolean,E,boolean)
  nameWithType: ImmutableSortedSet.subSet(E,boolean,E,boolean)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.subSet(E,boolean,E,boolean)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  name: ImmutableCollection.clear()
  nameWithType: ImmutableCollection.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)
  name: ImmutableSortedSet.higher(E)
  nameWithType: ImmutableSortedSet.higher(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.higher(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()
  name: ImmutableSortedSet.<E>naturalOrder()
  nameWithType: ImmutableSortedSet.<E>naturalOrder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>naturalOrder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()
  name: ImmutableSortedSet.spliterator()
  nameWithType: ImmutableSortedSet.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.spliterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)
  name: ImmutableSortedSet.<E>toImmutableSortedSet(Comparator<? super E>)
  nameWithType: ImmutableSortedSet.<E>toImmutableSortedSet(Comparator<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>toImmutableSortedSet(java.util.Comparator<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()
  name: ImmutableSortedSet.pollLast()
  nameWithType: ImmutableSortedSet.pollLast()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.pollLast()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()
  name: ImmutableSortedSet.comparator()
  nameWithType: ImmutableSortedSet.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.comparator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)
  name: ImmutableSortedSet.tailSet(E,boolean)
  nameWithType: ImmutableSortedSet.tailSet(E,boolean)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E,boolean)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  name: ImmutableCollection.add(E)
  nameWithType: ImmutableCollection.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)
  name: ImmutableSortedSet.<E>of(E,E,E,E,E)
  nameWithType: ImmutableSortedSet.<E>of(E,E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  name: ImmutableCollection.remove(Object)
  nameWithType: ImmutableCollection.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  name: ImmutableCollection.removeIf(Predicate<? super E>)
  nameWithType: ImmutableCollection.removeIf(Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)
  name: ImmutableSortedSet.<E>copyOf(Collection<? extends E>)
  nameWithType: ImmutableSortedSet.<E>copyOf(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Collection<? extends E>)
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()
  name: ImmutableSortedSet.descendingIterator()
  nameWithType: ImmutableSortedSet.descendingIterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingIterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()
  name: ImmutableSortedSetFauxverideShim.<E>builder()
  nameWithType: ImmutableSortedSetFauxverideShim.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)
  name: ImmutableSortedSet.<E>copyOfSorted(SortedSet<E>)
  nameWithType: ImmutableSortedSet.<E>copyOfSorted(SortedSet<E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOfSorted(java.util.SortedSet<E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)
  name: ImmutableSortedSet.<E>of(E,E,E,E)
  nameWithType: ImmutableSortedSet.<E>of(E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  name: ImmutableCollection.<T>toArray(T[])
  nameWithType: ImmutableCollection.<T>toArray(T[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()
  name: ImmutableSortedSet.iterator()
  nameWithType: ImmutableSortedSet.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.iterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)
  name: ImmutableSortedSet.<E>orderedBy(Comparator<E>)
  nameWithType: ImmutableSortedSet.<E>orderedBy(Comparator<E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>orderedBy(java.util.Comparator<E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
  name: ImmutableSet.equals(Object)
  nameWithType: ImmutableSet.equals(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.equals(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)
  name: ImmutableSortedSet.headSet(E)
  nameWithType: ImmutableSortedSet.headSet(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.headSet(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()
  name: ImmutableSortedSet.last()
  nameWithType: ImmutableSortedSet.last()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.last()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  name: ImmutableSortedSet.<E>copyOf(Comparator<? super E>,Iterable<? extends E>)
  nameWithType: ImmutableSortedSet.<E>copyOf(Comparator<? super E>,Iterable<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)
  name: ImmutableSortedSet.<E>of(E,E,E,E,E,E,E)
  nameWithType: ImmutableSortedSet.<E>of(E,E,E,E,E,E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>of(E,E,E,E,E,E,E...)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)
  name: ImmutableSortedSet.tailSet(E)
  nameWithType: ImmutableSortedSet.tailSet(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.tailSet(E)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  name: ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  nameWithType: ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>toImmutableSet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)
  name: ImmutableSortedSet.ceiling(E)
  nameWithType: ImmutableSortedSet.ceiling(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.ceiling(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  name: ImmutableCollection.contains(Object)
  nameWithType: ImmutableCollection.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  name: ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  nameWithType: ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.<E>builderWithExpectedSize(int)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()
  name: ImmutableSortedSet.descendingSet()
  nameWithType: ImmutableSortedSet.descendingSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.descendingSet()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)
  name: ImmutableSortedSet.<E>copyOf(Comparator<? super E>,Collection<? extends E>)
  nameWithType: ImmutableSortedSet.<E>copyOf(Comparator<? super E>,Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.<E>copyOf(java.util.Comparator<? super E>,java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
  name: ImmutableSet.asList()
  nameWithType: ImmutableSet.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSet.asList()
- uid: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
  name: DiscreteDomain
  nameWithType: DiscreteDomain
  fullName: com.azure.cosmos.implementation.guava25.collect.DiscreteDomain
- uid: com.azure.cosmos.implementation.guava25.collect.Range
  name: Range
  nameWithType: Range
  fullName: com.azure.cosmos.implementation.guava25.collect.Range
- uid: java.lang.Integer
  name: Integer
  nameWithType: Integer
  fullName: java.lang.Integer
- uid: java.lang.Long
  name: Long
  nameWithType: Long
  fullName: java.lang.Long
- uid: E
  name: E
  nameWithType: E
  fullName: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
  name: ImmutableSortedSet.Builder
  nameWithType: ImmutableSortedSet.Builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.Builder
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
  name: ImmutableCollection.removeAll(Collection
  nameWithType: ImmutableCollection.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
- uid: E>reverseOrder()
  name: E>reverseOrder()
  nameWithType: E>reverseOrder()
  fullName: E>reverseOrder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.
  name: ImmutableSortedSet.
  nameWithType: ImmutableSortedSet.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSet.
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: E>copyOf(java.util.Iterator
  name: E>copyOf(Iterator
  nameWithType: E>copyOf(Iterator
  fullName: E>copyOf(java.util.Iterator
- uid: E>copyOf(java.lang.Iterable
  name: E>copyOf(Iterable
  nameWithType: E>copyOf(Iterable
  fullName: E>copyOf(java.lang.Iterable
- uid: E>copyOf(E[])
  name: E>copyOf(E[])
  nameWithType: E>copyOf(E[])
  fullName: E>copyOf(E[])
- uid: E>copyOf(java.util.Comparator
  name: E>copyOf(Comparator
  nameWithType: E>copyOf(Comparator
  fullName: E>copyOf(java.util.Comparator
- uid: '? super E>,java.util.Iterator'
  name: '? super E>,Iterator'
  nameWithType: '? super E>,Iterator'
  fullName: '? super E>,java.util.Iterator'
- uid: E>of(E,E,E)
  name: E>of(E,E,E)
  nameWithType: E>of(E,E,E)
  fullName: E>of(E,E,E)
- uid: E>of()
  name: E>of()
  nameWithType: E>of()
  fullName: E>of()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
  name: ImmutableCollection.addAll(Collection
  nameWithType: ImmutableCollection.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
  name: ImmutableCollection.retainAll(Collection
  nameWithType: ImmutableCollection.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
- uid: E>of(E,E)
  name: E>of(E,E)
  nameWithType: E>of(E,E)
  fullName: E>of(E,E)
- uid: E>of(E)
  name: E>of(E)
  nameWithType: E>of(E)
  fullName: E>of(E)
- uid: E>naturalOrder()
  name: E>naturalOrder()
  nameWithType: E>naturalOrder()
  fullName: E>naturalOrder()
- uid: E>toImmutableSortedSet(java.util.Comparator
  name: E>toImmutableSortedSet(Comparator
  nameWithType: E>toImmutableSortedSet(Comparator
  fullName: E>toImmutableSortedSet(java.util.Comparator
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: E>of(E,E,E,E,E)
  name: E>of(E,E,E,E,E)
  nameWithType: E>of(E,E,E,E,E)
  fullName: E>of(E,E,E,E,E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
  name: ImmutableCollection.removeIf(Predicate
  nameWithType: ImmutableCollection.removeIf(Predicate
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
- uid: E>copyOf(java.util.Collection
  name: E>copyOf(Collection
  nameWithType: E>copyOf(Collection
  fullName: E>copyOf(java.util.Collection
- uid: E>builder()
  name: E>builder()
  nameWithType: E>builder()
  fullName: E>builder()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.
  name: ImmutableSortedSetFauxverideShim.
  nameWithType: ImmutableSortedSetFauxverideShim.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableSortedSetFauxverideShim.
- uid: E>)
  name: E>)
  nameWithType: E>)
  fullName: E>)
- uid: E>copyOfSorted(java.util.SortedSet
  name: E>copyOfSorted(SortedSet
  nameWithType: E>copyOfSorted(SortedSet
  fullName: E>copyOfSorted(java.util.SortedSet
- uid: E>of(E,E,E,E)
  name: E>of(E,E,E,E)
  nameWithType: E>of(E,E,E,E)
  fullName: E>of(E,E,E,E)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
  name: ImmutableCollection.
  nameWithType: ImmutableCollection.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
- uid: E>orderedBy(java.util.Comparator
  name: E>orderedBy(Comparator
  nameWithType: E>orderedBy(Comparator
  fullName: E>orderedBy(java.util.Comparator
- uid: '? super E>,java.lang.Iterable'
  name: '? super E>,Iterable'
  nameWithType: '? super E>,Iterable'
  fullName: '? super E>,java.lang.Iterable'
- uid: E>of(E,E,E,E,E,E,E...)
  name: E>of(E,E,E,E,E,E,E)
  nameWithType: E>of(E,E,E,E,E,E,E)
  fullName: E>of(E,E,E,E,E,E,E...)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: E>toImmutableSet()
  name: E>toImmutableSet()
  nameWithType: E>toImmutableSet()
  fullName: E>toImmutableSet()
- uid: E>builderWithExpectedSize(int)
  name: E>builderWithExpectedSize(int)
  nameWithType: E>builderWithExpectedSize(int)
  fullName: E>builderWithExpectedSize(int)
- uid: '? super E>,java.util.Collection'
  name: '? super E>,Collection'
  nameWithType: '? super E>,Collection'
  fullName: '? super E>,java.util.Collection'
