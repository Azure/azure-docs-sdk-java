### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  id: AbstractHashedMap
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map
  children:
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(int)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(int,float)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(int,float,int)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.DEFAULT_CAPACITY
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.DEFAULT_LOAD_FACTOR
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.DEFAULT_THRESHOLD
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.EntrySet
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.EntrySetIterator
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.GETKEY_INVALID
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.GETVALUE_INVALID
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashIterator
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashMapIterator
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.KeySet
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.KeySetIterator
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.MAXIMUM_CAPACITY
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.NO_NEXT_ENTRY
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.NO_PREVIOUS_ENTRY
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.NULL
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.REMOVE_INVALID
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.SETVALUE_INVALID
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.Values
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ValuesIterator
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addMapping(int,int,K,V)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateNewCapacity(int)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateThreshold(int,float)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.checkCapacity()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clear()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clone()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsKey(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsValue(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.convertKey(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,K,V)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntrySetIterator()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createKeySetIterator()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createValuesIterator()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.destroyEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doReadObject(java.io.ObjectInputStream)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doWriteObject(java.io.ObjectOutputStream)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ensureCapacity(int)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryHashCode(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryKey(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryNext(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entrySet()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryValue(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.equals(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.get(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.getEntry(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hash(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashCode()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashIndex(int,int)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.init()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEmpty()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualKey(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualValue(java.lang.Object,java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.keySet()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.put(K,V)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.putAll(java.util.Map<? extends K,? extends V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.remove(java.lang.Object)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeMapping(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.reuseEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,int,K,V)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.size()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.toString()
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.updateEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,V)
  - com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.values()
  langs:
  - java
  name: AbstractHashedMap<K,V>
  nameWithType: AbstractHashedMap<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>
  type: Class
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: public class AbstractHashedMap<K,V> extends AbstractMap<K,V> implements IterableMap<K,V>
    typeParameters:
    - id: K
    - id: V
  inheritance:
  - java.lang.Object
  - java.util.AbstractMap
  implements:
  - com.azure.cosmos.implementation.apachecommons.collections.IterableMap<K,V>
  inheritedMembers:
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractMap.clear()
  - java.util.AbstractMap.clone()
  - java.util.AbstractMap.containsKey(java.lang.Object)
  - java.util.AbstractMap.containsValue(java.lang.Object)
  - java.util.AbstractMap.entrySet()
  - java.util.AbstractMap.equals(java.lang.Object)
  - java.util.AbstractMap.get(java.lang.Object)
  - java.util.AbstractMap.hashCode()
  - java.util.AbstractMap.isEmpty()
  - java.util.AbstractMap.keySet()
  - java.util.AbstractMap.put(K,V)
  - java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>)
  - java.util.AbstractMap.remove(java.lang.Object)
  - java.util.AbstractMap.size()
  - java.util.AbstractMap.toString()
  - java.util.AbstractMap.values()
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap()
  id: AbstractHashedMap()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: AbstractHashedMap()
  nameWithType: AbstractHashedMap<K,V>.AbstractHashedMap()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.AbstractHashedMap()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Constructor only used in deserialization, do not use otherwise.
  syntax:
    content: protected AbstractHashedMap()
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(int)
  id: AbstractHashedMap(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: AbstractHashedMap(int initialCapacity)
  nameWithType: AbstractHashedMap<K,V>.AbstractHashedMap(int initialCapacity)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.AbstractHashedMap(int initialCapacity)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Constructs a new, empty map with the specified initial capacity and default load factor.
  syntax:
    content: protected AbstractHashedMap(int initialCapacity)
    parameters:
    - id: initialCapacity
      type: int
      description: the initial capacity
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(int,float)
  id: AbstractHashedMap(int,float)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: AbstractHashedMap(int initialCapacity, float loadFactor)
  nameWithType: AbstractHashedMap<K,V>.AbstractHashedMap(int initialCapacity, float loadFactor)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.AbstractHashedMap(int initialCapacity, float loadFactor)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Constructs a new, empty map with the specified initial capacity and load factor.
  syntax:
    content: protected AbstractHashedMap(int initialCapacity, float loadFactor)
    parameters:
    - id: initialCapacity
      type: int
      description: the initial capacity
    - id: loadFactor
      type: float
      description: the load factor
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(int,float,int)
  id: AbstractHashedMap(int,float,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: AbstractHashedMap(int initialCapacity, float loadFactor, int threshold)
  nameWithType: AbstractHashedMap<K,V>.AbstractHashedMap(int initialCapacity, float loadFactor, int threshold)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.AbstractHashedMap(int initialCapacity, float loadFactor, int threshold)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Constructor which performs no validation on the passed in parameters.
  syntax:
    content: protected AbstractHashedMap(int initialCapacity, float loadFactor, int threshold)
    parameters:
    - id: initialCapacity
      type: int
      description: the initial capacity, must be a power of two
    - id: loadFactor
      type: float
      description: the load factor, must be &gt; 0.0f and generally &lt; 1.0f
    - id: threshold
      type: int
      description: the threshold, must be sensible
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap(java.util.Map<? extends K,? extends V>)
  id: AbstractHashedMap(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: AbstractHashedMap(Map<? extends K,? extends V> map)
  nameWithType: AbstractHashedMap<K,V>.AbstractHashedMap(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.AbstractHashedMap(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap*
  type: Constructor
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Constructor copying elements from another map.
  syntax:
    content: protected AbstractHashedMap(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
      description: the map to copy
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.DEFAULT_CAPACITY
  id: DEFAULT_CAPACITY
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: DEFAULT_CAPACITY
  nameWithType: AbstractHashedMap<K,V>.DEFAULT_CAPACITY
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.DEFAULT_CAPACITY
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: The default capacity to use
  syntax:
    content: protected static final int DEFAULT_CAPACITY
    return:
      type: int
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.DEFAULT_LOAD_FACTOR
  id: DEFAULT_LOAD_FACTOR
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: DEFAULT_LOAD_FACTOR
  nameWithType: AbstractHashedMap<K,V>.DEFAULT_LOAD_FACTOR
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.DEFAULT_LOAD_FACTOR
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: The default load factor to use
  syntax:
    content: protected static final float DEFAULT_LOAD_FACTOR
    return:
      type: float
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.DEFAULT_THRESHOLD
  id: DEFAULT_THRESHOLD
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: DEFAULT_THRESHOLD
  nameWithType: AbstractHashedMap<K,V>.DEFAULT_THRESHOLD
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.DEFAULT_THRESHOLD
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: The default threshold to use
  syntax:
    content: protected static final int DEFAULT_THRESHOLD
    return:
      type: int
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.GETKEY_INVALID
  id: GETKEY_INVALID
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: GETKEY_INVALID
  nameWithType: AbstractHashedMap<K,V>.GETKEY_INVALID
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.GETKEY_INVALID
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: protected static final String GETKEY_INVALID
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.GETVALUE_INVALID
  id: GETVALUE_INVALID
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: GETVALUE_INVALID
  nameWithType: AbstractHashedMap<K,V>.GETVALUE_INVALID
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.GETVALUE_INVALID
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: protected static final String GETVALUE_INVALID
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.MAXIMUM_CAPACITY
  id: MAXIMUM_CAPACITY
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: MAXIMUM_CAPACITY
  nameWithType: AbstractHashedMap<K,V>.MAXIMUM_CAPACITY
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.MAXIMUM_CAPACITY
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: The maximum capacity allowed
  syntax:
    content: protected static final int MAXIMUM_CAPACITY
    return:
      type: int
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.NO_NEXT_ENTRY
  id: NO_NEXT_ENTRY
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: NO_NEXT_ENTRY
  nameWithType: AbstractHashedMap<K,V>.NO_NEXT_ENTRY
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.NO_NEXT_ENTRY
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: protected static final String NO_NEXT_ENTRY
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.NO_PREVIOUS_ENTRY
  id: NO_PREVIOUS_ENTRY
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: NO_PREVIOUS_ENTRY
  nameWithType: AbstractHashedMap<K,V>.NO_PREVIOUS_ENTRY
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.NO_PREVIOUS_ENTRY
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: protected static final String NO_PREVIOUS_ENTRY
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.NULL
  id: "NULL"
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: "NULL"
  nameWithType: AbstractHashedMap<K,V>.NULL
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.NULL
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: An object for masking null
  syntax:
    content: protected static final Object NULL
    return:
      type: java.lang.Object
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.REMOVE_INVALID
  id: REMOVE_INVALID
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: REMOVE_INVALID
  nameWithType: AbstractHashedMap<K,V>.REMOVE_INVALID
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.REMOVE_INVALID
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: protected static final String REMOVE_INVALID
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.SETVALUE_INVALID
  id: SETVALUE_INVALID
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: SETVALUE_INVALID
  nameWithType: AbstractHashedMap<K,V>.SETVALUE_INVALID
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.SETVALUE_INVALID
  type: Field
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  syntax:
    content: protected static final String SETVALUE_INVALID
    return:
      type: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int)
  id: addEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: addEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex)
  nameWithType: AbstractHashedMap<K,V>.addEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.addEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Adds an entry into this map.


    This implementation adds the entry to the data storage table. Subclasses could override to handle changes to the map.
  syntax:
    content: protected void addEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to add
    - id: hashIndex
      type: int
      description: the index into the data array to store at
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addMapping(int,int,K,V)
  id: addMapping(int,int,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: addMapping(int hashIndex, int hashCode, K key, V value)
  nameWithType: AbstractHashedMap<K,V>.addMapping(int hashIndex, int hashCode, K key, V value)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.addMapping(int hashIndex, int hashCode, K key, V value)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addMapping*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Adds a new key-value mapping into this map.


    This implementation calls `createEntry()`, `addEntry()` and `checkCapacity()`. It also handles changes to `modCount` and `size`. Subclasses could override to fully control adds to the map.
  syntax:
    content: protected void addMapping(int hashIndex, int hashCode, K key, V value)
    parameters:
    - id: hashIndex
      type: int
      description: the index into the data array to store at
    - id: hashCode
      type: int
      description: the hash code of the key to add
    - id: key
      type: K
      description: the key to add
    - id: value
      type: V
      description: the value to add
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateNewCapacity(int)
  id: calculateNewCapacity(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: calculateNewCapacity(int proposedCapacity)
  nameWithType: AbstractHashedMap<K,V>.calculateNewCapacity(int proposedCapacity)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.calculateNewCapacity(int proposedCapacity)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateNewCapacity*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Calculates the new capacity of the map. This implementation normalizes the capacity to a power of two.
  syntax:
    content: protected int calculateNewCapacity(int proposedCapacity)
    parameters:
    - id: proposedCapacity
      type: int
      description: the proposed capacity
    return:
      type: int
      description: the normalized new capacity
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateThreshold(int,float)
  id: calculateThreshold(int,float)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: calculateThreshold(int newCapacity, float factor)
  nameWithType: AbstractHashedMap<K,V>.calculateThreshold(int newCapacity, float factor)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.calculateThreshold(int newCapacity, float factor)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateThreshold*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Calculates the new threshold of the map, where it will be resized. This implementation uses the load factor.
  syntax:
    content: protected int calculateThreshold(int newCapacity, float factor)
    parameters:
    - id: newCapacity
      type: int
      description: the new capacity
    - id: factor
      type: float
      description: the load factor
    return:
      type: int
      description: the new resize threshold
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.checkCapacity()
  id: checkCapacity()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: checkCapacity()
  nameWithType: AbstractHashedMap<K,V>.checkCapacity()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.checkCapacity()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.checkCapacity*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Checks the capacity of the map and enlarges it if necessary.


    This implementation uses the threshold to check if the map needs enlarging
  syntax:
    content: protected void checkCapacity()
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: clear()
  nameWithType: AbstractHashedMap<K,V>.clear()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.clear()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clear*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Clears the map, resetting the size to zero and nullifying references to avoid garbage collection issues.
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clone()
  id: clone()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: clone()
  nameWithType: AbstractHashedMap<K,V>.clone()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.clone()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clone*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Clones the map without cloning the keys or values.


    To implement `clone()`, a subclass must implement the `Cloneable` interface and make this method public.
  syntax:
    content: protected AbstractHashedMap<K,V> clone()
    return:
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>
      description: a shallow clone
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsKey(java.lang.Object)
  id: containsKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: containsKey(Object key)
  nameWithType: AbstractHashedMap<K,V>.containsKey(Object key)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.containsKey(Object key)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsKey*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Checks whether the map contains the specified key.
  syntax:
    content: public boolean containsKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: the key to search for
    return:
      type: boolean
      description: true if the map contains the key
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsValue(java.lang.Object)
  id: containsValue(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: containsValue(Object value)
  nameWithType: AbstractHashedMap<K,V>.containsValue(Object value)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.containsValue(Object value)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsValue*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Checks whether the map contains the specified value.
  syntax:
    content: public boolean containsValue(Object value)
    parameters:
    - id: value
      type: java.lang.Object
      description: the value to search for
    return:
      type: boolean
      description: true if the map contains the value
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.convertKey(java.lang.Object)
  id: convertKey(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: convertKey(Object key)
  nameWithType: AbstractHashedMap<K,V>.convertKey(Object key)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.convertKey(Object key)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.convertKey*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Converts input keys to another object for storage in the map. This implementation masks nulls. Subclasses can override this to perform alternate key conversions.


    The reverse conversion can be changed, if required, by overriding the getKey() method in the hash entry.
  syntax:
    content: protected Object convertKey(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: the key convert
    return:
      type: java.lang.Object
      description: the converted key
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,K,V)
  id: createEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: createEntry(AbstractHashedMap.HashEntry<K,V> next, int hashCode, K key, V value)
  nameWithType: AbstractHashedMap<K,V>.createEntry(AbstractHashedMap.HashEntry<K,V> next, int hashCode, K key, V value)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createEntry(AbstractHashedMap.HashEntry<K,V> next, int hashCode, K key, V value)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Creates an entry to store the key-value data.


    This implementation creates a new HashEntry instance. Subclasses can override this to return a different storage class, or implement caching.
  syntax:
    content: protected AbstractHashedMap.HashEntry<K,V> createEntry(AbstractHashedMap.HashEntry<K,V> next, int hashCode, K key, V value)
    parameters:
    - id: next
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the next entry in sequence
    - id: hashCode
      type: int
      description: the hash code to use
    - id: key
      type: K
      description: the key to store
    - id: value
      type: V
      description: the value to store
    return:
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the newly created entry
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntrySetIterator()
  id: createEntrySetIterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: createEntrySetIterator()
  nameWithType: AbstractHashedMap<K,V>.createEntrySetIterator()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createEntrySetIterator()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntrySetIterator*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Creates an entry set iterator. Subclasses can override this to return iterators with different properties.
  syntax:
    content: protected Iterator<Map.Entry<K,V>> createEntrySetIterator()
    return:
      type: java.util.Iterator<java.util.Map.Entry<K,V>>
      description: the entrySet iterator
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createKeySetIterator()
  id: createKeySetIterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: createKeySetIterator()
  nameWithType: AbstractHashedMap<K,V>.createKeySetIterator()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createKeySetIterator()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createKeySetIterator*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Creates a key set iterator. Subclasses can override this to return iterators with different properties.
  syntax:
    content: protected Iterator<K> createKeySetIterator()
    return:
      type: java.util.Iterator<K>
      description: the keySet iterator
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createValuesIterator()
  id: createValuesIterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: createValuesIterator()
  nameWithType: AbstractHashedMap<K,V>.createValuesIterator()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createValuesIterator()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createValuesIterator*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Creates a values iterator. Subclasses can override this to return iterators with different properties.
  syntax:
    content: protected Iterator<V> createValuesIterator()
    return:
      type: java.util.Iterator<V>
      description: the values iterator
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.destroyEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: destroyEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: destroyEntry(AbstractHashedMap.HashEntry<K,V> entry)
  nameWithType: AbstractHashedMap<K,V>.destroyEntry(AbstractHashedMap.HashEntry<K,V> entry)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.destroyEntry(AbstractHashedMap.HashEntry<K,V> entry)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.destroyEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Kills an entry ready for the garbage collector.


    This implementation prepares the HashEntry for garbage collection. Subclasses can override this to implement caching (override clear as well).
  syntax:
    content: protected void destroyEntry(AbstractHashedMap.HashEntry<K,V> entry)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to destroy
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doReadObject(java.io.ObjectInputStream)
  id: doReadObject(java.io.ObjectInputStream)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: doReadObject(ObjectInputStream in)
  nameWithType: AbstractHashedMap<K,V>.doReadObject(ObjectInputStream in)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.doReadObject(ObjectInputStream in)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doReadObject*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Reads the map data from the stream. This method must be overridden if a subclass must be setup before `put()` is used.


    Serialization is not one of the JDK's nicest topics. Normal serialization will initialise the superclass before the subclass. Sometimes however, this isn't what you want, as in this case the `put()` method on read can be affected by subclass state.


    The solution adopted here is to deserialize the state data of this class in this protected method. This method must be called by the `readObject()` of the first serializable subclass.


    Subclasses may override if the subclass has a specific field that must be present before `put()` or `calculateThreshold()` will work correctly.
  syntax:
    content: protected void doReadObject(ObjectInputStream in)
    parameters:
    - id: in
      type: java.io.ObjectInputStream
      description: the input stream
  exceptions:
  - type: java.io.IOException
    description: if an error occurs while reading from the stream
  - type: java.lang.ClassNotFoundException
    description: if an error occurs while reading from the stream
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doWriteObject(java.io.ObjectOutputStream)
  id: doWriteObject(java.io.ObjectOutputStream)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: doWriteObject(ObjectOutputStream out)
  nameWithType: AbstractHashedMap<K,V>.doWriteObject(ObjectOutputStream out)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.doWriteObject(ObjectOutputStream out)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doWriteObject*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Writes the map data to the stream. This method must be overridden if a subclass must be setup before `put()` is used.


    Serialization is not one of the JDK's nicest topics. Normal serialization will initialise the superclass before the subclass. Sometimes however, this isn't what you want, as in this case the `put()` method on read can be affected by subclass state.


    The solution adopted here is to serialize the state data of this class in this protected method. This method must be called by the `writeObject()` of the first serializable subclass.


    Subclasses may override if they have a specific field that must be present on read before this implementation will work. Generally, the read determines what must be serialized here, if anything.
  syntax:
    content: protected void doWriteObject(ObjectOutputStream out)
    parameters:
    - id: out
      type: java.io.ObjectOutputStream
      description: the output stream
  exceptions:
  - type: java.io.IOException
    description: if an error occurs while writing tothe stream
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ensureCapacity(int)
  id: ensureCapacity(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: ensureCapacity(int newCapacity)
  nameWithType: AbstractHashedMap<K,V>.ensureCapacity(int newCapacity)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.ensureCapacity(int newCapacity)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ensureCapacity*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Changes the size of the data structure to the capacity proposed.
  syntax:
    content: protected void ensureCapacity(int newCapacity)
    parameters:
    - id: newCapacity
      type: int
      description: the new capacity of the array (a power of two, less or equal to max)
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryHashCode(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: entryHashCode(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: entryHashCode(AbstractHashedMap.HashEntry<K,V> entry)
  nameWithType: AbstractHashedMap<K,V>.entryHashCode(AbstractHashedMap.HashEntry<K,V> entry)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryHashCode(AbstractHashedMap.HashEntry<K,V> entry)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryHashCode*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the `hashCode` field from a `HashEntry`. Used in subclasses that have no visibility of the field.
  syntax:
    content: protected int entryHashCode(AbstractHashedMap.HashEntry<K,V> entry)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to query, must not be null
    return:
      type: int
      description: the <code>hashCode</code> field of the entry
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryKey(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: entryKey(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: entryKey(AbstractHashedMap.HashEntry<K,V> entry)
  nameWithType: AbstractHashedMap<K,V>.entryKey(AbstractHashedMap.HashEntry<K,V> entry)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryKey(AbstractHashedMap.HashEntry<K,V> entry)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryKey*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the `key` field from a `HashEntry`. Used in subclasses that have no visibility of the field.
  syntax:
    content: protected K entryKey(AbstractHashedMap.HashEntry<K,V> entry)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to query, must not be null
    return:
      type: K
      description: the <code>key</code> field of the entry
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryNext(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: entryNext(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: entryNext(AbstractHashedMap.HashEntry<K,V> entry)
  nameWithType: AbstractHashedMap<K,V>.entryNext(AbstractHashedMap.HashEntry<K,V> entry)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryNext(AbstractHashedMap.HashEntry<K,V> entry)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryNext*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the `next` field from a `HashEntry`. Used in subclasses that have no visibility of the field.
  syntax:
    content: protected AbstractHashedMap.HashEntry<K,V> entryNext(AbstractHashedMap.HashEntry<K,V> entry)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to query, must not be null
    return:
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the <code>next</code> field of the entry
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entrySet()
  id: entrySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: entrySet()
  nameWithType: AbstractHashedMap<K,V>.entrySet()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entrySet()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entrySet*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the entrySet view of the map. Changes made to the view affect this map. To simply iterate through the entries, use <xref uid="com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator()" data-throw-if-not-resolved="false">#mapIterator()</xref>.
  syntax:
    content: public Set<Map.Entry<K,V>> entrySet()
    return:
      type: java.util.Set<java.util.Map.Entry<K,V>>
      description: the entrySet view
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryValue(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: entryValue(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: entryValue(AbstractHashedMap.HashEntry<K,V> entry)
  nameWithType: AbstractHashedMap<K,V>.entryValue(AbstractHashedMap.HashEntry<K,V> entry)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryValue(AbstractHashedMap.HashEntry<K,V> entry)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryValue*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the `value` field from a `HashEntry`. Used in subclasses that have no visibility of the field.
  syntax:
    content: protected V entryValue(AbstractHashedMap.HashEntry<K,V> entry)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to query, must not be null
    return:
      type: V
      description: the <code>value</code> field of the entry
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: equals(Object obj)
  nameWithType: AbstractHashedMap<K,V>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.equals(Object obj)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.equals*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Compares this map with another.
  syntax:
    content: public boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
      description: the object to compare to
    return:
      type: boolean
      description: true if equal
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.get(java.lang.Object)
  id: get(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: get(Object key)
  nameWithType: AbstractHashedMap<K,V>.get(Object key)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.get(Object key)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.get*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the value mapped to the key specified.
  syntax:
    content: public V get(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: the key
    return:
      type: V
      description: the mapped value, null if no match
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.getEntry(java.lang.Object)
  id: getEntry(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: getEntry(Object key)
  nameWithType: AbstractHashedMap<K,V>.getEntry(Object key)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.getEntry(Object key)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.getEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Gets the entry mapped to the key specified.


    This method exists for subclasses that may need to perform a multi-step process accessing the entry. The public methods in this class don't use this method to gain a small performance boost.
  syntax:
    content: protected AbstractHashedMap.HashEntry<K,V> getEntry(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: the key
    return:
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry, null if no match
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hash(java.lang.Object)
  id: hash(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: hash(Object key)
  nameWithType: AbstractHashedMap<K,V>.hash(Object key)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.hash(Object key)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hash*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the hash code for the key specified. This implementation uses the additional hashing routine from JDK1.4. Subclasses can override this to return alternate hash codes.
  syntax:
    content: protected int hash(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: the key to get a hash code for
    return:
      type: int
      description: the hash code
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: hashCode()
  nameWithType: AbstractHashedMap<K,V>.hashCode()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.hashCode()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the standard Map hashCode.
  syntax:
    content: public int hashCode()
    return:
      type: int
      description: the hash code defined in the Map interface
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashIndex(int,int)
  id: hashIndex(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: hashIndex(int hashCode, int dataSize)
  nameWithType: AbstractHashedMap<K,V>.hashIndex(int hashCode, int dataSize)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.hashIndex(int hashCode, int dataSize)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashIndex*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the index into the data storage for the hashCode specified. This implementation uses the least significant bits of the hashCode. Subclasses can override this to return alternate bucketing.
  syntax:
    content: protected int hashIndex(int hashCode, int dataSize)
    parameters:
    - id: hashCode
      type: int
      description: the hash code to use
    - id: dataSize
      type: int
      description: the size of the data to pick a bucket from
    return:
      type: int
      description: the bucket index
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.init()
  id: init()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: init()
  nameWithType: AbstractHashedMap<K,V>.init()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.init()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.init*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Initialise subclasses during construction, cloning or deserialization.
  syntax:
    content: protected void init()
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: isEmpty()
  nameWithType: AbstractHashedMap<K,V>.isEmpty()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.isEmpty()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEmpty*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Checks whether the map is currently empty.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
      description: true if the map is currently size zero
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualKey(java.lang.Object,java.lang.Object)
  id: isEqualKey(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: isEqualKey(Object key1, Object key2)
  nameWithType: AbstractHashedMap<K,V>.isEqualKey(Object key1, Object key2)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.isEqualKey(Object key1, Object key2)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualKey*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Compares two keys, in internal converted form, to see if they are equal. This implementation uses the equals method and assumes neither key is null. Subclasses can override this to match differently.
  syntax:
    content: protected boolean isEqualKey(Object key1, Object key2)
    parameters:
    - id: key1
      type: java.lang.Object
      description: the first key to compare passed in from outside
    - id: key2
      type: java.lang.Object
      description: the second key extracted from the entry via <code>entry.key</code>
    return:
      type: boolean
      description: true if equal
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualValue(java.lang.Object,java.lang.Object)
  id: isEqualValue(java.lang.Object,java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: isEqualValue(Object value1, Object value2)
  nameWithType: AbstractHashedMap<K,V>.isEqualValue(Object value1, Object value2)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.isEqualValue(Object value1, Object value2)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualValue*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Compares two values, in external form, to see if they are equal. This implementation uses the equals method and assumes neither value is null. Subclasses can override this to match differently.
  syntax:
    content: protected boolean isEqualValue(Object value1, Object value2)
    parameters:
    - id: value1
      type: java.lang.Object
      description: the first value to compare passed in from outside
    - id: value2
      type: java.lang.Object
      description: the second value extracted from the entry via <code>getValue()</code>
    return:
      type: boolean
      description: true if equal
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.keySet()
  id: keySet()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: keySet()
  nameWithType: AbstractHashedMap<K,V>.keySet()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.keySet()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.keySet*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the keySet view of the map. Changes made to the view affect this map. To simply iterate through the keys, use <xref uid="com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator()" data-throw-if-not-resolved="false">#mapIterator()</xref>.
  syntax:
    content: public Set<K> keySet()
    return:
      type: java.util.Set<K>
      description: the keySet view
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator()
  id: mapIterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: mapIterator()
  nameWithType: AbstractHashedMap<K,V>.mapIterator()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.mapIterator()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Gets an iterator over the map. Changes made to the iterator affect this map.


    A MapIterator returns the keys in the map. It also provides convenient methods to get the key and value, and set the value. It avoids the need to create an entrySet/keySet/values object. It also avoids creating the Map.Entry object.
  syntax:
    content: public MapIterator<K,V> mapIterator()
    return:
      type: com.azure.cosmos.implementation.apachecommons.collections.MapIterator<K,V>
      description: the map iterator
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.put(K,V)
  id: put(K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: put(K key, V value)
  nameWithType: AbstractHashedMap<K,V>.put(K key, V value)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.put(K key, V value)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.put*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Puts a key-value mapping into this map.
  syntax:
    content: public V put(K key, V value)
    parameters:
    - id: key
      type: K
      description: the key to add
    - id: value
      type: V
      description: the value to add
    return:
      type: V
      description: the value previously mapped to this key, null if none
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.putAll(java.util.Map<? extends K,? extends V>)
  id: putAll(java.util.Map<? extends K,? extends V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: putAll(Map<? extends K,? extends V> map)
  nameWithType: AbstractHashedMap<K,V>.putAll(Map<? extends K,? extends V> map)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.putAll(Map<? extends K,? extends V> map)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.putAll*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Puts all the values from the specified map into this map.


    This implementation iterates around the specified map and uses <xref uid="com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.put*" data-throw-if-not-resolved="false">#put(Object, Object)</xref>.
  syntax:
    content: public void putAll(Map<? extends K,? extends V> map)
    parameters:
    - id: map
      type: java.util.Map<? extends K,? extends V>
      description: the map to add
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.remove(java.lang.Object)
  id: remove(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: remove(Object key)
  nameWithType: AbstractHashedMap<K,V>.remove(Object key)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.remove(Object key)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.remove*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Removes the specified mapping from this map.
  syntax:
    content: public V remove(Object key)
    parameters:
    - id: key
      type: java.lang.Object
      description: the mapping to remove
    return:
      type: V
      description: the value mapped to the removed key, null if key not in map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: removeEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: removeEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
  nameWithType: AbstractHashedMap<K,V>.removeEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.removeEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Removes an entry from the chain stored in a particular index.


    This implementation removes the entry from the data storage table. The size is not updated. Subclasses could override to handle changes to the map.
  syntax:
    content: protected void removeEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to remove
    - id: hashIndex
      type: int
      description: the index into the data structure
    - id: previous
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the previous entry in the chain
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeMapping(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  id: removeMapping(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: removeMapping(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
  nameWithType: AbstractHashedMap<K,V>.removeMapping(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.removeMapping(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeMapping*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Removes a mapping from the map.


    This implementation calls `removeEntry()` and `destroyEntry()`. It also handles changes to `modCount` and `size`. Subclasses could override to fully control removals from the map.
  syntax:
    content: protected void removeMapping(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, AbstractHashedMap.HashEntry<K,V> previous)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to remove
    - id: hashIndex
      type: int
      description: the index into the data structure
    - id: previous
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the previous entry in the chain
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.reuseEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,int,K,V)
  id: reuseEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,int,int,K,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: reuseEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, int hashCode, K key, V value)
  nameWithType: AbstractHashedMap<K,V>.reuseEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, int hashCode, K key, V value)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.reuseEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, int hashCode, K key, V value)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.reuseEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Reuses an existing key-value mapping, storing completely new data.


    This implementation sets all the data fields on the entry. Subclasses could populate additional entry fields.
  syntax:
    content: protected void reuseEntry(AbstractHashedMap.HashEntry<K,V> entry, int hashIndex, int hashCode, K key, V value)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to update, not null
    - id: hashIndex
      type: int
      description: the index in the data array
    - id: hashCode
      type: int
      description: the hash code of the key to add
    - id: key
      type: K
      description: the key to add
    - id: value
      type: V
      description: the value to add
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: size()
  nameWithType: AbstractHashedMap<K,V>.size()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.size()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.size*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the size of the map.
  syntax:
    content: public int size()
    return:
      type: int
      description: the size
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.toString()
  id: toString()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: toString()
  nameWithType: AbstractHashedMap<K,V>.toString()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.toString()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.toString*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the map as a String.
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
      description: a string version of the map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.updateEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,V)
  id: updateEntry(com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>,V)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: updateEntry(AbstractHashedMap.HashEntry<K,V> entry, V newValue)
  nameWithType: AbstractHashedMap<K,V>.updateEntry(AbstractHashedMap.HashEntry<K,V> entry, V newValue)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.updateEntry(AbstractHashedMap.HashEntry<K,V> entry, V newValue)
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.updateEntry*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: >-
    Updates an existing key-value mapping to change the value.


    This implementation calls `setValue()` on the entry. Subclasses could override to handle changes to the map.
  syntax:
    content: protected void updateEntry(AbstractHashedMap.HashEntry<K,V> entry, V newValue)
    parameters:
    - id: entry
      type: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
      description: the entry to update
    - id: newValue
      type: V
      description: the new value to store
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.values()
  id: values()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  langs:
  - java
  name: values()
  nameWithType: AbstractHashedMap<K,V>.values()
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.values()
  overload: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.values*
  type: Method
  package: com.azure.cosmos.implementation.apachecommons.collections.map
  summary: Gets the values view of the map. Changes made to the view affect this map. To simply iterate through the values, use <xref uid="com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator()" data-throw-if-not-resolved="false">#mapIterator()</xref>.
  syntax:
    content: public Collection<V> values()
    return:
      type: java.util.Collection<V>
      description: the values view
references:
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.AbstractHashedMap*
  name: AbstractHashedMap
  nameWithType: AbstractHashedMap<K,V>.AbstractHashedMap
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.AbstractHashedMap
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: java.util.Map<? extends K,? extends V>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: '? extends K'
    name: '? extends K'
    fullName: '? extends K'
  - name: ','
    fullName: ','
  - uid: '? extends V'
    name: '? extends V'
    fullName: '? extends V'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.init*
  name: init
  nameWithType: AbstractHashedMap<K,V>.init
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.init
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.get*
  name: get
  nameWithType: AbstractHashedMap<K,V>.get
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.get
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.size*
  name: size
  nameWithType: AbstractHashedMap<K,V>.size
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.size
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEmpty*
  name: isEmpty
  nameWithType: AbstractHashedMap<K,V>.isEmpty
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.isEmpty
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsKey*
  name: containsKey
  nameWithType: AbstractHashedMap<K,V>.containsKey
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.containsKey
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.containsValue*
  name: containsValue
  nameWithType: AbstractHashedMap<K,V>.containsValue
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.containsValue
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: K
  spec.java:
  - uid: K
    name: K
    fullName: K
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.put*
  name: put
  nameWithType: AbstractHashedMap<K,V>.put
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.put
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.putAll*
  name: putAll
  nameWithType: AbstractHashedMap<K,V>.putAll
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.putAll
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.remove*
  name: remove
  nameWithType: AbstractHashedMap<K,V>.remove
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.remove
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clear*
  name: clear
  nameWithType: AbstractHashedMap<K,V>.clear
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.clear
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.convertKey*
  name: convertKey
  nameWithType: AbstractHashedMap<K,V>.convertKey
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.convertKey
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hash*
  name: hash
  nameWithType: AbstractHashedMap<K,V>.hash
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.hash
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualKey*
  name: isEqualKey
  nameWithType: AbstractHashedMap<K,V>.isEqualKey
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.isEqualKey
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.isEqualValue*
  name: isEqualValue
  nameWithType: AbstractHashedMap<K,V>.isEqualValue
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.isEqualValue
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashIndex*
  name: hashIndex
  nameWithType: AbstractHashedMap<K,V>.hashIndex
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.hashIndex
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry
    name: HashEntry
    fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.getEntry*
  name: getEntry
  nameWithType: AbstractHashedMap<K,V>.getEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.getEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.updateEntry*
  name: updateEntry
  nameWithType: AbstractHashedMap<K,V>.updateEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.updateEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.reuseEntry*
  name: reuseEntry
  nameWithType: AbstractHashedMap<K,V>.reuseEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.reuseEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addMapping*
  name: addMapping
  nameWithType: AbstractHashedMap<K,V>.addMapping
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.addMapping
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntry*
  name: createEntry
  nameWithType: AbstractHashedMap<K,V>.createEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.addEntry*
  name: addEntry
  nameWithType: AbstractHashedMap<K,V>.addEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.addEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeMapping*
  name: removeMapping
  nameWithType: AbstractHashedMap<K,V>.removeMapping
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.removeMapping
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.removeEntry*
  name: removeEntry
  nameWithType: AbstractHashedMap<K,V>.removeEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.removeEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.destroyEntry*
  name: destroyEntry
  nameWithType: AbstractHashedMap<K,V>.destroyEntry
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.destroyEntry
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.checkCapacity*
  name: checkCapacity
  nameWithType: AbstractHashedMap<K,V>.checkCapacity
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.checkCapacity
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ensureCapacity*
  name: ensureCapacity
  nameWithType: AbstractHashedMap<K,V>.ensureCapacity
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.ensureCapacity
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateNewCapacity*
  name: calculateNewCapacity
  nameWithType: AbstractHashedMap<K,V>.calculateNewCapacity
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.calculateNewCapacity
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.calculateThreshold*
  name: calculateThreshold
  nameWithType: AbstractHashedMap<K,V>.calculateThreshold
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.calculateThreshold
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryNext*
  name: entryNext
  nameWithType: AbstractHashedMap<K,V>.entryNext
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryNext
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryHashCode*
  name: entryHashCode
  nameWithType: AbstractHashedMap<K,V>.entryHashCode
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryHashCode
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryKey*
  name: entryKey
  nameWithType: AbstractHashedMap<K,V>.entryKey
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryKey
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entryValue*
  name: entryValue
  nameWithType: AbstractHashedMap<K,V>.entryValue
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entryValue
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.MapIterator<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.apachecommons.collections.MapIterator
    name: MapIterator
    fullName: com.azure.cosmos.implementation.apachecommons.collections.MapIterator
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.mapIterator*
  name: mapIterator
  nameWithType: AbstractHashedMap<K,V>.mapIterator
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.mapIterator
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.Set<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.entrySet*
  name: entrySet
  nameWithType: AbstractHashedMap<K,V>.entrySet
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.entrySet
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.Iterator<java.util.Map.Entry<K,V>>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: java.util.Map.Entry
    name: Entry
    fullName: java.util.Map.Entry
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createEntrySetIterator*
  name: createEntrySetIterator
  nameWithType: AbstractHashedMap<K,V>.createEntrySetIterator
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createEntrySetIterator
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.Set<K>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.keySet*
  name: keySet
  nameWithType: AbstractHashedMap<K,V>.keySet
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.keySet
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.Iterator<K>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createKeySetIterator*
  name: createKeySetIterator
  nameWithType: AbstractHashedMap<K,V>.createKeySetIterator
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createKeySetIterator
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.Collection<V>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.values*
  name: values
  nameWithType: AbstractHashedMap<K,V>.values
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.values
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.Iterator<V>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.createValuesIterator*
  name: createValuesIterator
  nameWithType: AbstractHashedMap<K,V>.createValuesIterator
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.createValuesIterator
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.io.ObjectOutputStream
  spec.java:
  - uid: java.io.ObjectOutputStream
    name: ObjectOutputStream
    fullName: java.io.ObjectOutputStream
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doWriteObject*
  name: doWriteObject
  nameWithType: AbstractHashedMap<K,V>.doWriteObject
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.doWriteObject
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.lang.ClassNotFoundException
  spec.java:
  - uid: java.lang.ClassNotFoundException
    name: ClassNotFoundException
    fullName: java.lang.ClassNotFoundException
- uid: java.io.ObjectInputStream
  spec.java:
  - uid: java.io.ObjectInputStream
    name: ObjectInputStream
    fullName: java.io.ObjectInputStream
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doReadObject*
  name: doReadObject
  nameWithType: AbstractHashedMap<K,V>.doReadObject
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.doReadObject
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>
  spec.java:
  - uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
    name: AbstractHashedMap
    fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap
  - name: <
    fullName: <
  - uid: K
    name: K
    fullName: K
  - name: ','
    fullName: ','
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.clone*
  name: clone
  nameWithType: AbstractHashedMap<K,V>.clone
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.clone
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.equals*
  name: equals
  nameWithType: AbstractHashedMap<K,V>.equals
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.equals
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.hashCode*
  name: hashCode
  nameWithType: AbstractHashedMap<K,V>.hashCode
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.hashCode
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.toString*
  name: toString
  nameWithType: AbstractHashedMap<K,V>.toString
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.toString
  package: com.azure.cosmos.implementation.apachecommons.collections.map
- uid: java.util.AbstractMap<K,V>
  name: AbstractMap<K,V>
  nameWithType: AbstractMap<K,V>
  fullName: java.util.AbstractMap<K,V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.IterableMap<K,V>
  name: IterableMap<K,V>
  nameWithType: IterableMap<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.IterableMap<K,V>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractMap.put(K,V)
  name: AbstractMap.put(K,V)
  nameWithType: AbstractMap.put(K,V)
  fullName: java.util.AbstractMap.put(K,V)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.AbstractMap.hashCode()
  name: AbstractMap.hashCode()
  nameWithType: AbstractMap.hashCode()
  fullName: java.util.AbstractMap.hashCode()
- uid: java.util.AbstractMap.remove(java.lang.Object)
  name: AbstractMap.remove(Object)
  nameWithType: AbstractMap.remove(Object)
  fullName: java.util.AbstractMap.remove(java.lang.Object)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.AbstractMap.size()
  name: AbstractMap.size()
  nameWithType: AbstractMap.size()
  fullName: java.util.AbstractMap.size()
- uid: java.util.AbstractMap.get(java.lang.Object)
  name: AbstractMap.get(Object)
  nameWithType: AbstractMap.get(Object)
  fullName: java.util.AbstractMap.get(java.lang.Object)
- uid: java.util.AbstractMap.entrySet()
  name: AbstractMap.entrySet()
  nameWithType: AbstractMap.entrySet()
  fullName: java.util.AbstractMap.entrySet()
- uid: java.util.AbstractMap.clear()
  name: AbstractMap.clear()
  nameWithType: AbstractMap.clear()
  fullName: java.util.AbstractMap.clear()
- uid: java.util.AbstractMap.toString()
  name: AbstractMap.toString()
  nameWithType: AbstractMap.toString()
  fullName: java.util.AbstractMap.toString()
- uid: java.util.AbstractMap.clone()
  name: AbstractMap.clone()
  nameWithType: AbstractMap.clone()
  fullName: java.util.AbstractMap.clone()
- uid: java.util.AbstractMap.keySet()
  name: AbstractMap.keySet()
  nameWithType: AbstractMap.keySet()
  fullName: java.util.AbstractMap.keySet()
- uid: java.util.AbstractMap.equals(java.lang.Object)
  name: AbstractMap.equals(Object)
  nameWithType: AbstractMap.equals(Object)
  fullName: java.util.AbstractMap.equals(java.lang.Object)
- uid: java.util.AbstractMap.containsValue(java.lang.Object)
  name: AbstractMap.containsValue(Object)
  nameWithType: AbstractMap.containsValue(Object)
  fullName: java.util.AbstractMap.containsValue(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.util.AbstractMap.isEmpty()
  name: AbstractMap.isEmpty()
  nameWithType: AbstractMap.isEmpty()
  fullName: java.util.AbstractMap.isEmpty()
- uid: java.util.AbstractMap.values()
  name: AbstractMap.values()
  nameWithType: AbstractMap.values()
  fullName: java.util.AbstractMap.values()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>)
  name: AbstractMap.putAll(Map<? extends K,? extends V>)
  nameWithType: AbstractMap.putAll(Map<? extends K,? extends V>)
  fullName: java.util.AbstractMap.putAll(java.util.Map<? extends K,? extends V>)
- uid: java.util.AbstractMap.containsKey(java.lang.Object)
  name: AbstractMap.containsKey(Object)
  nameWithType: AbstractMap.containsKey(Object)
  fullName: java.util.AbstractMap.containsKey(java.lang.Object)
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.EntrySet
  name: AbstractHashedMap.EntrySet<K,V>
  nameWithType: AbstractHashedMap.EntrySet<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.EntrySet<K,V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.EntrySetIterator
  name: AbstractHashedMap.EntrySetIterator<K,V>
  nameWithType: AbstractHashedMap.EntrySetIterator<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.EntrySetIterator<K,V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry
  name: AbstractHashedMap.HashEntry<K,V>
  nameWithType: AbstractHashedMap.HashEntry<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashEntry<K,V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashIterator
  name: AbstractHashedMap.HashIterator<K,V>
  nameWithType: AbstractHashedMap.HashIterator<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashIterator<K,V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashMapIterator
  name: AbstractHashedMap.HashMapIterator<K,V>
  nameWithType: AbstractHashedMap.HashMapIterator<K,V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.HashMapIterator<K,V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.KeySet
  name: AbstractHashedMap.KeySet<K>
  nameWithType: AbstractHashedMap.KeySet<K>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.KeySet<K>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.KeySetIterator
  name: AbstractHashedMap.KeySetIterator<K>
  nameWithType: AbstractHashedMap.KeySetIterator<K>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.KeySetIterator<K>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.Values
  name: AbstractHashedMap.Values<V>
  nameWithType: AbstractHashedMap.Values<V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.Values<V>
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ValuesIterator
  name: AbstractHashedMap.ValuesIterator<V>
  nameWithType: AbstractHashedMap.ValuesIterator<V>
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.ValuesIterator<V>
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: '? extends K,? extends V'
  name: '? extends K,? extends V'
  nameWithType: '? extends K,? extends V'
  fullName: '? extends K,? extends V'
- uid: K,V
  name: K,V
  nameWithType: K,V
  fullName: K,V
- uid: com.azure.cosmos.implementation.apachecommons.collections.MapIterator
  name: MapIterator
  nameWithType: MapIterator
  fullName: com.azure.cosmos.implementation.apachecommons.collections.MapIterator
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.AbstractMap
  name: AbstractMap
  nameWithType: AbstractMap
  fullName: java.util.AbstractMap
- uid: com.azure.cosmos.implementation.apachecommons.collections.IterableMap
  name: IterableMap
  nameWithType: IterableMap
  fullName: com.azure.cosmos.implementation.apachecommons.collections.IterableMap
- uid: java.util.AbstractMap.putAll(java.util.Map
  name: AbstractMap.putAll(Map
  nameWithType: AbstractMap.putAll(Map
  fullName: java.util.AbstractMap.putAll(java.util.Map
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
