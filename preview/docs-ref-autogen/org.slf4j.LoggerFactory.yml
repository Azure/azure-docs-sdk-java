### YamlMime:ManagedReference
items:
- uid: org.slf4j.LoggerFactory
  id: LoggerFactory
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j
  children:
  - org.slf4j.LoggerFactory.getILoggerFactory()
  - org.slf4j.LoggerFactory.getLogger(java.lang.Class<?>)
  - org.slf4j.LoggerFactory.getLogger(java.lang.String)
  langs:
  - java
  name: LoggerFactory
  nameWithType: LoggerFactory
  fullName: org.slf4j.LoggerFactory
  type: Class
  package: org.slf4j
  summary: >-
    The `LoggerFactory` is a utility class producing Loggers for various logging APIs, most notably for log4j, logback and JDK 1.4 logging. Other implementations such as <xref uid="" data-throw-if-not-resolved="false">NOPLogger</xref> and <xref uid="" data-throw-if-not-resolved="false">SimpleLogger</xref> are also supported.


    `LoggerFactory` is essentially a wrapper around an <xref uid="org.slf4j.ILoggerFactory" data-throw-if-not-resolved="false">ILoggerFactory</xref> instance bound with `LoggerFactory` at compile time.


    Please note that all methods in `LoggerFactory` are static.
  syntax:
    content: public final class LoggerFactory
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.slf4j.LoggerFactory.LoggerFactory()
  id: LoggerFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.LoggerFactory
  langs:
  - java
  name: LoggerFactory()
  nameWithType: LoggerFactory.LoggerFactory()
  fullName: org.slf4j.LoggerFactory.LoggerFactory()
  overload: org.slf4j.LoggerFactory.LoggerFactory*
  type: Constructor
  package: org.slf4j
  syntax:
    content: private LoggerFactory()
- uid: org.slf4j.LoggerFactory.getILoggerFactory()
  id: getILoggerFactory()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.LoggerFactory
  langs:
  - java
  name: getILoggerFactory()
  nameWithType: LoggerFactory.getILoggerFactory()
  fullName: org.slf4j.LoggerFactory.getILoggerFactory()
  overload: org.slf4j.LoggerFactory.getILoggerFactory*
  type: Method
  package: org.slf4j
  summary: >-
    Return the <xref uid="org.slf4j.ILoggerFactory" data-throw-if-not-resolved="false">ILoggerFactory</xref> instance in use.


    ILoggerFactory instance is bound with this class at compile time.
  syntax:
    content: public static ILoggerFactory getILoggerFactory()
    return:
      type: org.slf4j.ILoggerFactory
      description: the ILoggerFactory instance in use
- uid: org.slf4j.LoggerFactory.getLogger(java.lang.Class<?>)
  id: getLogger(java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.LoggerFactory
  langs:
  - java
  name: getLogger(Class<?> clazz)
  nameWithType: LoggerFactory.getLogger(Class<?> clazz)
  fullName: org.slf4j.LoggerFactory.getLogger(Class<?> clazz)
  overload: org.slf4j.LoggerFactory.getLogger*
  type: Method
  package: org.slf4j
  summary: >-
    Return a logger named corresponding to the class passed as parameter, using the statically bound <xref uid="org.slf4j.ILoggerFactory" data-throw-if-not-resolved="false">ILoggerFactory</xref> instance.


    In case the the `clazz` parameter differs from the name of the caller as computed internally by SLF4J, a logger name mismatch warning will be printed but only if the `slf4j.detectLoggerNameMismatch` system property is set to true. By default, this property is not set and no warnings will be printed even in case of a logger name mismatch.
  syntax:
    content: public static Logger getLogger(Class<?> clazz)
    parameters:
    - id: clazz
      type: java.lang.Class<?>
      description: the returned logger will be named after clazz
    return:
      type: org.slf4j.Logger
      description: logger
- uid: org.slf4j.LoggerFactory.getLogger(java.lang.String)
  id: getLogger(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.slf4j.LoggerFactory
  langs:
  - java
  name: getLogger(String name)
  nameWithType: LoggerFactory.getLogger(String name)
  fullName: org.slf4j.LoggerFactory.getLogger(String name)
  overload: org.slf4j.LoggerFactory.getLogger*
  type: Method
  package: org.slf4j
  summary: Return a logger named according to the name parameter using the statically bound <xref uid="org.slf4j.ILoggerFactory" data-throw-if-not-resolved="false">ILoggerFactory</xref> instance.
  syntax:
    content: public static Logger getLogger(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: The name of the logger.
    return:
      type: org.slf4j.Logger
      description: logger
references:
- uid: org.slf4j.LoggerFactory.LoggerFactory*
  name: LoggerFactory
  nameWithType: LoggerFactory.LoggerFactory
  fullName: org.slf4j.LoggerFactory.LoggerFactory
  package: org.slf4j
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.slf4j.Logger
  name: Logger
  nameWithType: Logger
  fullName: org.slf4j.Logger
- uid: org.slf4j.LoggerFactory.getLogger*
  name: getLogger
  nameWithType: LoggerFactory.getLogger
  fullName: org.slf4j.LoggerFactory.getLogger
  package: org.slf4j
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: org.slf4j.ILoggerFactory
  name: ILoggerFactory
  nameWithType: ILoggerFactory
  fullName: org.slf4j.ILoggerFactory
- uid: org.slf4j.LoggerFactory.getILoggerFactory*
  name: getILoggerFactory
  nameWithType: LoggerFactory.getILoggerFactory
  fullName: org.slf4j.LoggerFactory.getILoggerFactory
  package: org.slf4j
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
