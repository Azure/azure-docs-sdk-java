### YamlMime:JavaType
uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient"
fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient"
name: "ScenesBaseClient"
nameWithType: "ScenesBaseClient"
summary: "Initializes a new instance of the Scenes<wbr>Base<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ScenesBaseClient"
methods:
- uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient.createSatelliteDataIngestionJob(java.lang.String)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient.createSatelliteDataIngestionJob(String jobId)"
  name: "createSatelliteDataIngestionJob(String jobId)"
  nameWithType: "ScenesBaseClient.createSatelliteDataIngestionJob(String jobId)"
  summary: "Create a satellite data ingestion job."
  parameters:
  - description: "JobId provided by user."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DynamicRequest createSatelliteDataIngestionJob(String jobId)"
  desc: "Create a satellite data ingestion job.\n\n**Request Body Schema**\n\n```java\n{\n     farmerId: String\n     boundaryId: String\n     startDateTime: OffsetDateTime\n     endDateTime: OffsetDateTime\n     provider: String(Microsoft)\n     source: String(Sentinel_2_L2A)\n     data: {\n         imageNames: [\n             String\n         ]\n         imageFormats: [\n             String\n         ]\n         imageResolutions: [\n             double\n         ]\n     }\n     id: String\n     status: String\n     durationInSeconds: Double\n     message: String\n     createdDateTime: OffsetDateTime\n     lastActionDateTime: OffsetDateTime\n     startTime: OffsetDateTime\n     endTime: OffsetDateTime\n     name: String\n     description: String\n     properties: {\n         String: Object\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n(recursive schema, see above)\n```"
  returns:
    description: "a DynamicRequest where customizations can be made before sent to the service."
    type: "<xref href=\"com.azure.core.experimental.http.DynamicRequest?alt=com.azure.core.experimental.http.DynamicRequest&text=DynamicRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient.download(java.lang.String)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient.download(String filePath)"
  name: "download(String filePath)"
  nameWithType: "ScenesBaseClient.download(String filePath)"
  summary: "Downloads and returns file stream as response for the given input file<wbr>Path."
  parameters:
  - description: "cloud storage path of scene file."
    name: "filePath"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DynamicRequest download(String filePath)"
  desc: "Downloads and returns file stream as response for the given input filePath."
  returns:
    description: "a DynamicRequest where customizations can be made before sent to the service."
    type: "<xref href=\"com.azure.core.experimental.http.DynamicRequest?alt=com.azure.core.experimental.http.DynamicRequest&text=DynamicRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient.getSatelliteDataIngestionJobDetails(java.lang.String)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient.getSatelliteDataIngestionJobDetails(String jobId)"
  name: "getSatelliteDataIngestionJobDetails(String jobId)"
  nameWithType: "ScenesBaseClient.getSatelliteDataIngestionJobDetails(String jobId)"
  summary: "Get a satellite data ingestion job."
  parameters:
  - description: "ID of the job."
    name: "jobId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DynamicRequest getSatelliteDataIngestionJobDetails(String jobId)"
  desc: "Get a satellite data ingestion job.\n\n**Response Body Schema**\n\n```java\n{\n     farmerId: String\n     boundaryId: String\n     startDateTime: OffsetDateTime\n     endDateTime: OffsetDateTime\n     provider: String(Microsoft)\n     source: String(Sentinel_2_L2A)\n     data: {\n         imageNames: [\n             String\n         ]\n         imageFormats: [\n             String\n         ]\n         imageResolutions: [\n             double\n         ]\n     }\n     id: String\n     status: String\n     durationInSeconds: Double\n     message: String\n     createdDateTime: OffsetDateTime\n     lastActionDateTime: OffsetDateTime\n     startTime: OffsetDateTime\n     endTime: OffsetDateTime\n     name: String\n     description: String\n     properties: {\n         String: Object\n     }\n }\n```"
  returns:
    description: "a DynamicRequest where customizations can be made before sent to the service."
    type: "<xref href=\"com.azure.core.experimental.http.DynamicRequest?alt=com.azure.core.experimental.http.DynamicRequest&text=DynamicRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient.invoke()"
  fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient.invoke()"
  name: "invoke()"
  nameWithType: "ScenesBaseClient.invoke()"
  summary: "Create an empty Dynamic<wbr>Request with the serializer and pipeline initialized for this client."
  syntax: "public DynamicRequest invoke()"
  desc: "Create an empty DynamicRequest with the serializer and pipeline initialized for this client."
  returns:
    description: "a DynamicRequest where customizations can be made before sent to the service."
    type: "<xref href=\"com.azure.core.experimental.http.DynamicRequest?alt=com.azure.core.experimental.http.DynamicRequest&text=DynamicRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient.list(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient.list(String provider, String farmerId, String boundaryId)"
  name: "list(String provider, String farmerId, String boundaryId)"
  nameWithType: "ScenesBaseClient.list(String provider, String farmerId, String boundaryId)"
  summary: "Returns a paginated list of scene resources."
  parameters:
  - description: "Provider name of scene data."
    name: "provider"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "FarmerId."
    name: "farmerId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "BoundaryId."
    name: "boundaryId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DynamicRequest list(String provider, String farmerId, String boundaryId)"
  desc: "Returns a paginated list of scene resources.\n\n**Optional Query Parameters**\n\n    | ------------------------------ | -------------- | --------------------------------------------------------------------------------------------- |\n    | Name                           | Type           | Description                                                                                   |\n    | source                         | String         | Source name of scene data, default value Sentinel\\_2\\_L2A (Sentinel 2 L2A).                   |\n    | startDateTime                  | OffsetDateTime | Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ.                    |\n    | endDateTime                    | OffsetDateTime | Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ.                       |\n    | maxCloudCoveragePercentage     | Double         | Filter scenes with cloud coverage percentage less than max value. Range \\[0 to 100.0\\].       |\n    | maxDarkPixelCoveragePercentage | Double         | Filter scenes with dark pixel coverage percentage less than max value. Range \\[0 to 100.0\\].  |\n    | imageNames                     | List<String>   | List of image names to be filtered.                                                           |\n    | imageResolutions               | List<Double>   | List of image resolutions in meters to be filtered.                                           |\n    | imageFormats                   | List<String>   | List of image formats to be filtered.                                                         |\n    | maxPageSize                    | Integer        | Maximum number of items needed (inclusive). Minimum = 10, Maximum = 1000, Default value = 50. |\n    | skipToken                      | String         | Skip token for getting next set of results.                                                   |\n\n**Response Body Schema**\n\n```java\n{\n     value: [\n         {\n             sceneDateTime: OffsetDateTime\n             provider: String\n             source: String\n             imageFiles: [\n                 {\n                     fileLink: String\n                     name: String\n                     imageFormat: String(TIF)\n                     resolution: Double\n                 }\n             ]\n             imageFormat: String(TIF)\n             cloudCoverPercentage: Double\n             darkPixelPercentage: Double\n             ndviMedianValue: Double\n             boundaryId: String\n             farmerId: String\n             id: String\n             eTag: String\n         }\n     ]\n     skipToken: String\n     nextLink: String\n }\n```"
  returns:
    description: "a DynamicRequest where customizations can be made before sent to the service."
    type: "<xref href=\"com.azure.core.experimental.http.DynamicRequest?alt=com.azure.core.experimental.http.DynamicRequest&text=DynamicRequest\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.verticals.agrifood.farming.ScenesBaseClient.listNext(java.lang.String)"
  fullName: "com.azure.verticals.agrifood.farming.ScenesBaseClient.listNext(String nextLink)"
  name: "listNext(String nextLink)"
  nameWithType: "ScenesBaseClient.listNext(String nextLink)"
  summary: "Get the next page of items."
  parameters:
  - description: "The nextLink parameter."
    name: "nextLink"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public DynamicRequest listNext(String nextLink)"
  desc: "Get the next page of items.\n\n**Response Body Schema**\n\n```java\n{\n     value: [\n         {\n             sceneDateTime: OffsetDateTime\n             provider: String\n             source: String\n             imageFiles: [\n                 {\n                     fileLink: String\n                     name: String\n                     imageFormat: String(TIF)\n                     resolution: Double\n                 }\n             ]\n             imageFormat: String(TIF)\n             cloudCoverPercentage: Double\n             darkPixelPercentage: Double\n             ndviMedianValue: Double\n             boundaryId: String\n             farmerId: String\n             id: String\n             eTag: String\n         }\n     ]\n     skipToken: String\n     nextLink: String\n }\n```"
  returns:
    description: "a DynamicRequest where customizations can be made before sent to the service."
    type: "<xref href=\"com.azure.core.experimental.http.DynamicRequest?alt=com.azure.core.experimental.http.DynamicRequest&text=DynamicRequest\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Initializes a new instance of the ScenesBaseClient type."
metadata: {}
package: "com.azure.verticals.agrifood.farming"
artifact: com.azure:azure-verticals-agrifood-farming:1.0.0-beta.2
