### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Streams.concat*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat"
name: "<T>concat"
nameWithType: "Streams.<T>concat"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat(java.util.stream.Stream<? extends T>...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.<T>concat(Stream<? extends T>[] streams)"
  name: "<T>concat(Stream<? extends T>[] streams)"
  nameWithType: "Streams.<T>concat(Stream<? extends T>[] streams)"
  summary: "Returns a <xref uid=\"java.util.stream.Stream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Stream\"></xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.\n\nThis is equivalent to `Stream.of(streams).flatMap(stream -> stream)`, but the returned stream may perform better."
  parameters:
  - name: "streams"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends T?alt=? extends T&text=? extends T\" data-throw-if-not-resolved=\"False\" />&gt;[]"
  syntax: "public static Stream<T> <T>concat(Stream<? extends T>[] streams)"
  returns:
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.DoubleStream...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.concat(DoubleStream[] streams)"
  name: "concat(DoubleStream[] streams)"
  nameWithType: "Streams.concat(DoubleStream[] streams)"
  summary: "Returns a <xref uid=\"java.util.stream.DoubleStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DoubleStream\"></xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.\n\nThis is equivalent to `Stream.of(streams).flatMapToDouble(stream -> stream)`, but the returned stream may perform better."
  parameters:
  - name: "streams"
    type: "<xref href=\"java.util.stream.DoubleStream?alt=java.util.stream.DoubleStream&text=DoubleStream\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static DoubleStream concat(DoubleStream[] streams)"
  returns:
    type: "<xref href=\"java.util.stream.DoubleStream?alt=java.util.stream.DoubleStream&text=DoubleStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.IntStream...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.concat(IntStream[] streams)"
  name: "concat(IntStream[] streams)"
  nameWithType: "Streams.concat(IntStream[] streams)"
  summary: "Returns an <xref uid=\"java.util.stream.IntStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IntStream\"></xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.\n\nThis is equivalent to `Stream.of(streams).flatMapToInt(stream -> stream)`, but the returned stream may perform better."
  parameters:
  - name: "streams"
    type: "<xref href=\"java.util.stream.IntStream?alt=java.util.stream.IntStream&text=IntStream\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static IntStream concat(IntStream[] streams)"
  returns:
    type: "<xref href=\"java.util.stream.IntStream?alt=java.util.stream.IntStream&text=IntStream\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.collect.Streams.concat(java.util.stream.LongStream...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.concat(LongStream[] streams)"
  name: "concat(LongStream[] streams)"
  nameWithType: "Streams.concat(LongStream[] streams)"
  summary: "Returns a <xref uid=\"java.util.stream.LongStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LongStream\"></xref> containing the elements of the first stream, followed by the elements of the second stream, and so on.\n\nThis is equivalent to `Stream.of(streams).flatMapToLong(stream -> stream)`, but the returned stream may perform better."
  parameters:
  - name: "streams"
    type: "<xref href=\"java.util.stream.LongStream?alt=java.util.stream.LongStream&text=LongStream\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static LongStream concat(LongStream[] streams)"
  returns:
    type: "<xref href=\"java.util.stream.LongStream?alt=java.util.stream.LongStream&text=LongStream\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
