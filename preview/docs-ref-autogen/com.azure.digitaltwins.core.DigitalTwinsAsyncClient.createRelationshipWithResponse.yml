### YamlMime:JavaMember
uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.createRelationshipWithResponse*"
fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createRelationshipWithResponse"
name: "<T>createRelationshipWithResponse"
nameWithType: "DigitalTwinsAsyncClient.<T>createRelationshipWithResponse"
members:
- uid: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createRelationshipWithResponse(java.lang.String,java.lang.String,T,java.lang.Class<T>)"
  fullName: "com.azure.digitaltwins.core.DigitalTwinsAsyncClient.<T>createRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  name: "<T>createRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  nameWithType: "DigitalTwinsAsyncClient.<T>createRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  summary: "Creates a relationship on a digital twin.\n\n**Code Samples**\n\nA strongly typed digital twin object such as <xref uid=\"com.azure.digitaltwins.core.models.BasicRelationship\" data-throw-if-not-resolved=\"false\">BasicRelationship</xref> can be provided as the input parameter to deserialize the response into.\n\n```java\nBasicRelationship buildingToFloorBasicRelationship = new BasicRelationship()\n     .setId(\"myRelationshipId\")\n     .setSourceId(\"mySourceDigitalTwinId\")\n     .setTargetId(\"myTargetDigitalTwinId\")\n     .setName(\"contains\")\n     .addCustomProperty(\"Prop1\", \"Prop1 value\")\n     .addCustomProperty(\"Prop2\", 6);\n \n digitalTwinsAsyncClient.createRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     buildingToFloorBasicRelationship,\n     BasicRelationship.class)\n .subscribe(createdRelationshipWithResponse -> System.out.println(\n     \"Created relationship with Id: \" +\n         createdRelationshipWithResponse.getValue().getId() +\n         \" from: \" + createdRelationshipWithResponse.getValue().getSourceId() +\n         \" to: \" + createdRelationshipWithResponse.getValue().getTargetId() +\n         \" Http status code: \" +\n         createdRelationshipWithResponse.getStatusCode()));\n```\n\nOr alternatively String can be used as input and output deserialization type:\n\n```java\nString relationshipPayload = getRelationshipPayload();\n \n digitalTwinsAsyncClient.createRelationshipWithResponse(\n     \"mySourceDigitalTwinId\",\n     \"myRelationshipId\",\n     relationshipPayload,\n     String.class)\n .subscribe(createdRelationshipStringWithResponse -> System.out.println(\n     \"Created relationship: \" +\n         createdRelationshipStringWithResponse +\n         \" With HTTP status code: \" +\n         createdRelationshipStringWithResponse.getStatusCode()));\n```"
  parameters:
  - description: "The Id of the source digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The Id of the relationship to be created."
    name: "relationshipId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The relationship to be created."
    name: "relationship"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "The model class of the relationship."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Mono<DigitalTwinsResponse<T>> <T>createRelationshipWithResponse(String digitalTwinId, String relationshipId, T relationship, Class<T> clazz)"
  returns:
    description: "A <xref uid=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse\" data-throw-if-not-resolved=\"false\">DigitalTwinsResponse</xref> containing the relationship created."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.digitaltwins.core.models.DigitalTwinsResponse?alt=com.azure.digitaltwins.core.models.DigitalTwinsResponse&text=DigitalTwinsResponse\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.digitaltwins.core"
artifact: com.azure:azure-digitaltwins-core:1.0.0-beta.3
