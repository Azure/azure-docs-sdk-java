### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  id: AbstractDeserializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser
  children:
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.deser.AbstractDeserializer,com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,com.fasterxml.jackson.databind.BeanDescription,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,com.fasterxml.jackson.databind.BeanDescription,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptBoolean
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptDouble
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptInt
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptString
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._backRefProperties
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._baseType
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeFromObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._objectIdReader
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer._properties
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.constructForNonPOJO(com.fasterxml.jackson.databind.BeanDescription)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.findBackReference(java.lang.String)
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.getObjectIdReader()
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.handledType()
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.isCachable()
  - com.fasterxml.jackson.databind.deser.AbstractDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  langs:
  - java
  name: AbstractDeserializer
  nameWithType: AbstractDeserializer
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  type: Class
  package: com.fasterxml.jackson.databind.deser
  summary: Deserializer only used for abstract types used as placeholders during polymorphic type handling deserialization. If so, there is no real deserializer associated with nominal type, just <xref uid="com.fasterxml.jackson.databind.jsontype.TypeDeserializer" data-throw-if-not-resolved="false">TypeDeserializer</xref>; and any calls that do not pass such resolver will result in an error.
  syntax:
    content: public class AbstractDeserializer extends JsonDeserializer<Object> implements ContextualDeserializer, Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonDeserializer
  implements:
  - com.fasterxml.jackson.databind.deser.ContextualDeserializer
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  - com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
  - com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
  - com.fasterxml.jackson.databind.JsonDeserializer.handledType()
  - com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
  - com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  - com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.BeanDescription)
  id: AbstractDeserializer(com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: AbstractDeserializer(BeanDescription beanDesc)
  nameWithType: AbstractDeserializer.AbstractDeserializer(BeanDescription beanDesc)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(BeanDescription beanDesc)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected AbstractDeserializer(BeanDescription beanDesc)
    parameters:
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.deser.AbstractDeserializer,com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  id: AbstractDeserializer(com.fasterxml.jackson.databind.deser.AbstractDeserializer,com.fasterxml.jackson.databind.deser.impl.ObjectIdReader,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: AbstractDeserializer(AbstractDeserializer base, ObjectIdReader objectIdReader, Map<String,SettableBeanProperty> props)
  nameWithType: AbstractDeserializer.AbstractDeserializer(AbstractDeserializer base, ObjectIdReader objectIdReader, Map<String,SettableBeanProperty> props)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(AbstractDeserializer base, ObjectIdReader objectIdReader, Map<String,SettableBeanProperty> props)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected AbstractDeserializer(AbstractDeserializer base, ObjectIdReader objectIdReader, Map<String,SettableBeanProperty> props)
    parameters:
    - id: base
      type: com.fasterxml.jackson.databind.deser.AbstractDeserializer
    - id: objectIdReader
      type: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
    - id: props
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,com.fasterxml.jackson.databind.BeanDescription,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  id: AbstractDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,com.fasterxml.jackson.databind.BeanDescription,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps)
  nameWithType: AbstractDeserializer.AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: public AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps)
    parameters:
    - id: builder
      type: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: backRefProps
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,com.fasterxml.jackson.databind.BeanDescription,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  id: AbstractDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder,com.fasterxml.jackson.databind.BeanDescription,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>,java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps, Map<String,SettableBeanProperty> props)
  nameWithType: AbstractDeserializer.AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps, Map<String,SettableBeanProperty> props)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps, Map<String,SettableBeanProperty> props)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: public AbstractDeserializer(BeanDeserializerBuilder builder, BeanDescription beanDesc, Map<String,SettableBeanProperty> backRefProps, Map<String,SettableBeanProperty> props)
    parameters:
    - id: builder
      type: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    - id: backRefProps
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
    - id: props
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
      description: >-
        Regular properties: currently only needed to support property-annotated
            Object Id handling with property inclusion (needed for determining type of Object Id
            to bind)
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptBoolean
  id: _acceptBoolean
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _acceptBoolean
  nameWithType: AbstractDeserializer._acceptBoolean
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptBoolean
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final boolean _acceptBoolean
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptDouble
  id: _acceptDouble
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _acceptDouble
  nameWithType: AbstractDeserializer._acceptDouble
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptDouble
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final boolean _acceptDouble
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptInt
  id: _acceptInt
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _acceptInt
  nameWithType: AbstractDeserializer._acceptInt
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptInt
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final boolean _acceptInt
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptString
  id: _acceptString
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _acceptString
  nameWithType: AbstractDeserializer._acceptString
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._acceptString
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final boolean _acceptString
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._backRefProperties
  id: _backRefProperties
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _backRefProperties
  nameWithType: AbstractDeserializer._backRefProperties
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._backRefProperties
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final Map<String,SettableBeanProperty> _backRefProperties
    return:
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._baseType
  id: _baseType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _baseType
  nameWithType: AbstractDeserializer._baseType
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._baseType
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final JavaType _baseType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeFromObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: _deserializeFromObjectId(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _deserializeFromObjectId(JsonParser p, DeserializationContext ctxt)
  nameWithType: AbstractDeserializer._deserializeFromObjectId(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeFromObjectId(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeFromObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: Method called in cases where it looks like we got an Object Id to parse and use as a reference.
  syntax:
    content: protected Object _deserializeFromObjectId(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: _deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _deserializeIfNatural(JsonParser p, DeserializationContext ctxt)
  nameWithType: AbstractDeserializer._deserializeIfNatural(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeIfNatural(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeIfNatural*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected Object _deserializeIfNatural(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._objectIdReader
  id: _objectIdReader
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _objectIdReader
  nameWithType: AbstractDeserializer._objectIdReader
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._objectIdReader
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected final ObjectIdReader _objectIdReader
    return:
      type: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._properties
  id: _properties
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: _properties
  nameWithType: AbstractDeserializer._properties
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._properties
  type: Field
  package: com.fasterxml.jackson.databind.deser
  syntax:
    content: protected transient Map<String,SettableBeanProperty> _properties
    return:
      type: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.constructForNonPOJO(com.fasterxml.jackson.databind.BeanDescription)
  id: constructForNonPOJO(com.fasterxml.jackson.databind.BeanDescription)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: constructForNonPOJO(BeanDescription beanDesc)
  nameWithType: AbstractDeserializer.constructForNonPOJO(BeanDescription beanDesc)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.constructForNonPOJO(BeanDescription beanDesc)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.constructForNonPOJO*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: Factory method used when constructing instances for non-POJO types, like <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>s.
  syntax:
    content: public static AbstractDeserializer constructForNonPOJO(BeanDescription beanDesc)
    parameters:
    - id: beanDesc
      type: com.fasterxml.jackson.databind.BeanDescription
    return:
      type: com.fasterxml.jackson.databind.deser.AbstractDeserializer
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)
  id: createContextual(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: createContextual(DeserializationContext ctxt, BeanProperty property)
  nameWithType: AbstractDeserializer.createContextual(DeserializationContext ctxt, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.createContextual(DeserializationContext ctxt, BeanProperty property)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.createContextual*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: Method called to see if a different (or differently configured) deserializer is needed to deserialize values of specified property. Note that instance that this method is called on is typically shared one and as a result method should **NOT** modify this instance but rather construct and return a new instance. This instance should only be returned as-is, in case it is already suitable for use.
  syntax:
    content: public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: deserialize(JsonParser p, DeserializationContext ctxt)
  nameWithType: AbstractDeserializer.deserialize(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles. Returned instance is to be constructed by method itself.


    Pre-condition for this method is that the parser points to the first event that is part of value to deserializer (and which is never JSON 'null' literal, more on this below): for simple types it may be the only value; and for structured types the Object start marker or a FIELD\_NAME.


    The two possible input conditions for structured types result from polymorphism via fields. In the ordinary case, Jackson calls this method when it has encountered an OBJECT\_START, and the method implementation must advance to the next token to see the first field name. If the application configures polymorphism via a field, then the object looks like the following.


    ```java

    {
              "@class": "class name",
              ...
          }
    ```


    Jackson consumes the two tokens (the @class field name and its value) in order to learn the class and select the deserializer. Thus, the stream is pointing to the FIELD\_NAME for the first field after the @class. Thus, if you want your method to work correctly both with and without polymorphism, you must begin your method with:


    ```java

    if (p.currentToken() == JsonToken.START_OBJECT) {
             p.nextToken();
           }
    ```


    This results in the stream pointing to the field name, so that the two conditions align.


    Post-condition is that the parser will point to the last event that is part of deserialized value (or in case deserialization fails, event that was not recognized or usable, which may be the same event as the one it pointed to upon call).


    Note that this method is never called for JSON null literal, and thus deserializers need (and should) not check for it.
  syntax:
    content: public Object deserialize(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  id: deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  nameWithType: AbstractDeserializer.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype. This can be due to annotation on type (or its supertype), or due to global settings without annotations.


    Default implementation may work for some types, but ideally subclasses should not rely on current default implementation. Implementation is mostly provided to avoid compilation errors with older code.
  syntax:
    content: public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: typeDeserializer
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.findBackReference(java.lang.String)
  id: findBackReference(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: findBackReference(String logicalName)
  nameWithType: AbstractDeserializer.findBackReference(String logicalName)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.findBackReference(String logicalName)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.findBackReference*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: Method called by `BeanDeserializer` to resolve back reference part of managed references.
  syntax:
    content: public SettableBeanProperty findBackReference(String logicalName)
    parameters:
    - id: logicalName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.deser.SettableBeanProperty
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.getObjectIdReader()
  id: getObjectIdReader()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: getObjectIdReader()
  nameWithType: AbstractDeserializer.getObjectIdReader()
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.getObjectIdReader()
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.getObjectIdReader*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: Overridden to return true for those instances that are handling value for which Object Identity handling is enabled (either via value type or referring property).
  syntax:
    content: public ObjectIdReader getObjectIdReader()
    return:
      type: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.handledType()
  id: handledType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: handledType()
  nameWithType: AbstractDeserializer.handledType()
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.handledType()
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.handledType*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method for accessing type of values this deserializer produces. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type).


    Default implementation will return null, which means almost same same as returning `Object.class` would; that is, that nothing is known about handled type.
  syntax:
    content: public Class<?> handledType()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.isCachable()
  id: isCachable()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: isCachable()
  nameWithType: AbstractDeserializer.isCachable()
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.isCachable()
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.isCachable*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Method called to see if deserializer instance is cachable and usable for other properties of same type (type for which instance was created).


    Note that cached instances are still resolved on per-property basis, if instance implements <xref uid="com.fasterxml.jackson.databind.deser.ResolvableDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ResolvableDeserializer</xref>: cached instance is just as the base. This means that in most cases it is safe to cache instances; however, it only makes sense to cache instances if instantiation is expensive, or if instances are heavy-weight.


    Default implementation returns false, to indicate that no caching is done.
  syntax:
    content: public boolean isCachable()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  id: supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.AbstractDeserializer
  langs:
  - java
  name: supportsUpdate(DeserializationConfig config)
  nameWithType: AbstractDeserializer.supportsUpdate(DeserializationConfig config)
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.supportsUpdate(DeserializationConfig config)
  overload: com.fasterxml.jackson.databind.deser.AbstractDeserializer.supportsUpdate*
  type: Method
  package: com.fasterxml.jackson.databind.deser
  summary: >-
    Introspection method that may be called to see whether deserializer supports update of an existing value (aka "merging") or not. Return value should either be <xref uid="java.lang.Boolean.FALSE" data-throw-if-not-resolved="false">Boolean#FALSE</xref> if update is not supported at all (immutable values); <xref uid="java.lang.Boolean.TRUE" data-throw-if-not-resolved="false">Boolean#TRUE</xref> if update should usually work (regular POJOs, for example), or `null` if this is either not known, or may sometimes work.


    Information gathered is typically used to either prevent merging update for property (either by skipping, if based on global defaults; or by exception during deserialization construction if explicit attempt made) if <xref uid="java.lang.Boolean.FALSE" data-throw-if-not-resolved="false">Boolean#FALSE</xref> returned, or inclusion if <xref uid="java.lang.Boolean.TRUE" data-throw-if-not-resolved="false">Boolean#TRUE</xref> is specified. If "unknown" case (`null` returned) behavior is to exclude property if global defaults used; or to allow if explicit per-type or property merging is defined.


    Default implementation returns `null` to allow explicit per-type or per-property attempts.
  syntax:
    content: public Boolean supportsUpdate(DeserializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    return:
      type: java.lang.Boolean
references:
- uid: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder
  name: BeanDeserializerBuilder
  nameWithType: BeanDeserializerBuilder
  fullName: com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder
- uid: com.fasterxml.jackson.databind.BeanDescription
  name: BeanDescription
  nameWithType: BeanDescription
  fullName: com.fasterxml.jackson.databind.BeanDescription
- uid: java.util.Map<java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: com.fasterxml.jackson.databind.deser.SettableBeanProperty
    name: SettableBeanProperty
    fullName: com.fasterxml.jackson.databind.deser.SettableBeanProperty
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer*
  name: AbstractDeserializer
  nameWithType: AbstractDeserializer.AbstractDeserializer
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.AbstractDeserializer
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
  name: ObjectIdReader
  nameWithType: ObjectIdReader
  fullName: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.constructForNonPOJO*
  name: constructForNonPOJO
  nameWithType: AbstractDeserializer.constructForNonPOJO
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.constructForNonPOJO
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.JsonDeserializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.createContextual*
  name: createContextual
  nameWithType: AbstractDeserializer.createContextual
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.createContextual
  package: com.fasterxml.jackson.databind.deser
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.handledType*
  name: handledType
  nameWithType: AbstractDeserializer.handledType
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.handledType
  package: com.fasterxml.jackson.databind.deser
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.isCachable*
  name: isCachable
  nameWithType: AbstractDeserializer.isCachable
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.isCachable
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.supportsUpdate*
  name: supportsUpdate
  nameWithType: AbstractDeserializer.supportsUpdate
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.supportsUpdate
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.getObjectIdReader*
  name: getObjectIdReader
  nameWithType: AbstractDeserializer.getObjectIdReader
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.getObjectIdReader
  package: com.fasterxml.jackson.databind.deser
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.deser.SettableBeanProperty
  name: SettableBeanProperty
  nameWithType: SettableBeanProperty
  fullName: com.fasterxml.jackson.databind.deser.SettableBeanProperty
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.findBackReference*
  name: findBackReference
  nameWithType: AbstractDeserializer.findBackReference
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.findBackReference
  package: com.fasterxml.jackson.databind.deser
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  name: TypeDeserializer
  nameWithType: TypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType*
  name: deserializeWithType
  nameWithType: AbstractDeserializer.deserializeWithType
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserializeWithType
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize*
  name: deserialize
  nameWithType: AbstractDeserializer.deserialize
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer.deserialize
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeIfNatural*
  name: _deserializeIfNatural
  nameWithType: AbstractDeserializer._deserializeIfNatural
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeIfNatural
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeFromObjectId*
  name: _deserializeFromObjectId
  nameWithType: AbstractDeserializer._deserializeFromObjectId
  fullName: com.fasterxml.jackson.databind.deser.AbstractDeserializer._deserializeFromObjectId
  package: com.fasterxml.jackson.databind.deser
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  name: JsonDeserializer<Object>
  nameWithType: JsonDeserializer<Object>
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.deser.ContextualDeserializer
  name: ContextualDeserializer
  nameWithType: ContextualDeserializer
  fullName: com.fasterxml.jackson.databind.deser.ContextualDeserializer
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: com.fasterxml.jackson.databind.JsonDeserializer.handledType()
  name: JsonDeserializer.handledType()
  nameWithType: JsonDeserializer.handledType()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.handledType()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  name: JsonDeserializer.deserialize(JsonParser,DeserializationContext)
  nameWithType: JsonDeserializer.deserialize(JsonParser,DeserializationContext)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
  name: JsonDeserializer.getDelegatee()
  nameWithType: JsonDeserializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  name: JsonDeserializer.getNullValue(DeserializationContext)
  nameWithType: JsonDeserializer.getNullValue(DeserializationContext)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  name: JsonDeserializer.replaceDelegatee(JsonDeserializer<?>)
  nameWithType: JsonDeserializer.replaceDelegatee(JsonDeserializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  name: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)
  nameWithType: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
  name: JsonDeserializer.getEmptyAccessPattern()
  nameWithType: JsonDeserializer.getEmptyAccessPattern()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
  name: JsonDeserializer.getNullValue()
  nameWithType: JsonDeserializer.getNullValue()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonDeserializer.unwrappingDeserializer(NameTransformer)
  nameWithType: JsonDeserializer.unwrappingDeserializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
  name: JsonDeserializer.getObjectIdReader()
  nameWithType: JsonDeserializer.getObjectIdReader()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
  name: JsonDeserializer.getEmptyValue()
  nameWithType: JsonDeserializer.getEmptyValue()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  name: JsonDeserializer.getEmptyValue(DeserializationContext)
  nameWithType: JsonDeserializer.getEmptyValue(DeserializationContext)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
  name: JsonDeserializer.isCachable()
  nameWithType: JsonDeserializer.isCachable()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
  name: JsonDeserializer.getKnownPropertyNames()
  nameWithType: JsonDeserializer.getKnownPropertyNames()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  name: JsonDeserializer.deserialize(JsonParser,DeserializationContext,T)
  nameWithType: JsonDeserializer.deserialize(JsonParser,DeserializationContext,T)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
  name: JsonDeserializer.getNullAccessPattern()
  nameWithType: JsonDeserializer.getNullAccessPattern()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
  name: JsonDeserializer.findBackReference(String)
  nameWithType: JsonDeserializer.findBackReference(String)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  name: JsonDeserializer.supportsUpdate(DeserializationConfig)
  nameWithType: JsonDeserializer.supportsUpdate(DeserializationConfig)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  name: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer,T)
  nameWithType: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer,T)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
- uid: java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty
  name: String,SettableBeanProperty
  nameWithType: String,SettableBeanProperty
  fullName: java.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer
  nameWithType: JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer.replaceDelegatee(JsonDeserializer
  nameWithType: JsonDeserializer.replaceDelegatee(JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer
