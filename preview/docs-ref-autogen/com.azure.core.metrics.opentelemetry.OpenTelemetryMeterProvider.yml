### YamlMime:JavaType
uid: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider"
fullName: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider"
name: "OpenTelemetryMeterProvider"
nameWithType: "OpenTelemetryMeterProvider"
summary: "Resolves and provides <xref uid=\"com.azure.core.util.metrics.Meter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Meter\"></xref> implementation."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **OpenTelemetryMeterProvider**</br> implements <xref href=\"com.azure.core.util.metrics.MeterProvider?alt=com.azure.core.util.metrics.MeterProvider&text=MeterProvider\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider.OpenTelemetryMeterProvider()"
  fullName: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider.OpenTelemetryMeterProvider()"
  name: "OpenTelemetryMeterProvider()"
  nameWithType: "OpenTelemetryMeterProvider.OpenTelemetryMeterProvider()"
  summary: "Creates an instance of <xref uid=\"com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OpenTelemetryMeterProvider\"></xref>."
  syntax: "public OpenTelemetryMeterProvider()"
  desc: "Creates an instance of <xref uid=\"com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OpenTelemetryMeterProvider\"></xref>."
methods:
- uid: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider.createMeter(com.azure.core.util.LibraryTelemetryOptions,com.azure.core.util.MetricsOptions)"
  fullName: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider.createMeter(LibraryTelemetryOptions libraryOptions, MetricsOptions applicationOptions)"
  name: "createMeter(LibraryTelemetryOptions libraryOptions, MetricsOptions applicationOptions)"
  nameWithType: "OpenTelemetryMeterProvider.createMeter(LibraryTelemetryOptions libraryOptions, MetricsOptions applicationOptions)"
  summary: "Creates named and versioned Open<wbr>Telemetry-based implementation of <xref uid=\"com.azure.core.util.metrics.Meter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Meter\"></xref> Use global Open<wbr>Telemetry SDK configuration:"
  parameters:
  - description: "Library-specific telemetry options."
    name: "libraryOptions"
    type: "<xref href=\"com.azure.core.util.LibraryTelemetryOptions?alt=com.azure.core.util.LibraryTelemetryOptions&text=LibraryTelemetryOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "instance of <xref uid=\"com.azure.core.util.MetricsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MetricsOptions\"></xref> provided by the application."
    name: "applicationOptions"
    type: "<xref href=\"com.azure.core.util.MetricsOptions?alt=com.azure.core.util.MetricsOptions&text=MetricsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Meter createMeter(LibraryTelemetryOptions libraryOptions, MetricsOptions applicationOptions)"
  desc: "Creates named and versioned OpenTelemetry-based implementation of <xref uid=\"com.azure.core.util.metrics.Meter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Meter\"></xref> Use global OpenTelemetry SDK configuration:\n\n```java\n// configure OpenTelemetry SDK using io.opentelemetry:opentelemetry-sdk-extension-autoconfigure\n // AutoConfiguredOpenTelemetrySdk.initialize();\n\n // configure Azure Client, no metric configuration needed\n AzureClient sampleClient = new AzureClientBuilder()\n     .endpoint(\"https://my-client.azure.com\")\n     .build();\n\n Span span = GlobalOpenTelemetry.getTracer(\"azure-core-samples\")\n     .spanBuilder(\"doWork\")\n     .startSpan();\n\n try (Scope scope = span.makeCurrent()) {\n     // do some work\n\n     // Current context flows to OpenTelemetry metrics and is used to populate exemplars\n     // you can also pass OpenTelemetry context explicitly by passing it under PARENT_TRACE_CONTEXT_KEY\n     String response = sampleClient.methodCall(\"get items\");\n     // do more work\n }\n\n span.end();\n```\n\nIt's also possible to pass custom OpenTelemetry SDK configuration\n\n```java\n// configure OpenTelemetry SDK\n SdkTracerProvider tracerProvider = SdkTracerProvider.builder()\n     .addSpanProcessor(BatchSpanProcessor.builder(OtlpGrpcSpanExporter.builder().build()).build())\n     .build();\n\n SdkMeterProvider meterProvider = SdkMeterProvider.builder()\n     .registerMetricReader(PeriodicMetricReader.builder(OtlpGrpcMetricExporter.builder().build()).build())\n     .build();\n\n OpenTelemetrySdk openTelemetry = OpenTelemetrySdk.builder()\n     .setTracerProvider(tracerProvider)\n     .setMeterProvider(meterProvider)\n     .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance()))\n     .build();\n\n Tracer tracer = openTelemetry.getTracer(\"azure-core-samples\");\n\n // pass custom OpenTelemetry instance to MetricsOptions\n MetricsOptions metricsOptions = new OpenTelemetryMetricsOptions()\n     .setOpenTelemetry(openTelemetry);\n\n // configure Azure Client to use customized MetricOptions\n AzureClient sampleClient = new AzureClientBuilder()\n     .endpoint(\"Https://my-client.azure.com\")\n     .clientOptions(new ClientOptions().setMetricsOptions(metricsOptions))\n     .build();\n\n Span span = tracer.spanBuilder(\"doWork\").startSpan();\n io.opentelemetry.context.Context otelContext = io.opentelemetry.context.Context.current().with(span);\n\n // do some work\n\n // Context is used by OpenTelemetry metrics to populate exemplars, Context.current() will be used if no\n // explicit context is provided.\n String response = sampleClient.methodCall(\"get items\",\n     new Context(PARENT_TRACE_CONTEXT_KEY, otelContext));\n\n // do more work\n span.end();\n```"
  returns:
    description: "a meter instance."
    type: "<xref href=\"com.azure.core.util.metrics.Meter?alt=com.azure.core.util.metrics.Meter&text=Meter\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider.createMeter(java.lang.String,java.lang.String,com.azure.core.util.MetricsOptions)"
  fullName: "com.azure.core.metrics.opentelemetry.OpenTelemetryMeterProvider.createMeter(String libraryName, String libraryVersion, MetricsOptions applicationOptions)"
  name: "createMeter(String libraryName, String libraryVersion, MetricsOptions applicationOptions)"
  nameWithType: "OpenTelemetryMeterProvider.createMeter(String libraryName, String libraryVersion, MetricsOptions applicationOptions)"
  summary: "Creates named and versioned Open<wbr>Telemetry-based implementation of <xref uid=\"com.azure.core.util.metrics.Meter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Meter\"></xref>"
  parameters:
  - description: "Azure client library package name"
    name: "libraryName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Azure client library version"
    name: "libraryVersion"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "instance of <xref uid=\"com.azure.core.util.MetricsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MetricsOptions\"></xref> provided by the application."
    name: "applicationOptions"
    type: "<xref href=\"com.azure.core.util.MetricsOptions?alt=com.azure.core.util.MetricsOptions&text=MetricsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Meter createMeter(String libraryName, String libraryVersion, MetricsOptions applicationOptions)"
  desc: "Creates named and versioned OpenTelemetry-based implementation of <xref uid=\"com.azure.core.util.metrics.Meter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Meter\"></xref>"
  returns:
    description: "a meter instance."
    type: "<xref href=\"com.azure.core.util.metrics.Meter?alt=com.azure.core.util.metrics.Meter&text=Meter\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Resolves and provides <xref uid=\"com.azure.core.util.metrics.Meter\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Meter\"></xref> implementation.\n\nThis class is intended to be used by Azure client libraries and provides abstraction over different metrics implementations. Application developers should use metrics implementations such as OpenTelemetry or Micrometer directly."
implements:
- "<xref href=\"com.azure.core.util.metrics.MeterProvider?alt=com.azure.core.util.metrics.MeterProvider&text=MeterProvider\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.core.metrics.opentelemetry"
artifact: com.azure:azure-core-metrics-opentelemetry:1.0.0-beta.29
