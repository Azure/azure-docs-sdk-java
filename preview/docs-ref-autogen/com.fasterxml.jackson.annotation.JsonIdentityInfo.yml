### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo
  id: JsonIdentityInfo
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonIdentityInfo.generator()
  - com.fasterxml.jackson.annotation.JsonIdentityInfo.property()
  - com.fasterxml.jackson.annotation.JsonIdentityInfo.resolver()
  - com.fasterxml.jackson.annotation.JsonIdentityInfo.scope()
  langs:
  - java
  name: JsonIdentityInfo
  nameWithType: JsonIdentityInfo
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Annotation used for indicating that values of annotated type or property should be serializing so that instances either contain additional object identifier (in addition actual object properties), or as a reference that consists of an object id that refers to a full serialization. In practice this is done by serializing the first instance as full object and object identity, and other references to the object as reference values.


    There are two main approaches to generating object identifier: either using a generator (either one of standard ones, or a custom generator), or using a value of a property. The latter case is indicated by using a placeholder generator marker <xref uid="com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator" data-throw-if-not-resolved="false">ObjectIdGenerators.PropertyGenerator</xref>; former by using explicit generator. Object id has to be serialized as a property in case of POJOs; object identity is currently NOT support for JSON Array types (Java arrays or Lists) or Java Map types.


    Finally, note that generator type of <xref uid="com.fasterxml.jackson.annotation.ObjectIdGenerators.None" data-throw-if-not-resolved="false">ObjectIdGenerators.None</xref> indicates that no Object Id should be included or used: it is included to allow suppressing Object Ids using mix-in annotations.
  syntax:
    content: public interface JsonIdentityInfo implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.generator()
  id: generator()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIdentityInfo
  langs:
  - java
  name: generator()
  nameWithType: JsonIdentityInfo.generator()
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.generator()
  overload: com.fasterxml.jackson.annotation.JsonIdentityInfo.generator*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Generator to use for producing Object Identifier for objects: either one of pre-defined generators from <xref uid="? extends com.fasterxml.jackson.annotation.ObjectIdGenerator" data-throw-if-not-resolved="false">ObjectIdGenerator</xref>, or a custom generator. Defined as class to instantiate.


    Note that special type <xref uid="com.fasterxml.jackson.annotation.ObjectIdGenerators.None" data-throw-if-not-resolved="false">ObjectIdGenerators.None</xref> can be used to disable inclusion of Object Ids.
  syntax:
    content: public abstract Class<? extends ObjectIdGenerator<?>> generator()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.annotation.ObjectIdGenerator<?>>
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.property()
  id: property()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIdentityInfo
  langs:
  - java
  name: property()
  nameWithType: JsonIdentityInfo.property()
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.property()
  overload: com.fasterxml.jackson.annotation.JsonIdentityInfo.property*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Name of JSON property in which Object Id will reside: also, if "from property" marker generator is used, identifies property that will be accessed to get type id. If a property is used, name must match its external name (one defined by annotation, or derived from accessor name as per Java Bean Introspection rules).


    Default value is `@id`.
  syntax:
    content: public abstract String property()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.resolver()
  id: resolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIdentityInfo
  langs:
  - java
  name: resolver()
  nameWithType: JsonIdentityInfo.resolver()
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.resolver()
  overload: com.fasterxml.jackson.annotation.JsonIdentityInfo.resolver*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Resolver to use for producing POJO from Object Identifier.


    Default value is <xref uid="com.fasterxml.jackson.annotation.SimpleObjectIdResolver" data-throw-if-not-resolved="false">SimpleObjectIdResolver</xref>
  syntax:
    content: public abstract Class<? extends ObjectIdResolver> resolver()
    return:
      type: java.lang.Class<? extends com.fasterxml.jackson.annotation.ObjectIdResolver>
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.scope()
  id: scope()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonIdentityInfo
  langs:
  - java
  name: scope()
  nameWithType: JsonIdentityInfo.scope()
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.scope()
  overload: com.fasterxml.jackson.annotation.JsonIdentityInfo.scope*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: >-
    Scope is used to define applicability of an Object Id: all ids must be unique within their scope; where scope is defined as combination of this value and generator type. Comparison is simple equivalence, meaning that both type generator type and scope class must be the same.


    Scope is used for determining how many generators are needed; more than one scope is typically only needed if external Object Ids have overlapping value domains (i.e. are only unique within some limited scope)
  syntax:
    content: public abstract Class<?> scope()
    return:
      type: java.lang.Class<?>
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.property*
  name: property
  nameWithType: JsonIdentityInfo.property
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.property
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Class<? extends com.fasterxml.jackson.annotation.ObjectIdGenerator<?>>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.annotation.ObjectIdGenerator'
    name: ObjectIdGenerator
    fullName: '? extends com.fasterxml.jackson.annotation.ObjectIdGenerator'
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.generator*
  name: generator
  nameWithType: JsonIdentityInfo.generator
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.generator
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Class<? extends com.fasterxml.jackson.annotation.ObjectIdResolver>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends com.fasterxml.jackson.annotation.ObjectIdResolver'
    name: ObjectIdResolver
    fullName: '? extends com.fasterxml.jackson.annotation.ObjectIdResolver'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.resolver*
  name: resolver
  nameWithType: JsonIdentityInfo.resolver
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.resolver
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.annotation.JsonIdentityInfo.scope*
  name: scope
  nameWithType: JsonIdentityInfo.scope
  fullName: com.fasterxml.jackson.annotation.JsonIdentityInfo.scope
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
- uid: '? extends com.fasterxml.jackson.annotation.ObjectIdGenerator'
  name: '? extends ObjectIdGenerator'
  nameWithType: '? extends ObjectIdGenerator'
  fullName: '? extends com.fasterxml.jackson.annotation.ObjectIdGenerator'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: '? extends com.fasterxml.jackson.annotation.ObjectIdResolver'
  name: '? extends ObjectIdResolver'
  nameWithType: '? extends ObjectIdResolver'
  fullName: '? extends com.fasterxml.jackson.annotation.ObjectIdResolver'
