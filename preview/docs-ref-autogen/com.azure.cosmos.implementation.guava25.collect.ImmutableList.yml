### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  id: ImmutableList
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>builder()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>builderWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(E[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E,E,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E,E,E,E,E...)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>sortedCopyOf(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>sortedCopyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>toImmutableList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.add(int,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.addAll(int,java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.equals(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.forEach(java.util.function.Consumer<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.hashCode()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.indexOf(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.lastIndexOf(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.remove(int)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.replaceAll(java.util.function.UnaryOperator<E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.reverse()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.set(int,E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.sort(java.util.Comparator<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableList.subList(int,int)
  langs:
  - java
  name: ImmutableList<E>
  nameWithType: ImmutableList<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref> whose contents will never change, with many other important properties detailed at <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableCollection" data-throw-if-not-resolved="false">ImmutableCollection</xref>.


    See the Guava User Guide article on [ immutable collections][immutable collections].



    [immutable collections]: https://github.com/google/guava/wiki/ImmutableCollectionsExplained
  syntax:
    content: public abstract class ImmutableList<E> extends ImmutableCollection<E> implements List<E>, RandomAccess
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  implements:
  - java.util.List<E>
  - java.util.RandomAccess
  inheritedMembers:
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  - com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>builder()
  id: <E>builder()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>builder()
  nameWithType: ImmutableList<E>.<E>builder()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>builder()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.builder*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a new builder. The generated builder is equivalent to the builder created by the <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder" data-throw-if-not-resolved="false">Builder</xref> constructor.
  syntax:
    content: public static ImmutableList.Builder<E> <E>builder()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>builderWithExpectedSize(int)
  id: <E>builderWithExpectedSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>builderWithExpectedSize(int expectedSize)
  nameWithType: ImmutableList<E>.<E>builderWithExpectedSize(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>builderWithExpectedSize(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.builderWithExpectedSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a new builder, expecting the specified number of elements to be added.


    If `expectedSize` is exactly the number of elements added to the builder before <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder.build" data-throw-if-not-resolved="false">Builder#build</xref> is called, the builder is likely to perform better than an unsized <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;builder()" data-throw-if-not-resolved="false">#builder()</xref> would have.


    It is not specified if any performance benefits apply if `expectedSize` is close to, but not exactly, the number of elements added to the builder.
  syntax:
    content: public static ImmutableList.Builder<E> <E>builderWithExpectedSize(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(E[])
  id: <E>copyOf(E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>copyOf(E[] elements)
  nameWithType: ImmutableList<E>.<E>copyOf(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>copyOf(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.lang.Iterable<? extends E>)
  id: <E>copyOf(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>copyOf(Iterable<? extends E> elements)
  nameWithType: ImmutableList<E>.<E>copyOf(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order. If `elements` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, this method behaves exactly as <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;copyOf(java.util.Collection&lt;? extends E&gt;)" data-throw-if-not-resolved="false">#copyOf(Collection)</xref>; otherwise, it behaves exactly as `copyOf(elements.iterator()`.
  syntax:
    content: public static ImmutableList<E> <E>copyOf(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.util.Collection<? extends E>)
  id: <E>copyOf(java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>copyOf(Collection<? extends E> elements)
  nameWithType: ImmutableList<E>.<E>copyOf(Collection<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(Collection<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable list containing the given elements, in order.


    Despite the method name, this method attempts to avoid actually copying the data when it is safe to do so. The exact circumstances under which a copy will or will not be performed are undocumented and subject to change.


    Note that if `list` is a `List`, then `ImmutableList.copyOf(list)` returns an `ImmutableList` containing each of the strings in `list`, while ImmutableList.of(list)\} returns an `ImmutableList>` containing one element (the given list itself).


    This method is safe to use even when `elements` is a synchronized or concurrent collection that is currently being modified by another thread.
  syntax:
    content: public static ImmutableList<E> <E>copyOf(Collection<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Collection<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>copyOf(java.util.Iterator<? extends E>)
  id: <E>copyOf(java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>copyOf(Iterator<? extends E> elements)
  nameWithType: ImmutableList<E>.<E>copyOf(Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf(Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>copyOf(Iterator<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of()
  id: <E>of()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of()
  nameWithType: ImmutableList<E>.<E>of()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the empty immutable list. This list behaves and performs comparably to <xref uid="" data-throw-if-not-resolved="false">Collections#emptyList</xref>, and is preferable mainly for consistency and maintainability of your code.
  syntax:
    content: public static ImmutableList<E> <E>of()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E)
  id: <E>of(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E element)
  nameWithType: ImmutableList<E>.<E>of(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing a single element. This list behaves and performs comparably to <xref uid="" data-throw-if-not-resolved="false">Collections#singleton</xref>, but will not accept a null element. It is preferable mainly for consistency and maintainability of your code.
  syntax:
    content: public static ImmutableList<E> <E>of(E element)
    parameters:
    - id: element
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E)
  id: <E>of(E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E)
  id: <E>of(E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E)
  id: <E>of(E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E)
  id: <E>of(E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E)
  id: <E>of(E,E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E)
  id: <E>of(E,E,E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: e7
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E)
  id: <E>of(E,E,E,E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: e7
      type: E
    - id: e8
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E)
  id: <E>of(E,E,E,E,E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: e7
      type: E
    - id: e8
      type: E
    - id: e9
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E,E)
  id: <E>of(E,E,E,E,E,E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: e7
      type: E
    - id: e8
      type: E
    - id: e9
      type: E
    - id: e10
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E,E,E)
  id: <E>of(E,E,E,E,E,E,E,E,E,E,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list containing the given elements, in order.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: e7
      type: E
    - id: e8
      type: E
    - id: e9
      type: E
    - id: e10
      type: E
    - id: e11
      type: E
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>of(E,E,E,E,E,E,E,E,E,E,E,E,E...)
  id: <E>of(E,E,E,E,E,E,E,E,E,E,E,E,E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E[] others)
  nameWithType: ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E[] others)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E[] others)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable list containing the given elements, in order.


    The array `others` must not be longer than `Integer.MAX_VALUE - 12`.
  syntax:
    content: public static ImmutableList<E> <E>of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10, E e11, E e12, E[] others)
    parameters:
    - id: e1
      type: E
    - id: e2
      type: E
    - id: e3
      type: E
    - id: e4
      type: E
    - id: e5
      type: E
    - id: e6
      type: E
    - id: e7
      type: E
    - id: e8
      type: E
    - id: e9
      type: E
    - id: e10
      type: E
    - id: e11
      type: E
    - id: e12
      type: E
    - id: others
      type: E[]
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>sortedCopyOf(java.lang.Iterable<? extends E>)
  id: <E>sortedCopyOf(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>sortedCopyOf(Iterable<? extends E> elements)
  nameWithType: ImmutableList<E>.<E>sortedCopyOf(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>sortedCopyOf(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.sortedCopyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable list containing the given elements, sorted according to their natural order. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input.


    If your data has no duplicates, or you wish to deduplicate elements, use `ImmutableSortedSet.copyOf(elements)`; if you want a `List` you can use its `asList()` view.


    **Java 8 users:** If you want to convert a <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">java.util.stream.Stream</xref> to a sorted `ImmutableList`, use `stream.sorted().collect(toImmutableList())`.
  syntax:
    content: public static ImmutableList<E> <E>sortedCopyOf(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>sortedCopyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  id: <E>sortedCopyOf(java.util.Comparator<? super E>,java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>sortedCopyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  nameWithType: ImmutableList<E>.<E>sortedCopyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>sortedCopyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.sortedCopyOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an immutable list containing the given elements, in sorted order relative to the specified comparator. The sorting algorithm used is stable, so elements that compare as equal will stay in the order in which they appear in the input.


    If your data has no duplicates, or you wish to deduplicate elements, use `ImmutableSortedSet.copyOf(comparator, elements)`; if you want a `List` you can use its `asList()` view.


    **Java 8 users:** If you want to convert a <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">java.util.stream.Stream</xref> to a sorted `ImmutableList`, use `stream.sorted(comparator).collect(toImmutableList())`.
  syntax:
    content: public static ImmutableList<E> <E>sortedCopyOf(Comparator<? super E> comparator, Iterable<? extends E> elements)
    parameters:
    - id: comparator
      type: java.util.Comparator<? super E>
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.<E>toImmutableList()
  id: <E>toImmutableList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: <E>toImmutableList()
  nameWithType: ImmutableList<E>.<E>toImmutableList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>toImmutableList()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.toImmutableList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a `Collector` that accumulates the input elements into a new `ImmutableList`, in encounter order.
  syntax:
    content: public static Collector<E,?,ImmutableList<E>> <E>toImmutableList()
    return:
      type: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.ImmutableList()
  id: ImmutableList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: ImmutableList()
  nameWithType: ImmutableList<E>.ImmutableList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.ImmutableList()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.ImmutableList*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: " ImmutableList()"
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.add(int,E)
  id: add(int,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: add(int index, E element)
  nameWithType: ImmutableList<E>.add(int index, E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.add(int index, E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the list unmodified.
  syntax:
    content: public final void add(int index, E element)
    parameters:
    - id: index
      type: int
    - id: element
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.addAll(int,java.util.Collection<? extends E>)
  id: addAll(int,java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: addAll(int index, Collection<? extends E> newElements)
  nameWithType: ImmutableList<E>.addAll(int index, Collection<? extends E> newElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.addAll(int index, Collection<? extends E> newElements)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the list unmodified.
  syntax:
    content: public final boolean addAll(int index, Collection<? extends E> newElements)
    parameters:
    - id: index
      type: int
    - id: newElements
      type: java.util.Collection<? extends E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.asList()
  id: asList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: asList()
  nameWithType: ImmutableList<E>.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.asList()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns this list instance.
  syntax:
    content: public final ImmutableList<E> asList()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.contains(java.lang.Object)
  id: contains(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: contains(Object object)
  nameWithType: ImmutableList<E>.contains(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.contains(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.contains*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean contains(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.equals(java.lang.Object)
  id: equals(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: equals(Object obj)
  nameWithType: ImmutableList<E>.equals(Object obj)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.equals(Object obj)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.equals*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean equals(Object obj)
    parameters:
    - id: obj
      type: java.lang.Object
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.forEach(java.util.function.Consumer<? super E>)
  id: forEach(java.util.function.Consumer<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: forEach(Consumer<? super E> consumer)
  nameWithType: ImmutableList<E>.forEach(Consumer<? super E> consumer)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.forEach(Consumer<? super E> consumer)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.forEach*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void forEach(Consumer<? super E> consumer)
    parameters:
    - id: consumer
      type: java.util.function.Consumer<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.hashCode()
  id: hashCode()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: hashCode()
  nameWithType: ImmutableList<E>.hashCode()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.hashCode()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.hashCode*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int hashCode()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.indexOf(java.lang.Object)
  id: indexOf(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: indexOf(Object object)
  nameWithType: ImmutableList<E>.indexOf(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.indexOf(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.indexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int indexOf(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: iterator()
  nameWithType: ImmutableList<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an unmodifiable iterator across the elements in this collection.
  syntax:
    content: public UnmodifiableIterator<E> iterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.lastIndexOf(java.lang.Object)
  id: lastIndexOf(java.lang.Object)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: lastIndexOf(Object object)
  nameWithType: ImmutableList<E>.lastIndexOf(Object object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.lastIndexOf(Object object)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.lastIndexOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int lastIndexOf(Object object)
    parameters:
    - id: object
      type: java.lang.Object
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator()
  id: listIterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: listIterator()
  nameWithType: ImmutableList<E>.listIterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.listIterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public UnmodifiableListIterator<E> listIterator()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator(int)
  id: listIterator(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: listIterator(int index)
  nameWithType: ImmutableList<E>.listIterator(int index)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.listIterator(int index)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public UnmodifiableListIterator<E> listIterator(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.remove(int)
  id: remove(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: remove(int index)
  nameWithType: ImmutableList<E>.remove(int index)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.remove(int index)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.remove*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the list unmodified.
  syntax:
    content: public final E remove(int index)
    parameters:
    - id: index
      type: int
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.replaceAll(java.util.function.UnaryOperator<E>)
  id: replaceAll(java.util.function.UnaryOperator<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: replaceAll(UnaryOperator<E> operator)
  nameWithType: ImmutableList<E>.replaceAll(UnaryOperator<E> operator)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.replaceAll(UnaryOperator<E> operator)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.replaceAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the list unmodified.
  syntax:
    content: public final void replaceAll(UnaryOperator<E> operator)
    parameters:
    - id: operator
      type: java.util.function.UnaryOperator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.reverse()
  id: reverse()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: reverse()
  nameWithType: ImmutableList<E>.reverse()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.reverse()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of this immutable list in reverse order. For example, `ImmutableList.of(1, 2, 3).reverse()` is equivalent to `ImmutableList.of(3, 2, 1)`.
  syntax:
    content: public ImmutableList<E> reverse()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
      description: a view of this immutable list in reverse order
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.set(int,E)
  id: set(int,E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: set(int index, E element)
  nameWithType: ImmutableList<E>.set(int index, E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.set(int index, E element)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.set*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the list unmodified.
  syntax:
    content: public final E set(int index, E element)
    parameters:
    - id: index
      type: int
    - id: element
      type: E
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.sort(java.util.Comparator<? super E>)
  id: sort(java.util.Comparator<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: sort(Comparator<? super E> c)
  nameWithType: ImmutableList<E>.sort(Comparator<? super E> c)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.sort(Comparator<? super E> c)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.sort*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Guaranteed to throw an exception and leave the list unmodified.
  syntax:
    content: public final void sort(Comparator<? super E> c)
    parameters:
    - id: c
      type: java.util.Comparator<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.spliterator()
  id: spliterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: spliterator()
  nameWithType: ImmutableList<E>.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.spliterator()
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.spliterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Spliterator<E> spliterator()
    return:
      type: java.util.Spliterator<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.subList(int,int)
  id: subList(int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  langs:
  - java
  name: subList(int fromIndex, int toIndex)
  nameWithType: ImmutableList<E>.subList(int fromIndex, int toIndex)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.subList(int fromIndex, int toIndex)
  overload: com.azure.cosmos.implementation.guava25.collect.ImmutableList.subList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable list of the elements between the specified `fromIndex`, inclusive, and `toIndex`, exclusive. (If `fromIndex` and `toIndex` are equal, the empty immutable list is returned.)
  syntax:
    content: public ImmutableList<E> subList(int fromIndex, int toIndex)
    parameters:
    - id: fromIndex
      type: int
    - id: toIndex
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.ImmutableList*
  name: ImmutableList
  nameWithType: ImmutableList<E>.ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.ImmutableList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.stream.Collector<E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.toImmutableList*
  name: <E>toImmutableList
  nameWithType: ImmutableList<E>.<E>toImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>toImmutableList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.of*
  name: <E>of
  nameWithType: ImmutableList<E>.<E>of
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>of
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*
  name: <E>copyOf
  nameWithType: ImmutableList<E>.<E>copyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>copyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<? extends E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<? extends E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.sortedCopyOf*
  name: <E>sortedCopyOf
  nameWithType: ImmutableList<E>.<E>sortedCopyOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>sortedCopyOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
    name: UnmodifiableIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.iterator*
  name: iterator
  nameWithType: ImmutableList<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator
    name: UnmodifiableListIterator
    fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.listIterator*
  name: listIterator
  nameWithType: ImmutableList<E>.listIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.listIterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: java.util.function.Consumer<? super E>
  spec.java:
  - uid: java.util.function.Consumer
    name: Consumer
    fullName: java.util.function.Consumer
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.forEach*
  name: forEach
  nameWithType: ImmutableList<E>.forEach
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.forEach
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.indexOf*
  name: indexOf
  nameWithType: ImmutableList<E>.indexOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.indexOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.lastIndexOf*
  name: lastIndexOf
  nameWithType: ImmutableList<E>.lastIndexOf
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.lastIndexOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.contains*
  name: contains
  nameWithType: ImmutableList<E>.contains
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.contains
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.subList*
  name: subList
  nameWithType: ImmutableList<E>.subList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.subList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.addAll*
  name: addAll
  nameWithType: ImmutableList<E>.addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.set*
  name: set
  nameWithType: ImmutableList<E>.set
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.set
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.add*
  name: add
  nameWithType: ImmutableList<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.remove*
  name: remove
  nameWithType: ImmutableList<E>.remove
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.remove
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.UnaryOperator<E>
  spec.java:
  - uid: java.util.function.UnaryOperator
    name: UnaryOperator
    fullName: java.util.function.UnaryOperator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.replaceAll*
  name: replaceAll
  nameWithType: ImmutableList<E>.replaceAll
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.replaceAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.sort*
  name: sort
  nameWithType: ImmutableList<E>.sort
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.sort
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.asList*
  name: asList
  nameWithType: ImmutableList<E>.asList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.asList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Spliterator<E>
  spec.java:
  - uid: java.util.Spliterator
    name: Spliterator
    fullName: java.util.Spliterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.spliterator*
  name: spliterator
  nameWithType: ImmutableList<E>.spliterator
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.spliterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.reverse*
  name: reverse
  nameWithType: ImmutableList<E>.reverse
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.reverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.equals*
  name: equals
  nameWithType: ImmutableList<E>.equals
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.equals
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.hashCode*
  name: hashCode
  nameWithType: ImmutableList<E>.hashCode
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.hashCode
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.builder*
  name: <E>builder
  nameWithType: ImmutableList<E>.<E>builder
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>builder
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.builderWithExpectedSize*
  name: <E>builderWithExpectedSize
  nameWithType: ImmutableList<E>.<E>builderWithExpectedSize
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList<E>.<E>builderWithExpectedSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
  name: ImmutableCollection<E>
  nameWithType: ImmutableCollection<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection<E>
- uid: java.util.RandomAccess
  name: RandomAccess
  nameWithType: RandomAccess
  fullName: java.util.RandomAccess
- uid: java.util.List<E>
  name: List<E>
  nameWithType: List<E>
  fullName: java.util.List<E>
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
  name: ImmutableCollection.removeAll(Collection<?>)
  nameWithType: ImmutableCollection.removeAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection<?>)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
  name: ImmutableCollection.add(E)
  nameWithType: ImmutableCollection.add(E)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.add(E)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
  name: ImmutableCollection.toArray()
  nameWithType: ImmutableCollection.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.toArray()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
  name: ImmutableCollection.remove(Object)
  nameWithType: ImmutableCollection.remove(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.remove(java.lang.Object)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
  name: ImmutableCollection.removeIf(Predicate<? super E>)
  nameWithType: ImmutableCollection.removeIf(Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
  name: ImmutableCollection.iterator()
  nameWithType: ImmutableCollection.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.iterator()
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
  name: ImmutableCollection.<T>toArray(T[])
  nameWithType: ImmutableCollection.<T>toArray(T[])
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.<T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
  name: ImmutableCollection.asList()
  nameWithType: ImmutableCollection.asList()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.asList()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
  name: ImmutableCollection.addAll(Collection<? extends E>)
  nameWithType: ImmutableCollection.addAll(Collection<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
  name: ImmutableCollection.retainAll(Collection<?>)
  nameWithType: ImmutableCollection.retainAll(Collection<?>)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection<?>)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
  name: ImmutableCollection.spliterator()
  nameWithType: ImmutableCollection.spliterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.spliterator()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
  name: ImmutableCollection.contains(Object)
  nameWithType: ImmutableCollection.contains(Object)
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.contains(java.lang.Object)
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
  name: ImmutableCollection.clear()
  nameWithType: ImmutableCollection.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.clear()
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder
  name: ImmutableList.Builder<E>
  nameWithType: ImmutableList.Builder<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList.Builder<E>
- uid: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: E,?,ImmutableList
  nameWithType: E,?,ImmutableList
  fullName: E,?,com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
  name: UnmodifiableIterator
  nameWithType: UnmodifiableIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator
- uid: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator
  name: UnmodifiableListIterator
  nameWithType: UnmodifiableListIterator
  fullName: com.azure.cosmos.implementation.guava25.collect.UnmodifiableListIterator
- uid: java.util.function.Consumer
  name: Consumer
  nameWithType: Consumer
  fullName: java.util.function.Consumer
- uid: java.util.function.UnaryOperator
  name: UnaryOperator
  nameWithType: UnaryOperator
  fullName: java.util.function.UnaryOperator
- uid: java.util.Spliterator
  name: Spliterator
  nameWithType: Spliterator
  fullName: java.util.Spliterator
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
  name: ImmutableCollection
  nameWithType: ImmutableCollection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
  name: ImmutableCollection.removeAll(Collection
  nameWithType: ImmutableCollection.removeAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
  name: ImmutableCollection.removeIf(Predicate
  nameWithType: ImmutableCollection.removeIf(Predicate
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.removeIf(java.util.function.Predicate
- uid: '? super E>)'
  name: '? super E>)'
  nameWithType: '? super E>)'
  fullName: '? super E>)'
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
  name: ImmutableCollection.
  nameWithType: ImmutableCollection.
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
  name: ImmutableCollection.addAll(Collection
  nameWithType: ImmutableCollection.addAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.addAll(java.util.Collection
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
  name: ImmutableCollection.retainAll(Collection
  nameWithType: ImmutableCollection.retainAll(Collection
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableCollection.retainAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
