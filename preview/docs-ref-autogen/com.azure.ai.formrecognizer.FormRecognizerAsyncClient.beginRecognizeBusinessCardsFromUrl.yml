### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl"
name: "beginRecognizeBusinessCardsFromUrl"
nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  name: "beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  summary: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a business card.\n\n**Code sample**\n\n```java\nString businessCardUrl = \"{business_card_url}\";\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedBusinessCards -> {\n         for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n             RecognizedForm recognizedForm = recognizedBusinessCards.get(i);\n             Map<String, FormField> recognizedFields = recognizedForm.getFields();\n             System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n             FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n             if (contactNamesFormField != null) {\n                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                     contactNamesList.stream()\n                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                         .map(contactName -> {\n                             System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                             return contactName.getValue().asMap();\n                         })\n                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                             if (\"FirstName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String firstName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                         firstName, contactName.getConfidence());\n                                 }\n                             }\n                             if (\"LastName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String lastName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                         lastName, contactName.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n             FormField jobTitles = recognizedFields.get(\"JobTitles\");\n             if (jobTitles != null) {\n                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                     jobTitlesItems.stream().forEach(jobTitlesItem -> {\n                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                             String jobTitle = jobTitlesItem.getValue().asString();\n                             System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                                 jobTitle, jobTitlesItem.getConfidence());\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  parameters:
  - description: "The source URL to the input business card."
    name: "businessCardUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize business card operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  name: "beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  nameWithType: "FormRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  summary: "Recognizes business card data using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support.\n\nSee [here][] for fields found on a business card.\n\n**Code sample**\n\n```java\nString businessCardUrl = \"{business_card_url}\";\n boolean includeFieldElements = true;\n // if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl,\n     new RecognizeBusinessCardsOptions()\n         .setFieldElementsIncluded(includeFieldElements)\n         .setPollInterval(Duration.ofSeconds(5)))\n     .flatMap(AsyncPollResponse::getFinalResult)\n     .subscribe(recognizedBusinessCards -> {\n         for (int i = 0; i < recognizedBusinessCards.size(); i++) {\n             RecognizedForm recognizedBusinessCard = recognizedBusinessCards.get(i);\n             Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n             System.out.printf(\"----------- Recognized Business Card page %d -----------%n\", i);\n             FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n             if (contactNamesFormField != null) {\n                 if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                     List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                     contactNamesList.stream()\n                         .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                         .map(contactName -> {\n                             System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                             return contactName.getValue().asMap();\n                         })\n                         .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                             if (\"FirstName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String firstName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                         firstName, contactName.getConfidence());\n                                 }\n                             }\n                             if (\"LastName\".equals(key)) {\n                                 if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                     String lastName = contactName.getValue().asString();\n                                     System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                         lastName, contactName.getConfidence());\n                                 }\n                             }\n                         }));\n                 }\n             }\n             FormField jobTitles = recognizedFields.get(\"JobTitles\");\n             if (jobTitles != null) {\n                 if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                     List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                     jobTitlesItems.stream().forEach(jobTitlesItem -> {\n                         if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                             String jobTitle = jobTitlesItem.getValue().asString();\n                             System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                                 jobTitle, jobTitlesItem.getConfidence());\n                         }\n                     });\n                 }\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  parameters:
  - description: "The source URL to the input business card."
    name: "businessCardUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a business card."
    name: "recognizeBusinessCardsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions&text=RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> that polls the recognize business card operation until it has completed, has failed,\n or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
