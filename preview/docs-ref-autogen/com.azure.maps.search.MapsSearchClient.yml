### YamlMime:JavaType
uid: "com.azure.maps.search.MapsSearchClient"
fullName: "com.azure.maps.search.MapsSearchClient"
name: "MapsSearchClient"
nameWithType: "MapsSearchClient"
summary: "<xref uid=\"com.azure.maps.search.MapsSearchClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapsSearchClient\"></xref> instances are created via the <xref uid=\"com.azure.maps.search.MapsSearchClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapsSearchClientBuilder\"></xref>, as shown below."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **MapsSearchClient**"
methods:
- uid: "com.azure.maps.search.MapsSearchClient.getGeocoding(com.azure.maps.search.models.BaseSearchOptions)"
  fullName: "com.azure.maps.search.MapsSearchClient.getGeocoding(BaseSearchOptions options)"
  name: "getGeocoding(BaseSearchOptions options)"
  nameWithType: "MapsSearchClient.getGeocoding(BaseSearchOptions options)"
  summary: "Use to get longitude and latitude coordinates of a street address or name of a place."
  parameters:
  - description: "base search options.\n\n **If query is given, should not use this parameter.**."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.BaseSearchOptions?alt=com.azure.maps.search.models.BaseSearchOptions&text=BaseSearchOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public GeocodingResponse getGeocoding(BaseSearchOptions options)"
  desc: "Use to get longitude and latitude coordinates of a street address or name of a place. The \\`Get Geocoding\\` API is an HTTP \\`GET\\` request that returns the longitude and latitude coordinates of the location being searched. In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties and states. The response also returns detailed address properties such as street, postal code, municipality, and country/region information."
  returns:
    description: "this object is returned from a successful Geocoding call on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.maps.search.models.GeocodingResponse?alt=com.azure.maps.search.models.GeocodingResponse&text=GeocodingResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.search.MapsSearchClient.getGeocodingBatch(com.azure.maps.search.models.GeocodingBatchRequestBody)"
  fullName: "com.azure.maps.search.MapsSearchClient.getGeocodingBatch(GeocodingBatchRequestBody body)"
  name: "getGeocodingBatch(GeocodingBatchRequestBody body)"
  nameWithType: "MapsSearchClient.getGeocodingBatch(GeocodingBatchRequestBody body)"
  summary: "Use to send a batch of queries to the \\[Geocoding\\](/rest/api/maps/search/get-geocoding) API in a single request."
  parameters:
  - description: "The list of address geocoding queries/requests to process. The list can contain\n a max of 100 queries and must contain at least 1 query."
    name: "body"
    type: "<xref href=\"com.azure.maps.search.models.GeocodingBatchRequestBody?alt=com.azure.maps.search.models.GeocodingBatchRequestBody&text=GeocodingBatchRequestBody\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public GeocodingBatchResponse getGeocodingBatch(GeocodingBatchRequestBody body)"
  desc: "Use to send a batch of queries to the \\[Geocoding\\](/rest/api/maps/search/get-geocoding) API in a single request. The \\`Get Geocoding Batch\\` API is an HTTP \\`POST\\` request that sends batches of up to \\*\\*100\\*\\* queries to the \\[Geocoding\\](/rest/api/maps/search/get-geocoding) API in a single request. \\#\\#\\# Submit Synchronous Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to \\*\\*100\\*\\* for this API. \\`\\`\\` POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01 \\`\\`\\` \\#\\#\\# POST Body for Batch Request To send the \\_geocoding\\_ queries you will use a \\`POST\\` request where the request body will contain the \\`batchItems\\` array in \\`json\\` format and the \\`Content-Type\\` header will be set to \\`application/json\\`. Here's a sample request body containing 2 \\_geocoding\\_ queries: \\`\\`\\` \\{ \"batchItems\": \\[ \\{ \"addressLine\": \"One, Microsoft Way, Redmond, WA 98052\", \"top\": 2 \\}, \\{ \"addressLine\": \"Pike Pl\", \"adminDistrict\": \"WA\", \"locality\": \"Seattle\", \"top\": 3 \\} \\] \\} \\`\\`\\` A \\_geocoding\\_ batchItem object can accept any of the supported \\_geocoding\\_ \\[URI parameters\\](/rest/api/maps/search/get-geocoding\\#uri-parameters). The batch should contain at least \\*\\*1\\*\\* query. \\#\\#\\# Batch Response Model The batch response contains a \\`summary\\` component that indicates the \\`totalRequests\\` that were part of the original batch request and \\`successfulRequests\\` i.e. queries which were executed successfully. The batch response also includes a \\`batchItems\\` array which contains a response for each and every query in the batch request. The \\`batchItems\\` will contain the results in the exact same order the original queries were sent in the batch request. Each item is of one of the following types: - \\[\\`GeocodingResponse\\`\\](/rest/api/maps/search/get-geocoding\\#geocodingresponse) - If the query completed successfully. - \\`Error\\` - If the query failed. The response will contain a \\`code\\` and a \\`message\\` in this case."
  returns:
    description: "this object is returned from a successful Geocoding Batch service call on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.maps.search.models.GeocodingBatchResponse?alt=com.azure.maps.search.models.GeocodingBatchResponse&text=GeocodingBatchResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.search.MapsSearchClient.getGeocodingBatchWithResponse(com.azure.maps.search.models.GeocodingBatchRequestBody,com.azure.core.util.Context)"
  fullName: "com.azure.maps.search.MapsSearchClient.getGeocodingBatchWithResponse(GeocodingBatchRequestBody body, Context context)"
  name: "getGeocodingBatchWithResponse(GeocodingBatchRequestBody body, Context context)"
  nameWithType: "MapsSearchClient.getGeocodingBatchWithResponse(GeocodingBatchRequestBody body, Context context)"
  summary: "Use to send a batch of queries to the \\[Geocoding\\](/rest/api/maps/search/get-geocoding) API in a single request."
  parameters:
  - description: "The list of address geocoding queries/requests to process. The list can contain\n a max of 100 queries and must contain at least 1 query."
    name: "body"
    type: "<xref href=\"com.azure.maps.search.models.GeocodingBatchRequestBody?alt=com.azure.maps.search.models.GeocodingBatchRequestBody&text=GeocodingBatchRequestBody\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<GeocodingBatchResponse> getGeocodingBatchWithResponse(GeocodingBatchRequestBody body, Context context)"
  desc: "Use to send a batch of queries to the \\[Geocoding\\](/rest/api/maps/search/get-geocoding) API in a single request. The \\`Get Geocoding Batch\\` API is an HTTP \\`POST\\` request that sends batches of up to \\*\\*100\\*\\* queries to the \\[Geocoding\\](/rest/api/maps/search/get-geocoding) API in a single request. \\#\\#\\# Submit Synchronous Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to \\*\\*100\\*\\* for this API. \\`\\`\\` POST https://atlas.microsoft.com/geocode:batch?api-version=2023-06-01 \\`\\`\\` \\#\\#\\# POST Body for Batch Request To send the \\_geocoding\\_ queries you will use a \\`POST\\` request where the request body will contain the \\`batchItems\\` array in \\`json\\` format and the \\`Content-Type\\` header will be set to \\`application/json\\`. Here's a sample request body containing 2 \\_geocoding\\_ queries: \\`\\`\\` \\{ \"batchItems\": \\[ \\{ \"addressLine\": \"One, Microsoft Way, Redmond, WA 98052\", \"top\": 2 \\}, \\{ \"addressLine\": \"Pike Pl\", \"adminDistrict\": \"WA\", \"locality\": \"Seattle\", \"top\": 3 \\} \\] \\} \\`\\`\\` A \\_geocoding\\_ batchItem object can accept any of the supported \\_geocoding\\_ \\[URI parameters\\](/rest/api/maps/search/get-geocoding\\#uri-parameters). The batch should contain at least \\*\\*1\\*\\* query. \\#\\#\\# Batch Response Model The batch response contains a \\`summary\\` component that indicates the \\`totalRequests\\` that were part of the original batch request and \\`successfulRequests\\` i.e. queries which were executed successfully. The batch response also includes a \\`batchItems\\` array which contains a response for each and every query in the batch request. The \\`batchItems\\` will contain the results in the exact same order the original queries were sent in the batch request. Each item is of one of the following types: - \\[\\`GeocodingResponse\\`\\](/rest/api/maps/search/get-geocoding\\#geocodingresponse) - If the query completed successfully. - \\`Error\\` - If the query failed. The response will contain a \\`code\\` and a \\`message\\` in this case."
  returns:
    description: "this object is returned from a successful Geocoding Batch service call along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.GeocodingBatchResponse?alt=com.azure.maps.search.models.GeocodingBatchResponse&text=GeocodingBatchResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchClient.getGeocodingNoCustomHeaderWithResponse(com.azure.maps.search.models.BaseSearchOptions,com.azure.core.util.Context)"
  fullName: "com.azure.maps.search.MapsSearchClient.getGeocodingNoCustomHeaderWithResponse(BaseSearchOptions options, Context context)"
  name: "getGeocodingNoCustomHeaderWithResponse(BaseSearchOptions options, Context context)"
  nameWithType: "MapsSearchClient.getGeocodingNoCustomHeaderWithResponse(BaseSearchOptions options, Context context)"
  summary: "Use to get longitude and latitude coordinates of a street address or name of a place."
  parameters:
  - description: "base search options.\n\n **If query is given, should not use this parameter.**."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.BaseSearchOptions?alt=com.azure.maps.search.models.BaseSearchOptions&text=BaseSearchOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<GeocodingResponse> getGeocodingNoCustomHeaderWithResponse(BaseSearchOptions options, Context context)"
  desc: "Use to get longitude and latitude coordinates of a street address or name of a place. The \\`Get Geocoding\\` API is an HTTP \\`GET\\` request that returns the longitude and latitude coordinates of the location being searched. In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties and states. The response also returns detailed address properties such as street, postal code, municipality, and country/region information."
  returns:
    description: "this object is returned from a successful Geocoding call along with <xref uid=\"com.azure.core.http.rest.ResponseBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ResponseBase\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.GeocodingResponse?alt=com.azure.maps.search.models.GeocodingResponse&text=GeocodingResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchClient.getGeocodingWithBaseResponse(com.azure.maps.search.models.BaseSearchOptions,com.azure.core.util.Context)"
  fullName: "com.azure.maps.search.MapsSearchClient.getGeocodingWithBaseResponse(BaseSearchOptions options, Context context)"
  name: "getGeocodingWithBaseResponse(BaseSearchOptions options, Context context)"
  nameWithType: "MapsSearchClient.getGeocodingWithBaseResponse(BaseSearchOptions options, Context context)"
  summary: "Use to get longitude and latitude coordinates of a street address or name of a place."
  parameters:
  - description: "base search options.\n\n **If query is given, should not use this parameter.**."
    name: "options"
    type: "<xref href=\"com.azure.maps.search.models.BaseSearchOptions?alt=com.azure.maps.search.models.BaseSearchOptions&text=BaseSearchOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ResponseBase<SearchesGetGeocodingHeaders,GeocodingResponse> getGeocodingWithBaseResponse(BaseSearchOptions options, Context context)"
  desc: "Use to get longitude and latitude coordinates of a street address or name of a place. The \\`Get Geocoding\\` API is an HTTP \\`GET\\` request that returns the longitude and latitude coordinates of the location being searched. In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties and states. The response also returns detailed address properties such as street, postal code, municipality, and country/region information."
  returns:
    description: "this object is returned from a successful Geocoding call along with <xref uid=\"com.azure.core.http.rest.ResponseBase\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ResponseBase\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.ResponseBase?alt=com.azure.core.http.rest.ResponseBase&text=ResponseBase\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.implementation.models.SearchesGetGeocodingHeaders?alt=com.azure.maps.search.implementation.models.SearchesGetGeocodingHeaders&text=SearchesGetGeocodingHeaders\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.maps.search.models.GeocodingResponse?alt=com.azure.maps.search.models.GeocodingResponse&text=GeocodingResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchClient.getPolygons(com.azure.core.models.GeoPosition,java.lang.String,com.azure.maps.search.models.BoundaryResultTypeEnum,com.azure.maps.search.models.ResolutionEnum)"
  fullName: "com.azure.maps.search.MapsSearchClient.getPolygons(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution)"
  name: "getPolygons(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution)"
  nameWithType: "MapsSearchClient.getPolygons(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution)"
  summary: "Use to get polygon data of a geographical area shape such as a city or a country region."
  parameters:
  - description: "A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat."
    name: "coordinates"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "A string that represents an [ISO 3166-1 Alpha-2 region/country\n code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels\n to align with the specified user region. By default, the View parameter is set to \\u201cAuto\\u201d even if you haven\\u2019t\n defined it in the request.\n\n Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available\n Views."
    name: "view"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The geopolitical concept to return a boundary for. If not specified, the default is\n `countryRegion` result type."
    name: "resultType"
    type: "<xref href=\"com.azure.maps.search.models.BoundaryResultTypeEnum?alt=com.azure.maps.search.models.BoundaryResultTypeEnum&text=BoundaryResultTypeEnum\" data-throw-if-not-resolved=\"False\" />"
  - description: "Resolution determines the amount of points to send back. If not specified, the default is\n medium resolution."
    name: "resolution"
    type: "<xref href=\"com.azure.maps.search.models.ResolutionEnum?alt=com.azure.maps.search.models.ResolutionEnum&text=ResolutionEnum\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Boundary getPolygons(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution)"
  desc: "Use to get polygon data of a geographical area shape such as a city or a country region. The \\`Get Polygon\\` API is an HTTP \\`GET\\` request that supplies polygon data of a geographical area outline such as a city or a country region."
  returns:
    description: "`GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area."
    type: "<xref href=\"com.azure.maps.search.models.Boundary?alt=com.azure.maps.search.models.Boundary&text=Boundary\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.search.MapsSearchClient.getPolygonsWithResponse(com.azure.core.models.GeoPosition,java.lang.String,com.azure.maps.search.models.BoundaryResultTypeEnum,com.azure.maps.search.models.ResolutionEnum,com.azure.core.util.Context)"
  fullName: "com.azure.maps.search.MapsSearchClient.getPolygonsWithResponse(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution, Context context)"
  name: "getPolygonsWithResponse(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution, Context context)"
  nameWithType: "MapsSearchClient.getPolygonsWithResponse(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution, Context context)"
  summary: "Use to get polygon data of a geographical area shape such as a city or a country region."
  parameters:
  - description: "A point on the earth specified as a longitude and latitude. Example: &amp;coordinates=lon,lat."
    name: "coordinates"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "A string that represents an [ISO 3166-1 Alpha-2 region/country\n code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels\n to align with the specified user region. By default, the View parameter is set to \\u201cAuto\\u201d even if you haven\\u2019t\n defined it in the request.\n\n Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available\n Views."
    name: "view"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The geopolitical concept to return a boundary for. If not specified, the default is\n `countryRegion` result type."
    name: "resultType"
    type: "<xref href=\"com.azure.maps.search.models.BoundaryResultTypeEnum?alt=com.azure.maps.search.models.BoundaryResultTypeEnum&text=BoundaryResultTypeEnum\" data-throw-if-not-resolved=\"False\" />"
  - description: "Resolution determines the amount of points to send back. If not specified, the default is\n medium resolution."
    name: "resolution"
    type: "<xref href=\"com.azure.maps.search.models.ResolutionEnum?alt=com.azure.maps.search.models.ResolutionEnum&text=ResolutionEnum\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Boundary> getPolygonsWithResponse(GeoPosition coordinates, String view, BoundaryResultTypeEnum resultType, ResolutionEnum resolution, Context context)"
  desc: "Use to get polygon data of a geographical area shape such as a city or a country region. The \\`Get Polygon\\` API is an HTTP \\`GET\\` request that supplies polygon data of a geographical area outline such as a city or a country region."
  returns:
    description: "`GeoJSON GeocodingFeature` object that describe the boundaries of a geographical area along with\n <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.Boundary?alt=com.azure.maps.search.models.Boundary&text=Boundary\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchClient.getReverseGeocoding(com.azure.core.models.GeoPosition,java.util.List<com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum>,java.lang.String)"
  fullName: "com.azure.maps.search.MapsSearchClient.getReverseGeocoding(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view)"
  name: "getReverseGeocoding(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view)"
  nameWithType: "MapsSearchClient.getReverseGeocoding(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view)"
  summary: "Use to get a street address and location info from longitude and latitude coordinates."
  parameters:
  - description: "The coordinates of the location that you want to reverse geocode. Example:\n &amp;coordinates=lon,lat."
    name: "coordinates"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specify entity types that you want in the response. Only the types you specify will be\n returned. If the point cannot be mapped to the entity types you specify, no location information is returned in\n the response.\n Default value is all possible entities.\n A comma separated list of entity types selected from the following options.\n\n - Address\n - Neighborhood\n - PopulatedPlace\n - Postcode1\n - AdminDivision1\n - AdminDivision2\n - CountryRegion\n\n These entity types are ordered from the most specific entity to the least specific entity. When entities of more\n than one entity type are found, only the most specific entity is returned. For example, if you specify Address\n and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is\n returned in the response."
    name: "resultTypes"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum?alt=com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum&text=ReverseGeocodingResultTypeEnum\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A string that represents an [ISO 3166-1 Alpha-2 region/country\n code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels\n to align with the specified user region. By default, the View parameter is set to \\u201cAuto\\u201d even if you haven\\u2019t\n defined it in the request.\n\n Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available\n Views."
    name: "view"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public GeocodingResponse getReverseGeocoding(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view)"
  desc: "Use to get a street address and location info from longitude and latitude coordinates. The \\`Get Reverse Geocoding\\` API is an HTTP \\`GET\\` request used to translate a coordinate (example: 37.786505, -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will return address information for a given coordinate."
  returns:
    description: "this object is returned from a successful Geocoding call."
    type: "<xref href=\"com.azure.maps.search.models.GeocodingResponse?alt=com.azure.maps.search.models.GeocodingResponse&text=GeocodingResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.search.MapsSearchClient.getReverseGeocodingBatch(com.azure.maps.search.models.ReverseGeocodingBatchRequestBody)"
  fullName: "com.azure.maps.search.MapsSearchClient.getReverseGeocodingBatch(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody)"
  name: "getReverseGeocodingBatch(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody)"
  nameWithType: "MapsSearchClient.getReverseGeocodingBatch(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody)"
  summary: "Use to send a batch of queries to the \\[Reverse Geocoding\\](/rest/api/maps/search/get-reverse-geocoding) API in a single request."
  parameters:
  - description: "The list of reverse geocoding queries/requests to process. The list can\n contain a max of 100 queries and must contain at least 1 query."
    name: "reverseGeocodingBatchRequestBody"
    type: "<xref href=\"com.azure.maps.search.models.ReverseGeocodingBatchRequestBody?alt=com.azure.maps.search.models.ReverseGeocodingBatchRequestBody&text=ReverseGeocodingBatchRequestBody\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public GeocodingBatchResponse getReverseGeocodingBatch(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody)"
  desc: "Use to send a batch of queries to the \\[Reverse Geocoding\\](/rest/api/maps/search/get-reverse-geocoding) API in a single request. The \\`Get Reverse Geocoding Batch\\` API is an HTTP \\`POST\\` request that sends batches of up to \\*\\*100\\*\\* queries to \\[Reverse Geocoding\\](/rest/api/maps/search/get-reverse-geocoding) API using a single request. \\#\\#\\# Submit Synchronous Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to \\*\\*100\\*\\* for this API. \\`\\`\\` POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01 \\`\\`\\` \\#\\#\\# POST Body for Batch Request To send the \\_reverse geocoding\\_ queries you will use a \\`POST\\` request where the request body will contain the \\`batchItems\\` array in \\`json\\` format and the \\`Content-Type\\` header will be set to \\`application/json\\`. Here's a sample request body containing 2 \\_reverse geocoding\\_ queries: \\`\\`\\` \\{ \"batchItems\": \\[ \\{ \"coordinates\": \\[-122.128275, 47.639429\\], \"resultTypes\": \\[\"Address\", \"PopulatedPlace\"\\] \\}, \\{ \"coordinates\": \\[-122.341979399674, 47.6095253501216\\] \\} \\] \\} \\`\\`\\` A \\_reverse geocoding\\_ batchItem object can accept any of the supported \\_reverse geocoding\\_ \\[URI parameters\\](/rest/api/maps/search/get-reverse-geocoding\\#uri-parameters). The batch should contain at least \\*\\*1\\*\\* query. \\#\\#\\# Batch Response Model The batch response contains a \\`summary\\` component that indicates the \\`totalRequests\\` that were part of the original batch request and \\`successfulRequests\\` i.e. queries which were executed successfully. The batch response also includes a \\`batchItems\\` array which contains a response for each and every query in the batch request. The \\`batchItems\\` will contain the results in the exact same order the original queries were sent in the batch request. Each item is of one of the following types: - \\[\\`GeocodingResponse\\`\\](/rest/api/maps/search/get-reverse-geocoding\\#geocodingresponse) - If the query completed successfully. - \\`Error\\` - If the query failed. The response will contain a \\`code\\` and a \\`message\\` in this case."
  returns:
    description: "this object is returned from a successful Geocoding Batch service call on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.maps.search.models.GeocodingBatchResponse?alt=com.azure.maps.search.models.GeocodingBatchResponse&text=GeocodingBatchResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.maps.search.MapsSearchClient.getReverseGeocodingBatchWithResponse(com.azure.maps.search.models.ReverseGeocodingBatchRequestBody,com.azure.core.util.Context)"
  fullName: "com.azure.maps.search.MapsSearchClient.getReverseGeocodingBatchWithResponse(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context)"
  name: "getReverseGeocodingBatchWithResponse(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context)"
  nameWithType: "MapsSearchClient.getReverseGeocodingBatchWithResponse(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context)"
  summary: "Use to send a batch of queries to the \\[Reverse Geocoding\\](/rest/api/maps/search/get-reverse-geocoding) API in a single request."
  parameters:
  - description: "The list of reverse geocoding queries/requests to process. The list can\n contain a max of 100 queries and must contain at least 1 query."
    name: "reverseGeocodingBatchRequestBody"
    type: "<xref href=\"com.azure.maps.search.models.ReverseGeocodingBatchRequestBody?alt=com.azure.maps.search.models.ReverseGeocodingBatchRequestBody&text=ReverseGeocodingBatchRequestBody\" data-throw-if-not-resolved=\"False\" />"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<GeocodingBatchResponse> getReverseGeocodingBatchWithResponse(ReverseGeocodingBatchRequestBody reverseGeocodingBatchRequestBody, Context context)"
  desc: "Use to send a batch of queries to the \\[Reverse Geocoding\\](/rest/api/maps/search/get-reverse-geocoding) API in a single request. The \\`Get Reverse Geocoding Batch\\` API is an HTTP \\`POST\\` request that sends batches of up to \\*\\*100\\*\\* queries to \\[Reverse Geocoding\\](/rest/api/maps/search/get-reverse-geocoding) API using a single request. \\#\\#\\# Submit Synchronous Batch Request The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to \\*\\*100\\*\\* for this API. \\`\\`\\` POST https://atlas.microsoft.com/reverseGeocode:batch?api-version=2023-06-01 \\`\\`\\` \\#\\#\\# POST Body for Batch Request To send the \\_reverse geocoding\\_ queries you will use a \\`POST\\` request where the request body will contain the \\`batchItems\\` array in \\`json\\` format and the \\`Content-Type\\` header will be set to \\`application/json\\`. Here's a sample request body containing 2 \\_reverse geocoding\\_ queries: \\`\\`\\` \\{ \"batchItems\": \\[ \\{ \"coordinates\": \\[-122.128275, 47.639429\\], \"resultTypes\": \\[\"Address\", \"PopulatedPlace\"\\] \\}, \\{ \"coordinates\": \\[-122.341979399674, 47.6095253501216\\] \\} \\] \\} \\`\\`\\` A \\_reverse geocoding\\_ batchItem object can accept any of the supported \\_reverse geocoding\\_ \\[URI parameters\\](/rest/api/maps/search/get-reverse-geocoding\\#uri-parameters). The batch should contain at least \\*\\*1\\*\\* query. \\#\\#\\# Batch Response Model The batch response contains a \\`summary\\` component that indicates the \\`totalRequests\\` that were part of the original batch request and \\`successfulRequests\\` i.e. queries which were executed successfully. The batch response also includes a \\`batchItems\\` array which contains a response for each and every query in the batch request. The \\`batchItems\\` will contain the results in the exact same order the original queries were sent in the batch request. Each item is of one of the following types: - \\[\\`GeocodingResponse\\`\\](/rest/api/maps/search/get-reverse-geocoding\\#geocodingresponse) - If the query completed successfully. - \\`Error\\` - If the query failed. The response will contain a \\`code\\` and a \\`message\\` in this case."
  returns:
    description: "this object is returned from a successful Geocoding Batch service call along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>"
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.GeocodingBatchResponse?alt=com.azure.maps.search.models.GeocodingBatchResponse&text=GeocodingBatchResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.search.MapsSearchClient.getReverseGeocodingWithResponse(com.azure.core.models.GeoPosition,java.util.List<com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum>,java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.maps.search.MapsSearchClient.getReverseGeocodingWithResponse(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context)"
  name: "getReverseGeocodingWithResponse(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context)"
  nameWithType: "MapsSearchClient.getReverseGeocodingWithResponse(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context)"
  summary: "Use to get a street address and location info from longitude and latitude coordinates."
  parameters:
  - description: "The coordinates of the location that you want to reverse geocode. Example:\n &amp;coordinates=lon,lat."
    name: "coordinates"
    type: "<xref href=\"com.azure.core.models.GeoPosition?alt=com.azure.core.models.GeoPosition&text=GeoPosition\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specify entity types that you want in the response. Only the types you specify will be\n returned. If the point cannot be mapped to the entity types you specify, no location information is returned in\n the response.\n Default value is all possible entities.\n A comma separated list of entity types selected from the following options.\n\n - Address\n - Neighborhood\n - PopulatedPlace\n - Postcode1\n - AdminDivision1\n - AdminDivision2\n - CountryRegion\n\n These entity types are ordered from the most specific entity to the least specific entity. When entities of more\n than one entity type are found, only the most specific entity is returned. For example, if you specify Address\n and AdminDistrict1 as entity types and entities were found for both types, only the Address entity information is\n returned in the response."
    name: "resultTypes"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum?alt=com.azure.maps.search.implementation.models.ReverseGeocodingResultTypeEnum&text=ReverseGeocodingResultTypeEnum\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "A string that represents an [ISO 3166-1 Alpha-2 region/country\n code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). This will alter Geopolitical disputed borders and labels\n to align with the specified user region. By default, the View parameter is set to \\u201cAuto\\u201d even if you haven\\u2019t\n defined it in the request.\n\n Please refer to [Supported Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see the available\n Views."
    name: "view"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<GeocodingResponse> getReverseGeocodingWithResponse(GeoPosition coordinates, List<ReverseGeocodingResultTypeEnum> resultTypes, String view, Context context)"
  desc: "Use to get a street address and location info from longitude and latitude coordinates. The \\`Get Reverse Geocoding\\` API is an HTTP \\`GET\\` request used to translate a coordinate (example: 37.786505, -122.3862) into a human understandable street address. Useful in tracking applications where you receive a GPS feed from the device or asset and wish to know the address associated with the coordinates. This endpoint will return address information for a given coordinate."
  returns:
    description: "this object is returned from a successful Geocoding call along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.search.models.GeocodingResponse?alt=com.azure.maps.search.models.GeocodingResponse&text=GeocodingResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "<xref uid=\"com.azure.maps.search.MapsSearchClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapsSearchClient\"></xref> instances are created via the <xref uid=\"com.azure.maps.search.MapsSearchClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"MapsSearchClientBuilder\"></xref>, as shown below. Creating a sync client using a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a builder\n MapsSearchClientBuilder builder = new MapsSearchClientBuilder();\n builder.credential(keyCredential);\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds the client\n MapsSearchClient client = builder.buildClient();\n```"
metadata: {}
package: "com.azure.maps.search"
artifact: com.azure:azure-maps-search:2.0.0-beta.1
