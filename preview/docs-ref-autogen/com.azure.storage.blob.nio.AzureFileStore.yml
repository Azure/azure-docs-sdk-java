### YamlMime:ManagedReference
items:
- uid: com.azure.storage.blob.nio.AzureFileStore
  id: AzureFileStore
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio
  children:
  - com.azure.storage.blob.nio.AzureFileStore.<V>getFileStoreAttributeView(java.lang.Class<V>)
  - com.azure.storage.blob.nio.AzureFileStore.getAttribute(java.lang.String)
  - com.azure.storage.blob.nio.AzureFileStore.getTotalSpace()
  - com.azure.storage.blob.nio.AzureFileStore.getUnallocatedSpace()
  - com.azure.storage.blob.nio.AzureFileStore.getUsableSpace()
  - com.azure.storage.blob.nio.AzureFileStore.isReadOnly()
  - com.azure.storage.blob.nio.AzureFileStore.name()
  - com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)
  - com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView(java.lang.String)
  - com.azure.storage.blob.nio.AzureFileStore.type()
  langs:
  - java
  name: AzureFileStore
  nameWithType: AzureFileStore
  fullName: com.azure.storage.blob.nio.AzureFileStore
  type: Class
  package: com.azure.storage.blob.nio
  summary: An `AzureFileStore` is a <xref uid="java.nio.file.FileStore" data-throw-if-not-resolved="false">FileStore</xref> backed by an Azure Blob Storage container.
  syntax:
    content: public final class AzureFileStore extends FileStore
  inheritance:
  - java.lang.Object
  - java.nio.file.FileStore
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.nio.file.FileStore.<V>getFileStoreAttributeView(java.lang.Class<V>)
  - java.nio.file.FileStore.getAttribute(java.lang.String)
  - java.nio.file.FileStore.getBlockSize()
  - java.nio.file.FileStore.getTotalSpace()
  - java.nio.file.FileStore.getUnallocatedSpace()
  - java.nio.file.FileStore.getUsableSpace()
  - java.nio.file.FileStore.isReadOnly()
  - java.nio.file.FileStore.name()
  - java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)
  - java.nio.file.FileStore.supportsFileAttributeView(java.lang.String)
  - java.nio.file.FileStore.type()
- uid: com.azure.storage.blob.nio.AzureFileStore.<V>getFileStoreAttributeView(java.lang.Class<V>)
  id: <V>getFileStoreAttributeView(java.lang.Class<V>)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: <V>getFileStoreAttributeView(Class<V> aClass)
  nameWithType: AzureFileStore.<V>getFileStoreAttributeView(Class<V> aClass)
  fullName: com.azure.storage.blob.nio.AzureFileStore.<V>getFileStoreAttributeView(Class<V> aClass)
  overload: com.azure.storage.blob.nio.AzureFileStore.getFileStoreAttributeView*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns a FileStoreAttributeView of the given type.


    This method always returns null as no <xref uid="" data-throw-if-not-resolved="false">FileStoreAttributeView</xref> is currently supported.
  syntax:
    content: public V <V>getFileStoreAttributeView(Class<V> aClass)
    parameters:
    - id: aClass
      type: java.lang.Class<V>
      description: a class
    return:
      type: V
      description: "null"
- uid: com.azure.storage.blob.nio.AzureFileStore.AzureFileStore(com.azure.storage.blob.nio.AzureFileSystem,java.lang.String)
  id: AzureFileStore(com.azure.storage.blob.nio.AzureFileSystem,java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: AzureFileStore(AzureFileSystem parentFileSystem, String containerName)
  nameWithType: AzureFileStore.AzureFileStore(AzureFileSystem parentFileSystem, String containerName)
  fullName: com.azure.storage.blob.nio.AzureFileStore.AzureFileStore(AzureFileSystem parentFileSystem, String containerName)
  overload: com.azure.storage.blob.nio.AzureFileStore.AzureFileStore*
  type: Constructor
  package: com.azure.storage.blob.nio
  syntax:
    content: " AzureFileStore(AzureFileSystem parentFileSystem, String containerName)"
    parameters:
    - id: parentFileSystem
      type: com.azure.storage.blob.nio.AzureFileSystem
    - id: containerName
      type: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileStore.getAttribute(java.lang.String)
  id: getAttribute(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: getAttribute(String s)
  nameWithType: AzureFileStore.getAttribute(String s)
  fullName: com.azure.storage.blob.nio.AzureFileStore.getAttribute(String s)
  overload: com.azure.storage.blob.nio.AzureFileStore.getAttribute*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Unsupported.


    This method always throws an `UnsupportedOperationException` as no <xref uid="" data-throw-if-not-resolved="false">FileStoreAttributeView</xref> is currently supported.
  syntax:
    content: public Object getAttribute(String s)
    parameters:
    - id: s
      type: java.lang.String
      description: a string
    return:
      type: java.lang.Object
      description: The attribute value.
  exceptions:
  - type: java.io.IOException
    description: unsupported
- uid: com.azure.storage.blob.nio.AzureFileStore.getTotalSpace()
  id: getTotalSpace()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: getTotalSpace()
  nameWithType: AzureFileStore.getTotalSpace()
  fullName: com.azure.storage.blob.nio.AzureFileStore.getTotalSpace()
  overload: com.azure.storage.blob.nio.AzureFileStore.getTotalSpace*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the size, in bytes, of the file store.


    Containers do not limit the amount of data stored. This method will always return max long.
  syntax:
    content: public long getTotalSpace()
    return:
      type: long
      description: the size of the file store.
  exceptions:
  - type: java.io.IOException
    description: If an I/O error occurs.
- uid: com.azure.storage.blob.nio.AzureFileStore.getUnallocatedSpace()
  id: getUnallocatedSpace()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: getUnallocatedSpace()
  nameWithType: AzureFileStore.getUnallocatedSpace()
  fullName: com.azure.storage.blob.nio.AzureFileStore.getUnallocatedSpace()
  overload: com.azure.storage.blob.nio.AzureFileStore.getUnallocatedSpace*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the number of unallocated bytes in the file store.


    Containers do not limit the amount of data stored. This method will always return max long.
  syntax:
    content: public long getUnallocatedSpace()
    return:
      type: long
      description: the number of unallocated bytes in the file store.
  exceptions:
  - type: java.io.IOException
    description: If an I/O error occurs.
- uid: com.azure.storage.blob.nio.AzureFileStore.getUsableSpace()
  id: getUsableSpace()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: getUsableSpace()
  nameWithType: AzureFileStore.getUsableSpace()
  fullName: com.azure.storage.blob.nio.AzureFileStore.getUsableSpace()
  overload: com.azure.storage.blob.nio.AzureFileStore.getUsableSpace*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Returns the number of bytes available to this Java virtual machine on the file store.


    Containers do not limit the amount of data stored. This method will always return max long.
  syntax:
    content: public long getUsableSpace()
    return:
      type: long
      description: the number of bytes available on the file store.
  exceptions:
  - type: java.io.IOException
    description: If an I/O error occurs.
- uid: com.azure.storage.blob.nio.AzureFileStore.isReadOnly()
  id: isReadOnly()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: isReadOnly()
  nameWithType: AzureFileStore.isReadOnly()
  fullName: com.azure.storage.blob.nio.AzureFileStore.isReadOnly()
  overload: com.azure.storage.blob.nio.AzureFileStore.isReadOnly*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Always returns false.


    It may be the case that the authentication method provided to this file system only supports read operations and hence the file store is implicitly read only in this view, but that does not imply the underlying container/file store is inherently read only. Creating/specifying read only file stores is not currently supported.
  syntax:
    content: public boolean isReadOnly()
    return:
      type: boolean
      description: false.
- uid: com.azure.storage.blob.nio.AzureFileStore.name()
  id: name()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: name()
  nameWithType: AzureFileStore.name()
  fullName: com.azure.storage.blob.nio.AzureFileStore.name()
  overload: com.azure.storage.blob.nio.AzureFileStore.name*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns the name of the container that underlies this file store.
  syntax:
    content: public String name()
    return:
      type: java.lang.String
      description: the name of the container that underlies this file store.
- uid: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)
  id: supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: supportsFileAttributeView(Class<? extends FileAttributeView> type)
  nameWithType: AzureFileStore.supportsFileAttributeView(Class<? extends FileAttributeView> type)
  fullName: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView(Class<? extends FileAttributeView> type)
  overload: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Tells whether or not this file store supports the file attributes identified by the given file attribute view.


    All file stores in this file system support the following views:

     *  <xref uid="java.nio.file.attribute.BasicFileAttributeView" data-throw-if-not-resolved="false">java.nio.file.attribute.BasicFileAttributeView</xref>
     *  <xref uid="com.azure.storage.blob.nio.AzureBasicFileAttributeView" data-throw-if-not-resolved="false">AzureBasicFileAttributeView</xref>
     *  <xref uid="com.azure.storage.blob.nio.AzureBlobFileAttributeView" data-throw-if-not-resolved="false">AzureBlobFileAttributeView</xref>
  syntax:
    content: public boolean supportsFileAttributeView(Class<? extends FileAttributeView> type)
    parameters:
    - id: type
      type: java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>
      description: the file attribute view type
    return:
      type: boolean
      description: Whether the file attribute view is supported.
- uid: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView(java.lang.String)
  id: supportsFileAttributeView(java.lang.String)
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: supportsFileAttributeView(String name)
  nameWithType: AzureFileStore.supportsFileAttributeView(String name)
  fullName: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView(String name)
  overload: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView*
  type: Method
  package: com.azure.storage.blob.nio
  summary: >-
    Tells whether or not this file store supports the file attributes identified by the given file attribute view.


    All file stores in this file system support the following views:

     *  <xref uid="java.nio.file.attribute.BasicFileAttributeView" data-throw-if-not-resolved="false">java.nio.file.attribute.BasicFileAttributeView</xref>
     *  <xref uid="com.azure.storage.blob.nio.AzureBasicFileAttributeView" data-throw-if-not-resolved="false">AzureBasicFileAttributeView</xref>
     *  <xref uid="com.azure.storage.blob.nio.AzureBlobFileAttributeView" data-throw-if-not-resolved="false">AzureBlobFileAttributeView</xref>
  syntax:
    content: public boolean supportsFileAttributeView(String name)
    parameters:
    - id: name
      type: java.lang.String
      description: the name of the file attribute view
    return:
      type: boolean
      description: whether the file attribute view is supported.
- uid: com.azure.storage.blob.nio.AzureFileStore.type()
  id: type()
  artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2
  parent: com.azure.storage.blob.nio.AzureFileStore
  langs:
  - java
  name: type()
  nameWithType: AzureFileStore.type()
  fullName: com.azure.storage.blob.nio.AzureFileStore.type()
  overload: com.azure.storage.blob.nio.AzureFileStore.type*
  type: Method
  package: com.azure.storage.blob.nio
  summary: Returns the `String "AzureBlobContainer"` to indicate that the file store is backed by a remote blob container in Azure Storage.
  syntax:
    content: public String type()
    return:
      type: java.lang.String
      description: <code>"AzureBlobContainer"</code>
references:
- uid: com.azure.storage.blob.nio.AzureFileSystem
  name: AzureFileSystem
  nameWithType: AzureFileSystem
  fullName: com.azure.storage.blob.nio.AzureFileSystem
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.blob.nio.AzureFileStore.AzureFileStore*
  name: AzureFileStore
  nameWithType: AzureFileStore.AzureFileStore
  fullName: com.azure.storage.blob.nio.AzureFileStore.AzureFileStore
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzureFileStore.name*
  name: name
  nameWithType: AzureFileStore.name
  fullName: com.azure.storage.blob.nio.AzureFileStore.name
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzureFileStore.type*
  name: type
  nameWithType: AzureFileStore.type
  fullName: com.azure.storage.blob.nio.AzureFileStore.type
  package: com.azure.storage.blob.nio
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.storage.blob.nio.AzureFileStore.isReadOnly*
  name: isReadOnly
  nameWithType: AzureFileStore.isReadOnly
  fullName: com.azure.storage.blob.nio.AzureFileStore.isReadOnly
  package: com.azure.storage.blob.nio
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.azure.storage.blob.nio.AzureFileStore.getTotalSpace*
  name: getTotalSpace
  nameWithType: AzureFileStore.getTotalSpace
  fullName: com.azure.storage.blob.nio.AzureFileStore.getTotalSpace
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzureFileStore.getUsableSpace*
  name: getUsableSpace
  nameWithType: AzureFileStore.getUsableSpace
  fullName: com.azure.storage.blob.nio.AzureFileStore.getUsableSpace
  package: com.azure.storage.blob.nio
- uid: com.azure.storage.blob.nio.AzureFileStore.getUnallocatedSpace*
  name: getUnallocatedSpace
  nameWithType: AzureFileStore.getUnallocatedSpace
  fullName: com.azure.storage.blob.nio.AzureFileStore.getUnallocatedSpace
  package: com.azure.storage.blob.nio
- uid: java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '? extends java.nio.file.attribute.FileAttributeView'
    name: FileAttributeView
    fullName: '? extends java.nio.file.attribute.FileAttributeView'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView*
  name: supportsFileAttributeView
  nameWithType: AzureFileStore.supportsFileAttributeView
  fullName: com.azure.storage.blob.nio.AzureFileStore.supportsFileAttributeView
  package: com.azure.storage.blob.nio
- uid: java.lang.Class<V>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: V
    name: V
    fullName: V
  - name: '>'
    fullName: '>'
- uid: V
  spec.java:
  - uid: V
    name: V
    fullName: V
- uid: com.azure.storage.blob.nio.AzureFileStore.getFileStoreAttributeView*
  name: <V>getFileStoreAttributeView
  nameWithType: AzureFileStore.<V>getFileStoreAttributeView
  fullName: com.azure.storage.blob.nio.AzureFileStore.<V>getFileStoreAttributeView
  package: com.azure.storage.blob.nio
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.azure.storage.blob.nio.AzureFileStore.getAttribute*
  name: getAttribute
  nameWithType: AzureFileStore.getAttribute
  fullName: com.azure.storage.blob.nio.AzureFileStore.getAttribute
  package: com.azure.storage.blob.nio
- uid: java.nio.file.FileStore
  name: FileStore
  nameWithType: FileStore
  fullName: java.nio.file.FileStore
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.nio.file.FileStore.getUsableSpace()
  name: FileStore.getUsableSpace()
  nameWithType: FileStore.getUsableSpace()
  fullName: java.nio.file.FileStore.getUsableSpace()
- uid: java.nio.file.FileStore.isReadOnly()
  name: FileStore.isReadOnly()
  nameWithType: FileStore.isReadOnly()
  fullName: java.nio.file.FileStore.isReadOnly()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.nio.file.FileStore.getUnallocatedSpace()
  name: FileStore.getUnallocatedSpace()
  nameWithType: FileStore.getUnallocatedSpace()
  fullName: java.nio.file.FileStore.getUnallocatedSpace()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.nio.file.FileStore.<V>getFileStoreAttributeView(java.lang.Class<V>)
  name: FileStore.<V>getFileStoreAttributeView(Class<V>)
  nameWithType: FileStore.<V>getFileStoreAttributeView(Class<V>)
  fullName: java.nio.file.FileStore.<V>getFileStoreAttributeView(java.lang.Class<V>)
- uid: java.nio.file.FileStore.getBlockSize()
  name: FileStore.getBlockSize()
  nameWithType: FileStore.getBlockSize()
  fullName: java.nio.file.FileStore.getBlockSize()
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.nio.file.FileStore.name()
  name: FileStore.name()
  nameWithType: FileStore.name()
  fullName: java.nio.file.FileStore.name()
- uid: java.nio.file.FileStore.getTotalSpace()
  name: FileStore.getTotalSpace()
  nameWithType: FileStore.getTotalSpace()
  fullName: java.nio.file.FileStore.getTotalSpace()
- uid: java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)
  name: FileStore.supportsFileAttributeView(Class<? extends FileAttributeView>)
  nameWithType: FileStore.supportsFileAttributeView(Class<? extends FileAttributeView>)
  fullName: java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class<? extends java.nio.file.attribute.FileAttributeView>)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.nio.file.FileStore.type()
  name: FileStore.type()
  nameWithType: FileStore.type()
  fullName: java.nio.file.FileStore.type()
- uid: java.nio.file.FileStore.supportsFileAttributeView(java.lang.String)
  name: FileStore.supportsFileAttributeView(String)
  nameWithType: FileStore.supportsFileAttributeView(String)
  fullName: java.nio.file.FileStore.supportsFileAttributeView(java.lang.String)
- uid: java.nio.file.FileStore.getAttribute(java.lang.String)
  name: FileStore.getAttribute(String)
  nameWithType: FileStore.getAttribute(String)
  fullName: java.nio.file.FileStore.getAttribute(java.lang.String)
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '? extends java.nio.file.attribute.FileAttributeView'
  name: '? extends FileAttributeView'
  nameWithType: '? extends FileAttributeView'
  fullName: '? extends java.nio.file.attribute.FileAttributeView'
- uid: V>)
  name: V>)
  nameWithType: V>)
  fullName: V>)
- uid: V>getFileStoreAttributeView(java.lang.Class
  name: V>getFileStoreAttributeView(Class
  nameWithType: V>getFileStoreAttributeView(Class
  fullName: V>getFileStoreAttributeView(java.lang.Class
- uid: java.nio.file.FileStore.
  name: FileStore.
  nameWithType: FileStore.
  fullName: java.nio.file.FileStore.
- uid: java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class
  name: FileStore.supportsFileAttributeView(Class
  nameWithType: FileStore.supportsFileAttributeView(Class
  fullName: java.nio.file.FileStore.supportsFileAttributeView(java.lang.Class
- uid: '? extends java.nio.file.attribute.FileAttributeView>)'
  name: '? extends FileAttributeView>)'
  nameWithType: '? extends FileAttributeView>)'
  fullName: '? extends java.nio.file.attribute.FileAttributeView>)'
