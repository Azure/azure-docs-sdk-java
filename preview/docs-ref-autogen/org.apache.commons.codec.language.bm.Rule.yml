### YamlMime:JavaType
uid: "org.apache.commons.codec.language.bm.Rule"
fullName: "org.apache.commons.codec.language.bm.Rule"
name: "Rule"
nameWithType: "Rule"
summary: "A phoneme rule.\n\nRules have a pattern, left context, right context, output phoneme, set of languages for which they apply and a logical flag indicating if all languages must be in play. A rule matches if:\n\n *  the pattern matches at the current position\n *  the string up until the beginning of the pattern matches the left context\n *  the string from the end of the pattern matches the right context\n *  logical is ALL and all languages are in scope; or\n *  logical is any other value and at least one language is in scope\n\nRules are typically generated by parsing rules resources. In normal use, there will be no need for the user to explicitly construct their own.\n\nRules are immutable and thread-safe.\n\n**Rules resources**\n\nRules are typically loaded from resource files. These are UTF-8 encoded text files. They are systematically named following the pattern:\n\n> org/apache/commons/codec/language/bm/$\\{NameType\\#getName\\}\\_$\\{RuleType\\#getName\\}\\_$\\{language\\}.txt\n\nThe format of these resources is the following:\n\n *  **Rules:** whitespace separated, double-quoted strings. There should be 4 columns to each row, and these will be interpreted as:\n    \n    1.  pattern\n    2.  left context\n    3.  right context\n    4.  phoneme\n *  **End-of-line comments:** Any occurrence of '//' will cause all text following on that line to be discarded as a comment.\n *  **Multi-line comments:** Any line starting with '/\\*' will start multi-line commenting mode. This will skip all content until a line ending in '\\*' and '/' is found.\n *  **Blank lines:** All blank lines will be skipped."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class Rule"
constructors:
- "org.apache.commons.codec.language.bm.Rule.Rule(java.lang.String,java.lang.String,java.lang.String,org.apache.commons.codec.language.bm.Rule.PhonemeExpr)"
fields:
- "org.apache.commons.codec.language.bm.Rule.ALL"
- "org.apache.commons.codec.language.bm.Rule.ALL_STRINGS_RMATCHER"
methods:
- "org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)"
- "org.apache.commons.codec.language.bm.Rule.getInstance(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages.LanguageSet)"
- "org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,java.lang.String)"
- "org.apache.commons.codec.language.bm.Rule.getInstanceMap(org.apache.commons.codec.language.bm.NameType,org.apache.commons.codec.language.bm.RuleType,org.apache.commons.codec.language.bm.Languages.LanguageSet)"
- "org.apache.commons.codec.language.bm.Rule.getLContext()"
- "org.apache.commons.codec.language.bm.Rule.getPattern()"
- "org.apache.commons.codec.language.bm.Rule.getPhoneme()"
- "org.apache.commons.codec.language.bm.Rule.getRContext()"
- "org.apache.commons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence,int)"
type: "class"
metadata: {}
package: "org.apache.commons.codec.language.bm"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
