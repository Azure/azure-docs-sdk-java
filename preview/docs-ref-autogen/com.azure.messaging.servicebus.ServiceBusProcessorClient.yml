### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient"
fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient"
name: "ServiceBusProcessorClient"
nameWithType: "ServiceBusProcessorClient"
summary: "The processor client for processing Service Bus messages. <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClients\"></xref> provides a push-based mechanism that invokes the message processing callback when a message is received or the error handler when an error occurs when receiving messages. A <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> can be created to process messages for a session-enabled Service Bus entity or a non session-enabled Service Bus entity.\n\n**Sample code to start a processor client**\n\n```java\nConsumer<ServiceBusReceivedMessageContext> messageProcessor = context -> {\n     ServiceBusReceivedMessage message = context.getMessage();\n     System.out.println(\"Received message \" + message.getBody().toString());\n };\n \n Consumer<Throwable> errorHandler = throwable -> {\n     System.out.println(\"Error when receiving messages \" + throwable.getMessage());\n     if (throwable instanceof ServiceBusReceiverException) {\n         ServiceBusReceiverException serviceBusReceiverException = (ServiceBusReceiverException) throwable;\n         System.out.println(\"Error source \" + serviceBusReceiverException.getErrorSource());\n     }\n };\n \n ServiceBusProcessorClient processorClient = new ServiceBusClientBuilder()\n     .connectionString(\"<< connection-string >>\")\n     .processor()\n     .queueName(\"<< queue name >>\")\n     .processMessage(messageProcessor)\n     .processError(errorHandler)\n     .buildProcessorClient();\n \n // Start the processor in the background\n processorClient.start();\n```\n\n**Sample code to start a session-enabled processor client**\n\n```java\nConsumer<ServiceBusReceivedMessageContext> messageProcessor = context -> {\n     ServiceBusReceivedMessage message = context.getMessage();\n     System.out.println(\"Received message \" + message.getBody().toString()\n         + \" session: \" + message.getSessionId());\n };\n \n Consumer<Throwable> errorHandler = throwable -> {\n     System.out.println(\"Error when receiving messages \" + throwable.getMessage());\n     if (throwable instanceof ServiceBusReceiverException) {\n         ServiceBusReceiverException serviceBusReceiverException = (ServiceBusReceiverException) throwable;\n         System.out.println(\"Error source \" + serviceBusReceiverException.getErrorSource());\n     }\n };\n \n ServiceBusProcessorClient sessionProcessorClient = new ServiceBusClientBuilder()\n     .connectionString(\"<< connection-string >>\")\n     .sessionProcessor()\n     .queueName(\"<< session-enabled queue name >>\")\n     .maxConcurrentSessions(2)\n     .processMessage(messageProcessor)\n     .processError(errorHandler)\n     .buildProcessorClient();\n \n // Start the processor in the background\n sessionProcessorClient.start();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ServiceBusProcessorClient implements AutoCloseable"
methods:
- "com.azure.messaging.servicebus.ServiceBusProcessorClient.close()"
- "com.azure.messaging.servicebus.ServiceBusProcessorClient.isRunning()"
- "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
- "com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()"
type: "class"
implements:
- "<xref href=\"java.lang.AutoCloseable?alt=java.lang.AutoCloseable&text=AutoCloseable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.7
