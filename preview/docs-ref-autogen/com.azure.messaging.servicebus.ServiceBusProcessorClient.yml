### YamlMime:JavaType
uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient"
fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient"
name: "ServiceBusProcessorClient"
nameWithType: "ServiceBusProcessorClient"
summary: "The processor client for processing Service Bus messages."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **ServiceBusProcessorClient**</br> implements <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\">AutoCloseable</a>"
methods:
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.close()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.close()"
  name: "close()"
  nameWithType: "ServiceBusProcessorClient.close()"
  summary: "Stops message processing and closes the processor."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void close()"
  desc: "Stops message processing and closes the processor. The receiving links and sessions are closed and calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> will create a new processing cycle with new links and new sessions."
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getIdentifier()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getIdentifier()"
  name: "getIdentifier()"
  nameWithType: "ServiceBusProcessorClient.getIdentifier()"
  summary: "Gets the identifier of the instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  modifiers:
  - "synchronized"
  syntax: "public synchronized String getIdentifier()"
  desc: "Gets the identifier of the instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "The identifier that can identify the instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getQueueName()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getQueueName()"
  name: "getQueueName()"
  nameWithType: "ServiceBusProcessorClient.getQueueName()"
  summary: "Returns the queue name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  syntax: "public String getQueueName()"
  desc: "Returns the queue name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "the queue name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> or <code>null</code> if\n the processor instance is for a topic and subscription."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getSubscriptionName()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getSubscriptionName()"
  name: "getSubscriptionName()"
  nameWithType: "ServiceBusProcessorClient.getSubscriptionName()"
  summary: "Returns the subscription name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  syntax: "public String getSubscriptionName()"
  desc: "Returns the subscription name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "the subscription name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> or <code>null</code>\n if the processor instance is for a queue."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getTopicName()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.getTopicName()"
  name: "getTopicName()"
  nameWithType: "ServiceBusProcessorClient.getTopicName()"
  summary: "Returns the topic name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  syntax: "public String getTopicName()"
  desc: "Returns the topic name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref>."
  returns:
    description: "the topic name associated with this instance of <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> or <code>null</code> if\n the processor instance is for a queue."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.isRunning()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.isRunning()"
  name: "isRunning()"
  nameWithType: "ServiceBusProcessorClient.isRunning()"
  summary: "Returns `true` if the processor is running."
  modifiers:
  - "synchronized"
  syntax: "public synchronized boolean isRunning()"
  desc: "Returns `true` if the processor is running. If the processor is stopped or closed, this method returns `false`."
  returns:
    description: "<code>true</code> if the processor is running; <code>false</code> otherwise."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.start()"
  name: "start()"
  nameWithType: "ServiceBusProcessorClient.start()"
  summary: "Starts the processor in the background."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void start()"
  desc: "Starts the processor in the background. When this method is called, the processor will initiate a message receiver that will invoke the message handler when new messages are available. This method is idempotent (ie. calling `start()` again after the processor is already running is a no-op).\n\nCalling `start()` after calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"stop()\"></xref> will resume processing messages using the same underlying connection.\n\nCalling `start()` after calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.close()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"close()\"></xref> will start the processor with a new connection."
- uid: "com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()"
  fullName: "com.azure.messaging.servicebus.ServiceBusProcessorClient.stop()"
  name: "stop()"
  nameWithType: "ServiceBusProcessorClient.stop()"
  summary: "Stops the message processing for this processor."
  modifiers:
  - "synchronized"
  syntax: "public synchronized void stop()"
  desc: "Stops the message processing for this processor. The receiving links and sessions are kept active and this processor can resume processing messages by calling <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient.start()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#start()\"></xref> again."
type: "class"
desc: "The processor client for processing Service Bus messages. <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> provides a push-based mechanism that invokes the message processing callback when a message is received or the error handler when an error occurs when receiving messages. A <xref uid=\"com.azure.messaging.servicebus.ServiceBusProcessorClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceBusProcessorClient\"></xref> can be created to process messages for a session-enabled or non session-enabled Service Bus entity. It supports auto-settlement of messages by default.\n\n**Sample code to instantiate a processor client and receive in PeekLock mode**\n\n```java\n// Function that gets called whenever a message is received.\n Consumer<ServiceBusReceivedMessageContext> processMessage = context -> {\n     final ServiceBusReceivedMessage message = context.getMessage();\n     // Randomly complete or abandon each message. Ideally, in real-world scenarios, if the business logic\n     // handling message reaches desired state such that it doesn't require Service Bus to redeliver\n     // the same message, then context.complete() should be called otherwise context.abandon().\n     final boolean success = Math.random() < 0.5;\n     if (success) {\n         try {\n             context.complete();\n         } catch (RuntimeException error) {\n             System.out.printf(\"Completion of the message %s failed.%n Error: %s%n\",\n                 message.getMessageId(), error);\n         }\n     } else {\n         try {\n             context.abandon();\n         } catch (RuntimeException error) {\n             System.out.printf(\"Abandoning of the message %s failed.%nError: %s%n\",\n                 message.getMessageId(), error);\n         }\n     }\n };\n\n // Sample code that gets called if there's an error\n Consumer<ServiceBusErrorContext> processError = errorContext -> {\n     if (errorContext.getException() instanceof ServiceBusException) {\n         ServiceBusException exception = (ServiceBusException) errorContext.getException();\n\n         System.out.printf(\"Error source: %s, reason %s%n\", errorContext.getErrorSource(),\n             exception.getReason());\n     } else {\n         System.out.printf(\"Error occurred: %s%n\", errorContext.getException());\n     }\n };\n\n TokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n // Create the processor client via the builder and its sub-builder\n // 'fullyQualifiedNamespace' will look similar to \"{your-namespace}.servicebus.windows.net\"\n ServiceBusProcessorClient processorClient = new ServiceBusClientBuilder()\n     .credential(fullyQualifiedNamespace, tokenCredential)\n     .processor()\n     .queueName(queueName)\n     .receiveMode(ServiceBusReceiveMode.PEEK_LOCK)\n     .disableAutoComplete()  // Make sure to explicitly opt in to manual settlement (e.g. complete, abandon).\n     .processMessage(processMessage)\n     .processError(processError)\n     .disableAutoComplete()\n     .buildProcessorClient();\n\n // Starts the processor in the background. Control returns immediately.\n processorClient.start();\n\n // Stop processor and dispose when done processing messages.\n processorClient.stop();\n processorClient.close();\n```\n\n**Sample code to instantiate a processor client and receive in ReceiveAndDelete mode**\n\n```java\n// Function that gets called whenever a message is received.\n Consumer<ServiceBusReceivedMessageContext> processMessage = context -> {\n     final ServiceBusReceivedMessage message = context.getMessage();\n     System.out.printf(\"Processing message. Session: %s, Sequence #: %s. Contents: %s%n\",\n         message.getSessionId(), message.getSequenceNumber(), message.getBody());\n };\n\n // Sample code that gets called if there's an error\n Consumer<ServiceBusErrorContext> processError = errorContext -> {\n     if (errorContext.getException() instanceof ServiceBusException) {\n         ServiceBusException exception = (ServiceBusException) errorContext.getException();\n\n         System.out.printf(\"Error source: %s, reason %s%n\", errorContext.getErrorSource(),\n             exception.getReason());\n     } else {\n         System.out.printf(\"Error occurred: %s%n\", errorContext.getException());\n     }\n };\n\n TokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n // Create the processor client via the builder and its sub-builder\n // 'fullyQualifiedNamespace' will look similar to \"{your-namespace}.servicebus.windows.net\"\n // 'disableAutoComplete()' will opt in to manual settlement (e.g. complete, abandon).\n ServiceBusProcessorClient processorClient = new ServiceBusClientBuilder()\n     .credential(fullyQualifiedNamespace, tokenCredential)\n     .processor()\n     .queueName(queueName)\n     .receiveMode(ServiceBusReceiveMode.RECEIVE_AND_DELETE)\n     .processMessage(processMessage)\n     .processError(processError)\n     .disableAutoComplete()\n     .buildProcessorClient();\n\n // Starts the processor in the background. Control returns immediately.\n processorClient.start();\n\n // Stop processor and dispose when done processing messages.\n processorClient.stop();\n processorClient.close();\n```\n\n**Create and run a session-enabled processor**\n\n```java\n// Function that gets called whenever a message is received.\n Consumer<ServiceBusReceivedMessageContext> onMessage = context -> {\n     ServiceBusReceivedMessage message = context.getMessage();\n     System.out.printf(\"Processing message. Session: %s, Sequence #: %s. Contents: %s%n\",\n         message.getSessionId(), message.getSequenceNumber(), message.getBody());\n };\n\n Consumer<ServiceBusErrorContext> onError = context -> {\n     System.out.printf(\"Error when receiving messages from namespace: '%s'. Entity: '%s'%n\",\n         context.getFullyQualifiedNamespace(), context.getEntityPath());\n\n     if (context.getException() instanceof ServiceBusException) {\n         ServiceBusException exception = (ServiceBusException) context.getException();\n\n         System.out.printf(\"Error source: %s, reason %s%n\", context.getErrorSource(),\n             exception.getReason());\n     } else {\n         System.out.printf(\"Error occurred: %s%n\", context.getException());\n     }\n };\n\n TokenCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n // Create the processor client via the builder and its sub-builder\n // 'fullyQualifiedNamespace' will look similar to \"{your-namespace}.servicebus.windows.net\"\n ServiceBusProcessorClient sessionProcessor = new ServiceBusClientBuilder()\n     .credential(fullyQualifiedNamespace, tokenCredential)\n     .sessionProcessor()\n     .queueName(sessionEnabledQueueName)\n     .receiveMode(ServiceBusReceiveMode.PEEK_LOCK)\n     .disableAutoComplete()\n     .maxConcurrentSessions(2)\n     .processMessage(onMessage)\n     .processError(onError)\n     .buildProcessorClient();\n\n // Starts the processor in the background. Control returns immediately.\n sessionProcessor.start();\n\n // Stop processor and dispose when done processing messages.\n sessionProcessor.stop();\n sessionProcessor.close();\n```"
implements:
- "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html\">AutoCloseable</a>"
metadata: {}
package: "com.azure.messaging.servicebus"
artifact: com.azure:azure-messaging-servicebus:7.15.0-beta.4
