### YamlMime:JavaType
uid: "com.azure.communication.callingserver.CallingServerAsyncClient"
fullName: "com.azure.communication.callingserver.CallingServerAsyncClient"
name: "CallingServerAsyncClient"
nameWithType: "CallingServerAsyncClient"
summary: "Asynchronous client that supports calling server operations."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class CallingServerAsyncClient"
methods:
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.createCallConnection(com.azure.communication.common.CommunicationIdentifier,java.util.List<com.azure.communication.common.CommunicationIdentifier>,com.azure.communication.callingserver.models.CreateCallOptions)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.createCallConnection(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  name: "createCallConnection(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  nameWithType: "CallingServerAsyncClient.createCallConnection(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  summary: "Create a call connection request from a source identity to targets identity."
  parameters:
  - description: "The source identity."
    name: "source"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "The target identities."
    name: "targets"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The call options."
    name: "createCallOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.CreateCallOptions?alt=com.azure.communication.callingserver.models.CreateCallOptions&text=CreateCallOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CallConnectionAsync> createCallConnection(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  desc: "Create a call connection request from a source identity to targets identity."
  returns:
    description: "Response for a successful CreateCallConnection request.\n\n <pre>\n List&lt;CommunicationIdentifier&gt; targets = Arrays.asList&#40;firstCallee, secondCallee&#41;;\n List&lt;MediaType&gt; requestedMediaTypes = Arrays.asList&#40;MediaType.AUDIO, MediaType.VIDEO&#41;;\n List&lt;EventSubscriptionType&gt; requestedCallEvents = Arrays.asList&#40;\n     EventSubscriptionType.DTMF_RECEIVED,\n     EventSubscriptionType.PARTICIPANTS_UPDATED&#41;;\n CreateCallOptions createCallOptions = new CreateCallOptions&#40;\n     callbackUri,\n     requestedMediaTypes,\n     requestedCallEvents&#41;;\n CallConnectionAsync callAsyncConnection = callingServerAsyncClient\n     .createCallConnection&#40;source, targets, createCallOptions&#41;.block&#40;&#41;;\n </pre>"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.CallConnectionAsync?alt=com.azure.communication.callingserver.CallConnectionAsync&text=CallConnectionAsync\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.createCallConnectionWithResponse(com.azure.communication.common.CommunicationIdentifier,java.util.List<com.azure.communication.common.CommunicationIdentifier>,com.azure.communication.callingserver.models.CreateCallOptions)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.createCallConnectionWithResponse(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  name: "createCallConnectionWithResponse(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  nameWithType: "CallingServerAsyncClient.createCallConnectionWithResponse(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  summary: "Create a Call Connection Request from source identity to targets identity."
  parameters:
  - description: "The source identity."
    name: "source"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "The target identities."
    name: "targets"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The call options."
    name: "createCallOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.CreateCallOptions?alt=com.azure.communication.callingserver.models.CreateCallOptions&text=CreateCallOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CallConnectionAsync>> createCallConnectionWithResponse(CommunicationIdentifier source, List<CommunicationIdentifier> targets, CreateCallOptions createCallOptions)"
  desc: "Create a Call Connection Request from source identity to targets identity."
  returns:
    description: "Response for a successful CreateCallConnection request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.CallConnectionAsync?alt=com.azure.communication.callingserver.CallConnectionAsync&text=CallConnectionAsync\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadStream(java.lang.String)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadStream(String sourceEndpoint)"
  name: "downloadStream(String sourceEndpoint)"
  nameWithType: "CallingServerAsyncClient.downloadStream(String sourceEndpoint)"
  summary: "Download the recording content, e.<wbr>g."
  parameters:
  - description: "- URL where the content is located."
    name: "sourceEndpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ByteBuffer> downloadStream(String sourceEndpoint)"
  desc: "Download the recording content, e.g. Recording's metadata, Recording video, from the ACS endpoint passed as parameter."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> object containing the byte stream of the content requested."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadStream(java.lang.String,com.azure.core.http.HttpRange)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadStream(String sourceEndpoint, HttpRange httpRange)"
  name: "downloadStream(String sourceEndpoint, HttpRange httpRange)"
  nameWithType: "CallingServerAsyncClient.downloadStream(String sourceEndpoint, HttpRange httpRange)"
  summary: "Download the recording content, e.<wbr>g."
  parameters:
  - description: "- URL where the content is located."
    name: "sourceEndpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "- An optional <xref uid=\"com.azure.core.http.HttpRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpRange\"></xref> value containing the range of bytes to download. If missing,\n                  the whole content will be downloaded."
    name: "httpRange"
    type: "<xref href=\"com.azure.core.http.HttpRange?alt=com.azure.core.http.HttpRange&text=HttpRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Flux<ByteBuffer> downloadStream(String sourceEndpoint, HttpRange httpRange)"
  desc: "Download the recording content, e.g. Recording's metadata, Recording video, from the ACS endpoint passed as parameter."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> object containing the byte stream of the content requested."
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadStreamWithResponse(java.lang.String,com.azure.core.http.HttpRange)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadStreamWithResponse(String sourceEndpoint, HttpRange range)"
  name: "downloadStreamWithResponse(String sourceEndpoint, HttpRange range)"
  nameWithType: "CallingServerAsyncClient.downloadStreamWithResponse(String sourceEndpoint, HttpRange range)"
  summary: "Download the recording content, (e.<wbr>g."
  parameters:
  - description: "- URL where the content is located."
    name: "sourceEndpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "- An optional <xref uid=\"com.azure.core.http.HttpRange\" data-throw-if-not-resolved=\"false\" data-raw-source=\"HttpRange\"></xref> value containing the range of bytes to download. If missing,\n                  the whole content will be downloaded."
    name: "range"
    type: "<xref href=\"com.azure.core.http.HttpRange?alt=com.azure.core.http.HttpRange&text=HttpRange\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Flux<ByteBuffer>>> downloadStreamWithResponse(String sourceEndpoint, HttpRange range)"
  desc: "Download the recording content, (e.g. Recording's metadata, Recording video, etc.) from the `endpoint`."
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> object containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> with the byte stream of the content requested."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;&gt;&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadTo(java.lang.String,java.nio.file.Path,com.azure.communication.callingserver.models.ParallelDownloadOptions,boolean)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadTo(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  name: "downloadTo(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  nameWithType: "CallingServerAsyncClient.downloadTo(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  summary: "Download the content located in `endpoint` into a file marked by `path`."
  parameters:
  - description: "- ACS URL where the content is located."
    name: "sourceEndpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "- File location."
    name: "destinationPath"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  - description: "- an optional <xref uid=\"com.azure.communication.callingserver.models.ParallelDownloadOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelDownloadOptions\"></xref> object to modify how the parallel\n                               download will work."
    name: "parallelDownloadOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.ParallelDownloadOptions?alt=com.azure.communication.callingserver.models.ParallelDownloadOptions&text=ParallelDownloadOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "- True to overwrite the file if it exists."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> downloadTo(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  desc: "Download the content located in `endpoint` into a file marked by `path`. This download will be done using parallel workers."
  returns:
    description: "Response for a successful downloadTo request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadToWithResponse(java.lang.String,java.nio.file.Path,com.azure.communication.callingserver.models.ParallelDownloadOptions,boolean)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.downloadToWithResponse(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  name: "downloadToWithResponse(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  nameWithType: "CallingServerAsyncClient.downloadToWithResponse(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  summary: "Download the content located in `endpoint` into a file marked by `path`."
  parameters:
  - description: "- ACS URL where the content is located."
    name: "sourceEndpoint"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "- File location."
    name: "destinationPath"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  - description: "- an optional <xref uid=\"com.azure.communication.callingserver.models.ParallelDownloadOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelDownloadOptions\"></xref> object to modify how the parallel\n                               download will work."
    name: "parallelDownloadOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.ParallelDownloadOptions?alt=com.azure.communication.callingserver.models.ParallelDownloadOptions&text=ParallelDownloadOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "- True to overwrite the file if it exists."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> downloadToWithResponse(String sourceEndpoint, Path destinationPath, ParallelDownloadOptions parallelDownloadOptions, boolean overwrite)"
  desc: "Download the content located in `endpoint` into a file marked by `path`. This download will be done using parallel workers."
  returns:
    description: "Response containing the http response information from the download."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.getCallConnection(java.lang.String)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.getCallConnection(String callConnectionId)"
  name: "getCallConnection(String callConnectionId)"
  nameWithType: "CallingServerAsyncClient.getCallConnection(String callConnectionId)"
  summary: "Get Call<wbr>Connection object"
  parameters:
  - description: "Call connection id."
    name: "callConnectionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public CallConnectionAsync getCallConnection(String callConnectionId)"
  desc: "Get CallConnection object"
  returns:
    description: "CallConnection object."
    type: "<xref href=\"com.azure.communication.callingserver.CallConnectionAsync?alt=com.azure.communication.callingserver.CallConnectionAsync&text=CallConnectionAsync\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.initializeServerCall(java.lang.String)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.initializeServerCall(String serverCallId)"
  name: "initializeServerCall(String serverCallId)"
  nameWithType: "CallingServerAsyncClient.initializeServerCall(String serverCallId)"
  summary: "Get Server<wbr>Call object."
  parameters:
  - description: "Server call id."
    name: "serverCallId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public ServerCallAsync initializeServerCall(String serverCallId)"
  desc: "Get ServerCall object."
  returns:
    description: "ServerCall object."
    type: "<xref href=\"com.azure.communication.callingserver.ServerCallAsync?alt=com.azure.communication.callingserver.ServerCallAsync&text=ServerCallAsync\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.joinCall(java.lang.String,com.azure.communication.common.CommunicationIdentifier,com.azure.communication.callingserver.models.JoinCallOptions)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.joinCall(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  name: "joinCall(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  nameWithType: "CallingServerAsyncClient.joinCall(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  summary: "Join a Call"
  parameters:
  - description: "Server call id."
    name: "serverCallId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Source identity."
    name: "source"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "Join call options."
    name: "joinCallOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.JoinCallOptions?alt=com.azure.communication.callingserver.models.JoinCallOptions&text=JoinCallOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<CallConnectionAsync> joinCall(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  desc: "Join a Call"
  returns:
    description: "Response for a successful join request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.CallConnectionAsync?alt=com.azure.communication.callingserver.CallConnectionAsync&text=CallConnectionAsync\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.communication.callingserver.CallingServerAsyncClient.joinCallWithResponse(java.lang.String,com.azure.communication.common.CommunicationIdentifier,com.azure.communication.callingserver.models.JoinCallOptions)"
  fullName: "com.azure.communication.callingserver.CallingServerAsyncClient.joinCallWithResponse(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  name: "joinCallWithResponse(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  nameWithType: "CallingServerAsyncClient.joinCallWithResponse(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  summary: "Join a call"
  parameters:
  - description: "Server call id."
    name: "serverCallId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Source identity."
    name: "source"
    type: "<xref href=\"com.azure.communication.common.CommunicationIdentifier?alt=com.azure.communication.common.CommunicationIdentifier&text=CommunicationIdentifier\" data-throw-if-not-resolved=\"False\" />"
  - description: "Join call options."
    name: "joinCallOptions"
    type: "<xref href=\"com.azure.communication.callingserver.models.JoinCallOptions?alt=com.azure.communication.callingserver.models.JoinCallOptions&text=JoinCallOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<CallConnectionAsync>> joinCallWithResponse(String serverCallId, CommunicationIdentifier source, JoinCallOptions joinCallOptions)"
  desc: "Join a call"
  returns:
    description: "Response for a successful join request."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.communication.callingserver.CallConnectionAsync?alt=com.azure.communication.callingserver.CallConnectionAsync&text=CallConnectionAsync\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Asynchronous client that supports calling server operations.\n\n**Instantiating a asynchronous CallingServer client**\n\n```java\nHttpPipeline pipeline = new HttpPipelineBuilder()\n     .policies(/* add policies */)\n     .build();\n \n CallingServerAsyncClient callingServerAsyncClient = new CallingServerClientBuilder()\n     .pipeline(pipeline)\n     .connectionString(connectionString)\n     .buildAsyncClient();\n```\n\nView <xref uid=\"com.azure.communication.callingserver.CallingServerClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"this\"></xref> for additional ways to construct the client."
metadata: {}
package: "com.azure.communication.callingserver"
artifact: com.azure:azure-communication-callingserver:1.0.0-beta.4
