### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig*"
fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig"
name: "updateMetricAnomalyDetectionConfig"
nameWithType: "MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig"
members:
- uid: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration)"
  fullName: "com.azure.ai.metricsadvisor.administration.MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  name: "updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  nameWithType: "MetricsAdvisorAdministrationClient.updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  summary: "Update a configuration to detect anomalies in the time series of a metric.\n\n**Code sample**\n\n```java\nfinal String detectionConfigId = \"7b8069a1-1564-46da-9f50-b5d0dd9129ab\";\n AnomalyDetectionConfiguration detectionConfig = metricsAdvisorAdminClient\n     .getMetricAnomalyDetectionConfig(detectionConfigId);\n \n detectionConfig.setName(\"updated config name\");\n detectionConfig.setDescription(\"updated with more detection conditions\");\n DimensionKey seriesGroupKey = new DimensionKey()\n     .put(\"city\", \"Seoul\");\n detectionConfig.addSeriesGroupDetectionCondition(\n     new MetricSeriesGroupDetectionCondition(seriesGroupKey)\n         .setSmartDetectionCondition(new SmartDetectionCondition()\n             .setSensitivity(10.0)\n             .setAnomalyDetectorDirection(AnomalyDetectorDirection.UP)\n             .setSuppressCondition(new SuppressCondition().setMinNumber(2).setMinRatio(2))));\n \n AnomalyDetectionConfiguration updatedDetectionConfig = metricsAdvisorAdminClient\n     .updateMetricAnomalyDetectionConfig(detectionConfig);\n \n System.out.printf(\"Detection config Id: %s%n\", updatedDetectionConfig.getId());\n System.out.printf(\"Name: %s%n\", updatedDetectionConfig.getName());\n System.out.printf(\"Description: %s%n\", updatedDetectionConfig.getDescription());\n System.out.printf(\"MetricId: %s%n\", updatedDetectionConfig.getMetricId());\n```"
  parameters:
  - description: "The anomaly detection configuration."
    name: "detectionConfiguration"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnomalyDetectionConfiguration updateMetricAnomalyDetectionConfig(AnomalyDetectionConfiguration detectionConfiguration)"
  returns:
    description: "The updated <xref uid=\"com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnomalyDetectionConfiguration\"></xref>."
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration?alt=com.azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration&text=AnomalyDetectionConfiguration\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor.administration"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.2
