### YamlMime:JavaMember
uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation.KnowledgebasesImpl.downloadAsync*"
fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation.KnowledgebasesImpl.downloadAsync"
name: "downloadAsync"
nameWithType: "KnowledgebasesImpl.downloadAsync"
members:
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation.KnowledgebasesImpl.downloadAsync(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation.KnowledgebasesImpl.downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  name: "downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  nameWithType: "KnowledgebasesImpl.downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  summary: "Download the knowledgebase."
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'"
    name: "environment"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType&text=EnvironmentType\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "downloadOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter&text=DownloadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<QnADocumentsDTO> downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter)"
  returns:
    description: "the observable to the QnADocumentsDTO object"
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO&text=QnADocumentsDTO\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation.KnowledgebasesImpl.downloadAsync(java.lang.String,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType,com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter,com.microsoft.rest.ServiceCallback<com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO>)"
  fullName: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation.KnowledgebasesImpl.downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter, ServiceCallback<QnADocumentsDTO> serviceCallback)"
  name: "downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter, ServiceCallback<QnADocumentsDTO> serviceCallback)"
  nameWithType: "KnowledgebasesImpl.downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter, ServiceCallback<QnADocumentsDTO> serviceCallback)"
  summary: "Download the knowledgebase."
  parameters:
  - description: "Knowledgebase id."
    name: "kbId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Specifies whether environment is Test or Prod. Possible values include: 'Prod', 'Test'"
    name: "environment"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.EnvironmentType&text=EnvironmentType\" data-throw-if-not-resolved=\"False\" />"
  - description: "the object representing the optional parameters to be set before calling this API"
    name: "downloadOptionalParameter"
    type: "<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.DownloadOptionalParameter&text=DownloadOptionalParameter\" data-throw-if-not-resolved=\"False\" />"
  - description: "the async ServiceCallback to handle successful and failed responses."
    name: "serviceCallback"
    type: "<xref href=\"com.microsoft.rest.ServiceCallback?alt=com.microsoft.rest.ServiceCallback&text=ServiceCallback\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO&text=QnADocumentsDTO\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ServiceFuture<QnADocumentsDTO> downloadAsync(String kbId, EnvironmentType environment, DownloadOptionalParameter downloadOptionalParameter, ServiceCallback<QnADocumentsDTO> serviceCallback)"
  returns:
    description: "the <xref uid=\"com.microsoft.rest.ServiceFuture\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceFuture\"></xref> object"
    type: "<xref href=\"com.microsoft.rest.ServiceFuture?alt=com.microsoft.rest.ServiceFuture&text=ServiceFuture\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO?alt=com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnADocumentsDTO&text=QnADocumentsDTO\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation"
artifact: com.microsoft.azure.cognitiveservices:azure-cognitiveservices-qnamaker:1.0.0-beta.2
