### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.core.JsonGenerator.Feature"
fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature"
name: "JsonGenerator.Feature"
nameWithType: "JsonGenerator.Feature"
summary: "Enumeration that defines all togglable features for generators."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonGenerator.Feature extends Enum<JsonGenerator.Feature>"
fields:
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT"
  name: "AUTO_CLOSE_JSON_CONTENT"
  nameWithType: "JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT"
  summary: "Feature that determines what happens when the generator is closed while there are still unmatched <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_ARRAY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_ARRAY\"></xref> or <xref uid=\"com.fasterxml.jackson.core.JsonToken.START_OBJECT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonToken#START_OBJECT\"></xref> entries in output content. If enabled, such Array(s) and/or Object(s) are automatically closed; if disabled, nothing specific is done.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET"
  name: "AUTO_CLOSE_TARGET"
  nameWithType: "JsonGenerator.Feature.AUTO_CLOSE_TARGET"
  summary: "Feature that determines whether generator will automatically close underlying output target that is NOT owned by the generator. If disabled, calling application has to separately close the underlying <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Writer\"></xref> instances used to create the generator. If enabled, generator will handle closing, as long as generator itself gets closed: this happens when end-of-input is encountered, or generator is closed by a call to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.close*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator#close\"></xref>.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII"
  name: "ESCAPE_NON_ASCII"
  nameWithType: "JsonGenerator.Feature.ESCAPE_NON_ASCII"
  summary: "Feature that specifies that all characters beyond 7-bit ASCII range (i.e. code points of 128 and above) need to be output using format-specific escapes (for JSON, backslash escapes), if format uses escaping mechanisms (which is generally true for textual formats but not for binary formats).\n\nNote that this setting may not necessarily make sense for all data formats (for example, binary formats typically do not use any escaping mechanisms; and some textual formats do not have general-purpose escaping); if so, settings is simply ignored. Put another way, effects of this feature are data-format specific.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM"
  name: "FLUSH_PASSED_TO_STREAM"
  nameWithType: "JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM"
  summary: "Feature that specifies that calls to <xref uid=\"com.fasterxml.jackson.core.JsonGenerator.Feature.flush\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#flush\"></xref> will cause matching `flush()` to underlying <xref uid=\"java.io.OutputStream\" data-throw-if-not-resolved=\"false\" data-raw-source=\"OutputStream\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Writer\"></xref>; if disabled this will not be done. Main reason to disable this feature is to prevent flushing at generator level, if it is not possible to prevent method being called by other code (like `ObjectMapper` or third party libraries).\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN"
  name: "IGNORE_UNKNOWN"
  nameWithType: "JsonGenerator.Feature.IGNORE_UNKNOWN"
  summary: "Feature that determines what to do if the underlying data format requires knowledge of all properties to output, and if no definition is found for a property that caller tries to write. If enabled, such properties will be quietly ignored; if disabled, a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonProcessingException\"></xref> will be thrown to indicate the problem. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n\nNote that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.\n\nFeature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to write an unknown property will result in a <xref uid=\"com.fasterxml.jackson.core.JsonProcessingException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonProcessingException\"></xref>"
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES"
  name: "QUOTE_FIELD_NAMES"
  nameWithType: "JsonGenerator.Feature.QUOTE_FIELD_NAMES"
  summary: "Feature that determines whether JSON Object field names are quoted using double-quotes, as specified by JSON specification or not. Ability to disable quoting was added to support use cases where they are not usually expected, which most commonly occurs when used straight from Javascript.\n\nFeature is enabled by default (since it is required by JSON specification)."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS"
  name: "QUOTE_NON_NUMERIC_NUMBERS"
  nameWithType: "JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS"
  summary: "Feature that determines whether \"exceptional\" (not real number) float/double values are output as quoted strings. The values checked are Double.Nan, Double.POSITIVE\\_INFINITY and Double.NEGATIVE\\_INIFINTY (and associated Float values). If feature is disabled, these numbers are still output using associated literal values, resulting in non-conformant output.\n\nFeature is enabled by default."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION"
  name: "STRICT_DUPLICATE_DETECTION"
  nameWithType: "JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION"
  summary: "Feature that determines whether <xref uid=\"com.fasterxml.jackson.core.JsonGenerator\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerator\"></xref> will explicitly check that no duplicate JSON Object field names are written. If enabled, generator will check all names within context and report duplicates by throwing a <xref uid=\"com.fasterxml.jackson.core.JsonGenerationException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonGenerationException\"></xref>; if disabled, no such checking will be done. Assumption in latter case is that caller takes care of not trying to write duplicate names.\n\nNote that enabling this feature will incur performance overhead due to having to store and check additional information.\n\nFeature is disabled by default."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN"
  name: "WRITE_BIGDECIMAL_AS_PLAIN"
  nameWithType: "JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN"
  summary: "Feature that determines whether <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref> entries are serialized using <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal#toPlainString()\"></xref> to prevent values to be written using scientific notation.\n\nNOTE: only affects generators that serialize <xref uid=\"java.math.BigDecimal\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.math.BigDecimal\"></xref>s using textual representation (textual formats but potentially some binary formats).\n\nFeature is disabled by default, so default output mode is used; this generally depends on how <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BigDecimal\"></xref> has been created."
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS"
  name: "WRITE_NUMBERS_AS_STRINGS"
  nameWithType: "JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS"
  summary: "Feature that forces all Java numbers to be written as Strings, even if the underlying data format has non-textual representation (which is the case for JSON as well as all binary formats). Default state is 'false', meaning that Java numbers are to be serialized using basic numeric serialization (as JSON numbers, integral or floating point, for example). If enabled, all such numeric values are instead written out as textual values (which for JSON means quoted in double-quotes).\n\nOne use case is to avoid problems with Javascript limitations: since Javascript standard specifies that all number handling should be done using 64-bit IEEE 754 floating point values, result being that some 64-bit integer values can not be accurately represent (as mantissa is only 51 bit wide).\n\nFeature is disabled by default."
methods:
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults()"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults()"
  name: "collectDefaults()"
  nameWithType: "JsonGenerator.Feature.collectDefaults()"
  summary: "Method that calculates bit set (flags) of all features that are enabled by default."
  syntax: "public static int collectDefaults()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault()"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault()"
  name: "enabledByDefault()"
  nameWithType: "JsonGenerator.Feature.enabledByDefault()"
  syntax: "public boolean enabledByDefault()"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int)"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int flags)"
  name: "enabledIn(int flags)"
  nameWithType: "JsonGenerator.Feature.enabledIn(int flags)"
  parameters:
  - name: "flags"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public boolean enabledIn(int flags)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.getMask()"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.getMask()"
  name: "getMask()"
  nameWithType: "JsonGenerator.Feature.getMask()"
  syntax: "public int getMask()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonGenerator.Feature.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonGenerator.Feature valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator.Feature?alt=com.fasterxml.jackson.core.JsonGenerator.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.core.JsonGenerator.Feature.values()"
  fullName: "com.fasterxml.jackson.core.JsonGenerator.Feature.values()"
  name: "values()"
  nameWithType: "JsonGenerator.Feature.values()"
  syntax: "public static JsonGenerator.Feature[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.core.JsonGenerator.Feature?alt=com.fasterxml.jackson.core.JsonGenerator.Feature&text=Feature\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.core"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
