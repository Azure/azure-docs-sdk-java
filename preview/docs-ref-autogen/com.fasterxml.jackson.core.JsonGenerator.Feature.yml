### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature
  id: Feature
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core
  children:
  - com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT
  - com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET
  - com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII
  - com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM
  - com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN
  - com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES
  - com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS
  - com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION
  - com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN
  - com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS
  - com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults()
  - com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault()
  - com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int)
  - com.fasterxml.jackson.core.JsonGenerator.Feature.getMask()
  - com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf(java.lang.String)
  - com.fasterxml.jackson.core.JsonGenerator.Feature.values()
  langs:
  - java
  name: JsonGenerator.Feature
  nameWithType: JsonGenerator.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
  type: Enum
  package: com.fasterxml.jackson.core
  summary: Enumeration that defines all togglable features for generators.
  syntax:
    content: public enum JsonGenerator.Feature extends Enum<JsonGenerator.Feature>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT
  id: AUTO_CLOSE_JSON_CONTENT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: AUTO_CLOSE_JSON_CONTENT
  nameWithType: JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines what happens when the generator is closed while there are still unmatched <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref> entries in output content. If enabled, such Array(s) and/or Object(s) are automatically closed; if disabled, nothing specific is done.


    Feature is enabled by default.
  syntax:
    content: public static final JsonGenerator.Feature AUTO_CLOSE_JSON_CONTENT
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET
  id: AUTO_CLOSE_TARGET
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: AUTO_CLOSE_TARGET
  nameWithType: JsonGenerator.Feature.AUTO_CLOSE_TARGET
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.AUTO_CLOSE_TARGET
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether generator will automatically close underlying output target that is NOT owned by the generator. If disabled, calling application has to separately close the underlying <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> and <xref uid="" data-throw-if-not-resolved="false">Writer</xref> instances used to create the generator. If enabled, generator will handle closing, as long as generator itself gets closed: this happens when end-of-input is encountered, or generator is closed by a call to <xref uid="com.fasterxml.jackson.core.JsonGenerator.close*" data-throw-if-not-resolved="false">JsonGenerator#close</xref>.


    Feature is enabled by default.
  syntax:
    content: public static final JsonGenerator.Feature AUTO_CLOSE_TARGET
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII
  id: ESCAPE_NON_ASCII
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: ESCAPE_NON_ASCII
  nameWithType: JsonGenerator.Feature.ESCAPE_NON_ASCII
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.ESCAPE_NON_ASCII
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that specifies that all characters beyond 7-bit ASCII range (i.e. code points of 128 and above) need to be output using format-specific escapes (for JSON, backslash escapes), if format uses escaping mechanisms (which is generally true for textual formats but not for binary formats).


    Note that this setting may not necessarily make sense for all data formats (for example, binary formats typically do not use any escaping mechanisms; and some textual formats do not have general-purpose escaping); if so, settings is simply ignored. Put another way, effects of this feature are data-format specific.


    Feature is disabled by default.
  syntax:
    content: public static final JsonGenerator.Feature ESCAPE_NON_ASCII
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM
  id: FLUSH_PASSED_TO_STREAM
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: FLUSH_PASSED_TO_STREAM
  nameWithType: JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that specifies that calls to <xref uid="com.fasterxml.jackson.core.JsonGenerator.Feature.flush" data-throw-if-not-resolved="false">#flush</xref> will cause matching `flush()` to underlying <xref uid="java.io.OutputStream" data-throw-if-not-resolved="false">OutputStream</xref> or <xref uid="" data-throw-if-not-resolved="false">Writer</xref>; if disabled this will not be done. Main reason to disable this feature is to prevent flushing at generator level, if it is not possible to prevent method being called by other code (like `ObjectMapper` or third party libraries).


    Feature is enabled by default.
  syntax:
    content: public static final JsonGenerator.Feature FLUSH_PASSED_TO_STREAM
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.Feature(boolean)
  id: Feature(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: Feature(boolean defaultState)
  nameWithType: JsonGenerator.Feature.Feature(boolean defaultState)
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.Feature(boolean defaultState)
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.Feature*
  type: Constructor
  package: com.fasterxml.jackson.core
  syntax:
    content: private Feature(boolean defaultState)
    parameters:
    - id: defaultState
      type: boolean
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN
  id: IGNORE_UNKNOWN
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: IGNORE_UNKNOWN
  nameWithType: JsonGenerator.Feature.IGNORE_UNKNOWN
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.IGNORE_UNKNOWN
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines what to do if the underlying data format requires knowledge of all properties to output, and if no definition is found for a property that caller tries to write. If enabled, such properties will be quietly ignored; if disabled, a <xref uid="com.fasterxml.jackson.core.JsonProcessingException" data-throw-if-not-resolved="false">JsonProcessingException</xref> will be thrown to indicate the problem. Typically most textual data formats do NOT require schema information (although some do, such as CSV), whereas many binary data formats do require definitions (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).


    Note that support for this feature is implemented by individual data format module, if (and only if) it makes sense for the format in question. For JSON, for example, this feature has no effect as properties need not be pre-defined.


    Feature is disabled by default, meaning that if the underlying data format requires knowledge of all properties to output, attempts to write an unknown property will result in a <xref uid="com.fasterxml.jackson.core.JsonProcessingException" data-throw-if-not-resolved="false">JsonProcessingException</xref>
  syntax:
    content: public static final JsonGenerator.Feature IGNORE_UNKNOWN
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES
  id: QUOTE_FIELD_NAMES
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: QUOTE_FIELD_NAMES
  nameWithType: JsonGenerator.Feature.QUOTE_FIELD_NAMES
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_FIELD_NAMES
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether JSON Object field names are quoted using double-quotes, as specified by JSON specification or not. Ability to disable quoting was added to support use cases where they are not usually expected, which most commonly occurs when used straight from Javascript.


    Feature is enabled by default (since it is required by JSON specification).
  syntax:
    content: public static final JsonGenerator.Feature QUOTE_FIELD_NAMES
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS
  id: QUOTE_NON_NUMERIC_NUMBERS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: QUOTE_NON_NUMERIC_NUMBERS
  nameWithType: JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether "exceptional" (not real number) float/double values are output as quoted strings. The values checked are Double.Nan, Double.POSITIVE\_INFINITY and Double.NEGATIVE\_INIFINTY (and associated Float values). If feature is disabled, these numbers are still output using associated literal values, resulting in non-conformant output.


    Feature is enabled by default.
  syntax:
    content: public static final JsonGenerator.Feature QUOTE_NON_NUMERIC_NUMBERS
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION
  id: STRICT_DUPLICATE_DETECTION
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: STRICT_DUPLICATE_DETECTION
  nameWithType: JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="com.fasterxml.jackson.core.JsonGenerator" data-throw-if-not-resolved="false">JsonGenerator</xref> will explicitly check that no duplicate JSON Object field names are written. If enabled, generator will check all names within context and report duplicates by throwing a <xref uid="com.fasterxml.jackson.core.JsonGenerationException" data-throw-if-not-resolved="false">JsonGenerationException</xref>; if disabled, no such checking will be done. Assumption in latter case is that caller takes care of not trying to write duplicate names.


    Note that enabling this feature will incur performance overhead due to having to store and check additional information.


    Feature is disabled by default.
  syntax:
    content: public static final JsonGenerator.Feature STRICT_DUPLICATE_DETECTION
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN
  id: WRITE_BIGDECIMAL_AS_PLAIN
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: WRITE_BIGDECIMAL_AS_PLAIN
  nameWithType: JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that determines whether <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">java.math.BigDecimal</xref> entries are serialized using <xref uid="" data-throw-if-not-resolved="false">java.math.BigDecimal#toPlainString()</xref> to prevent values to be written using scientific notation.


    NOTE: only affects generators that serialize <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">java.math.BigDecimal</xref>s using textual representation (textual formats but potentially some binary formats).


    Feature is disabled by default, so default output mode is used; this generally depends on how <xref uid="" data-throw-if-not-resolved="false">BigDecimal</xref> has been created.
  syntax:
    content: public static final JsonGenerator.Feature WRITE_BIGDECIMAL_AS_PLAIN
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS
  id: WRITE_NUMBERS_AS_STRINGS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: WRITE_NUMBERS_AS_STRINGS
  nameWithType: JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS
  type: Field
  package: com.fasterxml.jackson.core
  summary: >-
    Feature that forces all Java numbers to be written as Strings, even if the underlying data format has non-textual representation (which is the case for JSON as well as all binary formats). Default state is 'false', meaning that Java numbers are to be serialized using basic numeric serialization (as JSON numbers, integral or floating point, for example). If enabled, all such numeric values are instead written out as textual values (which for JSON means quoted in double-quotes).


    One use case is to avoid problems with Javascript limitations: since Javascript standard specifies that all number handling should be done using 64-bit IEEE 754 floating point values, result being that some 64-bit integer values can not be accurately represent (as mantissa is only 51 bit wide).


    Feature is disabled by default.
  syntax:
    content: public static final JsonGenerator.Feature WRITE_NUMBERS_AS_STRINGS
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults()
  id: collectDefaults()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: collectDefaults()
  nameWithType: JsonGenerator.Feature.collectDefaults()
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults()
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults*
  type: Method
  package: com.fasterxml.jackson.core
  summary: Method that calculates bit set (flags) of all features that are enabled by default.
  syntax:
    content: public static int collectDefaults()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault()
  id: enabledByDefault()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: enabledByDefault()
  nameWithType: JsonGenerator.Feature.enabledByDefault()
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault()
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledByDefault()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int)
  id: enabledIn(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: enabledIn(int flags)
  nameWithType: JsonGenerator.Feature.enabledIn(int flags)
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn(int flags)
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public boolean enabledIn(int flags)
    parameters:
    - id: flags
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.getMask()
  id: getMask()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: getMask()
  nameWithType: JsonGenerator.Feature.getMask()
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.getMask()
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.getMask*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public int getMask()
    return:
      type: int
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonGenerator.Feature.valueOf(String name)
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf(String name)
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static JsonGenerator.Feature valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.JsonGenerator.Feature
  langs:
  - java
  name: values()
  nameWithType: JsonGenerator.Feature.values()
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.values()
  overload: com.fasterxml.jackson.core.JsonGenerator.Feature.values*
  type: Method
  package: com.fasterxml.jackson.core
  syntax:
    content: public static JsonGenerator.Feature[] values()
    return:
      type: com.fasterxml.jackson.core.JsonGenerator.Feature[]
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.Feature*
  name: Feature
  nameWithType: JsonGenerator.Feature.Feature
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.Feature
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature[]
  spec.java:
  - uid: com.fasterxml.jackson.core.JsonGenerator.Feature
    name: Feature
    fullName: com.fasterxml.jackson.core.JsonGenerator.Feature
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.values*
  name: values
  nameWithType: JsonGenerator.Feature.values
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.values
  package: com.fasterxml.jackson.core
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf*
  name: valueOf
  nameWithType: JsonGenerator.Feature.valueOf
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.valueOf
  package: com.fasterxml.jackson.core
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults*
  name: collectDefaults
  nameWithType: JsonGenerator.Feature.collectDefaults
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.collectDefaults
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault*
  name: enabledByDefault
  nameWithType: JsonGenerator.Feature.enabledByDefault
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledByDefault
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn*
  name: enabledIn
  nameWithType: JsonGenerator.Feature.enabledIn
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.enabledIn
  package: com.fasterxml.jackson.core
- uid: com.fasterxml.jackson.core.JsonGenerator.Feature.getMask*
  name: getMask
  nameWithType: JsonGenerator.Feature.getMask
  fullName: com.fasterxml.jackson.core.JsonGenerator.Feature.getMask
  package: com.fasterxml.jackson.core
- uid: java.lang.Enum<com.fasterxml.jackson.core.JsonGenerator.Feature>
  name: Enum<JsonGenerator.Feature>
  nameWithType: Enum<JsonGenerator.Feature>
  fullName: java.lang.Enum<com.fasterxml.jackson.core.JsonGenerator.Feature>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
