### YamlMime:ManagedReference
items:
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  id: DataLakeServiceAsyncClient
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake
  children:
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName()
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl()
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline()
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion()
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()
  - com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions)
  langs:
  - java
  name: DataLakeServiceAsyncClient
  nameWithType: DataLakeServiceAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  type: Class
  package: com.azure.storage.file.datalake
  summary: >-
    Client to a storage account. It may only be instantiated through a <xref uid="com.azure.storage.file.datalake.DataLakeServiceClientBuilder" data-throw-if-not-resolved="false">DataLakeServiceClientBuilder</xref>. This class does not hold any state about a particular storage account but is instead a convenient way of sending off appropriate requests to the resource on the service. It may also be used to construct URLs to file systems, files and directories.


    This client contains operations on the main data lake service account. Operations on a file system are available on <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient" data-throw-if-not-resolved="false">DataLakeFileSystemAsyncClient</xref> through <xref uid="com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)" data-throw-if-not-resolved="false">#getFileSystemAsyncClient(String)</xref>, and operations on a file or directory are available on <xref uid="com.azure.storage.file.datalake.DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> or <xref uid="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref>.


    Note this client is an async client that returns reactive responses from Spring Reactor Core project (https://projectreactor.io/). Calling the methods in this client will **NOT** start the actual network operation, until `.subscribe()` is called on the reactive response. You can simply convert one of these responses to a <xref uid="" data-throw-if-not-resolved="false">java.util.concurrent.CompletableFuture</xref> object through <xref uid="reactor.core.publisher.Mono.toFuture*" data-throw-if-not-resolved="false">Mono#toFuture()</xref>.
  syntax:
    content: public class DataLakeServiceAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.DataLakeServiceAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,com.azure.storage.blob.BlobServiceAsyncClient)
  id: DataLakeServiceAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.file.datalake.DataLakeServiceVersion,java.lang.String,com.azure.storage.blob.BlobServiceAsyncClient)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: DataLakeServiceAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, BlobServiceAsyncClient blobServiceAsyncClient)
  nameWithType: DataLakeServiceAsyncClient.DataLakeServiceAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, BlobServiceAsyncClient blobServiceAsyncClient)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.DataLakeServiceAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, BlobServiceAsyncClient blobServiceAsyncClient)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.DataLakeServiceAsyncClient*
  type: Constructor
  package: com.azure.storage.file.datalake
  summary: Package-private constructor for use by <xref uid="com.azure.storage.file.datalake.DataLakeServiceClientBuilder" data-throw-if-not-resolved="false">DataLakeServiceClientBuilder</xref>.
  syntax:
    content: " DataLakeServiceAsyncClient(HttpPipeline pipeline, String url, DataLakeServiceVersion serviceVersion, String accountName, BlobServiceAsyncClient blobServiceAsyncClient)"
    parameters:
    - id: pipeline
      type: com.azure.core.http.HttpPipeline
      description: The pipeline used to send and receive service requests.
    - id: url
      type: java.lang.String
      description: The endpoint where to send service requests.
    - id: serviceVersion
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: The version of the service to receive requests.
    - id: accountName
      type: java.lang.String
      description: The storage account name.
    - id: blobServiceAsyncClient
      type: com.azure.storage.blob.BlobServiceAsyncClient
      description: The underlying <xref uid="com.azure.storage.blob.BlobServiceAsyncClient" data-throw-if-not-resolved="false">BlobServiceAsyncClient</xref>
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem(java.lang.String)
  id: createFileSystem(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: createFileSystem(String fileSystemName)
  nameWithType: DataLakeServiceAsyncClient.createFileSystem(String fileSystemName)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem(String fileSystemName)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient =
         client.createFileSystem("fileSystemName").block();
    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container
  syntax:
    content: public Mono<DataLakeFileSystemAsyncClient> createFileSystem(String fileSystemName)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to create
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient" data-throw-if-not-resolved="false">DataLakeFileSystemAsyncClient</xref> used to interact with the file system
         created.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)
  id: createFileSystemWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.PublicAccessType)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)
  nameWithType: DataLakeServiceAsyncClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Creates a new file system within a storage account. If a file system with the same name already exists, the operation fails. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nMap<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n \n DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient = client\n     .createFileSystemWithResponse(\"fileSystemName\", metadata, PublicAccessType.CONTAINER).block().getValue();\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/create-container"
  syntax:
    content: public Mono<Response<DataLakeFileSystemAsyncClient>> createFileSystemWithResponse(String fileSystemName, Map<String,String> metadata, PublicAccessType accessType)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to create
    - id: metadata
      type: java.util.Map<java.lang.String,java.lang.String>
      description: Metadata to associate with the file system
    - id: accessType
      type: com.azure.storage.file.datalake.models.PublicAccessType
      description: >-
        Specifies how the data in this file system is available to the public. See the
         x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient" data-throw-if-not-resolved="false">DataLakeFileSystemAsyncClient</xref> used to interact with the file system created.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(java.lang.String)
  id: deleteFileSystem(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: deleteFileSystem(String fileSystemName)
  nameWithType: DataLakeServiceAsyncClient.deleteFileSystem(String fileSystemName)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(String fileSystemName)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteFileSystem("fileSystemName").subscribe(
         response -> System.out.printf("Delete file system completed%n"),
         error -> System.out.printf("Delete file system failed: %s%n", error));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
  syntax:
    content: public Mono<Void> deleteFileSystem(String fileSystemName)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to delete
    return:
      type: reactor.core.publisher.Mono<java.lang.Void>
      description: A reactive response signalling completion.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  id: deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeServiceAsyncClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails. For more information see the [Azure Docs][].


    **Code Samples**


    ```java

    client.deleteFileSystemWithResponse("fileSystemName", new DataLakeRequestConditions()).subscribe(response ->
         System.out.printf("Delete file system completed with status %d%n", response.getStatusCode()));
    ```



    [Azure Docs]: https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container
  syntax:
    content: public Mono<Response<Void>> deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: Name of the file system to delete
    - id: requestConditions
      type: com.azure.storage.file.datalake.models.DataLakeRequestConditions
      description: <xref uid="com.azure.storage.file.datalake.models.DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  id: generateAccountSas(com.azure.storage.common.sas.AccountSasSignatureValues)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  nameWithType: DataLakeServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Generates an account SAS for the Azure Storage account using the specified <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref>. Note : The client must be authenticated via <xref uid=\"\" data-throw-if-not-resolved=\"false\">StorageSharedKeyCredential</xref>\n\nSee <xref uid=\"com.azure.storage.common.sas.AccountSasSignatureValues\" data-throw-if-not-resolved=\"false\">AccountSasSignatureValues</xref> for more information on how to construct an account SAS.\n\nThe snippet below generates a SAS that lasts for two days and gives the user read and list access to file systems and file shares.\n\n```java\nAccountSasPermission permissions = new AccountSasPermission()\n     .setListPermission(true)\n     .setReadPermission(true);\n AccountSasResourceType resourceTypes = new AccountSasResourceType().setContainer(true);\n AccountSasService services = new AccountSasService().setBlobAccess(true).setFileAccess(true);\n OffsetDateTime expiryTime = OffsetDateTime.now().plus(Duration.ofDays(2));\n \n AccountSasSignatureValues sasValues =\n     new AccountSasSignatureValues(expiryTime, permissions, services, resourceTypes);\n \n // Client must be authenticated via StorageSharedKeyCredential\n String sas = client.generateAccountSas(sasValues);\n```"
  syntax:
    content: public String generateAccountSas(AccountSasSignatureValues accountSasSignatureValues)
    parameters:
    - id: accountSasSignatureValues
      type: com.azure.storage.common.sas.AccountSasSignatureValues
      description: <xref uid="com.azure.storage.common.sas.AccountSasSignatureValues" data-throw-if-not-resolved="false">AccountSasSignatureValues</xref>
    return:
      type: java.lang.String
      description: A <code>String</code> representing all SAS query parameters.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName()
  id: getAccountName()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getAccountName()
  nameWithType: DataLakeServiceAsyncClient.getAccountName()
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName()
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Get associated account name.
  syntax:
    content: public String getAccountName()
    return:
      type: java.lang.String
      description: account name associated with this storage resource.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl()
  id: getAccountUrl()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getAccountUrl()
  nameWithType: DataLakeServiceAsyncClient.getAccountUrl()
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl()
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the URL of the storage account represented by this client.
  syntax:
    content: public String getAccountUrl()
    return:
      type: java.lang.String
      description: the URL.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(java.lang.String)
  id: getFileSystemAsyncClient(java.lang.String)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getFileSystemAsyncClient(String fileSystemName)
  nameWithType: DataLakeServiceAsyncClient.getFileSystemAsyncClient(String fileSystemName)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient(String fileSystemName)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Initializes a <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient" data-throw-if-not-resolved="false">DataLakeFileSystemAsyncClient</xref> object pointing to the specified file system. This method does not create a file system. It simply constructs the URL to the file system and offers access to methods relevant to file systems.


    **Code Samples**


    ```java

    DataLakeFileSystemAsyncClient dataLakeFileSystemAsyncClient = client.getFileSystemAsyncClient("fileSystemName");

    ```
  syntax:
    content: public DataLakeFileSystemAsyncClient getFileSystemAsyncClient(String fileSystemName)
    parameters:
    - id: fileSystemName
      type: java.lang.String
      description: >-
        The name of the file system to point to. A value of null or empty string will be
         interpreted as pointing to the root file system and will be replaced by "$root".
    return:
      type: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
      description: A <xref uid="com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient" data-throw-if-not-resolved="false">DataLakeFileSystemAsyncClient</xref> object pointing to the specified file system
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline()
  id: getHttpPipeline()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getHttpPipeline()
  nameWithType: DataLakeServiceAsyncClient.getHttpPipeline()
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline()
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref> powering this client.
  syntax:
    content: public HttpPipeline getHttpPipeline()
    return:
      type: com.azure.core.http.HttpPipeline
      description: The pipeline.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion()
  id: getServiceVersion()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getServiceVersion()
  nameWithType: DataLakeServiceAsyncClient.getServiceVersion()
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion()
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion*
  type: Method
  package: com.azure.storage.file.datalake
  summary: Gets the service version the client is using.
  syntax:
    content: public DataLakeServiceVersion getServiceVersion()
    return:
      type: com.azure.storage.file.datalake.DataLakeServiceVersion
      description: the service version the client is using.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: getUserDelegationKey(java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  nameWithType: DataLakeServiceAsyncClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid="" data-throw-if-not-resolved="false">TokenCredential</xref> in this object's <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref>.


    **Code Samples**


    ```java

    client.getUserDelegationKey(delegationKeyStartTime, delegationKeyExpiryTime).subscribe(response ->
         System.out.printf("User delegation key: %s%n", response.getValue()));
    ```
  syntax:
    content: public Mono<UserDelegationKey> getUserDelegationKey(OffsetDateTime start, OffsetDateTime expiry)
    parameters:
    - id: start
      type: java.time.OffsetDateTime
      description: Start time for the key's validity. Null indicates immediate start.
    - id: expiry
      type: java.time.OffsetDateTime
      description: Expiration of the key's validity.
    return:
      type: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.UserDelegationKey>
      description: A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing the user delegation key.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)
  id: getUserDelegationKeyWithResponse(java.time.OffsetDateTime,java.time.OffsetDateTime)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
  nameWithType: DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Gets a user delegation key for use with this account's data lake storage. Note: This method call is only valid when using <xref uid="" data-throw-if-not-resolved="false">TokenCredential</xref> in this object's <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">HttpPipeline</xref>.


    **Code Samples**


    ```java

    client.getUserDelegationKeyWithResponse(delegationKeyStartTime, delegationKeyExpiryTime).subscribe(response ->
         System.out.printf("User delegation key: %s%n", response.getValue().getValue()));
    ```
  syntax:
    content: public Mono<Response<UserDelegationKey>> getUserDelegationKeyWithResponse(OffsetDateTime start, OffsetDateTime expiry)
    parameters:
    - id: start
      type: java.time.OffsetDateTime
      description: Start time for the key's validity. Null indicates immediate start.
    - id: expiry
      type: java.time.OffsetDateTime
      description: Expiration of the key's validity.
    return:
      type: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.UserDelegationKey>>
      description: >-
        A <xref uid="reactor.core.publisher.Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="com.azure.core.http.rest.Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="com.azure.core.http.rest.Response.getValue*" data-throw-if-not-resolved="false">value</xref> containing the user
         delegation key.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()
  id: listFileSystems()
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: listFileSystems()
  nameWithType: DataLakeServiceAsyncClient.listFileSystems()
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems*
  type: Method
  package: com.azure.storage.file.datalake
  summary: >-
    Returns a reactive Publisher emitting all the file systems in this account lazily as needed. For more information, see the [Azure Docs][].


    **Code Samples**


    ```java

    client.listFileSystems().subscribe(fileSystem -> System.out.printf("Name: %s%n", fileSystem.getName()));

    ```



    [Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2
  syntax:
    content: public PagedFlux<FileSystemItem> listFileSystems()
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.datalake.models.FileSystemItem>
      description: A reactive response emitting the list of file systems.
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions)
  id: listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions)
  artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
  parent: com.azure.storage.file.datalake.DataLakeServiceAsyncClient
  langs:
  - java
  name: listFileSystems(ListFileSystemsOptions options)
  nameWithType: DataLakeServiceAsyncClient.listFileSystems(ListFileSystemsOptions options)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(ListFileSystemsOptions options)
  overload: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems*
  type: Method
  package: com.azure.storage.file.datalake
  summary: "Returns a reactive Publisher emitting all the file systems in this account lazily as needed. For more information, see the [Azure Docs][].\n\n**Code Samples**\n\n```java\nListFileSystemsOptions options = new ListFileSystemsOptions()\n     .setPrefix(\"fileSystemNamePrefixToMatch\")\n     .setDetails(new FileSystemListDetails().setRetrieveMetadata(true));\n \n client.listFileSystems(options).subscribe(fileSystem -> System.out.printf(\"Name: %s%n\", fileSystem.getName()));\n```\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/list-containers2"
  syntax:
    content: public PagedFlux<FileSystemItem> listFileSystems(ListFileSystemsOptions options)
    parameters:
    - id: options
      type: com.azure.storage.file.datalake.models.ListFileSystemsOptions
      description: A <xref uid="com.azure.storage.file.datalake.models.ListFileSystemsOptions" data-throw-if-not-resolved="false">ListFileSystemsOptions</xref> which specifies what data should be returned by the service.
    return:
      type: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.datalake.models.FileSystemItem>
      description: A reactive response emitting the list of file systems.
references:
- uid: com.azure.core.http.HttpPipeline
  spec.java:
  - uid: com.azure.core.http.HttpPipeline
    name: HttpPipeline
    fullName: com.azure.core.http.HttpPipeline
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.storage.file.datalake.DataLakeServiceVersion
  name: DataLakeServiceVersion
  nameWithType: DataLakeServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceVersion
- uid: com.azure.storage.blob.BlobServiceAsyncClient
  spec.java:
  - uid: com.azure.storage.blob.BlobServiceAsyncClient
    name: BlobServiceAsyncClient
    fullName: com.azure.storage.blob.BlobServiceAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.DataLakeServiceAsyncClient*
  name: DataLakeServiceAsyncClient
  nameWithType: DataLakeServiceAsyncClient.DataLakeServiceAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.DataLakeServiceAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  name: DataLakeFileSystemAsyncClient
  nameWithType: DataLakeFileSystemAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient*
  name: getFileSystemAsyncClient
  nameWithType: DataLakeServiceAsyncClient.getFileSystemAsyncClient
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getFileSystemAsyncClient
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline*
  name: getHttpPipeline
  nameWithType: DataLakeServiceAsyncClient.getHttpPipeline
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getHttpPipeline
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion*
  name: getServiceVersion
  nameWithType: DataLakeServiceAsyncClient.getServiceVersion
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getServiceVersion
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
    name: DataLakeFileSystemAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem*
  name: createFileSystem
  nameWithType: DataLakeServiceAsyncClient.createFileSystem
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystem
  package: com.azure.storage.file.datalake
- uid: java.util.Map<java.lang.String,java.lang.String>
  spec.java:
  - uid: java.util.Map
    name: Map
    fullName: java.util.Map
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: ','
    fullName: ','
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.models.PublicAccessType
  name: PublicAccessType
  nameWithType: PublicAccessType
  fullName: com.azure.storage.file.datalake.models.PublicAccessType
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
    name: DataLakeFileSystemAsyncClient
    fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse*
  name: createFileSystemWithResponse
  nameWithType: DataLakeServiceAsyncClient.createFileSystemWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.createFileSystemWithResponse
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<java.lang.Void>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem*
  name: deleteFileSystem
  nameWithType: DataLakeServiceAsyncClient.deleteFileSystem
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.DataLakeRequestConditions
  name: DataLakeRequestConditions
  nameWithType: DataLakeRequestConditions
  fullName: com.azure.storage.file.datalake.models.DataLakeRequestConditions
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<java.lang.Void>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse*
  name: deleteFileSystemWithResponse
  nameWithType: DataLakeServiceAsyncClient.deleteFileSystemWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl*
  name: getAccountUrl
  nameWithType: DataLakeServiceAsyncClient.getAccountUrl
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountUrl
  package: com.azure.storage.file.datalake
- uid: com.azure.core.http.rest.PagedFlux<com.azure.storage.file.datalake.models.FileSystemItem>
  spec.java:
  - uid: com.azure.core.http.rest.PagedFlux
    name: PagedFlux
    fullName: com.azure.core.http.rest.PagedFlux
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.FileSystemItem
    name: FileSystemItem
    fullName: com.azure.storage.file.datalake.models.FileSystemItem
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems*
  name: listFileSystems
  nameWithType: DataLakeServiceAsyncClient.listFileSystems
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.models.ListFileSystemsOptions
  name: ListFileSystemsOptions
  nameWithType: ListFileSystemsOptions
  fullName: com.azure.storage.file.datalake.models.ListFileSystemsOptions
- uid: java.time.OffsetDateTime
  spec.java:
  - uid: java.time.OffsetDateTime
    name: OffsetDateTime
    fullName: java.time.OffsetDateTime
- uid: reactor.core.publisher.Mono<com.azure.storage.file.datalake.models.UserDelegationKey>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.UserDelegationKey
    name: UserDelegationKey
    fullName: com.azure.storage.file.datalake.models.UserDelegationKey
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey*
  name: getUserDelegationKey
  nameWithType: DataLakeServiceAsyncClient.getUserDelegationKey
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKey
  package: com.azure.storage.file.datalake
- uid: reactor.core.publisher.Mono<com.azure.core.http.rest.Response<com.azure.storage.file.datalake.models.UserDelegationKey>>
  spec.java:
  - uid: reactor.core.publisher.Mono
    name: Mono
    fullName: reactor.core.publisher.Mono
  - name: <
    fullName: <
  - uid: com.azure.core.http.rest.Response
    name: Response
    fullName: com.azure.core.http.rest.Response
  - name: <
    fullName: <
  - uid: com.azure.storage.file.datalake.models.UserDelegationKey
    name: UserDelegationKey
    fullName: com.azure.storage.file.datalake.models.UserDelegationKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse*
  name: getUserDelegationKeyWithResponse
  nameWithType: DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getUserDelegationKeyWithResponse
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName*
  name: getAccountName
  nameWithType: DataLakeServiceAsyncClient.getAccountName
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.getAccountName
  package: com.azure.storage.file.datalake
- uid: com.azure.storage.common.sas.AccountSasSignatureValues
  spec.java:
  - uid: com.azure.storage.common.sas.AccountSasSignatureValues
    name: AccountSasSignatureValues
    fullName: com.azure.storage.common.sas.AccountSasSignatureValues
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas*
  name: generateAccountSas
  nameWithType: DataLakeServiceAsyncClient.generateAccountSas
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.generateAccountSas
  package: com.azure.storage.file.datalake
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: reactor.core.publisher.Mono
  name: Mono
  nameWithType: Mono
  fullName: reactor.core.publisher.Mono
- uid: java.util.Map
  name: Map
  nameWithType: Map
  fullName: java.util.Map
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: com.azure.core.http.rest.Response
  name: Response
  nameWithType: Response
  fullName: com.azure.core.http.rest.Response
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: com.azure.core.http.rest.PagedFlux
  name: PagedFlux
  nameWithType: PagedFlux
  fullName: com.azure.core.http.rest.PagedFlux
- uid: com.azure.storage.file.datalake.models.FileSystemItem
  name: FileSystemItem
  nameWithType: FileSystemItem
  fullName: com.azure.storage.file.datalake.models.FileSystemItem
- uid: com.azure.storage.file.datalake.models.UserDelegationKey
  name: UserDelegationKey
  nameWithType: UserDelegationKey
  fullName: com.azure.storage.file.datalake.models.UserDelegationKey
