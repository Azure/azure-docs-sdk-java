### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosAsyncClient"
  id: "CosmosAsyncClient"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosAsyncClient.CosmosAsyncClient(com.azure.cosmos.CosmosClientBuilder)"
  - "com.azure.cosmos.CosmosAsyncClient.close()"
  - "com.azure.cosmos.CosmosAsyncClient.cosmosKeyCredential()"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,int)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,int,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabase(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabase(java.lang.String,int)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(com.azure.cosmos.models.CosmosDatabaseProperties)"
  - "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncClient.getConfigs()"
  - "com.azure.cosmos.CosmosAsyncClient.getConnectionPolicy()"
  - "com.azure.cosmos.CosmosAsyncClient.getContextClient()"
  - "com.azure.cosmos.CosmosAsyncClient.getCosmosAuthorizationTokenResolver()"
  - "com.azure.cosmos.CosmosAsyncClient.getDatabase(java.lang.String)"
  - "com.azure.cosmos.CosmosAsyncClient.getDesiredConsistencyLevel()"
  - "com.azure.cosmos.CosmosAsyncClient.getDocClientWrapper()"
  - "com.azure.cosmos.CosmosAsyncClient.getKeyOrResourceToken()"
  - "com.azure.cosmos.CosmosAsyncClient.getPermissions()"
  - "com.azure.cosmos.CosmosAsyncClient.getServiceEndpoint()"
  - "com.azure.cosmos.CosmosAsyncClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncClient.queryDatabases(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncClient.readAllDatabases()"
  - "com.azure.cosmos.CosmosAsyncClient.readAllDatabases(com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosAsyncClient.readDatabaseAccount()"
  - "com.azure.cosmos.CosmosAsyncClient.setMonitorTelemetry(io.micrometer.core.instrument.MeterRegistry)"
  langs:
  - "java"
  name: "CosmosAsyncClient"
  nameWithType: "CosmosAsyncClient"
  fullName: "com.azure.cosmos.CosmosAsyncClient"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Provides a client-side logical representation of the Azure Cosmos database service. This asynchronous client is used to configure and execute requests against the service."
  syntax:
    content: "public class CosmosAsyncClient implements Closeable"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.io.Closeable"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosAsyncClient.CosmosAsyncClient(com.azure.cosmos.CosmosClientBuilder)"
  id: "CosmosAsyncClient(com.azure.cosmos.CosmosClientBuilder)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "CosmosAsyncClient(CosmosClientBuilder builder)"
  nameWithType: "CosmosAsyncClient.CosmosAsyncClient(CosmosClientBuilder builder)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.CosmosAsyncClient(CosmosClientBuilder builder)"
  overload: "com.azure.cosmos.CosmosAsyncClient.CosmosAsyncClient*"
  type: "Constructor"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosAsyncClient(CosmosClientBuilder builder)"
    parameters:
    - id: "builder"
      type: "com.azure.cosmos.CosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosAsyncClient.close()"
  id: "close()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "close()"
  nameWithType: "CosmosAsyncClient.close()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.close()"
  overload: "com.azure.cosmos.CosmosAsyncClient.close*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Close this <xref uid=\"com.azure.cosmos.CosmosAsyncClient\" data-throw-if-not-resolved=\"false\">CosmosAsyncClient</xref> instance and cleans up the resources."
  syntax:
    content: "public void close()"
- uid: "com.azure.cosmos.CosmosAsyncClient.cosmosKeyCredential()"
  id: "cosmosKeyCredential()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "cosmosKeyCredential()"
  nameWithType: "CosmosAsyncClient.cosmosKeyCredential()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.cosmosKeyCredential()"
  overload: "com.azure.cosmos.CosmosAsyncClient.cosmosKeyCredential*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the cosmos key credential"
  syntax:
    content: " CosmosKeyCredential cosmosKeyCredential()"
    return:
      type: "com.azure.cosmos.CosmosKeyCredential"
      description: "cosmos key credential"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)"
  id: "createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseSettings)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseSettings)"
    parameters:
    - id: "databaseSettings"
      type: "com.azure.cosmos.models.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with the created database or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  id: "createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseSettings, CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings, CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings, CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseSettings, CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "databaseSettings"
      type: "com.azure.cosmos.models.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref>"
    - id: "options"
      type: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
      description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\">CosmosDatabaseRequestOptions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with the created database or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,int)"
  id: "createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,int)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseSettings, int throughput)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings, int throughput)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings, int throughput)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseSettings, int throughput)"
    parameters:
    - id: "databaseSettings"
      type: "com.azure.cosmos.models.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref>"
    - id: "throughput"
      type: "int"
      description: "the throughput for the database"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with the created database or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,int,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  id: "createDatabase(com.azure.cosmos.models.CosmosDatabaseProperties,int,com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabase(CosmosDatabaseProperties databaseSettings, int throughput, CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings, int throughput, CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(CosmosDatabaseProperties databaseSettings, int throughput, CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabase(CosmosDatabaseProperties databaseSettings, int throughput, CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "databaseSettings"
      type: "com.azure.cosmos.models.CosmosDatabaseProperties"
      description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseProperties\" data-throw-if-not-resolved=\"false\">CosmosDatabaseProperties</xref>"
    - id: "throughput"
      type: "int"
      description: "the throughput for the database"
    - id: "options"
      type: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
      description: "<xref uid=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\">CosmosDatabaseRequestOptions</xref>"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "an <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with the created database or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(java.lang.String)"
  id: "createDatabase(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabase(String id)"
  nameWithType: "CosmosAsyncClient.createDatabase(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(String id)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabase(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the database"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with the created database or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase(java.lang.String,int)"
  id: "createDatabase(java.lang.String,int)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabase(String id, int throughput)"
  nameWithType: "CosmosAsyncClient.createDatabase(String id, int throughput)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase(String id, int throughput)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a database.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the created database. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabase(String id, int throughput)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the database"
    - id: "throughput"
      type: "int"
      description: "the throughput for the database"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single cosmos database response with the created database or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(com.azure.cosmos.models.CosmosDatabaseProperties)"
  id: "createDatabaseIfNotExists(com.azure.cosmos.models.CosmosDatabaseProperties)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabaseIfNotExists(CosmosDatabaseProperties databaseSettings)"
  nameWithType: "CosmosAsyncClient.createDatabaseIfNotExists(CosmosDatabaseProperties databaseSettings)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(CosmosDatabaseProperties databaseSettings)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "CREATE a Database if it does not already exist on the service\n\nThe <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos database response with the created or existing database."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabaseIfNotExists(CosmosDatabaseProperties databaseSettings)"
    parameters:
    - id: "databaseSettings"
      type: "com.azure.cosmos.models.CosmosDatabaseProperties"
      description: "CosmosDatabaseProperties"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos database response with the created or existing database or\n an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(java.lang.String)"
  id: "createDatabaseIfNotExists(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "createDatabaseIfNotExists(String id)"
  nameWithType: "CosmosAsyncClient.createDatabaseIfNotExists(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists(String id)"
  overload: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "CREATE a Database if it does not already exist on the service The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single cosmos database response with the created or existing database."
  syntax:
    content: "public Mono<CosmosAsyncDatabaseResponse> createDatabaseIfNotExists(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id of the database"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
      description: "a <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the cosmos database response with the created or existing database or\n an error"
- uid: "com.azure.cosmos.CosmosAsyncClient.getConfigs()"
  id: "getConfigs()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getConfigs()"
  nameWithType: "CosmosAsyncClient.getConfigs()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getConfigs()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getConfigs*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the configs"
  syntax:
    content: " Configs getConfigs()"
    return:
      type: "com.azure.cosmos.implementation.Configs"
      description: "the configs"
- uid: "com.azure.cosmos.CosmosAsyncClient.getConnectionPolicy()"
  id: "getConnectionPolicy()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getConnectionPolicy()"
  nameWithType: "CosmosAsyncClient.getConnectionPolicy()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getConnectionPolicy()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getConnectionPolicy*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the connection policy"
  syntax:
    content: " ConnectionPolicy getConnectionPolicy()"
    return:
      type: "com.azure.cosmos.ConnectionPolicy"
      description: "<xref uid=\"com.azure.cosmos.ConnectionPolicy\" data-throw-if-not-resolved=\"false\">ConnectionPolicy</xref>"
- uid: "com.azure.cosmos.CosmosAsyncClient.getContextClient()"
  id: "getContextClient()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getContextClient()"
  nameWithType: "CosmosAsyncClient.getContextClient()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getContextClient()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getContextClient*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " AsyncDocumentClient getContextClient()"
    return:
      type: "com.azure.cosmos.implementation.AsyncDocumentClient"
- uid: "com.azure.cosmos.CosmosAsyncClient.getCosmosAuthorizationTokenResolver()"
  id: "getCosmosAuthorizationTokenResolver()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getCosmosAuthorizationTokenResolver()"
  nameWithType: "CosmosAsyncClient.getCosmosAuthorizationTokenResolver()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getCosmosAuthorizationTokenResolver()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getCosmosAuthorizationTokenResolver*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the token resolver"
  syntax:
    content: " CosmosAuthorizationTokenResolver getCosmosAuthorizationTokenResolver()"
    return:
      type: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
      description: "the token resolver"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDatabase(java.lang.String)"
  id: "getDatabase(java.lang.String)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getDatabase(String id)"
  nameWithType: "CosmosAsyncClient.getDatabase(String id)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDatabase(String id)"
  overload: "com.azure.cosmos.CosmosAsyncClient.getDatabase*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a database object without making a service call."
  syntax:
    content: "public CosmosAsyncDatabase getDatabase(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "name of the database"
    return:
      type: "com.azure.cosmos.CosmosAsyncDatabase"
      description: "<xref uid=\"com.azure.cosmos.CosmosAsyncDatabase\" data-throw-if-not-resolved=\"false\">CosmosAsyncDatabase</xref>"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDesiredConsistencyLevel()"
  id: "getDesiredConsistencyLevel()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getDesiredConsistencyLevel()"
  nameWithType: "CosmosAsyncClient.getDesiredConsistencyLevel()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDesiredConsistencyLevel()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getDesiredConsistencyLevel*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the consistency level"
  syntax:
    content: " ConsistencyLevel getDesiredConsistencyLevel()"
    return:
      type: "com.azure.cosmos.ConsistencyLevel"
      description: "the (@link ConsistencyLevel)"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDocClientWrapper()"
  id: "getDocClientWrapper()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getDocClientWrapper()"
  nameWithType: "CosmosAsyncClient.getDocClientWrapper()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDocClientWrapper()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getDocClientWrapper*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " AsyncDocumentClient getDocClientWrapper()"
    return:
      type: "com.azure.cosmos.implementation.AsyncDocumentClient"
- uid: "com.azure.cosmos.CosmosAsyncClient.getKeyOrResourceToken()"
  id: "getKeyOrResourceToken()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getKeyOrResourceToken()"
  nameWithType: "CosmosAsyncClient.getKeyOrResourceToken()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getKeyOrResourceToken()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getKeyOrResourceToken*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the key or resource token"
  syntax:
    content: " String getKeyOrResourceToken()"
    return:
      type: "java.lang.String"
      description: "get the key or resource token"
- uid: "com.azure.cosmos.CosmosAsyncClient.getPermissions()"
  id: "getPermissions()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getPermissions()"
  nameWithType: "CosmosAsyncClient.getPermissions()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getPermissions()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getPermissions*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets the permission list"
  syntax:
    content: " List<Permission> getPermissions()"
    return:
      type: "java.util.List<com.azure.cosmos.models.Permission>"
      description: "the permission list"
- uid: "com.azure.cosmos.CosmosAsyncClient.getServiceEndpoint()"
  id: "getServiceEndpoint()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "getServiceEndpoint()"
  nameWithType: "CosmosAsyncClient.getServiceEndpoint()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getServiceEndpoint()"
  overload: "com.azure.cosmos.CosmosAsyncClient.getServiceEndpoint*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the service endpoint"
  syntax:
    content: " String getServiceEndpoint()"
    return:
      type: "java.lang.String"
      description: "the service endpoint"
- uid: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  id: "queryDatabases(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosAsyncClient.queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncClient.queryDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosDatabaseProperties> queryDatabases(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the SQL query specification."
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosDatabaseProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of read databases or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  id: "queryDatabases(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "queryDatabases(String query, FeedOptions options)"
  nameWithType: "CosmosAsyncClient.queryDatabases(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.queryDatabases(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncClient.queryDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query for databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosDatabaseProperties> queryDatabases(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query."
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the feed options."
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosDatabaseProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of read databases or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases()"
  id: "readAllDatabases()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "readAllDatabases()"
  nameWithType: "CosmosAsyncClient.readAllDatabases()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases()"
  overload: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases()"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosDatabaseProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of read databases or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases(com.azure.cosmos.models.FeedOptions)"
  id: "readAllDatabases(com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "readAllDatabases(FeedOptions options)"
  nameWithType: "CosmosAsyncClient.readAllDatabases(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads all databases.\n\nAfter subscription the operation will be performed. The <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will contain one or several feed response of the read databases. In case of failure the <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> will error."
  syntax:
    content: "public CosmosPagedFlux<CosmosDatabaseProperties> readAllDatabases(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "<xref uid=\"com.azure.cosmos.models.FeedOptions\" data-throw-if-not-resolved=\"false\">FeedOptions</xref>"
    return:
      type: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosDatabaseProperties>"
      description: "a <xref uid=\"com.azure.cosmos.CosmosPagedFlux\" data-throw-if-not-resolved=\"false\">CosmosPagedFlux</xref> containing one or several feed response pages of read databases or an error."
- uid: "com.azure.cosmos.CosmosAsyncClient.readDatabaseAccount()"
  id: "readDatabaseAccount()"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "readDatabaseAccount()"
  nameWithType: "CosmosAsyncClient.readDatabaseAccount()"
  fullName: "com.azure.cosmos.CosmosAsyncClient.readDatabaseAccount()"
  overload: "com.azure.cosmos.CosmosAsyncClient.readDatabaseAccount*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets database account information.\n\nAfter subscription the operation will be performed. The <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> upon successful completion will contain a single resource response with the database account. In case of failure the <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> will error."
  syntax:
    content: "public Mono<DatabaseAccount> readDatabaseAccount()"
    return:
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.DatabaseAccount>"
      description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing the single resource response with the database account or an error"
- uid: "com.azure.cosmos.CosmosAsyncClient.setMonitorTelemetry(io.micrometer.core.instrument.MeterRegistry)"
  id: "setMonitorTelemetry(io.micrometer.core.instrument.MeterRegistry)"
  parent: "com.azure.cosmos.CosmosAsyncClient"
  langs:
  - "java"
  name: "setMonitorTelemetry(MeterRegistry registry)"
  nameWithType: "CosmosAsyncClient.setMonitorTelemetry(MeterRegistry registry)"
  fullName: "com.azure.cosmos.CosmosAsyncClient.setMonitorTelemetry(MeterRegistry registry)"
  overload: "com.azure.cosmos.CosmosAsyncClient.setMonitorTelemetry*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Monitor Cosmos client performance and resource utilization using the specified meter registry"
  syntax:
    content: "static void setMonitorTelemetry(MeterRegistry registry)"
    parameters:
    - id: "registry"
      type: "io.micrometer.core.instrument.MeterRegistry"
      description: "meter registry to use for performance monitoring"
references:
- uid: "com.azure.cosmos.CosmosClientBuilder"
  name: "CosmosClientBuilder"
  nameWithType: "CosmosClientBuilder"
  fullName: "com.azure.cosmos.CosmosClientBuilder"
- uid: "com.azure.cosmos.CosmosAsyncClient.CosmosAsyncClient*"
  name: "CosmosAsyncClient"
  nameWithType: "CosmosAsyncClient.CosmosAsyncClient"
  fullName: "com.azure.cosmos.CosmosAsyncClient.CosmosAsyncClient"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.implementation.AsyncDocumentClient"
  name: "AsyncDocumentClient"
  nameWithType: "AsyncDocumentClient"
  fullName: "com.azure.cosmos.implementation.AsyncDocumentClient"
- uid: "com.azure.cosmos.CosmosAsyncClient.getContextClient*"
  name: "getContextClient"
  nameWithType: "CosmosAsyncClient.getContextClient"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getContextClient"
  package: "com.azure.cosmos"
- uid: "io.micrometer.core.instrument.MeterRegistry"
  spec.java:
  - uid: "io.micrometer.core.instrument.MeterRegistry"
    name: "MeterRegistry"
    fullName: "io.micrometer.core.instrument.MeterRegistry"
- uid: "com.azure.cosmos.CosmosAsyncClient.setMonitorTelemetry*"
  name: "setMonitorTelemetry"
  nameWithType: "CosmosAsyncClient.setMonitorTelemetry"
  fullName: "com.azure.cosmos.CosmosAsyncClient.setMonitorTelemetry"
  package: "com.azure.cosmos"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosAsyncClient.getServiceEndpoint*"
  name: "getServiceEndpoint"
  nameWithType: "CosmosAsyncClient.getServiceEndpoint"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getServiceEndpoint"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncClient.getKeyOrResourceToken*"
  name: "getKeyOrResourceToken"
  nameWithType: "CosmosAsyncClient.getKeyOrResourceToken"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getKeyOrResourceToken"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConnectionPolicy"
  name: "ConnectionPolicy"
  nameWithType: "ConnectionPolicy"
  fullName: "com.azure.cosmos.ConnectionPolicy"
- uid: "com.azure.cosmos.CosmosAsyncClient.getConnectionPolicy*"
  name: "getConnectionPolicy"
  nameWithType: "CosmosAsyncClient.getConnectionPolicy"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getConnectionPolicy"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.ConsistencyLevel"
  name: "ConsistencyLevel"
  nameWithType: "ConsistencyLevel"
  fullName: "com.azure.cosmos.ConsistencyLevel"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDesiredConsistencyLevel*"
  name: "getDesiredConsistencyLevel"
  nameWithType: "CosmosAsyncClient.getDesiredConsistencyLevel"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDesiredConsistencyLevel"
  package: "com.azure.cosmos"
- uid: "java.util.List<com.azure.cosmos.models.Permission>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.Permission"
    name: "Permission"
    fullName: "com.azure.cosmos.models.Permission"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncClient.getPermissions*"
  name: "getPermissions"
  nameWithType: "CosmosAsyncClient.getPermissions"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getPermissions"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDocClientWrapper*"
  name: "getDocClientWrapper"
  nameWithType: "CosmosAsyncClient.getDocClientWrapper"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDocClientWrapper"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.implementation.Configs"
  name: "Configs"
  nameWithType: "Configs"
  fullName: "com.azure.cosmos.implementation.Configs"
- uid: "com.azure.cosmos.CosmosAsyncClient.getConfigs*"
  name: "getConfigs"
  nameWithType: "CosmosAsyncClient.getConfigs"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getConfigs"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
  name: "CosmosAuthorizationTokenResolver"
  nameWithType: "CosmosAuthorizationTokenResolver"
  fullName: "com.azure.cosmos.CosmosAuthorizationTokenResolver"
- uid: "com.azure.cosmos.CosmosAsyncClient.getCosmosAuthorizationTokenResolver*"
  name: "getCosmosAuthorizationTokenResolver"
  nameWithType: "CosmosAsyncClient.getCosmosAuthorizationTokenResolver"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getCosmosAuthorizationTokenResolver"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosKeyCredential"
  name: "CosmosKeyCredential"
  nameWithType: "CosmosKeyCredential"
  fullName: "com.azure.cosmos.CosmosKeyCredential"
- uid: "com.azure.cosmos.CosmosAsyncClient.cosmosKeyCredential*"
  name: "cosmosKeyCredential"
  nameWithType: "CosmosAsyncClient.cosmosKeyCredential"
  fullName: "com.azure.cosmos.CosmosAsyncClient.cosmosKeyCredential"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosDatabaseProperties"
  name: "CosmosDatabaseProperties"
  nameWithType: "CosmosDatabaseProperties"
  fullName: "com.azure.cosmos.models.CosmosDatabaseProperties"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncDatabaseResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
    name: "CosmosAsyncDatabaseResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists*"
  name: "createDatabaseIfNotExists"
  nameWithType: "CosmosAsyncClient.createDatabaseIfNotExists"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabaseIfNotExists"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
  name: "CosmosDatabaseRequestOptions"
  nameWithType: "CosmosDatabaseRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
- uid: "com.azure.cosmos.CosmosAsyncClient.createDatabase*"
  name: "createDatabase"
  nameWithType: "CosmosAsyncClient.createDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncClient.createDatabase"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.models.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.models.FeedOptions"
- uid: "com.azure.cosmos.CosmosPagedFlux<com.azure.cosmos.models.CosmosDatabaseProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosPagedFlux"
    name: "CosmosPagedFlux"
    fullName: "com.azure.cosmos.CosmosPagedFlux"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosDatabaseProperties"
    name: "CosmosDatabaseProperties"
    fullName: "com.azure.cosmos.models.CosmosDatabaseProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases*"
  name: "readAllDatabases"
  nameWithType: "CosmosAsyncClient.readAllDatabases"
  fullName: "com.azure.cosmos.CosmosAsyncClient.readAllDatabases"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncClient.queryDatabases*"
  name: "queryDatabases"
  nameWithType: "CosmosAsyncClient.queryDatabases"
  fullName: "com.azure.cosmos.CosmosAsyncClient.queryDatabases"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.SqlQuerySpec"
  name: "SqlQuerySpec"
  nameWithType: "SqlQuerySpec"
  fullName: "com.azure.cosmos.models.SqlQuerySpec"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.DatabaseAccount>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.DatabaseAccount"
    name: "DatabaseAccount"
    fullName: "com.azure.cosmos.models.DatabaseAccount"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosAsyncClient.readDatabaseAccount*"
  name: "readDatabaseAccount"
  nameWithType: "CosmosAsyncClient.readDatabaseAccount"
  fullName: "com.azure.cosmos.CosmosAsyncClient.readDatabaseAccount"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncDatabase"
  name: "CosmosAsyncDatabase"
  nameWithType: "CosmosAsyncDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosAsyncClient.getDatabase*"
  name: "getDatabase"
  nameWithType: "CosmosAsyncClient.getDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncClient.getDatabase"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosAsyncClient.close*"
  name: "close"
  nameWithType: "CosmosAsyncClient.close"
  fullName: "com.azure.cosmos.CosmosAsyncClient.close"
  package: "com.azure.cosmos"
- uid: "java.io.Closeable"
  name: "Closeable"
  nameWithType: "Closeable"
  fullName: "java.io.Closeable"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "com.azure.cosmos.models.Permission"
  name: "Permission"
  nameWithType: "Permission"
  fullName: "com.azure.cosmos.models.Permission"
- uid: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
  name: "CosmosAsyncDatabaseResponse"
  nameWithType: "CosmosAsyncDatabaseResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncDatabaseResponse"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.CosmosPagedFlux"
  name: "CosmosPagedFlux"
  nameWithType: "CosmosPagedFlux"
  fullName: "com.azure.cosmos.CosmosPagedFlux"
- uid: "com.azure.cosmos.models.DatabaseAccount"
  name: "DatabaseAccount"
  nameWithType: "DatabaseAccount"
  fullName: "com.azure.cosmos.models.DatabaseAccount"
