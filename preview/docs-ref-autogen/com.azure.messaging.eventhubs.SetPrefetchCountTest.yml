### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest
  id: SetPrefetchCountTest
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.afterTest()
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.beforeTest()
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.setLargePrefetchCount()
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.SetPrefetchCountTest()
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.setSmallPrefetchCount()
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.testName
  - com.azure.messaging.eventhubs.SetPrefetchCountTest.testName()
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: SetPrefetchCountTest
  nameWithType: SetPrefetchCountTest
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 31
  package: com.azure.messaging.eventhubs
  summary: "<p>Verifies we can use various prefetch options with <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref>. </p>"
  syntax:
    content: public class SetPrefetchCountTest extends ApiTestBase
  inheritance:
  - java.lang.Object
  - com.azure.core.test.TestBase
  - com.azure.messaging.eventhubs.implementation.ApiTestBase
  inheritedMembers:
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger)
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable...)
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  - com.azure.core.test.TestBase.interceptorManager
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType)
  - com.azure.core.test.TestBase.setupClass()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  - com.azure.core.test.TestBase.testResourceNamer
  - com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.afterTest()
  id: afterTest()
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: afterTest()
  nameWithType: SetPrefetchCountTest.afterTest()
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.afterTest()
  overload: com.azure.messaging.eventhubs.SetPrefetchCountTest.afterTest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 71
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected void afterTest()
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.beforeTest()
  id: beforeTest()
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: beforeTest()
  nameWithType: SetPrefetchCountTest.beforeTest()
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.beforeTest()
  overload: com.azure.messaging.eventhubs.SetPrefetchCountTest.beforeTest*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 61
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected void beforeTest()
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.setLargePrefetchCount()
  id: setLargePrefetchCount()
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: setLargePrefetchCount()
  nameWithType: SetPrefetchCountTest.setLargePrefetchCount()
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.setLargePrefetchCount()
  overload: com.azure.messaging.eventhubs.SetPrefetchCountTest.setLargePrefetchCount*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 79
  package: com.azure.messaging.eventhubs
  summary: "<p>Test that we can use a very large prefetch number with <xref uid=\"\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions</xref></p>"
  syntax:
    content: public void setLargePrefetchCount()
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.SetPrefetchCountTest()
  id: SetPrefetchCountTest()
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: SetPrefetchCountTest()
  nameWithType: SetPrefetchCountTest.SetPrefetchCountTest()
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.SetPrefetchCountTest()
  overload: com.azure.messaging.eventhubs.SetPrefetchCountTest.SetPrefetchCountTest*
  type: Constructor
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 51
  package: com.azure.messaging.eventhubs
  syntax:
    content: public SetPrefetchCountTest()
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.setSmallPrefetchCount()
  id: setSmallPrefetchCount()
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: setSmallPrefetchCount()
  nameWithType: SetPrefetchCountTest.setSmallPrefetchCount()
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.setSmallPrefetchCount()
  overload: com.azure.messaging.eventhubs.SetPrefetchCountTest.setSmallPrefetchCount*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 111
  package: com.azure.messaging.eventhubs
  summary: "<p>Test for small prefetch count on EventHubConsumer continues to get messages. </p>"
  syntax:
    content: public void setSmallPrefetchCount()
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName
  id: testName
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: testName
  nameWithType: SetPrefetchCountTest.testName
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName
  type: Field
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 49
  package: com.azure.messaging.eventhubs
  syntax:
    content: public TestName testName= new TestName()
    return:
      type: 1e0ad879
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName()
  id: testName()
  parent: com.azure.messaging.eventhubs.SetPrefetchCountTest
  href: com.azure.messaging.eventhubs.SetPrefetchCountTest.yml
  langs:
  - java
  name: testName()
  nameWithType: SetPrefetchCountTest.testName()
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName()
  overload: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/test/java/com/azure/messaging/eventhubs/SetPrefetchCountTest.java
    startLine: 56
  package: com.azure.messaging.eventhubs
  syntax:
    content: protected String testName()
    return:
      type: "26831127"
references:
- uid: 1e0ad879
  spec.java:
  - name: TestName
    fullName: TestName
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.SetPrefetchCountTest*
  name: SetPrefetchCountTest
  nameWithType: SetPrefetchCountTest.SetPrefetchCountTest
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.SetPrefetchCountTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.setLargePrefetchCount*
  name: setLargePrefetchCount
  nameWithType: SetPrefetchCountTest.setLargePrefetchCount
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.setLargePrefetchCount
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.setSmallPrefetchCount*
  name: setSmallPrefetchCount
  nameWithType: SetPrefetchCountTest.setSmallPrefetchCount
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.setSmallPrefetchCount
  package: com.azure.messaging.eventhubs
- uid: "26831127"
  spec.java:
  - name: String
    fullName: String
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName*
  name: testName
  nameWithType: SetPrefetchCountTest.testName
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.testName
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.beforeTest*
  name: beforeTest
  nameWithType: SetPrefetchCountTest.beforeTest
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.beforeTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.SetPrefetchCountTest.afterTest*
  name: afterTest
  nameWithType: SetPrefetchCountTest.afterTest
  fullName: com.azure.messaging.eventhubs.SetPrefetchCountTest.afterTest
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: ApiTestBase(ClientLogger logger)
  nameWithType: ApiTestBase.ApiTestBase(ClientLogger logger)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.ApiTestBase(ClientLogger logger)
  type: Constructor
  syntax:
    content: protected ApiTestBase(ClientLogger logger)
    parameters:
    - id: logger
      type: com.azure.core.util.logging.ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable...)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: dispose(Closeable... closeables)
  nameWithType: ApiTestBase.dispose(Closeable... closeables)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.dispose(Closeable... closeables)
  type: Method
  summary: "<p>Disposes of any <xref uid=\"\" data-throw-if-not-resolved=\"false\">Closeable</xref> resources.</p>\r\n<p></p>"
  syntax:
    content: protected void dispose(Closeable... closeables)
    parameters:
    - id: closeables
      type: 05580a22
      description: >-
        <p>The closeables to dispose of. If a closeable is<code>null 

            </code> , it is skipped. </p>
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getAuthorizationType()
  nameWithType: ApiTestBase.getAuthorizationType()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getAuthorizationType()
  type: Method
  syntax:
    content: protected CBSAuthorizationType getAuthorizationType()
    return:
      type: com.azure.messaging.eventhubs.implementation.CBSAuthorizationType
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionOptions()
  nameWithType: ApiTestBase.getConnectionOptions()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionOptions()
  type: Method
  syntax:
    content: protected ConnectionOptions getConnectionOptions()
    return:
      type: com.azure.messaging.eventhubs.implementation.ConnectionOptions
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionString()
  nameWithType: ApiTestBase.getConnectionString()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionString()
  type: Method
  syntax:
    content: protected String getConnectionString()
    return:
      type: "26831127"
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getConnectionStringProperties()
  nameWithType: ApiTestBase.getConnectionStringProperties()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getConnectionStringProperties()
  type: Method
  syntax:
    content: protected ConnectionStringProperties getConnectionStringProperties()
    return:
      type: com.azure.messaging.eventhubs.implementation.ConnectionStringProperties
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getReactor()
  nameWithType: ApiTestBase.getReactor()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactor()
  type: Method
  syntax:
    content: protected Reactor getReactor()
    return:
      type: 5f183614
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getReactorProvider()
  nameWithType: ApiTestBase.getReactorProvider()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getReactorProvider()
  type: Method
  syntax:
    content: protected ReactorProvider getReactorProvider()
    return:
      type: com.azure.messaging.eventhubs.implementation.ReactorProvider
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getTestMode()
  nameWithType: ApiTestBase.getTestMode()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTestMode()
  type: Method
  summary: "<p>Gets the test mode for this API test. If AZURE_TEST_MODE equals <xref uid=\"com.azure.core.test.TestMode.RECORD\" data-throw-if-not-resolved=\"false\">TestMode#RECORD</xref> and Event Hubs connection string is set, then we return <xref uid=\"com.azure.core.test.TestMode.RECORD\" data-throw-if-not-resolved=\"false\">TestMode#RECORD</xref>. Otherwise, <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\">TestMode#PLAYBACK</xref> is returned. </p>"
  syntax:
    content: public TestMode getTestMode()
    return:
      type: com.azure.core.test.TestMode
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: getTokenCredential()
  nameWithType: ApiTestBase.getTokenCredential()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.getTokenCredential()
  type: Method
  syntax:
    content: protected TokenCredential getTokenCredential()
    return:
      type: com.azure.core.credentials.TokenCredential
- uid: com.azure.core.test.TestBase.interceptorManager
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: interceptorManager
  nameWithType: TestBase.interceptorManager
  fullName: com.azure.core.test.TestBase.interceptorManager
  type: Field
  syntax:
    content: protected InterceptorManager interceptorManager
    return:
      type: com.azure.core.test.InterceptorManager
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: logger
  nameWithType: ApiTestBase.logger
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.logger
  type: Field
  syntax:
    content: protected final ClientLogger logger
    return:
      type: 93de0ef9com.azure.core.util.logging.ClientLogger
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType)
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: setTransportType(TransportType transportType)
  nameWithType: ApiTestBase.setTransportType(TransportType transportType)
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.setTransportType(TransportType transportType)
  type: Method
  syntax:
    content: protected void setTransportType(TransportType transportType)
    parameters:
    - id: transportType
      type: com.azure.core.amqp.TransportType
- uid: com.azure.core.test.TestBase.setupClass()
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: setupClass()
  nameWithType: TestBase.setupClass()
  fullName: com.azure.core.test.TestBase.setupClass()
  type: Method
  summary: "<p>Before tests are executed, determines the test mode by reading the <xref uid=\"\" data-throw-if-not-resolved=\"false\">TestBase#AZURE_TEST_MODE</xref> environment variable. If it is not set, <xref uid=\"com.azure.core.test.TestMode.PLAYBACK\" data-throw-if-not-resolved=\"false\">TestMode#PLAYBACK</xref></p>"
  syntax:
    content: public static void setupClass()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: setupTest()
  nameWithType: ApiTestBase.setupTest()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.setupTest()
  type: Method
  syntax:
    content: public void setupTest()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: skipIfNotRecordMode()
  nameWithType: ApiTestBase.skipIfNotRecordMode()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.skipIfNotRecordMode()
  type: Method
  syntax:
    content: protected void skipIfNotRecordMode()
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: teardownTest()
  nameWithType: ApiTestBase.teardownTest()
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.teardownTest()
  type: Method
  syntax:
    content: public void teardownTest()
- uid: com.azure.core.test.TestBase.testResourceNamer
  parent: com.azure.core.test.TestBase
  href: com.azure.core.test.TestBase.yml
  name: testResourceNamer
  nameWithType: TestBase.testResourceNamer
  fullName: com.azure.core.test.TestBase.testResourceNamer
  type: Field
  syntax:
    content: protected TestResourceNamer testResourceNamer
    return:
      type: com.azure.core.test.utils.TestResourceNamer
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
  parent: com.azure.messaging.eventhubs.implementation.ApiTestBase
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: TIMEOUT
  nameWithType: ApiTestBase.TIMEOUT
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase.TIMEOUT
  type: Field
  syntax:
    content: protected static final Duration TIMEOUT= Duration.ofSeconds(30)
    return:
      type: 89ac7c4d
- uid: com.azure.messaging.eventhubs.implementation.ApiTestBase
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.ApiTestBase.yml
  name: ApiTestBase
  nameWithType: ApiTestBase
  fullName: com.azure.messaging.eventhubs.implementation.ApiTestBase
  type: Class
  summary: "<p>Test base for running live and offline tests. </p>"
  syntax:
    content: public class ApiTestBase extends TestBase
- uid: com.azure.messaging.eventhubs.EventHubAsyncClient
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubAsyncClient.yml
  name: EventHubAsyncClient
  nameWithType: EventHubAsyncClient
  fullName: com.azure.messaging.eventhubs.EventHubAsyncClient
  type: Class
  summary: "<p>The main point of interaction with Azure Event Hubs, the client offers a connection to a specific Event Hub within the Event Hubs namespace and offers operations for sending event data, receiving events, and inspecting the connected Event Hub.</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hubs namespace connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionString::string-string}</p>\r\n<p>\r\n  <b>Creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubAsyncClient\" data-throw-if-not-resolved=\"false\">EventHubAsyncClient</xref> using Event Hub instance connection string</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubclientbuilder.connectionstring::string}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubAsyncClient
- uid: com.azure.messaging.eventhubs.EventHubConsumer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubConsumer.yml
  name: EventHubConsumer
  nameWithType: EventHubConsumer
  fullName: com.azure.messaging.eventhubs.EventHubConsumer
  type: Class
  summary: "<p>A consumer responsible for reading <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> from a specific Event Hub partition in the context of a specific consumer group.</p>\r\n<p>\r\n  <ul>\r\n    <li>\r\n      <p>If <xref uid=\"com.azure.messaging.eventhubs.EventHubConsumer\" data-throw-if-not-resolved=\"false\">EventHubConsumer</xref> is created where <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> has a value, then Event Hubs service will guarantee only one active consumer exists per partitionId and consumer group combination. This consumer is sometimes referred to as an \"Epoch Consumer.\" </p>\r\n    </li>\r\n    <li>\r\n      <p>Multiple consumers per partitionId and consumer group combination can be created by not setting <xref uid=\"com.azure.messaging.eventhubs.models.EventHubConsumerOptions.ownerLevel()\" data-throw-if-not-resolved=\"false\">EventHubConsumerOptions#ownerLevel()</xref> when creating consumers. This non-exclusive consumer is sometimes referred to as a \"Non-Epoch Consumer.\" </p>\r\n    </li>\r\n  </ul>\r\n</p>\r\n<p>\r\n  <b>Consuming events from Event Hub</b>\r\n</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receive}</p>\r\n<p>\r\n  <b>Rate limiting consumption of events from Event Hub</b>\r\n</p>\r\n<p>For event consumers that need to limit the number of events they receive at a given time, they can use <xref uid=\"\" data-throw-if-not-resolved=\"false\">BaseSubscriber#request(long)</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubconsumer.receiveBackpressure}</p>\r\n<p></p>"
  syntax:
    content: public class EventHubConsumer
