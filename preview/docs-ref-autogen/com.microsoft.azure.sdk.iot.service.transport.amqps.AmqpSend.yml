### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend"
fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend"
name: "AmqpSend"
nameWithType: "AmqpSend"
summary: "Instance of the QPID-Proton-J Base<wbr>Handler class overriding the events what are needed to handle high level open, close and send methods."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class AmqpSend"
constructors:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  name: "AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  nameWithType: "AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  summary: "Constructor to set up connection parameters"
  parameters:
  - description: "The address string of the service (example: AAA.BBB.CCC)"
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The username string to use SASL authentication (example: user@sas.service)"
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The SAS token string"
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "protocol to use"
    name: "iotHubServiceClientProtocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)"
  desc: "Constructor to set up connection parameters"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  name: "AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  nameWithType: "AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  summary: "Constructor to set up connection parameters"
  parameters:
  - description: "The address string of the service (example: AAA.BBB.CCC)"
    name: "hostName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The username string to use SASL authentication (example: user@sas.service)"
    name: "userName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The SAS token string"
    name: "sasToken"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "protocol to use"
    name: "iotHubServiceClientProtocol"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  - description: "the proxy options to tunnel through, if a proxy should be used."
    name: "proxyOptions"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.ProxyOptions?alt=com.microsoft.azure.sdk.iot.service.ProxyOptions&text=ProxyOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)"
  desc: "Constructor to set up connection parameters"
fields:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.amqpSendHandler"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.amqpSendHandler"
  name: "amqpSendHandler"
  nameWithType: "AmqpSend.amqpSendHandler"
  modifiers:
  - "protected"
  field:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler?alt=com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler&text=AmqpSendHandler\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected AmqpSendHandler amqpSendHandler"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.hostName"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.hostName"
  name: "hostName"
  nameWithType: "AmqpSend.hostName"
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String hostName"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.iotHubServiceClientProtocol"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.iotHubServiceClientProtocol"
  name: "iotHubServiceClientProtocol"
  nameWithType: "AmqpSend.iotHubServiceClientProtocol"
  modifiers:
  - "protected"
  field:
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol?alt=com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol&text=IotHubServiceClientProtocol\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected IotHubServiceClientProtocol iotHubServiceClientProtocol"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.sasToken"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.sasToken"
  name: "sasToken"
  nameWithType: "AmqpSend.sasToken"
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String sasToken"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.userName"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.userName"
  name: "userName"
  nameWithType: "AmqpSend.userName"
  modifiers:
  - "protected"
  - "final"
  field:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected final String userName"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close()"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close()"
  name: "close()"
  nameWithType: "AmqpSend.close()"
  summary: "Invalidate Amqps<wbr>Send<wbr>Handler member variable"
  syntax: "public void close()"
  desc: "Invalidate AmqpsSendHandler member variable"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open()"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open()"
  name: "open()"
  nameWithType: "AmqpSend.open()"
  summary: "Create Amqps<wbr>Send<wbr>Handler and store it in a member variable"
  syntax: "public void open()"
  desc: "Create AmqpsSendHandler and store it in a member variable"
- uid: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.Message)"
  fullName: "com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send(String deviceId, String moduleId, Message message)"
  name: "send(String deviceId, String moduleId, Message message)"
  nameWithType: "AmqpSend.send(String deviceId, String moduleId, Message message)"
  summary: "Create binary message Initialize and start Proton reactor Send the created message"
  parameters:
  - description: "The device name string"
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The module name string"
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The message to be sent"
    name: "message"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.Message?alt=com.microsoft.azure.sdk.iot.service.Message&text=Message\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void send(String deviceId, String moduleId, Message message)"
  exceptions:
  - description: "This exception is thrown if the AmqpSend object is not initialized"
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  - description: "This exception is thrown if the AmqpSend object is not initialized"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.exceptions.IotHubException?alt=com.microsoft.azure.sdk.iot.service.exceptions.IotHubException&text=IotHubException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Create binary message Initialize and start Proton reactor Send the created message"
type: "class"
desc: "Instance of the QPID-Proton-J BaseHandler class overriding the events what are needed to handle high level open, close and send methods. Initialize and use AmqpsSendHandler class for low level ampqs operations."
metadata: {}
package: "com.microsoft.azure.sdk.iot.service.transport.amqps"
artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
