### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  id: AmqpSend
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps
  children:
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.amqpSendHandler
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close()
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.hostName
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.iotHubServiceClientProtocol
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open()
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.sasToken
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.Message)
  - com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.userName
  langs:
  - java
  name: AmqpSend
  nameWithType: AmqpSend
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  type: Class
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Instance of the QPID-Proton-J BaseHandler class overriding the events what are needed to handle high level open, close and send methods. Initialize and use AmqpsSendHandler class for low level ampqs operations.
  syntax:
    content: public class AmqpSend
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  id: AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  nameWithType: AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Constructor to set up connection parameters
  syntax:
    content: public AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol)
    parameters:
    - id: hostName
      type: java.lang.String
      description: 'The address string of the service (example: AAA.BBB.CCC)'
    - id: userName
      type: java.lang.String
      description: 'The username string to use SASL authentication (example: user@sas.service)'
    - id: sasToken
      type: java.lang.String
      description: The SAS token string
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: protocol to use
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  id: AmqpSend(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol,com.microsoft.azure.sdk.iot.service.ProxyOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  nameWithType: AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Constructor to set up connection parameters
  syntax:
    content: public AmqpSend(String hostName, String userName, String sasToken, IotHubServiceClientProtocol iotHubServiceClientProtocol, ProxyOptions proxyOptions)
    parameters:
    - id: hostName
      type: java.lang.String
      description: 'The address string of the service (example: AAA.BBB.CCC)'
    - id: userName
      type: java.lang.String
      description: 'The username string to use SASL authentication (example: user@sas.service)'
    - id: sasToken
      type: java.lang.String
      description: The SAS token string
    - id: iotHubServiceClientProtocol
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
      description: protocol to use
    - id: proxyOptions
      type: com.microsoft.azure.sdk.iot.service.ProxyOptions
      description: the proxy options to tunnel through, if a proxy should be used.
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.amqpSendHandler
  id: amqpSendHandler
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: amqpSendHandler
  nameWithType: AmqpSend.amqpSendHandler
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.amqpSendHandler
  type: Field
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  syntax:
    content: protected AmqpSendHandler amqpSendHandler
    return:
      type: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close()
  id: close()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: close()
  nameWithType: AmqpSend.close()
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close()
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Invalidate AmqpsSendHandler member variable
  syntax:
    content: public void close()
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.hostName
  id: hostName
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: hostName
  nameWithType: AmqpSend.hostName
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.hostName
  type: Field
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  syntax:
    content: protected final String hostName
    return:
      type: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.iotHubServiceClientProtocol
  id: iotHubServiceClientProtocol
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: iotHubServiceClientProtocol
  nameWithType: AmqpSend.iotHubServiceClientProtocol
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.iotHubServiceClientProtocol
  type: Field
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  syntax:
    content: protected IotHubServiceClientProtocol iotHubServiceClientProtocol
    return:
      type: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open()
  id: open()
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: open()
  nameWithType: AmqpSend.open()
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open()
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Create AmqpsSendHandler and store it in a member variable
  syntax:
    content: public void open()
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.sasToken
  id: sasToken
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: sasToken
  nameWithType: AmqpSend.sasToken
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.sasToken
  type: Field
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  syntax:
    content: protected final String sasToken
    return:
      type: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.Message)
  id: send(java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.Message)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: send(String deviceId, String moduleId, Message message)
  nameWithType: AmqpSend.send(String deviceId, String moduleId, Message message)
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send(String deviceId, String moduleId, Message message)
  overload: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  summary: Create binary message Initialize and start Proton reactor Send the created message
  syntax:
    content: public void send(String deviceId, String moduleId, Message message)
    parameters:
    - id: deviceId
      type: java.lang.String
      description: The device name string
    - id: moduleId
      type: java.lang.String
      description: The module name string
    - id: message
      type: com.microsoft.azure.sdk.iot.service.Message
      description: The message to be sent
  exceptions:
  - type: java.io.IOException
    description: This exception is thrown if the AmqpSend object is not initialized
  - type: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
    description: This exception is thrown if the AmqpSend object is not initialized
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.userName
  id: userName
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.1.0
  parent: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend
  langs:
  - java
  name: userName
  nameWithType: AmqpSend.userName
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.userName
  type: Field
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
  syntax:
    content: protected final String userName
    return:
      type: java.lang.String
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
  name: IotHubServiceClientProtocol
  nameWithType: IotHubServiceClientProtocol
  fullName: com.microsoft.azure.sdk.iot.service.IotHubServiceClientProtocol
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend*
  name: AmqpSend
  nameWithType: AmqpSend.AmqpSend
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.AmqpSend
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.ProxyOptions
  name: ProxyOptions
  nameWithType: ProxyOptions
  fullName: com.microsoft.azure.sdk.iot.service.ProxyOptions
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open*
  name: open
  nameWithType: AmqpSend.open
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.open
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close*
  name: close
  nameWithType: AmqpSend.close
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.close
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
  name: IotHubException
  nameWithType: IotHubException
  fullName: com.microsoft.azure.sdk.iot.service.exceptions.IotHubException
- uid: com.microsoft.azure.sdk.iot.service.Message
  name: Message
  nameWithType: Message
  fullName: com.microsoft.azure.sdk.iot.service.Message
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send*
  name: send
  nameWithType: AmqpSend.send
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSend.send
  package: com.microsoft.azure.sdk.iot.service.transport.amqps
- uid: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler
  name: AmqpSendHandler
  nameWithType: AmqpSendHandler
  fullName: com.microsoft.azure.sdk.iot.service.transport.amqps.AmqpSendHandler
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
