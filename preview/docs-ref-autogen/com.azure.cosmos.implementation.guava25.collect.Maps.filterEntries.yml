### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.filterEntries*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries"
name: "<K,V>filterEntries"
nameWithType: "Maps.<K,V>filterEntries"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(BiMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  name: "<K,V>filterEntries(BiMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  nameWithType: "Maps.<K,V>filterEntries(BiMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  summary: "Returns a bimap containing the mappings in `unfiltered` that satisfy a predicate. The returned bimap is a live view of `unfiltered`; changes to one affect the other.\n\nThe resulting bimap's `keySet()`, `entrySet()`, and `values()` views have iterators that don't support `remove()`, but all other methods are supported by the bimap and its views. When given a key/value pair that doesn't satisfy the predicate, the bimap's `put()`, `forcePut()` and `putAll()` methods throw an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref>. Similarly, the map's entries have an <xref uid=\"? super java.util.Map.Entry.setValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Entry#setValue\"></xref> method that throws an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> when the existing key and the provided value don't satisfy the predicate.\n\nWhen methods such as `removeAll()` and `clear()` are called on the filtered bimap or its views, only mappings that satisfy the filter will be removed from the underlying bimap.\n\nThe returned bimap isn't threadsafe or serializable, even if `unfiltered` is.\n\nMany of the filtered bimap's methods, such as `size()`, iterate across every key/value mapping in the underlying bimap and determine which satisfy the filter. When a live view is *not* needed, it may be faster to copy the filtered bimap and use the copy.\n\n**Warning:** `entryPredicate` must be *consistent with equals* , as documented at <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate.apply\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate#apply\"></xref>."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.BiMap?alt=com.azure.cosmos.implementation.guava25.collect.BiMap&text=BiMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "entryPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super java.util.Map.Entry?alt=? super java.util.Map.Entry&text=Entry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public static BiMap<K,V> <K,V>filterEntries(BiMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.BiMap?alt=com.azure.cosmos.implementation.guava25.collect.BiMap&text=BiMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(java.util.Map<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(Map<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  name: "<K,V>filterEntries(Map<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  nameWithType: "Maps.<K,V>filterEntries(Map<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  summary: "Returns a map containing the mappings in `unfiltered` that satisfy a predicate. The returned map is a live view of `unfiltered`; changes to one affect the other.\n\nThe resulting map's `keySet()`, `entrySet()`, and `values()` views have iterators that don't support `remove()`, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's `put()` and `putAll()` methods throw an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref>. Similarly, the map's entries have a <xref uid=\"? super java.util.Map.Entry.setValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Entry#setValue\"></xref> method that throws an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> when the existing key and the provided value don't satisfy the predicate.\n\nWhen methods such as `removeAll()` and `clear()` are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map.\n\nThe returned map isn't threadsafe or serializable, even if `unfiltered` is.\n\nMany of the filtered map's methods, such as `size()`, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is *not* needed, it may be faster to copy the filtered map and use the copy.\n\n**Warning:** `entryPredicate` must be *consistent with equals*, as documented at <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate.apply\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate#apply\"></xref>."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "entryPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super java.util.Map.Entry?alt=? super java.util.Map.Entry&text=Entry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public static Map<K,V> <K,V>filterEntries(Map<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  returns:
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(java.util.NavigableMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(NavigableMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  name: "<K,V>filterEntries(NavigableMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  nameWithType: "Maps.<K,V>filterEntries(NavigableMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  summary: "Returns a sorted map containing the mappings in `unfiltered` that satisfy a predicate. The returned map is a live view of `unfiltered`; changes to one affect the other.\n\nThe resulting map's `keySet()`, `entrySet()`, and `values()` views have iterators that don't support `remove()`, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's `put()` and `putAll()` methods throw an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref>. Similarly, the map's entries have a <xref uid=\"? super java.util.Map.Entry.setValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Entry#setValue\"></xref> method that throws an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> when the existing key and the provided value don't satisfy the predicate.\n\nWhen methods such as `removeAll()` and `clear()` are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map.\n\nThe returned map isn't threadsafe or serializable, even if `unfiltered` is.\n\nMany of the filtered map's methods, such as `size()`, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is *not* needed, it may be faster to copy the filtered map and use the copy.\n\n**Warning:** `entryPredicate` must be *consistent with equals*, as documented at <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate.apply\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate#apply\"></xref>."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "entryPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super java.util.Map.Entry?alt=? super java.util.Map.Entry&text=Entry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public static NavigableMap<K,V> <K,V>filterEntries(NavigableMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  returns:
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(java.util.SortedMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super java.util.Map.Entry<K,V>>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterEntries(SortedMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  name: "<K,V>filterEntries(SortedMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  nameWithType: "Maps.<K,V>filterEntries(SortedMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  summary: "Returns a sorted map containing the mappings in `unfiltered` that satisfy a predicate. The returned map is a live view of `unfiltered`; changes to one affect the other.\n\nThe resulting map's `keySet()`, `entrySet()`, and `values()` views have iterators that don't support `remove()`, but all other methods are supported by the map and its views. When given a key/value pair that doesn't satisfy the predicate, the map's `put()` and `putAll()` methods throw an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref>. Similarly, the map's entries have a <xref uid=\"? super java.util.Map.Entry.setValue\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Entry#setValue\"></xref> method that throws an <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"IllegalArgumentException\"></xref> when the existing key and the provided value don't satisfy the predicate.\n\nWhen methods such as `removeAll()` and `clear()` are called on the filtered map or its views, only mappings that satisfy the filter will be removed from the underlying map.\n\nThe returned map isn't threadsafe or serializable, even if `unfiltered` is.\n\nMany of the filtered map's methods, such as `size()`, iterate across every key/value mapping in the underlying map and determine which satisfy the filter. When a live view is *not* needed, it may be faster to copy the filtered map and use the copy.\n\n**Warning:** `entryPredicate` must be *consistent with equals*, as documented at <xref uid=\"com.azure.cosmos.implementation.guava25.base.Predicate.apply\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Predicate#apply\"></xref>."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "entryPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super java.util.Map.Entry?alt=? super java.util.Map.Entry&text=Entry\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
  syntax: "public static SortedMap<K,V> <K,V>filterEntries(SortedMap<K,V> unfiltered, Predicate<? super Map.Entry<K,V>> entryPredicate)"
  returns:
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
