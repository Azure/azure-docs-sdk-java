### YamlMime:JavaType
uid: "com.fasterxml.jackson.core.util.InternCache"
fullName: "com.fasterxml.jackson.core.util.InternCache"
name: "InternCache"
nameWithType: "InternCache"
summary: "Singleton class that adds a simple first-level cache in front of regular String.intern() functionality. This is done as a minor performance optimization, to avoid calling native intern() method in cases where same String is being interned multiple times.\n\nNote: that this class extends <xref uid=\"java.util.LinkedHashMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LinkedHashMap\"></xref> is an implementation detail -- no code should ever directly call Map methods."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.AbstractMap\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.util.concurrent.ConcurrentHashMap\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
- "java.util.AbstractMap.clone()"
- "java.util.concurrent.ConcurrentHashMap.<K>newKeySet()"
- "java.util.concurrent.ConcurrentHashMap.<K>newKeySet(int)"
- "java.util.concurrent.ConcurrentHashMap.<U>forEach(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.Consumer<? super U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>forEachEntry(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.Consumer<? super U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>forEachKey(long,java.util.function.Function<? super K,? extends U>,java.util.function.Consumer<? super U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>forEachValue(long,java.util.function.Function<? super V,? extends U>,java.util.function.Consumer<? super U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>reduce(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>reduceEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>reduceKeys(long,java.util.function.Function<? super K,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>reduceValues(long,java.util.function.Function<? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>search(long,java.util.function.BiFunction<? super K,? super V,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>searchEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>searchKeys(long,java.util.function.Function<? super K,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.<U>searchValues(long,java.util.function.Function<? super V,? extends U>)"
- "java.util.concurrent.ConcurrentHashMap.clear()"
- "java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.elements()"
- "java.util.concurrent.ConcurrentHashMap.entrySet()"
- "java.util.concurrent.ConcurrentHashMap.equals(java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)"
- "java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer<? super K,? super V>)"
- "java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super java.util.Map.Entry<K,V>>)"
- "java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super K>)"
- "java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super V>)"
- "java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,V)"
- "java.util.concurrent.ConcurrentHashMap.hashCode()"
- "java.util.concurrent.ConcurrentHashMap.isEmpty()"
- "java.util.concurrent.ConcurrentHashMap.keySet()"
- "java.util.concurrent.ConcurrentHashMap.keySet(V)"
- "java.util.concurrent.ConcurrentHashMap.keys()"
- "java.util.concurrent.ConcurrentHashMap.mappingCount()"
- "java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.put(K,V)"
- "java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends K,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)"
- "java.util.concurrent.ConcurrentHashMap.reduceEntries(long,java.util.function.BiFunction<java.util.Map.Entry<K,V>,java.util.Map.Entry<K,V>,? extends java.util.Map.Entry<K,V>>)"
- "java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,java.util.function.ToDoubleFunction<java.util.Map.Entry<K,V>>,double,java.util.function.DoubleBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,java.util.function.ToIntFunction<java.util.Map.Entry<K,V>>,int,java.util.function.IntBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,java.util.function.ToLongFunction<java.util.Map.Entry<K,V>>,long,java.util.function.LongBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super K,? super K,? extends K>)"
- "java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super K>,double,java.util.function.DoubleBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super K>,int,java.util.function.IntBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super K>,long,java.util.function.LongBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction<? super K,? super V>,double,java.util.function.DoubleBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction<? super K,? super V>,int,java.util.function.IntBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction<? super K,? super V>,long,java.util.function.LongBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super V,? super V,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super V>,double,java.util.function.DoubleBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super V>,int,java.util.function.IntBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super V>,long,java.util.function.LongBinaryOperator)"
- "java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)"
- "java.util.concurrent.ConcurrentHashMap.replace(K,V)"
- "java.util.concurrent.ConcurrentHashMap.replace(K,V,V)"
- "java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)"
- "java.util.concurrent.ConcurrentHashMap.size()"
- "java.util.concurrent.ConcurrentHashMap.toString()"
- "java.util.concurrent.ConcurrentHashMap.values()"
syntax: "public final class InternCache extends ConcurrentHashMap<String,String>"
fields:
- "com.fasterxml.jackson.core.util.InternCache.instance"
methods:
- "com.fasterxml.jackson.core.util.InternCache.intern(java.lang.String)"
type: "class"
metadata: {}
package: "com.fasterxml.jackson.core.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
