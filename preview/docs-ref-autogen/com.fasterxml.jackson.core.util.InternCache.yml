### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.util.InternCache
  id: InternCache
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util
  children:
  - com.fasterxml.jackson.core.util.InternCache.instance
  - com.fasterxml.jackson.core.util.InternCache.intern(java.lang.String)
  langs:
  - java
  name: InternCache
  nameWithType: InternCache
  fullName: com.fasterxml.jackson.core.util.InternCache
  type: Class
  package: com.fasterxml.jackson.core.util
  summary: >-
    Singleton class that adds a simple first-level cache in front of regular String.intern() functionality. This is done as a minor performance optimization, to avoid calling native intern() method in cases where same String is being interned multiple times.


    Note: that this class extends <xref uid="java.util.LinkedHashMap" data-throw-if-not-resolved="false">LinkedHashMap</xref> is an implementation detail -- no code should ever directly call Map methods.
  syntax:
    content: public final class InternCache extends ConcurrentHashMap<String,String>
  inheritance:
  - java.lang.Object
  - java.util.AbstractMap
  - java.util.concurrent.ConcurrentHashMap
  inheritedMembers:
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractMap.clone()
  - java.util.concurrent.ConcurrentHashMap.<K>newKeySet()
  - java.util.concurrent.ConcurrentHashMap.<K>newKeySet(int)
  - java.util.concurrent.ConcurrentHashMap.<U>forEach(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.Consumer<? super U>)
  - java.util.concurrent.ConcurrentHashMap.<U>forEachEntry(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.Consumer<? super U>)
  - java.util.concurrent.ConcurrentHashMap.<U>forEachKey(long,java.util.function.Function<? super K,? extends U>,java.util.function.Consumer<? super U>)
  - java.util.concurrent.ConcurrentHashMap.<U>forEachValue(long,java.util.function.Function<? super V,? extends U>,java.util.function.Consumer<? super U>)
  - java.util.concurrent.ConcurrentHashMap.<U>reduce(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>reduceEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>reduceKeys(long,java.util.function.Function<? super K,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>reduceValues(long,java.util.function.Function<? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>search(long,java.util.function.BiFunction<? super K,? super V,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>searchEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>searchKeys(long,java.util.function.Function<? super K,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.<U>searchValues(long,java.util.function.Function<? super V,? extends U>)
  - java.util.concurrent.ConcurrentHashMap.clear()
  - java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.elements()
  - java.util.concurrent.ConcurrentHashMap.entrySet()
  - java.util.concurrent.ConcurrentHashMap.equals(java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  - java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer<? super K,? super V>)
  - java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super java.util.Map.Entry<K,V>>)
  - java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super K>)
  - java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super V>)
  - java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,V)
  - java.util.concurrent.ConcurrentHashMap.hashCode()
  - java.util.concurrent.ConcurrentHashMap.isEmpty()
  - java.util.concurrent.ConcurrentHashMap.keySet()
  - java.util.concurrent.ConcurrentHashMap.keySet(V)
  - java.util.concurrent.ConcurrentHashMap.keys()
  - java.util.concurrent.ConcurrentHashMap.mappingCount()
  - java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.put(K,V)
  - java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends K,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)
  - java.util.concurrent.ConcurrentHashMap.reduceEntries(long,java.util.function.BiFunction<java.util.Map.Entry<K,V>,java.util.Map.Entry<K,V>,? extends java.util.Map.Entry<K,V>>)
  - java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,java.util.function.ToDoubleFunction<java.util.Map.Entry<K,V>>,double,java.util.function.DoubleBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,java.util.function.ToIntFunction<java.util.Map.Entry<K,V>>,int,java.util.function.IntBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,java.util.function.ToLongFunction<java.util.Map.Entry<K,V>>,long,java.util.function.LongBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super K,? super K,? extends K>)
  - java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super K>,double,java.util.function.DoubleBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super K>,int,java.util.function.IntBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super K>,long,java.util.function.LongBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction<? super K,? super V>,double,java.util.function.DoubleBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction<? super K,? super V>,int,java.util.function.IntBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction<? super K,? super V>,long,java.util.function.LongBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super V,? super V,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super V>,double,java.util.function.DoubleBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super V>,int,java.util.function.IntBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super V>,long,java.util.function.LongBinaryOperator)
  - java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)
  - java.util.concurrent.ConcurrentHashMap.replace(K,V)
  - java.util.concurrent.ConcurrentHashMap.replace(K,V,V)
  - java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  - java.util.concurrent.ConcurrentHashMap.size()
  - java.util.concurrent.ConcurrentHashMap.toString()
  - java.util.concurrent.ConcurrentHashMap.values()
- uid: com.fasterxml.jackson.core.util.InternCache.InternCache()
  id: InternCache()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.InternCache
  langs:
  - java
  name: InternCache()
  nameWithType: InternCache.InternCache()
  fullName: com.fasterxml.jackson.core.util.InternCache.InternCache()
  overload: com.fasterxml.jackson.core.util.InternCache.InternCache*
  type: Constructor
  package: com.fasterxml.jackson.core.util
  syntax:
    content: private InternCache()
- uid: com.fasterxml.jackson.core.util.InternCache.instance
  id: instance
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.InternCache
  langs:
  - java
  name: instance
  nameWithType: InternCache.instance
  fullName: com.fasterxml.jackson.core.util.InternCache.instance
  type: Field
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public static final InternCache instance
    return:
      type: com.fasterxml.jackson.core.util.InternCache
- uid: com.fasterxml.jackson.core.util.InternCache.intern(java.lang.String)
  id: intern(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.util.InternCache
  langs:
  - java
  name: intern(String input)
  nameWithType: InternCache.intern(String input)
  fullName: com.fasterxml.jackson.core.util.InternCache.intern(String input)
  overload: com.fasterxml.jackson.core.util.InternCache.intern*
  type: Method
  package: com.fasterxml.jackson.core.util
  syntax:
    content: public String intern(String input)
    parameters:
    - id: input
      type: java.lang.String
    return:
      type: java.lang.String
references:
- uid: com.fasterxml.jackson.core.util.InternCache.InternCache*
  name: InternCache
  nameWithType: InternCache.InternCache
  fullName: com.fasterxml.jackson.core.util.InternCache.InternCache
  package: com.fasterxml.jackson.core.util
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.util.InternCache.intern*
  name: intern
  nameWithType: InternCache.intern
  fullName: com.fasterxml.jackson.core.util.InternCache.intern
  package: com.fasterxml.jackson.core.util
- uid: java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String>
  name: ConcurrentHashMap<String,String>
  nameWithType: ConcurrentHashMap<String,String>
  fullName: java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String>
- uid: java.util.concurrent.ConcurrentHashMap.size()
  name: ConcurrentHashMap.size()
  nameWithType: ConcurrentHashMap.size()
  fullName: java.util.concurrent.ConcurrentHashMap.size()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.util.concurrent.ConcurrentHashMap.keySet(V)
  name: ConcurrentHashMap.keySet(V)
  nameWithType: ConcurrentHashMap.keySet(V)
  fullName: java.util.concurrent.ConcurrentHashMap.keySet(V)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer<? super K,? super V>)
  name: ConcurrentHashMap.forEach(long,BiConsumer<? super K,? super V>)
  nameWithType: ConcurrentHashMap.forEach(long,BiConsumer<? super K,? super V>)
  fullName: java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer<? super K,? super V>)
- uid: java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
  name: ConcurrentHashMap.computeIfAbsent(K,Function<? super K,? extends V>)
  nameWithType: ConcurrentHashMap.computeIfAbsent(K,Function<? super K,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function<? super K,? extends V>)
- uid: java.util.concurrent.ConcurrentHashMap.mappingCount()
  name: ConcurrentHashMap.mappingCount()
  nameWithType: ConcurrentHashMap.mappingCount()
  fullName: java.util.concurrent.ConcurrentHashMap.mappingCount()
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,java.util.function.ToLongFunction<java.util.Map.Entry<K,V>>,long,java.util.function.LongBinaryOperator)
  name: ConcurrentHashMap.reduceEntriesToLong(long,ToLongFunction<Map.Entry<K,V>>,long,LongBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceEntriesToLong(long,ToLongFunction<Map.Entry<K,V>>,long,LongBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,java.util.function.ToLongFunction<java.util.Map.Entry<K,V>>,long,java.util.function.LongBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
  name: ConcurrentHashMap.get(Object)
  nameWithType: ConcurrentHashMap.get(Object)
  fullName: java.util.concurrent.ConcurrentHashMap.get(java.lang.Object)
- uid: java.util.concurrent.ConcurrentHashMap.<U>forEach(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.Consumer<? super U>)
  name: ConcurrentHashMap.<U>forEach(long,BiFunction<? super K,? super V,? extends U>,Consumer<? super U>)
  nameWithType: ConcurrentHashMap.<U>forEach(long,BiFunction<? super K,? super V,? extends U>,Consumer<? super U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>forEach(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.Consumer<? super U>)
- uid: java.util.concurrent.ConcurrentHashMap.<U>forEachValue(long,java.util.function.Function<? super V,? extends U>,java.util.function.Consumer<? super U>)
  name: ConcurrentHashMap.<U>forEachValue(long,Function<? super V,? extends U>,Consumer<? super U>)
  nameWithType: ConcurrentHashMap.<U>forEachValue(long,Function<? super V,? extends U>,Consumer<? super U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>forEachValue(long,java.util.function.Function<? super V,? extends U>,java.util.function.Consumer<? super U>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super V,? super V,? extends V>)
  name: ConcurrentHashMap.reduceValues(long,BiFunction<? super V,? super V,? extends V>)
  nameWithType: ConcurrentHashMap.reduceValues(long,BiFunction<? super V,? super V,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction<? super V,? super V,? extends V>)
- uid: java.util.concurrent.ConcurrentHashMap.clear()
  name: ConcurrentHashMap.clear()
  nameWithType: ConcurrentHashMap.clear()
  fullName: java.util.concurrent.ConcurrentHashMap.clear()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super K>,double,java.util.function.DoubleBinaryOperator)
  name: ConcurrentHashMap.reduceKeysToDouble(long,ToDoubleFunction<? super K>,double,DoubleBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceKeysToDouble(long,ToDoubleFunction<? super K>,double,DoubleBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction<? super K>,double,java.util.function.DoubleBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,V)
  name: ConcurrentHashMap.getOrDefault(Object,V)
  nameWithType: ConcurrentHashMap.getOrDefault(Object,V)
  fullName: java.util.concurrent.ConcurrentHashMap.getOrDefault(java.lang.Object,V)
- uid: java.util.concurrent.ConcurrentHashMap.equals(java.lang.Object)
  name: ConcurrentHashMap.equals(Object)
  nameWithType: ConcurrentHashMap.equals(Object)
  fullName: java.util.concurrent.ConcurrentHashMap.equals(java.lang.Object)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super V>,double,java.util.function.DoubleBinaryOperator)
  name: ConcurrentHashMap.reduceValuesToDouble(long,ToDoubleFunction<? super V>,double,DoubleBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceValuesToDouble(long,ToDoubleFunction<? super V>,double,DoubleBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction<? super V>,double,java.util.function.DoubleBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,java.util.function.ToDoubleFunction<java.util.Map.Entry<K,V>>,double,java.util.function.DoubleBinaryOperator)
  name: ConcurrentHashMap.reduceEntriesToDouble(long,ToDoubleFunction<Map.Entry<K,V>>,double,DoubleBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceEntriesToDouble(long,ToDoubleFunction<Map.Entry<K,V>>,double,DoubleBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,java.util.function.ToDoubleFunction<java.util.Map.Entry<K,V>>,double,java.util.function.DoubleBinaryOperator)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.concurrent.ConcurrentHashMap.toString()
  name: ConcurrentHashMap.toString()
  nameWithType: ConcurrentHashMap.toString()
  fullName: java.util.concurrent.ConcurrentHashMap.toString()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.util.concurrent.ConcurrentHashMap.elements()
  name: ConcurrentHashMap.elements()
  nameWithType: ConcurrentHashMap.elements()
  fullName: java.util.concurrent.ConcurrentHashMap.elements()
- uid: java.util.concurrent.ConcurrentHashMap.entrySet()
  name: ConcurrentHashMap.entrySet()
  nameWithType: ConcurrentHashMap.entrySet()
  fullName: java.util.concurrent.ConcurrentHashMap.entrySet()
- uid: java.util.concurrent.ConcurrentHashMap.values()
  name: ConcurrentHashMap.values()
  nameWithType: ConcurrentHashMap.values()
  fullName: java.util.concurrent.ConcurrentHashMap.values()
- uid: java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ConcurrentHashMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: ConcurrentHashMap.compute(K,BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.AbstractMap.clone()
  name: AbstractMap.clone()
  nameWithType: AbstractMap.clone()
  fullName: java.util.AbstractMap.clone()
- uid: java.util.concurrent.ConcurrentHashMap.put(K,V)
  name: ConcurrentHashMap.put(K,V)
  nameWithType: ConcurrentHashMap.put(K,V)
  fullName: java.util.concurrent.ConcurrentHashMap.put(K,V)
- uid: java.util.concurrent.ConcurrentHashMap.<U>searchKeys(long,java.util.function.Function<? super K,? extends U>)
  name: ConcurrentHashMap.<U>searchKeys(long,Function<? super K,? extends U>)
  nameWithType: ConcurrentHashMap.<U>searchKeys(long,Function<? super K,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>searchKeys(long,java.util.function.Function<? super K,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.keys()
  name: ConcurrentHashMap.keys()
  nameWithType: ConcurrentHashMap.keys()
  fullName: java.util.concurrent.ConcurrentHashMap.keys()
- uid: java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)
  name: ConcurrentHashMap.putIfAbsent(K,V)
  nameWithType: ConcurrentHashMap.putIfAbsent(K,V)
  fullName: java.util.concurrent.ConcurrentHashMap.putIfAbsent(K,V)
- uid: java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)
  name: ConcurrentHashMap.containsKey(Object)
  nameWithType: ConcurrentHashMap.containsKey(Object)
  fullName: java.util.concurrent.ConcurrentHashMap.containsKey(java.lang.Object)
- uid: java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object)
  name: ConcurrentHashMap.containsValue(Object)
  nameWithType: ConcurrentHashMap.containsValue(Object)
  fullName: java.util.concurrent.ConcurrentHashMap.containsValue(java.lang.Object)
- uid: java.util.concurrent.ConcurrentHashMap.replace(K,V)
  name: ConcurrentHashMap.replace(K,V)
  nameWithType: ConcurrentHashMap.replace(K,V)
  fullName: java.util.concurrent.ConcurrentHashMap.replace(K,V)
- uid: java.util.concurrent.ConcurrentHashMap.<K>newKeySet(int)
  name: ConcurrentHashMap.<K>newKeySet(int)
  nameWithType: ConcurrentHashMap.<K>newKeySet(int)
  fullName: java.util.concurrent.ConcurrentHashMap.<K>newKeySet(int)
- uid: java.util.concurrent.ConcurrentHashMap.<U>searchValues(long,java.util.function.Function<? super V,? extends U>)
  name: ConcurrentHashMap.<U>searchValues(long,Function<? super V,? extends U>)
  nameWithType: ConcurrentHashMap.<U>searchValues(long,Function<? super V,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>searchValues(long,java.util.function.Function<? super V,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.<U>reduceEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  name: ConcurrentHashMap.<U>reduceEntries(long,Function<Map.Entry<K,V>,? extends U>,BiFunction<? super U,? super U,? extends U>)
  nameWithType: ConcurrentHashMap.<U>reduceEntries(long,Function<Map.Entry<K,V>,? extends U>,BiFunction<? super U,? super U,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>reduceEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.<U>forEachKey(long,java.util.function.Function<? super K,? extends U>,java.util.function.Consumer<? super U>)
  name: ConcurrentHashMap.<U>forEachKey(long,Function<? super K,? extends U>,Consumer<? super U>)
  nameWithType: ConcurrentHashMap.<U>forEachKey(long,Function<? super K,? extends U>,Consumer<? super U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>forEachKey(long,java.util.function.Function<? super K,? extends U>,java.util.function.Consumer<? super U>)
- uid: java.util.concurrent.ConcurrentHashMap.keySet()
  name: ConcurrentHashMap.keySet()
  nameWithType: ConcurrentHashMap.keySet()
  fullName: java.util.concurrent.ConcurrentHashMap.keySet()
- uid: java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends K,? extends V>)
  name: ConcurrentHashMap.putAll(Map<? extends K,? extends V>)
  nameWithType: ConcurrentHashMap.putAll(Map<? extends K,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map<? extends K,? extends V>)
- uid: java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
  name: ConcurrentHashMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  nameWithType: ConcurrentHashMap.merge(K,V,BiFunction<? super V,? super V,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction<? super V,? super V,? extends V>)
- uid: java.util.concurrent.ConcurrentHashMap.<K>newKeySet()
  name: ConcurrentHashMap.<K>newKeySet()
  nameWithType: ConcurrentHashMap.<K>newKeySet()
  fullName: java.util.concurrent.ConcurrentHashMap.<K>newKeySet()
- uid: java.util.concurrent.ConcurrentHashMap.<U>search(long,java.util.function.BiFunction<? super K,? super V,? extends U>)
  name: ConcurrentHashMap.<U>search(long,BiFunction<? super K,? super V,? extends U>)
  nameWithType: ConcurrentHashMap.<U>search(long,BiFunction<? super K,? super V,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>search(long,java.util.function.BiFunction<? super K,? super V,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)
  name: ConcurrentHashMap.remove(Object)
  nameWithType: ConcurrentHashMap.remove(Object)
  fullName: java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object)
- uid: java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ConcurrentHashMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  nameWithType: ConcurrentHashMap.computeIfPresent(K,BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.concurrent.ConcurrentHashMap.<U>reduceKeys(long,java.util.function.Function<? super K,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  name: ConcurrentHashMap.<U>reduceKeys(long,Function<? super K,? extends U>,BiFunction<? super U,? super U,? extends U>)
  nameWithType: ConcurrentHashMap.<U>reduceKeys(long,Function<? super K,? extends U>,BiFunction<? super U,? super U,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>reduceKeys(long,java.util.function.Function<? super K,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
  name: ConcurrentHashMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  nameWithType: ConcurrentHashMap.replaceAll(BiFunction<? super K,? super V,? extends V>)
  fullName: java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction<? super K,? super V,? extends V>)
- uid: java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super K>)
  name: ConcurrentHashMap.forEachKey(long,Consumer<? super K>)
  nameWithType: ConcurrentHashMap.forEachKey(long,Consumer<? super K>)
  fullName: java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer<? super K>)
- uid: java.util.concurrent.ConcurrentHashMap.<U>reduceValues(long,java.util.function.Function<? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  name: ConcurrentHashMap.<U>reduceValues(long,Function<? super V,? extends U>,BiFunction<? super U,? super U,? extends U>)
  nameWithType: ConcurrentHashMap.<U>reduceValues(long,Function<? super V,? extends U>,BiFunction<? super U,? super U,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>reduceValues(long,java.util.function.Function<? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)
  name: ConcurrentHashMap.remove(Object,Object)
  nameWithType: ConcurrentHashMap.remove(Object,Object)
  fullName: java.util.concurrent.ConcurrentHashMap.remove(java.lang.Object,java.lang.Object)
- uid: java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super java.util.Map.Entry<K,V>>)
  name: ConcurrentHashMap.forEachEntry(long,Consumer<? super Map.Entry<K,V>>)
  nameWithType: ConcurrentHashMap.forEachEntry(long,Consumer<? super Map.Entry<K,V>>)
  fullName: java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer<? super java.util.Map.Entry<K,V>>)
- uid: java.util.concurrent.ConcurrentHashMap.<U>reduce(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
  name: ConcurrentHashMap.<U>reduce(long,BiFunction<? super K,? super V,? extends U>,BiFunction<? super U,? super U,? extends U>)
  nameWithType: ConcurrentHashMap.<U>reduce(long,BiFunction<? super K,? super V,? extends U>,BiFunction<? super U,? super U,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>reduce(long,java.util.function.BiFunction<? super K,? super V,? extends U>,java.util.function.BiFunction<? super U,? super U,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction<? super K,? super V>,double,java.util.function.DoubleBinaryOperator)
  name: ConcurrentHashMap.reduceToDouble(long,ToDoubleBiFunction<? super K,? super V>,double,DoubleBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceToDouble(long,ToDoubleBiFunction<? super K,? super V>,double,DoubleBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction<? super K,? super V>,double,java.util.function.DoubleBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.replace(K,V,V)
  name: ConcurrentHashMap.replace(K,V,V)
  nameWithType: ConcurrentHashMap.replace(K,V,V)
  fullName: java.util.concurrent.ConcurrentHashMap.replace(K,V,V)
- uid: java.util.concurrent.ConcurrentHashMap.<U>searchEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>)
  name: ConcurrentHashMap.<U>searchEntries(long,Function<Map.Entry<K,V>,? extends U>)
  nameWithType: ConcurrentHashMap.<U>searchEntries(long,Function<Map.Entry<K,V>,? extends U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>searchEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super K,? super K,? extends K>)
  name: ConcurrentHashMap.reduceKeys(long,BiFunction<? super K,? super K,? extends K>)
  nameWithType: ConcurrentHashMap.reduceKeys(long,BiFunction<? super K,? super K,? extends K>)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction<? super K,? super K,? extends K>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction<? super K,? super V>,int,java.util.function.IntBinaryOperator)
  name: ConcurrentHashMap.reduceToInt(long,ToIntBiFunction<? super K,? super V>,int,IntBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceToInt(long,ToIntBiFunction<? super K,? super V>,int,IntBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction<? super K,? super V>,int,java.util.function.IntBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction<? super K,? super V>,long,java.util.function.LongBinaryOperator)
  name: ConcurrentHashMap.reduceToLong(long,ToLongBiFunction<? super K,? super V>,long,LongBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceToLong(long,ToLongBiFunction<? super K,? super V>,long,LongBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction<? super K,? super V>,long,java.util.function.LongBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object)
  name: ConcurrentHashMap.contains(Object)
  nameWithType: ConcurrentHashMap.contains(Object)
  fullName: java.util.concurrent.ConcurrentHashMap.contains(java.lang.Object)
- uid: java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super V>,long,java.util.function.LongBinaryOperator)
  name: ConcurrentHashMap.reduceValuesToLong(long,ToLongFunction<? super V>,long,LongBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceValuesToLong(long,ToLongFunction<? super V>,long,LongBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction<? super V>,long,java.util.function.LongBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.hashCode()
  name: ConcurrentHashMap.hashCode()
  nameWithType: ConcurrentHashMap.hashCode()
  fullName: java.util.concurrent.ConcurrentHashMap.hashCode()
- uid: java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
  name: ConcurrentHashMap.forEach(BiConsumer<? super K,? super V>)
  nameWithType: ConcurrentHashMap.forEach(BiConsumer<? super K,? super V>)
  fullName: java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer<? super K,? super V>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,java.util.function.ToIntFunction<java.util.Map.Entry<K,V>>,int,java.util.function.IntBinaryOperator)
  name: ConcurrentHashMap.reduceEntriesToInt(long,ToIntFunction<Map.Entry<K,V>>,int,IntBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceEntriesToInt(long,ToIntFunction<Map.Entry<K,V>>,int,IntBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,java.util.function.ToIntFunction<java.util.Map.Entry<K,V>>,int,java.util.function.IntBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.<U>forEachEntry(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.Consumer<? super U>)
  name: ConcurrentHashMap.<U>forEachEntry(long,Function<Map.Entry<K,V>,? extends U>,Consumer<? super U>)
  nameWithType: ConcurrentHashMap.<U>forEachEntry(long,Function<Map.Entry<K,V>,? extends U>,Consumer<? super U>)
  fullName: java.util.concurrent.ConcurrentHashMap.<U>forEachEntry(long,java.util.function.Function<java.util.Map.Entry<K,V>,? extends U>,java.util.function.Consumer<? super U>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super K>,long,java.util.function.LongBinaryOperator)
  name: ConcurrentHashMap.reduceKeysToLong(long,ToLongFunction<? super K>,long,LongBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceKeysToLong(long,ToLongFunction<? super K>,long,LongBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction<? super K>,long,java.util.function.LongBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super K>,int,java.util.function.IntBinaryOperator)
  name: ConcurrentHashMap.reduceKeysToInt(long,ToIntFunction<? super K>,int,IntBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceKeysToInt(long,ToIntFunction<? super K>,int,IntBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction<? super K>,int,java.util.function.IntBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntries(long,java.util.function.BiFunction<java.util.Map.Entry<K,V>,java.util.Map.Entry<K,V>,? extends java.util.Map.Entry<K,V>>)
  name: ConcurrentHashMap.reduceEntries(long,BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>>)
  nameWithType: ConcurrentHashMap.reduceEntries(long,BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>>)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntries(long,java.util.function.BiFunction<java.util.Map.Entry<K,V>,java.util.Map.Entry<K,V>,? extends java.util.Map.Entry<K,V>>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super V>,int,java.util.function.IntBinaryOperator)
  name: ConcurrentHashMap.reduceValuesToInt(long,ToIntFunction<? super V>,int,IntBinaryOperator)
  nameWithType: ConcurrentHashMap.reduceValuesToInt(long,ToIntFunction<? super V>,int,IntBinaryOperator)
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction<? super V>,int,java.util.function.IntBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super V>)
  name: ConcurrentHashMap.forEachValue(long,Consumer<? super V>)
  nameWithType: ConcurrentHashMap.forEachValue(long,Consumer<? super V>)
  fullName: java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer<? super V>)
- uid: java.util.concurrent.ConcurrentHashMap.isEmpty()
  name: ConcurrentHashMap.isEmpty()
  nameWithType: ConcurrentHashMap.isEmpty()
  fullName: java.util.concurrent.ConcurrentHashMap.isEmpty()
- uid: java.util.concurrent.ConcurrentHashMap
  name: ConcurrentHashMap
  nameWithType: ConcurrentHashMap
  fullName: java.util.concurrent.ConcurrentHashMap
- uid: java.lang.String,java.lang.String
  name: String,String
  nameWithType: String,String
  fullName: java.lang.String,java.lang.String
- uid: '? super K,? super V>)'
  name: '? super K,? super V>)'
  nameWithType: '? super K,? super V>)'
  fullName: '? super K,? super V>)'
- uid: java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer
  name: ConcurrentHashMap.forEach(long,BiConsumer
  nameWithType: ConcurrentHashMap.forEach(long,BiConsumer
  fullName: java.util.concurrent.ConcurrentHashMap.forEach(long,java.util.function.BiConsumer
- uid: '? super K,? extends V>)'
  name: '? super K,? extends V>)'
  nameWithType: '? super K,? extends V>)'
  fullName: '? super K,? extends V>)'
- uid: java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function
  name: ConcurrentHashMap.computeIfAbsent(K,Function
  nameWithType: ConcurrentHashMap.computeIfAbsent(K,Function
  fullName: java.util.concurrent.ConcurrentHashMap.computeIfAbsent(K,java.util.function.Function
- uid: java.util.Map.Entry
  name: Map.Entry
  nameWithType: Map.Entry
  fullName: java.util.Map.Entry
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,java.util.function.ToLongFunction
  name: ConcurrentHashMap.reduceEntriesToLong(long,ToLongFunction
  nameWithType: ConcurrentHashMap.reduceEntriesToLong(long,ToLongFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntriesToLong(long,java.util.function.ToLongFunction
- uid: K,V>>,long,java.util.function.LongBinaryOperator)
  name: K,V>>,long,LongBinaryOperator)
  nameWithType: K,V>>,long,LongBinaryOperator)
  fullName: K,V>>,long,java.util.function.LongBinaryOperator)
- uid: '? super K,? super V,? extends U>,java.util.function.Consumer'
  name: '? super K,? super V,? extends U>,Consumer'
  nameWithType: '? super K,? super V,? extends U>,Consumer'
  fullName: '? super K,? super V,? extends U>,java.util.function.Consumer'
- uid: java.util.concurrent.ConcurrentHashMap.
  name: ConcurrentHashMap.
  nameWithType: ConcurrentHashMap.
  fullName: java.util.concurrent.ConcurrentHashMap.
- uid: U>forEach(long,java.util.function.BiFunction
  name: U>forEach(long,BiFunction
  nameWithType: U>forEach(long,BiFunction
  fullName: U>forEach(long,java.util.function.BiFunction
- uid: '? super U>)'
  name: '? super U>)'
  nameWithType: '? super U>)'
  fullName: '? super U>)'
- uid: U>forEachValue(long,java.util.function.Function
  name: U>forEachValue(long,Function
  nameWithType: U>forEachValue(long,Function
  fullName: U>forEachValue(long,java.util.function.Function
- uid: '? super V,? extends U>,java.util.function.Consumer'
  name: '? super V,? extends U>,Consumer'
  nameWithType: '? super V,? extends U>,Consumer'
  fullName: '? super V,? extends U>,java.util.function.Consumer'
- uid: java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction
  name: ConcurrentHashMap.reduceValues(long,BiFunction
  nameWithType: ConcurrentHashMap.reduceValues(long,BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValues(long,java.util.function.BiFunction
- uid: '? super V,? super V,? extends V>)'
  name: '? super V,? super V,? extends V>)'
  nameWithType: '? super V,? super V,? extends V>)'
  fullName: '? super V,? super V,? extends V>)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction
  name: ConcurrentHashMap.reduceKeysToDouble(long,ToDoubleFunction
  nameWithType: ConcurrentHashMap.reduceKeysToDouble(long,ToDoubleFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeysToDouble(long,java.util.function.ToDoubleFunction
- uid: '? super K>,double,java.util.function.DoubleBinaryOperator)'
  name: '? super K>,double,DoubleBinaryOperator)'
  nameWithType: '? super K>,double,DoubleBinaryOperator)'
  fullName: '? super K>,double,java.util.function.DoubleBinaryOperator)'
- uid: '? super V>,double,java.util.function.DoubleBinaryOperator)'
  name: '? super V>,double,DoubleBinaryOperator)'
  nameWithType: '? super V>,double,DoubleBinaryOperator)'
  fullName: '? super V>,double,java.util.function.DoubleBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction
  name: ConcurrentHashMap.reduceValuesToDouble(long,ToDoubleFunction
  nameWithType: ConcurrentHashMap.reduceValuesToDouble(long,ToDoubleFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValuesToDouble(long,java.util.function.ToDoubleFunction
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,java.util.function.ToDoubleFunction
  name: ConcurrentHashMap.reduceEntriesToDouble(long,ToDoubleFunction
  nameWithType: ConcurrentHashMap.reduceEntriesToDouble(long,ToDoubleFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntriesToDouble(long,java.util.function.ToDoubleFunction
- uid: K,V>>,double,java.util.function.DoubleBinaryOperator)
  name: K,V>>,double,DoubleBinaryOperator)
  nameWithType: K,V>>,double,DoubleBinaryOperator)
  fullName: K,V>>,double,java.util.function.DoubleBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction
  name: ConcurrentHashMap.compute(K,BiFunction
  nameWithType: ConcurrentHashMap.compute(K,BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.compute(K,java.util.function.BiFunction
- uid: '? super K,? super V,? extends V>)'
  name: '? super K,? super V,? extends V>)'
  nameWithType: '? super K,? super V,? extends V>)'
  fullName: '? super K,? super V,? extends V>)'
- uid: U>searchKeys(long,java.util.function.Function
  name: U>searchKeys(long,Function
  nameWithType: U>searchKeys(long,Function
  fullName: U>searchKeys(long,java.util.function.Function
- uid: '? super K,? extends U>)'
  name: '? super K,? extends U>)'
  nameWithType: '? super K,? extends U>)'
  fullName: '? super K,? extends U>)'
- uid: K>newKeySet(int)
  name: K>newKeySet(int)
  nameWithType: K>newKeySet(int)
  fullName: K>newKeySet(int)
- uid: U>searchValues(long,java.util.function.Function
  name: U>searchValues(long,Function
  nameWithType: U>searchValues(long,Function
  fullName: U>searchValues(long,java.util.function.Function
- uid: '? super V,? extends U>)'
  name: '? super V,? extends U>)'
  nameWithType: '? super V,? extends U>)'
  fullName: '? super V,? extends U>)'
- uid: '? super U,? super U,? extends U>)'
  name: '? super U,? super U,? extends U>)'
  nameWithType: '? super U,? super U,? extends U>)'
  fullName: '? super U,? super U,? extends U>)'
- uid: U>reduceEntries(long,java.util.function.Function
  name: U>reduceEntries(long,Function
  nameWithType: U>reduceEntries(long,Function
  fullName: U>reduceEntries(long,java.util.function.Function
- uid: K,V>,? extends U>,java.util.function.BiFunction
  name: K,V>,? extends U>,BiFunction
  nameWithType: K,V>,? extends U>,BiFunction
  fullName: K,V>,? extends U>,java.util.function.BiFunction
- uid: U>forEachKey(long,java.util.function.Function
  name: U>forEachKey(long,Function
  nameWithType: U>forEachKey(long,Function
  fullName: U>forEachKey(long,java.util.function.Function
- uid: '? super K,? extends U>,java.util.function.Consumer'
  name: '? super K,? extends U>,Consumer'
  nameWithType: '? super K,? extends U>,Consumer'
  fullName: '? super K,? extends U>,java.util.function.Consumer'
- uid: java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map
  name: ConcurrentHashMap.putAll(Map
  nameWithType: ConcurrentHashMap.putAll(Map
  fullName: java.util.concurrent.ConcurrentHashMap.putAll(java.util.Map
- uid: '? extends K,? extends V>)'
  name: '? extends K,? extends V>)'
  nameWithType: '? extends K,? extends V>)'
  fullName: '? extends K,? extends V>)'
- uid: java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction
  name: ConcurrentHashMap.merge(K,V,BiFunction
  nameWithType: ConcurrentHashMap.merge(K,V,BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.merge(K,V,java.util.function.BiFunction
- uid: K>newKeySet()
  name: K>newKeySet()
  nameWithType: K>newKeySet()
  fullName: K>newKeySet()
- uid: '? super K,? super V,? extends U>)'
  name: '? super K,? super V,? extends U>)'
  nameWithType: '? super K,? super V,? extends U>)'
  fullName: '? super K,? super V,? extends U>)'
- uid: U>search(long,java.util.function.BiFunction
  name: U>search(long,BiFunction
  nameWithType: U>search(long,BiFunction
  fullName: U>search(long,java.util.function.BiFunction
- uid: java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction
  name: ConcurrentHashMap.computeIfPresent(K,BiFunction
  nameWithType: ConcurrentHashMap.computeIfPresent(K,BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.computeIfPresent(K,java.util.function.BiFunction
- uid: U>reduceKeys(long,java.util.function.Function
  name: U>reduceKeys(long,Function
  nameWithType: U>reduceKeys(long,Function
  fullName: U>reduceKeys(long,java.util.function.Function
- uid: '? super K,? extends U>,java.util.function.BiFunction'
  name: '? super K,? extends U>,BiFunction'
  nameWithType: '? super K,? extends U>,BiFunction'
  fullName: '? super K,? extends U>,java.util.function.BiFunction'
- uid: java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction
  name: ConcurrentHashMap.replaceAll(BiFunction
  nameWithType: ConcurrentHashMap.replaceAll(BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.replaceAll(java.util.function.BiFunction
- uid: java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer
  name: ConcurrentHashMap.forEachKey(long,Consumer
  nameWithType: ConcurrentHashMap.forEachKey(long,Consumer
  fullName: java.util.concurrent.ConcurrentHashMap.forEachKey(long,java.util.function.Consumer
- uid: '? super K>)'
  name: '? super K>)'
  nameWithType: '? super K>)'
  fullName: '? super K>)'
- uid: U>reduceValues(long,java.util.function.Function
  name: U>reduceValues(long,Function
  nameWithType: U>reduceValues(long,Function
  fullName: U>reduceValues(long,java.util.function.Function
- uid: '? super V,? extends U>,java.util.function.BiFunction'
  name: '? super V,? extends U>,BiFunction'
  nameWithType: '? super V,? extends U>,BiFunction'
  fullName: '? super V,? extends U>,java.util.function.BiFunction'
- uid: java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer
  name: ConcurrentHashMap.forEachEntry(long,Consumer
  nameWithType: ConcurrentHashMap.forEachEntry(long,Consumer
  fullName: java.util.concurrent.ConcurrentHashMap.forEachEntry(long,java.util.function.Consumer
- uid: '? super java.util.Map.Entry'
  name: '? super Map.Entry'
  nameWithType: '? super Map.Entry'
  fullName: '? super java.util.Map.Entry'
- uid: K,V>>)
  name: K,V>>)
  nameWithType: K,V>>)
  fullName: K,V>>)
- uid: '? super K,? super V,? extends U>,java.util.function.BiFunction'
  name: '? super K,? super V,? extends U>,BiFunction'
  nameWithType: '? super K,? super V,? extends U>,BiFunction'
  fullName: '? super K,? super V,? extends U>,java.util.function.BiFunction'
- uid: U>reduce(long,java.util.function.BiFunction
  name: U>reduce(long,BiFunction
  nameWithType: U>reduce(long,BiFunction
  fullName: U>reduce(long,java.util.function.BiFunction
- uid: java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction
  name: ConcurrentHashMap.reduceToDouble(long,ToDoubleBiFunction
  nameWithType: ConcurrentHashMap.reduceToDouble(long,ToDoubleBiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceToDouble(long,java.util.function.ToDoubleBiFunction
- uid: '? super K,? super V>,double,java.util.function.DoubleBinaryOperator)'
  name: '? super K,? super V>,double,DoubleBinaryOperator)'
  nameWithType: '? super K,? super V>,double,DoubleBinaryOperator)'
  fullName: '? super K,? super V>,double,java.util.function.DoubleBinaryOperator)'
- uid: U>searchEntries(long,java.util.function.Function
  name: U>searchEntries(long,Function
  nameWithType: U>searchEntries(long,Function
  fullName: U>searchEntries(long,java.util.function.Function
- uid: K,V>,? extends U>)
  name: K,V>,? extends U>)
  nameWithType: K,V>,? extends U>)
  fullName: K,V>,? extends U>)
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction
  name: ConcurrentHashMap.reduceKeys(long,BiFunction
  nameWithType: ConcurrentHashMap.reduceKeys(long,BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeys(long,java.util.function.BiFunction
- uid: '? super K,? super K,? extends K>)'
  name: '? super K,? super K,? extends K>)'
  nameWithType: '? super K,? super K,? extends K>)'
  fullName: '? super K,? super K,? extends K>)'
- uid: '? super K,? super V>,int,java.util.function.IntBinaryOperator)'
  name: '? super K,? super V>,int,IntBinaryOperator)'
  nameWithType: '? super K,? super V>,int,IntBinaryOperator)'
  fullName: '? super K,? super V>,int,java.util.function.IntBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction
  name: ConcurrentHashMap.reduceToInt(long,ToIntBiFunction
  nameWithType: ConcurrentHashMap.reduceToInt(long,ToIntBiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceToInt(long,java.util.function.ToIntBiFunction
- uid: '? super K,? super V>,long,java.util.function.LongBinaryOperator)'
  name: '? super K,? super V>,long,LongBinaryOperator)'
  nameWithType: '? super K,? super V>,long,LongBinaryOperator)'
  fullName: '? super K,? super V>,long,java.util.function.LongBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction
  name: ConcurrentHashMap.reduceToLong(long,ToLongBiFunction
  nameWithType: ConcurrentHashMap.reduceToLong(long,ToLongBiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceToLong(long,java.util.function.ToLongBiFunction
- uid: '? super V>,long,java.util.function.LongBinaryOperator)'
  name: '? super V>,long,LongBinaryOperator)'
  nameWithType: '? super V>,long,LongBinaryOperator)'
  fullName: '? super V>,long,java.util.function.LongBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction
  name: ConcurrentHashMap.reduceValuesToLong(long,ToLongFunction
  nameWithType: ConcurrentHashMap.reduceValuesToLong(long,ToLongFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValuesToLong(long,java.util.function.ToLongFunction
- uid: java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer
  name: ConcurrentHashMap.forEach(BiConsumer
  nameWithType: ConcurrentHashMap.forEach(BiConsumer
  fullName: java.util.concurrent.ConcurrentHashMap.forEach(java.util.function.BiConsumer
- uid: K,V>>,int,java.util.function.IntBinaryOperator)
  name: K,V>>,int,IntBinaryOperator)
  nameWithType: K,V>>,int,IntBinaryOperator)
  fullName: K,V>>,int,java.util.function.IntBinaryOperator)
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,java.util.function.ToIntFunction
  name: ConcurrentHashMap.reduceEntriesToInt(long,ToIntFunction
  nameWithType: ConcurrentHashMap.reduceEntriesToInt(long,ToIntFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntriesToInt(long,java.util.function.ToIntFunction
- uid: K,V>,? extends U>,java.util.function.Consumer
  name: K,V>,? extends U>,Consumer
  nameWithType: K,V>,? extends U>,Consumer
  fullName: K,V>,? extends U>,java.util.function.Consumer
- uid: U>forEachEntry(long,java.util.function.Function
  name: U>forEachEntry(long,Function
  nameWithType: U>forEachEntry(long,Function
  fullName: U>forEachEntry(long,java.util.function.Function
- uid: '? super K>,long,java.util.function.LongBinaryOperator)'
  name: '? super K>,long,LongBinaryOperator)'
  nameWithType: '? super K>,long,LongBinaryOperator)'
  fullName: '? super K>,long,java.util.function.LongBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction
  name: ConcurrentHashMap.reduceKeysToLong(long,ToLongFunction
  nameWithType: ConcurrentHashMap.reduceKeysToLong(long,ToLongFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeysToLong(long,java.util.function.ToLongFunction
- uid: '? super K>,int,java.util.function.IntBinaryOperator)'
  name: '? super K>,int,IntBinaryOperator)'
  nameWithType: '? super K>,int,IntBinaryOperator)'
  fullName: '? super K>,int,java.util.function.IntBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction
  name: ConcurrentHashMap.reduceKeysToInt(long,ToIntFunction
  nameWithType: ConcurrentHashMap.reduceKeysToInt(long,ToIntFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceKeysToInt(long,java.util.function.ToIntFunction
- uid: K,V>,java.util.Map.Entry
  name: K,V>,Map.Entry
  nameWithType: K,V>,Map.Entry
  fullName: K,V>,java.util.Map.Entry
- uid: K,V>,? extends java.util.Map.Entry
  name: K,V>,? extends Map.Entry
  nameWithType: K,V>,? extends Map.Entry
  fullName: K,V>,? extends java.util.Map.Entry
- uid: java.util.concurrent.ConcurrentHashMap.reduceEntries(long,java.util.function.BiFunction
  name: ConcurrentHashMap.reduceEntries(long,BiFunction
  nameWithType: ConcurrentHashMap.reduceEntries(long,BiFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceEntries(long,java.util.function.BiFunction
- uid: '? super V>,int,java.util.function.IntBinaryOperator)'
  name: '? super V>,int,IntBinaryOperator)'
  nameWithType: '? super V>,int,IntBinaryOperator)'
  fullName: '? super V>,int,java.util.function.IntBinaryOperator)'
- uid: java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction
  name: ConcurrentHashMap.reduceValuesToInt(long,ToIntFunction
  nameWithType: ConcurrentHashMap.reduceValuesToInt(long,ToIntFunction
  fullName: java.util.concurrent.ConcurrentHashMap.reduceValuesToInt(long,java.util.function.ToIntFunction
- uid: java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer
  name: ConcurrentHashMap.forEachValue(long,Consumer
  nameWithType: ConcurrentHashMap.forEachValue(long,Consumer
  fullName: java.util.concurrent.ConcurrentHashMap.forEachValue(long,java.util.function.Consumer
- uid: '? super V>)'
  name: '? super V>)'
  nameWithType: '? super V>)'
  fullName: '? super V>)'
