### YamlMime:JavaType
uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy"
fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy"
name: "ExtendedSqlPoolBlobAuditingPolicy"
nameWithType: "ExtendedSqlPoolBlobAuditingPolicy"
summary: "An immutable client-side representation of Extended<wbr>Sql<wbr>Pool<wbr>Blob<wbr>Auditing<wbr>Policy."
syntax: "public interface ExtendedSqlPoolBlobAuditingPolicy"
methods:
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.auditActionsAndGroups()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.auditActionsAndGroups()"
  name: "auditActionsAndGroups()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.auditActionsAndGroups()"
  summary: "Gets the audit<wbr>Actions<wbr>And<wbr>Groups property: Specifies the Actions-Groups and Actions to audit."
  modifiers:
  - "abstract"
  syntax: "public abstract List<String> auditActionsAndGroups()"
  desc: "Gets the auditActionsAndGroups property: Specifies the Actions-Groups and Actions to audit.\n\nThe recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:\n\nBATCH\\_COMPLETED\\_GROUP, SUCCESSFUL\\_DATABASE\\_AUTHENTICATION\\_GROUP, FAILED\\_DATABASE\\_AUTHENTICATION\\_GROUP.\n\nThis above combination is also the set that is configured by default when enabling auditing from the Azure portal.\n\nThe supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):\n\nAPPLICATION\\_ROLE\\_CHANGE\\_PASSWORD\\_GROUP BACKUP\\_RESTORE\\_GROUP DATABASE\\_LOGOUT\\_GROUP DATABASE\\_OBJECT\\_CHANGE\\_GROUP DATABASE\\_OBJECT\\_OWNERSHIP\\_CHANGE\\_GROUP DATABASE\\_OBJECT\\_PERMISSION\\_CHANGE\\_GROUP DATABASE\\_OPERATION\\_GROUP DATABASE\\_PERMISSION\\_CHANGE\\_GROUP DATABASE\\_PRINCIPAL\\_CHANGE\\_GROUP DATABASE\\_PRINCIPAL\\_IMPERSONATION\\_GROUP DATABASE\\_ROLE\\_MEMBER\\_CHANGE\\_GROUP FAILED\\_DATABASE\\_AUTHENTICATION\\_GROUP SCHEMA\\_OBJECT\\_ACCESS\\_GROUP SCHEMA\\_OBJECT\\_CHANGE\\_GROUP SCHEMA\\_OBJECT\\_OWNERSHIP\\_CHANGE\\_GROUP SCHEMA\\_OBJECT\\_PERMISSION\\_CHANGE\\_GROUP SUCCESSFUL\\_DATABASE\\_AUTHENTICATION\\_GROUP USER\\_CHANGE\\_PASSWORD\\_GROUP BATCH\\_STARTED\\_GROUP BATCH\\_COMPLETED\\_GROUP\n\nThese are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.\n\nFor more information, see \\[Database-Level Audit Action Groups\\](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions\\#database-level-audit-action-groups).\n\nFor Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are: SELECT UPDATE INSERT DELETE EXECUTE RECEIVE REFERENCES\n\nThe general form for defining an action to be audited is: \\{action\\} ON \\{object\\} BY \\{principal\\}\n\nNote that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::\\{db\\_name\\} and SCHEMA::\\{schema\\_name\\} are used, respectively.\n\nFor example: SELECT on dbo.myTable by public SELECT on DATABASE::myDatabase by public SELECT on SCHEMA::mySchema by public\n\nFor more information, see \\[Database-Level Audit Actions\\](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions\\#database-level-audit-actions)."
  returns:
    description: "the auditActionsAndGroups value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.id()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.id()"
  name: "id()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.id()"
  summary: "Gets the id property: Fully qualified resource Id for the resource."
  modifiers:
  - "abstract"
  syntax: "public abstract String id()"
  desc: "Gets the id property: Fully qualified resource Id for the resource."
  returns:
    description: "the id value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.innerModel()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.innerModel()"
  name: "innerModel()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.innerModel()"
  summary: "Gets the inner com.<wbr>azure.<wbr>resourcemanager.<wbr>synapse.<wbr>fluent.<wbr>models.<wbr>Extended<wbr>Sql<wbr>Pool<wbr>Blob<wbr>Auditing<wbr>Policy<wbr>Inner object."
  modifiers:
  - "abstract"
  syntax: "public abstract ExtendedSqlPoolBlobAuditingPolicyInner innerModel()"
  desc: "Gets the inner com.azure.resourcemanager.synapse.fluent.models.ExtendedSqlPoolBlobAuditingPolicyInner object."
  returns:
    description: "the inner object."
    type: "<xref href=\"com.azure.resourcemanager.synapse.fluent.models.ExtendedSqlPoolBlobAuditingPolicyInner?alt=com.azure.resourcemanager.synapse.fluent.models.ExtendedSqlPoolBlobAuditingPolicyInner&text=ExtendedSqlPoolBlobAuditingPolicyInner\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.isAzureMonitorTargetEnabled()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.isAzureMonitorTargetEnabled()"
  name: "isAzureMonitorTargetEnabled()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.isAzureMonitorTargetEnabled()"
  summary: "Gets the is<wbr>Azure<wbr>Monitor<wbr>Target<wbr>Enabled property: Specifies whether audit events are sent to Azure Monitor."
  modifiers:
  - "abstract"
  syntax: "public abstract Boolean isAzureMonitorTargetEnabled()"
  desc: "Gets the isAzureMonitorTargetEnabled property: Specifies whether audit events are sent to Azure Monitor. In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.\n\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created. Note that for server level audit you should use the 'master' database as \\{databaseName\\}.\n\nDiagnostic Settings URI format: PUT https://management.azure.com/subscriptions/\\{subscriptionId\\}/resourceGroups/\\{resourceGroup\\}/providers/Microsoft.Sql/servers/\\{serverName\\}/databases/\\{databaseName\\}/providers/microsoft.insights/diagnosticSettings/\\{settingsName\\}?api-version=2017-05-01-preview\n\nFor more information, see \\[Diagnostic Settings REST API\\](https://go.microsoft.com/fwlink/?linkid=2033207) or \\[Diagnostic Settings PowerShell\\](https://go.microsoft.com/fwlink/?linkid=2033043)."
  returns:
    description: "the isAzureMonitorTargetEnabled value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.isStorageSecondaryKeyInUse()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.isStorageSecondaryKeyInUse()"
  name: "isStorageSecondaryKeyInUse()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.isStorageSecondaryKeyInUse()"
  summary: "Gets the is<wbr>Storage<wbr>Secondary<wbr>Key<wbr>InUse property: Specifies whether storage<wbr>Account<wbr>Access<wbr>Key value is the storage's secondary key."
  modifiers:
  - "abstract"
  syntax: "public abstract Boolean isStorageSecondaryKeyInUse()"
  desc: "Gets the isStorageSecondaryKeyInUse property: Specifies whether storageAccountAccessKey value is the storage's secondary key."
  returns:
    description: "the isStorageSecondaryKeyInUse value."
    type: "<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.name()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.name()"
  name: "name()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.name()"
  summary: "Gets the name property: The name of the resource."
  modifiers:
  - "abstract"
  syntax: "public abstract String name()"
  desc: "Gets the name property: The name of the resource."
  returns:
    description: "the name value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.predicateExpression()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.predicateExpression()"
  name: "predicateExpression()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.predicateExpression()"
  summary: "Gets the predicate<wbr>Expression property: Specifies condition of where clause when creating an audit."
  modifiers:
  - "abstract"
  syntax: "public abstract String predicateExpression()"
  desc: "Gets the predicateExpression property: Specifies condition of where clause when creating an audit."
  returns:
    description: "the predicateExpression value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.queueDelayMs()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.queueDelayMs()"
  name: "queueDelayMs()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.queueDelayMs()"
  summary: "Gets the queue<wbr>Delay<wbr>Ms property: Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed."
  modifiers:
  - "abstract"
  syntax: "public abstract Integer queueDelayMs()"
  desc: "Gets the queueDelayMs property: Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed. The default minimum value is 1000 (1 second). The maximum is 2,147,483,647."
  returns:
    description: "the queueDelayMs value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.refresh()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.refresh()"
  name: "refresh()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.refresh()"
  summary: "Refreshes the resource to sync with Azure."
  modifiers:
  - "abstract"
  syntax: "public abstract ExtendedSqlPoolBlobAuditingPolicy refresh()"
  desc: "Refreshes the resource to sync with Azure."
  returns:
    description: "the refreshed resource."
    type: "<xref href=\"com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy?alt=com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy&text=ExtendedSqlPoolBlobAuditingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.refresh(com.azure.core.util.Context)"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.refresh(Context context)"
  name: "refresh(Context context)"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.refresh(Context context)"
  summary: "Refreshes the resource to sync with Azure."
  modifiers:
  - "abstract"
  parameters:
  - description: "The context to associate with this operation."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract ExtendedSqlPoolBlobAuditingPolicy refresh(Context context)"
  desc: "Refreshes the resource to sync with Azure."
  returns:
    description: "the refreshed resource."
    type: "<xref href=\"com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy?alt=com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy&text=ExtendedSqlPoolBlobAuditingPolicy\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.retentionDays()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.retentionDays()"
  name: "retentionDays()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.retentionDays()"
  summary: "Gets the retention<wbr>Days property: Specifies the number of days to keep in the audit logs in the storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract Integer retentionDays()"
  desc: "Gets the retentionDays property: Specifies the number of days to keep in the audit logs in the storage account."
  returns:
    description: "the retentionDays value."
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.state()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.state()"
  name: "state()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.state()"
  summary: "Gets the state property: Specifies the state of the policy."
  modifiers:
  - "abstract"
  syntax: "public abstract BlobAuditingPolicyState state()"
  desc: "Gets the state property: Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required."
  returns:
    description: "the state value."
    type: "<xref href=\"com.azure.resourcemanager.synapse.models.BlobAuditingPolicyState?alt=com.azure.resourcemanager.synapse.models.BlobAuditingPolicyState&text=BlobAuditingPolicyState\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.storageAccountAccessKey()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.storageAccountAccessKey()"
  name: "storageAccountAccessKey()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.storageAccountAccessKey()"
  summary: "Gets the storage<wbr>Account<wbr>Access<wbr>Key property: Specifies the identifier key of the auditing storage account."
  modifiers:
  - "abstract"
  syntax: "public abstract String storageAccountAccessKey()"
  desc: "Gets the storageAccountAccessKey property: Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage. Prerequisites for using managed identity authentication: 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD). 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity. For more information, see \\[Auditing to storage using Managed Identity authentication\\](https://go.microsoft.com/fwlink/?linkid=2114355)."
  returns:
    description: "the storageAccountAccessKey value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.storageAccountSubscriptionId()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.storageAccountSubscriptionId()"
  name: "storageAccountSubscriptionId()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.storageAccountSubscriptionId()"
  summary: "Gets the storage<wbr>Account<wbr>Subscription<wbr>Id property: Specifies the blob storage subscription Id."
  modifiers:
  - "abstract"
  syntax: "public abstract UUID storageAccountSubscriptionId()"
  desc: "Gets the storageAccountSubscriptionId property: Specifies the blob storage subscription Id."
  returns:
    description: "the storageAccountSubscriptionId value."
    type: "<xref href=\"java.util.UUID?alt=java.util.UUID&text=UUID\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.storageEndpoint()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.storageEndpoint()"
  name: "storageEndpoint()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.storageEndpoint()"
  summary: "Gets the storage<wbr>Endpoint property: Specifies the blob storage endpoint (e.<wbr>g."
  modifiers:
  - "abstract"
  syntax: "public abstract String storageEndpoint()"
  desc: "Gets the storageEndpoint property: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required."
  returns:
    description: "the storageEndpoint value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.type()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.type()"
  name: "type()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.type()"
  summary: "Gets the type property: The type of the resource."
  modifiers:
  - "abstract"
  syntax: "public abstract String type()"
  desc: "Gets the type property: The type of the resource."
  returns:
    description: "the type value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.update()"
  fullName: "com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.update()"
  name: "update()"
  nameWithType: "ExtendedSqlPoolBlobAuditingPolicy.update()"
  summary: "Begins update for the Extended<wbr>Sql<wbr>Pool<wbr>Blob<wbr>Auditing<wbr>Policy resource."
  modifiers:
  - "abstract"
  syntax: "public abstract ExtendedSqlPoolBlobAuditingPolicy.Update update()"
  desc: "Begins update for the ExtendedSqlPoolBlobAuditingPolicy resource."
  returns:
    description: "the stage of resource update."
    type: "<xref href=\"com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.Update?alt=com.azure.resourcemanager.synapse.models.ExtendedSqlPoolBlobAuditingPolicy.Update&text=Update\" data-throw-if-not-resolved=\"False\" />"
type: "interface"
desc: "An immutable client-side representation of ExtendedSqlPoolBlobAuditingPolicy."
metadata: {}
package: "com.azure.resourcemanager.synapse.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-synapse:1.0.0-beta.6
