### YamlMime:JavaType
uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager"
fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager"
name: "DataLakeAnalyticsManager"
nameWithType: "DataLakeAnalyticsManager"
summary: "Entry point to Data<wbr>Lake<wbr>Analytics<wbr>Manager."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DataLakeAnalyticsManager"
methods:
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.accounts()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.accounts()"
  name: "accounts()"
  nameWithType: "DataLakeAnalyticsManager.accounts()"
  syntax: "public Accounts accounts()"
  returns:
    description: "Resource collection API of Accounts."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.Accounts?alt=com.azure.resourcemanager.datalakeanalytics.models.Accounts&text=Accounts\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.authenticate(com.azure.core.credential.TokenCredential,com.azure.core.management.profile.AzureProfile)"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.authenticate(TokenCredential credential, AzureProfile profile)"
  name: "authenticate(TokenCredential credential, AzureProfile profile)"
  nameWithType: "DataLakeAnalyticsManager.authenticate(TokenCredential credential, AzureProfile profile)"
  summary: "Creates an instance of Data<wbr>Lake<wbr>Analytics service API entry point."
  modifiers:
  - "static"
  parameters:
  - description: "the credential to use."
    name: "credential"
    type: "<xref href=\"com.azure.core.credential.TokenCredential?alt=com.azure.core.credential.TokenCredential&text=TokenCredential\" data-throw-if-not-resolved=\"False\" />"
  - description: "the Azure profile for client."
    name: "profile"
    type: "<xref href=\"com.azure.core.management.profile.AzureProfile?alt=com.azure.core.management.profile.AzureProfile&text=AzureProfile\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static DataLakeAnalyticsManager authenticate(TokenCredential credential, AzureProfile profile)"
  desc: "Creates an instance of DataLakeAnalytics service API entry point."
  returns:
    description: "the DataLakeAnalytics service API instance."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager?alt=com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager&text=DataLakeAnalyticsManager\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.computePolicies()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.computePolicies()"
  name: "computePolicies()"
  nameWithType: "DataLakeAnalyticsManager.computePolicies()"
  syntax: "public ComputePolicies computePolicies()"
  returns:
    description: "Resource collection API of ComputePolicies."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.ComputePolicies?alt=com.azure.resourcemanager.datalakeanalytics.models.ComputePolicies&text=ComputePolicies\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.configure()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.configure()"
  name: "configure()"
  nameWithType: "DataLakeAnalyticsManager.configure()"
  summary: "Gets a Configurable instance that can be used to create Data<wbr>Lake<wbr>Analytics<wbr>Manager with optional configuration."
  modifiers:
  - "static"
  syntax: "public static DataLakeAnalyticsManager.Configurable configure()"
  desc: "Gets a Configurable instance that can be used to create DataLakeAnalyticsManager with optional configuration."
  returns:
    description: "the Configurable instance allowing configurations."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.Configurable?alt=com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.Configurable&text=Configurable\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.dataLakeStoreAccounts()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.dataLakeStoreAccounts()"
  name: "dataLakeStoreAccounts()"
  nameWithType: "DataLakeAnalyticsManager.dataLakeStoreAccounts()"
  syntax: "public DataLakeStoreAccounts dataLakeStoreAccounts()"
  returns:
    description: "Resource collection API of DataLakeStoreAccounts."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.DataLakeStoreAccounts?alt=com.azure.resourcemanager.datalakeanalytics.models.DataLakeStoreAccounts&text=DataLakeStoreAccounts\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.firewallRules()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.firewallRules()"
  name: "firewallRules()"
  nameWithType: "DataLakeAnalyticsManager.firewallRules()"
  syntax: "public FirewallRules firewallRules()"
  returns:
    description: "Resource collection API of FirewallRules."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.FirewallRules?alt=com.azure.resourcemanager.datalakeanalytics.models.FirewallRules&text=FirewallRules\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.locations()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.locations()"
  name: "locations()"
  nameWithType: "DataLakeAnalyticsManager.locations()"
  syntax: "public Locations locations()"
  returns:
    description: "Resource collection API of Locations."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.Locations?alt=com.azure.resourcemanager.datalakeanalytics.models.Locations&text=Locations\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.operations()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.operations()"
  name: "operations()"
  nameWithType: "DataLakeAnalyticsManager.operations()"
  syntax: "public Operations operations()"
  returns:
    description: "Resource collection API of Operations."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.Operations?alt=com.azure.resourcemanager.datalakeanalytics.models.Operations&text=Operations\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.serviceClient()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.serviceClient()"
  name: "serviceClient()"
  nameWithType: "DataLakeAnalyticsManager.serviceClient()"
  syntax: "public DataLakeAnalyticsAccountManagementClient serviceClient()"
  returns:
    description: "Wrapped service client DataLakeAnalyticsAccountManagementClient providing direct access to the underlying\n     auto-generated API implementation, based on Azure REST API."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.fluent.DataLakeAnalyticsAccountManagementClient?alt=com.azure.resourcemanager.datalakeanalytics.fluent.DataLakeAnalyticsAccountManagementClient&text=DataLakeAnalyticsAccountManagementClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.storageAccounts()"
  fullName: "com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager.storageAccounts()"
  name: "storageAccounts()"
  nameWithType: "DataLakeAnalyticsManager.storageAccounts()"
  syntax: "public StorageAccounts storageAccounts()"
  returns:
    description: "Resource collection API of StorageAccounts."
    type: "<xref href=\"com.azure.resourcemanager.datalakeanalytics.models.StorageAccounts?alt=com.azure.resourcemanager.datalakeanalytics.models.StorageAccounts&text=StorageAccounts\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Entry point to DataLakeAnalyticsManager. Creates an Azure Data Lake Analytics account management client."
metadata: {}
package: "com.azure.resourcemanager.datalakeanalytics"
artifact: com.azure.resourcemanager:azure-resourcemanager-datalakeanalytics:1.0.0-beta.1
