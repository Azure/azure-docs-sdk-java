### YamlMime:JavaType
uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient"
fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient"
name: "DeviceManagementAsyncClient"
nameWithType: "DeviceManagementAsyncClient"
summary: "Initializes a new instance of the asynchronous Device<wbr>Update<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class DeviceManagementAsyncClient"
methods:
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.beginImportDevices(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.beginImportDevices(BinaryData importType, RequestOptions requestOptions)"
  name: "beginImportDevices(BinaryData importType, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.beginImportDevices(BinaryData importType, RequestOptions requestOptions)"
  summary: "Import existing devices from IoT Hub."
  parameters:
  - description: "The types of devices to import."
    name: "importType"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PollerFlux<BinaryData,BinaryData> beginImportDevices(BinaryData importType, RequestOptions requestOptions)"
  desc: "Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header value to check for operation status.\n\n**Request Body Schema**\n\n```java\nString(Devices/Modules/All)\n```"
  returns:
    description: "the <xref uid=\"com.azure.core.util.polling.PollerFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PollerFlux\"></xref> for polling of long-running operation."
    type: "<xref href=\"com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.createOrUpdateDeploymentWithResponse(java.lang.String,java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.createOrUpdateDeploymentWithResponse(String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions)"
  name: "createOrUpdateDeploymentWithResponse(String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.createOrUpdateDeploymentWithResponse(String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions)"
  summary: "Creates or updates a deployment."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The deployment properties."
    name: "deployment"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createOrUpdateDeploymentWithResponse(String groupId, String deploymentId, BinaryData deployment, RequestOptions requestOptions)"
  desc: "Creates or updates a deployment.\n\n**Request Body Schema**\n\n```java\n{\n     deploymentId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     groupId: String (Required)\n     deviceClassSubgroups (Optional): [\n         String (Optional)\n     ]\n     isCanceled: Boolean (Optional)\n     isRetried: Boolean (Optional)\n     rollbackPolicy (Optional): {\n         update (Required): (recursive schema, see update above)\n         failure (Required): {\n             devicesFailedPercentage: int (Required)\n             devicesFailedCount: int (Required)\n         }\n     }\n     isCloudInitiatedRollback: Boolean (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     deploymentId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     groupId: String (Required)\n     deviceClassSubgroups (Optional): [\n         String (Optional)\n     ]\n     isCanceled: Boolean (Optional)\n     isRetried: Boolean (Optional)\n     rollbackPolicy (Optional): {\n         update (Required): (recursive schema, see update above)\n         failure (Required): {\n             devicesFailedPercentage: int (Required)\n             devicesFailedCount: int (Required)\n         }\n     }\n     isCloudInitiatedRollback: Boolean (Optional)\n }\n```"
  returns:
    description: "deployment metadata along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeploymentForDeviceClassSubgroupWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  name: "deleteDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.deleteDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  summary: "Deletes a device class subgroup deployment."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  desc: "Deletes a device class subgroup deployment."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeploymentWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  name: "deleteDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.deleteDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  summary: "Deletes a deployment."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  desc: "Deletes a deployment."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeviceClassSubgroupWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  name: "deleteDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.deleteDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  summary: "Deletes a device class subgroup."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  desc: "Deletes a device class subgroup."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeviceClassWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  name: "deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  summary: "Deletes a device class."
  parameters:
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  desc: "Deletes a device class. Device classes are created automatically when Device Update-enabled devices are connected to the hub but are not automatically cleaned up since they are referenced by DeviceClassSubgroups. If the user has deleted all DeviceClassSubgroups for a device class they can also delete the device class to remove the records from the system and to stop checking the compatibility of this device class with new updates. If a device is ever reconnected for this device class it will be re-created."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteGroupWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.deleteGroupWithResponse(String groupId, RequestOptions requestOptions)"
  name: "deleteGroupWithResponse(String groupId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.deleteGroupWithResponse(String groupId, RequestOptions requestOptions)"
  summary: "Deletes a device group."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Void>> deleteGroupWithResponse(String groupId, RequestOptions requestOptions)"
  desc: "Deletes a device group. This group is automatically created when a Device Update-enabled device is connected to the hub and reports its properties. Groups, subgroups, and deployments are not automatically cleaned up but are retained for history purposes. Users can call this method to delete a group if they do not need to retain any of the history of the group and no longer need it. If a device is ever connected again for this group after the group was deleted it will be automatically re-created but there will be no history."
  returns:
    description: "the <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getBestUpdatesForDeviceClassSubgroupWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getBestUpdatesForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  name: "getBestUpdatesForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getBestUpdatesForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  summary: "Get the best available update for a device class subgroup and a count of how many devices need this update."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getBestUpdatesForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  desc: "Get the best available update for a device class subgroup and a count of how many devices need this update.\n\n**Response Body Schema**\n\n```java\n{\n     groupId: String (Required)\n     deviceClassId: String (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     deviceCount: int (Required)\n }\n```"
  returns:
    description: "the best available update for a device class subgroup and a count of how many devices need this update\n     along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeploymentForDeviceClassSubgroupWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  name: "getDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  summary: "Gets the deployment properties."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeploymentForDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  desc: "Gets the deployment properties.\n\n**Response Body Schema**\n\n```java\n{\n     deploymentId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     groupId: String (Required)\n     deviceClassSubgroups (Optional): [\n         String (Optional)\n     ]\n     isCanceled: Boolean (Optional)\n     isRetried: Boolean (Optional)\n     rollbackPolicy (Optional): {\n         update (Required): (recursive schema, see update above)\n         failure (Required): {\n             devicesFailedPercentage: int (Required)\n             devicesFailedCount: int (Required)\n         }\n     }\n     isCloudInitiatedRollback: Boolean (Optional)\n }\n```"
  returns:
    description: "the deployment properties along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeploymentStatusWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeploymentStatusWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  name: "getDeploymentStatusWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeploymentStatusWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  summary: "Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeploymentStatusWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  desc: "Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed.\n\n**Response Body Schema**\n\n```java\n{\n     groupId: String (Required)\n     deploymentState: String(Active/ActiveWithSubgroupFailures/Failed/Inactive/Canceled) (Required)\n     error (Optional): {\n         code: String (Required)\n         message: String (Required)\n         target: String (Optional)\n         details (Optional): [\n             (recursive schema, see above)\n         ]\n         innererror (Optional): {\n             code: String (Required)\n             message: String (Optional)\n             errorDetail: String (Optional)\n             innerError (Optional): (recursive schema, see innerError above)\n         }\n         occurredDateTime: OffsetDateTime (Optional)\n     }\n     subgroupStatus (Required): [\n          (Required){\n             groupId: String (Required)\n             deviceClassId: String (Required)\n             deploymentState: String(Active/Failed/Inactive/Canceled) (Required)\n             error (Optional): (recursive schema, see error above)\n             totalDevices: Integer (Optional)\n             devicesInProgressCount: Integer (Optional)\n             devicesCompletedFailedCount: Integer (Optional)\n             devicesCompletedSucceededCount: Integer (Optional)\n             devicesCanceledCount: Integer (Optional)\n         }\n     ]\n }\n```"
  returns:
    description: "the status of a deployment including a breakdown of how many devices in the deployment are in progress,\n     completed, or failed along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeploymentWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  name: "getDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  summary: "Gets the deployment properties."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeploymentWithResponse(String groupId, String deploymentId, RequestOptions requestOptions)"
  desc: "Gets the deployment properties.\n\n**Response Body Schema**\n\n```java\n{\n     deploymentId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     groupId: String (Required)\n     deviceClassSubgroups (Optional): [\n         String (Optional)\n     ]\n     isCanceled: Boolean (Optional)\n     isRetried: Boolean (Optional)\n     rollbackPolicy (Optional): {\n         update (Required): (recursive schema, see update above)\n         failure (Required): {\n             devicesFailedPercentage: int (Required)\n             devicesFailedCount: int (Required)\n         }\n     }\n     isCloudInitiatedRollback: Boolean (Optional)\n }\n```"
  returns:
    description: "the deployment properties along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassSubgroupDeploymentStatusWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassSubgroupDeploymentStatusWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  name: "getDeviceClassSubgroupDeploymentStatusWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeviceClassSubgroupDeploymentStatusWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  summary: "Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeviceClassSubgroupDeploymentStatusWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  desc: "Gets the status of a deployment including a breakdown of how many devices in the deployment are in progress, completed, or failed.\n\n**Response Body Schema**\n\n```java\n{\n     groupId: String (Required)\n     deviceClassId: String (Required)\n     deploymentState: String(Active/Failed/Inactive/Canceled) (Required)\n     error (Optional): {\n         code: String (Required)\n         message: String (Required)\n         target: String (Optional)\n         details (Optional): [\n             (recursive schema, see above)\n         ]\n         innererror (Optional): {\n             code: String (Required)\n             message: String (Optional)\n             errorDetail: String (Optional)\n             innerError (Optional): (recursive schema, see innerError above)\n         }\n         occurredDateTime: OffsetDateTime (Optional)\n     }\n     totalDevices: Integer (Optional)\n     devicesInProgressCount: Integer (Optional)\n     devicesCompletedFailedCount: Integer (Optional)\n     devicesCompletedSucceededCount: Integer (Optional)\n     devicesCanceledCount: Integer (Optional)\n }\n```"
  returns:
    description: "the status of a deployment including a breakdown of how many devices in the deployment are in progress,\n     completed, or failed along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassSubgroupUpdateComplianceWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassSubgroupUpdateComplianceWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  name: "getDeviceClassSubgroupUpdateComplianceWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeviceClassSubgroupUpdateComplianceWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  summary: "Get device class subgroup update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeviceClassSubgroupUpdateComplianceWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  desc: "Get device class subgroup update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update.\n\n**Response Body Schema**\n\n```java\n{\n     totalDeviceCount: int (Required)\n     onLatestUpdateDeviceCount: int (Required)\n     newUpdatesAvailableDeviceCount: int (Required)\n     updatesInProgressDeviceCount: int (Required)\n }\n```"
  returns:
    description: "device class subgroup update compliance information such as how many devices are on their latest update,\n     how many need new updates, and how many are in progress on receiving a new update along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref>\n     on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassSubgroupWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  name: "getDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  summary: "Gets device class subgroup details."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeviceClassSubgroupWithResponse(String groupId, String deviceClassId, RequestOptions requestOptions)"
  desc: "Gets device class subgroup details.\n\n**Response Body Schema**\n\n```java\n{\n     deviceClassId: String (Required)\n     groupId: String (Required)\n     createdDateTime: String (Required)\n     deviceCount: Integer (Optional)\n     deploymentId: String (Optional)\n }\n```"
  returns:
    description: "device class subgroup details along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  name: "getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  summary: "Gets the properties of a device class."
  parameters:
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeviceClassWithResponse(String deviceClassId, RequestOptions requestOptions)"
  desc: "Gets the properties of a device class.\n\n**Response Body Schema**\n\n```java\n{\n     deviceClassId: String (Required)\n     friendlyName: String (Optional)\n     deviceClassProperties (Required): {\n         contractModel (Optional): {\n             id: String (Required)\n             name: String (Required)\n         }\n         compatProperties (Required): {\n             String: String (Required)\n         }\n     }\n     bestCompatibleUpdate (Optional): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n }\n```"
  returns:
    description: "the properties of a device class along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceModuleWithResponse(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceModuleWithResponse(String deviceId, String moduleId, RequestOptions requestOptions)"
  name: "getDeviceModuleWithResponse(String deviceId, String moduleId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeviceModuleWithResponse(String deviceId, String moduleId, RequestOptions requestOptions)"
  summary: "Gets the device module properties and latest deployment status for a device module connected to Device Update for IoT Hub."
  parameters:
  - description: "Device identifier in Azure IoT Hub."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device module identifier in Azure IoT Hub."
    name: "moduleId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeviceModuleWithResponse(String deviceId, String moduleId, RequestOptions requestOptions)"
  desc: "Gets the device module properties and latest deployment status for a device module connected to Device Update for IoT Hub.\n\n**Response Body Schema**\n\n```java\n{\n     deviceId: String (Required)\n     moduleId: String (Optional)\n     deviceClassId: String (Required)\n     groupId: String (Optional)\n     lastAttemptedUpdate (Optional): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)\n     installedUpdate (Optional): (recursive schema, see installedUpdate above)\n     onLatestUpdate: boolean (Required)\n     lastDeploymentId: String (Optional)\n     lastInstallResult (Optional): {\n         resultCode: int (Required)\n         extendedResultCode: int (Required)\n         resultDetails: String (Optional)\n         stepResults (Optional): [\n              (Optional){\n                 update (Optional): (recursive schema, see update above)\n                 description: String (Optional)\n                 resultCode: int (Required)\n                 extendedResultCode: int (Required)\n                 resultDetails: String (Optional)\n             }\n         ]\n     }\n }\n```"
  returns:
    description: "the device module properties and latest deployment status for a device module connected to Device Update\n     for IoT Hub along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getDeviceWithResponse(String deviceId, RequestOptions requestOptions)"
  name: "getDeviceWithResponse(String deviceId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getDeviceWithResponse(String deviceId, RequestOptions requestOptions)"
  summary: "Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub."
  parameters:
  - description: "Device identifier in Azure IoT Hub."
    name: "deviceId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getDeviceWithResponse(String deviceId, RequestOptions requestOptions)"
  desc: "Gets the device properties and latest deployment status for a device connected to Device Update for IoT Hub.\n\n**Response Body Schema**\n\n```java\n{\n     deviceId: String (Required)\n     moduleId: String (Optional)\n     deviceClassId: String (Required)\n     groupId: String (Optional)\n     lastAttemptedUpdate (Optional): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)\n     installedUpdate (Optional): (recursive schema, see installedUpdate above)\n     onLatestUpdate: boolean (Required)\n     lastDeploymentId: String (Optional)\n     lastInstallResult (Optional): {\n         resultCode: int (Required)\n         extendedResultCode: int (Required)\n         resultDetails: String (Optional)\n         stepResults (Optional): [\n              (Optional){\n                 update (Optional): (recursive schema, see update above)\n                 description: String (Optional)\n                 resultCode: int (Required)\n                 extendedResultCode: int (Required)\n                 resultDetails: String (Optional)\n             }\n         ]\n     }\n }\n```"
  returns:
    description: "the device properties and latest deployment status for a device connected to Device Update for IoT Hub\n     along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getGroupWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getGroupWithResponse(String groupId, RequestOptions requestOptions)"
  name: "getGroupWithResponse(String groupId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getGroupWithResponse(String groupId, RequestOptions requestOptions)"
  summary: "Gets the device group properties."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getGroupWithResponse(String groupId, RequestOptions requestOptions)"
  desc: "Gets the device group properties.\n\n**Response Body Schema**\n\n```java\n{\n     groupId: String (Required)\n     groupType: String(IoTHubTag/DefaultNoTag) (Required)\n     createdDateTime: String (Required)\n     deviceCount: Integer (Optional)\n     subgroupsWithNewUpdatesAvailableCount: Integer (Optional)\n     subgroupsWithUpdatesInProgressCount: Integer (Optional)\n     subgroupsWithOnLatestUpdateCount: Integer (Optional)\n     deployments (Optional): [\n         String (Optional)\n     ]\n }\n```"
  returns:
    description: "the device group properties along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getLogCollectionDetailedStatusWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getLogCollectionDetailedStatusWithResponse(String operationId, RequestOptions requestOptions)"
  name: "getLogCollectionDetailedStatusWithResponse(String operationId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getLogCollectionDetailedStatusWithResponse(String operationId, RequestOptions requestOptions)"
  summary: "Get log collection with detailed status."
  parameters:
  - description: "Operation identifier."
    name: "operationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getLogCollectionDetailedStatusWithResponse(String operationId, RequestOptions requestOptions)"
  desc: "Get log collection with detailed status.\n\n**Response Body Schema**\n\n```java\n{\n     logCollectionId: String (Optional)\n     createdDateTime: String (Optional)\n     lastActionDateTime: String (Optional)\n     status: String(NotStarted/Running/Succeeded/Failed) (Optional)\n     deviceStatus (Optional): [\n          (Optional){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n             status: String(NotStarted/Running/Succeeded/Failed) (Required)\n             resultCode: String (Optional)\n             extendedResultCode: String (Optional)\n             logLocation: String (Optional)\n         }\n     ]\n     description: String (Optional)\n }\n```"
  returns:
    description: "log collection with detailed status along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getLogCollectionWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getLogCollectionWithResponse(String logCollectionId, RequestOptions requestOptions)"
  name: "getLogCollectionWithResponse(String logCollectionId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getLogCollectionWithResponse(String logCollectionId, RequestOptions requestOptions)"
  summary: "Get the device diagnostics log collection."
  parameters:
  - description: "Log collection identifier."
    name: "logCollectionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getLogCollectionWithResponse(String logCollectionId, RequestOptions requestOptions)"
  desc: "Get the device diagnostics log collection.\n\n**Response Body Schema**\n\n```java\n{\n     logCollectionId: String (Optional)\n     deviceList (Required): [\n          (Required){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n         }\n     ]\n     description: String (Optional)\n     createdDateTime: String (Optional)\n     lastActionDateTime: String (Optional)\n     status: String(NotStarted/Running/Succeeded/Failed) (Optional)\n }\n```"
  returns:
    description: "the device diagnostics log collection along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getOperationWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getOperationWithResponse(String operationId, RequestOptions requestOptions)"
  name: "getOperationWithResponse(String operationId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getOperationWithResponse(String operationId, RequestOptions requestOptions)"
  summary: "Retrieve operation status."
  parameters:
  - description: "Operation identifier."
    name: "operationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getOperationWithResponse(String operationId, RequestOptions requestOptions)"
  desc: "Retrieve operation status.\n\n**Header Parameters**\n\n    | ------------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------ |\n    | Name          | Type   | Required | Description                                                                                                                    |\n    | If-None-Match | String | No       | Defines the If-None-Match condition. The operation will be performed only if the ETag on the server does not match this value. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addHeader\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addHeader\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     operationId: String (Required)\n     status: String(NotStarted/Running/Succeeded/Failed) (Required)\n     error (Optional): {\n         code: String (Required)\n         message: String (Required)\n         target: String (Optional)\n         details (Optional): [\n             (recursive schema, see above)\n         ]\n         innererror (Optional): {\n             code: String (Required)\n             message: String (Optional)\n             errorDetail: String (Optional)\n             innerError (Optional): (recursive schema, see innerError above)\n         }\n         occurredDateTime: OffsetDateTime (Optional)\n     }\n     traceId: String (Optional)\n     lastActionDateTime: OffsetDateTime (Required)\n     createdDateTime: OffsetDateTime (Required)\n     etag: String (Optional)\n }\n```"
  returns:
    description: "operation metadata along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getUpdateComplianceForGroupWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getUpdateComplianceForGroupWithResponse(String groupId, RequestOptions requestOptions)"
  name: "getUpdateComplianceForGroupWithResponse(String groupId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getUpdateComplianceForGroupWithResponse(String groupId, RequestOptions requestOptions)"
  summary: "Get device group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getUpdateComplianceForGroupWithResponse(String groupId, RequestOptions requestOptions)"
  desc: "Get device group update compliance information such as how many devices are on their latest update, how many need new updates, and how many are in progress on receiving a new update.\n\n**Response Body Schema**\n\n```java\n{\n     totalDeviceCount: int (Required)\n     onLatestUpdateDeviceCount: int (Required)\n     newUpdatesAvailableDeviceCount: int (Required)\n     updatesInProgressDeviceCount: int (Required)\n }\n```"
  returns:
    description: "device group update compliance information such as how many devices are on their latest update, how many\n     need new updates, and how many are in progress on receiving a new update along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on\n     successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getUpdateComplianceWithResponse(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.getUpdateComplianceWithResponse(RequestOptions requestOptions)"
  name: "getUpdateComplianceWithResponse(RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.getUpdateComplianceWithResponse(RequestOptions requestOptions)"
  summary: "Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getUpdateComplianceWithResponse(RequestOptions requestOptions)"
  desc: "Gets the breakdown of how many devices are on their latest update, have new updates available, or are in progress receiving new updates.\n\n**Response Body Schema**\n\n```java\n{\n     totalDeviceCount: int (Required)\n     onLatestUpdateDeviceCount: int (Required)\n     newUpdatesAvailableDeviceCount: int (Required)\n     updatesInProgressDeviceCount: int (Required)\n }\n```"
  returns:
    description: "the breakdown of how many devices are on their latest update, have new updates available, or are in\n     progress receiving new updates along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listBestUpdatesForGroup(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listBestUpdatesForGroup(String groupId, RequestOptions requestOptions)"
  name: "listBestUpdatesForGroup(String groupId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listBestUpdatesForGroup(String groupId, RequestOptions requestOptions)"
  summary: "Get the best available updates for a device group and a count of how many devices need each update."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listBestUpdatesForGroup(String groupId, RequestOptions requestOptions)"
  desc: "Get the best available updates for a device group and a count of how many devices need each update.\n\n**Query Parameters**\n\n    | ------ | ------ | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type   | Required | Description                                                                                                                                                |\n    | filter | String | No       | Restricts the set of bestUpdates returned. You can filter on update Provider, Name and Version property. This filter is deprecated and should not be used. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             groupId: String (Required)\n             deviceClassId: String (Required)\n             update (Required): {\n                 updateId (Required): {\n                     provider: String (Required)\n                     name: String (Required)\n                     version: String (Required)\n                 }\n                 description: String (Optional)\n                 friendlyName: String (Optional)\n             }\n             deviceCount: int (Required)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "the best available updates for a device group and a count of how many devices need each update as\n     paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeploymentsForDeviceClassSubgroup(java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeploymentsForDeviceClassSubgroup(String groupId, String deviceClassId, RequestOptions requestOptions)"
  name: "listDeploymentsForDeviceClassSubgroup(String groupId, String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDeploymentsForDeviceClassSubgroup(String groupId, String deviceClassId, RequestOptions requestOptions)"
  summary: "Gets a list of deployments for a device class subgroup."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeploymentsForDeviceClassSubgroup(String groupId, String deviceClassId, RequestOptions requestOptions)"
  desc: "Gets a list of deployments for a device class subgroup.\n\n**Query Parameters**\n\n    | ------- | ------ | -------- | -------------------------------------------------------------------- |\n    | Name    | Type   | Required | Description                                                          |\n    | orderby | String | No       | Orders the set of deployments returned. You can order by start date. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deploymentId: String (Required)\n             startDateTime: OffsetDateTime (Required)\n             update (Required): {\n                 updateId (Required): {\n                     provider: String (Required)\n                     name: String (Required)\n                     version: String (Required)\n                 }\n                 description: String (Optional)\n                 friendlyName: String (Optional)\n             }\n             groupId: String (Required)\n             deviceClassSubgroups (Optional): [\n                 String (Optional)\n             ]\n             isCanceled: Boolean (Optional)\n             isRetried: Boolean (Optional)\n             rollbackPolicy (Optional): {\n                 update (Required): (recursive schema, see update above)\n                 failure (Required): {\n                     devicesFailedPercentage: int (Required)\n                     devicesFailedCount: int (Required)\n                 }\n             }\n             isCloudInitiatedRollback: Boolean (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of deployments for a device class subgroup as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeploymentsForGroup(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeploymentsForGroup(String groupId, RequestOptions requestOptions)"
  name: "listDeploymentsForGroup(String groupId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDeploymentsForGroup(String groupId, RequestOptions requestOptions)"
  summary: "Gets a list of deployments for a device group."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeploymentsForGroup(String groupId, RequestOptions requestOptions)"
  desc: "Gets a list of deployments for a device group.\n\n**Query Parameters**\n\n    | ------- | ------ | -------- | -------------------------------------------------------------------- |\n    | Name    | Type   | Required | Description                                                          |\n    | orderby | String | No       | Orders the set of deployments returned. You can order by start date. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deploymentId: String (Required)\n             startDateTime: OffsetDateTime (Required)\n             update (Required): {\n                 updateId (Required): {\n                     provider: String (Required)\n                     name: String (Required)\n                     version: String (Required)\n                 }\n                 description: String (Optional)\n                 friendlyName: String (Optional)\n             }\n             groupId: String (Required)\n             deviceClassSubgroups (Optional): [\n                 String (Optional)\n             ]\n             isCanceled: Boolean (Optional)\n             isRetried: Boolean (Optional)\n             rollbackPolicy (Optional): {\n                 update (Required): (recursive schema, see update above)\n                 failure (Required): {\n                     devicesFailedPercentage: int (Required)\n                     devicesFailedCount: int (Required)\n                 }\n             }\n             isCloudInitiatedRollback: Boolean (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of deployments for a device group as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceClassSubgroupsForGroup(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceClassSubgroupsForGroup(String groupId, RequestOptions requestOptions)"
  name: "listDeviceClassSubgroupsForGroup(String groupId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDeviceClassSubgroupsForGroup(String groupId, RequestOptions requestOptions)"
  summary: "Get the device class subgroups for the group."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeviceClassSubgroupsForGroup(String groupId, RequestOptions requestOptions)"
  desc: "Get the device class subgroups for the group.\n\n**Query Parameters**\n\n    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------ |\n    | Name   | Type   | Required | Description                                                                                                  |\n    | filter | String | No       | Restricts the set of device class subgroups returned. You can filter on compat properties by name and value. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deviceClassId: String (Required)\n             groupId: String (Required)\n             createdDateTime: String (Required)\n             deviceCount: Integer (Optional)\n             deploymentId: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "the device class subgroups for the group as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceClasses(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceClasses(RequestOptions requestOptions)"
  name: "listDeviceClasses(RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDeviceClasses(RequestOptions requestOptions)"
  summary: "Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeviceClasses(RequestOptions requestOptions)"
  desc: "Gets a list of all device classes (unique combinations of device manufacturer and model) for all devices connected to Device Update for IoT Hub.\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deviceClassId: String (Required)\n             friendlyName: String (Optional)\n             deviceClassProperties (Required): {\n                 contractModel (Optional): {\n                     id: String (Required)\n                     name: String (Required)\n                 }\n                 compatProperties (Required): {\n                     String: String (Required)\n                 }\n             }\n             bestCompatibleUpdate (Optional): {\n                 updateId (Required): {\n                     provider: String (Required)\n                     name: String (Required)\n                     version: String (Required)\n                 }\n                 description: String (Optional)\n                 friendlyName: String (Optional)\n             }\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of all device classes (unique combinations of device manufacturer and model) for all devices\n     connected to Device Update for IoT Hub as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceHealth(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceHealth(String filter, RequestOptions requestOptions)"
  name: "listDeviceHealth(String filter, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDeviceHealth(String filter, RequestOptions requestOptions)"
  summary: "Get list of device health."
  parameters:
  - description: "Filter list by specified properties."
    name: "filter"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeviceHealth(String filter, RequestOptions requestOptions)"
  desc: "Get list of device health.\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n             state: String(healthy/unhealthy) (Required)\n             digitalTwinModelId: String (Optional)\n             healthChecks (Required): [\n                  (Required){\n                     name: String (Optional)\n                     result: String(success/userError) (Optional)\n                 }\n             ]\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "list of device health as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceStatesForDeviceClassSubgroupDeployment(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDeviceStatesForDeviceClassSubgroupDeployment(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  name: "listDeviceStatesForDeviceClassSubgroupDeployment(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDeviceStatesForDeviceClassSubgroupDeployment(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  summary: "Gets a list of devices in a deployment along with their state."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDeviceStatesForDeviceClassSubgroupDeployment(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  desc: "Gets a list of devices in a deployment along with their state. Useful for getting a list of failed devices.\n\n**Query Parameters**\n\n    | ------ | ------ | -------- | ------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type   | Required | Description                                                                                                         |\n    | filter | String | No       | Restricts the set of deployment device states returned. You can filter on deviceId and moduleId and/or deviceState. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n             retryCount: int (Required)\n             movedOnToNewDeployment: boolean (Required)\n             deviceState: String(Succeeded/InProgress/Canceled/Failed) (Required)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of devices in a deployment along with their state as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDevices(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listDevices(RequestOptions requestOptions)"
  name: "listDevices(RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listDevices(RequestOptions requestOptions)"
  summary: "Gets a list of devices connected to Device Update for IoT Hub."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listDevices(RequestOptions requestOptions)"
  desc: "Gets a list of devices connected to Device Update for IoT Hub.\n\n**Query Parameters**\n\n    | ------ | ------ | -------- | ----------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type   | Required | Description                                                                                                       |\n    | filter | String | No       | Restricts the set of devices returned. You can filter on GroupId, DeviceClassId, or GroupId and DeploymentStatus. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n             deviceClassId: String (Required)\n             groupId: String (Optional)\n             lastAttemptedUpdate (Optional): {\n                 updateId (Required): {\n                     provider: String (Required)\n                     name: String (Required)\n                     version: String (Required)\n                 }\n                 description: String (Optional)\n                 friendlyName: String (Optional)\n             }\n             deploymentStatus: String(Succeeded/InProgress/Canceled/Failed) (Optional)\n             installedUpdate (Optional): (recursive schema, see installedUpdate above)\n             onLatestUpdate: boolean (Required)\n             lastDeploymentId: String (Optional)\n             lastInstallResult (Optional): {\n                 resultCode: int (Required)\n                 extendedResultCode: int (Required)\n                 resultDetails: String (Optional)\n                 stepResults (Optional): [\n                      (Optional){\n                         update (Optional): (recursive schema, see update above)\n                         description: String (Optional)\n                         resultCode: int (Required)\n                         extendedResultCode: int (Required)\n                         resultDetails: String (Optional)\n                     }\n                 ]\n             }\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of devices connected to Device Update for IoT Hub as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listGroups(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listGroups(RequestOptions requestOptions)"
  name: "listGroups(RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listGroups(RequestOptions requestOptions)"
  summary: "Gets a list of all device groups."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listGroups(RequestOptions requestOptions)"
  desc: "Gets a list of all device groups. The $default group will always be returned first.\n\n**Query Parameters**\n\n    | ------- | ------ | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n    | Name    | Type   | Required | Description                                                                                                                                                                                                              |\n    | orderby | String | No       | Orders the set of groups returned. You can order by any combination of groupId, device count, created date, subgroupsWithNewUpdatesAvailableCount, subgroupsWithUpdatesInProgressCount, or subgroupsOnLatestUpdateCount. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             groupId: String (Required)\n             groupType: String(IoTHubTag/DefaultNoTag) (Required)\n             createdDateTime: String (Required)\n             deviceCount: Integer (Optional)\n             subgroupsWithNewUpdatesAvailableCount: Integer (Optional)\n             subgroupsWithUpdatesInProgressCount: Integer (Optional)\n             subgroupsWithOnLatestUpdateCount: Integer (Optional)\n             deployments (Optional): [\n                 String (Optional)\n             ]\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of all device groups as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listInstallableUpdatesForDeviceClass(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listInstallableUpdatesForDeviceClass(String deviceClassId, RequestOptions requestOptions)"
  name: "listInstallableUpdatesForDeviceClass(String deviceClassId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listInstallableUpdatesForDeviceClass(String deviceClassId, RequestOptions requestOptions)"
  summary: "Gets a list of installable updates for a device class."
  parameters:
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listInstallableUpdatesForDeviceClass(String deviceClassId, RequestOptions requestOptions)"
  desc: "Gets a list of installable updates for a device class.\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             updateId (Required): {\n                 provider: String (Required)\n                 name: String (Required)\n                 version: String (Required)\n             }\n             description: String (Optional)\n             friendlyName: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of installable updates for a device class as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listLogCollections(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listLogCollections(RequestOptions requestOptions)"
  name: "listLogCollections(RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listLogCollections(RequestOptions requestOptions)"
  summary: "Get all device diagnostics log collections."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listLogCollections(RequestOptions requestOptions)"
  desc: "Get all device diagnostics log collections.\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             logCollectionId: String (Optional)\n             deviceList (Required): [\n                  (Required){\n                     deviceId: String (Required)\n                     moduleId: String (Optional)\n                 }\n             ]\n             description: String (Optional)\n             createdDateTime: String (Optional)\n             lastActionDateTime: String (Optional)\n             status: String(NotStarted/Running/Succeeded/Failed) (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "all device diagnostics log collections as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listOperations(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.listOperations(RequestOptions requestOptions)"
  name: "listOperations(RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.listOperations(RequestOptions requestOptions)"
  summary: "Get a list of all device import operations."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listOperations(RequestOptions requestOptions)"
  desc: "Get a list of all device import operations. Completed operations are kept for 7 days before auto-deleted.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                        |\n    | filter | String  | No       | Restricts the set of operations returned. Only one specific filter is supported: \"status eq 'NotStarted' or status eq 'Running'\"                                                                   |\n    | top    | Integer | No       | Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     value (Required): [\n          (Required){\n             operationId: String (Required)\n             status: String(NotStarted/Running/Succeeded/Failed) (Required)\n             error (Optional): {\n                 code: String (Required)\n                 message: String (Required)\n                 target: String (Optional)\n                 details (Optional): [\n                     (recursive schema, see above)\n                 ]\n                 innererror (Optional): {\n                     code: String (Required)\n                     message: String (Optional)\n                     errorDetail: String (Optional)\n                     innerError (Optional): (recursive schema, see innerError above)\n                 }\n                 occurredDateTime: OffsetDateTime (Optional)\n             }\n             traceId: String (Optional)\n             lastActionDateTime: OffsetDateTime (Required)\n             createdDateTime: OffsetDateTime (Required)\n             etag: String (Optional)\n         }\n     ]\n     nextLink: String (Optional)\n }\n```"
  returns:
    description: "a list of all device import operations as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.retryDeploymentWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.retryDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  name: "retryDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.retryDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  summary: "Retries a deployment with failed devices."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> retryDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  desc: "Retries a deployment with failed devices.\n\n**Response Body Schema**\n\n```java\n{\n     deploymentId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     groupId: String (Required)\n     deviceClassSubgroups (Optional): [\n         String (Optional)\n     ]\n     isCanceled: Boolean (Optional)\n     isRetried: Boolean (Optional)\n     rollbackPolicy (Optional): {\n         update (Required): (recursive schema, see update above)\n         failure (Required): {\n             devicesFailedPercentage: int (Required)\n             devicesFailedCount: int (Required)\n         }\n     }\n     isCloudInitiatedRollback: Boolean (Optional)\n }\n```"
  returns:
    description: "deployment metadata along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.startLogCollectionWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.startLogCollectionWithResponse(String logCollectionId, BinaryData logCollection, RequestOptions requestOptions)"
  name: "startLogCollectionWithResponse(String logCollectionId, BinaryData logCollection, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.startLogCollectionWithResponse(String logCollectionId, BinaryData logCollection, RequestOptions requestOptions)"
  summary: "Start the device diagnostics log collection on specified devices."
  parameters:
  - description: "Log collection identifier."
    name: "logCollectionId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The log collection properties."
    name: "logCollection"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> startLogCollectionWithResponse(String logCollectionId, BinaryData logCollection, RequestOptions requestOptions)"
  desc: "Start the device diagnostics log collection on specified devices.\n\n**Request Body Schema**\n\n```java\n{\n     logCollectionId: String (Optional)\n     deviceList (Required): [\n          (Required){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n         }\n     ]\n     description: String (Optional)\n     createdDateTime: String (Optional)\n     lastActionDateTime: String (Optional)\n     status: String(NotStarted/Running/Succeeded/Failed) (Optional)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     logCollectionId: String (Optional)\n     deviceList (Required): [\n          (Required){\n             deviceId: String (Required)\n             moduleId: String (Optional)\n         }\n     ]\n     description: String (Optional)\n     createdDateTime: String (Optional)\n     lastActionDateTime: String (Optional)\n     status: String(NotStarted/Running/Succeeded/Failed) (Optional)\n }\n```"
  returns:
    description: "diagnostics request body along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.stopDeploymentWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.stopDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  name: "stopDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.stopDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  summary: "Stops a deployment."
  parameters:
  - description: "Group identity."
    name: "groupId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "Deployment identifier."
    name: "deploymentId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> stopDeploymentWithResponse(String groupId, String deviceClassId, String deploymentId, RequestOptions requestOptions)"
  desc: "Stops a deployment.\n\n**Response Body Schema**\n\n```java\n{\n     deploymentId: String (Required)\n     startDateTime: OffsetDateTime (Required)\n     update (Required): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n     groupId: String (Required)\n     deviceClassSubgroups (Optional): [\n         String (Optional)\n     ]\n     isCanceled: Boolean (Optional)\n     isRetried: Boolean (Optional)\n     rollbackPolicy (Optional): {\n         update (Required): (recursive schema, see update above)\n         failure (Required): {\n             devicesFailedPercentage: int (Required)\n             devicesFailedCount: int (Required)\n         }\n     }\n     isCloudInitiatedRollback: Boolean (Optional)\n }\n```"
  returns:
    description: "deployment metadata along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.updateDeviceClassWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.iot.deviceupdate.DeviceManagementAsyncClient.updateDeviceClassWithResponse(String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions)"
  name: "updateDeviceClassWithResponse(String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions)"
  nameWithType: "DeviceManagementAsyncClient.updateDeviceClassWithResponse(String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions)"
  summary: "Update device class details."
  parameters:
  - description: "Device class identifier."
    name: "deviceClassId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The device class json merge patch body. Currently only supports patching friendlyName."
    name: "deviceClassPatch"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateDeviceClassWithResponse(String deviceClassId, BinaryData deviceClassPatch, RequestOptions requestOptions)"
  desc: "Update device class details.\n\n**Request Body Schema**\n\n```java\n{\n     friendlyName: String (Required)\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     deviceClassId: String (Required)\n     friendlyName: String (Optional)\n     deviceClassProperties (Required): {\n         contractModel (Optional): {\n             id: String (Required)\n             name: String (Required)\n         }\n         compatProperties (Required): {\n             String: String (Required)\n         }\n     }\n     bestCompatibleUpdate (Optional): {\n         updateId (Required): {\n             provider: String (Required)\n             name: String (Required)\n             version: String (Required)\n         }\n         description: String (Optional)\n         friendlyName: String (Optional)\n     }\n }\n```"
  returns:
    description: "device class metadata along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous DeviceUpdateClient type."
metadata: {}
package: "com.azure.iot.deviceupdate"
artifact: com.azure:azure-iot-deviceupdate:1.0.0-beta.3
