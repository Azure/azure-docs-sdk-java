### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.node.ValueNode
  id: ValueNode
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node
  children:
  - com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy()
  - com.fasterxml.jackson.databind.node.ValueNode.ValueNode()
  - com.fasterxml.jackson.databind.node.ValueNode._at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.node.ValueNode.asToken()
  - com.fasterxml.jackson.databind.node.ValueNode.findParent(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.node.ValueNode.findValue(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  - com.fasterxml.jackson.databind.node.ValueNode.get(int)
  - com.fasterxml.jackson.databind.node.ValueNode.get(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.has(int)
  - com.fasterxml.jackson.databind.node.ValueNode.has(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(int)
  - com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.isEmpty()
  - com.fasterxml.jackson.databind.node.ValueNode.path(int)
  - com.fasterxml.jackson.databind.node.ValueNode.path(java.lang.String)
  - com.fasterxml.jackson.databind.node.ValueNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  langs:
  - java
  name: ValueNode
  nameWithType: ValueNode
  fullName: com.fasterxml.jackson.databind.node.ValueNode
  type: Class
  package: com.fasterxml.jackson.databind.node
  summary: This intermediate base class is used for all leaf nodes, that is, all non-container (array or object) nodes, except for the "missing node".
  syntax:
    content: public abstract class ValueNode extends BaseJsonNode
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializable.Base
  - com.fasterxml.jackson.databind.JsonNode
  - com.fasterxml.jackson.databind.node.BaseJsonNode
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  - com.fasterxml.jackson.databind.JsonNode.<T>_this()
  - com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()
  - com.fasterxml.jackson.databind.JsonNode.<T>require()
  - com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  - com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode._at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.asBoolean()
  - com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
  - com.fasterxml.jackson.databind.JsonNode.asDouble()
  - com.fasterxml.jackson.databind.JsonNode.asDouble(double)
  - com.fasterxml.jackson.databind.JsonNode.asInt()
  - com.fasterxml.jackson.databind.JsonNode.asInt(int)
  - com.fasterxml.jackson.databind.JsonNode.asLong()
  - com.fasterxml.jackson.databind.JsonNode.asLong(long)
  - com.fasterxml.jackson.databind.JsonNode.asText()
  - com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()
  - com.fasterxml.jackson.databind.JsonNode.binaryValue()
  - com.fasterxml.jackson.databind.JsonNode.booleanValue()
  - com.fasterxml.jackson.databind.JsonNode.canConvertToInt()
  - com.fasterxml.jackson.databind.JsonNode.canConvertToLong()
  - com.fasterxml.jackson.databind.JsonNode.decimalValue()
  - com.fasterxml.jackson.databind.JsonNode.doubleValue()
  - com.fasterxml.jackson.databind.JsonNode.elements()
  - com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
  - com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  - com.fasterxml.jackson.databind.JsonNode.fieldNames()
  - com.fasterxml.jackson.databind.JsonNode.fields()
  - com.fasterxml.jackson.databind.JsonNode.findParent(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.JsonNode.findValue(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  - com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  - com.fasterxml.jackson.databind.JsonNode.floatValue()
  - com.fasterxml.jackson.databind.JsonNode.get(int)
  - com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.getNodeType()
  - com.fasterxml.jackson.databind.JsonNode.has(int)
  - com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.hasNonNull(int)
  - com.fasterxml.jackson.databind.JsonNode.hasNonNull(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.intValue()
  - com.fasterxml.jackson.databind.JsonNode.isArray()
  - com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  - com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  - com.fasterxml.jackson.databind.JsonNode.isBinary()
  - com.fasterxml.jackson.databind.JsonNode.isBoolean()
  - com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  - com.fasterxml.jackson.databind.JsonNode.isDouble()
  - com.fasterxml.jackson.databind.JsonNode.isEmpty()
  - com.fasterxml.jackson.databind.JsonNode.isFloat()
  - com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  - com.fasterxml.jackson.databind.JsonNode.isInt()
  - com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  - com.fasterxml.jackson.databind.JsonNode.isLong()
  - com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  - com.fasterxml.jackson.databind.JsonNode.isNull()
  - com.fasterxml.jackson.databind.JsonNode.isNumber()
  - com.fasterxml.jackson.databind.JsonNode.isObject()
  - com.fasterxml.jackson.databind.JsonNode.isPojo()
  - com.fasterxml.jackson.databind.JsonNode.isShort()
  - com.fasterxml.jackson.databind.JsonNode.isTextual()
  - com.fasterxml.jackson.databind.JsonNode.isValueNode()
  - com.fasterxml.jackson.databind.JsonNode.iterator()
  - com.fasterxml.jackson.databind.JsonNode.longValue()
  - com.fasterxml.jackson.databind.JsonNode.numberValue()
  - com.fasterxml.jackson.databind.JsonNode.path(int)
  - com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
  - com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
  - com.fasterxml.jackson.databind.JsonNode.shortValue()
  - com.fasterxml.jackson.databind.JsonNode.size()
  - com.fasterxml.jackson.databind.JsonNode.textValue()
  - com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.asToken()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.findPath(java.lang.String)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.hashCode()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.numberType()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.required(int)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.required(java.lang.String)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.toString()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.traverse()
  - com.fasterxml.jackson.databind.node.BaseJsonNode.traverse(com.fasterxml.jackson.core.ObjectCodec)
  - java.lang.Object.clone()
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy()
  id: <T>deepCopy()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: <T>deepCopy()
  nameWithType: ValueNode.<T>deepCopy()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy()
  overload: com.fasterxml.jackson.databind.node.ValueNode.deepCopy*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: All current value nodes are immutable, so we can just return them as is.
  syntax:
    content: public T <T>deepCopy()
    return:
      type: T
- uid: com.fasterxml.jackson.databind.node.ValueNode.ValueNode()
  id: ValueNode()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: ValueNode()
  nameWithType: ValueNode.ValueNode()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.ValueNode()
  overload: com.fasterxml.jackson.databind.node.ValueNode.ValueNode*
  type: Constructor
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected ValueNode()
- uid: com.fasterxml.jackson.databind.node.ValueNode._at(com.fasterxml.jackson.core.JsonPointer)
  id: _at(com.fasterxml.jackson.core.JsonPointer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: _at(JsonPointer ptr)
  nameWithType: ValueNode._at(JsonPointer ptr)
  fullName: com.fasterxml.jackson.databind.node.ValueNode._at(JsonPointer ptr)
  overload: com.fasterxml.jackson.databind.node.ValueNode._at*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: protected JsonNode _at(JsonPointer ptr)
    parameters:
    - id: ptr
      type: com.fasterxml.jackson.core.JsonPointer
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.asToken()
  id: asToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: asToken()
  nameWithType: ValueNode.asToken()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.asToken()
  overload: com.fasterxml.jackson.databind.node.ValueNode.asToken*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method that can be used for efficient type detection when using stream abstraction for traversing nodes. Will return the first <xref uid="com.fasterxml.jackson.core.JsonToken" data-throw-if-not-resolved="false">JsonToken</xref> that equivalent stream event would produce (for most nodes there is just one token but for structured/container types multiple)
  syntax:
    content: public abstract JsonToken asToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParent(java.lang.String)
  id: findParent(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: findParent(String fieldName)
  nameWithType: ValueNode.findParent(String fieldName)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParent(String fieldName)
  overload: com.fasterxml.jackson.databind.node.ValueNode.findParent*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method for finding a JSON Object that contains specified field, within this node or its descendants. If no matching field is found in this node or its descendants, returns null.
  syntax:
    content: public final ObjectNode findParent(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  id: findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: findParents(String fieldName, List<JsonNode> foundSoFar)
  nameWithType: ValueNode.findParents(String fieldName, List<JsonNode> foundSoFar)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParents(String fieldName, List<JsonNode> foundSoFar)
  overload: com.fasterxml.jackson.databind.node.ValueNode.findParents*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public final List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: foundSoFar
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
    return:
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValue(java.lang.String)
  id: findValue(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: findValue(String fieldName)
  nameWithType: ValueNode.findValue(String fieldName)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValue(String fieldName)
  overload: com.fasterxml.jackson.databind.node.ValueNode.findValue*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Method for finding a JSON Object field with specified name in this node or its child nodes, and returning value it has. If no matching field is found in this node or its descendants, returns null.
  syntax:
    content: public final JsonNode findValue(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  id: findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: findValues(String fieldName, List<JsonNode> foundSoFar)
  nameWithType: ValueNode.findValues(String fieldName, List<JsonNode> foundSoFar)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValues(String fieldName, List<JsonNode> foundSoFar)
  overload: com.fasterxml.jackson.databind.node.ValueNode.findValues*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public final List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: foundSoFar
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
    return:
      type: java.util.List<com.fasterxml.jackson.databind.JsonNode>
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  id: findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: findValuesAsText(String fieldName, List<String> foundSoFar)
  nameWithType: ValueNode.findValuesAsText(String fieldName, List<String> foundSoFar)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText(String fieldName, List<String> foundSoFar)
  overload: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText*
  type: Method
  package: com.fasterxml.jackson.databind.node
  syntax:
    content: public final List<String> findValuesAsText(String fieldName, List<String> foundSoFar)
    parameters:
    - id: fieldName
      type: java.lang.String
    - id: foundSoFar
      type: java.util.List<java.lang.String>
    return:
      type: java.util.List<java.lang.String>
- uid: com.fasterxml.jackson.databind.node.ValueNode.get(int)
  id: get(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: get(int index)
  nameWithType: ValueNode.get(int index)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.get(int index)
  overload: com.fasterxml.jackson.databind.node.ValueNode.get*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method for accessing value of the specified element of an array node. For other nodes, null is always returned.


    For array nodes, index specifies exact location within array and allows for efficient iteration over child elements (underlying storage is guaranteed to be efficiently indexable, i.e. has random-access to elements). If index is less than 0, or equal-or-greater than `node.size()`, null is returned; no exception is thrown for any index.


    NOTE: if the element value has been explicitly set as `null` (which is different from removal!), a <xref uid="com.fasterxml.jackson.databind.node.NullNode" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node.NullNode</xref> will be returned, not null.
  syntax:
    content: public final JsonNode get(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.get(java.lang.String)
  id: get(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: get(String fieldName)
  nameWithType: ValueNode.get(String fieldName)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.get(String fieldName)
  overload: com.fasterxml.jackson.databind.node.ValueNode.get*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method for accessing value of the specified field of an object node. If this node is not an object (or it does not have a value for specified field name), or if there is no field with such name, null is returned.


    NOTE: if the property value has been explicitly set as `null` (which is different from removal!), a <xref uid="com.fasterxml.jackson.databind.node.NullNode" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.node.NullNode</xref> will be returned, not null.
  syntax:
    content: public final JsonNode get(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.has(int)
  id: has(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: has(int index)
  nameWithType: ValueNode.has(int index)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.has(int index)
  overload: com.fasterxml.jackson.databind.node.ValueNode.has*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that allows checking whether this node is JSON Array node and contains a value for specified index If this is the case (including case of specified indexing having null as value), returns true; otherwise returns false.


    Note: array element indexes are 0-based.


    This method is equivalent to:


    ```java

    node.get(index) != null

    ```


    NOTE: this method will return `true` for explicitly added null values.
  syntax:
    content: public final boolean has(int index)
    parameters:
    - id: index
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.ValueNode.has(java.lang.String)
  id: has(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: has(String fieldName)
  nameWithType: ValueNode.has(String fieldName)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.has(String fieldName)
  overload: com.fasterxml.jackson.databind.node.ValueNode.has*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that allows checking whether this node is JSON Object node and contains value for specified property. If this is the case (including properties with explicit null values), returns true; otherwise returns false.


    This method is equivalent to:


    ```java

    node.get(fieldName) != null

    ```


    (since return value of get() is node, not value node contains)


    NOTE: when explicit `null` values are added, this method will return `true` for such properties.
  syntax:
    content: public final boolean has(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(int)
  id: hasNonNull(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: hasNonNull(int index)
  nameWithType: ValueNode.hasNonNull(int index)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(int index)
  overload: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that is similar to <xref uid="com.fasterxml.jackson.databind.node.ValueNode.has(int)" data-throw-if-not-resolved="false">#has(int)</xref>, but that will return `false` for explicitly added nulls.


    This method is equivalent to:


    ```java

    node.get(index) != null && !node.get(index).isNull()

    ```
  syntax:
    content: public final boolean hasNonNull(int index)
    parameters:
    - id: index
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(java.lang.String)
  id: hasNonNull(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: hasNonNull(String fieldName)
  nameWithType: ValueNode.hasNonNull(String fieldName)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull(String fieldName)
  overload: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Method that is similar to <xref uid="com.fasterxml.jackson.databind.node.ValueNode.has(java.lang.String)" data-throw-if-not-resolved="false">#has(String)</xref>, but that will return `false` for explicitly added nulls.


    This method is functionally equivalent to:


    ```java

    node.get(fieldName) != null && !node.get(fieldName).isNull()

    ```
  syntax:
    content: public final boolean hasNonNull(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.ValueNode.isEmpty()
  id: isEmpty()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: isEmpty()
  nameWithType: ValueNode.isEmpty()
  fullName: com.fasterxml.jackson.databind.node.ValueNode.isEmpty()
  overload: com.fasterxml.jackson.databind.node.ValueNode.isEmpty*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: >-
    Convenience method that is functionally same as:


    ```java

    size() == 0

    ```


    for all node types.
  syntax:
    content: public boolean isEmpty()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.node.ValueNode.path(int)
  id: path(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: path(int index)
  nameWithType: ValueNode.path(int index)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.path(int index)
  overload: com.fasterxml.jackson.databind.node.ValueNode.path*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: This method is similar to <xref uid="com.fasterxml.jackson.databind.node.ValueNode.get(int)" data-throw-if-not-resolved="false">#get(int)</xref>, except that instead of returning null if no such element exists (due to index being out of range, or this node not being an array), a "missing node" (node that returns true for <xref uid="com.fasterxml.jackson.databind.node.ValueNode.isMissingNode" data-throw-if-not-resolved="false">#isMissingNode</xref>) will be returned. This allows for convenient and safe chained access via path calls.
  syntax:
    content: public final JsonNode path(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.path(java.lang.String)
  id: path(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: path(String fieldName)
  nameWithType: ValueNode.path(String fieldName)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.path(String fieldName)
  overload: com.fasterxml.jackson.databind.node.ValueNode.path*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: This method is similar to <xref uid="com.fasterxml.jackson.databind.node.ValueNode.get(java.lang.String)" data-throw-if-not-resolved="false">#get(String)</xref>, except that instead of returning null if no such value exists (due to this node not being an object, or object not having value for the specified field), a "missing node" (node that returns true for <xref uid="com.fasterxml.jackson.databind.node.ValueNode.isMissingNode" data-throw-if-not-resolved="false">#isMissingNode</xref>) will be returned. This allows for convenient and safe chained access via path calls.
  syntax:
    content: public final JsonNode path(String fieldName)
    parameters:
    - id: fieldName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.node.ValueNode
  langs:
  - java
  name: serializeWithType(JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: ValueNode.serializeWithType(JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType(JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.node
  summary: Type information is needed, even if JsonNode instances are "plain" JSON, since they may be mixed with other types.
  syntax:
    content: public void serializeWithType(JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.databind.node.ValueNode.ValueNode*
  name: ValueNode
  nameWithType: ValueNode.ValueNode
  fullName: com.fasterxml.jackson.databind.node.ValueNode.ValueNode
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonPointer
  name: JsonPointer
  nameWithType: JsonPointer
  fullName: com.fasterxml.jackson.core.JsonPointer
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.node.ValueNode._at*
  name: _at
  nameWithType: ValueNode._at
  fullName: com.fasterxml.jackson.databind.node.ValueNode._at
  package: com.fasterxml.jackson.databind.node
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.node.ValueNode.deepCopy*
  name: <T>deepCopy
  nameWithType: ValueNode.<T>deepCopy
  fullName: com.fasterxml.jackson.databind.node.ValueNode.<T>deepCopy
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.databind.node.ValueNode.asToken*
  name: asToken
  nameWithType: ValueNode.asToken
  fullName: com.fasterxml.jackson.databind.node.ValueNode.asToken
  package: com.fasterxml.jackson.databind.node
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType*
  name: serializeWithType
  nameWithType: ValueNode.serializeWithType
  fullName: com.fasterxml.jackson.databind.node.ValueNode.serializeWithType
  package: com.fasterxml.jackson.databind.node
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.node.ValueNode.isEmpty*
  name: isEmpty
  nameWithType: ValueNode.isEmpty
  fullName: com.fasterxml.jackson.databind.node.ValueNode.isEmpty
  package: com.fasterxml.jackson.databind.node
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.databind.node.ValueNode.get*
  name: get
  nameWithType: ValueNode.get
  fullName: com.fasterxml.jackson.databind.node.ValueNode.get
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ValueNode.path*
  name: path
  nameWithType: ValueNode.path
  fullName: com.fasterxml.jackson.databind.node.ValueNode.path
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ValueNode.has*
  name: has
  nameWithType: ValueNode.has
  fullName: com.fasterxml.jackson.databind.node.ValueNode.has
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull*
  name: hasNonNull
  nameWithType: ValueNode.hasNonNull
  fullName: com.fasterxml.jackson.databind.node.ValueNode.hasNonNull
  package: com.fasterxml.jackson.databind.node
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValue*
  name: findValue
  nameWithType: ValueNode.findValue
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValue
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ObjectNode
  name: ObjectNode
  nameWithType: ObjectNode
  fullName: com.fasterxml.jackson.databind.node.ObjectNode
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParent*
  name: findParent
  nameWithType: ValueNode.findParent
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParent
  package: com.fasterxml.jackson.databind.node
- uid: java.util.List<com.fasterxml.jackson.databind.JsonNode>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.JsonNode
    name: JsonNode
    fullName: com.fasterxml.jackson.databind.JsonNode
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValues*
  name: findValues
  nameWithType: ValueNode.findValues
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValues
  package: com.fasterxml.jackson.databind.node
- uid: java.util.List<java.lang.String>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText*
  name: findValuesAsText
  nameWithType: ValueNode.findValuesAsText
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findValuesAsText
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.ValueNode.findParents*
  name: findParents
  nameWithType: ValueNode.findParents
  fullName: com.fasterxml.jackson.databind.node.ValueNode.findParents
  package: com.fasterxml.jackson.databind.node
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode
  name: BaseJsonNode
  nameWithType: BaseJsonNode
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.JsonNode.get(int)
  name: JsonNode.get(int)
  nameWithType: JsonNode.get(int)
  fullName: com.fasterxml.jackson.databind.JsonNode.get(int)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
  name: JsonNode.findValuesAsText(String,List<String>)
  nameWithType: JsonNode.findValuesAsText(String,List<String>)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List<java.lang.String>)
- uid: com.fasterxml.jackson.databind.JsonNode.doubleValue()
  name: JsonNode.doubleValue()
  nameWithType: JsonNode.doubleValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.doubleValue()
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
  name: JsonNode.requiredAt(JsonPointer)
  nameWithType: JsonNode.requiredAt(JsonPointer)
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt(com.fasterxml.jackson.core.JsonPointer)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: BaseJsonNode.serialize(JsonGenerator,SerializerProvider)
  nameWithType: BaseJsonNode.serialize(JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.serialize(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.JsonNode.iterator()
  name: JsonNode.iterator()
  nameWithType: JsonNode.iterator()
  fullName: com.fasterxml.jackson.databind.JsonNode.iterator()
- uid: com.fasterxml.jackson.databind.JsonNode.asText()
  name: JsonNode.asText()
  nameWithType: JsonNode.asText()
  fullName: com.fasterxml.jackson.databind.JsonNode.asText()
- uid: com.fasterxml.jackson.databind.JsonNode.decimalValue()
  name: JsonNode.decimalValue()
  nameWithType: JsonNode.decimalValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.decimalValue()
- uid: com.fasterxml.jackson.databind.JsonNode.findValue(java.lang.String)
  name: JsonNode.findValue(String)
  nameWithType: JsonNode.findValue(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValue(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.hasNonNull(int)
  name: JsonNode.hasNonNull(int)
  nameWithType: JsonNode.hasNonNull(int)
  fullName: com.fasterxml.jackson.databind.JsonNode.hasNonNull(int)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.required(int)
  name: BaseJsonNode.required(int)
  nameWithType: BaseJsonNode.required(int)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.required(int)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
  name: JsonNode.findValuesAsText(String)
  nameWithType: JsonNode.findValuesAsText(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.JsonNode.isMissingNode()
  name: JsonNode.isMissingNode()
  nameWithType: JsonNode.isMissingNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isMissingNode()
- uid: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
  name: JsonNode.findValues(String)
  nameWithType: JsonNode.findValues(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.findPath(java.lang.String)
  name: BaseJsonNode.findPath(String)
  nameWithType: BaseJsonNode.findPath(String)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.findPath(java.lang.String)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.JsonNode.hasNonNull(java.lang.String)
  name: JsonNode.hasNonNull(String)
  nameWithType: JsonNode.hasNonNull(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.hasNonNull(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.<T>require()
  name: JsonNode.<T>require()
  nameWithType: JsonNode.<T>require()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>require()
- uid: com.fasterxml.jackson.databind.JsonNode.numberValue()
  name: JsonNode.numberValue()
  nameWithType: JsonNode.numberValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.numberValue()
- uid: com.fasterxml.jackson.databind.JsonNode.textValue()
  name: JsonNode.textValue()
  nameWithType: JsonNode.textValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.textValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isContainerNode()
  name: JsonNode.isContainerNode()
  nameWithType: JsonNode.isContainerNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isContainerNode()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>_this()
  name: JsonNode.<T>_this()
  nameWithType: JsonNode.<T>_this()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_this()
- uid: com.fasterxml.jackson.databind.JsonNode.isValueNode()
  name: JsonNode.isValueNode()
  nameWithType: JsonNode.isValueNode()
  fullName: com.fasterxml.jackson.databind.JsonNode.isValueNode()
- uid: com.fasterxml.jackson.databind.JsonNode.asDouble()
  name: JsonNode.asDouble()
  nameWithType: JsonNode.asDouble()
  fullName: com.fasterxml.jackson.databind.JsonNode.asDouble()
- uid: com.fasterxml.jackson.databind.JsonNode.findParent(java.lang.String)
  name: JsonNode.findParent(String)
  nameWithType: JsonNode.findParent(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParent(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()
  name: JsonNode.bigIntegerValue()
  nameWithType: JsonNode.bigIntegerValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.bigIntegerValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isTextual()
  name: JsonNode.isTextual()
  nameWithType: JsonNode.isTextual()
  fullName: com.fasterxml.jackson.databind.JsonNode.isTextual()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
  name: JsonNode.<T>requireNonNull()
  nameWithType: JsonNode.<T>requireNonNull()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>requireNonNull()
- uid: com.fasterxml.jackson.databind.JsonNode.isObject()
  name: JsonNode.isObject()
  nameWithType: JsonNode.isObject()
  fullName: com.fasterxml.jackson.databind.JsonNode.isObject()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString()
  name: BaseJsonNode.toPrettyString()
  nameWithType: BaseJsonNode.toPrettyString()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.toPrettyString()
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean()
  name: JsonNode.asBoolean()
  nameWithType: JsonNode.asBoolean()
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean()
- uid: com.fasterxml.jackson.databind.JsonNode.isPojo()
  name: JsonNode.isPojo()
  nameWithType: JsonNode.isPojo()
  fullName: com.fasterxml.jackson.databind.JsonNode.isPojo()
- uid: com.fasterxml.jackson.databind.JsonNode.size()
  name: JsonNode.size()
  nameWithType: JsonNode.size()
  fullName: com.fasterxml.jackson.databind.JsonNode.size()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse()
  name: BaseJsonNode.traverse()
  nameWithType: BaseJsonNode.traverse()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.required(java.lang.String)
  name: BaseJsonNode.required(String)
  nameWithType: BaseJsonNode.required(String)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.required(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.asDouble(double)
  name: JsonNode.asDouble(double)
  nameWithType: JsonNode.asDouble(double)
  fullName: com.fasterxml.jackson.databind.JsonNode.asDouble(double)
- uid: com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
  name: JsonNode.asText(String)
  nameWithType: JsonNode.asText(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.asText(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse(com.fasterxml.jackson.core.ObjectCodec)
  name: BaseJsonNode.traverse(ObjectCodec)
  nameWithType: BaseJsonNode.traverse(ObjectCodec)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.traverse(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
  name: JsonSerializable.Base.isEmpty(SerializerProvider)
  nameWithType: JsonSerializable.Base.isEmpty(SerializerProvider)
  fullName: com.fasterxml.jackson.databind.JsonSerializable.Base.isEmpty(com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.JsonNode.isNull()
  name: JsonNode.isNull()
  nameWithType: JsonNode.isNull()
  fullName: com.fasterxml.jackson.databind.JsonNode.isNull()
- uid: com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)
  name: JsonNode.get(String)
  nameWithType: JsonNode.get(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.get(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.booleanValue()
  name: JsonNode.booleanValue()
  nameWithType: JsonNode.booleanValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.booleanValue()
- uid: com.fasterxml.jackson.databind.JsonNode.asLong(long)
  name: JsonNode.asLong(long)
  nameWithType: JsonNode.asLong(long)
  fullName: com.fasterxml.jackson.databind.JsonNode.asLong(long)
- uid: com.fasterxml.jackson.databind.JsonNode.fields()
  name: JsonNode.fields()
  nameWithType: JsonNode.fields()
  fullName: com.fasterxml.jackson.databind.JsonNode.fields()
- uid: com.fasterxml.jackson.databind.JsonNode._at(com.fasterxml.jackson.core.JsonPointer)
  name: JsonNode._at(JsonPointer)
  nameWithType: JsonNode._at(JsonPointer)
  fullName: com.fasterxml.jackson.databind.JsonNode._at(com.fasterxml.jackson.core.JsonPointer)
- uid: com.fasterxml.jackson.databind.JsonNode.asLong()
  name: JsonNode.asLong()
  nameWithType: JsonNode.asLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.asLong()
- uid: com.fasterxml.jackson.databind.JsonNode.isShort()
  name: JsonNode.isShort()
  nameWithType: JsonNode.isShort()
  fullName: com.fasterxml.jackson.databind.JsonNode.isShort()
- uid: com.fasterxml.jackson.databind.JsonNode.isLong()
  name: JsonNode.isLong()
  nameWithType: JsonNode.isLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.isLong()
- uid: com.fasterxml.jackson.databind.JsonNode.asInt(int)
  name: JsonNode.asInt(int)
  nameWithType: JsonNode.asInt(int)
  fullName: com.fasterxml.jackson.databind.JsonNode.asInt(int)
- uid: com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)
  name: JsonNode.path(String)
  nameWithType: JsonNode.path(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.path(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.isFloat()
  name: JsonNode.isFloat()
  nameWithType: JsonNode.isFloat()
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloat()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.toString()
  name: BaseJsonNode.toString()
  nameWithType: BaseJsonNode.toString()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.toString()
- uid: com.fasterxml.jackson.databind.JsonNode.elements()
  name: JsonNode.elements()
  nameWithType: JsonNode.elements()
  fullName: com.fasterxml.jackson.databind.JsonNode.elements()
- uid: com.fasterxml.jackson.databind.JsonNode.canConvertToInt()
  name: JsonNode.canConvertToInt()
  nameWithType: JsonNode.canConvertToInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.canConvertToInt()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
  name: JsonNode.equals(Object)
  nameWithType: JsonNode.equals(Object)
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  name: JsonNode.findParents(String,List<JsonNode>)
  nameWithType: JsonNode.findParents(String,List<JsonNode>)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
- uid: com.fasterxml.jackson.databind.JsonNode.isBigInteger()
  name: JsonNode.isBigInteger()
  nameWithType: JsonNode.isBigInteger()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigInteger()
- uid: com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
  name: JsonNode.at(JsonPointer)
  nameWithType: JsonNode.at(JsonPointer)
  fullName: com.fasterxml.jackson.databind.JsonNode.at(com.fasterxml.jackson.core.JsonPointer)
- uid: com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
  name: JsonNode.requiredAt(String)
  nameWithType: JsonNode.requiredAt(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.requiredAt(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.isInt()
  name: JsonNode.isInt()
  nameWithType: JsonNode.isInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.isInt()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.JsonNode.path(int)
  name: JsonNode.path(int)
  nameWithType: JsonNode.path(int)
  fullName: com.fasterxml.jackson.databind.JsonNode.path(int)
- uid: com.fasterxml.jackson.databind.JsonNode.asInt()
  name: JsonNode.asInt()
  nameWithType: JsonNode.asInt()
  fullName: com.fasterxml.jackson.databind.JsonNode.asInt()
- uid: com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
  name: JsonNode.at(String)
  nameWithType: JsonNode.at(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.at(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.has(int)
  name: JsonNode.has(int)
  nameWithType: JsonNode.has(int)
  fullName: com.fasterxml.jackson.databind.JsonNode.has(int)
- uid: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
  name: JsonNode.isFloatingPointNumber()
  nameWithType: JsonNode.isFloatingPointNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isFloatingPointNumber()
- uid: com.fasterxml.jackson.databind.JsonNode.intValue()
  name: JsonNode.intValue()
  nameWithType: JsonNode.intValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.intValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isBoolean()
  name: JsonNode.isBoolean()
  nameWithType: JsonNode.isBoolean()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBoolean()
- uid: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
  name: JsonNode.findValues(String,List<JsonNode>)
  nameWithType: JsonNode.findValues(String,List<JsonNode>)
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List<com.fasterxml.jackson.databind.JsonNode>)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.numberType()
  name: BaseJsonNode.numberType()
  nameWithType: BaseJsonNode.numberType()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.numberType()
- uid: com.fasterxml.jackson.databind.JsonNode.binaryValue()
  name: JsonNode.binaryValue()
  nameWithType: JsonNode.binaryValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.binaryValue()
- uid: com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
  name: JsonNode.isBigDecimal()
  nameWithType: JsonNode.isBigDecimal()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBigDecimal()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.asToken()
  name: BaseJsonNode.asToken()
  nameWithType: BaseJsonNode.asToken()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.asToken()
- uid: com.fasterxml.jackson.databind.JsonNode.isDouble()
  name: JsonNode.isDouble()
  nameWithType: JsonNode.isDouble()
  fullName: com.fasterxml.jackson.databind.JsonNode.isDouble()
- uid: com.fasterxml.jackson.databind.JsonNode.longValue()
  name: JsonNode.longValue()
  nameWithType: JsonNode.longValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.longValue()
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  name: JsonNode.equals(Comparator<JsonNode>,JsonNode)
  nameWithType: JsonNode.equals(Comparator<JsonNode>,JsonNode)
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator<com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
- uid: com.fasterxml.jackson.databind.JsonNode.floatValue()
  name: JsonNode.floatValue()
  nameWithType: JsonNode.floatValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.floatValue()
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: BaseJsonNode.serializeWithType(JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: BaseJsonNode.serializeWithType(JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.serializeWithType(com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.JsonNode.isArray()
  name: JsonNode.isArray()
  nameWithType: JsonNode.isArray()
  fullName: com.fasterxml.jackson.databind.JsonNode.isArray()
- uid: com.fasterxml.jackson.databind.JsonNode.fieldNames()
  name: JsonNode.fieldNames()
  nameWithType: JsonNode.fieldNames()
  fullName: com.fasterxml.jackson.databind.JsonNode.fieldNames()
- uid: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
  name: JsonNode.isIntegralNumber()
  nameWithType: JsonNode.isIntegralNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isIntegralNumber()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
  name: JsonNode.<T>with(String)
  nameWithType: JsonNode.<T>with(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>with(java.lang.String)
- uid: com.fasterxml.jackson.databind.node.BaseJsonNode.hashCode()
  name: BaseJsonNode.hashCode()
  nameWithType: BaseJsonNode.hashCode()
  fullName: com.fasterxml.jackson.databind.node.BaseJsonNode.hashCode()
- uid: com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)
  name: JsonNode.has(String)
  nameWithType: JsonNode.has(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.has(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.shortValue()
  name: JsonNode.shortValue()
  nameWithType: JsonNode.shortValue()
  fullName: com.fasterxml.jackson.databind.JsonNode.shortValue()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  name: JsonNode.<T>_reportRequiredViolation(String,Object)
  nameWithType: JsonNode.<T>_reportRequiredViolation(String,Object)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
- uid: com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
  name: JsonNode.<T>withArray(String)
  nameWithType: JsonNode.<T>withArray(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>withArray(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.isEmpty()
  name: JsonNode.isEmpty()
  nameWithType: JsonNode.isEmpty()
  fullName: com.fasterxml.jackson.databind.JsonNode.isEmpty()
- uid: com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()
  name: JsonNode.<T>deepCopy()
  nameWithType: JsonNode.<T>deepCopy()
  fullName: com.fasterxml.jackson.databind.JsonNode.<T>deepCopy()
- uid: com.fasterxml.jackson.databind.JsonNode.isBinary()
  name: JsonNode.isBinary()
  nameWithType: JsonNode.isBinary()
  fullName: com.fasterxml.jackson.databind.JsonNode.isBinary()
- uid: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
  name: JsonNode.findParents(String)
  nameWithType: JsonNode.findParents(String)
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonNode.getNodeType()
  name: JsonNode.getNodeType()
  nameWithType: JsonNode.getNodeType()
  fullName: com.fasterxml.jackson.databind.JsonNode.getNodeType()
- uid: com.fasterxml.jackson.databind.JsonNode.isNumber()
  name: JsonNode.isNumber()
  nameWithType: JsonNode.isNumber()
  fullName: com.fasterxml.jackson.databind.JsonNode.isNumber()
- uid: com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
  name: JsonNode.asBoolean(boolean)
  nameWithType: JsonNode.asBoolean(boolean)
  fullName: com.fasterxml.jackson.databind.JsonNode.asBoolean(boolean)
- uid: com.fasterxml.jackson.databind.JsonNode.canConvertToLong()
  name: JsonNode.canConvertToLong()
  nameWithType: JsonNode.canConvertToLong()
  fullName: com.fasterxml.jackson.databind.JsonNode.canConvertToLong()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.String>)
  name: String>)
  nameWithType: String>)
  fullName: java.lang.String>)
- uid: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List
  name: JsonNode.findValuesAsText(String,List
  nameWithType: JsonNode.findValuesAsText(String,List
  fullName: com.fasterxml.jackson.databind.JsonNode.findValuesAsText(java.lang.String,java.util.List
- uid: T>require()
  name: T>require()
  nameWithType: T>require()
  fullName: T>require()
- uid: com.fasterxml.jackson.databind.JsonNode.
  name: JsonNode.
  nameWithType: JsonNode.
  fullName: com.fasterxml.jackson.databind.JsonNode.
- uid: T>_this()
  name: T>_this()
  nameWithType: T>_this()
  fullName: T>_this()
- uid: T>requireNonNull()
  name: T>requireNonNull()
  nameWithType: T>requireNonNull()
  fullName: T>requireNonNull()
- uid: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List
  name: JsonNode.findParents(String,List
  nameWithType: JsonNode.findParents(String,List
  fullName: com.fasterxml.jackson.databind.JsonNode.findParents(java.lang.String,java.util.List
- uid: com.fasterxml.jackson.databind.JsonNode>)
  name: JsonNode>)
  nameWithType: JsonNode>)
  fullName: com.fasterxml.jackson.databind.JsonNode>)
- uid: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List
  name: JsonNode.findValues(String,List
  nameWithType: JsonNode.findValues(String,List
  fullName: com.fasterxml.jackson.databind.JsonNode.findValues(java.lang.String,java.util.List
- uid: com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
  name: JsonNode>,JsonNode)
  nameWithType: JsonNode>,JsonNode)
  fullName: com.fasterxml.jackson.databind.JsonNode>,com.fasterxml.jackson.databind.JsonNode)
- uid: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator
  name: JsonNode.equals(Comparator
  nameWithType: JsonNode.equals(Comparator
  fullName: com.fasterxml.jackson.databind.JsonNode.equals(java.util.Comparator
- uid: T>with(java.lang.String)
  name: T>with(String)
  nameWithType: T>with(String)
  fullName: T>with(java.lang.String)
- uid: T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
  name: T>_reportRequiredViolation(String,Object)
  nameWithType: T>_reportRequiredViolation(String,Object)
  fullName: T>_reportRequiredViolation(java.lang.String,java.lang.Object...)
- uid: T>withArray(java.lang.String)
  name: T>withArray(String)
  nameWithType: T>withArray(String)
  fullName: T>withArray(java.lang.String)
- uid: T>deepCopy()
  name: T>deepCopy()
  nameWithType: T>deepCopy()
  fullName: T>deepCopy()
