### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.uniqueIndex*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex"
name: "<K,V>uniqueIndex"
nameWithType: "Maps.<K,V>uniqueIndex"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex(java.lang.Iterable<V>,com.azure.cosmos.implementation.guava25.base.Function<? super V,K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex(Iterable<V> values, Function<? super V,K> keyFunction)"
  name: "<K,V>uniqueIndex(Iterable<V> values, Function<? super V,K> keyFunction)"
  nameWithType: "Maps.<K,V>uniqueIndex(Iterable<V> values, Function<? super V,K> keyFunction)"
  summary: "Returns a map with the given `values`, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying `keyFunction` to that value. These entries appear in the same order as the input values. Example usage:\n\n```java\nColor red = new Color(\"red\", 255, 0, 0);\n ...\n ImmutableSet allColors = ImmutableSet.of(red, green, blue);\n\n Map colorForName =\n     uniqueIndex(allColors, toStringFunction());\n assertThat(colorForName).containsEntry(\"red\", red);\n```\n\nIf your index may associate multiple values with each key, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.&lt;K,V&gt;index(java.lang.Iterable&lt;V&gt;,com.azure.cosmos.implementation.guava25.base.Function&lt;? super V,K&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimaps.index\"></xref>."
  parameters:
  - description: "the values to use when constructing the <code>Map</code>"
    name: "values"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the function used to produce the key for each value"
    name: "keyFunction"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super V?alt=? super V&text=? super V\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ImmutableMap<K,V> <K,V>uniqueIndex(Iterable<V> values, Function<? super V,K> keyFunction)"
  returns:
    description: "a map mapping the result of evaluating the function <code>keyFunction</code> on each value\n     in the input collection to that value"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMap?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableMap&text=ImmutableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex(java.util.Iterator<V>,com.azure.cosmos.implementation.guava25.base.Function<? super V,K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>uniqueIndex(Iterator<V> values, Function<? super V,K> keyFunction)"
  name: "<K,V>uniqueIndex(Iterator<V> values, Function<? super V,K> keyFunction)"
  nameWithType: "Maps.<K,V>uniqueIndex(Iterator<V> values, Function<? super V,K> keyFunction)"
  summary: "Returns a map with the given `values`, indexed by keys derived from those values. In other words, each input value produces an entry in the map whose key is the result of applying `keyFunction` to that value. These entries appear in the same order as the input values. Example usage:\n\n```java\nColor red = new Color(\"red\", 255, 0, 0);\n ...\n Iterator allColors = ImmutableSet.of(red, green, blue).iterator();\n\n Map colorForName =\n     uniqueIndex(allColors, toStringFunction());\n assertThat(colorForName).containsEntry(\"red\", red);\n```\n\nIf your index may associate multiple values with each key, use <xref uid=\"com.azure.cosmos.implementation.guava25.collect.Multimaps.&lt;K,V&gt;index(java.util.Iterator&lt;V&gt;,com.azure.cosmos.implementation.guava25.base.Function&lt;? super V,K&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Multimaps.index\"></xref>."
  parameters:
  - description: "the values to use when constructing the <code>Map</code>"
    name: "values"
    type: "<xref href=\"java.util.Iterator?alt=java.util.Iterator&text=Iterator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "the function used to produce the key for each value"
    name: "keyFunction"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super V?alt=? super V&text=? super V\" data-throw-if-not-resolved=\"False\" />,<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ImmutableMap<K,V> <K,V>uniqueIndex(Iterator<V> values, Function<? super V,K> keyFunction)"
  returns:
    description: "a map mapping the result of evaluating the function <code>keyFunction</code> on each value\n     in the input collection to that value"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableMap?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableMap&text=ImmutableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
