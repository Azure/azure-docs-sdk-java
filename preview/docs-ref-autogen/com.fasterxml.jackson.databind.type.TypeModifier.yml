### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.type.TypeModifier
  id: TypeModifier
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type
  children:
  - com.fasterxml.jackson.databind.type.TypeModifier.TypeModifier()
  - com.fasterxml.jackson.databind.type.TypeModifier.modifyType(com.fasterxml.jackson.databind.JavaType,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.type.TypeFactory)
  langs:
  - java
  name: TypeModifier
  nameWithType: TypeModifier
  fullName: com.fasterxml.jackson.databind.type.TypeModifier
  type: Class
  package: com.fasterxml.jackson.databind.type
  summary: Class that defines API that can be used to modify details of <xref uid="com.fasterxml.jackson.databind.JavaType" data-throw-if-not-resolved="false">JavaType</xref> instances constructed using <xref uid="com.fasterxml.jackson.databind.type.TypeFactory" data-throw-if-not-resolved="false">TypeFactory</xref>. Registered modifiers are called in order, to let them modify (or replace) basic type instance factory constructs. This is typically needed to support creation of <xref uid="com.fasterxml.jackson.databind.type.MapLikeType" data-throw-if-not-resolved="false">MapLikeType</xref> and <xref uid="com.fasterxml.jackson.databind.type.CollectionLikeType" data-throw-if-not-resolved="false">CollectionLikeType</xref> instances, as those cannot be constructed in generic fashion.
  syntax:
    content: public abstract class TypeModifier
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.type.TypeModifier.TypeModifier()
  id: TypeModifier()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeModifier
  langs:
  - java
  name: TypeModifier()
  nameWithType: TypeModifier.TypeModifier()
  fullName: com.fasterxml.jackson.databind.type.TypeModifier.TypeModifier()
  overload: com.fasterxml.jackson.databind.type.TypeModifier.TypeModifier*
  type: Constructor
  package: com.fasterxml.jackson.databind.type
  syntax:
    content: public TypeModifier()
- uid: com.fasterxml.jackson.databind.type.TypeModifier.modifyType(com.fasterxml.jackson.databind.JavaType,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.type.TypeFactory)
  id: modifyType(com.fasterxml.jackson.databind.JavaType,java.lang.reflect.Type,com.fasterxml.jackson.databind.type.TypeBindings,com.fasterxml.jackson.databind.type.TypeFactory)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.type.TypeModifier
  langs:
  - java
  name: modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory)
  nameWithType: TypeModifier.modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory)
  fullName: com.fasterxml.jackson.databind.type.TypeModifier.modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory)
  overload: com.fasterxml.jackson.databind.type.TypeModifier.modifyType*
  type: Method
  package: com.fasterxml.jackson.databind.type
  summary: Method called to let modifier change constructed type definition. Note that this is only guaranteed to be called for non-container types ("simple" types not recognized as arrays, `java.util.Collection` or `java.util.Map`).
  syntax:
    content: public abstract JavaType modifyType(JavaType type, Type jdkType, TypeBindings context, TypeFactory typeFactory)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Instance to modify
    - id: jdkType
      type: java.lang.reflect.Type
      description: JDK type that was used to construct instance to modify
    - id: context
      type: com.fasterxml.jackson.databind.type.TypeBindings
      description: Type resolution context used for the type
    - id: typeFactory
      type: com.fasterxml.jackson.databind.type.TypeFactory
      description: >-
        Type factory that can be used to construct parameter type; note,
           however, that care must be taken to avoid infinite loops -- specifically, do not
           construct instance of primary type itself
    return:
      type: com.fasterxml.jackson.databind.JavaType
      description: >-
        Actual type instance to use; usually either <code>type</code> (as is or with
            modifications), or a newly constructed type instance based on it. Cannot be null.
references:
- uid: com.fasterxml.jackson.databind.type.TypeModifier.TypeModifier*
  name: TypeModifier
  nameWithType: TypeModifier.TypeModifier
  fullName: com.fasterxml.jackson.databind.type.TypeModifier.TypeModifier
  package: com.fasterxml.jackson.databind.type
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.databind.type.TypeBindings
  name: TypeBindings
  nameWithType: TypeBindings
  fullName: com.fasterxml.jackson.databind.type.TypeBindings
- uid: com.fasterxml.jackson.databind.type.TypeFactory
  name: TypeFactory
  nameWithType: TypeFactory
  fullName: com.fasterxml.jackson.databind.type.TypeFactory
- uid: com.fasterxml.jackson.databind.type.TypeModifier.modifyType*
  name: modifyType
  nameWithType: TypeModifier.modifyType
  fullName: com.fasterxml.jackson.databind.type.TypeModifier.modifyType
  package: com.fasterxml.jackson.databind.type
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
