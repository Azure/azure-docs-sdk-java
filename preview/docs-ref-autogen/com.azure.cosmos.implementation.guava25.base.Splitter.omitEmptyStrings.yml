### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Splitter.omitEmptyStrings*"
fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.omitEmptyStrings"
name: "omitEmptyStrings"
nameWithType: "Splitter.omitEmptyStrings"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.omitEmptyStrings()"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.omitEmptyStrings()"
  name: "omitEmptyStrings()"
  nameWithType: "Splitter.omitEmptyStrings()"
  summary: "Returns a splitter that behaves equivalently to `this` splitter, but automatically omits empty strings from the results. For example, `Splitter.on(',').omitEmptyStrings().split(\",a,,,b,c,,\")` returns an iterable containing only `[\"a\", \"b\", \"c\"]`.\n\nIf either `trimResults` option is also specified when creating a splitter, that splitter always trims results first before checking for emptiness. So, for example, `Splitter.on(':').omitEmptyStrings().trimResults().split(\": : : \")` returns an empty iterable.\n\nNote that it is ordinarily not possible for <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.split(java.lang.CharSequence)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#split(CharSequence)\"></xref> to return an empty iterable, but when using this option, it can (if the input sequence consists of nothing but separators)."
  syntax: "public Splitter omitEmptyStrings()"
  returns:
    description: "a splitter with the desired configuration"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
