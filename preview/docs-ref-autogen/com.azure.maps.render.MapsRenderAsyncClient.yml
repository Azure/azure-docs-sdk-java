### YamlMime:JavaType
uid: "com.azure.maps.render.MapsRenderAsyncClient"
fullName: "com.azure.maps.render.MapsRenderAsyncClient"
name: "MapsRenderAsyncClient"
nameWithType: "MapsRenderAsyncClient"
summary: "Initializes a new instance of the asynchronous Render<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **MapsRenderAsyncClient**"
methods:
- uid: "com.azure.maps.render.MapsRenderAsyncClient.downloadMapStateTile(java.lang.String,com.azure.maps.render.models.TileIndex)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.downloadMapStateTile(String statesetId, TileIndex tileIndex)"
  name: "downloadMapStateTile(String statesetId, TileIndex tileIndex)"
  nameWithType: "MapsRenderAsyncClient.downloadMapStateTile(String statesetId, TileIndex tileIndex)"
  summary: "Download Map State Tile"
  parameters:
  - description: "The stateset id"
    name: "statesetId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameter group"
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> downloadMapStateTile(String statesetId, TileIndex tileIndex)"
  desc: "Download Map State Tile"
  returns:
    description: "the map tile"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.downloadMapStateTileWithResponse(java.lang.String,com.azure.maps.render.models.TileIndex)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.downloadMapStateTileWithResponse(String statesetId, TileIndex tileIndex)"
  name: "downloadMapStateTileWithResponse(String statesetId, TileIndex tileIndex)"
  nameWithType: "MapsRenderAsyncClient.downloadMapStateTileWithResponse(String statesetId, TileIndex tileIndex)"
  summary: "Download Map State Tile"
  parameters:
  - description: "The stateset id"
    name: "statesetId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Parameter group"
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> downloadMapStateTileWithResponse(String statesetId, TileIndex tileIndex)"
  desc: "Download Map State Tile"
  returns:
    description: "the map tile"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightCaption()"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightCaption()"
  name: "getCopyrightCaption()"
  nameWithType: "MapsRenderAsyncClient.getCopyrightCaption()"
  summary: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service."
  syntax: "public Mono<CopyrightCaption> getCopyrightCaption()"
  desc: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. As an alternative to copyrights for map request, one can receive captions for displaying the map provider information on the map.\n\n```java\nSystem.out.println(\"Get Copyright Caption\");\n asyncClient.getCopyrightCaption().block();\n```"
  returns:
    description: "this object is returned from a successful copyright call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.render.models.CopyrightCaption?alt=com.azure.maps.render.models.CopyrightCaption&text=CopyrightCaption\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightCaptionWithResponse()"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightCaptionWithResponse()"
  name: "getCopyrightCaptionWithResponse()"
  nameWithType: "MapsRenderAsyncClient.getCopyrightCaptionWithResponse()"
  summary: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service."
  syntax: "public Mono<Response<CopyrightCaption>> getCopyrightCaptionWithResponse()"
  desc: "Get Copyright Caption Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. As an alternative to copyrights for map request, one can receive captions for displaying the map provider information on the map.\n\n```java\nSystem.out.println(\"Get Copyright Caption\");\n asyncClient.getCopyrightCaption().block();\n```"
  returns:
    description: "this object is returned from a successful copyright call."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.CopyrightCaption?alt=com.azure.maps.render.models.CopyrightCaption&text=CopyrightCaption\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForTile(com.azure.maps.render.models.TileIndex,boolean)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  name: "getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  nameWithType: "MapsRenderAsyncClient.getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  summary: "Get Copyright For Tile \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "Parameter group."
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Copyright> getCopyrightForTile(TileIndex tileIndex, boolean includeText)"
  desc: "Get Copyright For Tile \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for a given tile. To obtain the copyright information for a particular tile, the request should specify the tile's zoom level and x and y coordinates (see: Zoom Levels and Tile Grid).\n\n```java\nasyncClient.getCopyrightForTile(new TileIndex().setX(9).setY(22).setZ(6), true).block();\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForTileWithResponse(com.azure.maps.render.models.TileIndex,boolean)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText)"
  name: "getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText)"
  nameWithType: "MapsRenderAsyncClient.getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText)"
  summary: "Get Copyright For Tile \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "Parameter group."
    name: "tileIndex"
    type: "<xref href=\"com.azure.maps.render.models.TileIndex?alt=com.azure.maps.render.models.TileIndex&text=TileIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Copyright>> getCopyrightForTileWithResponse(TileIndex tileIndex, boolean includeText)"
  desc: "Get Copyright For Tile \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for a given tile. To obtain the copyright information for a particular tile, the request should specify the tile's zoom level and x and y coordinates (see: Zoom Levels and Tile Grid).\n\n```java\nasyncClient.getCopyrightForTile(new TileIndex().setX(9).setY(22).setZ(6), true).block();\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForWorld(boolean)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForWorld(boolean includeText)"
  name: "getCopyrightForWorld(boolean includeText)"
  nameWithType: "MapsRenderAsyncClient.getCopyrightForWorld(boolean includeText)"
  summary: "Get Copyright For World \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Copyright> getCopyrightForWorld(boolean includeText)"
  desc: "Get Copyright For World \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for the world. To obtain the default copyright information for the whole world, do not specify a tile or bounding box.\n\n```java\nasyncClient.getCopyrightForWorld(true).block();\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForWorldWithResponse(boolean)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightForWorldWithResponse(boolean includeText)"
  name: "getCopyrightForWorldWithResponse(boolean includeText)"
  nameWithType: "MapsRenderAsyncClient.getCopyrightForWorldWithResponse(boolean includeText)"
  summary: "Get Copyright For World \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Copyright>> getCopyrightForWorldWithResponse(boolean includeText)"
  desc: "Get Copyright For World \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Copyrights API is designed to serve copyright information for Render Tile service. In addition to basic copyright for the whole map, API is serving specific groups of copyrights for some countries. Returns the copyright information for the world. To obtain the default copyright information for the whole world, do not specify a tile or bounding box.\n\n```java\nasyncClient.getCopyrightForWorld(true).block();\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightFromBoundingBox(com.azure.core.models.GeoBoundingBox,boolean)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  name: "getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  nameWithType: "MapsRenderAsyncClient.getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  summary: "Get Copyright From Bounding Box \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "the <code>GeoBoundingBox</code> for which copyright information is needed."
    name: "boundingBox"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Copyright> getCopyrightFromBoundingBox(GeoBoundingBox boundingBox, boolean includeText)"
  desc: "Get Copyright From Bounding Box \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Returns copyright information for a given bounding box. Bounding-box requests should specify the minimum and maximum longitude and latitude (EPSG-3857) coordinates.\n\n```java\nGeoBoundingBox boundingBox2 = new GeoBoundingBox(52.41064, 4.84228, 52.41072, 4.84239);\n asyncClient.getCopyrightFromBoundingBox(boundingBox2, true).block();\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightFromBoundingBoxWithResponse(com.azure.core.models.GeoBoundingBox,boolean)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText)"
  name: "getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText)"
  nameWithType: "MapsRenderAsyncClient.getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText)"
  summary: "Get Copyright From Bounding Box \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers."
  parameters:
  - description: "the <code>GeoBoundingBox</code> for which copyright information is needed."
    name: "boundingBox"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  - description: "Yes/no value to exclude textual data from response. Only images and country names will be in\n     response."
    name: "includeText"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<Copyright>> getCopyrightFromBoundingBoxWithResponse(GeoBoundingBox boundingBox, boolean includeText)"
  desc: "Get Copyright From Bounding Box \\*\\*Applies to\\*\\*: S0 and S1 pricing tiers. Returns copyright information for a given bounding box. Bounding-box requests should specify the minimum and maximum longitude and latitude (EPSG-3857) coordinates.\n\n```java\nGeoBoundingBox boundingBox2 = new GeoBoundingBox(52.41064, 4.84228, 52.41072, 4.84239);\n asyncClient.getCopyrightFromBoundingBox(boundingBox2, true).block();\n```"
  returns:
    description: "this object is returned from a successful copyright request."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.Copyright?alt=com.azure.maps.render.models.Copyright&text=Copyright\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapAttribution(com.azure.maps.render.models.TilesetId,int,com.azure.core.models.GeoBoundingBox)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  name: "getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  nameWithType: "MapsRenderAsyncClient.getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  summary: "Get Map Attribution"
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  - description: "Zoom level for the desired map attribution."
    name: "zoom"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>GeoBoundingBox</code> surrounding the area for which attribution is needed."
    name: "bounds"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<MapAttribution> getMapAttribution(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  desc: "Get Map Attribution\n\n```java\nSystem.out.println(\"Get Map Attribution\");\n GeoBoundingBox bounds2 = new GeoBoundingBox(-122.414162, 47.57949, -122.247157, 47.668372);\n new TilesetId();\n asyncClient.getMapAttribution(TilesetId.MICROSOFT_BASE, 6, bounds2).block();\n```"
  returns:
    description: "copyright attribution for the requested section of a tileset."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.render.models.MapAttribution?alt=com.azure.maps.render.models.MapAttribution&text=MapAttribution\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapAttributionWithResponse(com.azure.maps.render.models.TilesetId,int,com.azure.core.models.GeoBoundingBox)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  name: "getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  nameWithType: "MapsRenderAsyncClient.getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  summary: "Get Map Attribution"
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  - description: "Zoom level for the desired map attribution."
    name: "zoom"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "the <code>GeoBoundingBox</code> surrounding the area for which attribution is needed."
    name: "bounds"
    type: "<xref href=\"com.azure.core.models.GeoBoundingBox?alt=com.azure.core.models.GeoBoundingBox&text=GeoBoundingBox\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<MapAttribution>> getMapAttributionWithResponse(TilesetId tilesetId, int zoom, GeoBoundingBox bounds)"
  desc: "Get Map Attribution\n\n```java\nSystem.out.println(\"Get Map Attribution\");\n GeoBoundingBox bounds2 = new GeoBoundingBox(-122.414162, 47.57949, -122.247157, 47.668372);\n new TilesetId();\n asyncClient.getMapAttribution(TilesetId.MICROSOFT_BASE, 6, bounds2).block();\n```"
  returns:
    description: "copyright attribution for the requested section of a tileset."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.MapAttribution?alt=com.azure.maps.render.models.MapAttribution&text=MapAttribution\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapStaticImage(com.azure.maps.render.models.MapStaticImageOptions)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapStaticImage(MapStaticImageOptions options)"
  name: "getMapStaticImage(MapStaticImageOptions options)"
  nameWithType: "MapsRenderAsyncClient.getMapStaticImage(MapStaticImageOptions options)"
  summary: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20."
  parameters:
  - description: "the <code>MapStaticImageOptions</code> used in the call."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapStaticImageOptions?alt=com.azure.maps.render.models.MapStaticImageOptions&text=MapStaticImageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> getMapStaticImage(MapStaticImageOptions options)"
  desc: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The supported resolution range for the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image service over the map tile service, you may want to consider how you would like to interact with the rendered map. If the map contents will be relatively unchanging, a static map is a good choice. If you want to support a lot of zooming, panning and changing of the map content, the map tile service would be a better choice.\n\n```java\nSystem.out.println(\"Get Map Static Image\");\n GeoBoundingBox bbox2 = new GeoBoundingBox(1.355233, 42.982261, 24.980233, 56.526017);\n new StaticMapLayer();\n new RasterTileFormat();\n MapStaticImageOptions mapStaticImageOptions2 = new MapStaticImageOptions().setStaticMapLayer(StaticMapLayer.BASIC)\n     .setMapImageStyle(MapImageStyle.MAIN).setZoom(2)\n     .setBoundingBox(bbox2).setRasterTileFormat(RasterTileFormat.PNG);\n asyncClient.getMapStaticImage(mapStaticImageOptions2).block().toStream();\n```"
  returns:
    description: "the static map image as a <code>Flux<ByteBuffer></code>"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapStaticImageWithResponse(com.azure.maps.render.models.MapStaticImageOptions)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapStaticImageWithResponse(MapStaticImageOptions options)"
  name: "getMapStaticImageWithResponse(MapStaticImageOptions options)"
  nameWithType: "MapsRenderAsyncClient.getMapStaticImageWithResponse(MapStaticImageOptions options)"
  summary: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20."
  parameters:
  - description: "the <code>MapStaticImageOptions</code> used in the call."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapStaticImageOptions?alt=com.azure.maps.render.models.MapStaticImageOptions&text=MapStaticImageOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMapStaticImageWithResponse(MapStaticImageOptions options)"
  desc: "Get Map Static Image The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20. The supported resolution range for the map image is from 1x1 to 8192x8192. If you are deciding when to use the static image service over the map tile service, you may want to consider how you would like to interact with the rendered map. If the map contents will be relatively unchanging, a static map is a good choice. If you want to support a lot of zooming, panning and changing of the map content, the map tile service would be a better choice.\n\n```java\nSystem.out.println(\"Get Map Static Image\");\n GeoBoundingBox bbox2 = new GeoBoundingBox(1.355233, 42.982261, 24.980233, 56.526017);\n new StaticMapLayer();\n new RasterTileFormat();\n MapStaticImageOptions mapStaticImageOptions2 = new MapStaticImageOptions().setStaticMapLayer(StaticMapLayer.BASIC)\n     .setMapImageStyle(MapImageStyle.MAIN).setZoom(2)\n     .setBoundingBox(bbox2).setRasterTileFormat(RasterTileFormat.PNG);\n asyncClient.getMapStaticImage(mapStaticImageOptions2).block().toStream();\n```"
  returns:
    description: "the static map image."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapTile(com.azure.maps.render.models.MapTileOptions)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapTile(MapTileOptions options)"
  name: "getMapTile(MapTileOptions options)"
  nameWithType: "MapsRenderAsyncClient.getMapTile(MapTileOptions options)"
  summary: "Get Map Tile"
  parameters:
  - description: "the <code>MapTileOptions</code> to control the API behavior."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapTileOptions?alt=com.azure.maps.render.models.MapTileOptions&text=MapTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BinaryData> getMapTile(MapTileOptions options)"
  desc: "Get Map Tile\n\n```java\nSystem.out.println(\"Get Map Tile\");\n MapTileOptions mapTileOptions2 = new MapTileOptions();\n mapTileOptions2.setTilesetId(TilesetId.MICROSOFT_BASE_ROAD);\n mapTileOptions2.setTileIndex(new TileIndex().setX(10).setY(22).setZ(6));\n asyncClient.getMapTile(mapTileOptions2).block().toStream();\n```\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated into a map control or SDK."
  returns:
    description: "the map tile as a <code>BinaryData</code>"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapTileWithResponse(com.azure.maps.render.models.MapTileOptions)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapTileWithResponse(MapTileOptions options)"
  name: "getMapTileWithResponse(MapTileOptions options)"
  nameWithType: "MapsRenderAsyncClient.getMapTileWithResponse(MapTileOptions options)"
  summary: "Get Map Tile"
  parameters:
  - description: "the <code>MapTileOptions</code> to control the API behavior."
    name: "options"
    type: "<xref href=\"com.azure.maps.render.models.MapTileOptions?alt=com.azure.maps.render.models.MapTileOptions&text=MapTileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getMapTileWithResponse(MapTileOptions options)"
  desc: "Get Map Tile\n\n```java\nSystem.out.println(\"Get Map Tile\");\n MapTileOptions mapTileOptions2 = new MapTileOptions();\n mapTileOptions2.setTilesetId(TilesetId.MICROSOFT_BASE_ROAD);\n mapTileOptions2.setTileIndex(new TileIndex().setX(10).setY(22).setZ(6));\n asyncClient.getMapTile(mapTileOptions2).block().toStream();\n```\n\nThe Get Map Tiles API allows users to request map tiles in vector or raster formats typically to be integrated into a map control or SDK."
  returns:
    description: "the tile as a <code>Mono<Response<BinaryData>></code>"
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapTileset(com.azure.maps.render.models.TilesetId)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapTileset(TilesetId tilesetId)"
  name: "getMapTileset(TilesetId tilesetId)"
  nameWithType: "MapsRenderAsyncClient.getMapTileset(TilesetId tilesetId)"
  summary: "Get Map Tileset The Get Map Tileset API allows users to request metadata for a tileset."
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<MapTileset> getMapTileset(TilesetId tilesetId)"
  desc: "Get Map Tileset The Get Map Tileset API allows users to request metadata for a tileset.\n\n```java\nSystem.out.println(\"Get Map Tileset\");\n new TilesetId();\n asyncClient.getMapTileset(TilesetId.MICROSOFT_BASE).block();\n```"
  returns:
    description: "metadata for a tileset in the TileJSON format."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.maps.render.models.MapTileset?alt=com.azure.maps.render.models.MapTileset&text=MapTileset\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.maps.render.MapsRenderAsyncClient.getMapTilesetWithResponse(com.azure.maps.render.models.TilesetId)"
  fullName: "com.azure.maps.render.MapsRenderAsyncClient.getMapTilesetWithResponse(TilesetId tilesetId)"
  name: "getMapTilesetWithResponse(TilesetId tilesetId)"
  nameWithType: "MapsRenderAsyncClient.getMapTilesetWithResponse(TilesetId tilesetId)"
  summary: "Get Map Tileset The Get Map Tileset API allows users to request metadata for a tileset."
  parameters:
  - description: "the tileset id."
    name: "tilesetId"
    type: "<xref href=\"com.azure.maps.render.models.TilesetId?alt=com.azure.maps.render.models.TilesetId&text=TilesetId\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<MapTileset>> getMapTilesetWithResponse(TilesetId tilesetId)"
  desc: "Get Map Tileset The Get Map Tileset API allows users to request metadata for a tileset.\n\n```java\nSystem.out.println(\"Get Map Tileset\");\n new TilesetId();\n asyncClient.getMapTileset(TilesetId.MICROSOFT_BASE).block();\n```"
  returns:
    description: "metadata for a tileset in the TileJSON format."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.maps.render.models.MapTileset?alt=com.azure.maps.render.models.MapTileset&text=MapTileset\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous RenderClient type. Creating an async client using a <xref uid=\"com.azure.core.credential.AzureKeyCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.AzureKeyCredential\"></xref>:\n\n```java\n// Authenticates using subscription key\n AzureKeyCredential keyCredential = new AzureKeyCredential(System.getenv(\"SUBSCRIPTION_KEY\"));\n\n // Creates a builder\n MapsRenderClientBuilder builder = new MapsRenderClientBuilder();\n builder.credential(keyCredential);\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds the client\n MapsRenderAsyncClient client = builder.buildAsyncClient();\n```\n\nCreating an async client using a <xref uid=\"com.azure.core.credential.TokenCredential\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.azure.core.credential.TokenCredential\"></xref>:\n\n```java\n// Authenticates using Azure AD building a default credential\n // This will look for AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET env variables\n DefaultAzureCredential tokenCredential = new DefaultAzureCredentialBuilder().build();\n\n // Creates a builder\n MapsRenderClientBuilder builder = new MapsRenderClientBuilder();\n builder.credential(tokenCredential);\n builder.mapsClientId(System.getenv(\"MAPS_CLIENT_ID\"));\n builder.httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS));\n\n // Builds a client\n MapsRenderAsyncClient client = builder.buildAsyncClient();\n```"
metadata: {}
package: "com.azure.maps.render"
artifact: com.azure:azure-maps-render:1.0.0-beta.2
