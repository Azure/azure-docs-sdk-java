### YamlMime:JavaType
uid: "com.azure.storage.blob.BlobAsyncClient"
fullName: "com.azure.storage.blob.BlobAsyncClient"
name: "BlobAsyncClient"
nameWithType: "BlobAsyncClient"
summary: "This class provides a client that contains generic blob operations for Azure Storage Blobs."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
  methodsRef:
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrl&text=abortCopyFromUrl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse(java.lang.String,java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.abortCopyFromUrlWithResponse&text=abortCopyFromUrlWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(com.azure.storage.blob.options.BlobBeginCopyOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy&text=beginCopy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.time.Duration)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy&text=beginCopy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.beginCopy&text=beginCopy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrl&text=copyFromUrl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(com.azure.storage.blob.options.BlobCopyFromUrlOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse&text=copyFromUrlWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse(java.lang.String,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.core.http.RequestConditions,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.copyFromUrlWithResponse&text=copyFromUrlWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshot&text=createSnapshot\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.createSnapshotWithResponse&text=createSnapshotWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.delete()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.delete&text=delete\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExists()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExists&text=deleteIfExists\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExistsWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteIfExistsWithResponse&text=deleteIfExistsWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicy()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicy&text=deleteImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicyWithResponse()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteImmutabilityPolicyWithResponse&text=deleteImmutabilityPolicyWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse(com.azure.storage.blob.models.DeleteSnapshotsOptionType,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.deleteWithResponse&text=deleteWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.download()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.download&text=download\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContent()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContent&text=downloadContent\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContentWithResponse(com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadContentWithResponse&text=downloadContentWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStream&text=downloadStream\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadStreamWithResponse&text=downloadStreamWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile&text=downloadToFile\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile(java.lang.String,boolean)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFile&text=downloadToFile\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(com.azure.storage.blob.options.BlobDownloadToFileOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse&text=downloadToFileWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse&text=downloadToFileWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse(java.lang.String,com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean,java.util.Set<java.nio.file.OpenOption>)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadToFileWithResponse&text=downloadToFileWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse(com.azure.storage.blob.models.BlobRange,com.azure.storage.blob.models.DownloadRetryOptions,com.azure.storage.blob.models.BlobRequestConditions,boolean)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.downloadWithResponse&text=downloadWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.exists()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.exists&text=exists\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.existsWithResponse&text=existsWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas&text=generateSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.core.util.Context)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.generateSas&text=generateSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas&text=generateUserDelegationSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas(com.azure.storage.blob.sas.BlobServiceSasSignatureValues,com.azure.storage.blob.models.UserDelegationKey,java.lang.String,com.azure.core.util.Context)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.generateUserDelegationSas&text=generateUserDelegationSas\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfo&text=getAccountInfo\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountInfoWithResponse&text=getAccountInfoWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountName&text=getAccountName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountUrl()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getAccountUrl&text=getAccountUrl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobName&text=getBlobName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getBlobUrl&text=getBlobUrl\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerAsyncClient()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerAsyncClient&text=getContainerAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getContainerName&text=getContainerName\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKey&text=getCustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient&text=getCustomerProvidedKeyAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScope&text=getEncryptionScope\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient&text=getEncryptionScopeAsyncClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getHttpPipeline&text=getHttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getProperties&text=getProperties\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse(com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getPropertiesWithResponse&text=getPropertiesWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getServiceVersion&text=getServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient&text=getSnapshotClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotId&text=getSnapshotId\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getTags&text=getTags\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse(com.azure.storage.blob.options.BlobGetTagsOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getTagsWithResponse&text=getTagsWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient&text=getVersionClient\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionId&text=getVersionId\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.isSnapshot&text=isSnapshot\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.query(java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.query&text=query\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse&text=queryWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier(com.azure.storage.blob.models.AccessTier)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTier&text=setAccessTier\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.RehydratePriority,java.lang.String)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse&text=setAccessTierWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse(com.azure.storage.blob.options.BlobSetAccessTierOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setAccessTierWithResponse&text=setAccessTierWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders(com.azure.storage.blob.models.BlobHttpHeaders)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeaders&text=setHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse(com.azure.storage.blob.models.BlobHttpHeaders,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setHttpHeadersWithResponse&text=setHttpHeadersWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicy(com.azure.storage.blob.models.BlobImmutabilityPolicy)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicy&text=setImmutabilityPolicy\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicyWithResponse(com.azure.storage.blob.models.BlobImmutabilityPolicy,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setImmutabilityPolicyWithResponse&text=setImmutabilityPolicyWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHold(boolean)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHold&text=setLegalHold\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHoldWithResponse(boolean)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setLegalHoldWithResponse&text=setLegalHoldWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata(java.util.Map<java.lang.String,java.lang.String>)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadata&text=setMetadata\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse(java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.BlobRequestConditions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setMetadataWithResponse&text=setMetadataWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags(java.util.Map<java.lang.String,java.lang.String>)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setTags&text=setTags\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse(com.azure.storage.blob.options.BlobSetTagsOptions)?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.setTagsWithResponse&text=setTagsWithResponse\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.undelete&text=undelete\" data-throw-if-not-resolved=\"False\" />"
  - "<xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse()?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase.undeleteWithResponse&text=undeleteWithResponse\" data-throw-if-not-resolved=\"False\" />"
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public class **BlobAsyncClient**</br> extends <xref href=\"com.azure.storage.blob.specialized.BlobAsyncClientBase?alt=com.azure.storage.blob.specialized.BlobAsyncClientBase&text=BlobAsyncClientBase\" data-throw-if-not-resolved=\"False\" />"
constructors:
- uid: "com.azure.storage.blob.BlobAsyncClient.BlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  name: "BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  nameWithType: "BlobAsyncClient.BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  summary: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref>."
  modifiers:
  - "protected"
  parameters:
  - description: "The pipeline used to send and receive service requests."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "The endpoint where to send service requests."
    name: "url"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The version of the service to receive requests."
    name: "serviceVersion"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - description: "The storage account name."
    name: "accountName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The container name."
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The blob name."
    name: "blobName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly."
    name: "snapshot"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Customer provided key used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey)"
  desc: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref>."
- uid: "com.azure.storage.blob.BlobAsyncClient.BlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  name: "BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  nameWithType: "BlobAsyncClient.BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  summary: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref>."
  modifiers:
  - "protected"
  parameters:
  - description: "The pipeline used to send and receive service requests."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "The endpoint where to send service requests."
    name: "url"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The version of the service to receive requests."
    name: "serviceVersion"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - description: "The storage account name."
    name: "accountName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The container name."
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The blob name."
    name: "blobName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly."
    name: "snapshot"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Customer provided key used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
  - description: "Encryption scope used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "encryptionScope"
    type: "<xref href=\"com.azure.storage.blob.implementation.models.EncryptionScope?alt=com.azure.storage.blob.implementation.models.EncryptionScope&text=EncryptionScope\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope)"
  desc: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref>."
- uid: "com.azure.storage.blob.BlobAsyncClient.BlobAsyncClient(com.azure.core.http.HttpPipeline,java.lang.String,com.azure.storage.blob.BlobServiceVersion,java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.azure.storage.blob.models.CpkInfo,com.azure.storage.blob.implementation.models.EncryptionScope,java.lang.String)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  name: "BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  nameWithType: "BlobAsyncClient.BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  summary: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref>."
  modifiers:
  - "protected"
  parameters:
  - description: "The pipeline used to send and receive service requests."
    name: "pipeline"
    type: "<xref href=\"com.azure.core.http.HttpPipeline?alt=com.azure.core.http.HttpPipeline&text=HttpPipeline\" data-throw-if-not-resolved=\"False\" />"
  - description: "The endpoint where to send service requests."
    name: "url"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The version of the service to receive requests."
    name: "serviceVersion"
    type: "<xref href=\"com.azure.storage.blob.BlobServiceVersion?alt=com.azure.storage.blob.BlobServiceVersion&text=BlobServiceVersion\" data-throw-if-not-resolved=\"False\" />"
  - description: "The storage account name."
    name: "accountName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The container name."
    name: "containerName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The blob name."
    name: "blobName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The snapshot identifier for the blob, pass <code>null</code> to interact with the blob directly."
    name: "snapshot"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Customer provided key used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CpkInfo?alt=com.azure.storage.blob.models.CpkInfo&text=CpkInfo\" data-throw-if-not-resolved=\"False\" />"
  - description: "Encryption scope used during encryption of the blob's data on the server, pass\n <code>null</code> to allow the service to use its own encryption."
    name: "encryptionScope"
    type: "<xref href=\"com.azure.storage.blob.implementation.models.EncryptionScope?alt=com.azure.storage.blob.implementation.models.EncryptionScope&text=EncryptionScope\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version identifier for the blob, pass <code>null</code> to interact with the latest blob version."
    name: "versionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "protected BlobAsyncClient(HttpPipeline pipeline, String url, BlobServiceVersion serviceVersion, String accountName, String containerName, String blobName, String snapshot, CpkInfo customerProvidedKey, EncryptionScope encryptionScope, String versionId)"
  desc: "Protected constructor for use by <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref>."
fields:
- uid: "com.azure.storage.blob.BlobAsyncClient.BLOB_DEFAULT_HTBB_UPLOAD_BLOCK_SIZE"
  fullName: "com.azure.storage.blob.BlobAsyncClient.BLOB_DEFAULT_HTBB_UPLOAD_BLOCK_SIZE"
  name: "BLOB_DEFAULT_HTBB_UPLOAD_BLOCK_SIZE"
  nameWithType: "BlobAsyncClient.BLOB_DEFAULT_HTBB_UPLOAD_BLOCK_SIZE"
  summary: "If a blob is known to be greater than 100MB, using a larger block size will trigger some server-side optimizations."
  modifiers:
  - "static"
  - "final"
  field:
    value: "8388608"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int BLOB_DEFAULT_HTBB_UPLOAD_BLOCK_SIZE"
  desc: "If a blob is known to be greater than 100MB, using a larger block size will trigger some server-side optimizations. If the block size is not set and the size of the blob is known to be greater than 100MB, this value will be used."
- uid: "com.azure.storage.blob.BlobAsyncClient.BLOB_DEFAULT_NUMBER_OF_BUFFERS"
  fullName: "com.azure.storage.blob.BlobAsyncClient.BLOB_DEFAULT_NUMBER_OF_BUFFERS"
  name: "BLOB_DEFAULT_NUMBER_OF_BUFFERS"
  nameWithType: "BlobAsyncClient.BLOB_DEFAULT_NUMBER_OF_BUFFERS"
  summary: "The number of buffers to use if none is specified on the buffered upload method."
  modifiers:
  - "static"
  - "final"
  field:
    value: "8"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int BLOB_DEFAULT_NUMBER_OF_BUFFERS"
  desc: "The number of buffers to use if none is specified on the buffered upload method."
- uid: "com.azure.storage.blob.BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE"
  fullName: "com.azure.storage.blob.BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE"
  name: "BLOB_DEFAULT_UPLOAD_BLOCK_SIZE"
  nameWithType: "BlobAsyncClient.BLOB_DEFAULT_UPLOAD_BLOCK_SIZE"
  summary: "The block size to use if none is specified in parallel operations."
  modifiers:
  - "static"
  - "final"
  field:
    value: "4194304"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static final int BLOB_DEFAULT_UPLOAD_BLOCK_SIZE"
  desc: "The block size to use if none is specified in parallel operations."
methods:
- uid: "com.azure.storage.blob.BlobAsyncClient.getAppendBlobAsyncClient()"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getAppendBlobAsyncClient()"
  name: "getAppendBlobAsyncClient()"
  nameWithType: "BlobAsyncClient.getAppendBlobAsyncClient()"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.AppendBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobAsyncClient\"></xref> associated with this blob."
  syntax: "public AppendBlobAsyncClient getAppendBlobAsyncClient()"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.AppendBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobAsyncClient\"></xref> associated with this blob."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.AppendBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AppendBlobAsyncClient\"></xref> associated with this blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.AppendBlobAsyncClient?alt=com.azure.storage.blob.specialized.AppendBlobAsyncClient&text=AppendBlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.getBlockBlobAsyncClient()"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getBlockBlobAsyncClient()"
  name: "getBlockBlobAsyncClient()"
  nameWithType: "BlobAsyncClient.getBlockBlobAsyncClient()"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobAsyncClient\"></xref> associated with this blob."
  syntax: "public BlockBlobAsyncClient getBlockBlobAsyncClient()"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobAsyncClient\"></xref> associated with this blob."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlockBlobAsyncClient\"></xref> associated with this blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient?alt=com.azure.storage.blob.specialized.BlockBlobAsyncClient&text=BlockBlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  name: "getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  nameWithType: "BlobAsyncClient.getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> with the specified `customerProvidedKey`."
  overridden: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getCustomerProvidedKeyAsyncClient(com.azure.storage.blob.models.CustomerProvidedKey)"
  parameters:
  - description: "the <xref uid=\"com.azure.storage.blob.models.CustomerProvidedKey\" data-throw-if-not-resolved=\"false\" data-raw-source=\"CustomerProvidedKey\"></xref> for the blob,\n pass <code>null</code> to use no customer provided key."
    name: "customerProvidedKey"
    type: "<xref href=\"com.azure.storage.blob.models.CustomerProvidedKey?alt=com.azure.storage.blob.models.CustomerProvidedKey&text=CustomerProvidedKey\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public BlobAsyncClient getCustomerProvidedKeyAsyncClient(CustomerProvidedKey customerProvidedKey)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> with the specified `customerProvidedKey`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> with the specified <code>customerProvidedKey</code>."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.getEncryptionScopeAsyncClient(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getEncryptionScopeAsyncClient(String encryptionScope)"
  name: "getEncryptionScopeAsyncClient(String encryptionScope)"
  nameWithType: "BlobAsyncClient.getEncryptionScopeAsyncClient(String encryptionScope)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> with the specified `encryptionScope`."
  overridden: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getEncryptionScopeAsyncClient(java.lang.String)"
  parameters:
  - description: "the encryption scope for the blob, pass <code>null</code> to use no encryption scope."
    name: "encryptionScope"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BlobAsyncClient getEncryptionScopeAsyncClient(String encryptionScope)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> with the specified `encryptionScope`."
  returns:
    description: "a <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> with the specified <code>encryptionScope</code>."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.getPageBlobAsyncClient()"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getPageBlobAsyncClient()"
  name: "getPageBlobAsyncClient()"
  nameWithType: "BlobAsyncClient.getPageBlobAsyncClient()"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> associated with this blob."
  syntax: "public PageBlobAsyncClient getPageBlobAsyncClient()"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> associated with this blob."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.specialized.PageBlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PageBlobAsyncClient\"></xref> associated with this blob."
    type: "<xref href=\"com.azure.storage.blob.specialized.PageBlobAsyncClient?alt=com.azure.storage.blob.specialized.PageBlobAsyncClient&text=PageBlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.getSnapshotClient(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getSnapshotClient(String snapshot)"
  name: "getSnapshotClient(String snapshot)"
  nameWithType: "BlobAsyncClient.getSnapshotClient(String snapshot)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> linked to the `snapshot` of this blob resource."
  overridden: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getSnapshotClient(java.lang.String)"
  parameters:
  - description: "the identifier for a specific snapshot of this blob"
    name: "snapshot"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BlobAsyncClient getSnapshotClient(String snapshot)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> linked to the `snapshot` of this blob resource."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> used to interact with the specific snapshot."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.getVersionClient(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.getVersionClient(String versionId)"
  name: "getVersionClient(String versionId)"
  nameWithType: "BlobAsyncClient.getVersionClient(String versionId)"
  summary: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> linked to the `versionId` of this blob resource."
  overridden: "com.azure.storage.blob.specialized.BlobAsyncClientBase.getVersionClient(java.lang.String)"
  parameters:
  - description: "the identifier for a specific version of this blob,\n pass <code>null</code> to interact with the latest blob version."
    name: "versionId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public BlobAsyncClient getVersionClient(String versionId)"
  desc: "Creates a new <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> linked to the `versionId` of this blob resource."
  returns:
    description: "A <xref uid=\"com.azure.storage.blob.BlobAsyncClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobAsyncClient\"></xref> used to interact with the specific version."
    type: "<xref href=\"com.azure.storage.blob.BlobAsyncClient?alt=com.azure.storage.blob.BlobAsyncClient&text=BlobAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.storage.blob.BlobAsyncClient.upload(com.azure.core.util.BinaryData)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.upload(BinaryData data)"
  name: "upload(BinaryData data)"
  nameWithType: "BlobAsyncClient.upload(BinaryData data)"
  summary: "Creates a new block blob."
  parameters:
  - description: "The data to write to the blob."
    name: "data"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlockBlobItem> upload(BinaryData data)"
  desc: "Creates a new block blob. By default, this method will not overwrite an existing blob.\n\n**Code Samples**\n\n```java\nclient.upload(BinaryData.fromString(\"Data!\")).subscribe(response ->\n     System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getContentMd5())));\n```"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.upload(com.azure.core.util.BinaryData,boolean)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.upload(BinaryData data, boolean overwrite)"
  name: "upload(BinaryData data, boolean overwrite)"
  nameWithType: "BlobAsyncClient.upload(BinaryData data, boolean overwrite)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  parameters:
  - description: "The data to write to the blob."
    name: "data"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should the blob already exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlockBlobItem> upload(BinaryData data, boolean overwrite)"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default behavior\n client.upload(BinaryData.fromString(\"Data!\"), overwrite).subscribe(response ->\n     System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getContentMd5())));\n```"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  name: "upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  nameWithType: "BlobAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  summary: "Creates a new block blob."
  parameters:
  - description: "The data to write to the blob. Unlike other upload methods, this method does not require that the\n <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not expected\n to produce the same values across subscriptions."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> used to configure buffered uploading."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlockBlobItem> upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions)"
  desc: "Creates a new block blob. By default, this method will not overwrite an existing blob.\n\nUpdating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with this method; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"stageBlock\"></xref> and <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"commitBlockList\"></xref>. For more information, see the [Azure Docs for Put Block][] and the [Azure Docs for Put Block List][].\n\nThe data passed need not support multiple subscriptions/be replayable as is required in other upload methods when retries are enabled, and the length of the data need not be known in advance. Therefore, this method does support uploading any arbitrary data source, including network streams. This behavior is possible because this method will perform some internal buffering as configured by the blockSize and numBuffers parameters, so while this method may offer additional convenience, it will not be as performant as other options, which should be preferred when possible.\n\nTypically, the greater the number of buffers used, the greater the possible parallelism when transferring the data. Larger buffers means we will have to stage fewer blocks and therefore require fewer IO operations. The trade-offs between these values are context-dependent, so some experimentation may be required to optimize inputs for a given scenario.\n\n**Code Samples**\n\n```java\nParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions()\n     .setBlockSizeLong(blockSize)\n     .setMaxConcurrency(maxConcurrency);\n client.upload(data, parallelTransferOptions).subscribe(response ->\n     System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getContentMd5())));\n```\n\n\n[Azure Docs for Put Block]: https://docs.microsoft.com/rest/api/storageservices/put-block\n[Azure Docs for Put Block List]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.upload(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions,boolean)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  name: "upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  nameWithType: "BlobAsyncClient.upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  parameters:
  - description: "The data to write to the blob. Unlike other upload methods, this method does not require that the\n <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not expected\n to produce the same values across subscriptions."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> used to configure buffered uploading."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Whether to overwrite, should the blob already exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<BlockBlobItem> upload(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, boolean overwrite)"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\nUpdating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with this method; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"stageBlock\"></xref> and <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"commitBlockList\"></xref>. For more information, see the [Azure Docs for Put Block][] and the [Azure Docs for Put Block List][].\n\nThe data passed need not support multiple subscriptions/be replayable as is required in other upload methods when retries are enabled, and the length of the data need not be known in advance. Therefore, this method does support uploading any arbitrary data source, including network streams. This behavior is possible because this method will perform some internal buffering as configured by the blockSize and numBuffers parameters, so while this method may offer additional convenience, it will not be as performant as other options, which should be preferred when possible.\n\nTypically, the greater the number of buffers used, the greater the possible parallelism when transferring the data. Larger buffers means we will have to stage fewer blocks and therefore require fewer IO operations. The trade-offs between these values are context-dependent, so some experimentation may be required to optimize inputs for a given scenario.\n\n**Code Samples**\n\n```java\nParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions()\n     .setBlockSizeLong(blockSize)\n     .setMaxConcurrency(maxConcurrency);\n boolean overwrite = false; // Default behavior\n client.upload(data, parallelTransferOptions, overwrite).subscribe(response ->\n     System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getContentMd5())));\n```\n\n\n[Azure Docs for Put Block]: https://docs.microsoft.com/rest/api/storageservices/put-block\n[Azure Docs for Put Block List]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadFileResourceSupplier(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadFileResourceSupplier(String filePath)"
  name: "uploadFileResourceSupplier(String filePath)"
  nameWithType: "BlobAsyncClient.uploadFileResourceSupplier(String filePath)"
  summary: "RESERVED FOR INTERNAL USE."
  deprecatedTag: "due to refactoring code to be in the common storage library."
  modifiers:
  - "protected"
  parameters:
  - description: "The path for the file"
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Deprecated.html\">@Deprecated</a></br>protected AsynchronousFileChannel uploadFileResourceSupplier(String filePath)"
  desc: "RESERVED FOR INTERNAL USE. Resource Supplier for UploadFile."
  hasDeprecatedTag: true
  returns:
    description: "<code>AsynchronousFileChannel</code>"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/channels/AsynchronousFileChannel.html\">AsynchronousFileChannel</a>"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(java.lang.String)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(String filePath)"
  name: "uploadFromFile(String filePath)"
  nameWithType: "BlobAsyncClient.uploadFromFile(String filePath)"
  summary: "Creates a new block blob with the content of the specified file."
  parameters:
  - description: "Path to the upload file"
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<Void> uploadFromFile(String filePath)"
  desc: "Creates a new block blob with the content of the specified file. By default, this method will not overwrite an existing blob.\n\n**Code Samples**\n\n```java\nclient.uploadFromFile(filePath)\n     .doOnError(throwable -> System.err.printf(\"Failed to upload from file %s%n\", throwable.getMessage()))\n     .subscribe(completion -> System.out.println(\"Upload from file succeeded\"));\n```"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(java.lang.String,boolean)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(String filePath, boolean overwrite)"
  name: "uploadFromFile(String filePath, boolean overwrite)"
  nameWithType: "BlobAsyncClient.uploadFromFile(String filePath, boolean overwrite)"
  summary: "Creates a new block blob, or updates the content of an existing block blob, with the content of the specified file."
  parameters:
  - description: "Path to the upload file"
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "Whether to overwrite, should the blob already exist."
    name: "overwrite"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> uploadFromFile(String filePath, boolean overwrite)"
  desc: "Creates a new block blob, or updates the content of an existing block blob, with the content of the specified file.\n\n**Code Samples**\n\n```java\nboolean overwrite = false; // Default behavior\n client.uploadFromFile(filePath, overwrite)\n     .doOnError(throwable -> System.err.printf(\"Failed to upload from file %s%n\", throwable.getMessage()))\n     .subscribe(completion -> System.out.println(\"Upload from file succeeded\"));\n```"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(java.lang.String,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  name: "uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  summary: "Creates a new block blob, or updates the content of an existing block blob, with the content of the specified file."
  parameters:
  - description: "Path to the upload file"
    name: "filePath"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> to use to upload from file. Number of parallel\n transfers parameter is ignored."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> for the destination blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Void> uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  desc: "Creates a new block blob, or updates the content of an existing block blob, with the content of the specified file.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.uploadFromFile(filePath,\n     new ParallelTransferOptions().setBlockSizeLong(BlockBlobClient.MAX_STAGE_BLOCK_BYTES_LONG),\n     headers, metadata, AccessTier.HOT, requestConditions)\n     .doOnError(throwable -> System.err.printf(\"Failed to upload from file %s%n\", throwable.getMessage()))\n     .subscribe(completion -> System.out.println(\"Upload from file succeeded\"));\n```"
  returns:
    description: "An empty response"
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Void.html\">Void</a>&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadFromFileWithResponse(com.azure.storage.blob.options.BlobUploadFromFileOptions)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadFromFileWithResponse(BlobUploadFromFileOptions options)"
  name: "uploadFromFileWithResponse(BlobUploadFromFileOptions options)"
  nameWithType: "BlobAsyncClient.uploadFromFileWithResponse(BlobUploadFromFileOptions options)"
  summary: "Creates a new block blob, or updates the content of an existing block blob, with the content of the specified file."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobUploadFromFileOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobUploadFromFileOptions\"></xref>"
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobUploadFromFileOptions?alt=com.azure.storage.blob.options.BlobUploadFromFileOptions&text=BlobUploadFromFileOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlockBlobItem>> uploadFromFileWithResponse(BlobUploadFromFileOptions options)"
  desc: "Creates a new block blob, or updates the content of an existing block blob, with the content of the specified file.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n client.uploadFromFileWithResponse(new BlobUploadFromFileOptions(filePath)\n     .setParallelTransferOptions(\n         new ParallelTransferOptions().setBlockSizeLong(BlobAsyncClient.BLOB_MAX_UPLOAD_BLOCK_SIZE))\n     .setHeaders(headers).setMetadata(metadata).setTags(tags).setTier(AccessTier.HOT)\n     .setRequestConditions(requestConditions))\n     .doOnError(throwable -> System.err.printf(\"Failed to upload from file %s%n\", throwable.getMessage()))\n     .subscribe(completion -> System.out.println(\"Upload from file succeeded\"));\n```"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadWithResponse(com.azure.storage.blob.options.BlobParallelUploadOptions)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadWithResponse(BlobParallelUploadOptions options)"
  name: "uploadWithResponse(BlobParallelUploadOptions options)"
  nameWithType: "BlobAsyncClient.uploadWithResponse(BlobParallelUploadOptions options)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  parameters:
  - description: "<xref uid=\"com.azure.storage.blob.options.BlobParallelUploadOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobParallelUploadOptions\"></xref>. Unlike other upload methods, this method does not require that\n the <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not\n expected to produce the same values across subscriptions."
    name: "options"
    type: "<xref href=\"com.azure.storage.blob.options.BlobParallelUploadOptions?alt=com.azure.storage.blob.options.BlobParallelUploadOptions&text=BlobParallelUploadOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlockBlobItem>> uploadWithResponse(BlobParallelUploadOptions options)"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\nUpdating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with this method; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"stageBlock\"></xref> and <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"commitBlockList\"></xref>. For more information, see the [Azure Docs for Put Block][] and the [Azure Docs for Put Block List][].\n\nThe data passed need not support multiple subscriptions/be replayable as is required in other upload methods when retries are enabled, and the length of the data need not be known in advance. Therefore, this method does support uploading any arbitrary data source, including network streams. This behavior is possible because this method will perform some internal buffering as configured by the blockSize and numBuffers parameters, so while this method may offer additional convenience, it will not be as performant as other options, which should be preferred when possible.\n\nTypically, the greater the number of buffers used, the greater the possible parallelism when transferring the data. Larger buffers means we will have to stage fewer blocks and therefore require fewer IO operations. The trade-offs between these values are context-dependent, so some experimentation may be required to optimize inputs for a given scenario.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions().setBlockSizeLong(blockSize)\n     .setMaxConcurrency(maxConcurrency).setProgressListener(bytesTransferred ->\n         System.out.printf(\"Upload progress: %s bytes sent\", bytesTransferred));\n\n client.uploadWithResponse(new BlobParallelUploadOptions(data)\n     .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTags(tags)\n     .setTier(AccessTier.HOT).setRequestConditions(requestConditions))\n     .subscribe(response -> System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getValue().getContentMd5())));\n```\n\n**Using Progress Reporting**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n Map<String, String> tags = Collections.singletonMap(\"tag\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions().setBlockSizeLong(blockSize)\n     .setMaxConcurrency(maxConcurrency).setProgressListener(bytesTransferred ->\n         System.out.printf(\"Upload progress: %s bytes sent\", bytesTransferred));\n\n client.uploadWithResponse(new BlobParallelUploadOptions(data)\n     .setParallelTransferOptions(parallelTransferOptions).setHeaders(headers).setMetadata(metadata).setTags(tags)\n     .setTier(AccessTier.HOT).setRequestConditions(requestConditions))\n     .subscribe(response -> System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getValue().getContentMd5())));\n```\n\n\n[Azure Docs for Put Block]: https://docs.microsoft.com/rest/api/storageservices/put-block\n[Azure Docs for Put Block List]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.storage.blob.BlobAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,com.azure.storage.blob.models.ParallelTransferOptions,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)"
  fullName: "com.azure.storage.blob.BlobAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  name: "uploadWithResponse(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  nameWithType: "BlobAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  summary: "Creates a new block blob, or updates the content of an existing block blob."
  parameters:
  - description: "The data to write to the blob. Unlike other upload methods, this method does not require that the\n <code>Flux</code> be replayable. In other words, it does not have to support multiple subscribers and is not expected\n to produce the same values across subscriptions."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/nio/ByteBuffer.html\">ByteBuffer</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.ParallelTransferOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelTransferOptions\"></xref> used to configure buffered uploading."
    name: "parallelTransferOptions"
    type: "<xref href=\"com.azure.storage.blob.models.ParallelTransferOptions?alt=com.azure.storage.blob.models.ParallelTransferOptions&text=ParallelTransferOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobHttpHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobHttpHeaders\"></xref>"
    name: "headers"
    type: "<xref href=\"com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders\" data-throw-if-not-resolved=\"False\" />"
  - description: "Metadata to associate with the blob. If there is leading or trailing whitespace in any\n metadata key or value, it must be removed or encoded."
    name: "metadata"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Map.html\">Map</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>,<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  - description: "<xref uid=\"com.azure.storage.blob.models.AccessTier\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AccessTier\"></xref> for the destination blob."
    name: "tier"
    type: "<xref href=\"com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier\" data-throw-if-not-resolved=\"False\" />"
  - description: "<xref uid=\"com.azure.storage.blob.models.BlobRequestConditions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions\"></xref>"
    name: "requestConditions"
    type: "<xref href=\"com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BlockBlobItem>> uploadWithResponse(Flux<ByteBuffer> data, ParallelTransferOptions parallelTransferOptions, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)"
  desc: "Creates a new block blob, or updates the content of an existing block blob.\n\nUpdating an existing block blob overwrites any existing metadata on the blob. Partial updates are not supported with this method; the content of the existing blob is overwritten with the new content. To perform a partial update of a block blob's, use <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.stageBlock(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"stageBlock\"></xref> and <xref uid=\"com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockList(java.util.List<java.lang.String>)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"commitBlockList\"></xref>. For more information, see the [Azure Docs for Put Block][] and the [Azure Docs for Put Block List][].\n\nThe data passed need not support multiple subscriptions/be replayable as is required in other upload methods when retries are enabled, and the length of the data need not be known in advance. Therefore, this method does support uploading any arbitrary data source, including network streams. This behavior is possible because this method will perform some internal buffering as configured by the blockSize and numBuffers parameters, so while this method may offer additional convenience, it will not be as performant as other options, which should be preferred when possible.\n\nTypically, the greater the number of buffers used, the greater the possible parallelism when transferring the data. Larger buffers means we will have to stage fewer blocks and therefore require fewer IO operations. The trade-offs between these values are context-dependent, so some experimentation may be required to optimize inputs for a given scenario.\n\nTo avoid overwriting, pass \"\\*\" to <xref uid=\"com.azure.storage.blob.models.BlobRequestConditions.setIfNoneMatch(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobRequestConditions#setIfNoneMatch(String)\"></xref>.\n\n**Code Samples**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions()\n     .setBlockSizeLong(blockSize)\n     .setMaxConcurrency(maxConcurrency);\n\n client.uploadWithResponse(data, parallelTransferOptions, headers, metadata, AccessTier.HOT, requestConditions)\n     .subscribe(response -> System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getValue().getContentMd5())));\n```\n\n**Using Progress Reporting**\n\n```java\nBlobHttpHeaders headers = new BlobHttpHeaders()\n     .setContentMd5(\"data\".getBytes(StandardCharsets.UTF_8))\n     .setContentLanguage(\"en-US\")\n     .setContentType(\"binary\");\n\n Map<String, String> metadata = Collections.singletonMap(\"metadata\", \"value\");\n BlobRequestConditions requestConditions = new BlobRequestConditions()\n     .setLeaseId(leaseId)\n     .setIfUnmodifiedSince(OffsetDateTime.now().minusDays(3));\n\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions()\n     .setBlockSizeLong(blockSize)\n     .setMaxConcurrency(maxConcurrency)\n     .setProgressListener(bytesTransferred -> System.out.printf(\"Upload progress: %s bytes sent\", bytesTransferred));\n\n client.uploadWithResponse(data, parallelTransferOptions, headers, metadata, AccessTier.HOT, requestConditions)\n     .subscribe(response -> System.out.printf(\"Uploaded BlockBlob MD5 is %s%n\",\n         Base64.getEncoder().encodeToString(response.getValue().getContentMd5())));\n```\n\n\n[Azure Docs for Put Block]: https://docs.microsoft.com/rest/api/storageservices/put-block\n[Azure Docs for Put Block List]: https://docs.microsoft.com/rest/api/storageservices/put-block-list"
  returns:
    description: "A reactive response containing the information of the uploaded block blob."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "This class provides a client that contains generic blob operations for Azure Storage Blobs. Operations allowed by the client are uploading and downloading, copying a blob, retrieving and setting metadata, retrieving and setting HTTP headers, and deleting and un-deleting a blob.\n\nThis client is instantiated through <xref uid=\"com.azure.storage.blob.BlobClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BlobClientBuilder\"></xref> or retrieved via <xref uid=\"com.azure.storage.blob.BlobContainerAsyncClient.getBlobAsyncClient(java.lang.String)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlobAsyncClient\"></xref>.\n\nFor operations on a specific blob type (i.e. append, block, or page) use <xref uid=\"com.azure.storage.blob.BlobAsyncClient.getAppendBlobAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getAppendBlobAsyncClient\"></xref>, <xref uid=\"com.azure.storage.blob.BlobAsyncClient.getBlockBlobAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getBlockBlobAsyncClient\"></xref>, or <xref uid=\"com.azure.storage.blob.BlobAsyncClient.getPageBlobAsyncClient()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"getPageBlobAsyncClient\"></xref> to construct a client that allows blob specific operations.\n\nPlease refer to the [Azure Docs][] for more information.\n\n\n[Azure Docs]: https://docs.microsoft.com/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs"
metadata: {}
package: "com.azure.storage.blob"
artifact: com.azure:azure-storage-blob:12.25.0-beta.1
