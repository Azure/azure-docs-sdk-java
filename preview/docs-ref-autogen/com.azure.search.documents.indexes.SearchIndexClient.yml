### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.SearchIndexClient"
fullName: "com.azure.search.documents.indexes.SearchIndexClient"
name: "SearchIndexClient"
nameWithType: "SearchIndexClient"
summary: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting indexes or synonym map and analyzing text in an Azure Cognitive Search service."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class SearchIndexClient"
methods:
- uid: "com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  name: "analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  nameWithType: "SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  summary: "Shows how an analyzer breaks text into tokens."
  parameters:
  - description: "the name of the index for which to test an analyzer"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the text and analyzer or analysis components to test. Requires to provide either <xref uid=\"com.azure.search.documents.indexes.models.LexicalTokenizerName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LexicalTokenizerName\"></xref> or <xref uid=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LexicalAnalyzerName\"></xref>."
    name: "analyzeTextOptions"
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)"
  desc: "Shows how an analyzer breaks text into tokens.\n\n**Code Sample**\n\nAnalyzer text with LexicalTokenizerName \"Classic\" in search index \"searchIndex\".\n\n```java\nPagedIterable<AnalyzedTokenInfo> tokenInfos = SEARCH_INDEX_CLIENT.analyzeText(\"searchIndex\",\n     new AnalyzeTextOptions(\"The quick brown fox\", LexicalTokenizerName.CLASSIC));\n for (AnalyzedTokenInfo tokenInfo : tokenInfos) {\n     System.out.printf(\"The token emitted by the analyzer is %s.%n\", tokenInfo.getToken());\n }\n```"
  returns:
    description: "analyze result."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.AnalyzedTokenInfo?alt=com.azure.search.documents.indexes.models.AnalyzedTokenInfo&text=AnalyzedTokenInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)"
  name: "analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)"
  nameWithType: "SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)"
  summary: "Shows how an analyzer breaks text into tokens."
  parameters:
  - description: "the name of the index for which to test an analyzer"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the text and analyzer or analysis components to test. Requires to provide either <xref uid=\"com.azure.search.documents.indexes.models.LexicalTokenizerName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LexicalTokenizerName\"></xref> or <xref uid=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName\" data-throw-if-not-resolved=\"false\" data-raw-source=\"LexicalAnalyzerName\"></xref>."
    name: "analyzeTextOptions"
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)"
  desc: "Shows how an analyzer breaks text into tokens.\n\n**Code Sample**\n\nAnalyzer text response with LexicalTokenizerName \"Classic\" in search index \"searchIndex\".\n\n```java\nPagedIterable<AnalyzedTokenInfo> tokenInfos = SEARCH_INDEX_CLIENT.analyzeText(\"searchIndex\",\n     new AnalyzeTextOptions(\"The quick brown fox\", LexicalTokenizerName.CLASSIC), new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is \"\n     + tokenInfos.iterableByPage().iterator().next().getStatusCode());\n for (AnalyzedTokenInfo tokenInfo : tokenInfos) {\n     System.out.printf(\"The token emitted by the analyzer is %s.%n\", tokenInfo.getToken());\n }\n```"
  returns:
    description: "analyze result."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.AnalyzedTokenInfo?alt=com.azure.search.documents.indexes.models.AnalyzedTokenInfo&text=AnalyzedTokenInfo\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.buildSearchFields(java.lang.Class<?>,com.azure.search.documents.indexes.models.FieldBuilderOptions)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  name: "buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  nameWithType: "SearchIndexClient.buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  summary: "Convenience method to convert a <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class's\"></xref> <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Fields\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Methods\"></xref> into <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> to help aid the creation of a <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchField\"></xref> which represents the <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "The model <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> that will have <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> generated from its\n structure."
    name: "model"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - description: "Configuration used to determine generation of the <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref>."
    name: "options"
    type: "<xref href=\"com.azure.search.documents.indexes.models.FieldBuilderOptions?alt=com.azure.search.documents.indexes.models.FieldBuilderOptions&text=FieldBuilderOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static List<SearchField> buildSearchFields(Class<?> model, FieldBuilderOptions options)"
  desc: "Convenience method to convert a <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class's\"></xref> <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Fields\"></xref> and <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Methods\"></xref> into <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> to help aid the creation of a <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchField\"></xref> which represents the <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
  returns:
    description: "A list <xref uid=\"com.azure.search.documents.indexes.models.SearchField\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchFields\"></xref> which represent the model <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createAlias(com.azure.search.documents.indexes.models.SearchAlias)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createAlias(SearchAlias alias)"
  name: "createAlias(SearchAlias alias)"
  nameWithType: "SearchIndexClient.createAlias(SearchAlias alias)"
  summary: "Creates a new Azure Cognitive Search alias."
  parameters:
  - description: "definition of the alias to create."
    name: "alias"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchAlias createAlias(SearchAlias alias)"
  desc: "Creates a new Azure Cognitive Search alias.\n\n**Code Sample**\n\nCreate the search alias named \"my-alias\".\n\n```java\nSearchAlias searchAlias = SEARCH_INDEX_CLIENT.createAlias(new SearchAlias(\"my-alias\",\n     Collections.singletonList(\"index-to-alias\")));\n System.out.printf(\"Created alias '%s' that aliases index '%s'.\", searchAlias.getName(),\n     searchAlias.getIndexes().get(0));\n```"
  returns:
    description: "the created alias."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createAliasWithResponse(com.azure.search.documents.indexes.models.SearchAlias,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createAliasWithResponse(SearchAlias alias, Context context)"
  name: "createAliasWithResponse(SearchAlias alias, Context context)"
  nameWithType: "SearchIndexClient.createAliasWithResponse(SearchAlias alias, Context context)"
  summary: "Creates a new Azure Cognitive Search alias."
  parameters:
  - description: "definition of the alias to create."
    name: "alias"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchAlias> createAliasWithResponse(SearchAlias alias, Context context)"
  desc: "Creates a new Azure Cognitive Search alias.\n\n**Code Sample**\n\nCreate the search alias named \"my-alias\".\n\n```java\nResponse<SearchAlias> response = SEARCH_INDEX_CLIENT.createAliasWithResponse(new SearchAlias(\"my-alias\",\n         Collections.singletonList(\"index-to-alias\")), new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"Response status code %d. Created alias '%s' that aliases index '%s'.\",\n     response.getStatusCode(), response.getValue().getName(), response.getValue().getIndexes().get(0));\n```"
  returns:
    description: "the created alias."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createIndex(com.azure.search.documents.indexes.models.SearchIndex)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createIndex(SearchIndex index)"
  name: "createIndex(SearchIndex index)"
  nameWithType: "SearchIndexClient.createIndex(SearchIndex index)"
  summary: "Creates a new Azure Cognitive Search index"
  parameters:
  - description: "definition of the index to create"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndex createIndex(SearchIndex index)"
  desc: "Creates a new Azure Cognitive Search index\n\n**Code Sample**\n\nCreate search index named \"searchIndex\".\n\n```java\nList<SearchField> searchFields = Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING).setKey(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING).setSearchable(true)\n );\n SearchIndex searchIndex = new SearchIndex(\"searchIndex\", searchFields);\n SearchIndex indexFromService = SEARCH_INDEX_CLIENT.createIndex(searchIndex);\n System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", indexFromService.getName(),\n     indexFromService.getETag());\n```"
  returns:
    description: "the created Index."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createIndexWithResponse(SearchIndex index, Context context)"
  name: "createIndexWithResponse(SearchIndex index, Context context)"
  nameWithType: "SearchIndexClient.createIndexWithResponse(SearchIndex index, Context context)"
  summary: "Creates a new Azure Cognitive Search index"
  parameters:
  - description: "definition of the index to create"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndex> createIndexWithResponse(SearchIndex index, Context context)"
  desc: "Creates a new Azure Cognitive Search index\n\n**Code Sample**\n\nCreate search index named \"searchIndex\".\n\n```java\nList<SearchField> searchFields = Arrays.asList(\n     new SearchField(\"hotelId\", SearchFieldDataType.STRING).setKey(true),\n     new SearchField(\"hotelName\", SearchFieldDataType.STRING).setSearchable(true)\n );\n SearchIndex searchIndex = new SearchIndex(\"searchIndex\", searchFields);\n\n Response<SearchIndex> indexFromServiceResponse =\n     SEARCH_INDEX_CLIENT.createIndexWithResponse(searchIndex, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n     indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName());\n```"
  returns:
    description: "a response containing the created Index."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateAlias(com.azure.search.documents.indexes.models.SearchAlias)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateAlias(SearchAlias alias)"
  name: "createOrUpdateAlias(SearchAlias alias)"
  nameWithType: "SearchIndexClient.createOrUpdateAlias(SearchAlias alias)"
  summary: "Creates or updates an Azure Cognitive Search alias."
  parameters:
  - description: "definition of the alias to create or update."
    name: "alias"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchAlias createOrUpdateAlias(SearchAlias alias)"
  desc: "Creates or updates an Azure Cognitive Search alias.\n\n**Code Sample**\n\nCreate then update the search alias named \"my-alias\".\n\n```java\nSearchAlias searchAlias = SEARCH_INDEX_CLIENT.createOrUpdateAlias(\n     new SearchAlias(\"my-alias\", Collections.singletonList(\"index-to-alias\")));\n\n System.out.printf(\"Created alias '%s' that aliases index '%s'.\", searchAlias.getName(),\n     searchAlias.getIndexes().get(0));\n\n searchAlias = SEARCH_INDEX_CLIENT.createOrUpdateAlias(new SearchAlias(searchAlias.getName(),\n     Collections.singletonList(\"new-index-to-alias\")));\n\n System.out.printf(\"Updated alias '%s' to aliases index '%s'.\", searchAlias.getName(),\n     searchAlias.getIndexes().get(0));\n```"
  returns:
    description: "the created or updated alias."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateAliasWithResponse(com.azure.search.documents.indexes.models.SearchAlias,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  summary: "Creates or updates an Azure Cognitive Search alias."
  parameters:
  - description: "definition of the alias to create or update."
    name: "alias"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
  - description: "only update the alias if the eTag matches the alias on the service."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchAlias> createOrUpdateAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  desc: "Creates or updates an Azure Cognitive Search alias.\n\n**Code Sample**\n\nCreate then update the search alias named \"my-alias\".\n\n```java\nResponse<SearchAlias> response = SEARCH_INDEX_CLIENT.createOrUpdateAliasWithResponse(\n     new SearchAlias(\"my-alias\", Collections.singletonList(\"index-to-alias\")), false, new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"Response status code %d. Created alias '%s' that aliases index '%s'.\",\n     response.getStatusCode(), response.getValue().getName(), response.getValue().getIndexes().get(0));\n\n response = SEARCH_INDEX_CLIENT.createOrUpdateAliasWithResponse(\n     new SearchAlias(response.getValue().getName(), Collections.singletonList(\"new-index-to-alias\"))\n         .setETag(response.getValue().getETag()), true, new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"Response status code %d. Updated alias '%s' that aliases index '%s'.\",\n     response.getStatusCode(), response.getValue().getName(), response.getValue().getIndexes().get(0));\n```"
  returns:
    description: "the created or updated alias."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex(com.azure.search.documents.indexes.models.SearchIndex)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndex(SearchIndex index)"
  name: "createOrUpdateIndex(SearchIndex index)"
  nameWithType: "SearchIndexClient.createOrUpdateIndex(SearchIndex index)"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  parameters:
  - description: "the definition of the index to create or update"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndex createOrUpdateIndex(SearchIndex index)"
  desc: "Creates a new Azure Cognitive Search index or updates an index if it already exists.\n\n**Code Sample**\n\nCreate or update search index named \"searchIndex\".\n\n```java\nSearchIndex indexFromService = SEARCH_INDEX_CLIENT.getIndex(\"searchIndex\");\n indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester(\"sg\",\n     Collections.singletonList(\"hotelName\"))));\n SearchIndex updatedIndex = SEARCH_INDEX_CLIENT.createOrUpdateIndex(indexFromService);\n System.out.printf(\"The index name is %s. The suggester name of index is %s.%n\", updatedIndex.getName(),\n     updatedIndex.getSuggesters().get(0).getName());\n```"
  returns:
    description: "the index that was created or updated."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  summary: "Creates a new Azure Cognitive Search index or updates an index if it already exists."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SearchIndex\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndex\"></xref> to create or update"
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "allows new analyzers, tokenizers, token filters, or char filters to be added to an\n index by taking the index offline for at least a few seconds. This temporarily causes indexing and query requests\n to fail. Performance and write availability of the index can be impaired for several minutes after the index is\n updated, or longer for very large indexes."
    name: "allowIndexDowntime"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>index</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndex> createOrUpdateIndexWithResponse(SearchIndex index, boolean allowIndexDowntime, boolean onlyIfUnchanged, Context context)"
  desc: "Creates a new Azure Cognitive Search index or updates an index if it already exists.\n\n**Code Sample**\n\nCreate or update search index named \"searchIndex\".\n\n```java\nSearchIndex indexFromService = SEARCH_INDEX_CLIENT.getIndex(\"searchIndex\");\n indexFromService.setSuggesters(Collections.singletonList(new SearchSuggester(\"sg\",\n     Collections.singletonList(\"hotelName\"))));\n Response<SearchIndex> updatedIndexResponse = SEARCH_INDEX_CLIENT.createOrUpdateIndexWithResponse(indexFromService, true,\n     false, new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the normal response is %s.%n\"\n         + \"The index name is %s. The ETag of index is %s.%n\", updatedIndexResponse.getStatusCode(),\n     updatedIndexResponse.getValue().getName(), updatedIndexResponse.getValue().getETag());\n```"
  returns:
    description: "a response containing the Index that was created or updated."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  name: "createOrUpdateSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchIndexClient.createOrUpdateSynonymMap(SynonymMap synonymMap)"
  summary: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  parameters:
  - description: "the definition of the synonym map to create or update"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SynonymMap createOrUpdateSynonymMap(SynonymMap synonymMap)"
  desc: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists.\n\n**Code Sample**\n\nCreate or update synonym map named \"synonymMap\".\n\n```java\nSynonymMap synonymMap = SEARCH_INDEX_CLIENT.getSynonymMap(\"searchIndex\");\n synonymMap.setSynonyms(\"United States, United States of America, USA, America\\nWashington, Wash. => WA\");\n SynonymMap updatedSynonymMap = SEARCH_INDEX_CLIENT.createOrUpdateSynonymMap(synonymMap);\n System.out.printf(\"The synonym map name is %s. The synonyms are %s.%n\", updatedSynonymMap.getName(),\n     updatedSynonymMap.getSynonyms());\n```"
  returns:
    description: "the synonym map that was created or updated."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  name: "createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  summary: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists."
  parameters:
  - description: "the definition of the synonym map to create or update"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to update if the <code>synonymMap</code> is the same as the current service value.\n <code>false</code> to always update existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SynonymMap> createOrUpdateSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  desc: "Creates a new Azure Cognitive Search synonym map or updates a synonym map if it already exists.\n\n**Code Sample**\n\nCreate or update synonym map named \"synonymMap\".\n\n```java\nSynonymMap synonymMap = SEARCH_INDEX_CLIENT.getSynonymMap(\"searchIndex\");\n synonymMap.setSynonyms(\"United States, United States of America, USA, America\\nWashington, Wash. => WA\");\n Response<SynonymMap> updatedSynonymMap =\n     SEARCH_INDEX_CLIENT.createOrUpdateSynonymMapWithResponse(synonymMap, true,\n         new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the normal response is %s.%n\"\n         + \"The synonym map name is %s. The synonyms are %s.%n\", updatedSynonymMap.getStatusCode(),\n     updatedSynonymMap.getValue().getName(), updatedSynonymMap.getValue().getSynonyms());\n```"
  returns:
    description: "a response containing the synonym map that was created or updated."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap(com.azure.search.documents.indexes.models.SynonymMap)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createSynonymMap(SynonymMap synonymMap)"
  name: "createSynonymMap(SynonymMap synonymMap)"
  nameWithType: "SearchIndexClient.createSynonymMap(SynonymMap synonymMap)"
  summary: "Creates a new Azure Cognitive Search synonym map."
  parameters:
  - description: "the definition of the synonym map to create"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SynonymMap createSynonymMap(SynonymMap synonymMap)"
  desc: "Creates a new Azure Cognitive Search synonym map.\n\n**Code Sample**\n\nCreate synonym map named \"synonymMap\".\n\n```java\nSynonymMap synonymMap = new SynonymMap(\"synonymMap\",\n     \"United States, United States of America, USA\\nWashington, Wash. => WA\");\n SynonymMap synonymMapFromService = SEARCH_INDEX_CLIENT.createSynonymMap(synonymMap);\n System.out.printf(\"The synonym map name is %s. The ETag of synonym map is %s.%n\",\n     synonymMapFromService.getName(), synonymMapFromService.getETag());\n```"
  returns:
    description: "the created <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref>."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.createSynonymMapWithResponse(SynonymMap synonymMap, Context context)"
  name: "createSynonymMapWithResponse(SynonymMap synonymMap, Context context)"
  nameWithType: "SearchIndexClient.createSynonymMapWithResponse(SynonymMap synonymMap, Context context)"
  summary: "Creates a new Azure Cognitive Search synonym map."
  parameters:
  - description: "the definition of the synonym map to create"
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SynonymMap> createSynonymMapWithResponse(SynonymMap synonymMap, Context context)"
  desc: "Creates a new Azure Cognitive Search synonym map.\n\n**Code Sample**\n\nCreate synonym map named \"synonymMap\".\n\n```java\nSynonymMap synonymMap = new SynonymMap(\"synonymMap\",\n     \"United States, United States of America, USA\\nWashington, Wash. => WA\");\n Response<SynonymMap> synonymMapFromService = SEARCH_INDEX_CLIENT.createSynonymMapWithResponse(synonymMap,\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %d.%n\"\n         + \"The synonym map name is %s. The ETag of synonym map is %s.%n\", synonymMapFromService.getStatusCode(),\n     synonymMapFromService.getValue().getName(), synonymMapFromService.getValue().getETag());\n```"
  returns:
    description: "a response containing the created SynonymMap."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.deleteAlias(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.deleteAlias(String aliasName)"
  name: "deleteAlias(String aliasName)"
  nameWithType: "SearchIndexClient.deleteAlias(String aliasName)"
  summary: "Deletes the Azure Cognitive Search alias."
  parameters:
  - description: "name of the alias to delete."
    name: "aliasName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteAlias(String aliasName)"
  desc: "Deletes the Azure Cognitive Search alias.\n\n**Code Sample**\n\nDelete the search alias named \"my-alias\".\n\n```java\nSEARCH_INDEX_CLIENT.deleteAlias(\"my-alias\");\n\n System.out.println(\"Deleted alias 'my-alias'.\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.deleteAliasWithResponse(com.azure.search.documents.indexes.models.SearchAlias,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.deleteAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  name: "deleteAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.deleteAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  summary: "Deletes the Azure Cognitive Search alias."
  parameters:
  - description: "the alias to delete."
    name: "alias"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
  - description: "only delete the alias if the eTag matches the alias on the service."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteAliasWithResponse(SearchAlias alias, boolean onlyIfUnchanged, Context context)"
  desc: "Deletes the Azure Cognitive Search alias.\n\n**Code Sample**\n\nDelete the search alias named \"my-alias\".\n\n```java\nSearchAlias searchAlias = SEARCH_INDEX_CLIENT.getAlias(\"my-alias\");\n\n Response<Void> response = SEARCH_INDEX_CLIENT.deleteAliasWithResponse(searchAlias, true,\n     new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"Response status code %d. Deleted alias 'my-alias'.\", response.getStatusCode());\n```"
  returns:
    description: "a response indicating the alias has been deleted."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.deleteIndex(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.deleteIndex(String indexName)"
  name: "deleteIndex(String indexName)"
  nameWithType: "SearchIndexClient.deleteIndex(String indexName)"
  summary: "Deletes an Azure Cognitive Search index and all the documents it contains."
  parameters:
  - description: "the name of the index to delete"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteIndex(String indexName)"
  desc: "Deletes an Azure Cognitive Search index and all the documents it contains.\n\n**Code Sample**\n\nDelete search index with name \"searchIndex\".\n\n```java\nSEARCH_INDEX_CLIENT.deleteIndex(\"searchIndex\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse(com.azure.search.documents.indexes.models.SearchIndex,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)"
  name: "deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)"
  summary: "Deletes an Azure Cognitive Search index and all the documents it contains."
  parameters:
  - description: "the Search <xref uid=\"com.azure.search.documents.indexes.models.SearchIndex\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchIndex\"></xref> to delete."
    name: "index"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>index</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the Http pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteIndexWithResponse(SearchIndex index, boolean onlyIfUnchanged, Context context)"
  desc: "Deletes an Azure Cognitive Search index and all the documents it contains.\n\n**Code Sample**\n\nDelete search index with name \"searchIndex\".\n\n```java\nSearchIndex indexFromService = SEARCH_INDEX_CLIENT.getIndex(\"searchIndex\");\n Response<Void> deleteResponse = SEARCH_INDEX_CLIENT.deleteIndexWithResponse(indexFromService, true,\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %d.%n\", deleteResponse.getStatusCode());\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMap(String synonymMapName)"
  name: "deleteSynonymMap(String synonymMapName)"
  nameWithType: "SearchIndexClient.deleteSynonymMap(String synonymMapName)"
  summary: "Deletes an Azure Cognitive Search synonym map."
  parameters:
  - description: "the name of the synonym map to delete"
    name: "synonymMapName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void deleteSynonymMap(String synonymMapName)"
  desc: "Deletes an Azure Cognitive Search synonym map.\n\n**Code Sample**\n\nDelete synonym map with name \"synonymMap\".\n\n```java\nSEARCH_INDEX_CLIENT.deleteSynonymMap(\"synonymMap\");\n```"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse(com.azure.search.documents.indexes.models.SynonymMap,boolean,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  name: "deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  nameWithType: "SearchIndexClient.deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  summary: "Deletes an Azure Cognitive Search synonym map."
  parameters:
  - description: "the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> to delete."
    name: "synonymMap"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
  - description: "<code>true</code> to delete if the <code>synonymMap</code> is the same as the current service value.\n <code>false</code> to always delete existing value."
    name: "onlyIfUnchanged"
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the Http pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<Void> deleteSynonymMapWithResponse(SynonymMap synonymMap, boolean onlyIfUnchanged, Context context)"
  desc: "Deletes an Azure Cognitive Search synonym map.\n\n**Code Sample**\n\nDelete synonym map with name \"synonymMap\".\n\n```java\nSynonymMap synonymMap = SEARCH_INDEX_CLIENT.getSynonymMap(\"synonymMap\");\n Response<Void> response = SEARCH_INDEX_CLIENT.deleteSynonymMapWithResponse(synonymMap, true,\n     new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\" + response.getStatusCode());\n```"
  returns:
    description: "a response signalling completion."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getAlias(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getAlias(String aliasName)"
  name: "getAlias(String aliasName)"
  nameWithType: "SearchIndexClient.getAlias(String aliasName)"
  summary: "Gets the Azure Cognitive Search alias."
  parameters:
  - description: "name of the alias to get."
    name: "aliasName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchAlias getAlias(String aliasName)"
  desc: "Gets the Azure Cognitive Search alias.\n\n**Code Sample**\n\nGet the search alias named \"my-alias\".\n\n```java\nSearchAlias searchAlias = SEARCH_INDEX_CLIENT.getAlias(\"my-alias\");\n\n System.out.printf(\"Retrieved alias '%s' that aliases index '%s'.\", searchAlias.getName(),\n     searchAlias.getIndexes().get(0));\n```"
  returns:
    description: "the retrieved alias."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getAliasWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getAliasWithResponse(String aliasName, Context context)"
  name: "getAliasWithResponse(String aliasName, Context context)"
  nameWithType: "SearchIndexClient.getAliasWithResponse(String aliasName, Context context)"
  summary: "Gets the Azure Cognitive Search alias."
  parameters:
  - description: "name of the alias to get."
    name: "aliasName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchAlias> getAliasWithResponse(String aliasName, Context context)"
  desc: "Gets the Azure Cognitive Search alias.\n\n**Code Sample**\n\nGet the search alias named \"my-alias\".\n\n```java\nResponse<SearchAlias> response = SEARCH_INDEX_CLIENT.getAliasWithResponse(\"my-alias\", new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"Response status code %d. Retrieved alias '%s' that aliases index '%s'.\",\n     response.getStatusCode(), response.getValue().getName(), response.getValue().getIndexes().get(0));\n```"
  returns:
    description: "the retrieved alias."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getEndpoint()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getEndpoint()"
  name: "getEndpoint()"
  nameWithType: "SearchIndexClient.getEndpoint()"
  summary: "Gets the endpoint for the Azure Cognitive Search service."
  syntax: "public String getEndpoint()"
  desc: "Gets the endpoint for the Azure Cognitive Search service."
  returns:
    description: "the endpoint value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getIndex(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getIndex(String indexName)"
  name: "getIndex(String indexName)"
  nameWithType: "SearchIndexClient.getIndex(String indexName)"
  summary: "Retrieves an index definition from the Azure Cognitive Search."
  parameters:
  - description: "the name of the index to retrieve"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndex getIndex(String indexName)"
  desc: "Retrieves an index definition from the Azure Cognitive Search.\n\n**Code Sample**\n\nGet search index with name \"searchIndex\".\n\n```java\nSearchIndex indexFromService =\n     SEARCH_INDEX_CLIENT.getIndex(\"searchIndex\");\n System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", indexFromService.getName(),\n     indexFromService.getETag());\n```"
  returns:
    description: "the Index."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getIndexStatistics(String indexName)"
  name: "getIndexStatistics(String indexName)"
  nameWithType: "SearchIndexClient.getIndexStatistics(String indexName)"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  parameters:
  - description: "the name of the index for which to retrieve statistics"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchIndexStatistics getIndexStatistics(String indexName)"
  desc: "Returns statistics for the given index, including a document count and storage usage.\n\n**Code Sample**\n\nGet search index \"searchIndex\" statistics.\n\n```java\nSearchIndexStatistics statistics = SEARCH_INDEX_CLIENT.getIndexStatistics(\"searchIndex\");\n System.out.printf(\"There are %d documents and storage size of %d available in 'searchIndex'.%n\",\n     statistics.getDocumentCount(), statistics.getStorageSize());\n```"
  returns:
    description: "the index statistics result."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchIndexStatistics?alt=com.azure.search.documents.indexes.models.SearchIndexStatistics&text=SearchIndexStatistics\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getIndexStatisticsWithResponse(String indexName, Context context)"
  name: "getIndexStatisticsWithResponse(String indexName, Context context)"
  nameWithType: "SearchIndexClient.getIndexStatisticsWithResponse(String indexName, Context context)"
  summary: "Returns statistics for the given index, including a document count and storage usage."
  parameters:
  - description: "the name of the index for which to retrieve statistics"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndexStatistics> getIndexStatisticsWithResponse(String indexName, Context context)"
  desc: "Returns statistics for the given index, including a document count and storage usage.\n\n**Code Sample**\n\nGet search index \"searchIndex\" statistics.\n\n```java\nResponse<SearchIndexStatistics> statistics = SEARCH_INDEX_CLIENT.getIndexStatisticsWithResponse(\"searchIndex\",\n     new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s.%n\"\n         + \"There are %d documents and storage size of %d available in 'searchIndex'.%n\",\n     statistics.getStatusCode(), statistics.getValue().getDocumentCount(),\n     statistics.getValue().getStorageSize());\n```"
  returns:
    description: "a response containing the index statistics result."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndexStatistics?alt=com.azure.search.documents.indexes.models.SearchIndexStatistics&text=SearchIndexStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getIndexWithResponse(String indexName, Context context)"
  name: "getIndexWithResponse(String indexName, Context context)"
  nameWithType: "SearchIndexClient.getIndexWithResponse(String indexName, Context context)"
  summary: "Retrieves an index definition from the Azure Cognitive Search."
  parameters:
  - description: "the name of the index to retrieve"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchIndex> getIndexWithResponse(String indexName, Context context)"
  desc: "Retrieves an index definition from the Azure Cognitive Search.\n\n**Code Sample**\n\nGet search index with \"searchIndex.\n\n```java\nResponse<SearchIndex> indexFromServiceResponse =\n     SEARCH_INDEX_CLIENT.getIndexWithResponse(\"searchIndex\", new Context(KEY_1, VALUE_1));\n\n System.out.printf(\"The status code of the response is %s. The index name is %s.%n\",\n     indexFromServiceResponse.getStatusCode(), indexFromServiceResponse.getValue().getName());\n```"
  returns:
    description: "a response containing the Index."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getSearchClient(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getSearchClient(String indexName)"
  name: "getSearchClient(String indexName)"
  nameWithType: "SearchIndexClient.getSearchClient(String indexName)"
  summary: "Initializes a new <xref uid=\"com.azure.search.documents.SearchClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchClient\"></xref> using the given Index name and the same configuration as the Search<wbr>Service<wbr>Client."
  parameters:
  - description: "the name of the Index for the client"
    name: "indexName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchClient getSearchClient(String indexName)"
  desc: "Initializes a new <xref uid=\"com.azure.search.documents.SearchClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchClient\"></xref> using the given Index name and the same configuration as the SearchServiceClient."
  returns:
    description: "a <xref uid=\"com.azure.search.documents.SearchClient\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SearchClient\"></xref> created from the service client configuration"
    type: "<xref href=\"com.azure.search.documents.SearchClient?alt=com.azure.search.documents.SearchClient&text=SearchClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getServiceStatistics()"
  name: "getServiceStatistics()"
  nameWithType: "SearchIndexClient.getServiceStatistics()"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  syntax: "public SearchServiceStatistics getServiceStatistics()"
  desc: "Returns service level statistics for a search service, including service counters and limits.\n\n**Code Sample**\n\nGet service statistics.\n\n```java\nSearchServiceStatistics serviceStatistics = SEARCH_INDEX_CLIENT.getServiceStatistics();\n System.out.printf(\"There are %s search indexes in your service.%n\",\n     serviceStatistics.getCounters().getIndexCounter());\n```"
  returns:
    description: "the search service statistics result."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchServiceStatistics?alt=com.azure.search.documents.indexes.models.SearchServiceStatistics&text=SearchServiceStatistics\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getServiceStatisticsWithResponse(Context context)"
  name: "getServiceStatisticsWithResponse(Context context)"
  nameWithType: "SearchIndexClient.getServiceStatisticsWithResponse(Context context)"
  summary: "Returns service level statistics for a search service, including service counters and limits."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SearchServiceStatistics> getServiceStatisticsWithResponse(Context context)"
  desc: "Returns service level statistics for a search service, including service counters and limits.\n\n**Code Sample**\n\nGet service statistics.\n\n```java\nResponse<SearchServiceStatistics> serviceStatistics =\n     SEARCH_INDEX_CLIENT.getServiceStatisticsWithResponse(new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %s.%nThere are %s search indexes in your service.%n\",\n     serviceStatistics.getStatusCode(),\n     serviceStatistics.getValue().getCounters().getIndexCounter());\n```"
  returns:
    description: "the search service statistics result."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchServiceStatistics?alt=com.azure.search.documents.indexes.models.SearchServiceStatistics&text=SearchServiceStatistics\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getSynonymMap(String synonymMapName)"
  name: "getSynonymMap(String synonymMapName)"
  nameWithType: "SearchIndexClient.getSynonymMap(String synonymMapName)"
  summary: "Retrieves a synonym map definition."
  parameters:
  - description: "name of the synonym map to retrieve"
    name: "synonymMapName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SynonymMap getSynonymMap(String synonymMapName)"
  desc: "Retrieves a synonym map definition.\n\n**Code Sample**\n\nGet synonym map with name \"synonymMap\".\n\n```java\nSynonymMap synonymMapFromService =\n     SEARCH_INDEX_CLIENT.getSynonymMap(\"synonymMap\");\n System.out.printf(\"The synonym map is %s. The ETag of synonym map is %s.%n\", synonymMapFromService.getName(),\n     synonymMapFromService.getETag());\n```"
  returns:
    description: "the <xref uid=\"com.azure.search.documents.indexes.models.SynonymMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SynonymMap\"></xref> definition"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse(java.lang.String,com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.getSynonymMapWithResponse(String synonymMapName, Context context)"
  name: "getSynonymMapWithResponse(String synonymMapName, Context context)"
  nameWithType: "SearchIndexClient.getSynonymMapWithResponse(String synonymMapName, Context context)"
  summary: "Retrieves a synonym map definition."
  parameters:
  - description: "name of the synonym map to retrieve"
    name: "synonymMapName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "a context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Response<SynonymMap> getSynonymMapWithResponse(String synonymMapName, Context context)"
  desc: "Retrieves a synonym map definition.\n\n**Code Sample**\n\nGet synonym map with name \"synonymMap\".\n\n```java\nResponse<SynonymMap> synonymMapFromService =\n     SEARCH_INDEX_CLIENT.getSynonymMapWithResponse(\"synonymMap\", new Context(KEY_1, VALUE_1));\n System.out.printf(\"The status code of the response is %d.%n\"\n         + \"The synonym map name is %s. The ETag of synonym map is %s.%n\", synonymMapFromService.getStatusCode(),\n     synonymMapFromService.getValue().getName(), synonymMapFromService.getValue().getETag());\n```"
  returns:
    description: "a response containing the SynonymMap."
    type: "<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listAliases()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listAliases()"
  name: "listAliases()"
  nameWithType: "SearchIndexClient.listAliases()"
  summary: "Lists all aliases in the Azure Cognitive Search service."
  syntax: "public PagedIterable<SearchAlias> listAliases()"
  desc: "Lists all aliases in the Azure Cognitive Search service.\n\n**Code Sample**\n\nList aliases\n\n```java\nSEARCH_INDEX_CLIENT.listAliases()\n     .forEach(searchAlias -> System.out.printf(\"Listed alias '%s' that aliases index '%s'.\",\n         searchAlias.getName(), searchAlias.getIndexes().get(0)));\n```"
  returns:
    description: "a list of aliases in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listAliases(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listAliases(Context context)"
  name: "listAliases(Context context)"
  nameWithType: "SearchIndexClient.listAliases(Context context)"
  summary: "Lists all aliases in the Azure Cognitive Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SearchAlias> listAliases(Context context)"
  desc: "Lists all aliases in the Azure Cognitive Search service.\n\n**Code Sample**\n\nList aliases\n\n```java\nSEARCH_INDEX_CLIENT.listAliases(new Context(KEY_1, VALUE_1))\n     .forEach(searchAlias -> System.out.printf(\"Listed alias '%s' that aliases index '%s'.\",\n         searchAlias.getName(), searchAlias.getIndexes().get(0)));\n```"
  returns:
    description: "a list of aliases in the service."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchAlias?alt=com.azure.search.documents.indexes.models.SearchAlias&text=SearchAlias\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listIndexNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listIndexNames()"
  name: "listIndexNames()"
  nameWithType: "SearchIndexClient.listIndexNames()"
  summary: "Lists all index names for an Azure Cognitive Search service."
  syntax: "public PagedIterable<String> listIndexNames()"
  desc: "Lists all index names for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexes names.\n\n```java\nPagedIterable<String> indexes = SEARCH_INDEX_CLIENT.listIndexNames();\n for (String indexName: indexes) {\n     System.out.printf(\"The index name is %s.%n\", indexName);\n }\n```"
  returns:
    description: "the list of index names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listIndexNames(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listIndexNames(Context context)"
  name: "listIndexNames(Context context)"
  nameWithType: "SearchIndexClient.listIndexNames(Context context)"
  summary: "Lists all indexes names for an Azure Cognitive Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<String> listIndexNames(Context context)"
  desc: "Lists all indexes names for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexes names.\n\n```java\nPagedIterable<String> indexes = SEARCH_INDEX_CLIENT.listIndexNames(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + indexes.iterableByPage().iterator().next().getStatusCode());\n for (String indexName: indexes) {\n     System.out.printf(\"The index name is %s.%n\", indexName);\n }\n```"
  returns:
    description: "the list of index names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listIndexes()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listIndexes()"
  name: "listIndexes()"
  nameWithType: "SearchIndexClient.listIndexes()"
  summary: "Lists all indexes available for an Azure Cognitive Search service."
  syntax: "public PagedIterable<SearchIndex> listIndexes()"
  desc: "Lists all indexes available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexes.\n\n```java\nPagedIterable<SearchIndex> indexes = SEARCH_INDEX_CLIENT.listIndexes();\n for (SearchIndex index: indexes) {\n     System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", index.getName(),\n         index.getETag());\n }\n```"
  returns:
    description: "the list of indexes."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listIndexes(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listIndexes(Context context)"
  name: "listIndexes(Context context)"
  nameWithType: "SearchIndexClient.listIndexes(Context context)"
  summary: "Lists all indexes available for an Azure Cognitive Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SearchIndex> listIndexes(Context context)"
  desc: "Lists all indexes available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all search indexes.\n\n```java\nPagedIterable<SearchIndex> indexes = SEARCH_INDEX_CLIENT.listIndexes(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + indexes.iterableByPage().iterator().next().getStatusCode());\n for (SearchIndex index: indexes) {\n     System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", index.getName(), index.getETag());\n }\n```"
  returns:
    description: "the list of indexes."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchIndex?alt=com.azure.search.documents.indexes.models.SearchIndex&text=SearchIndex\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames()"
  name: "listSynonymMapNames()"
  nameWithType: "SearchIndexClient.listSynonymMapNames()"
  summary: "Lists all synonym maps names for an Azure Cognitive Search service."
  syntax: "public PagedIterable<String> listSynonymMapNames()"
  desc: "Lists all synonym maps names for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all synonym map names.\n\n```java\nPagedIterable<String> synonymMaps = SEARCH_INDEX_CLIENT.listSynonymMapNames();\n for (String synonymMap: synonymMaps) {\n     System.out.printf(\"The synonymMap name is %s.%n\", synonymMap);\n }\n```"
  returns:
    description: "the list of synonym maps."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMapNames(Context context)"
  name: "listSynonymMapNames(Context context)"
  nameWithType: "SearchIndexClient.listSynonymMapNames(Context context)"
  summary: "Lists all synonym maps names for an Azure Cognitive Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<String> listSynonymMapNames(Context context)"
  desc: "Lists all synonym maps names for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all synonym map names.\n\n```java\nPagedIterable<String> synonymMaps = SEARCH_INDEX_CLIENT.listIndexNames(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + synonymMaps.iterableByPage().iterator().next().getStatusCode());\n for (String synonymMapNames: synonymMaps) {\n     System.out.printf(\"The synonymMap name is %s.%n\", synonymMapNames);\n }\n```"
  returns:
    description: "the list of synonym map names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps()"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps()"
  name: "listSynonymMaps()"
  nameWithType: "SearchIndexClient.listSynonymMaps()"
  summary: "Lists all synonym maps available for an Azure Cognitive Search service."
  syntax: "public PagedIterable<SynonymMap> listSynonymMaps()"
  desc: "Lists all synonym maps available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all synonym maps.\n\n```java\nPagedIterable<SynonymMap> synonymMaps = SEARCH_INDEX_CLIENT.listSynonymMaps();\n for (SynonymMap synonymMap: synonymMaps) {\n     System.out.printf(\"The synonymMap name is %s. The ETag of synonymMap is %s.%n\", synonymMap.getName(),\n         synonymMap.getETag());\n }\n```"
  returns:
    description: "the list of synonym maps."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps(com.azure.core.util.Context)"
  fullName: "com.azure.search.documents.indexes.SearchIndexClient.listSynonymMaps(Context context)"
  name: "listSynonymMaps(Context context)"
  nameWithType: "SearchIndexClient.listSynonymMaps(Context context)"
  summary: "Lists all synonym maps available for an Azure Cognitive Search service."
  parameters:
  - description: "additional context that is passed through the HTTP pipeline during the service call"
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<SynonymMap> listSynonymMaps(Context context)"
  desc: "Lists all synonym maps available for an Azure Cognitive Search service.\n\n**Code Sample**\n\nList all synonym maps.\n\n```java\nPagedIterable<SynonymMap> synonymMaps = SEARCH_INDEX_CLIENT.listSynonymMaps(new Context(KEY_1, VALUE_1));\n System.out.println(\"The status code of the response is\"\n     + synonymMaps.iterableByPage().iterator().next().getStatusCode());\n for (SynonymMap index: synonymMaps) {\n     System.out.printf(\"The index name is %s. The ETag of index is %s.%n\", index.getName(), index.getETag());\n }\n```"
  returns:
    description: "the list of synonym map names."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SynonymMap?alt=com.azure.search.documents.indexes.models.SynonymMap&text=SynonymMap\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "class"
desc: "This class provides a client that contains the operations for creating, getting, listing, updating, or deleting indexes or synonym map and analyzing text in an Azure Cognitive Search service."
metadata: {}
package: "com.azure.search.documents.indexes"
artifact: com.azure:azure-search-documents:11.5.0-beta.12
