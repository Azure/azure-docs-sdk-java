### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration"
name: "listAnomaliesForDetectionConfiguration"
nameWithType: "MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration(String detectionConfigurationId, ListAnomaliesDetectedOptions options)"
  name: "listAnomaliesForDetectionConfiguration(String detectionConfigurationId, ListAnomaliesDetectedOptions options)"
  nameWithType: "MetricsAdvisorAsyncClient.listAnomaliesForDetectionConfiguration(String detectionConfigurationId, ListAnomaliesDetectedOptions options)"
  summary: "Fetch the anomalies identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListAnomaliesDetectedFilter filter = new ListAnomaliesDetectedFilter()\n     .setSeverity(Severity.LOW, Severity.MEDIUM);\n final ListAnomaliesDetectedOptions options = new ListAnomaliesDetectedOptions(startTime, endTime)\n     .setTop(10)\n     .setFilter(filter);\n metricAdvisorAsyncClient.listAnomaliesForDetectionConfiguration(detectionConfigurationId,\n     options)\n     .subscribe(anomaly -> {\n         System.out.printf(\"Anomaly Severity: %s%n\", anomaly.getSeverity());\n         System.out.printf(\"Series Key:\");\n         DimensionKey seriesKey = anomaly.getSeriesKey();\n         for (Map.Entry<String, String> dimension : seriesKey.asMap().entrySet()) {\n             System.out.printf(\"DimensionName: %s DimensionValue:%s%n\",\n                 dimension.getKey(), dimension.getValue());\n         }\n     });\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions?alt=com.azure.ai.metricsadvisor.models.ListAnomaliesDetectedOptions&text=ListAnomaliesDetectedOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<Anomaly> listAnomaliesForDetectionConfiguration(String detectionConfigurationId, ListAnomaliesDetectedOptions options)"
  returns:
    description: "The anomalies."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Anomaly?alt=com.azure.ai.metricsadvisor.models.Anomaly&text=Anomaly\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
