### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include
  id: Include
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS
  - com.fasterxml.jackson.annotation.JsonInclude.Include.CUSTOM
  - com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT
  - com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT
  - com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY
  - com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL
  - com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS
  - com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf(java.lang.String)
  - com.fasterxml.jackson.annotation.JsonInclude.Include.values()
  langs:
  - java
  name: JsonInclude.Include
  nameWithType: JsonInclude.Include
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include
  type: Enum
  package: com.fasterxml.jackson.annotation
  summary: Enumeration used with <xref uid="com.fasterxml.jackson.annotation.JsonInclude" data-throw-if-not-resolved="false">JsonInclude</xref> to define which properties of Java Beans are to be included in serialization.
  syntax:
    content: public enum JsonInclude.Include extends Enum<JsonInclude.Include>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS
  id: ALWAYS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: ALWAYS
  nameWithType: JsonInclude.Include.ALWAYS
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that property is to be always included, independent of value of the property.
  syntax:
    content: public static final JsonInclude.Include ALWAYS
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.CUSTOM
  id: CUSTOM
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: CUSTOM
  nameWithType: JsonInclude.Include.CUSTOM
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.CUSTOM
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that separate \`filter\` Object (specified by <xref uid="com.fasterxml.jackson.annotation.JsonInclude.valueFilter*" data-throw-if-not-resolved="false">JsonInclude#valueFilter</xref> for value itself, and/or <xref uid="com.fasterxml.jackson.annotation.JsonInclude.contentFilter*" data-throw-if-not-resolved="false">JsonInclude#contentFilter</xref> for contents of structured types) is to be used for determining inclusion criteria. Filter object's `equals()` method is called with value to serialize; if it returns `true` value is **excluded** (that is, filtered out); if `false` value is **included**.
  syntax:
    content: public static final JsonInclude.Include CUSTOM
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.Include()
  id: Include()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: Include()
  nameWithType: JsonInclude.Include.Include()
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.Include()
  overload: com.fasterxml.jackson.annotation.JsonInclude.Include.Include*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: private Include()
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT
  id: NON_ABSENT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: NON_ABSENT
  nameWithType: JsonInclude.Include.NON_ABSENT
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Value that indicates that properties are included unless their value is:

     *  null
     *  "absent" value of a referential type (like Java 8 \`Optional\`, or \{link java.util.concurrent.atomic.AtomicReference\}); that is, something that would not deference to a non-null value.

    This option is mostly used to work with "Optional"s (Java 8, Guava).
  syntax:
    content: public static final JsonInclude.Include NON_ABSENT
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT
  id: NON_DEFAULT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: NON_DEFAULT
  nameWithType: JsonInclude.Include.NON_DEFAULT
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Meaning of this setting depends on context: whether annotation is specified for POJO type (class), or not. In latter case annotation is either used as the global default, or as property override.


    When used for a POJO, definition is that only values that differ from the default values of POJO properties are included. This is done by creating an instance of POJO using zero-argument constructor, and accessing property values: value is used as the default value by using `equals()` method, except for the case where property has \`null\` value in which case straight null check is used.


    When NOT used for a POJO (that is, as a global default, or as property override), definition is such that:

     *  All values considered "empty" (as per <xref uid="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY" data-throw-if-not-resolved="false">#NON_EMPTY</xref>) are excluded
     *  Primitive/wrapper default values are excluded
     *  Date/time values that have timestamp (\`long\` value of milliseconds since epoch, see <xref uid="java.util.Date" data-throw-if-not-resolved="false">java.util.Date</xref>) of \`0L\` are excluded
  syntax:
    content: public static final JsonInclude.Include NON_DEFAULT
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY
  id: NON_EMPTY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: NON_EMPTY
  nameWithType: JsonInclude.Include.NON_EMPTY
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: >-
    Value that indicates that only properties with null value, or what is considered empty, are not to be included. Definition of emptiness is data type specific; see below for details on actual handling.


    Default emptiness for all types includes:

     *  `Null` values.
     *  "Absent" values (see <xref uid="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT" data-throw-if-not-resolved="false">#NON_ABSENT</xref>)

    so that as baseline, "empty" set includes values that would be excluded by both <xref uid="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL" data-throw-if-not-resolved="false">#NON_NULL</xref> and <xref uid="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT" data-throw-if-not-resolved="false">#NON_ABSENT</xref>.

    Beyond this base, following types have additional empty values:

     *  For <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref>s and <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>s, method `isEmpty()` is called;
     *  For Java arrays, empty arrays are ones with length of 0
     *  For Java <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>s, `length()` is called, and return value of 0 indicates empty String

    and for other types, null values are excluded but other exclusions (if any).


    Note that this default handling can be overridden by custom `JsonSerializer` implementation: if method `isEmpty()` is overridden, it will be called to see if non-null values are considered empty (null is always considered empty).


    Compatibility note: Jackson 2.6 included a wider range of "empty" values than either earlier (up to 2.5) or later (2.7 and beyond) types; specifically:

     *  Default values of primitive types (like `0` for \`int\`/\`java.lang.Integer\` and \`false\` for \`bool\`/\`Boolean\`)
     *  Timestamp 0 for date/time types

    With 2.7, definition has been tightened back to only containing types explained above (null, absent, empty String, empty containers), and now extended definition may be specified using <xref uid="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT" data-throw-if-not-resolved="false">#NON_DEFAULT</xref>.
  syntax:
    content: public static final JsonInclude.Include NON_EMPTY
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL
  id: NON_NULL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: NON_NULL
  nameWithType: JsonInclude.Include.NON_NULL
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that only properties with non-null values are to be included.
  syntax:
    content: public static final JsonInclude.Include NON_NULL
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS
  id: USE_DEFAULTS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: USE_DEFAULTS
  nameWithType: JsonInclude.Include.USE_DEFAULTS
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Pseudo-value used to indicate that the higher-level defaults make sense, to avoid overriding inclusion value. For example, if returned for a property this would use defaults for the class that contains property, if any defined; and if none defined for that, then global serialization inclusion details.
  syntax:
    content: public static final JsonInclude.Include USE_DEFAULTS
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonInclude.Include.valueOf(String name)
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf(String name)
  overload: com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonInclude.Include valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonInclude.Include
  langs:
  - java
  name: values()
  nameWithType: JsonInclude.Include.values()
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.values()
  overload: com.fasterxml.jackson.annotation.JsonInclude.Include.values*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonInclude.Include[] values()
    return:
      type: com.fasterxml.jackson.annotation.JsonInclude.Include[]
references:
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.Include*
  name: Include
  nameWithType: JsonInclude.Include.Include
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.Include
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonInclude.Include
    name: Include
    fullName: com.fasterxml.jackson.annotation.JsonInclude.Include
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.values*
  name: values
  nameWithType: JsonInclude.Include.values
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.values
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf*
  name: valueOf
  nameWithType: JsonInclude.Include.valueOf
  fullName: com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Enum<com.fasterxml.jackson.annotation.JsonInclude.Include>
  name: Enum<JsonInclude.Include>
  nameWithType: Enum<JsonInclude.Include>
  fullName: java.lang.Enum<com.fasterxml.jackson.annotation.JsonInclude.Include>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
