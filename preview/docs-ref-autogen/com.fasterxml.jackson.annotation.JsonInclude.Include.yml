### YamlMime:JavaEnum
uid: "com.fasterxml.jackson.annotation.JsonInclude.Include"
fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include"
name: "JsonInclude.Include"
nameWithType: "JsonInclude.Include"
summary: "Enumeration used with <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonInclude\"></xref> to define which properties of Java Beans are to be included in serialization."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Enum\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)"
- "java.lang.Enum.clone()"
- "java.lang.Enum.compareTo(E)"
- "java.lang.Enum.equals(java.lang.Object)"
- "java.lang.Enum.finalize()"
- "java.lang.Enum.getDeclaringClass()"
- "java.lang.Enum.hashCode()"
- "java.lang.Enum.name()"
- "java.lang.Enum.ordinal()"
- "java.lang.Enum.toString()"
- "java.lang.Object.getClass()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public enum JsonInclude.Include extends Enum<JsonInclude.Include>"
fields:
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.ALWAYS"
  name: "ALWAYS"
  nameWithType: "JsonInclude.Include.ALWAYS"
  summary: "Value that indicates that property is to be always included, independent of value of the property."
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.CUSTOM"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.CUSTOM"
  name: "CUSTOM"
  nameWithType: "JsonInclude.Include.CUSTOM"
  summary: "Value that indicates that separate \\`filter\\` Object (specified by <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.valueFilter*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonInclude#valueFilter\"></xref> for value itself, and/or <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.contentFilter*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonInclude#contentFilter\"></xref> for contents of structured types) is to be used for determining inclusion criteria. Filter object's `equals()` method is called with value to serialize; if it returns `true` value is **excluded** (that is, filtered out); if `false` value is **included**."
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT"
  name: "NON_ABSENT"
  nameWithType: "JsonInclude.Include.NON_ABSENT"
  summary: "Value that indicates that properties are included unless their value is:\n\n *  null\n *  \"absent\" value of a referential type (like Java 8 \\`Optional\\`, or \\{link java.util.concurrent.atomic.AtomicReference\\}); that is, something that would not deference to a non-null value.\n\nThis option is mostly used to work with \"Optional\"s (Java 8, Guava)."
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT"
  name: "NON_DEFAULT"
  nameWithType: "JsonInclude.Include.NON_DEFAULT"
  summary: "Meaning of this setting depends on context: whether annotation is specified for POJO type (class), or not. In latter case annotation is either used as the global default, or as property override.\n\nWhen used for a POJO, definition is that only values that differ from the default values of POJO properties are included. This is done by creating an instance of POJO using zero-argument constructor, and accessing property values: value is used as the default value by using `equals()` method, except for the case where property has \\`null\\` value in which case straight null check is used.\n\nWhen NOT used for a POJO (that is, as a global default, or as property override), definition is such that:\n\n *  All values considered \"empty\" (as per <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#NON_EMPTY\"></xref>) are excluded\n *  Primitive/wrapper default values are excluded\n *  Date/time values that have timestamp (\\`long\\` value of milliseconds since epoch, see <xref uid=\"java.util.Date\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Date\"></xref>) of \\`0L\\` are excluded"
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY"
  name: "NON_EMPTY"
  nameWithType: "JsonInclude.Include.NON_EMPTY"
  summary: "Value that indicates that only properties with null value, or what is considered empty, are not to be included. Definition of emptiness is data type specific; see below for details on actual handling.\n\nDefault emptiness for all types includes:\n\n *  `Null` values.\n *  \"Absent\" values (see <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#NON_ABSENT\"></xref>)\n\nso that as baseline, \"empty\" set includes values that would be excluded by both <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#NON_NULL\"></xref> and <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.Include.NON_ABSENT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#NON_ABSENT\"></xref>.\nBeyond this base, following types have additional empty values:\n\n *  For <xref uid=\"java.util.Collection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Collection\"></xref>s and <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Map\"></xref>s, method `isEmpty()` is called;\n *  For Java arrays, empty arrays are ones with length of 0\n *  For Java <xref uid=\"java.lang.String\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.lang.String\"></xref>s, `length()` is called, and return value of 0 indicates empty String\n\nand for other types, null values are excluded but other exclusions (if any).\n\nNote that this default handling can be overridden by custom `JsonSerializer` implementation: if method `isEmpty()` is overridden, it will be called to see if non-null values are considered empty (null is always considered empty).\n\nCompatibility note: Jackson 2.6 included a wider range of \"empty\" values than either earlier (up to 2.5) or later (2.7 and beyond) types; specifically:\n\n *  Default values of primitive types (like `0` for \\`int\\`/\\`java.lang.Integer\\` and \\`false\\` for \\`bool\\`/\\`Boolean\\`)\n *  Timestamp 0 for date/time types\n\nWith 2.7, definition has been tightened back to only containing types explained above (null, absent, empty String, empty containers), and now extended definition may be specified using <xref uid=\"com.fasterxml.jackson.annotation.JsonInclude.Include.NON_DEFAULT\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#NON_DEFAULT\"></xref>."
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL"
  name: "NON_NULL"
  nameWithType: "JsonInclude.Include.NON_NULL"
  summary: "Value that indicates that only properties with non-null values are to be included."
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.USE_DEFAULTS"
  name: "USE_DEFAULTS"
  nameWithType: "JsonInclude.Include.USE_DEFAULTS"
  summary: "Pseudo-value used to indicate that the higher-level defaults make sense, to avoid overriding inclusion value. For example, if returned for a property this would use defaults for the class that contains property, if any defined; and if none defined for that, then global serialization inclusion details."
methods:
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf(java.lang.String)"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.valueOf(String name)"
  name: "valueOf(String name)"
  nameWithType: "JsonInclude.Include.valueOf(String name)"
  parameters:
  - name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static JsonInclude.Include valueOf(String name)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonInclude.Include?alt=com.fasterxml.jackson.annotation.JsonInclude.Include&text=Include\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.fasterxml.jackson.annotation.JsonInclude.Include.values()"
  fullName: "com.fasterxml.jackson.annotation.JsonInclude.Include.values()"
  name: "values()"
  nameWithType: "JsonInclude.Include.values()"
  syntax: "public static JsonInclude.Include[] values()"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.annotation.JsonInclude.Include?alt=com.fasterxml.jackson.annotation.JsonInclude.Include&text=Include\" data-throw-if-not-resolved=\"False\" />[]"
metadata: {}
package: "com.fasterxml.jackson.annotation"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
