### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape
  id: Shape
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.ANY
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.BINARY
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.BOOLEAN
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.NATURAL
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_FLOAT
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_INT
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.SCALAR
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.isNumeric()
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.isStructured()
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.valueOf(java.lang.String)
  - com.fasterxml.jackson.annotation.JsonFormat.Shape.values()
  langs:
  - java
  name: JsonFormat.Shape
  nameWithType: JsonFormat.Shape
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape
  type: Enum
  package: com.fasterxml.jackson.annotation
  summary: Value enumeration used for indicating preferred Shape; translates loosely to JSON types, with some extra values to indicate less precise choices (i.e. allowing one of multiple actual shapes)
  syntax:
    content: public enum JsonFormat.Shape extends Enum<JsonFormat.Shape>
  inheritance:
  - java.lang.Object
  - java.lang.Enum
  inheritedMembers:
  - java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  - java.lang.Enum.clone()
  - java.lang.Enum.compareTo(E)
  - java.lang.Enum.equals(java.lang.Object)
  - java.lang.Enum.finalize()
  - java.lang.Enum.getDeclaringClass()
  - java.lang.Enum.hashCode()
  - java.lang.Enum.name()
  - java.lang.Enum.ordinal()
  - java.lang.Enum.toString()
  - java.lang.Object.getClass()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.ANY
  id: ANY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: ANY
  nameWithType: JsonFormat.Shape.ANY
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.ANY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Marker enum value that indicates "whatever" choice, meaning that annotation does NOT specify shape to use. Note that this is different from <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Shape.NATURAL" data-throw-if-not-resolved="false">Shape#NATURAL</xref>, which specifically instructs use of the "natural" shape for datatype.
  syntax:
    content: public static final JsonFormat.Shape ANY
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY
  id: ARRAY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: ARRAY
  nameWithType: JsonFormat.Shape.ARRAY
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that (JSON) Array type should be used.
  syntax:
    content: public static final JsonFormat.Shape ARRAY
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.BINARY
  id: BINARY
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: BINARY
  nameWithType: JsonFormat.Shape.BINARY
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.BINARY
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that Binary type (native, if format supports it; encoding using Base64 if only textual types supported) should be used.
  syntax:
    content: public static final JsonFormat.Shape BINARY
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.BOOLEAN
  id: BOOLEAN
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: BOOLEAN
  nameWithType: JsonFormat.Shape.BOOLEAN
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.BOOLEAN
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that (JSON) boolean type (true, false) should be used.
  syntax:
    content: public static final JsonFormat.Shape BOOLEAN
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.NATURAL
  id: NATURAL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: NATURAL
  nameWithType: JsonFormat.Shape.NATURAL
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.NATURAL
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Marker enum value that indicates the "default" choice for given datatype; for example, JSON String for <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>, or JSON Number for Java numbers. Note that this is different from <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Shape.ANY" data-throw-if-not-resolved="false">Shape#ANY</xref> in that this is actual explicit choice that overrides possible default settings.
  syntax:
    content: public static final JsonFormat.Shape NATURAL
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER
  id: NUMBER
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: NUMBER
  nameWithType: JsonFormat.Shape.NUMBER
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that a numeric (JSON) type should be used (but does not specify whether integer or floating-point representation should be used)
  syntax:
    content: public static final JsonFormat.Shape NUMBER
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_FLOAT
  id: NUMBER_FLOAT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: NUMBER_FLOAT
  nameWithType: JsonFormat.Shape.NUMBER_FLOAT
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_FLOAT
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that floating-point numeric type should be used
  syntax:
    content: public static final JsonFormat.Shape NUMBER_FLOAT
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_INT
  id: NUMBER_INT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: NUMBER_INT
  nameWithType: JsonFormat.Shape.NUMBER_INT
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_INT
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that integer number type should be used (and not <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Shape.NUMBER_FLOAT" data-throw-if-not-resolved="false">#NUMBER_FLOAT</xref>).
  syntax:
    content: public static final JsonFormat.Shape NUMBER_INT
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT
  id: OBJECT
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: OBJECT
  nameWithType: JsonFormat.Shape.OBJECT
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that (JSON) Object type should be used.
  syntax:
    content: public static final JsonFormat.Shape OBJECT
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.SCALAR
  id: SCALAR
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: SCALAR
  nameWithType: JsonFormat.Shape.SCALAR
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.SCALAR
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates shape should not be structural (that is, not <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Shape.ARRAY" data-throw-if-not-resolved="false">#ARRAY</xref> or <xref uid="com.fasterxml.jackson.annotation.JsonFormat.Shape.OBJECT" data-throw-if-not-resolved="false">#OBJECT</xref>, but can be any other shape.
  syntax:
    content: public static final JsonFormat.Shape SCALAR
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING
  id: STRING
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: STRING
  nameWithType: JsonFormat.Shape.STRING
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.STRING
  type: Field
  package: com.fasterxml.jackson.annotation
  summary: Value that indicates that (JSON) String type should be used.
  syntax:
    content: public static final JsonFormat.Shape STRING
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.Shape()
  id: Shape()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: Shape()
  nameWithType: JsonFormat.Shape.Shape()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.Shape()
  overload: com.fasterxml.jackson.annotation.JsonFormat.Shape.Shape*
  type: Constructor
  package: com.fasterxml.jackson.annotation
  syntax:
    content: private Shape()
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.isNumeric()
  id: isNumeric()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: isNumeric()
  nameWithType: JsonFormat.Shape.isNumeric()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.isNumeric()
  overload: com.fasterxml.jackson.annotation.JsonFormat.Shape.isNumeric*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public boolean isNumeric()
    return:
      type: boolean
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.isStructured()
  id: isStructured()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: isStructured()
  nameWithType: JsonFormat.Shape.isStructured()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.isStructured()
  overload: com.fasterxml.jackson.annotation.JsonFormat.Shape.isStructured*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public boolean isStructured()
    return:
      type: boolean
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.valueOf(java.lang.String)
  id: valueOf(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: valueOf(String name)
  nameWithType: JsonFormat.Shape.valueOf(String name)
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.valueOf(String name)
  overload: com.fasterxml.jackson.annotation.JsonFormat.Shape.valueOf*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonFormat.Shape valueOf(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.values()
  id: values()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonFormat.Shape
  langs:
  - java
  name: values()
  nameWithType: JsonFormat.Shape.values()
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.values()
  overload: com.fasterxml.jackson.annotation.JsonFormat.Shape.values*
  type: Method
  package: com.fasterxml.jackson.annotation
  syntax:
    content: public static JsonFormat.Shape[] values()
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape[]
references:
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.Shape*
  name: Shape
  nameWithType: JsonFormat.Shape.Shape
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.Shape
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape[]
  spec.java:
  - uid: com.fasterxml.jackson.annotation.JsonFormat.Shape
    name: Shape
    fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.values*
  name: values
  nameWithType: JsonFormat.Shape.values
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.values
  package: com.fasterxml.jackson.annotation
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.valueOf*
  name: valueOf
  nameWithType: JsonFormat.Shape.valueOf
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.valueOf
  package: com.fasterxml.jackson.annotation
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.isNumeric*
  name: isNumeric
  nameWithType: JsonFormat.Shape.isNumeric
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.isNumeric
  package: com.fasterxml.jackson.annotation
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape.isStructured*
  name: isStructured
  nameWithType: JsonFormat.Shape.isStructured
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape.isStructured
  package: com.fasterxml.jackson.annotation
- uid: java.lang.Enum<com.fasterxml.jackson.annotation.JsonFormat.Shape>
  name: Enum<JsonFormat.Shape>
  nameWithType: Enum<JsonFormat.Shape>
  fullName: java.lang.Enum<com.fasterxml.jackson.annotation.JsonFormat.Shape>
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Enum.toString()
  name: Enum.toString()
  nameWithType: Enum.toString()
  fullName: java.lang.Enum.toString()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Enum.clone()
  name: Enum.clone()
  nameWithType: Enum.clone()
  fullName: java.lang.Enum.clone()
- uid: java.lang.Enum.finalize()
  name: Enum.finalize()
  nameWithType: Enum.finalize()
  fullName: java.lang.Enum.finalize()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Enum.compareTo(E)
  name: Enum.compareTo(E)
  nameWithType: Enum.compareTo(E)
  fullName: java.lang.Enum.compareTo(E)
- uid: java.lang.Enum.name()
  name: Enum.name()
  nameWithType: Enum.name()
  fullName: java.lang.Enum.name()
- uid: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
  name: Enum.<T>valueOf(Class<T>,String)
  nameWithType: Enum.<T>valueOf(Class<T>,String)
  fullName: java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Enum.getDeclaringClass()
  name: Enum.getDeclaringClass()
  nameWithType: Enum.getDeclaringClass()
  fullName: java.lang.Enum.getDeclaringClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Enum.ordinal()
  name: Enum.ordinal()
  nameWithType: Enum.ordinal()
  fullName: java.lang.Enum.ordinal()
- uid: java.lang.Enum.hashCode()
  name: Enum.hashCode()
  nameWithType: Enum.hashCode()
  fullName: java.lang.Enum.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Enum.equals(java.lang.Object)
  name: Enum.equals(Object)
  nameWithType: Enum.equals(Object)
  fullName: java.lang.Enum.equals(java.lang.Object)
- uid: java.lang.Enum
  name: Enum
  nameWithType: Enum
  fullName: java.lang.Enum
- uid: java.lang.Enum.
  name: Enum.
  nameWithType: Enum.
  fullName: java.lang.Enum.
- uid: T>,java.lang.String)
  name: T>,String)
  nameWithType: T>,String)
  fullName: T>,java.lang.String)
- uid: T>valueOf(java.lang.Class
  name: T>valueOf(Class
  nameWithType: T>valueOf(Class
  fullName: T>valueOf(java.lang.Class
