### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.filter.TokenFilter
  id: TokenFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter
  children:
  - com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL
  - com.fasterxml.jackson.core.filter.TokenFilter.TokenFilter()
  - com.fasterxml.jackson.core.filter.TokenFilter._includeScalar()
  - com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()
  - com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()
  - com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray()
  - com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject()
  - com.fasterxml.jackson.core.filter.TokenFilter.includeBinary()
  - com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(java.lang.Object)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNull()
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigDecimal)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigInteger)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(java.lang.String)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue()
  - com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.lang.String)
  - com.fasterxml.jackson.core.filter.TokenFilter.includeValue(com.fasterxml.jackson.core.JsonParser)
  - com.fasterxml.jackson.core.filter.TokenFilter.toString()
  langs:
  - java
  name: TokenFilter
  nameWithType: TokenFilter
  fullName: com.fasterxml.jackson.core.filter.TokenFilter
  type: Class
  package: com.fasterxml.jackson.core.filter
  summary: Strategy class that can be implemented to specify actual inclusion/exclusion criteria for filtering, used by <xref uid="com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate" data-throw-if-not-resolved="false">FilteringGeneratorDelegate</xref>.
  syntax:
    content: public class TokenFilter
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL
  id: INCLUDE_ALL
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: INCLUDE_ALL
  nameWithType: TokenFilter.INCLUDE_ALL
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Marker value that should be used to indicate inclusion of a structured value (sub-tree representing Object or Array), or value of a named property (regardless of type). Note that if this instance is returned, it will used as a marker, and no actual callbacks need to be made. For this reason, it is more efficient to return this instance if the whole sub-tree is to be included, instead of implementing similar filter functionality explicitly.
  syntax:
    content: public static final TokenFilter INCLUDE_ALL
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.TokenFilter()
  id: TokenFilter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: TokenFilter()
  nameWithType: TokenFilter.TokenFilter()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.TokenFilter()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.TokenFilter*
  type: Constructor
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected TokenFilter()
- uid: com.fasterxml.jackson.core.filter.TokenFilter._includeScalar()
  id: _includeScalar()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: _includeScalar()
  nameWithType: TokenFilter._includeScalar()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter._includeScalar()
  overload: com.fasterxml.jackson.core.filter.TokenFilter._includeScalar*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Overridable default implementation delegated to all scalar value inclusion check methods. The default implementation simply includes all leaf values.
  syntax:
    content: protected boolean _includeScalar()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()
  id: filterFinishArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: filterFinishArray()
  nameWithType: TokenFilter.filterFinishArray()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method called to indicate that output of non-filtered Array (one that may have been included either completely, or in part) is completed, in cases where filter other that <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> was returned. This occurs when <xref uid="com.fasterxml.jackson.core.JsonGenerator.writeEndArray()" data-throw-if-not-resolved="false">JsonGenerator#writeEndArray()</xref> is called.
  syntax:
    content: public void filterFinishArray()
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()
  id: filterFinishObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: filterFinishObject()
  nameWithType: TokenFilter.filterFinishObject()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method called to indicate that output of non-filtered Object (one that may have been included either completely, or in part) is completed, in cases where filter other that <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> was returned. This occurs when <xref uid="com.fasterxml.jackson.core.JsonGenerator.writeEndObject()" data-throw-if-not-resolved="false">JsonGenerator#writeEndObject()</xref> is called.
  syntax:
    content: public void filterFinishObject()
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray()
  id: filterStartArray()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: filterStartArray()
  nameWithType: TokenFilter.filterStartArray()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to check whether Array value at current output location should be included in output. Three kinds of return values may be used as follows:

     *  `null` to indicate that the Array should be skipped
     *  <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> to indicate that the Array should be included completely in output
     *  Any other <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> implementation (possibly this one) to mean that further inclusion calls on return filter object need to be made on contained element values, as necessary. <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray()" data-throw-if-not-resolved="false">#filterFinishArray()</xref> will also be called on returned filter object

    Default implementation returns `this`, which means that checks are made recursively for elements of the array to determine possible inclusion.
  syntax:
    content: public TokenFilter filterStartArray()
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
      description: >-
        TokenFilter to use for further calls within Array, unless return value
           is <code>null</code> or <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> (which have simpler semantics)
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject()
  id: filterStartObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: filterStartObject()
  nameWithType: TokenFilter.filterStartObject()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to check whether Object value at current output location should be included in output. Three kinds of return values may be used as follows:

     *  `null` to indicate that the Object should be skipped
     *  <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> to indicate that the Object should be included completely in output
     *  Any other <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> implementation (possibly this one) to mean that further inclusion calls on return filter object need to be made on contained properties, as necessary. <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject()" data-throw-if-not-resolved="false">#filterFinishObject()</xref> will also be called on returned filter object

    Default implementation returns `this`, which means that checks are made recursively for properties of the Object to determine possible inclusion.
  syntax:
    content: public TokenFilter filterStartObject()
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
      description: >-
        TokenFilter to use for further calls within Array, unless return value
           is <code>null</code> or <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> (which have simpler semantics)
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeBinary()
  id: includeBinary()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeBinary()
  nameWithType: TokenFilter.includeBinary()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeBinary()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeBinary*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Call made to verify whether leaf-level Binary value should be included in output or not.


    NOTE: no binary payload passed; assumption is this won't be of much use.
  syntax:
    content: public boolean includeBinary()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean)
  id: includeBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeBoolean(boolean value)
  nameWithType: TokenFilter.includeBoolean(boolean value)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean(boolean value)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level boolean value should be included in output or not.
  syntax:
    content: public boolean includeBoolean(boolean value)
    parameters:
    - id: value
      type: boolean
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int)
  id: includeElement(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeElement(int index)
  nameWithType: TokenFilter.includeElement(int index)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeElement(int index)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeElement*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to check whether array element with specified index (zero-based), at current output location, should be included in output. Three kinds of return values may be used as follows:

     *  `null` to indicate that the Array element should be skipped
     *  <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> to indicate that the Array element should be included completely in output
     *  Any other <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> implementation (possibly this one) to mean that further inclusion calls on returned filter object need to be made as necessary, to determine inclusion.

    The default implementation simply returns `this` to continue calling methods on this filter object, without full inclusion or exclusion.
  syntax:
    content: public TokenFilter includeElement(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
      description: >-
        TokenFilter to use for further calls within element value, unless return value
           is <code>null</code> or <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> (which have simpler semantics)
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(java.lang.Object)
  id: includeEmbeddedValue(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeEmbeddedValue(Object ob)
  nameWithType: TokenFilter.includeEmbeddedValue(Object ob)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue(Object ob)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level embedded (Opaque) value should be included in output or not.
  syntax:
    content: public boolean includeEmbeddedValue(Object ob)
    parameters:
    - id: ob
      type: java.lang.Object
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNull()
  id: includeNull()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNull()
  nameWithType: TokenFilter.includeNull()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNull()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNull*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level null value should be included in output or not.
  syntax:
    content: public boolean includeNull()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double)
  id: includeNumber(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNumber(double v)
  nameWithType: TokenFilter.includeNumber(double v)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(double v)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level `double` value should be included in output or not.
  syntax:
    content: public boolean includeNumber(double v)
    parameters:
    - id: v
      type: double
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float)
  id: includeNumber(float)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNumber(float v)
  nameWithType: TokenFilter.includeNumber(float v)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(float v)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level `float` value should be included in output or not.
  syntax:
    content: public boolean includeNumber(float v)
    parameters:
    - id: v
      type: float
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int)
  id: includeNumber(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNumber(int v)
  nameWithType: TokenFilter.includeNumber(int v)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(int v)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: 'Call made to verify whether leaf-level `int` value should be included in output or not. NOTE: also called for \`short\`, \`byte\`'
  syntax:
    content: public boolean includeNumber(int v)
    parameters:
    - id: v
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigDecimal)
  id: includeNumber(java.math.BigDecimal)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNumber(BigDecimal v)
  nameWithType: TokenFilter.includeNumber(BigDecimal v)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigDecimal v)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level <xref uid="java.math.BigDecimal" data-throw-if-not-resolved="false">BigDecimal</xref> value should be included in output or not.
  syntax:
    content: public boolean includeNumber(BigDecimal v)
    parameters:
    - id: v
      type: java.math.BigDecimal
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(java.math.BigInteger)
  id: includeNumber(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNumber(BigInteger v)
  nameWithType: TokenFilter.includeNumber(BigInteger v)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(BigInteger v)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> value should be included in output or not.
  syntax:
    content: public boolean includeNumber(BigInteger v)
    parameters:
    - id: v
      type: java.math.BigInteger
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long)
  id: includeNumber(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeNumber(long v)
  nameWithType: TokenFilter.includeNumber(long v)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber(long v)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level `long` value should be included in output or not.
  syntax:
    content: public boolean includeNumber(long v)
    parameters:
    - id: v
      type: long
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(java.lang.String)
  id: includeProperty(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeProperty(String name)
  nameWithType: TokenFilter.includeProperty(String name)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeProperty(String name)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeProperty*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to check whether property value with specified name, at current output location, should be included in output. Three kinds of return values may be used as follows:

     *  `null` to indicate that the property and its value should be skipped
     *  <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> to indicate that the property and its value should be included completely in output
     *  Any other <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> implementation (possibly this one) to mean that further inclusion calls on returned filter object need to be made as necessary, to determine inclusion.

    The default implementation simply returns `this` to continue calling methods on this filter object, without full inclusion or exclusion.
  syntax:
    content: public TokenFilter includeProperty(String name)
    parameters:
    - id: name
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
      description: >-
        TokenFilter to use for further calls within property value, unless return value
           is <code>null</code> or <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> (which have simpler semantics)
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue()
  id: includeRawValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeRawValue()
  nameWithType: TokenFilter.includeRawValue()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Call made to verify whether leaf-level raw (pre-encoded, not quoted by generator) value should be included in output or not.


    NOTE: value itself not passed since it may come on multiple forms and is unlikely to be of much use in determining inclusion criteria.
  syntax:
    content: public boolean includeRawValue()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int)
  id: includeRootValue(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeRootValue(int index)
  nameWithType: TokenFilter.includeRootValue(int index)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue(int index)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to check whether root-level value, at current output location, should be included in output. Three kinds of return values may be used as follows:

     *  `null` to indicate that the root value should be skipped
     *  <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> to indicate that the root value should be included completely in output
     *  Any other <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> implementation (possibly this one) to mean that further inclusion calls on returned filter object need to be made as necessary, to determine inclusion.

    The default implementation simply returns `this` to continue calling methods on this filter object, without full inclusion or exclusion.
  syntax:
    content: public TokenFilter includeRootValue(int index)
    parameters:
    - id: index
      type: int
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
      description: >-
        TokenFilter to use for further calls within root value, unless return value
           is <code>null</code> or <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">#INCLUDE_ALL</xref> (which have simpler semantics)
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.io.Reader,int)
  id: includeString(java.io.Reader,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeString(Reader r, int maxLen)
  nameWithType: TokenFilter.includeString(Reader r, int maxLen)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeString(Reader r, int maxLen)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Call made to verify whether leaf-level "streaming" String value should be included in output or not.


    NOTE: note that any reads from passed in `Reader` may lead to actual loss of content to write; typically method should not access content passed via this method.
  syntax:
    content: public boolean includeString(Reader r, int maxLen)
    parameters:
    - id: r
      type: java.io.Reader
    - id: maxLen
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeString(java.lang.String)
  id: includeString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeString(String value)
  nameWithType: TokenFilter.includeString(String value)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeString(String value)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Call made to verify whether leaf-level String value should be included in output or not.
  syntax:
    content: public boolean includeString(String value)
    parameters:
    - id: value
      type: java.lang.String
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeValue(com.fasterxml.jackson.core.JsonParser)
  id: includeValue(com.fasterxml.jackson.core.JsonParser)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: includeValue(JsonParser p)
  nameWithType: TokenFilter.includeValue(JsonParser p)
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeValue(JsonParser p)
  overload: com.fasterxml.jackson.core.filter.TokenFilter.includeValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Call made when verifying whether a scaler value is being read from a parser.


    Default action is to call `_includeScalar()` and return whatever it indicates.
  syntax:
    content: public boolean includeValue(JsonParser p)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.TokenFilter.toString()
  id: toString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.TokenFilter
  langs:
  - java
  name: toString()
  nameWithType: TokenFilter.toString()
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.toString()
  overload: com.fasterxml.jackson.core.filter.TokenFilter.toString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public String toString()
    return:
      type: java.lang.String
references:
- uid: com.fasterxml.jackson.core.filter.TokenFilter.TokenFilter*
  name: TokenFilter
  nameWithType: TokenFilter.TokenFilter
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.TokenFilter
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject*
  name: filterStartObject
  nameWithType: TokenFilter.filterStartObject
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterStartObject
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray*
  name: filterStartArray
  nameWithType: TokenFilter.filterStartArray
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterStartArray
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject*
  name: filterFinishObject
  nameWithType: TokenFilter.filterFinishObject
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishObject
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray*
  name: filterFinishArray
  nameWithType: TokenFilter.filterFinishArray
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.filterFinishArray
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeProperty*
  name: includeProperty
  nameWithType: TokenFilter.includeProperty
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeProperty
  package: com.fasterxml.jackson.core.filter
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeElement*
  name: includeElement
  nameWithType: TokenFilter.includeElement
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeElement
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue*
  name: includeRootValue
  nameWithType: TokenFilter.includeRootValue
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeRootValue
  package: com.fasterxml.jackson.core.filter
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeValue*
  name: includeValue
  nameWithType: TokenFilter.includeValue
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean*
  name: includeBoolean
  nameWithType: TokenFilter.includeBoolean
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeBoolean
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNull*
  name: includeNull
  nameWithType: TokenFilter.includeNull
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNull
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeString*
  name: includeString
  nameWithType: TokenFilter.includeString
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeString
  package: com.fasterxml.jackson.core.filter
- uid: java.io.Reader
  spec.java:
  - uid: java.io.Reader
    name: Reader
    fullName: java.io.Reader
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber*
  name: includeNumber
  nameWithType: TokenFilter.includeNumber
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeNumber
  package: com.fasterxml.jackson.core.filter
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeBinary*
  name: includeBinary
  nameWithType: TokenFilter.includeBinary
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeBinary
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue*
  name: includeRawValue
  nameWithType: TokenFilter.includeRawValue
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeRawValue
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue*
  name: includeEmbeddedValue
  nameWithType: TokenFilter.includeEmbeddedValue
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.includeEmbeddedValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter.toString*
  name: toString
  nameWithType: TokenFilter.toString
  fullName: com.fasterxml.jackson.core.filter.TokenFilter.toString
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilter._includeScalar*
  name: _includeScalar
  nameWithType: TokenFilter._includeScalar
  fullName: com.fasterxml.jackson.core.filter.TokenFilter._includeScalar
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
