### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.annotation.JsonAnyGetter
  id: JsonAnyGetter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation
  children:
  - com.fasterxml.jackson.annotation.JsonAnyGetter.enabled()
  langs:
  - java
  name: JsonAnyGetter
  nameWithType: JsonAnyGetter
  fullName: com.fasterxml.jackson.annotation.JsonAnyGetter
  type: Interface
  package: com.fasterxml.jackson.annotation
  summary: >-
    Marker annotation that can be used to define a non-static, no-argument method to be an "any getter"; accessor for getting a set of key/value pairs, to be serialized as part of containing POJO (similar to unwrapping) along with regular property values it has. This typically serves as a counterpart to "any setter" mutators (see <xref uid="com.fasterxml.jackson.annotation.JsonAnySetter" data-throw-if-not-resolved="false">JsonAnySetter</xref>). Note that the return type of annotated methods **must** be <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref>).


    As with <xref uid="com.fasterxml.jackson.annotation.JsonAnySetter" data-throw-if-not-resolved="false">JsonAnySetter</xref>, only one property should be annotated with this annotation; if multiple methods are annotated, an exception may be thrown.
  syntax:
    content: public interface JsonAnyGetter implements Annotation
  implements:
  - java.lang.annotation.Annotation
- uid: com.fasterxml.jackson.annotation.JsonAnyGetter.enabled()
  id: enabled()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.annotation.JsonAnyGetter
  langs:
  - java
  name: enabled()
  nameWithType: JsonAnyGetter.enabled()
  fullName: com.fasterxml.jackson.annotation.JsonAnyGetter.enabled()
  overload: com.fasterxml.jackson.annotation.JsonAnyGetter.enabled*
  type: Method
  package: com.fasterxml.jackson.annotation
  summary: Optional argument that defines whether this annotation is active or not. The only use for value 'false' if for overriding purposes. Overriding may be necessary when used with "mix-in annotations" (aka "annotation overrides"). For most cases, however, default value of "true" is just fine and should be omitted.
  syntax:
    content: public abstract boolean enabled()
    return:
      type: boolean
      description: >-
        True if annotation is enabled (normal case); false if it is to
           be ignored (only useful for mix-in annotations to "mask" annotation
references:
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.annotation.JsonAnyGetter.enabled*
  name: enabled
  nameWithType: JsonAnyGetter.enabled
  fullName: com.fasterxml.jackson.annotation.JsonAnyGetter.enabled
  package: com.fasterxml.jackson.annotation
- uid: java.lang.annotation.Annotation
  name: Annotation
  nameWithType: Annotation
  fullName: java.lang.annotation.Annotation
