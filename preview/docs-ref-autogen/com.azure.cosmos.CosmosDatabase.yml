### YamlMime:ManagedReference
items:
- uid: "com.azure.cosmos.CosmosDatabase"
  id: "CosmosDatabase"
  parent: "com.azure.cosmos"
  children:
  - "com.azure.cosmos.CosmosDatabase.CosmosDatabase(java.lang.String,com.azure.cosmos.CosmosClient,com.azure.cosmos.CosmosAsyncDatabase)"
  - "com.azure.cosmos.CosmosDatabase.convertResponse(com.azure.cosmos.models.CosmosAsyncContainerResponse)"
  - "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  - "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int)"
  - "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  - "com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String,int)"
  - "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  - "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,int)"
  - "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)"
  - "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,int)"
  - "com.azure.cosmos.CosmosDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)"
  - "com.azure.cosmos.CosmosDatabase.delete()"
  - "com.azure.cosmos.CosmosDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosDatabase.getContainer(java.lang.String)"
  - "com.azure.cosmos.CosmosDatabase.getId()"
  - "com.azure.cosmos.CosmosDatabase.getUser(java.lang.String)"
  - "com.azure.cosmos.CosmosDatabase.mapContainerResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>)"
  - "com.azure.cosmos.CosmosDatabase.mapUserResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>)"
  - "com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  - "com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String)"
  - "com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  - "com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String)"
  - "com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosDatabase.read()"
  - "com.azure.cosmos.CosmosDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  - "com.azure.cosmos.CosmosDatabase.readAllContainers()"
  - "com.azure.cosmos.CosmosDatabase.readAllContainers(com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosDatabase.readAllUsers()"
  - "com.azure.cosmos.CosmosDatabase.readAllUsers(com.azure.cosmos.models.FeedOptions)"
  - "com.azure.cosmos.CosmosDatabase.readProvisionedThroughput()"
  - "com.azure.cosmos.CosmosDatabase.replaceProvisionedThroughput(int)"
  - "com.azure.cosmos.CosmosDatabase.throughputResponseToBlock(reactor.core.publisher.Mono<java.lang.Integer>)"
  - "com.azure.cosmos.CosmosDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  langs:
  - "java"
  name: "CosmosDatabase"
  nameWithType: "CosmosDatabase"
  fullName: "com.azure.cosmos.CosmosDatabase"
  type: "Class"
  package: "com.azure.cosmos"
  summary: "Perform read and delete databases, update database throughput, and perform operations on child resources in a synchronous way"
  syntax:
    content: "public class CosmosDatabase"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.cosmos.CosmosDatabase.CosmosDatabase(java.lang.String,com.azure.cosmos.CosmosClient,com.azure.cosmos.CosmosAsyncDatabase)"
  id: "CosmosDatabase(java.lang.String,com.azure.cosmos.CosmosClient,com.azure.cosmos.CosmosAsyncDatabase)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)"
  nameWithType: "CosmosDatabase.CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)"
  fullName: "com.azure.cosmos.CosmosDatabase.CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)"
  overload: "com.azure.cosmos.CosmosDatabase.CosmosDatabase*"
  type: "Constructor"
  package: "com.azure.cosmos"
  summary: "Instantiates a new Cosmos sync database."
  syntax:
    content: " CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    - id: "client"
      type: "com.azure.cosmos.CosmosClient"
      description: "the client"
    - id: "database"
      type: "com.azure.cosmos.CosmosAsyncDatabase"
      description: "the database"
- uid: "com.azure.cosmos.CosmosDatabase.convertResponse(com.azure.cosmos.models.CosmosAsyncContainerResponse)"
  id: "convertResponse(com.azure.cosmos.models.CosmosAsyncContainerResponse)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "convertResponse(CosmosAsyncContainerResponse response)"
  nameWithType: "CosmosDatabase.convertResponse(CosmosAsyncContainerResponse response)"
  fullName: "com.azure.cosmos.CosmosDatabase.convertResponse(CosmosAsyncContainerResponse response)"
  overload: "com.azure.cosmos.CosmosDatabase.convertResponse*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Convert response cosmos sync container response."
  syntax:
    content: " CosmosContainerResponse convertResponse(CosmosAsyncContainerResponse response)"
    parameters:
    - id: "response"
      type: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
      description: "the response"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosDatabase.createContainer(CosmosContainerProperties containerProperties)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a cosmos container."
  syntax:
    content: "public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\">CosmosContainerProperties</xref>"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerResponse\" data-throw-if-not-resolved=\"false\">CosmosContainerResponse</xref> with the created container."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a cosmos container."
  syntax:
    content: "public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\">CosmosContainerProperties</xref>"
    - id: "options"
      type: "com.azure.cosmos.models.CosmosContainerRequestOptions"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\">CosmosContainerProperties</xref>"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerResponse\" data-throw-if-not-resolved=\"false\">CosmosContainerResponse</xref> with the created container."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties,int)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties, int throughput)"
  nameWithType: "CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a cosmos container."
  syntax:
    content: "public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties, int throughput)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\">CosmosContainerProperties</xref>"
    - id: "throughput"
      type: "int"
      description: "the throughput"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerResponse\" data-throw-if-not-resolved=\"false\">CosmosContainerResponse</xref> with the created container."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,int,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  id: "createContainer(com.azure.cosmos.models.CosmosContainerProperties,int,com.azure.cosmos.models.CosmosContainerRequestOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
  nameWithType: "CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Creates a cosmos container."
  syntax:
    content: "public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties, int throughput, CosmosContainerRequestOptions options)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\">CosmosContainerProperties</xref>"
    - id: "throughput"
      type: "int"
      description: "the throughput"
    - id: "options"
      type: "com.azure.cosmos.models.CosmosContainerRequestOptions"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerProperties\" data-throw-if-not-resolved=\"false\">CosmosContainerProperties</xref>"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosContainerResponse\" data-throw-if-not-resolved=\"false\">CosmosContainerResponse</xref> with the created container."
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String)"
  id: "createContainer(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainer(String id, String partitionKeyPath)"
  nameWithType: "CosmosDatabase.createContainer(String id, String partitionKeyPath)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer(String id, String partitionKeyPath)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create container cosmos sync container response."
  syntax:
    content: "public CosmosContainerResponse createContainer(String id, String partitionKeyPath)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String,int)"
  id: "createContainer(java.lang.String,java.lang.String,int)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainer(String id, String partitionKeyPath, int throughput)"
  nameWithType: "CosmosDatabase.createContainer(String id, String partitionKeyPath, int throughput)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer(String id, String partitionKeyPath, int throughput)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create container cosmos sync container response."
  syntax:
    content: "public CosmosContainerResponse createContainer(String id, String partitionKeyPath, int throughput)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    - id: "throughput"
      type: "int"
      description: "the throughput"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  id: "createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  nameWithType: "CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create container if not exists cosmos sync container response."
  syntax:
    content: "public CosmosContainerResponse createContainerIfNotExists(CosmosContainerProperties containerProperties)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the container properties"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,int)"
  id: "createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,int)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
  nameWithType: "CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create container if not exists cosmos sync container response."
  syntax:
    content: "public CosmosContainerResponse createContainerIfNotExists(CosmosContainerProperties containerProperties, int throughput)"
    parameters:
    - id: "containerProperties"
      type: "com.azure.cosmos.models.CosmosContainerProperties"
      description: "the container properties"
    - id: "throughput"
      type: "int"
      description: "the throughput"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)"
  id: "createContainerIfNotExists(java.lang.String,java.lang.String)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(String id, String partitionKeyPath)"
  nameWithType: "CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create container if not exists cosmos sync container response."
  syntax:
    content: "public CosmosContainerResponse createContainerIfNotExists(String id, String partitionKeyPath)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,int)"
  id: "createContainerIfNotExists(java.lang.String,java.lang.String,int)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
  nameWithType: "CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
  overload: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create container if not exists cosmos sync container response."
  syntax:
    content: "public CosmosContainerResponse createContainerIfNotExists(String id, String partitionKeyPath, int throughput)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    - id: "partitionKeyPath"
      type: "java.lang.String"
      description: "the partition key path"
    - id: "throughput"
      type: "int"
      description: "the throughput"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)"
  id: "createUser(com.azure.cosmos.models.CosmosUserProperties)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "createUser(CosmosUserProperties userProperties)"
  nameWithType: "CosmosDatabase.createUser(CosmosUserProperties userProperties)"
  fullName: "com.azure.cosmos.CosmosDatabase.createUser(CosmosUserProperties userProperties)"
  overload: "com.azure.cosmos.CosmosDatabase.createUser*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Create user cosmos sync user response."
  syntax:
    content: "public CosmosUserResponse createUser(CosmosUserProperties userProperties)"
    parameters:
    - id: "userProperties"
      type: "com.azure.cosmos.models.CosmosUserProperties"
      description: "the settings"
    return:
      type: "com.azure.cosmos.models.CosmosUserResponse"
      description: "the cosmos sync user response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.delete()"
  id: "delete()"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "CosmosDatabase.delete()"
  fullName: "com.azure.cosmos.CosmosDatabase.delete()"
  overload: "com.azure.cosmos.CosmosDatabase.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Delete a database."
  syntax:
    content: "public CosmosDatabaseResponse delete()"
    return:
      type: "com.azure.cosmos.models.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref>"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  id: "delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "delete(CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosDatabase.delete(CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.delete(CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.delete*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Delete a database."
  syntax:
    content: "public CosmosDatabaseResponse delete(CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\">CosmosDatabaseRequestOptions</xref> request options."
    return:
      type: "com.azure.cosmos.models.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref>"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.getContainer(java.lang.String)"
  id: "getContainer(java.lang.String)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "getContainer(String id)"
  nameWithType: "CosmosDatabase.getContainer(String id)"
  fullName: "com.azure.cosmos.CosmosDatabase.getContainer(String id)"
  overload: "com.azure.cosmos.CosmosDatabase.getContainer*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets a CosmosContainer object without making a service call"
  syntax:
    content: "public CosmosContainer getContainer(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "id of the container"
    return:
      type: "com.azure.cosmos.CosmosContainer"
      description: "Cosmos Container"
- uid: "com.azure.cosmos.CosmosDatabase.getId()"
  id: "getId()"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "getId()"
  nameWithType: "CosmosDatabase.getId()"
  fullName: "com.azure.cosmos.CosmosDatabase.getId()"
  overload: "com.azure.cosmos.CosmosDatabase.getId*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Get the id of the CosmosAsyncDatabase"
  syntax:
    content: "public String getId()"
    return:
      type: "java.lang.String"
      description: "the id of the database"
- uid: "com.azure.cosmos.CosmosDatabase.getUser(java.lang.String)"
  id: "getUser(java.lang.String)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "getUser(String id)"
  nameWithType: "CosmosDatabase.getUser(String id)"
  fullName: "com.azure.cosmos.CosmosDatabase.getUser(String id)"
  overload: "com.azure.cosmos.CosmosDatabase.getUser*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Gets user."
  syntax:
    content: "public CosmosUser getUser(String id)"
    parameters:
    - id: "id"
      type: "java.lang.String"
      description: "the id"
    return:
      type: "com.azure.cosmos.CosmosUser"
      description: "the user"
- uid: "com.azure.cosmos.CosmosDatabase.mapContainerResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>)"
  id: "mapContainerResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "mapContainerResponseAndBlock(Mono<CosmosAsyncContainerResponse> containerMono)"
  nameWithType: "CosmosDatabase.mapContainerResponseAndBlock(Mono<CosmosAsyncContainerResponse> containerMono)"
  fullName: "com.azure.cosmos.CosmosDatabase.mapContainerResponseAndBlock(Mono<CosmosAsyncContainerResponse> containerMono)"
  overload: "com.azure.cosmos.CosmosDatabase.mapContainerResponseAndBlock*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Map container response and block cosmos sync container response."
  syntax:
    content: " CosmosContainerResponse mapContainerResponseAndBlock(Mono<CosmosAsyncContainerResponse> containerMono)"
    parameters:
    - id: "containerMono"
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
      description: "the container mono"
    return:
      type: "com.azure.cosmos.models.CosmosContainerResponse"
      description: "the cosmos sync container response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.mapUserResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>)"
  id: "mapUserResponseAndBlock(reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "mapUserResponseAndBlock(Mono<CosmosAsyncUserResponse> containerMono)"
  nameWithType: "CosmosDatabase.mapUserResponseAndBlock(Mono<CosmosAsyncUserResponse> containerMono)"
  fullName: "com.azure.cosmos.CosmosDatabase.mapUserResponseAndBlock(Mono<CosmosAsyncUserResponse> containerMono)"
  overload: "com.azure.cosmos.CosmosDatabase.mapUserResponseAndBlock*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " CosmosUserResponse mapUserResponseAndBlock(Mono<CosmosAsyncUserResponse> containerMono)"
    parameters:
    - id: "containerMono"
      type: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
    return:
      type: "com.azure.cosmos.models.CosmosUserResponse"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
- uid: "com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  id: "queryContainers(com.azure.cosmos.models.SqlQuerySpec)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryContainers(SqlQuerySpec querySpec)"
  nameWithType: "CosmosDatabase.queryContainers(SqlQuerySpec querySpec)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryContainers(SqlQuerySpec querySpec)"
  overload: "com.azure.cosmos.CosmosDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query containers iterator."
  syntax:
    content: "public CosmosPagedIterable<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the query spec"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  id: "queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosDatabase.queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query containers iterator."
  syntax:
    content: "public CosmosPagedIterable<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the query spec"
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the options"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String)"
  id: "queryContainers(java.lang.String)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryContainers(String query)"
  nameWithType: "CosmosDatabase.queryContainers(String query)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryContainers(String query)"
  overload: "com.azure.cosmos.CosmosDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query containers iterator."
  syntax:
    content: "public CosmosPagedIterable<CosmosContainerProperties> queryContainers(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  id: "queryContainers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryContainers(String query, FeedOptions options)"
  nameWithType: "CosmosDatabase.queryContainers(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryContainers(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.queryContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query containers iterator."
  syntax:
    content: "public CosmosPagedIterable<CosmosContainerProperties> queryContainers(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the options"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  id: "queryUsers(com.azure.cosmos.models.SqlQuerySpec)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryUsers(SqlQuerySpec querySpec)"
  nameWithType: "CosmosDatabase.queryUsers(SqlQuerySpec querySpec)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryUsers(SqlQuerySpec querySpec)"
  overload: "com.azure.cosmos.CosmosDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query users <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>."
  syntax:
    content: "public CosmosPagedIterable<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the query spec"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  id: "queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
  nameWithType: "CosmosDatabase.queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query users <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>."
  syntax:
    content: "public CosmosPagedIterable<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec, FeedOptions options)"
    parameters:
    - id: "querySpec"
      type: "com.azure.cosmos.models.SqlQuerySpec"
      description: "the query spec"
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the options"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String)"
  id: "queryUsers(java.lang.String)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryUsers(String query)"
  nameWithType: "CosmosDatabase.queryUsers(String query)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryUsers(String query)"
  overload: "com.azure.cosmos.CosmosDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query users <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>."
  syntax:
    content: "public CosmosPagedIterable<CosmosUserProperties> queryUsers(String query)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  id: "queryUsers(java.lang.String,com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "queryUsers(String query, FeedOptions options)"
  nameWithType: "CosmosDatabase.queryUsers(String query, FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.queryUsers(String query, FeedOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.queryUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Query users <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>."
  syntax:
    content: "public CosmosPagedIterable<CosmosUserProperties> queryUsers(String query, FeedOptions options)"
    parameters:
    - id: "query"
      type: "java.lang.String"
      description: "the query"
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the options"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.read()"
  id: "read()"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "read()"
  nameWithType: "CosmosDatabase.read()"
  fullName: "com.azure.cosmos.CosmosDatabase.read()"
  overload: "com.azure.cosmos.CosmosDatabase.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads a database"
  syntax:
    content: "public CosmosDatabaseResponse read()"
    return:
      type: "com.azure.cosmos.models.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref>"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  id: "read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "read(CosmosDatabaseRequestOptions options)"
  nameWithType: "CosmosDatabase.read(CosmosDatabaseRequestOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.read(CosmosDatabaseRequestOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.read*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Reads a database."
  syntax:
    content: "public CosmosDatabaseResponse read(CosmosDatabaseRequestOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosDatabaseRequestOptions\" data-throw-if-not-resolved=\"false\">CosmosDatabaseRequestOptions</xref> request options."
    return:
      type: "com.azure.cosmos.models.CosmosDatabaseResponse"
      description: "the <xref uid=\"com.azure.cosmos.models.CosmosDatabaseResponse\" data-throw-if-not-resolved=\"false\">CosmosDatabaseResponse</xref>"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.readAllContainers()"
  id: "readAllContainers()"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "readAllContainers()"
  nameWithType: "CosmosDatabase.readAllContainers()"
  fullName: "com.azure.cosmos.CosmosDatabase.readAllContainers()"
  overload: "com.azure.cosmos.CosmosDatabase.readAllContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Read all containers iterator."
  syntax:
    content: "public CosmosPagedIterable<CosmosContainerProperties> readAllContainers()"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.readAllContainers(com.azure.cosmos.models.FeedOptions)"
  id: "readAllContainers(com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "readAllContainers(FeedOptions options)"
  nameWithType: "CosmosDatabase.readAllContainers(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.readAllContainers(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.readAllContainers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Read all containers iterator."
  syntax:
    content: "public CosmosPagedIterable<CosmosContainerProperties> readAllContainers(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the options"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.readAllUsers()"
  id: "readAllUsers()"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "readAllUsers()"
  nameWithType: "CosmosDatabase.readAllUsers()"
  fullName: "com.azure.cosmos.CosmosDatabase.readAllUsers()"
  overload: "com.azure.cosmos.CosmosDatabase.readAllUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Read all users <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>."
  syntax:
    content: "public CosmosPagedIterable<CosmosUserProperties> readAllUsers()"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.readAllUsers(com.azure.cosmos.models.FeedOptions)"
  id: "readAllUsers(com.azure.cosmos.models.FeedOptions)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "readAllUsers(FeedOptions options)"
  nameWithType: "CosmosDatabase.readAllUsers(FeedOptions options)"
  fullName: "com.azure.cosmos.CosmosDatabase.readAllUsers(FeedOptions options)"
  overload: "com.azure.cosmos.CosmosDatabase.readAllUsers*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Read all users <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>."
  syntax:
    content: "public CosmosPagedIterable<CosmosUserProperties> readAllUsers(FeedOptions options)"
    parameters:
    - id: "options"
      type: "com.azure.cosmos.models.FeedOptions"
      description: "the options"
    return:
      type: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
      description: "the <xref uid=\"com.azure.cosmos.CosmosPagedIterable\" data-throw-if-not-resolved=\"false\">CosmosPagedIterable</xref>"
- uid: "com.azure.cosmos.CosmosDatabase.readProvisionedThroughput()"
  id: "readProvisionedThroughput()"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "readProvisionedThroughput()"
  nameWithType: "CosmosDatabase.readProvisionedThroughput()"
  fullName: "com.azure.cosmos.CosmosDatabase.readProvisionedThroughput()"
  overload: "com.azure.cosmos.CosmosDatabase.readProvisionedThroughput*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Read provisioned throughput integer."
  syntax:
    content: "public Integer readProvisionedThroughput()"
    return:
      type: "java.lang.Integer"
      description: "the integer. null response indicates database doesn't have any provisioned RUs"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.replaceProvisionedThroughput(int)"
  id: "replaceProvisionedThroughput(int)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "replaceProvisionedThroughput(int requestUnitsPerSecond)"
  nameWithType: "CosmosDatabase.replaceProvisionedThroughput(int requestUnitsPerSecond)"
  fullName: "com.azure.cosmos.CosmosDatabase.replaceProvisionedThroughput(int requestUnitsPerSecond)"
  overload: "com.azure.cosmos.CosmosDatabase.replaceProvisionedThroughput*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Replace provisioned throughput integer."
  syntax:
    content: "public Integer replaceProvisionedThroughput(int requestUnitsPerSecond)"
    parameters:
    - id: "requestUnitsPerSecond"
      type: "int"
      description: "the request units per second"
    return:
      type: "java.lang.Integer"
      description: "the integer"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
- uid: "com.azure.cosmos.CosmosDatabase.throughputResponseToBlock(reactor.core.publisher.Mono<java.lang.Integer>)"
  id: "throughputResponseToBlock(reactor.core.publisher.Mono<java.lang.Integer>)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "throughputResponseToBlock(Mono<Integer> throughputResponse)"
  nameWithType: "CosmosDatabase.throughputResponseToBlock(Mono<Integer> throughputResponse)"
  fullName: "com.azure.cosmos.CosmosDatabase.throughputResponseToBlock(Mono<Integer> throughputResponse)"
  overload: "com.azure.cosmos.CosmosDatabase.throughputResponseToBlock*"
  type: "Method"
  package: "com.azure.cosmos"
  syntax:
    content: " Integer throughputResponseToBlock(Mono<Integer> throughputResponse)"
    parameters:
    - id: "throughputResponse"
      type: "reactor.core.publisher.Mono<java.lang.Integer>"
    return:
      type: "java.lang.Integer"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
- uid: "com.azure.cosmos.CosmosDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  id: "upsertUser(com.azure.cosmos.models.CosmosUserProperties)"
  parent: "com.azure.cosmos.CosmosDatabase"
  langs:
  - "java"
  name: "upsertUser(CosmosUserProperties userProperties)"
  nameWithType: "CosmosDatabase.upsertUser(CosmosUserProperties userProperties)"
  fullName: "com.azure.cosmos.CosmosDatabase.upsertUser(CosmosUserProperties userProperties)"
  overload: "com.azure.cosmos.CosmosDatabase.upsertUser*"
  type: "Method"
  package: "com.azure.cosmos"
  summary: "Upsert user cosmos sync user response."
  syntax:
    content: "public CosmosUserResponse upsertUser(CosmosUserProperties userProperties)"
    parameters:
    - id: "userProperties"
      type: "com.azure.cosmos.models.CosmosUserProperties"
      description: "the settings"
    return:
      type: "com.azure.cosmos.models.CosmosUserResponse"
      description: "the cosmos sync user response"
  exceptions:
  - type: "com.azure.cosmos.CosmosClientException"
    description: "the cosmos client exception"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.cosmos.CosmosClient"
  name: "CosmosClient"
  nameWithType: "CosmosClient"
  fullName: "com.azure.cosmos.CosmosClient"
- uid: "com.azure.cosmos.CosmosAsyncDatabase"
  name: "CosmosAsyncDatabase"
  nameWithType: "CosmosAsyncDatabase"
  fullName: "com.azure.cosmos.CosmosAsyncDatabase"
- uid: "com.azure.cosmos.CosmosDatabase.CosmosDatabase*"
  name: "CosmosDatabase"
  nameWithType: "CosmosDatabase.CosmosDatabase"
  fullName: "com.azure.cosmos.CosmosDatabase.CosmosDatabase"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosDatabase.getId*"
  name: "getId"
  nameWithType: "CosmosDatabase.getId"
  fullName: "com.azure.cosmos.CosmosDatabase.getId"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosClientException"
  name: "CosmosClientException"
  nameWithType: "CosmosClientException"
  fullName: "com.azure.cosmos.CosmosClientException"
- uid: "com.azure.cosmos.models.CosmosDatabaseResponse"
  name: "CosmosDatabaseResponse"
  nameWithType: "CosmosDatabaseResponse"
  fullName: "com.azure.cosmos.models.CosmosDatabaseResponse"
- uid: "com.azure.cosmos.CosmosDatabase.read*"
  name: "read"
  nameWithType: "CosmosDatabase.read"
  fullName: "com.azure.cosmos.CosmosDatabase.read"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
  name: "CosmosDatabaseRequestOptions"
  nameWithType: "CosmosDatabaseRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosDatabaseRequestOptions"
- uid: "com.azure.cosmos.CosmosDatabase.delete*"
  name: "delete"
  nameWithType: "CosmosDatabase.delete"
  fullName: "com.azure.cosmos.CosmosDatabase.delete"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosContainerProperties"
  name: "CosmosContainerProperties"
  nameWithType: "CosmosContainerProperties"
  fullName: "com.azure.cosmos.models.CosmosContainerProperties"
- uid: "com.azure.cosmos.models.CosmosContainerResponse"
  name: "CosmosContainerResponse"
  nameWithType: "CosmosContainerResponse"
  fullName: "com.azure.cosmos.models.CosmosContainerResponse"
- uid: "com.azure.cosmos.CosmosDatabase.createContainer*"
  name: "createContainer"
  nameWithType: "CosmosDatabase.createContainer"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainer"
  package: "com.azure.cosmos"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.cosmos.models.CosmosContainerRequestOptions"
  name: "CosmosContainerRequestOptions"
  nameWithType: "CosmosContainerRequestOptions"
  fullName: "com.azure.cosmos.models.CosmosContainerRequestOptions"
- uid: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*"
  name: "createContainerIfNotExists"
  nameWithType: "CosmosDatabase.createContainerIfNotExists"
  fullName: "com.azure.cosmos.CosmosDatabase.createContainerIfNotExists"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncContainerResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
    name: "CosmosAsyncContainerResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosDatabase.mapContainerResponseAndBlock*"
  name: "mapContainerResponseAndBlock"
  nameWithType: "CosmosDatabase.mapContainerResponseAndBlock"
  fullName: "com.azure.cosmos.CosmosDatabase.mapContainerResponseAndBlock"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.FeedOptions"
  name: "FeedOptions"
  nameWithType: "FeedOptions"
  fullName: "com.azure.cosmos.models.FeedOptions"
- uid: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosPagedIterable"
    name: "CosmosPagedIterable"
    fullName: "com.azure.cosmos.CosmosPagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosContainerProperties"
    name: "CosmosContainerProperties"
    fullName: "com.azure.cosmos.models.CosmosContainerProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosDatabase.readAllContainers*"
  name: "readAllContainers"
  nameWithType: "CosmosDatabase.readAllContainers"
  fullName: "com.azure.cosmos.CosmosDatabase.readAllContainers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosDatabase.queryContainers*"
  name: "queryContainers"
  nameWithType: "CosmosDatabase.queryContainers"
  fullName: "com.azure.cosmos.CosmosDatabase.queryContainers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.SqlQuerySpec"
  name: "SqlQuerySpec"
  nameWithType: "SqlQuerySpec"
  fullName: "com.azure.cosmos.models.SqlQuerySpec"
- uid: "com.azure.cosmos.CosmosContainer"
  name: "CosmosContainer"
  nameWithType: "CosmosContainer"
  fullName: "com.azure.cosmos.CosmosContainer"
- uid: "com.azure.cosmos.CosmosDatabase.getContainer*"
  name: "getContainer"
  nameWithType: "CosmosDatabase.getContainer"
  fullName: "com.azure.cosmos.CosmosDatabase.getContainer"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
  name: "CosmosAsyncContainerResponse"
  nameWithType: "CosmosAsyncContainerResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncContainerResponse"
- uid: "com.azure.cosmos.CosmosDatabase.convertResponse*"
  name: "convertResponse"
  nameWithType: "CosmosDatabase.convertResponse"
  fullName: "com.azure.cosmos.CosmosDatabase.convertResponse"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.models.CosmosUserProperties"
  name: "CosmosUserProperties"
  nameWithType: "CosmosUserProperties"
  fullName: "com.azure.cosmos.models.CosmosUserProperties"
- uid: "com.azure.cosmos.models.CosmosUserResponse"
  name: "CosmosUserResponse"
  nameWithType: "CosmosUserResponse"
  fullName: "com.azure.cosmos.models.CosmosUserResponse"
- uid: "com.azure.cosmos.CosmosDatabase.createUser*"
  name: "createUser"
  nameWithType: "CosmosDatabase.createUser"
  fullName: "com.azure.cosmos.CosmosDatabase.createUser"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosDatabase.upsertUser*"
  name: "upsertUser"
  nameWithType: "CosmosDatabase.upsertUser"
  fullName: "com.azure.cosmos.CosmosDatabase.upsertUser"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>"
  spec.java:
  - uid: "com.azure.cosmos.CosmosPagedIterable"
    name: "CosmosPagedIterable"
    fullName: "com.azure.cosmos.CosmosPagedIterable"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosUserProperties"
    name: "CosmosUserProperties"
    fullName: "com.azure.cosmos.models.CosmosUserProperties"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosDatabase.readAllUsers*"
  name: "readAllUsers"
  nameWithType: "CosmosDatabase.readAllUsers"
  fullName: "com.azure.cosmos.CosmosDatabase.readAllUsers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosDatabase.queryUsers*"
  name: "queryUsers"
  nameWithType: "CosmosDatabase.queryUsers"
  fullName: "com.azure.cosmos.CosmosDatabase.queryUsers"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosUser"
  name: "CosmosUser"
  nameWithType: "CosmosUser"
  fullName: "com.azure.cosmos.CosmosUser"
- uid: "com.azure.cosmos.CosmosDatabase.getUser*"
  name: "getUser"
  nameWithType: "CosmosDatabase.getUser"
  fullName: "com.azure.cosmos.CosmosDatabase.getUser"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<com.azure.cosmos.models.CosmosAsyncUserResponse>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "com.azure.cosmos.models.CosmosAsyncUserResponse"
    name: "CosmosAsyncUserResponse"
    fullName: "com.azure.cosmos.models.CosmosAsyncUserResponse"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosDatabase.mapUserResponseAndBlock*"
  name: "mapUserResponseAndBlock"
  nameWithType: "CosmosDatabase.mapUserResponseAndBlock"
  fullName: "com.azure.cosmos.CosmosDatabase.mapUserResponseAndBlock"
  package: "com.azure.cosmos"
- uid: "java.lang.Integer"
  spec.java:
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
- uid: "com.azure.cosmos.CosmosDatabase.readProvisionedThroughput*"
  name: "readProvisionedThroughput"
  nameWithType: "CosmosDatabase.readProvisionedThroughput"
  fullName: "com.azure.cosmos.CosmosDatabase.readProvisionedThroughput"
  package: "com.azure.cosmos"
- uid: "com.azure.cosmos.CosmosDatabase.replaceProvisionedThroughput*"
  name: "replaceProvisionedThroughput"
  nameWithType: "CosmosDatabase.replaceProvisionedThroughput"
  fullName: "com.azure.cosmos.CosmosDatabase.replaceProvisionedThroughput"
  package: "com.azure.cosmos"
- uid: "reactor.core.publisher.Mono<java.lang.Integer>"
  spec.java:
  - uid: "reactor.core.publisher.Mono"
    name: "Mono"
    fullName: "reactor.core.publisher.Mono"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "com.azure.cosmos.CosmosDatabase.throughputResponseToBlock*"
  name: "throughputResponseToBlock"
  nameWithType: "CosmosDatabase.throughputResponseToBlock"
  fullName: "com.azure.cosmos.CosmosDatabase.throughputResponseToBlock"
  package: "com.azure.cosmos"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "reactor.core.publisher.Mono"
  name: "Mono"
  nameWithType: "Mono"
  fullName: "reactor.core.publisher.Mono"
- uid: "com.azure.cosmos.CosmosPagedIterable"
  name: "CosmosPagedIterable"
  nameWithType: "CosmosPagedIterable"
  fullName: "com.azure.cosmos.CosmosPagedIterable"
- uid: "com.azure.cosmos.models.CosmosAsyncUserResponse"
  name: "CosmosAsyncUserResponse"
  nameWithType: "CosmosAsyncUserResponse"
  fullName: "com.azure.cosmos.models.CosmosAsyncUserResponse"
