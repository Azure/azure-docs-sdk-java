### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.CosmosDatabase
  id: CosmosDatabase
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos
  children:
  - com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)
  - com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  - com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String)
  - com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)
  - com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)
  - com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)
  - com.azure.cosmos.CosmosDatabase.delete()
  - com.azure.cosmos.CosmosDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  - com.azure.cosmos.CosmosDatabase.getContainer(java.lang.String)
  - com.azure.cosmos.CosmosDatabase.getId()
  - com.azure.cosmos.CosmosDatabase.getUser(java.lang.String)
  - com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)
  - com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String)
  - com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)
  - com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String)
  - com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  - com.azure.cosmos.CosmosDatabase.read()
  - com.azure.cosmos.CosmosDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  - com.azure.cosmos.CosmosDatabase.readAllContainers()
  - com.azure.cosmos.CosmosDatabase.readAllUsers()
  - com.azure.cosmos.CosmosDatabase.readThroughput()
  - com.azure.cosmos.CosmosDatabase.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  - com.azure.cosmos.CosmosDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)
  langs:
  - java
  name: CosmosDatabase
  nameWithType: CosmosDatabase
  fullName: com.azure.cosmos.CosmosDatabase
  type: Class
  package: com.azure.cosmos
  summary: Perform read and delete databases, update database throughput, and perform operations on child resources in a synchronous way
  syntax:
    content: public class CosmosDatabase
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.CosmosDatabase.CosmosDatabase(java.lang.String,com.azure.cosmos.CosmosClient,com.azure.cosmos.CosmosAsyncDatabase)
  id: CosmosDatabase(java.lang.String,com.azure.cosmos.CosmosClient,com.azure.cosmos.CosmosAsyncDatabase)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)
  nameWithType: CosmosDatabase.CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)
  fullName: com.azure.cosmos.CosmosDatabase.CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)
  overload: com.azure.cosmos.CosmosDatabase.CosmosDatabase*
  type: Constructor
  package: com.azure.cosmos
  summary: Instantiates a new Cosmos database context client.
  syntax:
    content: " CosmosDatabase(String id, CosmosClient client, CosmosAsyncDatabase database)"
    parameters:
    - id: id
      type: java.lang.String
      description: the id.
    - id: client
      type: com.azure.cosmos.CosmosClient
      description: the client.
    - id: database
      type: com.azure.cosmos.CosmosAsyncDatabase
      description: the database.
- uid: com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties)
  nameWithType: CosmosDatabase.createContainer(CosmosContainerProperties containerProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties)
  overload: com.azure.cosmos.CosmosDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos container.
  syntax:
    content: public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerProperties" data-throw-if-not-resolved="false">CosmosContainerProperties</xref>.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerResponse" data-throw-if-not-resolved="false">CosmosContainerResponse</xref> with the created container.
- uid: com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  nameWithType: CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos container while passing additional request options.
  syntax:
    content: public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties, CosmosContainerRequestOptions options)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerProperties" data-throw-if-not-resolved="false">CosmosContainerProperties</xref>.
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerProperties" data-throw-if-not-resolved="false">CosmosContainerProperties</xref>.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerResponse" data-throw-if-not-resolved="false">CosmosContainerResponse</xref> with the created container.
- uid: com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  nameWithType: CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos container with custom throughput setting.
  syntax:
    content: public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerProperties" data-throw-if-not-resolved="false">CosmosContainerProperties</xref>.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosContainerResponse" data-throw-if-not-resolved="false">CosmosContainerResponse</xref> with the created container.
- uid: com.azure.cosmos.CosmosDatabase.createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  id: createContainer(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties,com.azure.cosmos.models.CosmosContainerRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
  nameWithType: CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos container.
  syntax:
    content: public CosmosContainerResponse createContainer(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties, CosmosContainerRequestOptions options)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    - id: options
      type: com.azure.cosmos.models.CosmosContainerRequestOptions
      description: the options.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String)
  id: createContainer(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainer(String id, String partitionKeyPath)
  nameWithType: CosmosDatabase.createContainer(String id, String partitionKeyPath)
  fullName: com.azure.cosmos.CosmosDatabase.createContainer(String id, String partitionKeyPath)
  overload: com.azure.cosmos.CosmosDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Create a Cosmos container.
  syntax:
    content: public CosmosContainerResponse createContainer(String id, String partitionKeyPath)
    parameters:
    - id: id
      type: java.lang.String
      description: the container id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  id: createContainer(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  nameWithType: CosmosDatabase.createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosDatabase.createContainer*
  type: Method
  package: com.azure.cosmos
  summary: Create a Cosmos container.
  syntax:
    content: public CosmosContainerResponse createContainer(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
    parameters:
    - id: id
      type: java.lang.String
      description: the id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)
  id: createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainerIfNotExists(CosmosContainerProperties containerProperties)
  nameWithType: CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties)
  overload: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: Create container if one matching the id in the properties object does not exist.
  syntax:
    content: public CosmosContainerResponse createContainerIfNotExists(CosmosContainerProperties containerProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  id: createContainerIfNotExists(com.azure.cosmos.models.CosmosContainerProperties,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  nameWithType: CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container if one matching the id in the properties object does not exist.


    The throughput properties will only be used if the specified container does not exist and therefor a new container will be created.
  syntax:
    content: public CosmosContainerResponse createContainerIfNotExists(CosmosContainerProperties containerProperties, ThroughputProperties throughputProperties)
    parameters:
    - id: containerProperties
      type: com.azure.cosmos.models.CosmosContainerProperties
      description: the container properties.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties for the container.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String)
  id: createContainerIfNotExists(java.lang.String,java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainerIfNotExists(String id, String partitionKeyPath)
  nameWithType: CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath)
  fullName: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath)
  overload: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: Creates a Cosmos container if one matching the id does not exist.
  syntax:
    content: public CosmosContainerResponse createContainerIfNotExists(String id, String partitionKeyPath)
    parameters:
    - id: id
      type: java.lang.String
      description: the id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  id: createContainerIfNotExists(java.lang.String,java.lang.String,com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  nameWithType: CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Creates a Cosmos container if one matching the id does not exist.


    The throughput properties will only be used if the specified container does not exist and therefor a new container will be created.
  syntax:
    content: public CosmosContainerResponse createContainerIfNotExists(String id, String partitionKeyPath, ThroughputProperties throughputProperties)
    parameters:
    - id: id
      type: java.lang.String
      description: the id.
    - id: partitionKeyPath
      type: java.lang.String
      description: the partition key path.
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties for the container.
    return:
      type: com.azure.cosmos.models.CosmosContainerResponse
      description: the cosmos container response.
- uid: com.azure.cosmos.CosmosDatabase.createUser(com.azure.cosmos.models.CosmosUserProperties)
  id: createUser(com.azure.cosmos.models.CosmosUserProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: createUser(CosmosUserProperties userProperties)
  nameWithType: CosmosDatabase.createUser(CosmosUserProperties userProperties)
  fullName: com.azure.cosmos.CosmosDatabase.createUser(CosmosUserProperties userProperties)
  overload: com.azure.cosmos.CosmosDatabase.createUser*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Create Cosmos user instance without making a service call.


    To get the actual object a read operation must be performed first.
  syntax:
    content: public CosmosUserResponse createUser(CosmosUserProperties userProperties)
    parameters:
    - id: userProperties
      type: com.azure.cosmos.models.CosmosUserProperties
      description: the settings.
    return:
      type: com.azure.cosmos.models.CosmosUserResponse
      description: the cosmos user response.
- uid: com.azure.cosmos.CosmosDatabase.delete()
  id: delete()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: delete()
  nameWithType: CosmosDatabase.delete()
  fullName: com.azure.cosmos.CosmosDatabase.delete()
  overload: com.azure.cosmos.CosmosDatabase.delete*
  type: Method
  package: com.azure.cosmos
  summary: Deletes the current Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse delete()
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref>.
- uid: com.azure.cosmos.CosmosDatabase.delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  id: delete(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: delete(CosmosDatabaseRequestOptions options)
  nameWithType: CosmosDatabase.delete(CosmosDatabaseRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.delete(CosmosDatabaseRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.delete*
  type: Method
  package: com.azure.cosmos
  summary: Delete the current Cosmos database while specifying additional request options.
  syntax:
    content: public CosmosDatabaseResponse delete(CosmosDatabaseRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosDatabaseRequestOptions
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseRequestOptions" data-throw-if-not-resolved="false">CosmosDatabaseRequestOptions</xref> request options.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref>.
- uid: com.azure.cosmos.CosmosDatabase.getContainer(java.lang.String)
  id: getContainer(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: getContainer(String id)
  nameWithType: CosmosDatabase.getContainer(String id)
  fullName: com.azure.cosmos.CosmosDatabase.getContainer(String id)
  overload: com.azure.cosmos.CosmosDatabase.getContainer*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Gets a Cosmos container instance without making a service call.


    To get the actual object a read operation must be performed first.
  syntax:
    content: public CosmosContainer getContainer(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: id of the container.
    return:
      type: com.azure.cosmos.CosmosContainer
      description: Cosmos Container.
- uid: com.azure.cosmos.CosmosDatabase.getId()
  id: getId()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: getId()
  nameWithType: CosmosDatabase.getId()
  fullName: com.azure.cosmos.CosmosDatabase.getId()
  overload: com.azure.cosmos.CosmosDatabase.getId*
  type: Method
  package: com.azure.cosmos
  summary: Get the id of the Cosmos database.
  syntax:
    content: public String getId()
    return:
      type: java.lang.String
      description: the id of the database.
- uid: com.azure.cosmos.CosmosDatabase.getUser(java.lang.String)
  id: getUser(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: getUser(String id)
  nameWithType: CosmosDatabase.getUser(String id)
  fullName: com.azure.cosmos.CosmosDatabase.getUser(String id)
  overload: com.azure.cosmos.CosmosDatabase.getUser*
  type: Method
  package: com.azure.cosmos
  summary: >-
    Gets a Cosmos user instance without making a service call.


    To get the actual object a read operation must be performed first.
  syntax:
    content: public CosmosUser getUser(String id)
    parameters:
    - id: id
      type: java.lang.String
      description: the id.
    return:
      type: com.azure.cosmos.CosmosUser
      description: the user.
- uid: com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec)
  id: queryContainers(com.azure.cosmos.models.SqlQuerySpec)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryContainers(SqlQuerySpec querySpec)
  nameWithType: CosmosDatabase.queryContainers(SqlQuerySpec querySpec)
  fullName: com.azure.cosmos.CosmosDatabase.queryContainers(SqlQuerySpec querySpec)
  overload: com.azure.cosmos.CosmosDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: Query containers in the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query spec.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryContainers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosDatabase.queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: Query containers in the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosContainerProperties> queryContainers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query spec.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the options.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String)
  id: queryContainers(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryContainers(String query)
  nameWithType: CosmosDatabase.queryContainers(String query)
  fullName: com.azure.cosmos.CosmosDatabase.queryContainers(String query)
  overload: com.azure.cosmos.CosmosDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: Query containers in the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosContainerProperties> queryContainers(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryContainers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryContainers(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosDatabase.queryContainers(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.queryContainers(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.queryContainers*
  type: Method
  package: com.azure.cosmos
  summary: Query containers iterator.
  syntax:
    content: public CosmosPagedIterable<CosmosContainerProperties> queryContainers(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the options.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec)
  id: queryUsers(com.azure.cosmos.models.SqlQuerySpec)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryUsers(SqlQuerySpec querySpec)
  nameWithType: CosmosDatabase.queryUsers(SqlQuerySpec querySpec)
  fullName: com.azure.cosmos.CosmosDatabase.queryUsers(SqlQuerySpec querySpec)
  overload: com.azure.cosmos.CosmosDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: Query all Cosmos users for the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query spec.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUsers(com.azure.cosmos.models.SqlQuerySpec,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  nameWithType: CosmosDatabase.queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: Query all Cosmos users for the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosUserProperties> queryUsers(SqlQuerySpec querySpec, CosmosQueryRequestOptions options)
    parameters:
    - id: querySpec
      type: com.azure.cosmos.models.SqlQuerySpec
      description: the query spec.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the options.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String)
  id: queryUsers(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryUsers(String query)
  nameWithType: CosmosDatabase.queryUsers(String query)
  fullName: com.azure.cosmos.CosmosDatabase.queryUsers(String query)
  overload: com.azure.cosmos.CosmosDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: Query all Cosmos users for the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosUserProperties> queryUsers(String query)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  id: queryUsers(java.lang.String,com.azure.cosmos.models.CosmosQueryRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: queryUsers(String query, CosmosQueryRequestOptions options)
  nameWithType: CosmosDatabase.queryUsers(String query, CosmosQueryRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.queryUsers(String query, CosmosQueryRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.queryUsers*
  type: Method
  package: com.azure.cosmos
  summary: Query all Cosmos users for the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosUserProperties> queryUsers(String query, CosmosQueryRequestOptions options)
    parameters:
    - id: query
      type: java.lang.String
      description: the query.
    - id: options
      type: com.azure.cosmos.models.CosmosQueryRequestOptions
      description: the options.
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.read()
  id: read()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: read()
  nameWithType: CosmosDatabase.read()
  fullName: com.azure.cosmos.CosmosDatabase.read()
  overload: com.azure.cosmos.CosmosDatabase.read*
  type: Method
  package: com.azure.cosmos
  summary: Reads the current Cosmos database.
  syntax:
    content: public CosmosDatabaseResponse read()
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref>.
- uid: com.azure.cosmos.CosmosDatabase.read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  id: read(com.azure.cosmos.models.CosmosDatabaseRequestOptions)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: read(CosmosDatabaseRequestOptions options)
  nameWithType: CosmosDatabase.read(CosmosDatabaseRequestOptions options)
  fullName: com.azure.cosmos.CosmosDatabase.read(CosmosDatabaseRequestOptions options)
  overload: com.azure.cosmos.CosmosDatabase.read*
  type: Method
  package: com.azure.cosmos
  summary: Reads the current Cosmos database while specifying additional request options.
  syntax:
    content: public CosmosDatabaseResponse read(CosmosDatabaseRequestOptions options)
    parameters:
    - id: options
      type: com.azure.cosmos.models.CosmosDatabaseRequestOptions
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseRequestOptions" data-throw-if-not-resolved="false">CosmosDatabaseRequestOptions</xref> request options.
    return:
      type: com.azure.cosmos.models.CosmosDatabaseResponse
      description: the <xref uid="com.azure.cosmos.models.CosmosDatabaseResponse" data-throw-if-not-resolved="false">CosmosDatabaseResponse</xref>
- uid: com.azure.cosmos.CosmosDatabase.readAllContainers()
  id: readAllContainers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: readAllContainers()
  nameWithType: CosmosDatabase.readAllContainers()
  fullName: com.azure.cosmos.CosmosDatabase.readAllContainers()
  overload: com.azure.cosmos.CosmosDatabase.readAllContainers*
  type: Method
  package: com.azure.cosmos
  summary: Read all containers in the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosContainerProperties> readAllContainers()
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.readAllUsers()
  id: readAllUsers()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: readAllUsers()
  nameWithType: CosmosDatabase.readAllUsers()
  fullName: com.azure.cosmos.CosmosDatabase.readAllUsers()
  overload: com.azure.cosmos.CosmosDatabase.readAllUsers*
  type: Method
  package: com.azure.cosmos
  summary: Read all Cosmos users for the current database.
  syntax:
    content: public CosmosPagedIterable<CosmosUserProperties> readAllUsers()
    return:
      type: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>
      description: the <xref uid="com.azure.cosmos.util.CosmosPagedIterable" data-throw-if-not-resolved="false">CosmosPagedIterable</xref>.
- uid: com.azure.cosmos.CosmosDatabase.readThroughput()
  id: readThroughput()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: readThroughput()
  nameWithType: CosmosDatabase.readThroughput()
  fullName: com.azure.cosmos.CosmosDatabase.readThroughput()
  overload: com.azure.cosmos.CosmosDatabase.readThroughput*
  type: Method
  package: com.azure.cosmos
  summary: Gets the throughput of the database.
  syntax:
    content: public ThroughputResponse readThroughput()
    return:
      type: com.azure.cosmos.models.ThroughputResponse
      description: the throughput response.
- uid: com.azure.cosmos.CosmosDatabase.replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  id: replaceThroughput(com.azure.cosmos.models.ThroughputProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: replaceThroughput(ThroughputProperties throughputProperties)
  nameWithType: CosmosDatabase.replaceThroughput(ThroughputProperties throughputProperties)
  fullName: com.azure.cosmos.CosmosDatabase.replaceThroughput(ThroughputProperties throughputProperties)
  overload: com.azure.cosmos.CosmosDatabase.replaceThroughput*
  type: Method
  package: com.azure.cosmos
  summary: Sets the throughput.
  syntax:
    content: public ThroughputResponse replaceThroughput(ThroughputProperties throughputProperties)
    parameters:
    - id: throughputProperties
      type: com.azure.cosmos.models.ThroughputProperties
      description: the throughput properties.
    return:
      type: com.azure.cosmos.models.ThroughputResponse
      description: the throughput response.
- uid: com.azure.cosmos.CosmosDatabase.upsertUser(com.azure.cosmos.models.CosmosUserProperties)
  id: upsertUser(com.azure.cosmos.models.CosmosUserProperties)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.CosmosDatabase
  langs:
  - java
  name: upsertUser(CosmosUserProperties userProperties)
  nameWithType: CosmosDatabase.upsertUser(CosmosUserProperties userProperties)
  fullName: com.azure.cosmos.CosmosDatabase.upsertUser(CosmosUserProperties userProperties)
  overload: com.azure.cosmos.CosmosDatabase.upsertUser*
  type: Method
  package: com.azure.cosmos
  summary: Upserts a Cosmos user.
  syntax:
    content: public CosmosUserResponse upsertUser(CosmosUserProperties userProperties)
    parameters:
    - id: userProperties
      type: com.azure.cosmos.models.CosmosUserProperties
      description: the settings.
    return:
      type: com.azure.cosmos.models.CosmosUserResponse
      description: the cosmos user response.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.CosmosClient
  name: CosmosClient
  nameWithType: CosmosClient
  fullName: com.azure.cosmos.CosmosClient
- uid: com.azure.cosmos.CosmosAsyncDatabase
  name: CosmosAsyncDatabase
  nameWithType: CosmosAsyncDatabase
  fullName: com.azure.cosmos.CosmosAsyncDatabase
- uid: com.azure.cosmos.CosmosDatabase.CosmosDatabase*
  name: CosmosDatabase
  nameWithType: CosmosDatabase.CosmosDatabase
  fullName: com.azure.cosmos.CosmosDatabase.CosmosDatabase
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosDatabase.getId*
  name: getId
  nameWithType: CosmosDatabase.getId
  fullName: com.azure.cosmos.CosmosDatabase.getId
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosDatabaseResponse
  name: CosmosDatabaseResponse
  nameWithType: CosmosDatabaseResponse
  fullName: com.azure.cosmos.models.CosmosDatabaseResponse
- uid: com.azure.cosmos.CosmosDatabase.read*
  name: read
  nameWithType: CosmosDatabase.read
  fullName: com.azure.cosmos.CosmosDatabase.read
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosDatabaseRequestOptions
  name: CosmosDatabaseRequestOptions
  nameWithType: CosmosDatabaseRequestOptions
  fullName: com.azure.cosmos.models.CosmosDatabaseRequestOptions
- uid: com.azure.cosmos.CosmosDatabase.delete*
  name: delete
  nameWithType: CosmosDatabase.delete
  fullName: com.azure.cosmos.CosmosDatabase.delete
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosContainerProperties
  name: CosmosContainerProperties
  nameWithType: CosmosContainerProperties
  fullName: com.azure.cosmos.models.CosmosContainerProperties
- uid: com.azure.cosmos.models.CosmosContainerResponse
  name: CosmosContainerResponse
  nameWithType: CosmosContainerResponse
  fullName: com.azure.cosmos.models.CosmosContainerResponse
- uid: com.azure.cosmos.CosmosDatabase.createContainer*
  name: createContainer
  nameWithType: CosmosDatabase.createContainer
  fullName: com.azure.cosmos.CosmosDatabase.createContainer
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.ThroughputProperties
  name: ThroughputProperties
  nameWithType: ThroughputProperties
  fullName: com.azure.cosmos.models.ThroughputProperties
- uid: com.azure.cosmos.models.CosmosContainerRequestOptions
  name: CosmosContainerRequestOptions
  nameWithType: CosmosContainerRequestOptions
  fullName: com.azure.cosmos.models.CosmosContainerRequestOptions
- uid: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists*
  name: createContainerIfNotExists
  nameWithType: CosmosDatabase.createContainerIfNotExists
  fullName: com.azure.cosmos.CosmosDatabase.createContainerIfNotExists
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosContainerProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedIterable
    name: CosmosPagedIterable
    fullName: com.azure.cosmos.util.CosmosPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosContainerProperties
    name: CosmosContainerProperties
    fullName: com.azure.cosmos.models.CosmosContainerProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosDatabase.readAllContainers*
  name: readAllContainers
  nameWithType: CosmosDatabase.readAllContainers
  fullName: com.azure.cosmos.CosmosDatabase.readAllContainers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosDatabase.queryContainers*
  name: queryContainers
  nameWithType: CosmosDatabase.queryContainers
  fullName: com.azure.cosmos.CosmosDatabase.queryContainers
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosQueryRequestOptions
  name: CosmosQueryRequestOptions
  nameWithType: CosmosQueryRequestOptions
  fullName: com.azure.cosmos.models.CosmosQueryRequestOptions
- uid: com.azure.cosmos.models.SqlQuerySpec
  name: SqlQuerySpec
  nameWithType: SqlQuerySpec
  fullName: com.azure.cosmos.models.SqlQuerySpec
- uid: com.azure.cosmos.CosmosContainer
  name: CosmosContainer
  nameWithType: CosmosContainer
  fullName: com.azure.cosmos.CosmosContainer
- uid: com.azure.cosmos.CosmosDatabase.getContainer*
  name: getContainer
  nameWithType: CosmosDatabase.getContainer
  fullName: com.azure.cosmos.CosmosDatabase.getContainer
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.CosmosUserProperties
  name: CosmosUserProperties
  nameWithType: CosmosUserProperties
  fullName: com.azure.cosmos.models.CosmosUserProperties
- uid: com.azure.cosmos.models.CosmosUserResponse
  name: CosmosUserResponse
  nameWithType: CosmosUserResponse
  fullName: com.azure.cosmos.models.CosmosUserResponse
- uid: com.azure.cosmos.CosmosDatabase.createUser*
  name: createUser
  nameWithType: CosmosDatabase.createUser
  fullName: com.azure.cosmos.CosmosDatabase.createUser
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosDatabase.upsertUser*
  name: upsertUser
  nameWithType: CosmosDatabase.upsertUser
  fullName: com.azure.cosmos.CosmosDatabase.upsertUser
  package: com.azure.cosmos
- uid: com.azure.cosmos.util.CosmosPagedIterable<com.azure.cosmos.models.CosmosUserProperties>
  spec.java:
  - uid: com.azure.cosmos.util.CosmosPagedIterable
    name: CosmosPagedIterable
    fullName: com.azure.cosmos.util.CosmosPagedIterable
  - name: <
    fullName: <
  - uid: com.azure.cosmos.models.CosmosUserProperties
    name: CosmosUserProperties
    fullName: com.azure.cosmos.models.CosmosUserProperties
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.CosmosDatabase.readAllUsers*
  name: readAllUsers
  nameWithType: CosmosDatabase.readAllUsers
  fullName: com.azure.cosmos.CosmosDatabase.readAllUsers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosDatabase.queryUsers*
  name: queryUsers
  nameWithType: CosmosDatabase.queryUsers
  fullName: com.azure.cosmos.CosmosDatabase.queryUsers
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosUser
  name: CosmosUser
  nameWithType: CosmosUser
  fullName: com.azure.cosmos.CosmosUser
- uid: com.azure.cosmos.CosmosDatabase.getUser*
  name: getUser
  nameWithType: CosmosDatabase.getUser
  fullName: com.azure.cosmos.CosmosDatabase.getUser
  package: com.azure.cosmos
- uid: com.azure.cosmos.models.ThroughputResponse
  name: ThroughputResponse
  nameWithType: ThroughputResponse
  fullName: com.azure.cosmos.models.ThroughputResponse
- uid: com.azure.cosmos.CosmosDatabase.replaceThroughput*
  name: replaceThroughput
  nameWithType: CosmosDatabase.replaceThroughput
  fullName: com.azure.cosmos.CosmosDatabase.replaceThroughput
  package: com.azure.cosmos
- uid: com.azure.cosmos.CosmosDatabase.readThroughput*
  name: readThroughput
  nameWithType: CosmosDatabase.readThroughput
  fullName: com.azure.cosmos.CosmosDatabase.readThroughput
  package: com.azure.cosmos
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.azure.cosmos.util.CosmosPagedIterable
  name: CosmosPagedIterable
  nameWithType: CosmosPagedIterable
  fullName: com.azure.cosmos.util.CosmosPagedIterable
