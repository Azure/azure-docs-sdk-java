### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  id: MinMaxPriorityQueue
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.<B>orderedBy(java.util.Comparator<B>)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.<E>create()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.<E>create(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.add(E)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.addAll(java.util.Collection<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.clear()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.comparator()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.expectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.iterator()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.maximumSize(int)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.offer(E)
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peek()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekFirst()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekLast()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.poll()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollFirst()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollLast()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeFirst()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeLast()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.size()
  - com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.toArray()
  langs:
  - java
  name: MinMaxPriorityQueue<E>
  nameWithType: MinMaxPriorityQueue<E>
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    A double-ended priority queue, which provides constant-time access to both its least element and its greatest element, as determined by the queue's specified comparator. If no comparator is given at creation time, the natural order of elements is used. If no maximum size is given at creation time, the queue is unbounded.


    Usage example:


    ```java

    MinMaxPriorityQueue users = MinMaxPriorityQueue.orderedBy(userComparator)
         .maximumSize(1000)
         .create();
    ```


    As a <xref uid="java.util.Queue" data-throw-if-not-resolved="false">Queue</xref> it functions exactly as a <xref uid="" data-throw-if-not-resolved="false">PriorityQueue</xref>: its head element -- the implicit target of the methods <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peek()" data-throw-if-not-resolved="false">#peek()</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.poll()" data-throw-if-not-resolved="false">#poll()</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.remove*" data-throw-if-not-resolved="false">#remove()</xref> \-- is defined as the *least* element in the queue according to the queue's comparator. But unlike a regular priority queue, the methods <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekLast" data-throw-if-not-resolved="false">#peekLast</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollLast" data-throw-if-not-resolved="false">#pollLast</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeLast" data-throw-if-not-resolved="false">#removeLast</xref> are also provided, to act on the *greatest* element in the queue instead.


    A min-max priority queue can be configured with a maximum size. If so, each time the size of the queue exceeds that value, the queue automatically removes its greatest element according to its comparator (which might be the element that was just added). This is different from conventional bounded queues, which either block or reject new elements when full.


    This implementation is based on the [min-max heap][] developed by Atkinson, et al. Unlike many other double-ended priority queues, it stores elements in a single array, as compact as the traditional heap data structure used in <xref uid="" data-throw-if-not-resolved="false">PriorityQueue</xref>.


    This class is not thread-safe, and does not accept null elements.


    *Performance notes:*

     *  If you only access one end of the queue, and do use a maximum size, this class will perform significantly worse than a `PriorityQueue` with manual eviction above the maximum size. In many cases <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.leastOf" data-throw-if-not-resolved="false">Ordering#leastOf</xref> may work for your use case with significantly improved (and asymptotically superior) performance.
     *  The retrieval operations <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peek" data-throw-if-not-resolved="false">#peek</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekFirst" data-throw-if-not-resolved="false">#peekFirst</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekLast" data-throw-if-not-resolved="false">#peekLast</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.element" data-throw-if-not-resolved="false">#element</xref>, and <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.size" data-throw-if-not-resolved="false">#size</xref> are constant-time.
     *  The enqueuing and dequeuing operations (<xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.offer" data-throw-if-not-resolved="false">#offer</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.add" data-throw-if-not-resolved="false">#add</xref>, and all the forms of <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.poll" data-throw-if-not-resolved="false">#poll</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.remove*" data-throw-if-not-resolved="false">#remove()</xref>) run in `O(log n) time`.
     *  The <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.remove*" data-throw-if-not-resolved="false">#remove(Object)</xref> and <xref uid="com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.contains" data-throw-if-not-resolved="false">#contains</xref> operations require linear (`O(n)`) time.
     *  If you only access one end of the queue, and don't use a maximum size, this class is functionally equivalent to <xref uid="" data-throw-if-not-resolved="false">PriorityQueue</xref>, but significantly slower.


    [min-max heap]: http://portal.acm.org/citation.cfm?id=6621
  syntax:
    content: public final class MinMaxPriorityQueue<E> extends AbstractQueue<E>
    typeParameters:
    - id: E
  inheritance:
  - java.lang.Object
  - java.util.AbstractCollection
  - java.util.AbstractQueue
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - java.util.AbstractCollection.<T>toArray(T[])
  - java.util.AbstractCollection.contains(java.lang.Object)
  - java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  - java.util.AbstractCollection.isEmpty()
  - java.util.AbstractCollection.iterator()
  - java.util.AbstractCollection.remove(java.lang.Object)
  - java.util.AbstractCollection.removeAll(java.util.Collection<?>)
  - java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  - java.util.AbstractCollection.size()
  - java.util.AbstractCollection.toArray()
  - java.util.AbstractCollection.toString()
  - java.util.AbstractQueue.add(E)
  - java.util.AbstractQueue.addAll(java.util.Collection<? extends E>)
  - java.util.AbstractQueue.clear()
  - java.util.AbstractQueue.element()
  - java.util.AbstractQueue.remove()
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.<B>orderedBy(java.util.Comparator<B>)
  id: <B>orderedBy(java.util.Comparator<B>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: <B>orderedBy(Comparator<B> comparator)
  nameWithType: MinMaxPriorityQueue<E>.<B>orderedBy(Comparator<B> comparator)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.<B>orderedBy(Comparator<B> comparator)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.orderedBy*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates and returns a new builder, configured to build `MinMaxPriorityQueue` instances that use `comparator` to determine the least and greatest elements.
  syntax:
    content: public static MinMaxPriorityQueue.Builder<B> <B>orderedBy(Comparator<B> comparator)
    parameters:
    - id: comparator
      type: java.util.Comparator<B>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<B>
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.<E>create()
  id: <E>create()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: <E>create()
  nameWithType: MinMaxPriorityQueue<E>.<E>create()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.<E>create()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: 'Creates a new min-max priority queue with default settings: natural order, no maximum size, no initial contents, and an initial expected size of 11.'
  syntax:
    content: public static MinMaxPriorityQueue<E> <E>create()
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.<E>create(java.lang.Iterable<? extends E>)
  id: <E>create(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: <E>create(Iterable<? extends E> initialContents)
  nameWithType: MinMaxPriorityQueue<E>.<E>create(Iterable<? extends E> initialContents)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.<E>create(Iterable<? extends E> initialContents)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.create*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a new min-max priority queue using natural order, no maximum size, and initially containing the given elements.
  syntax:
    content: public static MinMaxPriorityQueue<E> <E>create(Iterable<? extends E> initialContents)
    parameters:
    - id: initialContents
      type: java.lang.Iterable<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.MinMaxPriorityQueue(com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<? super E>,int)
  id: MinMaxPriorityQueue(com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<? super E>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: MinMaxPriorityQueue(MinMaxPriorityQueue.Builder<? super E> builder, int queueSize)
  nameWithType: MinMaxPriorityQueue<E>.MinMaxPriorityQueue(MinMaxPriorityQueue.Builder<? super E> builder, int queueSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.MinMaxPriorityQueue(MinMaxPriorityQueue.Builder<? super E> builder, int queueSize)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.MinMaxPriorityQueue*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private MinMaxPriorityQueue(MinMaxPriorityQueue.Builder<? super E> builder, int queueSize)
    parameters:
    - id: builder
      type: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<? super E>
    - id: queueSize
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.add(E)
  id: add(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: add(E element)
  nameWithType: MinMaxPriorityQueue<E>.add(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.add(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.add*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds the given element to this queue. If this queue has a maximum size, after adding `element` the queue will automatically evict its greatest element (according to its comparator), which may be `element` itself.
  syntax:
    content: public boolean add(E element)
    parameters:
    - id: element
      type: E
    return:
      type: boolean
      description: <code>true</code> always
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.addAll(java.util.Collection<? extends E>)
  id: addAll(java.util.Collection<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: addAll(Collection<? extends E> newElements)
  nameWithType: MinMaxPriorityQueue<E>.addAll(Collection<? extends E> newElements)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.addAll(Collection<? extends E> newElements)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.addAll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public boolean addAll(Collection<? extends E> newElements)
    parameters:
    - id: newElements
      type: java.util.Collection<? extends E>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.clear()
  id: clear()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: clear()
  nameWithType: MinMaxPriorityQueue<E>.clear()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.clear()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.clear*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public void clear()
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.comparator()
  id: comparator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: comparator()
  nameWithType: MinMaxPriorityQueue<E>.comparator()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.comparator()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.comparator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns the comparator used to order the elements in this queue. Obeys the general contract of <xref uid="" data-throw-if-not-resolved="false">PriorityQueue#comparator</xref>, but returns <xref uid="com.azure.cosmos.implementation.guava25.collect.Ordering.natural" data-throw-if-not-resolved="false">Ordering#natural</xref> instead of `null` to indicate natural ordering.
  syntax:
    content: public Comparator<? super E> comparator()
    return:
      type: java.util.Comparator<? super E>
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.expectedSize(int)
  id: expectedSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: expectedSize(int expectedSize)
  nameWithType: MinMaxPriorityQueue<E>.expectedSize(int expectedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.expectedSize(int expectedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.expectedSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates and returns a new builder, configured to build `MinMaxPriorityQueue` instances sized appropriately to hold `expectedSize` elements.
  syntax:
    content: public static MinMaxPriorityQueue.Builder<Comparable> expectedSize(int expectedSize)
    parameters:
    - id: expectedSize
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<java.lang.Comparable>
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.iterator()
  id: iterator()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: iterator()
  nameWithType: MinMaxPriorityQueue<E>.iterator()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.iterator()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.iterator*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an iterator over the elements contained in this collection, *in no particular order*.


    The iterator is *fail-fast*: If the MinMaxPriorityQueue is modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will generally throw a <xref uid="" data-throw-if-not-resolved="false">ConcurrentModificationException</xref>. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future.


    Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw `ConcurrentModificationException` on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: *the fail-fast behavior of iterators should be used only to detect bugs.*
  syntax:
    content: public Iterator<E> iterator()
    return:
      type: java.util.Iterator<E>
      description: an iterator over the elements contained in this collection
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.maximumSize(int)
  id: maximumSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: maximumSize(int maximumSize)
  nameWithType: MinMaxPriorityQueue<E>.maximumSize(int maximumSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.maximumSize(int maximumSize)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.maximumSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates and returns a new builder, configured to build `MinMaxPriorityQueue` instances that are limited to `maximumSize` elements. Each time a queue grows beyond this bound, it immediately removes its greatest element (according to its comparator), which might be the element that was just added.
  syntax:
    content: public static MinMaxPriorityQueue.Builder<Comparable> maximumSize(int maximumSize)
    parameters:
    - id: maximumSize
      type: int
    return:
      type: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<java.lang.Comparable>
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.offer(E)
  id: offer(E)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: offer(E element)
  nameWithType: MinMaxPriorityQueue<E>.offer(E element)
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.offer(E element)
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.offer*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Adds the given element to this queue. If this queue has a maximum size, after adding `element` the queue will automatically evict its greatest element (according to its comparator), which may be `element` itself.
  syntax:
    content: public boolean offer(E element)
    parameters:
    - id: element
      type: E
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peek()
  id: peek()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: peek()
  nameWithType: MinMaxPriorityQueue<E>.peek()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.peek()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peek*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E peek()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekFirst()
  id: peekFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: peekFirst()
  nameWithType: MinMaxPriorityQueue<E>.peekFirst()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.peekFirst()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Retrieves, but does not remove, the least element of this queue, or returns `null` if the queue is empty.
  syntax:
    content: public E peekFirst()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekLast()
  id: peekLast()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: peekLast()
  nameWithType: MinMaxPriorityQueue<E>.peekLast()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.peekLast()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Retrieves, but does not remove, the greatest element of this queue, or returns `null` if the queue is empty.
  syntax:
    content: public E peekLast()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.poll()
  id: poll()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: poll()
  nameWithType: MinMaxPriorityQueue<E>.poll()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.poll()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.poll*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public E poll()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollFirst()
  id: pollFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: pollFirst()
  nameWithType: MinMaxPriorityQueue<E>.pollFirst()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.pollFirst()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes and returns the least element of this queue, or returns `null` if the queue is empty.
  syntax:
    content: public E pollFirst()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollLast()
  id: pollLast()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: pollLast()
  nameWithType: MinMaxPriorityQueue<E>.pollLast()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.pollLast()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes and returns the greatest element of this queue, or returns `null` if the queue is empty.
  syntax:
    content: public E pollLast()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeFirst()
  id: removeFirst()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: removeFirst()
  nameWithType: MinMaxPriorityQueue<E>.removeFirst()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.removeFirst()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes and returns the least element of this queue.
  syntax:
    content: public E removeFirst()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeLast()
  id: removeLast()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: removeLast()
  nameWithType: MinMaxPriorityQueue<E>.removeLast()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.removeLast()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeLast*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Removes and returns the greatest element of this queue.
  syntax:
    content: public E removeLast()
    return:
      type: E
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.size()
  id: size()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: size()
  nameWithType: MinMaxPriorityQueue<E>.size()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.size()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.size*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public int size()
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.toArray()
  id: toArray()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  langs:
  - java
  name: toArray()
  nameWithType: MinMaxPriorityQueue<E>.toArray()
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.toArray()
  overload: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.toArray*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: public Object[] toArray()
    return:
      type: java.lang.Object[]
references:
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<? super E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.MinMaxPriorityQueue*
  name: MinMaxPriorityQueue
  nameWithType: MinMaxPriorityQueue<E>.MinMaxPriorityQueue
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.MinMaxPriorityQueue
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
    name: MinMaxPriorityQueue
    fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.create*
  name: <E>create
  nameWithType: MinMaxPriorityQueue<E>.<E>create
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.<E>create
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Comparator<B>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<B>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.orderedBy*
  name: <B>orderedBy
  nameWithType: MinMaxPriorityQueue<E>.<B>orderedBy
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.<B>orderedBy
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<java.lang.Comparable>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
    name: Builder
    fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
  - name: <
    fullName: <
  - uid: java.lang.Comparable
    name: Comparable
    fullName: java.lang.Comparable
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.expectedSize*
  name: expectedSize
  nameWithType: MinMaxPriorityQueue<E>.expectedSize
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.expectedSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.maximumSize*
  name: maximumSize
  nameWithType: MinMaxPriorityQueue<E>.maximumSize
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.maximumSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.size*
  name: size
  nameWithType: MinMaxPriorityQueue<E>.size
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.size
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.add*
  name: add
  nameWithType: MinMaxPriorityQueue<E>.add
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.add
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Collection<? extends E>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.addAll*
  name: addAll
  nameWithType: MinMaxPriorityQueue<E>.addAll
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.addAll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.offer*
  name: offer
  nameWithType: MinMaxPriorityQueue<E>.offer
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.offer
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.poll*
  name: poll
  nameWithType: MinMaxPriorityQueue<E>.poll
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.poll
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peek*
  name: peek
  nameWithType: MinMaxPriorityQueue<E>.peek
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.peek
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollFirst*
  name: pollFirst
  nameWithType: MinMaxPriorityQueue<E>.pollFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.pollFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeFirst*
  name: removeFirst
  nameWithType: MinMaxPriorityQueue<E>.removeFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.removeFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekFirst*
  name: peekFirst
  nameWithType: MinMaxPriorityQueue<E>.peekFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.peekFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.pollLast*
  name: pollLast
  nameWithType: MinMaxPriorityQueue<E>.pollLast
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.pollLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.removeLast*
  name: removeLast
  nameWithType: MinMaxPriorityQueue<E>.removeLast
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.removeLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.peekLast*
  name: peekLast
  nameWithType: MinMaxPriorityQueue<E>.peekLast
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.peekLast
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Iterator<E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.iterator*
  name: iterator
  nameWithType: MinMaxPriorityQueue<E>.iterator
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.iterator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.clear*
  name: clear
  nameWithType: MinMaxPriorityQueue<E>.clear
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.clear
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object[]
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '[]'
    fullName: '[]'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.toArray*
  name: toArray
  nameWithType: MinMaxPriorityQueue<E>.toArray
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.toArray
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.Comparator<? super E>
  spec.java:
  - uid: java.util.Comparator
    name: Comparator
    fullName: java.util.Comparator
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.comparator*
  name: comparator
  nameWithType: MinMaxPriorityQueue<E>.comparator
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue<E>.comparator
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.AbstractQueue<E>
  name: AbstractQueue<E>
  nameWithType: AbstractQueue<E>
  fullName: java.util.AbstractQueue<E>
- uid: java.util.AbstractCollection.contains(java.lang.Object)
  name: AbstractCollection.contains(Object)
  nameWithType: AbstractCollection.contains(Object)
  fullName: java.util.AbstractCollection.contains(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.util.AbstractCollection.size()
  name: AbstractCollection.size()
  nameWithType: AbstractCollection.size()
  fullName: java.util.AbstractCollection.size()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.util.AbstractCollection.removeAll(java.util.Collection<?>)
  name: AbstractCollection.removeAll(Collection<?>)
  nameWithType: AbstractCollection.removeAll(Collection<?>)
  fullName: java.util.AbstractCollection.removeAll(java.util.Collection<?>)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.util.AbstractCollection.<T>toArray(T[])
  name: AbstractCollection.<T>toArray(T[])
  nameWithType: AbstractCollection.<T>toArray(T[])
  fullName: java.util.AbstractCollection.<T>toArray(T[])
- uid: java.util.AbstractCollection.remove(java.lang.Object)
  name: AbstractCollection.remove(Object)
  nameWithType: AbstractCollection.remove(Object)
  fullName: java.util.AbstractCollection.remove(java.lang.Object)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.util.AbstractCollection.toArray()
  name: AbstractCollection.toArray()
  nameWithType: AbstractCollection.toArray()
  fullName: java.util.AbstractCollection.toArray()
- uid: java.util.AbstractCollection.iterator()
  name: AbstractCollection.iterator()
  nameWithType: AbstractCollection.iterator()
  fullName: java.util.AbstractCollection.iterator()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.util.AbstractQueue.element()
  name: AbstractQueue.element()
  nameWithType: AbstractQueue.element()
  fullName: java.util.AbstractQueue.element()
- uid: java.util.AbstractQueue.addAll(java.util.Collection<? extends E>)
  name: AbstractQueue.addAll(Collection<? extends E>)
  nameWithType: AbstractQueue.addAll(Collection<? extends E>)
  fullName: java.util.AbstractQueue.addAll(java.util.Collection<? extends E>)
- uid: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
  name: AbstractCollection.containsAll(Collection<?>)
  nameWithType: AbstractCollection.containsAll(Collection<?>)
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection<?>)
- uid: java.util.AbstractQueue.clear()
  name: AbstractQueue.clear()
  nameWithType: AbstractQueue.clear()
  fullName: java.util.AbstractQueue.clear()
- uid: java.util.AbstractCollection.isEmpty()
  name: AbstractCollection.isEmpty()
  nameWithType: AbstractCollection.isEmpty()
  fullName: java.util.AbstractCollection.isEmpty()
- uid: java.util.AbstractCollection.toString()
  name: AbstractCollection.toString()
  nameWithType: AbstractCollection.toString()
  fullName: java.util.AbstractCollection.toString()
- uid: java.util.AbstractQueue.add(E)
  name: AbstractQueue.add(E)
  nameWithType: AbstractQueue.add(E)
  fullName: java.util.AbstractQueue.add(E)
- uid: java.util.AbstractQueue.remove()
  name: AbstractQueue.remove()
  nameWithType: AbstractQueue.remove()
  fullName: java.util.AbstractQueue.remove()
- uid: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
  name: AbstractCollection.retainAll(Collection<?>)
  nameWithType: AbstractCollection.retainAll(Collection<?>)
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection<?>)
- uid: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder
  name: MinMaxPriorityQueue.Builder<B>
  nameWithType: MinMaxPriorityQueue.Builder<B>
  fullName: com.azure.cosmos.implementation.guava25.collect.MinMaxPriorityQueue.Builder<B>
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: B
  name: B
  nameWithType: B
  fullName: B
- uid: java.util.Comparator
  name: Comparator
  nameWithType: Comparator
  fullName: java.util.Comparator
- uid: java.lang.Comparable
  name: Comparable
  nameWithType: Comparable
  fullName: java.lang.Comparable
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.AbstractQueue
  name: AbstractQueue
  nameWithType: AbstractQueue
  fullName: java.util.AbstractQueue
- uid: java.util.AbstractCollection.removeAll(java.util.Collection
  name: AbstractCollection.removeAll(Collection
  nameWithType: AbstractCollection.removeAll(Collection
  fullName: java.util.AbstractCollection.removeAll(java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>toArray(T[])
  name: T>toArray(T[])
  nameWithType: T>toArray(T[])
  fullName: T>toArray(T[])
- uid: java.util.AbstractCollection.
  name: AbstractCollection.
  nameWithType: AbstractCollection.
  fullName: java.util.AbstractCollection.
- uid: '? extends E>)'
  name: '? extends E>)'
  nameWithType: '? extends E>)'
  fullName: '? extends E>)'
- uid: java.util.AbstractQueue.addAll(java.util.Collection
  name: AbstractQueue.addAll(Collection
  nameWithType: AbstractQueue.addAll(Collection
  fullName: java.util.AbstractQueue.addAll(java.util.Collection
- uid: java.util.AbstractCollection.containsAll(java.util.Collection
  name: AbstractCollection.containsAll(Collection
  nameWithType: AbstractCollection.containsAll(Collection
  fullName: java.util.AbstractCollection.containsAll(java.util.Collection
- uid: java.util.AbstractCollection.retainAll(java.util.Collection
  name: AbstractCollection.retainAll(Collection
  nameWithType: AbstractCollection.retainAll(Collection
  fullName: java.util.AbstractCollection.retainAll(java.util.Collection
