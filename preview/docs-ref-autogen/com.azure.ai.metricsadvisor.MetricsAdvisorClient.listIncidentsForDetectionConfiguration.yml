### YamlMime:JavaMember
uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration*"
fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration"
name: "listIncidentsForDetectionConfiguration"
nameWithType: "MetricsAdvisorClient.listIncidentsForDetectionConfiguration"
members:
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  name: "listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  nameWithType: "MetricsAdvisorClient.listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  summary: "Fetch the incidents identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListIncidentsDetectedOptions options = new ListIncidentsDetectedOptions(startTime, endTime)\n     .setTop(1000);\n \n PagedIterable<Incident> incidentsIterable\n     = metricAdvisorClient.listIncidentsForDetectionConfiguration(detectionConfigurationId, options);\n \n for (Incident incident : incidentsIterable) {\n     System.out.printf(\"Metric Id: %s%n\", incident.getMetricId());\n     System.out.printf(\"Detection Configuration Id: %s%n\", incident.getDetectionConfigurationId());\n     System.out.printf(\"Incident Id: %s%n\", incident.getId());\n     System.out.printf(\"Incident Start Time: %s%n\", incident.getStartTime());\n     System.out.printf(\"Incident Severity: %s%n\", incident.getSeverity());\n     System.out.printf(\"Incident Status: %s%n\", incident.getStatus());\n     System.out.printf(\"Root Dimension Key: %s%n\", incident.getRootDimensionKey().asMap());\n }\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions?alt=com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions&text=ListIncidentsDetectedOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<Incident> listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options)"
  returns:
    description: "The incidents."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Incident?alt=com.azure.ai.metricsadvisor.models.Incident&text=Incident\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration(java.lang.String,com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.metricsadvisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options, Context context)"
  name: "listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options, Context context)"
  nameWithType: "MetricsAdvisorClient.listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options, Context context)"
  summary: "Fetch the incidents identified by an anomaly detection configuration.\n\n**Code sample**\n\n```java\nfinal String detectionConfigurationId = \"c0f2539f-b804-4ab9-a70f-0da0c89c76d8\";\n final OffsetDateTime startTime = OffsetDateTime.parse(\"2020-09-09T00:00:00Z\");\n final OffsetDateTime endTime = OffsetDateTime.parse(\"2020-09-09T12:00:00Z\");\n final ListIncidentsDetectedOptions options = new ListIncidentsDetectedOptions(startTime, endTime)\n     .setTop(1000);\n \n PagedIterable<Incident> incidentsIterable\n     = metricAdvisorClient.listIncidentsForDetectionConfiguration(detectionConfigurationId,\n     options,\n     Context.NONE);\n \n Stream<PagedResponse<Incident>> incidentsPageStream = incidentsIterable.streamByPage();\n \n int[] pageCount = new int[1];\n incidentsPageStream.forEach(incidentsPage -> {\n     System.out.printf(\"Page: %d%n\", pageCount[0]++);\n     IterableStream<Incident> pageElements = incidentsPage.getElements();\n     for (Incident incident : pageElements) {\n         System.out.printf(\"Metric Id: %s%n\", incident.getMetricId());\n         System.out.printf(\"Detection Configuration Id: %s%n\", incident.getDetectionConfigurationId());\n         System.out.printf(\"Incident Id: %s%n\", incident.getId());\n         System.out.printf(\"Incident Start Time: %s%n\", incident.getStartTime());\n         System.out.printf(\"Incident Severity: %s%n\", incident.getSeverity());\n         System.out.printf(\"Incident Status: %s%n\", incident.getStatus());\n         System.out.printf(\"Root Dimension Key:\");\n         System.out.printf(\"Root Dimension Key: %s%n\", incident.getRootDimensionKey().asMap());\n     }\n });\n```"
  parameters:
  - description: "The anomaly detection configuration id."
    name: "detectionConfigurationId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional parameters."
    name: "options"
    type: "<xref href=\"com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions?alt=com.azure.ai.metricsadvisor.models.ListIncidentsDetectedOptions&text=ListIncidentsDetectedOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<Incident> listIncidentsForDetectionConfiguration(String detectionConfigurationId, ListIncidentsDetectedOptions options, Context context)"
  returns:
    description: "The incidents."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.metricsadvisor.models.Incident?alt=com.azure.ai.metricsadvisor.models.Incident&text=Incident\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.metricsadvisor"
artifact: com.azure:azure-ai-metricsadvisor:1.0.0-beta.1
