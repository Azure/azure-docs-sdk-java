### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  id: TypeWrappedDeserializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl
  children:
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer(com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer._deserializer
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer._typeDeserializer
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee()
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames()
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType()
  - com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  langs:
  - java
  name: TypeWrappedDeserializer
  nameWithType: TypeWrappedDeserializer
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  type: Class
  package: com.fasterxml.jackson.databind.deser.impl
  summary: Simple deserializer that will call configured type deserializer, passing in configured data deserializer, and exposing it all as a simple deserializer. This is necessary when there is no "parent" deserializer which could handle details of calling a <xref uid="com.fasterxml.jackson.databind.jsontype.TypeDeserializer" data-throw-if-not-resolved="false">TypeDeserializer</xref>, most commonly used with root values.
  syntax:
    content: public final class TypeWrappedDeserializer extends JsonDeserializer<Object> implements Serializable
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonDeserializer
  implements:
  - java.io.Serializable
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  - com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
  - com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
  - com.fasterxml.jackson.databind.JsonDeserializer.handledType()
  - com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
  - com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  - com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer(com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer<?>)
  id: TypeWrappedDeserializer(com.fasterxml.jackson.databind.jsontype.TypeDeserializer,com.fasterxml.jackson.databind.JsonDeserializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: TypeWrappedDeserializer(TypeDeserializer typeDeser, JsonDeserializer<?> deser)
  nameWithType: TypeWrappedDeserializer.TypeWrappedDeserializer(TypeDeserializer typeDeser, JsonDeserializer<?> deser)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer(TypeDeserializer typeDeser, JsonDeserializer<?> deser)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.deser.impl
  syntax:
    content: public TypeWrappedDeserializer(TypeDeserializer typeDeser, JsonDeserializer<?> deser)
    parameters:
    - id: typeDeser
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
    - id: deser
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer._deserializer
  id: _deserializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: _deserializer
  nameWithType: TypeWrappedDeserializer._deserializer
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer._deserializer
  type: Field
  package: com.fasterxml.jackson.databind.deser.impl
  syntax:
    content: protected final JsonDeserializer<Object> _deserializer
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer._typeDeserializer
  id: _typeDeserializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: _typeDeserializer
  nameWithType: TypeWrappedDeserializer._typeDeserializer
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer._typeDeserializer
  type: Field
  package: com.fasterxml.jackson.databind.deser.impl
  syntax:
    content: protected final TypeDeserializer _typeDeserializer
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: deserialize(JsonParser p, DeserializationContext ctxt)
  nameWithType: TypeWrappedDeserializer.deserialize(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles. Returned instance is to be constructed by method itself.


    Pre-condition for this method is that the parser points to the first event that is part of value to deserializer (and which is never JSON 'null' literal, more on this below): for simple types it may be the only value; and for structured types the Object start marker or a FIELD\_NAME.


    The two possible input conditions for structured types result from polymorphism via fields. In the ordinary case, Jackson calls this method when it has encountered an OBJECT\_START, and the method implementation must advance to the next token to see the first field name. If the application configures polymorphism via a field, then the object looks like the following.


    ```java

    {
              "@class": "class name",
              ...
          }
    ```


    Jackson consumes the two tokens (the @class field name and its value) in order to learn the class and select the deserializer. Thus, the stream is pointing to the FIELD\_NAME for the first field after the @class. Thus, if you want your method to work correctly both with and without polymorphism, you must begin your method with:


    ```java

    if (p.currentToken() == JsonToken.START_OBJECT) {
             p.nextToken();
           }
    ```


    This results in the stream pointing to the field name, so that the two conditions align.


    Post-condition is that the parser will point to the last event that is part of deserialized value (or in case deserialization fails, event that was not recognized or usable, which may be the same event as the one it pointed to upon call).


    Note that this method is never called for JSON null literal, and thus deserializers need (and should) not check for it.
  syntax:
    content: public Object deserialize(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)
  id: deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue)
  nameWithType: TypeWrappedDeserializer.deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Alternate deserialization method (compared to the most commonly used, <xref uid="com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)" data-throw-if-not-resolved="false">#deserialize(JsonParser, DeserializationContext)</xref>), which takes in initialized value instance, to be configured and/or populated by deserializer. Method is not necessarily used (or supported) by all types (it will not work for immutable types, for obvious reasons): most commonly it is used for Collections and Maps. It may be used both with "updating readers" (for POJOs) and when Collections and Maps use "getter as setter".


    Default implementation just throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>, to indicate that types that do not explicitly add support do not necessarily support update-existing-value operation (esp. immutable types)
  syntax:
    content: public Object deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: intoValue
      type: java.lang.Object
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  id: deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  nameWithType: TypeWrappedDeserializer.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype. This can be due to annotation on type (or its supertype), or due to global settings without annotations.


    Default implementation may work for some types, but ideally subclasses should not rely on current default implementation. Implementation is mostly provided to avoid compilation errors with older code.
  syntax:
    content: public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: typeDeserializer
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee()
  id: getDelegatee()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: getDelegatee()
  nameWithType: TypeWrappedDeserializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee()
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: Accessor that can be used to determine if this deserializer uses another deserializer for actual deserialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further deserializers); otherwise will return null.
  syntax:
    content: public JsonDeserializer<?> getDelegatee()
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  id: getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: getEmptyValue(DeserializationContext ctxt)
  nameWithType: TypeWrappedDeserializer.getEmptyValue(DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue(DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Method called to determine value to be used for "empty" values (most commonly when deserializing from empty JSON Strings). Usually this is same as <xref uid="com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue*" data-throw-if-not-resolved="false">#getNullValue</xref> (which in turn is usually simply Java null), but it can be overridden for specific types. Or, if type should never be converted from empty String, method can also throw an exception.


    This method may be called once, or multiple times, depending on what <xref uid="com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyAccessPattern*" data-throw-if-not-resolved="false">#getEmptyAccessPattern()</xref> returns.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue*" data-throw-if-not-resolved="false">#getNullValue</xref> and returns value.
  syntax:
    content: public Object getEmptyValue(DeserializationContext ctxt)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames()
  id: getKnownPropertyNames()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: getKnownPropertyNames()
  nameWithType: TypeWrappedDeserializer.getKnownPropertyNames()
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames()
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: Method that will either return null to indicate that type being deserializers has no concept of properties; or a collection of identifiers for which `toString` will give external property name. This is only to be used for error reporting and diagnostics purposes (most commonly, to accompany "unknown property" exception).
  syntax:
    content: public Collection<Object> getKnownPropertyNames()
    return:
      type: java.util.Collection<java.lang.Object>
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  id: getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: getNullValue(DeserializationContext ctxt)
  nameWithType: TypeWrappedDeserializer.getNullValue(DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue(DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Method that can be called to determine value to be used for representing null values (values deserialized when JSON token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NULL" data-throw-if-not-resolved="false">JsonToken#VALUE_NULL</xref>). Usually this is simply Java null, but for some types (especially primitives) it may be necessary to use non-null values.


    This method may be called once, or multiple times, depending on what <xref uid="com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullAccessPattern*" data-throw-if-not-resolved="false">#getNullAccessPattern()</xref> returns.


    Default implementation simply returns null.
  syntax:
    content: public Object getNullValue(DeserializationContext ctxt)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType()
  id: handledType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: handledType()
  nameWithType: TypeWrappedDeserializer.handledType()
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType()
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Method for accessing type of values this deserializer produces. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type).


    Default implementation will return null, which means almost same same as returning `Object.class` would; that is, that nothing is known about handled type.
  syntax:
    content: public Class<?> handledType()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  id: supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer
  langs:
  - java
  name: supportsUpdate(DeserializationConfig config)
  nameWithType: TypeWrappedDeserializer.supportsUpdate(DeserializationConfig config)
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate(DeserializationConfig config)
  overload: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate*
  type: Method
  package: com.fasterxml.jackson.databind.deser.impl
  summary: >-
    Introspection method that may be called to see whether deserializer supports update of an existing value (aka "merging") or not. Return value should either be <xref uid="java.lang.Boolean.FALSE" data-throw-if-not-resolved="false">Boolean#FALSE</xref> if update is not supported at all (immutable values); <xref uid="java.lang.Boolean.TRUE" data-throw-if-not-resolved="false">Boolean#TRUE</xref> if update should usually work (regular POJOs, for example), or `null` if this is either not known, or may sometimes work.


    Information gathered is typically used to either prevent merging update for property (either by skipping, if based on global defaults; or by exception during deserialization construction if explicit attempt made) if <xref uid="java.lang.Boolean.FALSE" data-throw-if-not-resolved="false">Boolean#FALSE</xref> returned, or inclusion if <xref uid="java.lang.Boolean.TRUE" data-throw-if-not-resolved="false">Boolean#TRUE</xref> is specified. If "unknown" case (`null` returned) behavior is to exclude property if global defaults used; or to allow if explicit per-type or property merging is defined.


    Default implementation returns `null` to allow explicit per-type or per-property attempts.
  syntax:
    content: public Boolean supportsUpdate(DeserializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    return:
      type: java.lang.Boolean
references:
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  name: TypeDeserializer
  nameWithType: TypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: com.fasterxml.jackson.databind.JsonDeserializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer*
  name: TypeWrappedDeserializer
  nameWithType: TypeWrappedDeserializer.TypeWrappedDeserializer
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer
  package: com.fasterxml.jackson.databind.deser.impl
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType*
  name: handledType
  nameWithType: TypeWrappedDeserializer.handledType
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType
  package: com.fasterxml.jackson.databind.deser.impl
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate*
  name: supportsUpdate
  nameWithType: TypeWrappedDeserializer.supportsUpdate
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate
  package: com.fasterxml.jackson.databind.deser.impl
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee*
  name: getDelegatee
  nameWithType: TypeWrappedDeserializer.getDelegatee
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee
  package: com.fasterxml.jackson.databind.deser.impl
- uid: java.util.Collection<java.lang.Object>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames*
  name: getKnownPropertyNames
  nameWithType: TypeWrappedDeserializer.getKnownPropertyNames
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames
  package: com.fasterxml.jackson.databind.deser.impl
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue*
  name: getNullValue
  nameWithType: TypeWrappedDeserializer.getNullValue
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue
  package: com.fasterxml.jackson.databind.deser.impl
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue*
  name: getEmptyValue
  nameWithType: TypeWrappedDeserializer.getEmptyValue
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue
  package: com.fasterxml.jackson.databind.deser.impl
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize*
  name: deserialize
  nameWithType: TypeWrappedDeserializer.deserialize
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize
  package: com.fasterxml.jackson.databind.deser.impl
- uid: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType*
  name: deserializeWithType
  nameWithType: TypeWrappedDeserializer.deserializeWithType
  fullName: com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType
  package: com.fasterxml.jackson.databind.deser.impl
- uid: com.fasterxml.jackson.databind.JsonDeserializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: java.io.Serializable
  name: Serializable
  nameWithType: Serializable
  fullName: java.io.Serializable
- uid: com.fasterxml.jackson.databind.JsonDeserializer.handledType()
  name: JsonDeserializer.handledType()
  nameWithType: JsonDeserializer.handledType()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.handledType()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  name: JsonDeserializer.deserialize(JsonParser,DeserializationContext)
  nameWithType: JsonDeserializer.deserialize(JsonParser,DeserializationContext)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
  name: JsonDeserializer.getDelegatee()
  nameWithType: JsonDeserializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  name: JsonDeserializer.getNullValue(DeserializationContext)
  nameWithType: JsonDeserializer.getNullValue(DeserializationContext)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  name: JsonDeserializer.replaceDelegatee(JsonDeserializer<?>)
  nameWithType: JsonDeserializer.replaceDelegatee(JsonDeserializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  name: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)
  nameWithType: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
  name: JsonDeserializer.getEmptyAccessPattern()
  nameWithType: JsonDeserializer.getEmptyAccessPattern()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
  name: JsonDeserializer.getNullValue()
  nameWithType: JsonDeserializer.getNullValue()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonDeserializer.unwrappingDeserializer(NameTransformer)
  nameWithType: JsonDeserializer.unwrappingDeserializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
  name: JsonDeserializer.getObjectIdReader()
  nameWithType: JsonDeserializer.getObjectIdReader()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
  name: JsonDeserializer.getEmptyValue()
  nameWithType: JsonDeserializer.getEmptyValue()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  name: JsonDeserializer.getEmptyValue(DeserializationContext)
  nameWithType: JsonDeserializer.getEmptyValue(DeserializationContext)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
  name: JsonDeserializer.isCachable()
  nameWithType: JsonDeserializer.isCachable()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
  name: JsonDeserializer.getKnownPropertyNames()
  nameWithType: JsonDeserializer.getKnownPropertyNames()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  name: JsonDeserializer.deserialize(JsonParser,DeserializationContext,T)
  nameWithType: JsonDeserializer.deserialize(JsonParser,DeserializationContext,T)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
  name: JsonDeserializer.getNullAccessPattern()
  nameWithType: JsonDeserializer.getNullAccessPattern()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
  name: JsonDeserializer.findBackReference(String)
  nameWithType: JsonDeserializer.findBackReference(String)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  name: JsonDeserializer.supportsUpdate(DeserializationConfig)
  nameWithType: JsonDeserializer.supportsUpdate(DeserializationConfig)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  name: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer,T)
  nameWithType: JsonDeserializer.deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer,T)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
- uid: com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer
  nameWithType: JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer
  name: JsonDeserializer.replaceDelegatee(JsonDeserializer
  nameWithType: JsonDeserializer.replaceDelegatee(JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer
