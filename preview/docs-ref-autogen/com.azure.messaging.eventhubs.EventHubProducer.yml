### YamlMime:ManagedReference
items:
- uid: com.azure.messaging.eventhubs.EventHubProducer
  id: EventHubProducer
  parent: com.azure.messaging.eventhubs
  children:
  - com.azure.messaging.eventhubs.EventHubProducer.close()
  - com.azure.messaging.eventhubs.EventHubProducer.MAX_MESSAGE_LENGTH_BYTES
  - com.azure.messaging.eventhubs.EventHubProducer.send(EventData)
  - com.azure.messaging.eventhubs.EventHubProducer.send(EventData,SendOptions)
  - com.azure.messaging.eventhubs.EventHubProducer.send(Iterable<EventData>)
  - com.azure.messaging.eventhubs.EventHubProducer.send(Iterable<EventData>,SendOptions)
  - com.azure.messaging.eventhubs.EventHubProducer.send(Publisher<EventData>)
  - com.azure.messaging.eventhubs.EventHubProducer.send(Publisher<EventData>,SendOptions)
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: EventHubProducer
  nameWithType: EventHubProducer
  fullName: com.azure.messaging.eventhubs.EventHubProducer
  type: Class
  source:
    remote: &o0
      path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-java
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 82
  package: com.azure.messaging.eventhubs
  summary: "<p>A producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific Event Hub, grouped together in batches. Depending on the options specified at creation, the producer may be created to allow event data to be automatically routed to an available partition or specific to a partition.</p>\r\n<p>Allowing automatic routing of partitions is recommended when: <ul><li><p>The sending of events needs to be highly available. </p></li><li><p>The event data should be evenly distributed among all available partitions. </p></li></ul></p>\r\n<p>If no partition is specified, the following rules are used for automatically selecting one: <orderedlist><li><p>Distribute the events equally amongst all available partitions using a round-robin approach. </p></li><li><p>If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition. </p></li></orderedlist></p>\r\n<p>\r\n  <b>Create a producer that routes events to any partition</b>\r\n</p>\r\n<p>To allow automatic routing of messages to available partition, do not specify the <xref uid=\"com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId()\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.instantiate}</p>\r\n<p>\r\n  <b>Create a producer that publishes events to partition \"foo\" with a timeout of 45 seconds.</b>\r\n</p>\r\n<p>Developers can push events to a single partition by specifying the <xref uid=\"com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId(String)\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.instantiatePartitionProducer}</p>\r\n<p>\r\n  <b>Publish events to the same partition, grouped together using <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)\" data-throw-if-not-resolved=\"false\">SendOptions#partitionKey(String)</xref>.</b>\r\n</p>\r\n<p>If developers want to push similar events to end up at the same partition, but do not require them to go to a specific partition, they can use <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)\" data-throw-if-not-resolved=\"false\">SendOptions#partitionKey(String)</xref>.</p>\r\n<p>In the sample below, all the \"sandwiches\" end up in the same partition, but it could end up in partition 0, 1, etc. of the available partitions. All that matters to the end user is that they are grouped together.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.send::publisher-sendOptions}</p>\r\n<p></p>"
  syntax: &o1
    content: public class EventHubProducer
  inheritance:
  - java.lang.Object
  - Closeable
- uid: com.azure.messaging.eventhubs.EventHubProducer.close()
  id: close()
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: close()
  nameWithType: EventHubProducer.close()
  fullName: com.azure.messaging.eventhubs.EventHubProducer.close()
  overload: com.azure.messaging.eventhubs.EventHubProducer.close*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 257
  package: com.azure.messaging.eventhubs
  summary: "<p>Disposes of the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref> by closing the underlying connection to the service.</p>\r\n<p></p>"
  syntax:
    content: public void close()
  exceptions:
  - type: cbf33bbe
    description: <p>if the underlying transport could not be closed and its resources could not be disposed. </p>
- uid: com.azure.messaging.eventhubs.EventHubProducer.MAX_MESSAGE_LENGTH_BYTES
  id: MAX_MESSAGE_LENGTH_BYTES
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: MAX_MESSAGE_LENGTH_BYTES
  nameWithType: EventHubProducer.MAX_MESSAGE_LENGTH_BYTES
  fullName: com.azure.messaging.eventhubs.EventHubProducer.MAX_MESSAGE_LENGTH_BYTES
  type: Field
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 86
  package: com.azure.messaging.eventhubs
  summary: "<p>The default maximum allowable size, in bytes, for a batch to be sent. </p>"
  syntax:
    content: public static final int MAX_MESSAGE_LENGTH_BYTES= 256 * 1024
    return:
      type: cd225469
- uid: com.azure.messaging.eventhubs.EventHubProducer.send(EventData)
  id: send(EventData)
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: send(EventData event)
  nameWithType: EventHubProducer.send(EventData event)
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send(EventData event)
  overload: com.azure.messaging.eventhubs.EventHubProducer.send*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 120
  package: com.azure.messaging.eventhubs
  summary: "<p>Sends a single event to the associated Event Hub. If the size of the single event exceeds the maximum size allowed, an exception will be triggered and the send will fail.</p>\r\n<p>For more information regarding the maximum event size allowed, see <a href=\"https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-quotas\">Azure Event Hubs Quotas and Limits</a>.</p>\r\n<p></p>"
  syntax:
    content: public Mono<Void> send(EventData event)
    parameters:
    - id: event
      type: com.azure.messaging.eventhubs.EventData
      description: <p>Event to send to the service. </p>
    return:
      type: d4009ed4
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Mono</xref> that completes when the event is pushed to the service. </p>
- uid: com.azure.messaging.eventhubs.EventHubProducer.send(EventData,SendOptions)
  id: send(EventData,SendOptions)
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: send(EventData event, SendOptions options)
  nameWithType: EventHubProducer.send(EventData event, SendOptions options)
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send(EventData event, SendOptions options)
  overload: com.azure.messaging.eventhubs.EventHubProducer.send*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 138
  package: com.azure.messaging.eventhubs
  summary: "<p>Sends a single event to the associated Event Hub with the send options. If the size of the single event exceeds the maximum size allowed, an exception will be triggered and the send will fail.</p>\r\n<p>For more information regarding the maximum event size allowed, see <a href=\"https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-quotas\">Azure Event Hubs Quotas and Limits</a>.</p>\r\n<p></p>"
  syntax:
    content: public Mono<Void> send(EventData event, SendOptions options)
    parameters:
    - id: event
      type: com.azure.messaging.eventhubs.EventData
      description: <p>Event to send to the service. </p>
    - id: options
      type: com.azure.messaging.eventhubs.models.SendOptions
      description: <p>The set of options to consider when sending this event. </p>
    return:
      type: d4009ed4
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Mono</xref> that completes when the event is pushed to the service. </p>
- uid: com.azure.messaging.eventhubs.EventHubProducer.send(Iterable<EventData>)
  id: send(Iterable<EventData>)
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: send(Iterable<EventData> events)
  nameWithType: EventHubProducer.send(Iterable<EventData> events)
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send(Iterable<EventData> events)
  overload: com.azure.messaging.eventhubs.EventHubProducer.send*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 153
  package: com.azure.messaging.eventhubs
  summary: "<p>Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.</p>\r\n<p></p>"
  syntax:
    content: public Mono<Void> send(Iterable<EventData> events)
    parameters:
    - id: events
      type: 2a13b5a5com.azure.messaging.eventhubs.EventDataa08ddfce
      description: <p>Events to send to the service. </p>
    return:
      type: d4009ed4
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Mono</xref> that completes when all events are pushed to the service. </p>
- uid: com.azure.messaging.eventhubs.EventHubProducer.send(Iterable<EventData>,SendOptions)
  id: send(Iterable<EventData>,SendOptions)
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: send(Iterable<EventData> events, SendOptions options)
  nameWithType: EventHubProducer.send(Iterable<EventData> events, SendOptions options)
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send(Iterable<EventData> events, SendOptions options)
  overload: com.azure.messaging.eventhubs.EventHubProducer.send*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 168
  package: com.azure.messaging.eventhubs
  summary: "<p>Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.</p>\r\n<p></p>"
  syntax:
    content: public Mono<Void> send(Iterable<EventData> events, SendOptions options)
    parameters:
    - id: events
      type: 2a13b5a5com.azure.messaging.eventhubs.EventDataa08ddfce
      description: <p>Events to send to the service. </p>
    - id: options
      type: com.azure.messaging.eventhubs.models.SendOptions
      description: <p>The set of options to consider when sending this batch. </p>
    return:
      type: d4009ed4
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Mono</xref> that completes when all events are pushed to the service. </p>
- uid: com.azure.messaging.eventhubs.EventHubProducer.send(Publisher<EventData>)
  id: send(Publisher<EventData>)
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: send(Publisher<EventData> events)
  nameWithType: EventHubProducer.send(Publisher<EventData> events)
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send(Publisher<EventData> events)
  overload: com.azure.messaging.eventhubs.EventHubProducer.send*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 182
  package: com.azure.messaging.eventhubs
  summary: "<p>Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.</p>\r\n<p></p>"
  syntax:
    content: public Mono<Void> send(Publisher<EventData> events)
    parameters:
    - id: events
      type: 24253e53com.azure.messaging.eventhubs.EventDataa08ddfce
      description: <p>Events to send to the service. </p>
    return:
      type: d4009ed4
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Mono</xref> that completes when all events are pushed to the service. </p>
- uid: com.azure.messaging.eventhubs.EventHubProducer.send(Publisher<EventData>,SendOptions)
  id: send(Publisher<EventData>,SendOptions)
  parent: com.azure.messaging.eventhubs.EventHubProducer
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  langs:
  - java
  name: send(Publisher<EventData> events, SendOptions options)
  nameWithType: EventHubProducer.send(Publisher<EventData> events, SendOptions options)
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send(Publisher<EventData> events, SendOptions options)
  overload: com.azure.messaging.eventhubs.EventHubProducer.send*
  type: Method
  source:
    remote: *o0
    path: sdk/eventhubs/azure-eventhubs/src/main/java/com/azure/messaging/eventhubs/EventHubProducer.java
    startLine: 197
  package: com.azure.messaging.eventhubs
  summary: "<p>Sends a set of events to the associated Event Hub using a batched approach. If the size of events exceed the maximum size of a single batch, an exception will be triggered and the send will fail. By default, the message size is the max amount allowed on the link.</p>\r\n<p></p>"
  syntax:
    content: public Mono<Void> send(Publisher<EventData> events, SendOptions options)
    parameters:
    - id: events
      type: 24253e53com.azure.messaging.eventhubs.EventDataa08ddfce
      description: <p>Events to send to the service. </p>
    - id: options
      type: com.azure.messaging.eventhubs.models.SendOptions
      description: <p>The set of options to consider when sending this batch. </p>
    return:
      type: d4009ed4
      description: <p>A <xref uid="" data-throw-if-not-resolved="false">Mono</xref> that completes when all events are pushed to the service. </p>
references:
- uid: cd225469
  spec.java:
  - name: final int
    fullName: final int
- uid: d4009ed4
  spec.java:
  - name: Mono<Void>
    fullName: Mono<Void>
- uid: com.azure.messaging.eventhubs.EventHubProducer.send*
  name: send
  nameWithType: EventHubProducer.send
  fullName: com.azure.messaging.eventhubs.EventHubProducer.send
  package: com.azure.messaging.eventhubs
- uid: 2a13b5a5com.azure.messaging.eventhubs.EventDataa08ddfce
  spec.java:
  - name: Iterable<
    fullName: Iterable<
  - uid: com.azure.messaging.eventhubs.EventData
    name: EventData
    fullName: com.azure.messaging.eventhubs.EventData
    href: com.azure.messaging.eventhubs.EventData.yml
  - name: '>'
    fullName: '>'
- uid: 24253e53com.azure.messaging.eventhubs.EventDataa08ddfce
  spec.java:
  - name: Publisher<
    fullName: Publisher<
  - uid: com.azure.messaging.eventhubs.EventData
    name: EventData
    fullName: com.azure.messaging.eventhubs.EventData
    href: com.azure.messaging.eventhubs.EventData.yml
  - name: '>'
    fullName: '>'
- uid: cbf33bbe
  spec.java:
  - name: IOException
    fullName: IOException
- uid: com.azure.messaging.eventhubs.EventHubProducer.close*
  name: close
  nameWithType: EventHubProducer.close
  fullName: com.azure.messaging.eventhubs.EventHubProducer.close
  package: com.azure.messaging.eventhubs
- uid: com.azure.messaging.eventhubs.models.SendOptions
  parent: com.azure.messaging.eventhubs.models
  href: com.azure.messaging.eventhubs.models.SendOptions.yml
  name: SendOptions
  nameWithType: SendOptions
  fullName: com.azure.messaging.eventhubs.models.SendOptions
  type: Class
  summary: "<p>The set of options that can be specified when sending a set of events to influence the way in which events are sent to the Event Hubs service.</p>\r\n<p></p>"
  syntax:
    content: public class SendOptions
- uid: com.azure.core.util.logging.ClientLogger
  parent: com.azure.core.util.logging
  href: com.azure.core.util.logging.ClientLogger.yml
  name: ClientLogger
  nameWithType: ClientLogger
  fullName: com.azure.core.util.logging.ClientLogger
  type: Class
  summary: "<p>This is a fluent logger helper class that wraps a plug-able <xref uid=\"\" data-throw-if-not-resolved=\"false\">Logger</xref>.</p>\r\n<p>This logger logs formattable messages that use<code>{} \r\n    </code> as the placeholder. When a throwable is the last argument of the format varargs and the logger is enabled for <xref uid=\"\" data-throw-if-not-resolved=\"false\">verbose</xref> logging the stack trace for the throwable will be included in the log message.</p>\r\n<p>A minimum logging level threshold is determined by the <xref uid=\"com.azure.core.util.configuration.BaseConfigurations.AZURE_LOG_LEVEL\" data-throw-if-not-resolved=\"false\">AZURE_LOG_LEVEL</xref> environment configuration, by default logging is disabled.</p>\r\n<p>\r\n  <b>Log level hierarchy</b>\r\n</p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Error</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Warning</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Info</xref>\r\n      </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"\" data-throw-if-not-resolved=\"false\">Verbose</xref>\r\n      </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p></p>"
  syntax:
    content: public class ClientLogger
- uid: com.azure.messaging.eventhubs.models.EventHubProducerOptions
  parent: com.azure.messaging.eventhubs.models
  href: com.azure.messaging.eventhubs.models.EventHubProducerOptions.yml
  name: EventHubProducerOptions
  nameWithType: EventHubProducerOptions
  fullName: com.azure.messaging.eventhubs.models.EventHubProducerOptions
  type: Class
  summary: "<p>The set of options that can be specified when creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref> to configure its behavior.</p>\r\n<p></p>"
  syntax:
    content: public class EventHubProducerOptions
- uid: com.azure.messaging.eventhubs.implementation.AmqpSendLink
  parent: com.azure.messaging.eventhubs.implementation
  href: com.azure.messaging.eventhubs.implementation.AmqpSendLink.yml
  name: AmqpSendLink
  nameWithType: AmqpSendLink
  fullName: com.azure.messaging.eventhubs.implementation.AmqpSendLink
  type: Interface
  summary: "<p>An AMQP link that sends information to the remote endpoint. </p>"
  syntax:
    content: public interface AmqpSendLink extends AmqpLink
- uid: com.azure.messaging.eventhubs.EventHubProducer
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventHubProducer.yml
  name: EventHubProducer
  nameWithType: EventHubProducer
  fullName: com.azure.messaging.eventhubs.EventHubProducer
  type: Class
  summary: "<p>A producer responsible for transmitting <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> to a specific Event Hub, grouped together in batches. Depending on the options specified at creation, the producer may be created to allow event data to be automatically routed to an available partition or specific to a partition.</p>\r\n<p>Allowing automatic routing of partitions is recommended when: <ul><li><p>The sending of events needs to be highly available. </p></li><li><p>The event data should be evenly distributed among all available partitions. </p></li></ul></p>\r\n<p>If no partition is specified, the following rules are used for automatically selecting one: <orderedlist><li><p>Distribute the events equally amongst all available partitions using a round-robin approach. </p></li><li><p>If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition. </p></li></orderedlist></p>\r\n<p>\r\n  <b>Create a producer that routes events to any partition</b>\r\n</p>\r\n<p>To allow automatic routing of messages to available partition, do not specify the <xref uid=\"com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId()\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.instantiate}</p>\r\n<p>\r\n  <b>Create a producer that publishes events to partition \"foo\" with a timeout of 45 seconds.</b>\r\n</p>\r\n<p>Developers can push events to a single partition by specifying the <xref uid=\"com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId(String)\" data-throw-if-not-resolved=\"false\">partitionId</xref> when creating an <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref>.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.instantiatePartitionProducer}</p>\r\n<p>\r\n  <b>Publish events to the same partition, grouped together using <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)\" data-throw-if-not-resolved=\"false\">SendOptions#partitionKey(String)</xref>.</b>\r\n</p>\r\n<p>If developers want to push similar events to end up at the same partition, but do not require them to go to a specific partition, they can use <xref uid=\"com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)\" data-throw-if-not-resolved=\"false\">SendOptions#partitionKey(String)</xref>.</p>\r\n<p>In the sample below, all the \"sandwiches\" end up in the same partition, but it could end up in partition 0, 1, etc. of the available partitions. All that matters to the end user is that they are grouped together.</p>\r\n<p>{ com.azure.messaging.eventhubs.eventhubproducer.send::publisher-sendOptions}</p>\r\n<p></p>"
  syntax: *o1
- uid: com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId()
  parent: com.azure.messaging.eventhubs.models.EventHubProducerOptions
  href: com.azure.messaging.eventhubs.models.EventHubProducerOptions.yml
  name: partitionId()
  nameWithType: EventHubProducerOptions.partitionId()
  fullName: com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId()
  type: Method
  summary: "<p>Gets the identifier of the Event Hub partition that the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref> will be bound to, limiting it to sending events to only that partition.</p>\r\n<p>If the identifier is not specified, the Event Hubs service will be responsible for routing events that are sent to an available partition.</p>\r\n<p></p>"
  syntax:
    content: public String partitionId()
    return:
      type: "26831127"
      description: <p>the identifier of the Event Hub partition that the <xref uid="com.azure.messaging.eventhubs.EventHubProducer" data-throw-if-not-resolved="false">EventHubProducer</xref> will be bound to. </p>
- uid: com.azure.messaging.eventhubs.EventData
  parent: com.azure.messaging.eventhubs
  href: com.azure.messaging.eventhubs.EventData.yml
  name: EventData
  nameWithType: EventData
  fullName: com.azure.messaging.eventhubs.EventData
  type: Class
  summary: "<p>The data structure encapsulating the event being sent-to and received-from Event Hubs. Each Event Hub partition can be visualized as a stream of <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>.</p>\r\n<p>Here's how AMQP message sections map to <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref>. For reference, the specification can be found here: <a href=\"http://docs.oasis-open.org/amqp/core/v1.0/os/amqp-core-complete-v1.0-os.pdf\">AMQP 1.0 specification</a></p>\r\n<p>\r\n  <orderedlist>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.properties()\" data-throw-if-not-resolved=\"false\">properties()</xref> - AMQPMessage.ApplicationProperties section </p>\r\n    </li>\r\n    <li>\r\n      <p>\r\n        <xref uid=\"com.azure.messaging.eventhubs.EventData.body()\" data-throw-if-not-resolved=\"false\">body()</xref> - if AMQPMessage.Body has Data section </p>\r\n    </li>\r\n  </orderedlist>\r\n</p>\r\n<p>Serializing a received <xref uid=\"com.azure.messaging.eventhubs.EventData\" data-throw-if-not-resolved=\"false\">EventData</xref> with AMQP sections other than ApplicationProperties (with primitive Java types) and Data section is not supported. </p>\r\n<p></p>"
  syntax:
    content: public class EventData
- uid: com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId(String)
  parent: com.azure.messaging.eventhubs.models.EventHubProducerOptions
  href: com.azure.messaging.eventhubs.models.EventHubProducerOptions.yml
  name: partitionId(String partitionId)
  nameWithType: EventHubProducerOptions.partitionId(String partitionId)
  fullName: com.azure.messaging.eventhubs.models.EventHubProducerOptions.partitionId(String partitionId)
  type: Method
  summary: "<p>Sets the identifier of the Event Hub partition that the <xref uid=\"com.azure.messaging.eventhubs.EventHubProducer\" data-throw-if-not-resolved=\"false\">EventHubProducer</xref> will be bound to, limiting it to sending events to only that partition.</p>\r\n<p>If the identifier is not specified, the Event Hubs service will be responsible for routing events that are sent to an available partition.</p>\r\n<p></p>"
  syntax:
    content: public EventHubProducerOptions partitionId(String partitionId)
    parameters:
    - id: partitionId
      type: "26831127"
      description: >-
        <p>The identifier of the Event Hub partition that the <xref uid="com.azure.messaging.eventhubs.EventHubProducer" data-throw-if-not-resolved="false">EventHubProducer</xref> will be bound to. If the producer wishes the events to be automatically to partitions,<code>null 

            </code> ; otherwise, the identifier of the desired partition. </p>
    return:
      type: com.azure.messaging.eventhubs.models.EventHubProducerOptions
      description: <p>The updated <xref uid="com.azure.messaging.eventhubs.models.EventHubProducerOptions" data-throw-if-not-resolved="false">EventHubProducerOptions</xref> object. </p>
- uid: com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String)
  parent: com.azure.messaging.eventhubs.models.SendOptions
  href: com.azure.messaging.eventhubs.models.SendOptions.yml
  name: partitionKey(String partitionKey)
  nameWithType: SendOptions.partitionKey(String partitionKey)
  fullName: com.azure.messaging.eventhubs.models.SendOptions.partitionKey(String partitionKey)
  type: Method
  summary: "<p>Sets a hashing key to be provided for the batch of events, which instructs the Event Hubs service map this key to a specific partition but allowing the service to choose an arbitrary, partition for this batch of events and any other batches using the same partition hashing key.</p>\r\n<p>The selection of a partition is stable for a given partition hashing key. Should any other batches of events be sent using the same exact partition hashing key, the Event Hubs service will route them all to the same partition.</p>\r\n<p>This should be specified only when there is a need to group events by partition, but there is flexibility into which partition they are routed. If ensuring that a batch of events is sent only to a specific partition, it is recommended that the identifier of the position be specified directly when sending the batch.</p>\r\n<p></p>"
  syntax:
    content: public SendOptions partitionKey(String partitionKey)
    parameters:
    - id: partitionKey
      type: "26831127"
      description: <p>The partition hashing key to associate with the event or batch of events. </p>
    return:
      type: com.azure.messaging.eventhubs.models.SendOptions
      description: <p>The updated <xref uid="com.azure.messaging.eventhubs.models.SendOptions" data-throw-if-not-resolved="false">SendOptions</xref> object. </p>
