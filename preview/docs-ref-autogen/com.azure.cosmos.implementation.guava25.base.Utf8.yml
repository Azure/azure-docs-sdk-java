### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.base.Utf8
  id: Utf8
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base
  children:
  - com.azure.cosmos.implementation.guava25.base.Utf8.encodedLength(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[])
  - com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[],int,int)
  langs:
  - java
  name: Utf8
  nameWithType: Utf8
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8
  type: Class
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Low-level, high-performance utility methods related to the <xref uid="com.azure.cosmos.implementation.guava25.base.Charsets.UTF_8" data-throw-if-not-resolved="false">UTF-8</xref> character encoding. UTF-8 is defined in section D92 of [The Unicode Standard Core Specification, Chapter 3][The Unicode Standard Core Specification_ Chapter 3].


    The variant of UTF-8 implemented by this class is the restricted definition of UTF-8 introduced in Unicode 3.1. One implication of this is that it rejects ["non-shortest form"][non-shortest form] byte sequences, even though the JDK decoder may accept them.



    [The Unicode Standard Core Specification_ Chapter 3]: http://www.unicode.org/versions/Unicode6.2.0/ch03.pdf

    [non-shortest form]: http://www.unicode.org/versions/corrigendum1.html
  syntax:
    content: public final class Utf8
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.Utf8()
  id: Utf8()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Utf8
  langs:
  - java
  name: Utf8()
  nameWithType: Utf8.Utf8()
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.Utf8()
  overload: com.azure.cosmos.implementation.guava25.base.Utf8.Utf8*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.base
  syntax:
    content: private Utf8()
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.encodedLength(java.lang.CharSequence)
  id: encodedLength(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Utf8
  langs:
  - java
  name: encodedLength(CharSequence sequence)
  nameWithType: Utf8.encodedLength(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.encodedLength(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.base.Utf8.encodedLength*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns the number of bytes in the UTF-8-encoded form of `sequence`. For a string, this method is equivalent to `string.getBytes(UTF_8).length`, but is more efficient in both time and space.
  syntax:
    content: public static int encodedLength(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
    return:
      type: int
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[])
  id: isWellFormed(byte[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Utf8
  langs:
  - java
  name: isWellFormed(byte[] bytes)
  nameWithType: Utf8.isWellFormed(byte[] bytes)
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[] bytes)
  overload: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: >-
    Returns `true` if `bytes` is a *well-formed* UTF-8 byte sequence according to Unicode 6.0. Note that this is a stronger criterion than simply whether the bytes can be decoded. For example, some versions of the JDK decoder will accept "non-shortest form" byte sequences, but encoding never reproduces these. Such byte sequences are *not* considered well-formed.


    This method returns `true` if and only if `Arrays.equals(bytes, new String(bytes, UTF_8).getBytes(UTF_8))` does, but is more efficient in both time and space.
  syntax:
    content: public static boolean isWellFormed(byte[] bytes)
    parameters:
    - id: bytes
      type: byte[]
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[],int,int)
  id: isWellFormed(byte[],int,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.base.Utf8
  langs:
  - java
  name: isWellFormed(byte[] bytes, int off, int len)
  nameWithType: Utf8.isWellFormed(byte[] bytes, int off, int len)
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[] bytes, int off, int len)
  overload: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed*
  type: Method
  package: com.azure.cosmos.implementation.guava25.base
  summary: Returns whether the given byte array slice is a well-formed UTF-8 byte sequence, as defined by <xref uid="com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed(byte[])" data-throw-if-not-resolved="false">#isWellFormed(byte[])</xref>. Note that this can be false even when `isWellFormed(bytes)` is true.
  syntax:
    content: public static boolean isWellFormed(byte[] bytes, int off, int len)
    parameters:
    - id: bytes
      type: byte[]
      description: the input buffer
    - id: off
      type: int
      description: the offset in the buffer of the first byte to read
    - id: len
      type: int
      description: the number of bytes to read from the buffer
    return:
      type: boolean
references:
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.Utf8*
  name: Utf8
  nameWithType: Utf8.Utf8
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.Utf8
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.encodedLength*
  name: encodedLength
  nameWithType: Utf8.encodedLength
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.encodedLength
  package: com.azure.cosmos.implementation.guava25.base
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed*
  name: isWellFormed
  nameWithType: Utf8.isWellFormed
  fullName: com.azure.cosmos.implementation.guava25.base.Utf8.isWellFormed
  package: com.azure.cosmos.implementation.guava25.base
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
