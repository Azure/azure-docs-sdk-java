### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  id: BeanSerializerBase
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std
  children:
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.lang.String[])
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.util.Set<java.lang.String>)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.NAME_FOR_OBJECT_REF
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.NO_PROPS
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._anyGetterWriter
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._beanType
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._customTypeId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._filteredProps
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._objectIdWriter
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._propertyFilterId
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._props
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializationShape
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.ser.impl.WritableObjectId)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,boolean)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeId
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeIdDef(com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.asArraySerializer()
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.properties()
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.resolve(com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.usesObjectId()
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals(java.lang.String[])
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals(java.util.Set<java.lang.String>)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)
  - com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  langs:
  - java
  name: BeanSerializerBase
  nameWithType: BeanSerializerBase
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  type: Class
  package: com.fasterxml.jackson.databind.ser.std
  summary: Base class both for the standard bean serializer, and couple of variants that only differ in small details. Can be used for custom bean serializers as well, although that is not the primary design goal.
  syntax:
    content: public abstract class BeanSerializerBase extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, jsonFormatVisitors.JsonFormatVisitable, SchemaAware
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.databind.JsonSerializer
  - com.fasterxml.jackson.databind.ser.std.StdSerializer
  implements:
  - com.fasterxml.jackson.databind.ser.ContextualSerializer
  - com.fasterxml.jackson.databind.ser.ResolvableSerializer
  - com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  - com.fasterxml.jackson.databind.jsonschema.SchemaAware
  inheritedMembers:
  - com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  - com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  - com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  - com.fasterxml.jackson.databind.JsonSerializer.properties()
  - com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  - com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  - com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  - com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  - com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  id: BeanSerializerBase(com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.ser.BeanSerializerBuilder,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  nameWithType: BeanSerializerBase.BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  summary: Constructor used by <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializerBuilder" data-throw-if-not-resolved="false">BeanSerializerBuilder</xref> to create an instance
  syntax:
    content: protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
    parameters:
    - id: type
      type: com.fasterxml.jackson.databind.JavaType
      description: Nominal type of values handled by this serializer
    - id: builder
      type: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder
      description: Builder for accessing other collected information
    - id: properties
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
    - id: filteredProperties
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  summary: Copy-constructor that is useful for sub-classes that just want to copy all super-class properties without modifications.
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
    - id: properties
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
    - id: filteredProperties
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
    - id: objectIdWriter
      type: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter,java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
    - id: objectIdWriter
      type: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
    - id: filterId
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.util.NameTransformer)
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,com.fasterxml.jackson.databind.util.NameTransformer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  summary: Copy-constructor that will also rename properties with given prefix (if it's non-empty)
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
    - id: unwrapper
      type: com.fasterxml.jackson.databind.util.NameTransformer
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.lang.String[])
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.lang.String[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
    - id: toIgnore
      type: java.lang.String[]
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.util.Set<java.lang.String>)
  id: BeanSerializerBase(com.fasterxml.jackson.databind.ser.std.BeanSerializerBase,java.util.Set<java.lang.String>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: BeanSerializerBase(BeanSerializerBase src, Set<String> toIgnore)
  nameWithType: BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, Set<String> toIgnore)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase(BeanSerializerBase src, Set<String> toIgnore)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  type: Constructor
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected BeanSerializerBase(BeanSerializerBase src, Set<String> toIgnore)
    parameters:
    - id: src
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
    - id: toIgnore
      type: java.util.Set<java.lang.String>
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.NAME_FOR_OBJECT_REF
  id: NAME_FOR_OBJECT_REF
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: NAME_FOR_OBJECT_REF
  nameWithType: BeanSerializerBase.NAME_FOR_OBJECT_REF
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.NAME_FOR_OBJECT_REF
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected static final PropertyName NAME_FOR_OBJECT_REF
    return:
      type: com.fasterxml.jackson.databind.PropertyName
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.NO_PROPS
  id: NO_PROPS
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: NO_PROPS
  nameWithType: BeanSerializerBase.NO_PROPS
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.NO_PROPS
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected static final BeanPropertyWriter[] NO_PROPS
    return:
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._anyGetterWriter
  id: _anyGetterWriter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _anyGetterWriter
  nameWithType: BeanSerializerBase._anyGetterWriter
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._anyGetterWriter
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Handler for <xref uid="com.fasterxml.jackson.annotation.JsonAnyGetter" data-throw-if-not-resolved="false">com.fasterxml.jackson.annotation.JsonAnyGetter</xref> annotated properties
  syntax:
    content: protected final AnyGetterWriter _anyGetterWriter
    return:
      type: com.fasterxml.jackson.databind.ser.AnyGetterWriter
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._beanType
  id: _beanType
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _beanType
  nameWithType: BeanSerializerBase._beanType
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._beanType
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final JavaType _beanType
    return:
      type: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._customTypeId(java.lang.Object)
  id: _customTypeId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _customTypeId(Object bean)
  nameWithType: BeanSerializerBase._customTypeId(Object bean)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._customTypeId(Object bean)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._customTypeId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final String _customTypeId(Object bean)
    parameters:
    - id: bean
      type: java.lang.Object
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._filteredProps
  id: _filteredProps
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _filteredProps
  nameWithType: BeanSerializerBase._filteredProps
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._filteredProps
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Optional filters used to suppress output of properties that are only to be included in certain views
  syntax:
    content: protected final BeanPropertyWriter[] _filteredProps
    return:
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._objectIdWriter
  id: _objectIdWriter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _objectIdWriter
  nameWithType: BeanSerializerBase._objectIdWriter
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._objectIdWriter
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: If this POJO can be alternatively serialized using just an object id to denote a reference to previously serialized object, this Object will handle details.
  syntax:
    content: protected final ObjectIdWriter _objectIdWriter
    return:
      type: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._propertyFilterId
  id: _propertyFilterId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _propertyFilterId
  nameWithType: BeanSerializerBase._propertyFilterId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._propertyFilterId
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Id of the bean property filter to use, if any; null if none.
  syntax:
    content: protected final Object _propertyFilterId
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._props
  id: _props
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _props
  nameWithType: BeanSerializerBase._props
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._props
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Writers used for outputting actual property values
  syntax:
    content: protected final BeanPropertyWriter[] _props
    return:
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializationShape
  id: _serializationShape
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _serializationShape
  nameWithType: BeanSerializerBase._serializationShape
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializationShape
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: Requested shape from bean class annotations.
  syntax:
    content: protected final JsonFormat.Shape _serializationShape
    return:
      type: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.ser.impl.WritableObjectId)
  id: _serializeObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer,com.fasterxml.jackson.databind.ser.impl.WritableObjectId)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _serializeObjectId(Object bean, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId)
  nameWithType: BeanSerializerBase._serializeObjectId(Object bean, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId(Object bean, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void _serializeObjectId(Object bean, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: g
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: objectId
      type: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,boolean)
  id: _serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject)
  nameWithType: BeanSerializerBase._serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, boolean startEndObject)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: startEndObject
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: _serializeWithObjectId(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: BeanSerializerBase._serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final void _serializeWithObjectId(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeId
  id: _typeId
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _typeId
  nameWithType: BeanSerializerBase._typeId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeId
  type: Field
  package: com.fasterxml.jackson.databind.ser.std
  summary: If using custom type ids (usually via getter, or field), this is the reference to that member.
  syntax:
    content: protected final AnnotatedMember _typeId
    return:
      type: com.fasterxml.jackson.databind.introspect.AnnotatedMember
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeIdDef(com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  id: _typeIdDef(com.fasterxml.jackson.databind.jsontype.TypeSerializer,java.lang.Object,com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: _typeIdDef(TypeSerializer typeSer, Object bean, JsonToken valueShape)
  nameWithType: BeanSerializerBase._typeIdDef(TypeSerializer typeSer, Object bean, JsonToken valueShape)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeIdDef(TypeSerializer typeSer, Object bean, JsonToken valueShape)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeIdDef*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected final WritableTypeId _typeIdDef(TypeSerializer typeSer, Object bean, JsonToken valueShape)
    parameters:
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
    - id: bean
      type: java.lang.Object
    - id: valueShape
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: com.fasterxml.jackson.core.type.WritableTypeId
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  id: acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  nameWithType: BeanSerializerBase.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.acceptJsonFormatVisitor*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation specifies no format. This behavior is usually overriden by custom serializers.
  syntax:
    content: public void acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper visitor, JavaType typeHint)
    parameters:
    - id: visitor
      type: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
    - id: typeHint
      type: com.fasterxml.jackson.databind.JavaType
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.asArraySerializer()
  id: asArraySerializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: asArraySerializer()
  nameWithType: BeanSerializerBase.asArraySerializer()
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.asArraySerializer()
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.asArraySerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Mutant factory for creating a variant that output POJO as a JSON Array. Implementations may ignore this request if output as array is not possible (either at all, or reliably).
  syntax:
    content: protected abstract BeanSerializerBase asArraySerializer()
    return:
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  id: createContextual(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: createContextual(SerializerProvider provider, BeanProperty property)
  nameWithType: BeanSerializerBase.createContextual(SerializerProvider provider, BeanProperty property)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual(SerializerProvider provider, BeanProperty property)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property. Note that instance that this method is called on is typically shared one and as a result method should **NOT** modify this instance but rather construct and return a new instance. This instance should only be returned as-is, in case it is already suitable for use.
  syntax:
    content: public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: property
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<?>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)
  id: findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.ser.BeanPropertyWriter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop)
  nameWithType: BeanSerializerBase.findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Helper method that can be used to see if specified property is annotated to indicate use of a converter for property value (in case of container types, it is container type itself, not key or content type).
  syntax:
    content: protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: prop
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
    return:
      type: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  id: getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: getSchema(SerializerProvider provider, Type typeHint)
  nameWithType: BeanSerializerBase.getSchema(SerializerProvider provider, Type typeHint)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.getSchema(SerializerProvider provider, Type typeHint)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.getSchema*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Default implementation simply claims type is "string"; usually overriden by custom serializers.
  syntax:
    content: public JsonNode getSchema(SerializerProvider provider, Type typeHint)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeHint
      type: java.lang.reflect.Type
    return:
      type: com.fasterxml.jackson.databind.JsonNode
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.properties()
  id: properties()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: properties()
  nameWithType: BeanSerializerBase.properties()
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.properties()
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.properties*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Accessor for iterating over logical properties that the type handled by this serializer has, from serialization perspective. Actual type of properties, if any, will be <xref uid="com.fasterxml.jackson.databind.ser.BeanPropertyWriter" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.BeanPropertyWriter</xref>. Of standard Jackson serializers, only <xref uid="com.fasterxml.jackson.databind.ser.BeanSerializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.ser.BeanSerializer</xref> exposes properties.
  syntax:
    content: public Iterator<PropertyWriter> properties()
    return:
      type: java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.resolve(com.fasterxml.jackson.databind.SerializerProvider)
  id: resolve(com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: resolve(SerializerProvider provider)
  nameWithType: BeanSerializerBase.resolve(SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.resolve(SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.resolve*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: We need to implement <xref uid="com.fasterxml.jackson.databind.ser.ResolvableSerializer" data-throw-if-not-resolved="false">ResolvableSerializer</xref> to be able to properly handle cyclic type references.
  syntax:
    content: public void resolve(SerializerProvider provider)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serialize(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: serialize(Object bean, JsonGenerator gen, SerializerProvider provider)
  nameWithType: BeanSerializerBase.serialize(Object bean, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serialize(Object bean, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serialize*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to ask implementation to serialize values of type this serializer handles.
  syntax:
    content: public abstract void serialize(Object bean, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serializeFields(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider)
  nameWithType: BeanSerializerBase.serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  syntax:
    content: protected void serializeFields(Object bean, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  id: serializeFieldsFiltered(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider)
  nameWithType: BeanSerializerBase.serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Alternative serialization method that gets called when there is a <xref uid="com.fasterxml.jackson.databind.ser.PropertyFilter" data-throw-if-not-resolved="false">PropertyFilter</xref> that needs to be called to determine which properties are to be serialized (and possibly how)
  syntax:
    content: protected void serializeFieldsFiltered(Object bean, JsonGenerator gen, SerializerProvider provider)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  id: serializeWithType(java.lang.Object,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  nameWithType: BeanSerializerBase.serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.


    Default implementation will throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> to indicate that proper type handling needs to be implemented.


    For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like:


    ```java

    // note: method to call depends on whether this type is serialized as JSON scalar, object or Array!
      typeSer.writeTypePrefixForScalar(value, gen);
      serialize(value, gen, provider);
      typeSer.writeTypeSuffixForScalar(value, gen);
    ```


    and implementations for type serialized as JSON Arrays or Objects would differ slightly, as `START-ARRAY`/`END-ARRAY` and `START-OBJECT`/`END-OBJECT` pairs need to be properly handled with respect to serializing of contents.
  syntax:
    content: public void serializeWithType(Object bean, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)
    parameters:
    - id: bean
      type: java.lang.Object
    - id: gen
      type: com.fasterxml.jackson.core.JsonGenerator
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
    - id: typeSer
      type: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.usesObjectId()
  id: usesObjectId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: usesObjectId()
  nameWithType: BeanSerializerBase.usesObjectId()
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.usesObjectId()
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.usesObjectId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Method that can be called to see whether this serializer instance will use Object Id to handle cyclic references.
  syntax:
    content: public boolean usesObjectId()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withFilterId(java.lang.Object)
  id: withFilterId(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: withFilterId(Object filterId)
  nameWithType: BeanSerializerBase.withFilterId(Object filterId)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withFilterId(Object filterId)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withFilterId*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Mutant factory used for creating a new instance with different filter id (used with `JsonFilter` annotation)
  syntax:
    content: public abstract BeanSerializerBase withFilterId(Object filterId)
    parameters:
    - id: filterId
      type: java.lang.Object
    return:
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals(java.lang.String[])
  id: withIgnorals(java.lang.String[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: withIgnorals(String[] toIgnore)
  nameWithType: BeanSerializerBase.withIgnorals(String[] toIgnore)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals(String[] toIgnore)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Mutant factory used for creating a new instance with additional set of properties to ignore (from properties this instance otherwise has)
  syntax:
    content: protected BeanSerializerBase withIgnorals(String[] toIgnore)
    parameters:
    - id: toIgnore
      type: java.lang.String[]
    return:
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals(java.util.Set<java.lang.String>)
  id: withIgnorals(java.util.Set<java.lang.String>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: withIgnorals(Set<String> toIgnore)
  nameWithType: BeanSerializerBase.withIgnorals(Set<String> toIgnore)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals(Set<String> toIgnore)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Mutant factory used for creating a new instance with additional set of properties to ignore (from properties this instance otherwise has)
  syntax:
    content: protected abstract BeanSerializerBase withIgnorals(Set<String> toIgnore)
    parameters:
    - id: toIgnore
      type: java.util.Set<java.lang.String>
    return:
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)
  id: withObjectIdWriter(com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: withObjectIdWriter(ObjectIdWriter objectIdWriter)
  nameWithType: BeanSerializerBase.withObjectIdWriter(ObjectIdWriter objectIdWriter)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withObjectIdWriter(ObjectIdWriter objectIdWriter)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withObjectIdWriter*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: Mutant factory used for creating a new instance with different <xref uid="com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter" data-throw-if-not-resolved="false">ObjectIdWriter</xref>.
  syntax:
    content: public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter)
    parameters:
    - id: objectIdWriter
      type: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
    return:
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  id: withProperties(com.fasterxml.jackson.databind.ser.BeanPropertyWriter[],com.fasterxml.jackson.databind.ser.BeanPropertyWriter[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
  langs:
  - java
  name: withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  nameWithType: BeanSerializerBase.withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
  overload: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withProperties*
  type: Method
  package: com.fasterxml.jackson.databind.ser.std
  summary: >-
    Mutant factory used for creating a new instance with modified set of properties.


    Note: in 2.11.x, need to keep non-abstract for slightly better compatibility (XML module extends)
  syntax:
    content: protected BeanSerializerBase withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties)
    parameters:
    - id: properties
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
    - id: filteredProperties
      type: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
    return:
      type: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase
references:
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder
  name: BeanSerializerBuilder
  nameWithType: BeanSerializerBuilder
  fullName: com.fasterxml.jackson.databind.ser.BeanSerializerBuilder
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyWriter[]
  spec.java:
  - uid: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
    name: BeanPropertyWriter
    fullName: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase*
  name: BeanSerializerBase
  nameWithType: BeanSerializerBase.BeanSerializerBase
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.BeanSerializerBase
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
  name: ObjectIdWriter
  nameWithType: ObjectIdWriter
  fullName: com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: java.lang.String[]
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '[]'
    fullName: '[]'
- uid: java.util.Set<java.lang.String>
  spec.java:
  - uid: java.util.Set
    name: Set
    fullName: java.util.Set
  - name: <
    fullName: <
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.util.NameTransformer
  name: NameTransformer
  nameWithType: NameTransformer
  fullName: com.fasterxml.jackson.databind.util.NameTransformer
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withObjectIdWriter*
  name: withObjectIdWriter
  nameWithType: BeanSerializerBase.withObjectIdWriter
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withObjectIdWriter
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals*
  name: withIgnorals
  nameWithType: BeanSerializerBase.withIgnorals
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withIgnorals
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.asArraySerializer*
  name: asArraySerializer
  nameWithType: BeanSerializerBase.asArraySerializer
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.asArraySerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withFilterId*
  name: withFilterId
  nameWithType: BeanSerializerBase.withFilterId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withFilterId
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withProperties*
  name: withProperties
  nameWithType: BeanSerializerBase.withProperties
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.withProperties
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.resolve*
  name: resolve
  nameWithType: BeanSerializerBase.resolve
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.resolve
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
  name: BeanPropertyWriter
  nameWithType: BeanPropertyWriter
  fullName: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
- uid: com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer*
  name: findConvertingSerializer
  nameWithType: BeanSerializerBase.findConvertingSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.findConvertingSerializer
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.JsonSerializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonSerializer
    name: JsonSerializer
    fullName: com.fasterxml.jackson.databind.JsonSerializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual*
  name: createContextual
  nameWithType: BeanSerializerBase.createContextual
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.createContextual
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.util.Iterator<com.fasterxml.jackson.databind.ser.PropertyWriter>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: com.fasterxml.jackson.databind.ser.PropertyWriter
    name: PropertyWriter
    fullName: com.fasterxml.jackson.databind.ser.PropertyWriter
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.properties*
  name: properties
  nameWithType: BeanSerializerBase.properties
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.properties
  package: com.fasterxml.jackson.databind.ser.std
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.usesObjectId*
  name: usesObjectId
  nameWithType: BeanSerializerBase.usesObjectId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.usesObjectId
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonGenerator
  name: JsonGenerator
  nameWithType: JsonGenerator
  fullName: com.fasterxml.jackson.core.JsonGenerator
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serialize*
  name: serialize
  nameWithType: BeanSerializerBase.serialize
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serialize
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsontype.TypeSerializer
  name: TypeSerializer
  nameWithType: TypeSerializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeSerializer
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType*
  name: serializeWithType
  nameWithType: BeanSerializerBase.serializeWithType
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeWithType
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId*
  name: _serializeWithObjectId
  nameWithType: BeanSerializerBase._serializeWithObjectId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeWithObjectId
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
  name: WritableObjectId
  nameWithType: WritableObjectId
  fullName: com.fasterxml.jackson.databind.ser.impl.WritableObjectId
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId*
  name: _serializeObjectId
  nameWithType: BeanSerializerBase._serializeObjectId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._serializeObjectId
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.type.WritableTypeId
  name: WritableTypeId
  nameWithType: WritableTypeId
  fullName: com.fasterxml.jackson.core.type.WritableTypeId
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeIdDef*
  name: _typeIdDef
  nameWithType: BeanSerializerBase._typeIdDef
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._typeIdDef
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._customTypeId*
  name: _customTypeId
  nameWithType: BeanSerializerBase._customTypeId
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase._customTypeId
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields*
  name: serializeFields
  nameWithType: BeanSerializerBase.serializeFields
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.core.JsonGenerationException
  name: JsonGenerationException
  nameWithType: JsonGenerationException
  fullName: com.fasterxml.jackson.core.JsonGenerationException
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered*
  name: serializeFieldsFiltered
  nameWithType: BeanSerializerBase.serializeFieldsFiltered
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFieldsFiltered
  package: com.fasterxml.jackson.databind.ser.std
- uid: java.lang.reflect.Type
  spec.java:
  - uid: java.lang.reflect.Type
    name: Type
    fullName: java.lang.reflect.Type
- uid: com.fasterxml.jackson.databind.JsonNode
  name: JsonNode
  nameWithType: JsonNode
  fullName: com.fasterxml.jackson.databind.JsonNode
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.getSchema*
  name: getSchema
  nameWithType: BeanSerializerBase.getSchema
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.getSchema
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
  name: jsonFormatVisitors.JsonFormatVisitorWrapper
  nameWithType: jsonFormatVisitors.JsonFormatVisitorWrapper
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper
- uid: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.acceptJsonFormatVisitor*
  name: acceptJsonFormatVisitor
  nameWithType: BeanSerializerBase.acceptJsonFormatVisitor
  fullName: com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.acceptJsonFormatVisitor
  package: com.fasterxml.jackson.databind.ser.std
- uid: com.fasterxml.jackson.databind.PropertyName
  name: PropertyName
  nameWithType: PropertyName
  fullName: com.fasterxml.jackson.databind.PropertyName
- uid: com.fasterxml.jackson.databind.ser.AnyGetterWriter
  name: AnyGetterWriter
  nameWithType: AnyGetterWriter
  fullName: com.fasterxml.jackson.databind.ser.AnyGetterWriter
- uid: com.fasterxml.jackson.databind.introspect.AnnotatedMember
  name: AnnotatedMember
  nameWithType: AnnotatedMember
  fullName: com.fasterxml.jackson.databind.introspect.AnnotatedMember
- uid: com.fasterxml.jackson.annotation.JsonFormat.Shape
  name: JsonFormat.Shape
  nameWithType: JsonFormat.Shape
  fullName: com.fasterxml.jackson.annotation.JsonFormat.Shape
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer<java.lang.Object>
  name: StdSerializer<Object>
  nameWithType: StdSerializer<Object>
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer<java.lang.Object>
- uid: com.fasterxml.jackson.databind.jsonschema.SchemaAware
  name: SchemaAware
  nameWithType: SchemaAware
  fullName: com.fasterxml.jackson.databind.jsonschema.SchemaAware
- uid: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
  name: jsonFormatVisitors.JsonFormatVisitable
  nameWithType: jsonFormatVisitors.JsonFormatVisitable
  fullName: com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable
- uid: com.fasterxml.jackson.databind.ser.ContextualSerializer
  name: ContextualSerializer
  nameWithType: ContextualSerializer
  fullName: com.fasterxml.jackson.databind.ser.ContextualSerializer
- uid: com.fasterxml.jackson.databind.ser.ResolvableSerializer
  name: ResolvableSerializer
  nameWithType: ResolvableSerializer
  fullName: com.fasterxml.jackson.databind.ser.ResolvableSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class<?>,JsonFormat.Feature)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
  name: JsonSerializer.isEmpty(SerializerProvider,T)
  nameWithType: JsonSerializer.isEmpty(SerializerProvider,T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider,T)
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.databind.JsonSerializer.properties()
  name: JsonSerializer.properties()
  nameWithType: JsonSerializer.properties()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.properties()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
  name: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  nameWithType: JsonSerializer.serializeWithType(T,JsonGenerator,SerializerProvider,TypeSerializer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.jsontype.TypeSerializer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
  name: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  nameWithType: StdSerializer.findPropertyFilter(SerializerProvider,Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
  name: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  nameWithType: StdSerializer.serialize(T,JsonGenerator,SerializerProvider)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
  name: JsonSerializer.getDelegatee()
  nameWithType: JsonSerializer.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
  name: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  nameWithType: StdSerializer.visitFloatFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.acceptJsonFormatVisitor(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
  name: JsonSerializer.unwrappingSerializer(NameTransformer)
  nameWithType: JsonSerializer.unwrappingSerializer(NameTransformer)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,int)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitStringFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
  name: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type,boolean)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
  name: JsonSerializer.isUnwrappingSerializer()
  nameWithType: JsonSerializer.isUnwrappingSerializer()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,jsonFormatVisitors.JsonFormatTypes)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
  name: StdSerializer._nonEmpty(Collection<?>)
  nameWithType: StdSerializer._nonEmpty(Collection<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection<?>)
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
  name: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  nameWithType: StdSerializer.visitIntFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonParser.NumberType,jsonFormatVisitors.JsonValueFormat)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.core.JsonParser.NumberType,com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
  name: StdSerializer.handledType()
  nameWithType: StdSerializer.handledType()
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
  name: StdSerializer.createSchemaNode(String,boolean)
  nameWithType: StdSerializer.createSchemaNode(String,boolean)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String,boolean)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
  name: StdSerializer.createSchemaNode(String)
  nameWithType: StdSerializer.createSchemaNode(String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
  name: StdSerializer.getSchema(SerializerProvider,Type)
  nameWithType: StdSerializer.getSchema(SerializerProvider,Type)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider,java.lang.reflect.Type)
- uid: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
  name: JsonSerializer.withFilterId(Object)
  nameWithType: JsonSerializer.withFilterId(Object)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer<?>,JavaType)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer<?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
  name: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  nameWithType: StdSerializer.findAnnotatedContentSerializer(SerializerProvider,BeanProperty)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty)
- uid: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
  name: JsonSerializer.isEmpty(T)
  nameWithType: JsonSerializer.isEmpty(T)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)
- uid: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
  name: JsonSerializer.usesObjectId()
  nameWithType: JsonSerializer.usesObjectId()
  fullName: com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class<?>)
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer<?>)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer<?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
  name: StdSerializer._neitherNull(Object,Object)
  nameWithType: StdSerializer._neitherNull(Object,Object)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object,java.lang.Object)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
  name: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  nameWithType: StdSerializer.wrapAndThrow(SerializerProvider,Throwable,Object,String)
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)
- uid: java.util.Set
  name: Set
  nameWithType: Set
  fullName: java.util.Set
- uid: com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer
  nameWithType: JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: com.fasterxml.jackson.databind.ser.PropertyWriter
  name: PropertyWriter
  nameWithType: PropertyWriter
  fullName: com.fasterxml.jackson.databind.ser.PropertyWriter
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer
  name: StdSerializer
  nameWithType: StdSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer
- uid: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
  name: ?>,JsonFormat.Feature)
  nameWithType: ?>,JsonFormat.Feature)
  fullName: ?>,com.fasterxml.jackson.annotation.JsonFormat.Feature)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatFeature(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findIncludeOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findConvertingContentSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
  name: StdSerializer._nonEmpty(Collection
  nameWithType: StdSerializer._nonEmpty(Collection
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.isDefaultSerializer(JsonSerializer
  nameWithType: StdSerializer.isDefaultSerializer(JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  nameWithType: StdSerializer.visitArrayFormat(jsonFormatVisitors.JsonFormatVisitorWrapper,JavaType,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.JsonSerializer
- uid: ?>,com.fasterxml.jackson.databind.JavaType)
  name: ?>,JavaType)
  nameWithType: ?>,JavaType)
  fullName: ?>,com.fasterxml.jackson.databind.JavaType)
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
  name: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  nameWithType: StdSerializer.findFormatOverrides(SerializerProvider,BeanProperty,Class
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,java.lang.Class
- uid: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
  name: JsonSerializer.replaceDelegatee(JsonSerializer
  nameWithType: JsonSerializer.replaceDelegatee(JsonSerializer
  fullName: com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer
- uid: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
  name: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  nameWithType: StdSerializer.findContextualConvertingSerializer(SerializerProvider,BeanProperty,JsonSerializer
  fullName: com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider,com.fasterxml.jackson.databind.BeanProperty,com.fasterxml.jackson.databind.JsonSerializer
