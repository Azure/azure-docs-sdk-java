### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.cfg.MapperBuilder.addMixIn*"
fullName: "com.fasterxml.jackson.databind.cfg.MapperBuilder<M,B>.addMixIn"
name: "addMixIn"
nameWithType: "MapperBuilder<M,B>.addMixIn"
members:
- uid: "com.fasterxml.jackson.databind.cfg.MapperBuilder.addMixIn(java.lang.Class<?>,java.lang.Class<?>)"
  fullName: "com.fasterxml.jackson.databind.cfg.MapperBuilder<M,B>.addMixIn(Class<?> target, Class<?> mixinSource)"
  name: "addMixIn(Class<?> target, Class<?> mixinSource)"
  nameWithType: "MapperBuilder<M,B>.addMixIn(Class<?> target, Class<?> mixinSource)"
  summary: "Method to use for defining mix-in annotations to use for augmenting annotations that classes have, for purpose of configuration serialization and/or deserialization processing. Mixing in is done when introspecting class annotations and properties. Annotations from \"mixin\" class (and its supertypes) will **override** annotations that target classes (and their super-types) have.\n\nNote that standard mixin handler implementations will only allow a single mix-in source class per target, so if there was a previous mix-in defined target it will be cleared. This also means that you can remove mix-in definition by specifying `mixinSource` of `null`"
  parameters:
  - name: "target"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "mixinSource"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  syntax: "public B addMixIn(Class<?> target, Class<?> mixinSource)"
  returns:
    type: "<xref href=\"B?alt=B&text=B\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.cfg"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
