### YamlMime:JavaType
uid: "com.azure.communication.callingserver.models.ProgressReceiver"
fullName: "com.azure.communication.callingserver.models.ProgressReceiver"
name: "ProgressReceiver"
nameWithType: "ProgressReceiver"
summary: "A `ProgressReceiver` is an object that can be used to report progress on network transfers."
syntax: "public interface ProgressReceiver"
methods:
- uid: "com.azure.communication.callingserver.models.ProgressReceiver.reportProgress(long)"
  fullName: "com.azure.communication.callingserver.models.ProgressReceiver.reportProgress(long bytesTransferred)"
  name: "reportProgress(long bytesTransferred)"
  nameWithType: "ProgressReceiver.reportProgress(long bytesTransferred)"
  summary: "The callback function invoked as progress is reported."
  modifiers:
  - "abstract"
  parameters:
  - description: "The total number of bytes transferred during this transaction."
    name: "bytesTransferred"
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract void reportProgress(long bytesTransferred)"
  desc: "The callback function invoked as progress is reported."
type: "interface"
desc: "A `ProgressReceiver` is an object that can be used to report progress on network transfers. When specified on transfer operations, the `reportProgress` method will be called periodically with the total number of bytes transferred. The user may configure this method to report progress in whatever format desired. Note that any method accepting a <xref uid=\"com.azure.communication.callingserver.models.ParallelDownloadOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ParallelDownloadOptions\"></xref> will use the `ProgressReceiver` specified there and will handle the logic to coordinate the reporting between parallel operations."
metadata: {}
package: "com.azure.communication.callingserver.models"
artifact: com.azure:azure-communication-callingserver:1.0.0-beta.4
