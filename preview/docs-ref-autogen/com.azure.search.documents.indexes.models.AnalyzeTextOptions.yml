### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions"
fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions"
name: "AnalyzeTextOptions"
nameWithType: "AnalyzeTextOptions"
summary: "Specifies some text and analysis components used to break that text into tokens."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class AnalyzeTextOptions"
constructors:
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  name: "AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes analyzer<wbr>Name."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the analyzer to use to break the given text."
    name: "analyzerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)"
  desc: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes analyzerName."
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalNormalizerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalNormalizerName normalizerName)"
  name: "AnalyzeTextOptions(String text, LexicalNormalizerName normalizerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalNormalizerName normalizerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes normalizer<wbr>Name."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the normalizer to use to break the given text."
    name: "normalizerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalNormalizerName?alt=com.azure.search.documents.indexes.models.LexicalNormalizerName&text=LexicalNormalizerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalNormalizerName normalizerName)"
  desc: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes normalizerName."
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  name: "AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  nameWithType: "AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  summary: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes tokenizer<wbr>Name."
  parameters:
  - description: "The text break into tokens."
    name: "text"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The name of the tokenizer to use to break the given text."
    name: "tokenizerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizerName?alt=com.azure.search.documents.indexes.models.LexicalTokenizerName&text=LexicalTokenizerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)"
  desc: "Constructor to <xref uid=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"AnalyzeTextOptions\"></xref> which takes tokenizerName."
methods:
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()"
  name: "getAnalyzerName()"
  nameWithType: "AnalyzeTextOptions.getAnalyzerName()"
  summary: "Get the analyzer name property: The name of the analyzer to use to break the given text."
  syntax: "public LexicalAnalyzerName getAnalyzerName()"
  desc: "Get the analyzer name property: The name of the analyzer to use to break the given text."
  returns:
    description: "the analyzer value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()"
  name: "getCharFilters()"
  nameWithType: "AnalyzeTextOptions.getCharFilters()"
  summary: "Get the char<wbr>Filters property: An optional list of character filters to use when breaking the given text."
  syntax: "public List<CharFilterName> getCharFilters()"
  desc: "Get the charFilters property: An optional list of character filters to use when breaking the given text."
  returns:
    description: "the charFilters value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.CharFilterName?alt=com.azure.search.documents.indexes.models.CharFilterName&text=CharFilterName\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getNormalizer()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getNormalizer()"
  name: "getNormalizer()"
  nameWithType: "AnalyzeTextOptions.getNormalizer()"
  summary: "Get the normalizer name property: The name of the normalizer to use to normalize the given text."
  syntax: "public LexicalNormalizerName getNormalizer()"
  desc: "Get the normalizer name property: The name of the normalizer to use to normalize the given text."
  returns:
    description: "the normalizer value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalNormalizerName?alt=com.azure.search.documents.indexes.models.LexicalNormalizerName&text=LexicalNormalizerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()"
  name: "getText()"
  nameWithType: "AnalyzeTextOptions.getText()"
  summary: "Get the text property: The text to break into tokens."
  syntax: "public String getText()"
  desc: "Get the text property: The text to break into tokens."
  returns:
    description: "the text value."
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()"
  name: "getTokenFilters()"
  nameWithType: "AnalyzeTextOptions.getTokenFilters()"
  summary: "Get the token<wbr>Filters property: An optional list of token filters to use when breaking the given text."
  syntax: "public List<TokenFilterName> getTokenFilters()"
  desc: "Get the tokenFilters property: An optional list of token filters to use when breaking the given text."
  returns:
    description: "the tokenFilters value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.TokenFilterName?alt=com.azure.search.documents.indexes.models.TokenFilterName&text=TokenFilterName\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()"
  name: "getTokenizerName()"
  nameWithType: "AnalyzeTextOptions.getTokenizerName()"
  summary: "Get the tokenizer name property: The name of the tokenizer to use to break the given text."
  syntax: "public LexicalTokenizerName getTokenizerName()"
  desc: "Get the tokenizer name property: The name of the tokenizer to use to break the given text."
  returns:
    description: "the tokenizer value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalTokenizerName?alt=com.azure.search.documents.indexes.models.LexicalTokenizerName&text=LexicalTokenizerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(com.azure.search.documents.indexes.models.CharFilterName...)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(CharFilterName[] charFilters)"
  name: "setCharFilters(CharFilterName[] charFilters)"
  nameWithType: "AnalyzeTextOptions.setCharFilters(CharFilterName[] charFilters)"
  summary: "Set the char<wbr>Filters property: An optional list of character filters to use when breaking the given text."
  parameters:
  - description: "the charFilters value to set."
    name: "charFilters"
    type: "<xref href=\"com.azure.search.documents.indexes.models.CharFilterName?alt=com.azure.search.documents.indexes.models.CharFilterName&text=CharFilterName\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public AnalyzeTextOptions setCharFilters(CharFilterName[] charFilters)"
  desc: "Set the charFilters property: An optional list of character filters to use when breaking the given text."
  returns:
    description: "the AnalyzeRequest object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(com.azure.search.documents.indexes.models.TokenFilterName...)"
  fullName: "com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(TokenFilterName[] tokenFilters)"
  name: "setTokenFilters(TokenFilterName[] tokenFilters)"
  nameWithType: "AnalyzeTextOptions.setTokenFilters(TokenFilterName[] tokenFilters)"
  summary: "Set the token<wbr>Filters property: An optional list of token filters to use when breaking the given text."
  parameters:
  - description: "the tokenFilters value to set."
    name: "tokenFilters"
    type: "<xref href=\"com.azure.search.documents.indexes.models.TokenFilterName?alt=com.azure.search.documents.indexes.models.TokenFilterName&text=TokenFilterName\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public AnalyzeTextOptions setTokenFilters(TokenFilterName[] tokenFilters)"
  desc: "Set the tokenFilters property: An optional list of token filters to use when breaking the given text."
  returns:
    description: "the AnalyzeRequest object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Specifies some text and analysis components used to break that text into tokens."
metadata: {}
package: "com.azure.search.documents.indexes.models"
artifact: com.azure:azure-search-documents:11.5.0-beta.12
