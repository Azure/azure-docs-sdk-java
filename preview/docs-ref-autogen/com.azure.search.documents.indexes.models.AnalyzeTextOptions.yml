### YamlMime:ManagedReference
items:
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  id: AnalyzeTextOptions
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models
  children:
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(com.azure.search.documents.indexes.models.CharFilterName...)
  - com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(com.azure.search.documents.indexes.models.TokenFilterName...)
  langs:
  - java
  name: AnalyzeTextOptions
  nameWithType: AnalyzeTextOptions
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  type: Class
  package: com.azure.search.documents.indexes.models
  summary: Specifies some text and analysis components used to break that text into tokens.
  syntax:
    content: public final class AnalyzeTextOptions
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)
  id: AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
  nameWithType: AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions*
  type: Constructor
  package: com.azure.search.documents.indexes.models
  summary: Constructor to <xref uid="com.azure.search.documents.indexes.models.AnalyzeTextOptions" data-throw-if-not-resolved="false">AnalyzeTextOptions</xref> which takes analyzerName.
  syntax:
    content: public AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
    parameters:
    - id: text
      type: java.lang.String
      description: The text break into tokens.
    - id: analyzerName
      type: com.azure.search.documents.indexes.models.LexicalAnalyzerName
      description: >-
        The name of the analyzer to use to break the
         given text. If this parameter is not specified, you must specify a
         tokenizer instead. The tokenizer and analyzer parameters are mutually
         exclusive. Possible values include: 'ArMicrosoft', 'ArLucene',
         'HyLucene', 'BnMicrosoft', 'EuLucene', 'BgMicrosoft', 'BgLucene',
         'CaMicrosoft', 'CaLucene', 'ZhHansMicrosoft', 'ZhHansLucene',
         'ZhHantMicrosoft', 'ZhHantLucene', 'HrMicrosoft', 'CsMicrosoft',
         'CsLucene', 'DaMicrosoft', 'DaLucene', 'NlMicrosoft', 'NlLucene',
         'EnMicrosoft', 'EnLucene', 'EtMicrosoft', 'FiMicrosoft', 'FiLucene',
         'FrMicrosoft', 'FrLucene', 'GlLucene', 'DeMicrosoft', 'DeLucene',
         'ElMicrosoft', 'ElLucene', 'GuMicrosoft', 'HeMicrosoft', 'HiMicrosoft',
         'HiLucene', 'HuMicrosoft', 'HuLucene', 'IsMicrosoft', 'IdMicrosoft',
         'IdLucene', 'GaLucene', 'ItMicrosoft', 'ItLucene', 'JaMicrosoft',
         'JaLucene', 'KnMicrosoft', 'KoMicrosoft', 'KoLucene', 'LvMicrosoft',
         'LvLucene', 'LtMicrosoft', 'MlMicrosoft', 'MsMicrosoft', 'MrMicrosoft',
         'NbMicrosoft', 'NoLucene', 'FaLucene', 'PlMicrosoft', 'PlLucene',
         'PtBrMicrosoft', 'PtBrLucene', 'PtPtMicrosoft', 'PtPtLucene',
         'PaMicrosoft', 'RoMicrosoft', 'RoLucene', 'RuMicrosoft', 'RuLucene',
         'SrCyrillicMicrosoft', 'SrLatinMicrosoft', 'SkMicrosoft', 'SlMicrosoft',
         'EsMicrosoft', 'EsLucene', 'SvMicrosoft', 'SvLucene', 'TaMicrosoft',
         'TeMicrosoft', 'ThMicrosoft', 'ThLucene', 'TrMicrosoft', 'TrLucene',
         'UkMicrosoft', 'UrMicrosoft', 'ViMicrosoft', 'StandardLucene',
         'StandardAsciiFoldingLucene', 'Keyword', 'Pattern', 'Simple', 'Stop',
         'Whitespace'.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)
  id: AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
  nameWithType: AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions*
  type: Constructor
  package: com.azure.search.documents.indexes.models
  summary: Constructor to <xref uid="com.azure.search.documents.indexes.models.AnalyzeTextOptions" data-throw-if-not-resolved="false">AnalyzeTextOptions</xref> which takes tokenizerName.
  syntax:
    content: public AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
    parameters:
    - id: text
      type: java.lang.String
      description: The text break into tokens.
    - id: tokenizerName
      type: com.azure.search.documents.indexes.models.LexicalTokenizerName
      description: >-
        The name of the tokenizer to use to break
         the given text. If this parameter is not specified, you must specify an
         analyzer instead. The tokenizer and analyzer parameters are mutually
         exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword',
         'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer',
         'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy',
         'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()
  id: getAnalyzerName()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: getAnalyzerName()
  nameWithType: AnalyzeTextOptions.getAnalyzerName()
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName()
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: "Get the analyzer property: The name of the analyzer to use to break the given text. If this parameter is not specified, you must specify a tokenizer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'ArMicrosoft', 'ArLucene', 'HyLucene', 'BnMicrosoft', 'EuLucene', 'BgMicrosoft', 'BgLucene', 'CaMicrosoft', 'CaLucene', 'ZhHansMicrosoft', 'ZhHansLucene', 'ZhHantMicrosoft', 'ZhHantLucene', 'HrMicrosoft', 'CsMicrosoft', 'CsLucene', 'DaMicrosoft', 'DaLucene', 'NlMicrosoft', 'NlLucene', 'EnMicrosoft', 'EnLucene', 'EtMicrosoft', 'FiMicrosoft', 'FiLucene', 'FrMicrosoft', 'FrLucene', 'GlLucene', 'DeMicrosoft', 'DeLucene', 'ElMicrosoft', 'ElLucene', 'GuMicrosoft', 'HeMicrosoft', 'HiMicrosoft', 'HiLucene', 'HuMicrosoft', 'HuLucene', 'IsMicrosoft', 'IdMicrosoft', 'IdLucene', 'GaLucene', 'ItMicrosoft', 'ItLucene', 'JaMicrosoft', 'JaLucene', 'KnMicrosoft', 'KoMicrosoft', 'KoLucene', 'LvMicrosoft', 'LvLucene', 'LtMicrosoft', 'MlMicrosoft', 'MsMicrosoft', 'MrMicrosoft', 'NbMicrosoft', 'NoLucene', 'FaLucene', 'PlMicrosoft', 'PlLucene', 'PtBrMicrosoft', 'PtBrLucene', 'PtPtMicrosoft', 'PtPtLucene', 'PaMicrosoft', 'RoMicrosoft', 'RoLucene', 'RuMicrosoft', 'RuLucene', 'SrCyrillicMicrosoft', 'SrLatinMicrosoft', 'SkMicrosoft', 'SlMicrosoft', 'EsMicrosoft', 'EsLucene', 'SvMicrosoft', 'SvLucene', 'TaMicrosoft', 'TeMicrosoft', 'ThMicrosoft', 'ThLucene', 'TrMicrosoft', 'TrLucene', 'UkMicrosoft', 'UrMicrosoft', 'ViMicrosoft', 'StandardLucene', 'StandardAsciiFoldingLucene', 'Keyword', 'Pattern', 'Simple', 'Stop', 'Whitespace'."
  syntax:
    content: public LexicalAnalyzerName getAnalyzerName()
    return:
      type: com.azure.search.documents.indexes.models.LexicalAnalyzerName
      description: the analyzer value.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()
  id: getCharFilters()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: getCharFilters()
  nameWithType: AnalyzeTextOptions.getCharFilters()
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters()
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: 'Get the charFilters property: An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.'
  syntax:
    content: public List<CharFilterName> getCharFilters()
    return:
      type: java.util.List<com.azure.search.documents.indexes.models.CharFilterName>
      description: the charFilters value.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()
  id: getText()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: getText()
  nameWithType: AnalyzeTextOptions.getText()
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText()
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: 'Get the text property: The text to break into tokens.'
  syntax:
    content: public String getText()
    return:
      type: java.lang.String
      description: the text value.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()
  id: getTokenFilters()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: getTokenFilters()
  nameWithType: AnalyzeTextOptions.getTokenFilters()
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters()
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: 'Get the tokenFilters property: An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.'
  syntax:
    content: public List<TokenFilterName> getTokenFilters()
    return:
      type: java.util.List<com.azure.search.documents.indexes.models.TokenFilterName>
      description: the tokenFilters value.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()
  id: getTokenizerName()
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: getTokenizerName()
  nameWithType: AnalyzeTextOptions.getTokenizerName()
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName()
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: "Get the tokenizer property: The name of the tokenizer to use to break the given text. If this parameter is not specified, you must specify an analyzer instead. The tokenizer and analyzer parameters are mutually exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword', 'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer', 'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy', 'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'."
  syntax:
    content: public LexicalTokenizerName getTokenizerName()
    return:
      type: com.azure.search.documents.indexes.models.LexicalTokenizerName
      description: the tokenizer value.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(com.azure.search.documents.indexes.models.CharFilterName...)
  id: setCharFilters(com.azure.search.documents.indexes.models.CharFilterName...)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: setCharFilters(CharFilterName[] charFilters)
  nameWithType: AnalyzeTextOptions.setCharFilters(CharFilterName[] charFilters)
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters(CharFilterName[] charFilters)
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: 'Set the charFilters property: An optional list of character filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.'
  syntax:
    content: public AnalyzeTextOptions setCharFilters(CharFilterName[] charFilters)
    parameters:
    - id: charFilters
      type: com.azure.search.documents.indexes.models.CharFilterName[]
      description: the charFilters value to set.
    return:
      type: com.azure.search.documents.indexes.models.AnalyzeTextOptions
      description: the AnalyzeRequest object itself.
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(com.azure.search.documents.indexes.models.TokenFilterName...)
  id: setTokenFilters(com.azure.search.documents.indexes.models.TokenFilterName...)
  artifact: com.azure:azure-search-documents:11.1.0-beta.1
  parent: com.azure.search.documents.indexes.models.AnalyzeTextOptions
  langs:
  - java
  name: setTokenFilters(TokenFilterName[] tokenFilters)
  nameWithType: AnalyzeTextOptions.setTokenFilters(TokenFilterName[] tokenFilters)
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters(TokenFilterName[] tokenFilters)
  overload: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters*
  type: Method
  package: com.azure.search.documents.indexes.models
  summary: 'Set the tokenFilters property: An optional list of token filters to use when breaking the given text. This parameter can only be set when using the tokenizer parameter.'
  syntax:
    content: public AnalyzeTextOptions setTokenFilters(TokenFilterName[] tokenFilters)
    parameters:
    - id: tokenFilters
      type: com.azure.search.documents.indexes.models.TokenFilterName[]
      description: the tokenFilters value to set.
    return:
      type: com.azure.search.documents.indexes.models.AnalyzeTextOptions
      description: the AnalyzeRequest object itself.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.search.documents.indexes.models.LexicalAnalyzerName
  name: LexicalAnalyzerName
  nameWithType: LexicalAnalyzerName
  fullName: com.azure.search.documents.indexes.models.LexicalAnalyzerName
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions*
  name: AnalyzeTextOptions
  nameWithType: AnalyzeTextOptions.AnalyzeTextOptions
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions
  package: com.azure.search.documents.indexes.models
- uid: com.azure.search.documents.indexes.models.LexicalTokenizerName
  name: LexicalTokenizerName
  nameWithType: LexicalTokenizerName
  fullName: com.azure.search.documents.indexes.models.LexicalTokenizerName
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText*
  name: getText
  nameWithType: AnalyzeTextOptions.getText
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getText
  package: com.azure.search.documents.indexes.models
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName*
  name: getAnalyzerName
  nameWithType: AnalyzeTextOptions.getAnalyzerName
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getAnalyzerName
  package: com.azure.search.documents.indexes.models
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName*
  name: getTokenizerName
  nameWithType: AnalyzeTextOptions.getTokenizerName
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenizerName
  package: com.azure.search.documents.indexes.models
- uid: java.util.List<com.azure.search.documents.indexes.models.TokenFilterName>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.TokenFilterName
    name: TokenFilterName
    fullName: com.azure.search.documents.indexes.models.TokenFilterName
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters*
  name: getTokenFilters
  nameWithType: AnalyzeTextOptions.getTokenFilters
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getTokenFilters
  package: com.azure.search.documents.indexes.models
- uid: com.azure.search.documents.indexes.models.TokenFilterName[]
  spec.java:
  - uid: com.azure.search.documents.indexes.models.TokenFilterName
    name: TokenFilterName
    fullName: com.azure.search.documents.indexes.models.TokenFilterName
  - name: '[]'
    fullName: '[]'
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters*
  name: setTokenFilters
  nameWithType: AnalyzeTextOptions.setTokenFilters
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setTokenFilters
  package: com.azure.search.documents.indexes.models
- uid: java.util.List<com.azure.search.documents.indexes.models.CharFilterName>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: com.azure.search.documents.indexes.models.CharFilterName
    name: CharFilterName
    fullName: com.azure.search.documents.indexes.models.CharFilterName
  - name: '>'
    fullName: '>'
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters*
  name: getCharFilters
  nameWithType: AnalyzeTextOptions.getCharFilters
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.getCharFilters
  package: com.azure.search.documents.indexes.models
- uid: com.azure.search.documents.indexes.models.CharFilterName[]
  spec.java:
  - uid: com.azure.search.documents.indexes.models.CharFilterName
    name: CharFilterName
    fullName: com.azure.search.documents.indexes.models.CharFilterName
  - name: '[]'
    fullName: '[]'
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters*
  name: setCharFilters
  nameWithType: AnalyzeTextOptions.setCharFilters
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.setCharFilters
  package: com.azure.search.documents.indexes.models
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: com.azure.search.documents.indexes.models.TokenFilterName
  name: TokenFilterName
  nameWithType: TokenFilterName
  fullName: com.azure.search.documents.indexes.models.TokenFilterName
- uid: com.azure.search.documents.indexes.models.CharFilterName
  name: CharFilterName
  nameWithType: CharFilterName
  fullName: com.azure.search.documents.indexes.models.CharFilterName
