### YamlMime:JavaMember
uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl*"
fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl"
name: "beginRecognizeBusinessCardsFromUrl"
nameWithType: "FormRecognizerClient.beginRecognizeBusinessCardsFromUrl"
members:
- uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(java.lang.String)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  name: "beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  nameWithType: "FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  summary: "Recognizes business card data from document using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a business card.\n\n**Code sample**\n\n```java\nString businessCardUrl = \"{business_card_url}\";\n formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl)\n     .getFinalResult()\n     .forEach(recognizedBusinessCard -> {\n         Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n         FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n         if (contactNamesFormField != null) {\n             if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                 List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                 contactNamesList.stream()\n                     .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                     .map(contactName -> {\n                         System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                         return contactName.getValue().asMap();\n                     })\n                     .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                         if (\"FirstName\".equals(key)) {\n                             if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                 String firstName = contactName.getValue().asString();\n                                 System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                     firstName, contactName.getConfidence());\n                             }\n                         }\n                         if (\"LastName\".equals(key)) {\n                             if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                 String lastName = contactName.getValue().asString();\n                                 System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                     lastName, contactName.getConfidence());\n                             }\n                         }\n                     }));\n             }\n         }\n         FormField jobTitles = recognizedFields.get(\"JobTitles\");\n         if (jobTitles != null) {\n             if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                 List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                 jobTitlesItems.stream().forEach(jobTitlesItem -> {\n                     if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                         String jobTitle = jobTitlesItem.getValue().asString();\n                         System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                             jobTitle, jobTitlesItem.getConfidence());\n                     }\n                 });\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  parameters:
  - description: "The source URL to the input business card."
    name: "businessCardUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll the progress of the recognize business card operation until it has\n completed, has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(java.lang.String,com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions,com.azure.core.util.Context)"
  fullName: "com.azure.ai.formrecognizer.FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)"
  name: "beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)"
  nameWithType: "FormRecognizerClient.beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)"
  summary: "Recognizes business card data from documents using optical character recognition (OCR) and a prebuilt business card trained model.\n\nThe service does not support cancellation of the long running operation and returns with an error message indicating absence of cancellation support\n\nSee [here][] for fields found on a business card.\n\n**Code sample**\n\n```java\nString businessCardUrl = \"{business_card_url}\";\n formRecognizerClient.beginRecognizeBusinessCardsFromUrl(businessCardUrl,\n     new RecognizeBusinessCardsOptions()\n         .setPollInterval(Duration.ofSeconds(5))\n         .setFieldElementsIncluded(true), Context.NONE).getFinalResult()\n     .forEach(recognizedBusinessCard -> {\n         Map<String, FormField> recognizedFields = recognizedBusinessCard.getFields();\n         FormField contactNamesFormField = recognizedFields.get(\"ContactNames\");\n         if (contactNamesFormField != null) {\n             if (FieldValueType.LIST == contactNamesFormField.getValue().getValueType()) {\n                 List<FormField> contactNamesList = contactNamesFormField.getValue().asList();\n                 contactNamesList.stream()\n                     .filter(contactName -> FieldValueType.MAP == contactName.getValue().getValueType())\n                     .map(contactName -> {\n                         System.out.printf(\"Contact name: %s%n\", contactName.getValueData().getText());\n                         return contactName.getValue().asMap();\n                     })\n                     .forEach(contactNamesMap -> contactNamesMap.forEach((key, contactName) -> {\n                         if (\"FirstName\".equals(key)) {\n                             if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                 String firstName = contactName.getValue().asString();\n                                 System.out.printf(\"\\tFirst Name: %s, confidence: %.2f%n\",\n                                     firstName, contactName.getConfidence());\n                             }\n                         }\n                         if (\"LastName\".equals(key)) {\n                             if (FieldValueType.STRING == contactName.getValue().getValueType()) {\n                                 String lastName = contactName.getValue().asString();\n                                 System.out.printf(\"\\tLast Name: %s, confidence: %.2f%n\",\n                                     lastName, contactName.getConfidence());\n                             }\n                         }\n                     }));\n             }\n         }\n         FormField jobTitles = recognizedFields.get(\"JobTitles\");\n         if (jobTitles != null) {\n             if (FieldValueType.LIST == jobTitles.getValue().getValueType()) {\n                 List<FormField> jobTitlesItems = jobTitles.getValue().asList();\n                 jobTitlesItems.stream().forEach(jobTitlesItem -> {\n                     if (FieldValueType.STRING == jobTitlesItem.getValue().getValueType()) {\n                         String jobTitle = jobTitlesItem.getValue().asString();\n                         System.out.printf(\"Job Title: %s, confidence: %.2f%n\",\n                             jobTitle, jobTitlesItem.getConfidence());\n                     }\n                 });\n             }\n         }\n     });\n```\n\n\n[here]: https://aka.ms/formrecognizer/businesscardfields"
  parameters:
  - description: "The source URL to the input business card."
    name: "businessCardUrl"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The additional configurable <xref uid=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"false\" data-raw-source=\"options\"></xref>\n that may be passed when analyzing a business card."
    name: "recognizeBusinessCardsOptions"
    type: "<xref href=\"com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeBusinessCardsOptions&text=RecognizeBusinessCardsOptions\" data-throw-if-not-resolved=\"False\" />"
  - description: "Additional context that is passed through the HTTP pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SyncPoller<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeBusinessCardsFromUrl(String businessCardUrl, RecognizeBusinessCardsOptions recognizeBusinessCardsOptions, Context context)"
  returns:
    description: "A <xref uid=\"com.azure.core.util.polling.SyncPoller\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SyncPoller\"></xref> to poll the progress of the recognize business card operation until it has\n completed, has failed, or has been cancelled. The completed operation returns a list of <xref uid=\"com.azure.ai.formrecognizer.models.RecognizedForm\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RecognizedForm\"></xref>."
    type: "<xref href=\"com.azure.core.util.polling.SyncPoller?alt=com.azure.core.util.polling.SyncPoller&text=SyncPoller\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult\" data-throw-if-not-resolved=\"False\" />,<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.ai.formrecognizer"
artifact: com.azure:azure-ai-formrecognizer:3.1.0-beta.1
