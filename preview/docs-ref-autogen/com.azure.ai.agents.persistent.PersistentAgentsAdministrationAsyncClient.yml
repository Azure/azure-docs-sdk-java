### YamlMime:JavaType
uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient"
fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient"
name: "PersistentAgentsAdministrationAsyncClient"
nameWithType: "PersistentAgentsAdministrationAsyncClient"
summary: "Initializes a new instance of the asynchronous Persistent<wbr>Agents<wbr>Administration<wbr>Client type."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **PersistentAgentsAdministrationAsyncClient**"
methods:
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createAgent(com.azure.ai.agents.persistent.models.CreateAgentOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createAgent(CreateAgentOptions options)"
  name: "createAgent(CreateAgentOptions options)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.createAgent(CreateAgentOptions options)"
  summary: "Creates a new agent."
  parameters:
  - description: "Options for createAgent API."
    name: "options"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.CreateAgentOptions?alt=com.azure.ai.agents.persistent.models.CreateAgentOptions&text=CreateAgentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PersistentAgent> createAgent(CreateAgentOptions options)"
  desc: "Creates a new agent."
  returns:
    description: "represents an agent that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgent?alt=com.azure.ai.agents.persistent.models.PersistentAgent&text=PersistentAgent\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createAgentWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createAgentWithResponse(BinaryData createAgentRequest, RequestOptions requestOptions)"
  name: "createAgentWithResponse(BinaryData createAgentRequest, RequestOptions requestOptions)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.createAgentWithResponse(BinaryData createAgentRequest, RequestOptions requestOptions)"
  summary: "Creates a new agent."
  parameters:
  - description: "The createAgentRequest parameter."
    name: "createAgentRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createAgentWithResponse(BinaryData createAgentRequest, RequestOptions requestOptions)"
  desc: "Creates a new agent.\n\n**Request Body Schema**\n\n```java\n{\n     model: String (Required)\n     name: String (Optional)\n     description: String (Optional)\n     instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Optional): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     temperature: Double (Optional)\n     top_p: Double (Optional)\n     response_format: BinaryData (Optional)\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     temperature: Double (Required)\n     top_p: Double (Required)\n     response_format: BinaryData (Optional)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "represents an agent that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createThreadAndRun(com.azure.ai.agents.persistent.models.CreateThreadAndRunOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createThreadAndRun(CreateThreadAndRunOptions options)"
  name: "createThreadAndRun(CreateThreadAndRunOptions options)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.createThreadAndRun(CreateThreadAndRunOptions options)"
  summary: "Creates a new agent thread and immediately starts a run using that new thread."
  parameters:
  - description: "Options for createThreadAndRun API."
    name: "options"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.CreateThreadAndRunOptions?alt=com.azure.ai.agents.persistent.models.CreateThreadAndRunOptions&text=CreateThreadAndRunOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<ThreadRun> createThreadAndRun(CreateThreadAndRunOptions options)"
  desc: "Creates a new agent thread and immediately starts a run using that new thread."
  returns:
    description: "data representing a single evaluation run of an agent thread on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.ThreadRun?alt=com.azure.ai.agents.persistent.models.ThreadRun&text=ThreadRun\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createThreadAndRunWithResponse(com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.createThreadAndRunWithResponse(BinaryData createThreadAndRunRequest, RequestOptions requestOptions)"
  name: "createThreadAndRunWithResponse(BinaryData createThreadAndRunRequest, RequestOptions requestOptions)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.createThreadAndRunWithResponse(BinaryData createThreadAndRunRequest, RequestOptions requestOptions)"
  summary: "Creates a new agent thread and immediately starts a run using that new thread."
  parameters:
  - description: "The createThreadAndRunRequest parameter."
    name: "createThreadAndRunRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> createThreadAndRunWithResponse(BinaryData createThreadAndRunRequest, RequestOptions requestOptions)"
  desc: "Creates a new agent thread and immediately starts a run using that new thread.\n\n**Request Body Schema**\n\n```java\n{\n     assistant_id: String (Required)\n     thread (Optional): {\n         messages (Optional): [\n              (Optional){\n                 role: String(user/assistant) (Required)\n                 content: BinaryData (Required)\n                 attachments (Optional): [\n                      (Optional){\n                         file_id: String (Optional)\n                         data_source (Optional): {\n                             uri: String (Required)\n                             type: String(uri_asset/id_asset) (Required)\n                         }\n                         tools (Required): [\n                             BinaryData (Required)\n                         ]\n                     }\n                 ]\n                 metadata (Optional): {\n                     String: String (Required)\n                 }\n             }\n         ]\n         tool_resources (Optional): {\n             code_interpreter (Optional): {\n                 file_ids (Optional): [\n                     String (Optional)\n                 ]\n                 data_sources (Optional): [\n                     (recursive schema, see above)\n                 ]\n             }\n             file_search (Optional): {\n                 vector_store_ids (Optional): [\n                     String (Optional)\n                 ]\n                 vector_stores (Optional): [\n                      (Optional){\n                         name: String (Required)\n                         configuration (Required): {\n                             data_sources (Required): [\n                                 (recursive schema, see above)\n                             ]\n                         }\n                     }\n                 ]\n             }\n             azure_ai_search (Optional): {\n                 indexes (Optional): [\n                      (Optional){\n                         index_connection_id: String (Optional)\n                         index_name: String (Optional)\n                         query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                         top_k: Integer (Optional)\n                         filter: String (Optional)\n                         index_asset_id: String (Optional)\n                     }\n                 ]\n             }\n         }\n         metadata (Optional): {\n             String: String (Required)\n         }\n     }\n     model: String (Optional)\n     instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Optional): (recursive schema, see tool_resources above)\n     stream: Boolean (Optional)\n     temperature: Double (Optional)\n     top_p: Double (Optional)\n     max_prompt_tokens: Integer (Optional)\n     max_completion_tokens: Integer (Optional)\n     truncation_strategy (Optional): {\n         type: String(auto/last_messages) (Required)\n         last_messages: Integer (Optional)\n     }\n     tool_choice: BinaryData (Optional)\n     response_format: BinaryData (Optional)\n     parallel_tool_calls: Boolean (Optional)\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     thread_id: String (Required)\n     assistant_id: String (Required)\n     status: String(queued/in_progress/requires_action/cancelling/cancelled/failed/completed/expired) (Required)\n     required_action (Optional): {\n         type: String (Required)\n     }\n     last_error (Required): {\n         code: String (Required)\n         message: String (Required)\n     }\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n             type: String (Required)\n         }\n     ]\n     created_at: long (Required)\n     expires_at: Long (Required)\n     started_at: Long (Required)\n     completed_at: Long (Required)\n     cancelled_at: Long (Required)\n     failed_at: Long (Required)\n     incomplete_details (Required): {\n         reason: String(max_completion_tokens/max_prompt_tokens) (Required)\n     }\n     usage (Required): {\n         completion_tokens: long (Required)\n         prompt_tokens: long (Required)\n         total_tokens: long (Required)\n     }\n     temperature: Double (Optional)\n     top_p: Double (Optional)\n     max_prompt_tokens: Integer (Required)\n     max_completion_tokens: Integer (Required)\n     truncation_strategy (Required): {\n         type: String(auto/last_messages) (Required)\n         last_messages: Integer (Optional)\n     }\n     tool_choice: BinaryData (Required)\n     response_format: BinaryData (Required)\n     metadata (Required): {\n         String: String (Required)\n     }\n     tool_resources (Optional): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     parallel_tool_calls: boolean (Required)\n }\n```"
  returns:
    description: "data representing a single evaluation run of an agent thread along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.deleteAgent(java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.deleteAgent(String assistantId)"
  name: "deleteAgent(String assistantId)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.deleteAgent(String assistantId)"
  summary: "Deletes an agent."
  parameters:
  - description: "Identifier of the agent."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<AgentDeletionStatus> deleteAgent(String assistantId)"
  desc: "Deletes an agent."
  returns:
    description: "the status of an agent deletion operation on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.AgentDeletionStatus?alt=com.azure.ai.agents.persistent.models.AgentDeletionStatus&text=AgentDeletionStatus\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.deleteAgentWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.deleteAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  name: "deleteAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.deleteAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  summary: "Deletes an agent."
  parameters:
  - description: "Identifier of the agent."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> deleteAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  desc: "Deletes an agent.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     deleted: boolean (Required)\n     object: String (Required)\n }\n```"
  returns:
    description: "the status of an agent deletion operation along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful completion of\n <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.getAgent(java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.getAgent(String assistantId)"
  name: "getAgent(String assistantId)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.getAgent(String assistantId)"
  summary: "Retrieves an existing agent."
  parameters:
  - description: "Identifier of the agent."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public Mono<PersistentAgent> getAgent(String assistantId)"
  desc: "Retrieves an existing agent."
  returns:
    description: "represents an agent that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgent?alt=com.azure.ai.agents.persistent.models.PersistentAgent&text=PersistentAgent\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.getAgentWithResponse(java.lang.String,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.getAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  name: "getAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.getAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  summary: "Retrieves an existing agent."
  parameters:
  - description: "Identifier of the agent."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> getAgentWithResponse(String assistantId, RequestOptions requestOptions)"
  desc: "Retrieves an existing agent.\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     temperature: Double (Required)\n     top_p: Double (Required)\n     response_format: BinaryData (Optional)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "represents an agent that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.listAgents()"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.listAgents()"
  name: "listAgents()"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.listAgents()"
  summary: "Gets a list of agents that were previously created."
  syntax: "public PagedFlux<PersistentAgent> listAgents()"
  desc: "Gets a list of agents that were previously created."
  returns:
    description: "a list of agents that were previously created as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgent?alt=com.azure.ai.agents.persistent.models.PersistentAgent&text=PersistentAgent\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.listAgents(java.lang.Integer,com.azure.ai.agents.persistent.models.ListSortOrder,java.lang.String,java.lang.String)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.listAgents(Integer limit, ListSortOrder order, String after, String before)"
  name: "listAgents(Integer limit, ListSortOrder order, String after, String before)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.listAgents(Integer limit, ListSortOrder order, String after, String before)"
  summary: "Gets a list of agents that were previously created."
  parameters:
  - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default\n is 20."
    name: "limit"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  - description: "Sort order by the created_at timestamp of the objects. asc for ascending order and desc for\n descending order."
    name: "order"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.ListSortOrder?alt=com.azure.ai.agents.persistent.models.ListSortOrder&text=ListSortOrder\" data-throw-if-not-resolved=\"False\" />"
  - description: "A cursor for use in pagination. after is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include after=obj_foo in order to fetch the next page of the list."
    name: "after"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "A cursor for use in pagination. before is an object ID that defines your place in the list. For\n instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can\n include before=obj_foo in order to fetch the previous page of the list."
    name: "before"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public PagedFlux<PersistentAgent> listAgents(Integer limit, ListSortOrder order, String after, String before)"
  desc: "Gets a list of agents that were previously created."
  returns:
    description: "a list of agents that were previously created as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgent?alt=com.azure.ai.agents.persistent.models.PersistentAgent&text=PersistentAgent\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.listAgents(com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.listAgents(RequestOptions requestOptions)"
  name: "listAgents(RequestOptions requestOptions)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.listAgents(RequestOptions requestOptions)"
  summary: "Gets a list of agents that were previously created."
  parameters:
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedFlux<BinaryData> listAgents(RequestOptions requestOptions)"
  desc: "Gets a list of agents that were previously created.\n\n**Query Parameters**\n\n    | ------ | ------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n    | Name   | Type    | Required | Description                                                                                                                                                                                                                                                                           |\n    | limit  | Integer | No       | A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.                                                                                                                                                                            |\n    | order  | String  | No       | Sort order by the created\\_at timestamp of the objects. asc for ascending order and desc for descending order. Allowed values: \"asc\", \"desc\".                                                                                                                                         |\n    | after  | String  | No       | A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include after=obj\\_foo in order to fetch the next page of the list.       |\n    | before | String  | No       | A cursor for use in pagination. before is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj\\_foo, your subsequent call can include before=obj\\_foo in order to fetch the previous page of the list. |\n\nYou can add these to a request with <xref uid=\"com.azure.core.http.rest.RequestOptions.addQueryParam\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RequestOptions#addQueryParam\"></xref>\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     temperature: Double (Required)\n     top_p: Double (Required)\n     response_format: BinaryData (Optional)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "a list of agents that were previously created as paginated response with <xref uid=\"com.azure.core.http.rest.PagedFlux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"PagedFlux\"></xref>."
    type: "<xref href=\"com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.updateAgent(com.azure.ai.agents.persistent.models.UpdateAgentOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.updateAgent(UpdateAgentOptions options)"
  name: "updateAgent(UpdateAgentOptions options)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.updateAgent(UpdateAgentOptions options)"
  summary: "Modifies an existing agent."
  parameters:
  - description: "Options for updateAgent API."
    name: "options"
    type: "<xref href=\"com.azure.ai.agents.persistent.models.UpdateAgentOptions?alt=com.azure.ai.agents.persistent.models.UpdateAgentOptions&text=UpdateAgentOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<PersistentAgent> updateAgent(UpdateAgentOptions options)"
  desc: "Modifies an existing agent."
  returns:
    description: "represents an agent that can call the model and use tools on successful completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.ai.agents.persistent.models.PersistentAgent?alt=com.azure.ai.agents.persistent.models.PersistentAgent&text=PersistentAgent\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.updateAgentWithResponse(java.lang.String,com.azure.core.util.BinaryData,com.azure.core.http.rest.RequestOptions)"
  fullName: "com.azure.ai.agents.persistent.PersistentAgentsAdministrationAsyncClient.updateAgentWithResponse(String assistantId, BinaryData updateAgentRequest, RequestOptions requestOptions)"
  name: "updateAgentWithResponse(String assistantId, BinaryData updateAgentRequest, RequestOptions requestOptions)"
  nameWithType: "PersistentAgentsAdministrationAsyncClient.updateAgentWithResponse(String assistantId, BinaryData updateAgentRequest, RequestOptions requestOptions)"
  summary: "Modifies an existing agent."
  parameters:
  - description: "The ID of the agent to modify."
    name: "assistantId"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "The updateAgentRequest parameter."
    name: "updateAgentRequest"
    type: "<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />"
  - description: "The options to configure the HTTP request before HTTP client sends it."
    name: "requestOptions"
    type: "<xref href=\"com.azure.core.http.rest.RequestOptions?alt=com.azure.core.http.rest.RequestOptions&text=RequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<BinaryData>> updateAgentWithResponse(String assistantId, BinaryData updateAgentRequest, RequestOptions requestOptions)"
  desc: "Modifies an existing agent.\n\n**Request Body Schema**\n\n```java\n{\n     model: String (Optional)\n     name: String (Optional)\n     description: String (Optional)\n     instructions: String (Optional)\n     tools (Optional): [\n          (Optional){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Optional): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     temperature: Double (Optional)\n     top_p: Double (Optional)\n     response_format: BinaryData (Optional)\n     metadata (Optional): {\n         String: String (Required)\n     }\n }\n```\n\n**Response Body Schema**\n\n```java\n{\n     id: String (Required)\n     object: String (Required)\n     created_at: long (Required)\n     name: String (Required)\n     description: String (Required)\n     model: String (Required)\n     instructions: String (Required)\n     tools (Required): [\n          (Required){\n             type: String (Required)\n         }\n     ]\n     tool_resources (Required): {\n         code_interpreter (Optional): {\n             file_ids (Optional): [\n                 String (Optional)\n             ]\n             data_sources (Optional): [\n                  (Optional){\n                     uri: String (Required)\n                     type: String(uri_asset/id_asset) (Required)\n                 }\n             ]\n         }\n         file_search (Optional): {\n             vector_store_ids (Optional): [\n                 String (Optional)\n             ]\n             vector_stores (Optional): [\n                  (Optional){\n                     name: String (Required)\n                     configuration (Required): {\n                         data_sources (Required): [\n                             (recursive schema, see above)\n                         ]\n                     }\n                 }\n             ]\n         }\n         azure_ai_search (Optional): {\n             indexes (Optional): [\n                  (Optional){\n                     index_connection_id: String (Optional)\n                     index_name: String (Optional)\n                     query_type: String(simple/semantic/vector/vector_simple_hybrid/vector_semantic_hybrid) (Optional)\n                     top_k: Integer (Optional)\n                     filter: String (Optional)\n                     index_asset_id: String (Optional)\n                 }\n             ]\n         }\n     }\n     temperature: Double (Required)\n     top_p: Double (Required)\n     response_format: BinaryData (Optional)\n     metadata (Required): {\n         String: String (Required)\n     }\n }\n```"
  returns:
    description: "represents an agent that can call the model and use tools along with <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Response\"></xref> on successful\n completion of <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref>."
    type: "<a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html\">Mono</a>&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.util.BinaryData?alt=com.azure.core.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
desc: "Initializes a new instance of the asynchronous PersistentAgentsAdministrationClient type."
metadata: {}
package: "com.azure.ai.agents.persistent"
artifact: com.azure:azure-ai-agents-persistent:1.0.0-beta.1
