### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap<K,V>"
name: "ImmutableRangeMap<K,V>"
nameWithType: "ImmutableRangeMap<K,V>"
summary: "A <xref uid=\"com.azure.cosmos.implementation.guava25.collect.RangeMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RangeMap\"></xref> whose contents will never change, with many other important properties detailed at <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ImmutableCollection\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ImmutableCollection\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class ImmutableRangeMap<K,V> implements RangeMap<K,V>, Serializable"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.<K,V>builder()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.<K,V>copyOf(com.azure.cosmos.implementation.guava25.collect.RangeMap<K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.<K,V>of()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.<K,V>of(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.<T,K,V>toImmutableRangeMap(java.util.function.Function<? super T,com.azure.cosmos.implementation.guava25.collect.Range<K>>,java.util.function.Function<? super T,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.asDescendingMapOfRanges()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.asMapOfRanges()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.get(K)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.getEntry(K)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.put(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.putAll(com.azure.cosmos.implementation.guava25.collect.RangeMap<K,V>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.putCoalescing(com.azure.cosmos.implementation.guava25.collect.Range<K>,V)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.remove(com.azure.cosmos.implementation.guava25.collect.Range<K>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.span()"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.subRangeMap(com.azure.cosmos.implementation.guava25.collect.Range<K>)"
- "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeMap.toString()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.RangeMap?alt=com.azure.cosmos.implementation.guava25.collect.RangeMap&text=RangeMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
