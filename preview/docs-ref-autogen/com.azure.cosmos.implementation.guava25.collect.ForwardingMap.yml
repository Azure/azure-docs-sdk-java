### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.ForwardingMap"
fullName: "com.azure.cosmos.implementation.guava25.collect.ForwardingMap<K,V>"
name: "ForwardingMap<K,V>"
nameWithType: "ForwardingMap<K,V>"
summary: "A map which forwards all its method calls to another map. Subclasses should override one or more methods to modify the behavior of the backing map as desired per the [decorator pattern][].\n\n**Warning:** The methods of `ForwardingMap` forward *indiscriminately* to the methods of the delegate. For example, overriding <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ForwardingMap.put\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#put\"></xref> alone *will not* change the behavior of <xref uid=\"com.azure.cosmos.implementation.guava25.collect.ForwardingMap.putAll\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#putAll\"></xref>, which can lead to unexpected behavior. In this case, you should override `putAll` as well, either providing your own implementation, or delegating to the provided `standardPutAll` method.\n\n**`default` method warning:** This class does *not* forward calls to `default` methods. Instead, it inherits their default implementations. When those implementations invoke methods, they invoke methods on the `ForwardingMap`.\n\nEach of the `standard` methods, where appropriate, use <xref uid=\"com.azure.cosmos.implementation.guava25.base.Objects.equal*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Objects#equal\"></xref> to test equality for both keys and values. This may not be the desired behavior for map implementations that use non-standard notions of key equality, such as a `SortedMap` whose comparator is not consistent with `equals`.\n\nThe `standard` methods and the collection views they return are not guaranteed to be thread-safe, even when all of the methods that they depend on are thread-safe.\n\n\n[decorator pattern]: http://en.wikipedia.org/wiki/Decorator_pattern"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ForwardingObject\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.azure.cosmos.implementation.guava25.collect.ForwardingObject.delegate()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingObject.toString()"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class ForwardingMap<K,V> extends ForwardingObject implements Map<K,V>"
constructors:
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.ForwardingMap()"
methods:
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.clear()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.containsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.containsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.delegate()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.entrySet()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.equals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.get(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.hashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.isEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.keySet()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.put(K,V)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.putAll(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.remove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.size()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardClear()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardContainsKey(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardContainsValue(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardEquals(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardHashCode()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardIsEmpty()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardPutAll(java.util.Map<? extends K,? extends V>)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardRemove(java.lang.Object)"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.standardToString()"
- "com.azure.cosmos.implementation.guava25.collect.ForwardingMap.values()"
type: "class"
typeParameters:
- name: "K"
- name: "V"
implements:
- "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
