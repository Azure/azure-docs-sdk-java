### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.JsonDeserializer
  id: JsonDeserializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind
  children:
  - com.fasterxml.jackson.databind.JsonDeserializer.JsonDeserializer()
  - com.fasterxml.jackson.databind.JsonDeserializer.None
  - com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  - com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  - com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
  - com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
  - com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
  - com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
  - com.fasterxml.jackson.databind.JsonDeserializer.handledType()
  - com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
  - com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  - com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  - com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  langs:
  - java
  name: JsonDeserializer<T>
  nameWithType: JsonDeserializer<T>
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>
  type: Class
  package: com.fasterxml.jackson.databind
  summary: >-
    Abstract class that defines API used by <xref uid="com.fasterxml.jackson.databind.ObjectMapper" data-throw-if-not-resolved="false">ObjectMapper</xref> (and other chained <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref>s too) to deserialize Objects of arbitrary types from JSON, using provided <xref uid="com.fasterxml.jackson.core.JsonParser" data-throw-if-not-resolved="false">JsonParser</xref>.


    Custom deserializers should usually not directly extend this class, but instead extend <xref uid="com.fasterxml.jackson.databind.deser.std.StdDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.std.StdDeserializer</xref> (or its subtypes like <xref uid="com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer</xref>).


    If deserializer is an aggregate one -- meaning it delegates handling of some of its contents by using other deserializer(s) -- it typically also needs to implement <xref uid="com.fasterxml.jackson.databind.deser.ResolvableDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ResolvableDeserializer</xref>, which can locate dependant deserializers. This is important to allow dynamic overrides of deserializers; separate call interface is needed to separate resolution of dependant deserializers (which may have cyclic link back to deserializer itself, directly or indirectly).


    In addition, to support per-property annotations (to configure aspects of deserialization on per-property basis), deserializers may want to implement <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ContextualDeserializer</xref>, which allows specialization of deserializers: call to <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer.createContextual" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual</xref> is passed information on property, and can create a newly configured deserializer for handling that particular property.


    If both <xref uid="com.fasterxml.jackson.databind.deser.ResolvableDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ResolvableDeserializer</xref> and <xref uid="com.fasterxml.jackson.databind.deser.ContextualDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ContextualDeserializer</xref> are implemented, resolution of deserializers occurs before contextualization.
  syntax:
    content: public abstract class JsonDeserializer<T> implements NullValueProvider
    typeParameters:
    - id: T
  inheritance:
  - java.lang.Object
  implements:
  - com.fasterxml.jackson.databind.deser.NullValueProvider
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.JsonDeserializer.JsonDeserializer()
  id: JsonDeserializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: JsonDeserializer()
  nameWithType: JsonDeserializer<T>.JsonDeserializer()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.JsonDeserializer()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.JsonDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind
  syntax:
    content: public JsonDeserializer()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: deserialize(JsonParser p, DeserializationContext ctxt)
  nameWithType: JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.deserialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles. Returned instance is to be constructed by method itself.


    Pre-condition for this method is that the parser points to the first event that is part of value to deserializer (and which is never JSON 'null' literal, more on this below): for simple types it may be the only value; and for structured types the Object start marker or a FIELD\_NAME.


    The two possible input conditions for structured types result from polymorphism via fields. In the ordinary case, Jackson calls this method when it has encountered an OBJECT\_START, and the method implementation must advance to the next token to see the first field name. If the application configures polymorphism via a field, then the object looks like the following.


    ```java

    {
              "@class": "class name",
              ...
          }
    ```


    Jackson consumes the two tokens (the @class field name and its value) in order to learn the class and select the deserializer. Thus, the stream is pointing to the FIELD\_NAME for the first field after the @class. Thus, if you want your method to work correctly both with and without polymorphism, you must begin your method with:


    ```java

    if (p.currentToken() == JsonToken.START_OBJECT) {
             p.nextToken();
           }
    ```


    This results in the stream pointing to the field name, so that the two conditions align.


    Post-condition is that the parser will point to the last event that is part of deserialized value (or in case deserialization fails, event that was not recognized or usable, which may be the same event as the one it pointed to upon call).


    Note that this method is never called for JSON null literal, and thus deserializers need (and should) not check for it.
  syntax:
    content: public abstract T deserialize(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
      description: Parsed used for reading JSON content
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
      description: >-
        Context that can be used to access information about
           this deserialization activity.
    return:
      type: T
      description: Deserialized value
  exceptions:
  - type: java.io.IOException
  - type: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  id: deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)
  nameWithType: JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.deserialize*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Alternate deserialization method (compared to the most commonly used, <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)" data-throw-if-not-resolved="false">#deserialize(JsonParser, DeserializationContext)</xref>), which takes in initialized value instance, to be configured and/or populated by deserializer. Method is not necessarily used (or supported) by all types (it will not work for immutable types, for obvious reasons): most commonly it is used for Collections and Maps. It may be used both with "updating readers" (for POJOs) and when Collections and Maps use "getter as setter".


    Default implementation just throws <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>, to indicate that types that do not explicitly add support do not necessarily support update-existing-value operation (esp. immutable types)
  syntax:
    content: public T deserialize(JsonParser p, DeserializationContext ctxt, T intoValue)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: intoValue
      type: T
    return:
      type: T
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  id: deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  nameWithType: JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype. This can be due to annotation on type (or its supertype), or due to global settings without annotations.


    Default implementation may work for some types, but ideally subclasses should not rely on current default implementation. Implementation is mostly provided to avoid compilation errors with older code.
  syntax:
    content: public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: typeDeserializer
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
      description: Deserializer to use for handling type information
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  id: deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)
  nameWithType: JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method similar to <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)" data-throw-if-not-resolved="false">#deserializeWithType(JsonParser,DeserializationContext,TypeDeserializer)</xref> but called when merging value. Considered "bad merge" by default implementation, but if <xref uid="com.fasterxml.jackson.databind.MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE" data-throw-if-not-resolved="false">MapperFeature#IGNORE_MERGE_FOR_UNMERGEABLE</xref> is enabled will simple delegate to <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)" data-throw-if-not-resolved="false">#deserializeWithType(JsonParser, DeserializationContext, TypeDeserializer)</xref>.
  syntax:
    content: public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer, T intoValue)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: typeDeserializer
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
    - id: intoValue
      type: T
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)
  id: findBackReference(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: findBackReference(String refName)
  nameWithType: JsonDeserializer<T>.findBackReference(String refName)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.findBackReference(String refName)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method needed by <xref uid="com.fasterxml.jackson.databind.deser.BeanDeserializerFactory" data-throw-if-not-resolved="false">BeanDeserializerFactory</xref> to properly link managed- and back-reference pairs.
  syntax:
    content: public SettableBeanProperty findBackReference(String refName)
    parameters:
    - id: refName
      type: java.lang.String
    return:
      type: com.fasterxml.jackson.databind.deser.SettableBeanProperty
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()
  id: getDelegatee()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getDelegatee()
  nameWithType: JsonDeserializer<T>.getDelegatee()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getDelegatee()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Accessor that can be used to determine if this deserializer uses another deserializer for actual deserialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further deserializers); otherwise will return null.
  syntax:
    content: public JsonDeserializer<?> getDelegatee()
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
      description: >-
        Deserializer this deserializer delegates calls to, if null;
           null otherwise.
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()
  id: getEmptyAccessPattern()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getEmptyAccessPattern()
  nameWithType: JsonDeserializer<T>.getEmptyAccessPattern()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getEmptyAccessPattern()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: This method may be called in conjunction with calls to <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)" data-throw-if-not-resolved="false">#getEmptyValue(DeserializationContext)</xref>, to check whether it needs to be called just once (static values), or each time empty value is needed.
  syntax:
    content: public AccessPattern getEmptyAccessPattern()
    return:
      type: com.fasterxml.jackson.databind.util.AccessPattern
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()
  id: getEmptyValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getEmptyValue()
  nameWithType: JsonDeserializer<T>.getEmptyValue()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getEmptyValue()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public Object getEmptyValue()
    return:
      type: java.lang.Object
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  id: getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getEmptyValue(DeserializationContext ctxt)
  nameWithType: JsonDeserializer<T>.getEmptyValue(DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getEmptyValue(DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to determine value to be used for "empty" values (most commonly when deserializing from empty JSON Strings). Usually this is same as <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.getNullValue" data-throw-if-not-resolved="false">#getNullValue</xref> (which in turn is usually simply Java null), but it can be overridden for specific types. Or, if type should never be converted from empty String, method can also throw an exception.


    This method may be called once, or multiple times, depending on what <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()" data-throw-if-not-resolved="false">#getEmptyAccessPattern()</xref> returns.


    Default implementation simply calls <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.getNullValue" data-throw-if-not-resolved="false">#getNullValue</xref> and returns value.
  syntax:
    content: public Object getEmptyValue(DeserializationContext ctxt)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()
  id: getKnownPropertyNames()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getKnownPropertyNames()
  nameWithType: JsonDeserializer<T>.getKnownPropertyNames()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getKnownPropertyNames()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that will either return null to indicate that type being deserializers has no concept of properties; or a collection of identifiers for which `toString` will give external property name. This is only to be used for error reporting and diagnostics purposes (most commonly, to accompany "unknown property" exception).
  syntax:
    content: public Collection<Object> getKnownPropertyNames()
    return:
      type: java.util.Collection<java.lang.Object>
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()
  id: getNullAccessPattern()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getNullAccessPattern()
  nameWithType: JsonDeserializer<T>.getNullAccessPattern()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getNullAccessPattern()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    This method may be called in conjunction with calls to <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)" data-throw-if-not-resolved="false">#getNullValue(DeserializationContext)</xref>, to check whether it needs to be called just once (static values), or each time empty value is needed.


    Default implementation indicates that "null value" to use for input null is simply Java \`null\` for all deserializers, unless overridden by sub-classes. This information may be used as optimization.
  syntax:
    content: public AccessPattern getNullAccessPattern()
    return:
      type: com.fasterxml.jackson.databind.util.AccessPattern
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()
  id: getNullValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getNullValue()
  nameWithType: JsonDeserializer<T>.getNullValue()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getNullValue()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue*
  type: Method
  package: com.fasterxml.jackson.databind
  syntax:
    content: public T getNullValue()
    return:
      type: T
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  id: getNullValue(com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getNullValue(DeserializationContext ctxt)
  nameWithType: JsonDeserializer<T>.getNullValue(DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getNullValue(DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that can be called to determine value to be used for representing null values (values deserialized when JSON token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NULL" data-throw-if-not-resolved="false">JsonToken#VALUE_NULL</xref>). Usually this is simply Java null, but for some types (especially primitives) it may be necessary to use non-null values.


    This method may be called once, or multiple times, depending on what <xref uid="com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()" data-throw-if-not-resolved="false">#getNullAccessPattern()</xref> returns.


    Default implementation simply returns null.
  syntax:
    content: public T getNullValue(DeserializationContext ctxt)
    parameters:
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: T
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()
  id: getObjectIdReader()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: getObjectIdReader()
  nameWithType: JsonDeserializer<T>.getObjectIdReader()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getObjectIdReader()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Accessor that can be used to check whether this deserializer is expecting to possibly get an Object Identifier value instead of full value serialization, and if so, should be able to resolve it to actual Object instance to return as deserialized value.


    Default implementation returns null, as support cannot be implemented generically. Some standard deserializers (most notably <xref uid="com.fasterxml.jackson.databind.deser.BeanDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.BeanDeserializer</xref>) do implement this feature, and may return reader instance, depending on exact configuration of instance (which is based on type, and referring property).
  syntax:
    content: public ObjectIdReader getObjectIdReader()
    return:
      type: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
      description: >-
        ObjectIdReader used for resolving possible Object Identifier
            value, instead of full value serialization, if deserializer can do that;
            null if no Object Id is expected.
- uid: com.fasterxml.jackson.databind.JsonDeserializer.handledType()
  id: handledType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: handledType()
  nameWithType: JsonDeserializer<T>.handledType()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.handledType()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.handledType*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method for accessing type of values this deserializer produces. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type).


    Default implementation will return null, which means almost same same as returning `Object.class` would; that is, that nothing is known about handled type.
  syntax:
    content: public Class<?> handledType()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.JsonDeserializer.isCachable()
  id: isCachable()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: isCachable()
  nameWithType: JsonDeserializer<T>.isCachable()
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.isCachable()
  overload: com.fasterxml.jackson.databind.JsonDeserializer.isCachable*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method called to see if deserializer instance is cachable and usable for other properties of same type (type for which instance was created).


    Note that cached instances are still resolved on per-property basis, if instance implements <xref uid="com.fasterxml.jackson.databind.deser.ResolvableDeserializer" data-throw-if-not-resolved="false">com.fasterxml.jackson.databind.deser.ResolvableDeserializer</xref>: cached instance is just as the base. This means that in most cases it is safe to cache instances; however, it only makes sense to cache instances if instantiation is expensive, or if instances are heavy-weight.


    Default implementation returns false, to indicate that no caching is done.
  syntax:
    content: public boolean isCachable()
    return:
      type: boolean
- uid: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  id: replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: replaceDelegatee(JsonDeserializer<?> delegatee)
  nameWithType: JsonDeserializer<T>.replaceDelegatee(JsonDeserializer<?> delegatee)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.replaceDelegatee(JsonDeserializer<?> delegatee)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: Method that can be called to try to replace deserializer this deserializer delegates calls to. If not supported (either this deserializer does not delegate anything; or it does not want any changes), should either throw <xref uid="" data-throw-if-not-resolved="false">UnsupportedOperationException</xref> (if operation does not make sense or is not allowed); or return this deserializer as is.
  syntax:
    content: public JsonDeserializer<?> replaceDelegatee(JsonDeserializer<?> delegatee)
    parameters:
    - id: delegatee
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<?>
- uid: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  id: supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: supportsUpdate(DeserializationConfig config)
  nameWithType: JsonDeserializer<T>.supportsUpdate(DeserializationConfig config)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.supportsUpdate(DeserializationConfig config)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Introspection method that may be called to see whether deserializer supports update of an existing value (aka "merging") or not. Return value should either be <xref uid="java.lang.Boolean.FALSE" data-throw-if-not-resolved="false">Boolean#FALSE</xref> if update is not supported at all (immutable values); <xref uid="java.lang.Boolean.TRUE" data-throw-if-not-resolved="false">Boolean#TRUE</xref> if update should usually work (regular POJOs, for example), or `null` if this is either not known, or may sometimes work.


    Information gathered is typically used to either prevent merging update for property (either by skipping, if based on global defaults; or by exception during deserialization construction if explicit attempt made) if <xref uid="java.lang.Boolean.FALSE" data-throw-if-not-resolved="false">Boolean#FALSE</xref> returned, or inclusion if <xref uid="java.lang.Boolean.TRUE" data-throw-if-not-resolved="false">Boolean#TRUE</xref> is specified. If "unknown" case (`null` returned) behavior is to exclude property if global defaults used; or to allow if explicit per-type or property merging is defined.


    Default implementation returns `null` to allow explicit per-type or per-property attempts.
  syntax:
    content: public Boolean supportsUpdate(DeserializationConfig config)
    parameters:
    - id: config
      type: com.fasterxml.jackson.databind.DeserializationConfig
    return:
      type: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  id: unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.JsonDeserializer
  langs:
  - java
  name: unwrappingDeserializer(NameTransformer unwrapper)
  nameWithType: JsonDeserializer<T>.unwrappingDeserializer(NameTransformer unwrapper)
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.unwrappingDeserializer(NameTransformer unwrapper)
  overload: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer*
  type: Method
  package: com.fasterxml.jackson.databind
  summary: >-
    Method that will return deserializer instance that is able to handle "unwrapped" value instances If no unwrapped instance can be constructed, will simply return this object as-is.


    Default implementation just returns 'this' indicating that no unwrapped variant exists
  syntax:
    content: public JsonDeserializer<T> unwrappingDeserializer(NameTransformer unwrapper)
    parameters:
    - id: unwrapper
      type: com.fasterxml.jackson.databind.util.NameTransformer
    return:
      type: com.fasterxml.jackson.databind.JsonDeserializer<T>
references:
- uid: com.fasterxml.jackson.databind.JsonDeserializer.JsonDeserializer*
  name: JsonDeserializer
  nameWithType: JsonDeserializer<T>.JsonDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.JsonDeserializer
  package: com.fasterxml.jackson.databind
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonProcessingException
  name: JsonProcessingException
  nameWithType: JsonProcessingException
  fullName: com.fasterxml.jackson.core.JsonProcessingException
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: T
  spec.java:
  - uid: T
    name: T
    fullName: T
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserialize*
  name: deserialize
  nameWithType: JsonDeserializer<T>.deserialize
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.deserialize
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  name: TypeDeserializer
  nameWithType: TypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType*
  name: deserializeWithType
  nameWithType: JsonDeserializer<T>.deserializeWithType
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.deserializeWithType
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.util.NameTransformer
  name: NameTransformer
  nameWithType: NameTransformer
  fullName: com.fasterxml.jackson.databind.util.NameTransformer
- uid: com.fasterxml.jackson.databind.JsonDeserializer<T>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer*
  name: unwrappingDeserializer
  nameWithType: JsonDeserializer<T>.unwrappingDeserializer
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.unwrappingDeserializer
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer<?>
  spec.java:
  - uid: com.fasterxml.jackson.databind.JsonDeserializer
    name: JsonDeserializer
    fullName: com.fasterxml.jackson.databind.JsonDeserializer
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee*
  name: replaceDelegatee
  nameWithType: JsonDeserializer<T>.replaceDelegatee
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.replaceDelegatee
  package: com.fasterxml.jackson.databind
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonDeserializer.handledType*
  name: handledType
  nameWithType: JsonDeserializer<T>.handledType
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.handledType
  package: com.fasterxml.jackson.databind
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.databind.JsonDeserializer.isCachable*
  name: isCachable
  nameWithType: JsonDeserializer<T>.isCachable
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.isCachable
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee*
  name: getDelegatee
  nameWithType: JsonDeserializer<T>.getDelegatee
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getDelegatee
  package: com.fasterxml.jackson.databind
- uid: java.util.Collection<java.lang.Object>
  spec.java:
  - uid: java.util.Collection
    name: Collection
    fullName: java.util.Collection
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames*
  name: getKnownPropertyNames
  nameWithType: JsonDeserializer<T>.getKnownPropertyNames
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getKnownPropertyNames
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullValue*
  name: getNullValue
  nameWithType: JsonDeserializer<T>.getNullValue
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getNullValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.util.AccessPattern
  name: AccessPattern
  nameWithType: AccessPattern
  fullName: com.fasterxml.jackson.databind.util.AccessPattern
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern*
  name: getNullAccessPattern
  nameWithType: JsonDeserializer<T>.getNullAccessPattern
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getNullAccessPattern
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern*
  name: getEmptyAccessPattern
  nameWithType: JsonDeserializer<T>.getEmptyAccessPattern
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getEmptyAccessPattern
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue*
  name: getEmptyValue
  nameWithType: JsonDeserializer<T>.getEmptyValue
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getEmptyValue
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
  name: ObjectIdReader
  nameWithType: ObjectIdReader
  fullName: com.fasterxml.jackson.databind.deser.impl.ObjectIdReader
- uid: com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader*
  name: getObjectIdReader
  nameWithType: JsonDeserializer<T>.getObjectIdReader
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.getObjectIdReader
  package: com.fasterxml.jackson.databind
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.deser.SettableBeanProperty
  name: SettableBeanProperty
  nameWithType: SettableBeanProperty
  fullName: com.fasterxml.jackson.databind.deser.SettableBeanProperty
- uid: com.fasterxml.jackson.databind.JsonDeserializer.findBackReference*
  name: findBackReference
  nameWithType: JsonDeserializer<T>.findBackReference
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.findBackReference
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.DeserializationConfig
  name: DeserializationConfig
  nameWithType: DeserializationConfig
  fullName: com.fasterxml.jackson.databind.DeserializationConfig
- uid: java.lang.Boolean
  spec.java:
  - uid: java.lang.Boolean
    name: Boolean
    fullName: java.lang.Boolean
- uid: com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate*
  name: supportsUpdate
  nameWithType: JsonDeserializer<T>.supportsUpdate
  fullName: com.fasterxml.jackson.databind.JsonDeserializer<T>.supportsUpdate
  package: com.fasterxml.jackson.databind
- uid: com.fasterxml.jackson.databind.deser.NullValueProvider
  name: NullValueProvider
  nameWithType: NullValueProvider
  fullName: com.fasterxml.jackson.databind.deser.NullValueProvider
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.databind.JsonDeserializer.None
  name: JsonDeserializer.None
  nameWithType: JsonDeserializer.None
  fullName: com.fasterxml.jackson.databind.JsonDeserializer.None
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: java.util.Collection
  name: Collection
  nameWithType: Collection
  fullName: java.util.Collection
