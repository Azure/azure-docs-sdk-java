### YamlMime:JavaType
uid: "com.fasterxml.jackson.databind.JsonDeserializer"
fullName: "com.fasterxml.jackson.databind.JsonDeserializer<T>"
name: "JsonDeserializer<T>"
nameWithType: "JsonDeserializer<T>"
summary: "Abstract class that defines API used by <xref uid=\"com.fasterxml.jackson.databind.ObjectMapper\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ObjectMapper\"></xref> (and other chained <xref uid=\"com.fasterxml.jackson.databind.JsonDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonDeserializer\"></xref>s too) to deserialize Objects of arbitrary types from JSON, using provided <xref uid=\"com.fasterxml.jackson.core.JsonParser\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser\"></xref>.\n\nCustom deserializers should usually not directly extend this class, but instead extend <xref uid=\"com.fasterxml.jackson.databind.deser.std.StdDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.std.StdDeserializer\"></xref> (or its subtypes like <xref uid=\"com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer\"></xref>).\n\nIf deserializer is an aggregate one -- meaning it delegates handling of some of its contents by using other deserializer(s) -- it typically also needs to implement <xref uid=\"com.fasterxml.jackson.databind.deser.ResolvableDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.ResolvableDeserializer\"></xref>, which can locate dependant deserializers. This is important to allow dynamic overrides of deserializers; separate call interface is needed to separate resolution of dependant deserializers (which may have cyclic link back to deserializer itself, directly or indirectly).\n\nIn addition, to support per-property annotations (to configure aspects of deserialization on per-property basis), deserializers may want to implement <xref uid=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer\"></xref>, which allows specialization of deserializers: call to <xref uid=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer.createContextual\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer#createContextual\"></xref> is passed information on property, and can create a newly configured deserializer for handling that particular property.\n\nIf both <xref uid=\"com.fasterxml.jackson.databind.deser.ResolvableDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.ResolvableDeserializer\"></xref> and <xref uid=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"com.fasterxml.jackson.databind.deser.ContextualDeserializer\"></xref> are implemented, resolution of deserializers occurs before contextualization."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class JsonDeserializer<T> implements NullValueProvider"
constructors:
- "com.fasterxml.jackson.databind.JsonDeserializer.JsonDeserializer()"
methods:
- "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)"
- "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,T)"
- "com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer)"
- "com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.jsontype.TypeDeserializer,T)"
- "com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)"
- "com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()"
- "com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()"
- "com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()"
- "com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)"
- "com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()"
- "com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()"
- "com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()"
- "com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)"
- "com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()"
- "com.fasterxml.jackson.databind.JsonDeserializer.handledType()"
- "com.fasterxml.jackson.databind.JsonDeserializer.isCachable()"
- "com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer<?>)"
- "com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)"
- "com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)"
type: "class"
typeParameters:
- name: "T"
implements:
- "<xref href=\"com.fasterxml.jackson.databind.deser.NullValueProvider?alt=com.fasterxml.jackson.databind.deser.NullValueProvider&text=NullValueProvider\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.fasterxml.jackson.databind"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
