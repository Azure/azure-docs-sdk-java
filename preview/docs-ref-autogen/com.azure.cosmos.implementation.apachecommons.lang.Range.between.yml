### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.apachecommons.lang.Range.between*"
fullName: "com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>between"
name: "<T>between"
nameWithType: "Range<T>.<T>between"
members:
- uid: "com.azure.cosmos.implementation.apachecommons.lang.Range.<T>between(T,T)"
  fullName: "com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>between(T fromInclusive, T toInclusive)"
  name: "<T>between(T fromInclusive, T toInclusive)"
  nameWithType: "Range<T>.<T>between(T fromInclusive, T toInclusive)"
  summary: "Obtains a range with the specified minimum and maximum values (both inclusive).\n\nThe range uses the natural ordering of the elements to determine where values lie in the range.\n\nThe arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values."
  parameters:
  - description: "the first value that defines the edge of the range, inclusive"
    name: "fromInclusive"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the second value that defines the edge of the range, inclusive"
    name: "toInclusive"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Range<T> <T>between(T fromInclusive, T toInclusive)"
  returns:
    description: "the range object, not null"
    type: "<xref href=\"com.azure.cosmos.implementation.apachecommons.lang.Range?alt=com.azure.cosmos.implementation.apachecommons.lang.Range&text=Range\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.apachecommons.lang.Range.<T>between(T,T,java.util.Comparator<T>)"
  fullName: "com.azure.cosmos.implementation.apachecommons.lang.Range<T>.<T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)"
  name: "<T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)"
  nameWithType: "Range<T>.<T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)"
  summary: "Obtains a range with the specified minimum and maximum values (both inclusive).\n\nThe range uses the specified `Comparator` to determine where values lie in the range.\n\nThe arguments may be passed in the order (min,max) or (max,min). The getMinimum and getMaximum methods will return the correct values."
  parameters:
  - description: "the first value that defines the edge of the range, inclusive"
    name: "fromInclusive"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the second value that defines the edge of the range, inclusive"
    name: "toInclusive"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />"
  - description: "the comparator to be used, null for natural ordering"
    name: "comparator"
    type: "<xref href=\"java.util.Comparator?alt=java.util.Comparator&text=Comparator\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Range<T> <T>between(T fromInclusive, T toInclusive, Comparator<T> comparator)"
  returns:
    description: "the range object, not null"
    type: "<xref href=\"com.azure.cosmos.implementation.apachecommons.lang.Range?alt=com.azure.cosmos.implementation.apachecommons.lang.Range&text=Range\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.apachecommons.lang"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
