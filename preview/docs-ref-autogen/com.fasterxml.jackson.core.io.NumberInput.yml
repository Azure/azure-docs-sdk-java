### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.io.NumberInput
  id: NumberInput
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io
  children:
  - com.fasterxml.jackson.core.io.NumberInput.NASTY_SMALL_DOUBLE
  - com.fasterxml.jackson.core.io.NumberInput.NumberInput()
  - com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)
  - com.fasterxml.jackson.core.io.NumberInput.inLongRange(java.lang.String,boolean)
  - com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(java.lang.String,double)
  - com.fasterxml.jackson.core.io.NumberInput.parseAsInt(java.lang.String,int)
  - com.fasterxml.jackson.core.io.NumberInput.parseAsLong(java.lang.String,long)
  - com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[])
  - com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)
  - com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(java.lang.String)
  - com.fasterxml.jackson.core.io.NumberInput.parseDouble(java.lang.String)
  - com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int)
  - com.fasterxml.jackson.core.io.NumberInput.parseInt(java.lang.String)
  - com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int)
  - com.fasterxml.jackson.core.io.NumberInput.parseLong(java.lang.String)
  langs:
  - java
  name: NumberInput
  nameWithType: NumberInput
  fullName: com.fasterxml.jackson.core.io.NumberInput
  type: Class
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public final class NumberInput
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.io.NumberInput.NASTY_SMALL_DOUBLE
  id: NASTY_SMALL_DOUBLE
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: NASTY_SMALL_DOUBLE
  nameWithType: NumberInput.NASTY_SMALL_DOUBLE
  fullName: com.fasterxml.jackson.core.io.NumberInput.NASTY_SMALL_DOUBLE
  type: Field
  package: com.fasterxml.jackson.core.io
  summary: Textual representation of a double constant that can cause nasty problems with JDK (see http://www.exploringbinary.com/java-hangs-when-converting-2-2250738585072012e-308).
  syntax:
    content: public static final String NASTY_SMALL_DOUBLE
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.core.io.NumberInput.NumberInput()
  id: NumberInput()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: NumberInput()
  nameWithType: NumberInput.NumberInput()
  fullName: com.fasterxml.jackson.core.io.NumberInput.NumberInput()
  overload: com.fasterxml.jackson.core.io.NumberInput.NumberInput*
  type: Constructor
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public NumberInput()
- uid: com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)
  id: inLongRange(char[],int,int,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: inLongRange(char[] ch, int off, int len, boolean negative)
  nameWithType: NumberInput.inLongRange(char[] ch, int off, int len, boolean negative)
  fullName: com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[] ch, int off, int len, boolean negative)
  overload: com.fasterxml.jackson.core.io.NumberInput.inLongRange*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: Helper method for determining if given String representation of an integral number would fit in 64-bit Java long or not. Note that input String must NOT contain leading minus sign (even if 'negative' is set to true).
  syntax:
    content: public static boolean inLongRange(char[] ch, int off, int len, boolean negative)
    parameters:
    - id: ch
      type: char[]
    - id: off
      type: int
    - id: len
      type: int
    - id: negative
      type: boolean
      description: >-
        Whether original number had a minus sign (which is
            NOT passed to this method) or not
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.io.NumberInput.inLongRange(java.lang.String,boolean)
  id: inLongRange(java.lang.String,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: inLongRange(String s, boolean negative)
  nameWithType: NumberInput.inLongRange(String s, boolean negative)
  fullName: com.fasterxml.jackson.core.io.NumberInput.inLongRange(String s, boolean negative)
  overload: com.fasterxml.jackson.core.io.NumberInput.inLongRange*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: Similar to <xref uid="com.fasterxml.jackson.core.io.NumberInput.inLongRange(char[],int,int,boolean)" data-throw-if-not-resolved="false">#inLongRange(char[],int,int,boolean)</xref>, but with String argument
  syntax:
    content: public static boolean inLongRange(String s, boolean negative)
    parameters:
    - id: s
      type: java.lang.String
    - id: negative
      type: boolean
      description: >-
        Whether original number had a minus sign (which is
            NOT passed to this method) or not
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(java.lang.String,double)
  id: parseAsDouble(java.lang.String,double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseAsDouble(String s, double def)
  nameWithType: NumberInput.parseAsDouble(String s, double def)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseAsDouble(String s, double def)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseAsDouble*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static double parseAsDouble(String s, double def)
    parameters:
    - id: s
      type: java.lang.String
    - id: def
      type: double
    return:
      type: double
- uid: com.fasterxml.jackson.core.io.NumberInput.parseAsInt(java.lang.String,int)
  id: parseAsInt(java.lang.String,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseAsInt(String s, int def)
  nameWithType: NumberInput.parseAsInt(String s, int def)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseAsInt(String s, int def)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseAsInt*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static int parseAsInt(String s, int def)
    parameters:
    - id: s
      type: java.lang.String
    - id: def
      type: int
    return:
      type: int
- uid: com.fasterxml.jackson.core.io.NumberInput.parseAsLong(java.lang.String,long)
  id: parseAsLong(java.lang.String,long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseAsLong(String s, long def)
  nameWithType: NumberInput.parseAsLong(String s, long def)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseAsLong(String s, long def)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseAsLong*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static long parseAsLong(String s, long def)
    parameters:
    - id: s
      type: java.lang.String
    - id: def
      type: long
    return:
      type: long
- uid: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[])
  id: parseBigDecimal(char[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseBigDecimal(char[] b)
  nameWithType: NumberInput.parseBigDecimal(char[] b)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[] b)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static BigDecimal parseBigDecimal(char[] b)
    parameters:
    - id: b
      type: char[]
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.lang.NumberFormatException
- uid: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[],int,int)
  id: parseBigDecimal(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseBigDecimal(char[] b, int off, int len)
  nameWithType: NumberInput.parseBigDecimal(char[] b, int off, int len)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(char[] b, int off, int len)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static BigDecimal parseBigDecimal(char[] b, int off, int len)
    parameters:
    - id: b
      type: char[]
    - id: off
      type: int
    - id: len
      type: int
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.lang.NumberFormatException
- uid: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(java.lang.String)
  id: parseBigDecimal(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseBigDecimal(String s)
  nameWithType: NumberInput.parseBigDecimal(String s)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal(String s)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static BigDecimal parseBigDecimal(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.lang.NumberFormatException
- uid: com.fasterxml.jackson.core.io.NumberInput.parseDouble(java.lang.String)
  id: parseDouble(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseDouble(String s)
  nameWithType: NumberInput.parseDouble(String s)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseDouble(String s)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseDouble*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static double parseDouble(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: double
  exceptions:
  - type: java.lang.NumberFormatException
- uid: com.fasterxml.jackson.core.io.NumberInput.parseInt(char[],int,int)
  id: parseInt(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseInt(char[] ch, int off, int len)
  nameWithType: NumberInput.parseInt(char[] ch, int off, int len)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseInt(char[] ch, int off, int len)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseInt*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: >-
    Fast method for parsing integers that are known to fit into regular 32-bit signed int type. This means that length is between 1 and 9 digits (inclusive)


    Note: public to let unit tests call it
  syntax:
    content: public static int parseInt(char[] ch, int off, int len)
    parameters:
    - id: ch
      type: char[]
    - id: off
      type: int
    - id: len
      type: int
    return:
      type: int
- uid: com.fasterxml.jackson.core.io.NumberInput.parseInt(java.lang.String)
  id: parseInt(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseInt(String s)
  nameWithType: NumberInput.parseInt(String s)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseInt(String s)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseInt*
  type: Method
  package: com.fasterxml.jackson.core.io
  summary: Helper method to (more) efficiently parse integer numbers from String values.
  syntax:
    content: public static int parseInt(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: int
- uid: com.fasterxml.jackson.core.io.NumberInput.parseLong(char[],int,int)
  id: parseLong(char[],int,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseLong(char[] ch, int off, int len)
  nameWithType: NumberInput.parseLong(char[] ch, int off, int len)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseLong(char[] ch, int off, int len)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseLong*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static long parseLong(char[] ch, int off, int len)
    parameters:
    - id: ch
      type: char[]
    - id: off
      type: int
    - id: len
      type: int
    return:
      type: long
- uid: com.fasterxml.jackson.core.io.NumberInput.parseLong(java.lang.String)
  id: parseLong(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.io.NumberInput
  langs:
  - java
  name: parseLong(String s)
  nameWithType: NumberInput.parseLong(String s)
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseLong(String s)
  overload: com.fasterxml.jackson.core.io.NumberInput.parseLong*
  type: Method
  package: com.fasterxml.jackson.core.io
  syntax:
    content: public static long parseLong(String s)
    parameters:
    - id: s
      type: java.lang.String
    return:
      type: long
references:
- uid: com.fasterxml.jackson.core.io.NumberInput.NumberInput*
  name: NumberInput
  nameWithType: NumberInput.NumberInput
  fullName: com.fasterxml.jackson.core.io.NumberInput.NumberInput
  package: com.fasterxml.jackson.core.io
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.io.NumberInput.parseInt*
  name: parseInt
  nameWithType: NumberInput.parseInt
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseInt
  package: com.fasterxml.jackson.core.io
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.io.NumberInput.parseLong*
  name: parseLong
  nameWithType: NumberInput.parseLong
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseLong
  package: com.fasterxml.jackson.core.io
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.io.NumberInput.inLongRange*
  name: inLongRange
  nameWithType: NumberInput.inLongRange
  fullName: com.fasterxml.jackson.core.io.NumberInput.inLongRange
  package: com.fasterxml.jackson.core.io
- uid: com.fasterxml.jackson.core.io.NumberInput.parseAsInt*
  name: parseAsInt
  nameWithType: NumberInput.parseAsInt
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseAsInt
  package: com.fasterxml.jackson.core.io
- uid: com.fasterxml.jackson.core.io.NumberInput.parseAsLong*
  name: parseAsLong
  nameWithType: NumberInput.parseAsLong
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseAsLong
  package: com.fasterxml.jackson.core.io
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.core.io.NumberInput.parseAsDouble*
  name: parseAsDouble
  nameWithType: NumberInput.parseAsDouble
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseAsDouble
  package: com.fasterxml.jackson.core.io
- uid: java.lang.NumberFormatException
  spec.java:
  - uid: java.lang.NumberFormatException
    name: NumberFormatException
    fullName: java.lang.NumberFormatException
- uid: com.fasterxml.jackson.core.io.NumberInput.parseDouble*
  name: parseDouble
  nameWithType: NumberInput.parseDouble
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseDouble
  package: com.fasterxml.jackson.core.io
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal*
  name: parseBigDecimal
  nameWithType: NumberInput.parseBigDecimal
  fullName: com.fasterxml.jackson.core.io.NumberInput.parseBigDecimal
  package: com.fasterxml.jackson.core.io
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
