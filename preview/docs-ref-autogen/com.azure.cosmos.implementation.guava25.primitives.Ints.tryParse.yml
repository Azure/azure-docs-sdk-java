### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse*"
fullName: "com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse"
name: "tryParse"
nameWithType: "Ints.tryParse"
members:
- uid: "com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(java.lang.String)"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(String string)"
  name: "tryParse(String string)"
  nameWithType: "Ints.tryParse(String string)"
  summary: "Parses the specified string as a signed decimal integer value. The ASCII character `'-'` (`'\\u002D'`) is recognized as the minus sign.\n\nUnlike <xref uid=\"java.lang.Integer.parseInt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#parseInt(String)\"></xref>, this method returns `null` instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns `null` if non-ASCII digits are present in the string.\n\nNote that strings prefixed with ASCII `'+'` are rejected, even under JDK 7, despite the change to <xref uid=\"java.lang.Integer.parseInt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#parseInt(String)\"></xref> for that version."
  parameters:
  - description: "the string representation of an integer value"
    name: "string"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Integer tryParse(String string)"
  returns:
    description: "the integer value represented by <code>string</code>, or <code>null</code> if <code>string</code> has\n     a length of zero or cannot be parsed as an integer value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(java.lang.String,int)"
  fullName: "com.azure.cosmos.implementation.guava25.primitives.Ints.tryParse(String string, int radix)"
  name: "tryParse(String string, int radix)"
  nameWithType: "Ints.tryParse(String string, int radix)"
  summary: "Parses the specified string as a signed integer value using the specified radix. The ASCII character `'-'` (`'\\u002D'`) is recognized as the minus sign.\n\nUnlike <xref uid=\"java.lang.Integer.parseInt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#parseInt(String, int)\"></xref>, this method returns `null` instead of throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns `null` if non-ASCII digits are present in the string.\n\nNote that strings prefixed with ASCII `'+'` are rejected, even under JDK 7, despite the change to <xref uid=\"java.lang.Integer.parseInt*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Integer#parseInt(String, int)\"></xref> for that version."
  parameters:
  - description: "the string representation of an integer value"
    name: "string"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "the radix to use when parsing"
    name: "radix"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static Integer tryParse(String string, int radix)"
  returns:
    description: "the integer value represented by <code>string</code> using <code>radix</code>, or <code>null</code> if\n     <code>string</code> has a length of zero or cannot be parsed as an integer value"
    type: "<xref href=\"java.lang.Integer?alt=java.lang.Integer&text=Integer\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.primitives"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
