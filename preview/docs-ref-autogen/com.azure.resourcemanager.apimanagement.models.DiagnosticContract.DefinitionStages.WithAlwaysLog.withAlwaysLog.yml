### YamlMime:JavaMember
uid: "com.azure.resourcemanager.apimanagement.models.DiagnosticContract.DefinitionStages.WithAlwaysLog.withAlwaysLog*"
fullName: "com.azure.resourcemanager.apimanagement.models.DiagnosticContract.DefinitionStages.WithAlwaysLog.withAlwaysLog"
name: "withAlwaysLog"
nameWithType: "DiagnosticContract.DefinitionStages.WithAlwaysLog.withAlwaysLog"
members:
- uid: "com.azure.resourcemanager.apimanagement.models.DiagnosticContract.DefinitionStages.WithAlwaysLog.withAlwaysLog(com.azure.resourcemanager.apimanagement.models.AlwaysLog)"
  fullName: "com.azure.resourcemanager.apimanagement.models.DiagnosticContract.DefinitionStages.WithAlwaysLog.withAlwaysLog(AlwaysLog alwaysLog)"
  name: "withAlwaysLog(AlwaysLog alwaysLog)"
  nameWithType: "DiagnosticContract.DefinitionStages.WithAlwaysLog.withAlwaysLog(AlwaysLog alwaysLog)"
  summary: "Specifies the alwaysLog property: Specifies for what type of messages sampling settings should not apply.."
  parameters:
  - description: "Specifies for what type of messages sampling settings should not apply."
    name: "alwaysLog"
    type: "<xref href=\"com.azure.resourcemanager.apimanagement.models.AlwaysLog?alt=com.azure.resourcemanager.apimanagement.models.AlwaysLog&text=AlwaysLog\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract DiagnosticContract.DefinitionStages.WithCreate withAlwaysLog(AlwaysLog alwaysLog)"
  returns:
    description: "the next definition stage."
    type: "<xref href=\"com.azure.resourcemanager.apimanagement.models.DiagnosticContract.DefinitionStages.WithCreate?alt=com.azure.resourcemanager.apimanagement.models.DiagnosticContract.DefinitionStages.WithCreate&text=WithCreate\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.resourcemanager.apimanagement.models"
artifact: com.azure.resourcemanager:azure-resourcemanager-apimanagement:1.0.0-beta.1
