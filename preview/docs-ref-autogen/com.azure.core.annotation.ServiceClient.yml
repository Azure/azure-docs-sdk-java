### YamlMime:JavaType
uid: "com.azure.core.annotation.ServiceClient"
fullName: "com.azure.core.annotation.ServiceClient"
name: "ServiceClient"
nameWithType: "ServiceClient"
summary: "Annotation given to all service client classes."
syntax: "public interface ServiceClient implements Annotation"
methods:
- uid: "com.azure.core.annotation.ServiceClient.builder()"
  fullName: "com.azure.core.annotation.ServiceClient.builder()"
  name: "builder()"
  nameWithType: "ServiceClient.builder()"
  summary: "The builder class that can construct an instance of this class."
  modifiers:
  - "abstract"
  syntax: "public abstract Class<?> builder()"
  desc: "The builder class that can construct an instance of this class. All service clients are instantiated using a builder and this is a required field. Also, builders should be annotated with <xref uid=\"com.azure.core.annotation.ServiceClientBuilder\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceClientBuilder\"></xref>."
  returns:
    description: "the classname of the builder that can create an instance of this class."
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
- uid: "com.azure.core.annotation.ServiceClient.isAsync()"
  fullName: "com.azure.core.annotation.ServiceClient.isAsync()"
  name: "isAsync()"
  nameWithType: "ServiceClient.isAsync()"
  summary: "Represents whether the network IO methods on this client will be performed asynchronously or synchronously (i.<wbr>e."
  modifiers:
  - "abstract"
  syntax: "public abstract boolean isAsync()"
  desc: "Represents whether the network IO methods on this client will be performed asynchronously or synchronously (i.e. blocking)."
  returns:
    description: "<code>true</code> is the Service Client is asynchronous."
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.core.annotation.ServiceClient.serviceInterfaces()"
  fullName: "com.azure.core.annotation.ServiceClient.serviceInterfaces()"
  name: "serviceInterfaces()"
  nameWithType: "ServiceClient.serviceInterfaces()"
  summary: "Optional field to indicate all the services this service client interacts with."
  modifiers:
  - "abstract"
  syntax: "public abstract Class<?>[] serviceInterfaces()"
  desc: "Optional field to indicate all the services this service client interacts with. All classes mentioned in this list should be annotated with <xref uid=\"com.azure.core.annotation.ServiceInterface\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceInterface\"></xref>. Typically, there's one service associated with each client. However, there could be zero to N services associated with a single client."
  returns:
    description: "An array of all services this service client interacts with"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;[]"
type: "interface"
desc: "Annotation given to all service client classes."
implements:
- "<xref href=\"java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.azure.core.annotation"
artifact: com.azure:azure-core:1.22.0-beta.1
