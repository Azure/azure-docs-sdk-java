### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets
  id: Multisets
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>copyHighestCountFirst(com.azure.cosmos.implementation.guava25.collect.Multiset<E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>difference(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>immutableEntry(E,int)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>intersection(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>sum(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>,com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>union(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>,com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset(com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableSortedMultiset(com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.<T,E,M>toMultiset(java.util.function.Function<? super T,E>,java.util.function.ToIntFunction<? super T>,java.util.function.Supplier<M>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.containsOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,java.lang.Iterable<?>)
  - com.azure.cosmos.implementation.guava25.collect.Multisets.retainOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  langs:
  - java
  name: Multisets
  nameWithType: Multisets
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Provides static utility methods for creating and working with <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset" data-throw-if-not-resolved="false">Multiset</xref> instances.


    See the Guava User Guide article on [ `Multisets`][_Multisets].



    [_Multisets]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#multisets
  syntax:
    content: public final class Multisets
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>copyHighestCountFirst(com.azure.cosmos.implementation.guava25.collect.Multiset<E>)
  id: <E>copyHighestCountFirst(com.azure.cosmos.implementation.guava25.collect.Multiset<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>copyHighestCountFirst(Multiset<E> multiset)
  nameWithType: Multisets.<E>copyHighestCountFirst(Multiset<E> multiset)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>copyHighestCountFirst(Multiset<E> multiset)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.copyHighestCountFirst*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a copy of `multiset` as an <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset" data-throw-if-not-resolved="false">ImmutableMultiset</xref> whose iteration order is highest count first, with ties broken by the iteration order of the original multiset.
  syntax:
    content: public static ImmutableMultiset<E> <E>copyHighestCountFirst(Multiset<E> multiset)
    parameters:
    - id: multiset
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>difference(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  id: <E>difference(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>difference(Multiset<E> multiset1, Multiset<?> multiset2)
  nameWithType: Multisets.<E>difference(Multiset<E> multiset1, Multiset<?> multiset2)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>difference(Multiset<E> multiset1, Multiset<?> multiset2)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.difference*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable view of the difference of two multisets. In the returned multiset, the count of each element is the result of the *zero-truncated subtraction* of its count in the second multiset from its count in the first multiset, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of `multiset1`, with repeated occurrences of the same element appearing consecutively.


    Results are undefined if `multiset1` and `multiset2` are based on different equivalence relations (as `HashMultiset` and `TreeMultiset` are).
  syntax:
    content: public static Multiset<E> <E>difference(Multiset<E> multiset1, Multiset<?> multiset2)
    parameters:
    - id: multiset1
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
    - id: multiset2
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  id: <E>filter(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  nameWithType: Multisets.<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.filter*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a view of the elements of `unfiltered` that satisfy a predicate. The returned multiset is a live view of `unfiltered`; changes to one affect the other.


    The resulting multiset's iterators, and those of its `entrySet()` and `elementSet()`, do not support `remove()`. However, all other multiset methods supported by `unfiltered` are supported by the returned multiset. When given an element that doesn't satisfy the predicate, the multiset's `add()` and `addAll()` methods throw an <xref uid="" data-throw-if-not-resolved="false">IllegalArgumentException</xref>. When methods such as `removeAll()` and `clear()` are called on the filtered multiset, only elements that satisfy the filter will be removed from the underlying multiset.


    The returned multiset isn't threadsafe or serializable, even if `unfiltered` is.


    Many of the filtered multiset's methods, such as `size()`, iterate across every element in the underlying multiset and determine which elements satisfy the filter. When a live view is *not* needed, it may be faster to copy the returned multiset and use the copy.


    **Warning:** `predicate` must be *consistent with equals*, as documented at <xref uid="com.azure.cosmos.implementation.guava25.base.Predicate.apply" data-throw-if-not-resolved="false">Predicate#apply</xref>. Do not provide a predicate such as `Predicates.instanceOf(ArrayList.class)`, which is inconsistent with equals. (See <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.&lt;T&gt;filter(java.lang.Iterable&lt;?&gt;,java.lang.Class&lt;T&gt;)" data-throw-if-not-resolved="false">Iterables#filter(Iterable, Class)</xref> for related functionality.)
  syntax:
    content: public static Multiset<E> <E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
    parameters:
    - id: unfiltered
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
    - id: predicate
      type: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>immutableEntry(E,int)
  id: <E>immutableEntry(E,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>immutableEntry(E e, int n)
  nameWithType: Multisets.<E>immutableEntry(E e, int n)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>immutableEntry(E e, int n)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.immutableEntry*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns an immutable multiset entry with the specified element and count. The entry will be serializable if `e` is.
  syntax:
    content: public static Multiset.Entry<E> <E>immutableEntry(E e, int n)
    parameters:
    - id: e
      type: E
      description: the element to be associated with the returned entry
    - id: n
      type: int
      description: the count to be associated with the returned entry
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>intersection(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  id: <E>intersection(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>intersection(Multiset<E> multiset1, Multiset<?> multiset2)
  nameWithType: Multisets.<E>intersection(Multiset<E> multiset1, Multiset<?> multiset2)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>intersection(Multiset<E> multiset1, Multiset<?> multiset2)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.intersection*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable view of the intersection of two multisets. In the returned multiset, the count of each element is the *minimum* of its counts in the two backing multisets, with elements that would have a count of 0 not included. The iteration order of the returned multiset matches that of the element set of `multiset1`, with repeated occurrences of the same element appearing consecutively.


    Results are undefined if `multiset1` and `multiset2` are based on different equivalence relations (as `HashMultiset` and `TreeMultiset` are).
  syntax:
    content: public static Multiset<E> <E>intersection(Multiset<E> multiset1, Multiset<?> multiset2)
    parameters:
    - id: multiset1
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
    - id: multiset2
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>sum(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>,com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  id: <E>sum(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>,com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>sum(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
  nameWithType: Multisets.<E>sum(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>sum(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.sum*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable view of the sum of two multisets. In the returned multiset, the count of each element is the *sum* of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of `multiset1` followed by the members of the element set of `multiset2` that are not contained in `multiset1`, with repeated occurrences of the same element appearing consecutively.


    Results are undefined if `multiset1` and `multiset2` are based on different equivalence relations (as `HashMultiset` and `TreeMultiset` are).
  syntax:
    content: public static Multiset<E> <E>sum(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
    parameters:
    - id: multiset1
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>
    - id: multiset2
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>union(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>,com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  id: <E>union(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>,com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>union(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
  nameWithType: Multisets.<E>union(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>union(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.union*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable view of the union of two multisets. In the returned multiset, the count of each element is the *maximum* of its counts in the two backing multisets. The iteration order of the returned multiset matches that of the element set of `multiset1` followed by the members of the element set of `multiset2` that are not contained in `multiset1`, with repeated occurrences of the same element appearing consecutively.


    Results are undefined if `multiset1` and `multiset2` are based on different equivalence relations (as `HashMultiset` and `TreeMultiset` are).
  syntax:
    content: public static Multiset<E> <E>union(Multiset<? extends E> multiset1, Multiset<? extends E> multiset2)
    parameters:
    - id: multiset1
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>
    - id: multiset2
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset(com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>)
  id: <E>unmodifiableMultiset(com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>unmodifiableMultiset(ImmutableMultiset<E> multiset)
  nameWithType: Multisets.<E>unmodifiableMultiset(ImmutableMultiset<E> multiset)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset(ImmutableMultiset<E> multiset)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.unmodifiableMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Simply returns its argument.
  syntax:
    content: public static Multiset<E> <E>unmodifiableMultiset(ImmutableMultiset<E> multiset)
    parameters:
    - id: multiset
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  id: <E>unmodifiableMultiset(com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>unmodifiableMultiset(Multiset<? extends E> multiset)
  nameWithType: Multisets.<E>unmodifiableMultiset(Multiset<? extends E> multiset)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset(Multiset<? extends E> multiset)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.unmodifiableMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable view of the specified multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    The returned multiset will be serializable if the specified multiset is serializable.
  syntax:
    content: public static Multiset<E> <E>unmodifiableMultiset(Multiset<? extends E> multiset)
    parameters:
    - id: multiset
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>
      description: the multiset for which an unmodifiable view is to be generated
    return:
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
      description: an unmodifiable view of the multiset
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableSortedMultiset(com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>)
  id: <E>unmodifiableSortedMultiset(com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <E>unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset)
  nameWithType: Multisets.<E>unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.unmodifiableSortedMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable view of the specified sorted multiset. Query operations on the returned multiset "read through" to the specified multiset, and attempts to modify the returned multiset result in an <xref uid="java.lang.UnsupportedOperationException" data-throw-if-not-resolved="false">UnsupportedOperationException</xref>.


    The returned multiset will be serializable if the specified multiset is serializable.
  syntax:
    content: public static SortedMultiset<E> <E>unmodifiableSortedMultiset(SortedMultiset<E> sortedMultiset)
    parameters:
    - id: sortedMultiset
      type: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
      description: the sorted multiset for which an unmodifiable view is to be generated
    return:
      type: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
      description: an unmodifiable view of the multiset
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<T,E,M>toMultiset(java.util.function.Function<? super T,E>,java.util.function.ToIntFunction<? super T>,java.util.function.Supplier<M>)
  id: <T,E,M>toMultiset(java.util.function.Function<? super T,E>,java.util.function.ToIntFunction<? super T>,java.util.function.Supplier<M>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: <T,E,M>toMultiset(Function<? super T,E> elementFunction, ToIntFunction<? super T> countFunction, Supplier<M> multisetSupplier)
  nameWithType: Multisets.<T,E,M>toMultiset(Function<? super T,E> elementFunction, ToIntFunction<? super T> countFunction, Supplier<M> multisetSupplier)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<T,E,M>toMultiset(Function<? super T,E> elementFunction, ToIntFunction<? super T> countFunction, Supplier<M> multisetSupplier)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.toMultiset*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a `Collector` that accumulates elements into a multiset created via the specified `Supplier`, whose elements are the result of applying `elementFunction` to the inputs, with counts equal to the result of applying `countFunction` to the inputs. Elements are added in encounter order.


    If the mapped elements contain duplicates (according to <xref uid="java.lang.Object.equals" data-throw-if-not-resolved="false">Object#equals</xref>), the element will be added more than once, with the count summed over all appearances of the element.


    Note that `stream.collect(toMultiset(function, e -> 1, supplier))` is equivalent to `stream.map(function).collect(Collectors.toCollection(supplier))`.
  syntax:
    content: public static Collector<T,?,M> <T,E,M>toMultiset(Function<? super T,E> elementFunction, ToIntFunction<? super T> countFunction, Supplier<M> multisetSupplier)
    parameters:
    - id: elementFunction
      type: java.util.function.Function<? super T,E>
    - id: countFunction
      type: java.util.function.ToIntFunction<? super T>
    - id: multisetSupplier
      type: java.util.function.Supplier<M>
    return:
      type: java.util.stream.Collector<T,?,M>
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.Multisets()
  id: Multisets()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: Multisets()
  nameWithType: Multisets.Multisets()
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.Multisets()
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.Multisets*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Multisets()
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.containsOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  id: containsOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: containsOccurrences(Multiset<?> superMultiset, Multiset<?> subMultiset)
  nameWithType: Multisets.containsOccurrences(Multiset<?> superMultiset, Multiset<?> subMultiset)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.containsOccurrences(Multiset<?> superMultiset, Multiset<?> subMultiset)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.containsOccurrences*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns `true` if `subMultiset.count(o) <= superMultiset.count(o)` for all `o`.
  syntax:
    content: public static boolean containsOccurrences(Multiset<?> superMultiset, Multiset<?> subMultiset)
    parameters:
    - id: superMultiset
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    - id: subMultiset
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    return:
      type: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  id: removeOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: removeOccurrences(Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove)
  nameWithType: Multisets.removeOccurrences(Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences(Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    For each occurrence of an element `e` in `occurrencesToRemove`, removes one occurrence of `e` in `multisetToModify`.


    Equivalently, this method modifies `multisetToModify` so that `multisetToModify.count(e)` is set to `Math.max(0, multisetToModify.count(e) - occurrencesToRemove.count(e))`.


    This is *not* the same as `multisetToModify.` <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll" data-throw-if-not-resolved="false">removeAll</xref>`(occurrencesToRemove)`, which removes all occurrences of elements that appear in `occurrencesToRemove`. However, this operation *is* equivalent to, albeit sometimes more efficient than, the following:


    ```java

    for (E e : occurrencesToRemove) {
       multisetToModify.remove(e);
     }
    ```
  syntax:
    content: public static boolean removeOccurrences(Multiset<?> multisetToModify, Multiset<?> occurrencesToRemove)
    parameters:
    - id: multisetToModify
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    - id: occurrencesToRemove
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    return:
      type: boolean
      description: <code>true</code> if <code>multisetToModify</code> was changed as a result of this operation
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,java.lang.Iterable<?>)
  id: removeOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,java.lang.Iterable<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: removeOccurrences(Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove)
  nameWithType: Multisets.removeOccurrences(Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences(Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    For each occurrence of an element `e` in `occurrencesToRemove`, removes one occurrence of `e` in `multisetToModify`.


    Equivalently, this method modifies `multisetToModify` so that `multisetToModify.count(e)` is set to `Math.max(0, multisetToModify.count(e) - Iterables.frequency(occurrencesToRemove, e))`.


    This is *not* the same as `multisetToModify.` <xref uid="com.azure.cosmos.implementation.guava25.collect.Multiset.removeAll" data-throw-if-not-resolved="false">removeAll</xref>`(occurrencesToRemove)`, which removes all occurrences of elements that appear in `occurrencesToRemove`. However, this operation *is* equivalent to, albeit sometimes more efficient than, the following:


    ```java

    for (E e : occurrencesToRemove) {
       multisetToModify.remove(e);
     }
    ```
  syntax:
    content: public static boolean removeOccurrences(Multiset<?> multisetToModify, Iterable<?> occurrencesToRemove)
    parameters:
    - id: multisetToModify
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    - id: occurrencesToRemove
      type: java.lang.Iterable<?>
    return:
      type: boolean
      description: <code>true</code> if <code>multisetToModify</code> was changed as a result of this operation
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.retainOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  id: retainOccurrences(com.azure.cosmos.implementation.guava25.collect.Multiset<?>,com.azure.cosmos.implementation.guava25.collect.Multiset<?>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Multisets
  langs:
  - java
  name: retainOccurrences(Multiset<?> multisetToModify, Multiset<?> multisetToRetain)
  nameWithType: Multisets.retainOccurrences(Multiset<?> multisetToModify, Multiset<?> multisetToRetain)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.retainOccurrences(Multiset<?> multisetToModify, Multiset<?> multisetToRetain)
  overload: com.azure.cosmos.implementation.guava25.collect.Multisets.retainOccurrences*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Modifies `multisetToModify` so that its count for an element `e` is at most `multisetToRetain.count(e)`.


    To be precise, `multisetToModify.count(e)` is set to `Math.min(multisetToModify.count(e), multisetToRetain.count(e))`. This is similar to <xref uid="com.azure.cosmos.implementation.guava25.collect.Multisets.&lt;E&gt;intersection(com.azure.cosmos.implementation.guava25.collect.Multiset&lt;E&gt;,com.azure.cosmos.implementation.guava25.collect.Multiset&lt;?&gt;)" data-throw-if-not-resolved="false">intersection</xref> `(multisetToModify, multisetToRetain)`, but mutates `multisetToModify` instead of returning a view.


    In contrast, `multisetToModify.retainAll(multisetToRetain)` keeps all occurrences of elements that appear at all in `multisetToRetain`, and deletes all occurrences of all other elements.
  syntax:
    content: public static boolean retainOccurrences(Multiset<?> multisetToModify, Multiset<?> multisetToRetain)
    parameters:
    - id: multisetToModify
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    - id: multisetToRetain
      type: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
    return:
      type: boolean
      description: <code>true</code> if <code>multisetToModify</code> was changed as a result of this operation
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.Multisets*
  name: Multisets
  nameWithType: Multisets.Multisets
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.Multisets
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.function.Function<? super T,E>
  spec.java:
  - uid: java.util.function.Function
    name: Function
    fullName: java.util.function.Function
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: ','
    fullName: ','
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: java.util.function.ToIntFunction<? super T>
  spec.java:
  - uid: java.util.function.ToIntFunction
    name: ToIntFunction
    fullName: java.util.function.ToIntFunction
  - name: <
    fullName: <
  - uid: '? super T'
    name: '? super T'
    fullName: '? super T'
  - name: '>'
    fullName: '>'
- uid: java.util.function.Supplier<M>
  spec.java:
  - uid: java.util.function.Supplier
    name: Supplier
    fullName: java.util.function.Supplier
  - name: <
    fullName: <
  - uid: M
    name: M
    fullName: M
  - name: '>'
    fullName: '>'
- uid: java.util.stream.Collector<T,?,M>
  spec.java:
  - uid: java.util.stream.Collector
    name: Collector
    fullName: java.util.stream.Collector
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: ','
    fullName: ','
  - uid: M
    name: M
    fullName: M
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.toMultiset*
  name: <T,E,M>toMultiset
  nameWithType: Multisets.<T,E,M>toMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<T,E,M>toMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset<? extends E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset
    name: Multiset
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset
    name: Multiset
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.unmodifiableMultiset*
  name: <E>unmodifiableMultiset
  nameWithType: Multisets.<E>unmodifiableMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
    name: ImmutableMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
    name: SortedMultiset
    fullName: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.unmodifiableSortedMultiset*
  name: <E>unmodifiableSortedMultiset
  nameWithType: Multisets.<E>unmodifiableSortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>unmodifiableSortedMultiset
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry<E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
    name: Entry
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.immutableEntry*
  name: <E>immutableEntry
  nameWithType: Multisets.<E>immutableEntry
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>immutableEntry
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.base.Predicate<? super E>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Predicate
    name: Predicate
    fullName: com.azure.cosmos.implementation.guava25.base.Predicate
  - name: <
    fullName: <
  - uid: '? super E'
    name: '? super E'
    fullName: '? super E'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.filter*
  name: <E>filter
  nameWithType: Multisets.<E>filter
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.union*
  name: <E>union
  nameWithType: Multisets.<E>union
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>union
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset<?>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.Multiset
    name: Multiset
    fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.intersection*
  name: <E>intersection
  nameWithType: Multisets.<E>intersection
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>intersection
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.sum*
  name: <E>sum
  nameWithType: Multisets.<E>sum
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>sum
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.difference*
  name: <E>difference
  nameWithType: Multisets.<E>difference
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>difference
  package: com.azure.cosmos.implementation.guava25.collect
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.containsOccurrences*
  name: containsOccurrences
  nameWithType: Multisets.containsOccurrences
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.containsOccurrences
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.retainOccurrences*
  name: retainOccurrences
  nameWithType: Multisets.retainOccurrences
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.retainOccurrences
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Iterable<?>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences*
  name: removeOccurrences
  nameWithType: Multisets.removeOccurrences
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.removeOccurrences
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.copyHighestCountFirst*
  name: <E>copyHighestCountFirst
  nameWithType: Multisets.<E>copyHighestCountFirst
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>copyHighestCountFirst
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: '? super T,E'
  name: '? super T,E'
  nameWithType: '? super T,E'
  fullName: '? super T,E'
- uid: java.util.function.Function
  name: Function
  nameWithType: Function
  fullName: java.util.function.Function
- uid: '? super T'
  name: '? super T'
  nameWithType: '? super T'
  fullName: '? super T'
- uid: java.util.function.ToIntFunction
  name: ToIntFunction
  nameWithType: ToIntFunction
  fullName: java.util.function.ToIntFunction
- uid: java.util.function.Supplier
  name: Supplier
  nameWithType: Supplier
  fullName: java.util.function.Supplier
- uid: M
  name: M
  nameWithType: M
  fullName: M
- uid: java.util.stream.Collector
  name: Collector
  nameWithType: Collector
  fullName: java.util.stream.Collector
- uid: T,?,M
  name: T,?,M
  nameWithType: T,?,M
  fullName: T,?,M
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset
  name: Multiset
  nameWithType: Multiset
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
  name: ImmutableMultiset
  nameWithType: ImmutableMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
  name: SortedMultiset
  nameWithType: SortedMultiset
  fullName: com.azure.cosmos.implementation.guava25.collect.SortedMultiset
- uid: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
  name: Multiset.Entry
  nameWithType: Multiset.Entry
  fullName: com.azure.cosmos.implementation.guava25.collect.Multiset.Entry
- uid: '? super E'
  name: '? super E'
  nameWithType: '? super E'
  fullName: '? super E'
- uid: com.azure.cosmos.implementation.guava25.base.Predicate
  name: Predicate
  nameWithType: Predicate
  fullName: com.azure.cosmos.implementation.guava25.base.Predicate
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
