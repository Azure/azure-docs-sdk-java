### YamlMime:JavaType
uid: "com.azure.cosmos.models.ConflictResolutionPolicy"
fullName: "com.azure.cosmos.models.ConflictResolutionPolicy"
name: "ConflictResolutionPolicy"
nameWithType: "ConflictResolutionPolicy"
summary: "Represents the conflict resolution policy configuration for specifying how to resolve conflicts in case writes from different regions result in conflicts on items in the container in the Azure Cosmos DB service. Refer to: https://docs.microsoft.com/en-us/azure/cosmos-db/conflict-resolution-policies\n\nA container with custom conflict resolution with no user-registered stored procedure.\n\n```java\nCosmosContainerProperties containerProperties =\n      new CosmosContainerProperties(\"Multi-master container\", \"Multi-master container partition key\");\n containerProperties.setConflictResolutionPolicy(ConflictResolutionPolicy.createCustomPolicy());\n\n CosmosAsyncDatabase database = client.createDatabase(databaseProperties).block().getDatabase();\n CosmosAsyncContainer container = database.createContainer(containerProperties).block().getContainer();\n```\n\nA container with custom conflict resolution with a user-registered stored procedure.\n\n```java\nCosmosContainerProperties containerProperties =\n      new CosmosContainerProperties(\"Multi-master container\", \"Multi-master container partition key\");\n\n ConflictResolutionPolicy policy = ConflictResolutionPolicy.createCustomPolicy(conflictResolutionSprocName);\n containerProperties.setConflictResolutionPolicy(policy);\n\n CosmosAsyncDatabase database = client.createDatabase(databaseProperties).block().getDatabase();\n CosmosAsyncContainer container = database.createContainer(containerProperties).block().getContainer();\n```\n\nA container with last writer wins conflict resolution, based on a path in the conflicting items. A container with custom conflict resolution with a user-registered stored procedure.\n\n```java\nCosmosContainerProperties containerProperties =\n      new CosmosContainerProperties(\"Multi-master container\", \"Multi-master container partition key\");\n\n ConflictResolutionPolicy policy = ConflictResolutionPolicy.createLastWriterWinsPolicy(\"/path/for/conflict/resolution\");\n containerProperties.setConflictResolutionPolicy(policy);\n\n CosmosAsyncDatabase database = client.createDatabase(databaseProperties).block().getDatabase();\n CosmosAsyncContainer container = database.createContainer(containerProperties).block().getContainer();\n```"
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class ConflictResolutionPolicy"
methods:
- "com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy()"
- "com.azure.cosmos.models.ConflictResolutionPolicy.createCustomPolicy(java.lang.String)"
- "com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy()"
- "com.azure.cosmos.models.ConflictResolutionPolicy.createLastWriterWinsPolicy(java.lang.String)"
- "com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionPath()"
- "com.azure.cosmos.models.ConflictResolutionPolicy.getConflictResolutionProcedure()"
- "com.azure.cosmos.models.ConflictResolutionPolicy.getMode()"
type: "class"
metadata: {}
package: "com.azure.cosmos.models"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
