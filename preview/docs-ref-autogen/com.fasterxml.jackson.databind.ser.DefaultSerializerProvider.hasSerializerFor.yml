### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor*"
fullName: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor"
name: "hasSerializerFor"
nameWithType: "DefaultSerializerProvider.hasSerializerFor"
members:
- uid: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(java.lang.Class<?>,java.util.concurrent.atomic.AtomicReference<java.lang.Throwable>)"
  fullName: "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)"
  name: "hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)"
  nameWithType: "DefaultSerializerProvider.hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)"
  summary: "Method that can be called to see if this serializer provider can find a serializer for an instance of given class.\n\nNote that no Exceptions are thrown, including unchecked ones: implementations are to swallow exceptions if necessary."
  parameters:
  - name: "cls"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;"
  - name: "cause"
    type: "<xref href=\"java.util.concurrent.atomic.AtomicReference?alt=java.util.concurrent.atomic.AtomicReference&text=AtomicReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public boolean hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause)"
  returns:
    type: "<xref href=\"boolean?alt=boolean&text=boolean\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.ser"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
