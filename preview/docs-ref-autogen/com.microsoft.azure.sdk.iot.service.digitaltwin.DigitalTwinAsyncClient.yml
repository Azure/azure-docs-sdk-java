### YamlMime:JavaType
uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient"
fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient"
name: "DigitalTwinAsyncClient"
nameWithType: "DigitalTwinAsyncClient"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class DigitalTwinAsyncClient"
methods:
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  name: "<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  summary: "Gets a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The class to deserialize the application/json into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Observable<T> <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)"
  desc: "Gets a digital twin."
  returns:
    description: "The application/json of the digital twin."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  name: "<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  nameWithType: "DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  summary: "Gets a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The class to deserialize the application/json into."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Observable<ServiceResponseWithHeaders<T,DigitalTwinGetHeaders>> <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)"
  desc: "Gets a digital twin."
  returns:
    description: "A <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> representing deserialized application/json of the digital twin with <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinGetHeaders\"></xref>."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders&text=DigitalTwinGetHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString(java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString(String connectionString)"
  name: "createFromConnectionString(String connectionString)"
  nameWithType: "DigitalTwinAsyncClient.createFromConnectionString(String connectionString)"
  summary: "Creates an implementation instance of <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwins\"></xref> that is used to invoke the Digital Twin features"
  modifiers:
  - "static"
  parameters:
  - description: "The IoTHub connection string"
    name: "connectionString"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)"
  desc: "Creates an implementation instance of <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwins\"></xref> that is used to invoke the Digital Twin features"
  returns:
    description: "DigitalTwinAsyncClient"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient&text=DigitalTwinAsyncClient\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName)"
  name: "invokeCommand(String digitalTwinId, String commandName)"
  nameWithType: "DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName)"
  summary: "Invoke a command on a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command to be invoked."
    name: "commandName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DigitalTwinCommandResponse> invokeCommand(String digitalTwinId, String commandName)"
  exceptions:
  - description: "can be thrown if the provided payload cannot be deserialized to an Object."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a command on a digital twin."
  returns:
    description: "A <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinCommandResponse\"></xref> which contains the application/json command invocation response."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName, String payload)"
  name: "invokeCommand(String digitalTwinId, String commandName, String payload)"
  nameWithType: "DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName, String payload)"
  summary: "Invoke a command on a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command to be invoked."
    name: "commandName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command payload."
    name: "payload"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DigitalTwinCommandResponse> invokeCommand(String digitalTwinId, String commandName, String payload)"
  exceptions:
  - description: "can be thrown if the provided payload cannot be deserialized into a valid Json object."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a command on a digital twin."
  returns:
    description: "A <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinCommandResponse\"></xref> which contains the application/json command invocation response."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  name: "invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  nameWithType: "DigitalTwinAsyncClient.invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  summary: "Invoke a command on a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command to be invoked."
    name: "commandName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command payload."
    name: "payload"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional settings for this request."
    name: "options"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions&text=DigitalTwinInvokeCommandRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse,DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  exceptions:
  - description: "can be thrown if the provided payload cannot be deserialized into a valid Json object."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a command on a digital twin."
  returns:
    description: "A <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> with <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinInvokeRootLevelCommandHeaders\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinCommandResponse\"></xref> which contains the application/json command invocation response."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders&text=DigitalTwinInvokeCommandHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName)"
  name: "invokeComponentCommand(String digitalTwinId, String componentName, String commandName)"
  nameWithType: "DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName)"
  summary: "Invoke a command on a digital twin component."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The component name under which the command is defined."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command to be invoked."
    name: "commandName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName)"
  exceptions:
  - description: "can be thrown if the provided payload cannot be deserialized into a valid Json object."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a command on a digital twin component."
  returns:
    description: "A <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinCommandResponse\"></xref> which contains the application/json command invocation response."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)"
  name: "invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)"
  nameWithType: "DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)"
  summary: "Invoke a command on a digital twin component."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The component name under which the command is defined."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command to be invoked."
    name: "commandName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command payload."
    name: "payload"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)"
  exceptions:
  - description: "can be thrown if the provided payload cannot be deserialized into a valid Json object."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a command on a digital twin component."
  returns:
    description: "A <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinCommandResponse\"></xref> which contains the application/json command invocation response."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  name: "invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  nameWithType: "DigitalTwinAsyncClient.invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  summary: "Invoke a command on a digital twin component."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The component name under which the command is defined."
    name: "componentName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command to be invoked."
    name: "commandName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The command payload."
    name: "payload"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The optional settings for this request."
    name: "options"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions&text=DigitalTwinInvokeCommandRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse,DigitalTwinInvokeCommandHeaders>> invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)"
  exceptions:
  - description: "can be thrown if the provided payload cannot be deserialized into a valid Json object."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
  desc: "Invoke a command on a digital twin component."
  returns:
    description: "A <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> with <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinInvokeRootLevelCommandHeaders\"></xref> and <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinCommandResponse\"></xref> which contains the application/json command invocation response."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse&text=DigitalTwinCommandResponse\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders&text=DigitalTwinInvokeCommandHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin(java.lang.String,java.util.List<java.lang.Object>)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  name: "updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  nameWithType: "DigitalTwinAsyncClient.updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin. This argument can be created using <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.UpdateOperationUtility\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UpdateOperationUtility\"></xref>."
    name: "digitalTwinUpdateOperations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Observable<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  desc: "Updates a digital twin."
  returns:
    description: "void."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  name: "updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  nameWithType: "DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin. This argument can be created using <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.UpdateOperationUtility\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UpdateOperationUtility\"></xref>."
    name: "digitalTwinUpdateOperations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public Observable<ServiceResponseWithHeaders<Void,DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)"
  desc: "Updates a digital twin."
  returns:
    description: "A <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> with <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinUpdateHeaders\"></xref>."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders&text=DigitalTwinUpdateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
- uid: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions)"
  fullName: "com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)"
  name: "updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)"
  nameWithType: "DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)"
  summary: "Updates a digital twin."
  parameters:
  - description: "The Id of the digital twin."
    name: "digitalTwinId"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The JSON patch to apply to the specified digital twin. This argument can be created using <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.UpdateOperationUtility\" data-throw-if-not-resolved=\"false\" data-raw-source=\"UpdateOperationUtility\"></xref>."
    name: "digitalTwinUpdateOperations"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Object?alt=java.lang.Object&text=Object\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "The optional settings for this request."
    name: "options"
    type: "<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions&text=DigitalTwinUpdateRequestOptions\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Observable<ServiceResponseWithHeaders<Void,DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)"
  desc: "Updates a digital twin."
  returns:
    description: "A <xref uid=\"com.microsoft.rest.ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ServiceResponseWithHeaders\"></xref> with <xref uid=\"com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders\" data-throw-if-not-resolved=\"false\" data-raw-source=\"DigitalTwinUpdateHeaders\"></xref>."
    type: "<xref href=\"rx.Observable?alt=rx.Observable&text=Observable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.microsoft.rest.ServiceResponseWithHeaders?alt=com.microsoft.rest.ServiceResponseWithHeaders&text=ServiceResponseWithHeaders\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Void?alt=java.lang.Void&text=Void\" data-throw-if-not-resolved=\"False\" />,<xref href=\"com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders?alt=com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders&text=DigitalTwinUpdateHeaders\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "class"
metadata: {}
package: "com.microsoft.azure.sdk.iot.service.digitaltwin"
artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
