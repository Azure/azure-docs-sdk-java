### YamlMime:ManagedReference
items:
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  id: DigitalTwinAsyncClient
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin
  children:
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString(java.lang.String)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(java.lang.String,java.lang.String)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin(java.lang.String,java.util.List<java.lang.Object>)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>)
  - com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions)
  langs:
  - java
  name: DigitalTwinAsyncClient
  nameWithType: DigitalTwinAsyncClient
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  type: Class
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  syntax:
    content: public class DigitalTwinAsyncClient
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwin(java.lang.String,java.lang.Class<T>)
  id: <T>getDigitalTwin(java.lang.String,java.lang.Class<T>)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
  nameWithType: DigitalTwinAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.getDigitalTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Gets a digital twin.
  syntax:
    content: public Observable<T> <T>getDigitalTwin(String digitalTwinId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: clazz
      type: java.lang.Class<T>
      description: The class to deserialize the application/json into.
    return:
      type: rx.Observable<T>
      description: The application/json of the digital twin.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)
  id: <T>getDigitalTwinWithResponse(java.lang.String,java.lang.Class<T>)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
  nameWithType: DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.getDigitalTwinWithResponse*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Gets a digital twin.
  syntax:
    content: public Observable<ServiceResponseWithHeaders<T,DigitalTwinGetHeaders>> <T>getDigitalTwinWithResponse(String digitalTwinId, Class<T> clazz)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: clazz
      type: java.lang.Class<T>
      description: The class to deserialize the application/json into.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<T,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders>>
      description: A <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> representing deserialized application/json of the digital twin with <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders" data-throw-if-not-resolved="false">DigitalTwinGetHeaders</xref>.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.DigitalTwinAsyncClient(java.lang.String)
  id: DigitalTwinAsyncClient(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: DigitalTwinAsyncClient(String connectionString)
  nameWithType: DigitalTwinAsyncClient.DigitalTwinAsyncClient(String connectionString)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.DigitalTwinAsyncClient(String connectionString)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.DigitalTwinAsyncClient*
  type: Constructor
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  syntax:
    content: " DigitalTwinAsyncClient(String connectionString)"
    parameters:
    - id: connectionString
      type: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString(java.lang.String)
  id: createFromConnectionString(java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: createFromConnectionString(String connectionString)
  nameWithType: DigitalTwinAsyncClient.createFromConnectionString(String connectionString)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString(String connectionString)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Creates an implementation instance of <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.DigitalTwins" data-throw-if-not-resolved="false">DigitalTwins</xref> that is used to invoke the Digital Twin features
  syntax:
    content: public static DigitalTwinAsyncClient createFromConnectionString(String connectionString)
    parameters:
    - id: connectionString
      type: java.lang.String
      description: The IoTHub connection string
    return:
      type: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
      description: DigitalTwinAsyncClient
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(java.lang.String,java.lang.String)
  id: invokeCommand(java.lang.String,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: invokeCommand(String digitalTwinId, String commandName)
  nameWithType: DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Invoke a command on a digital twin.
  syntax:
    content: public Observable<DigitalTwinCommandResponse> invokeCommand(String digitalTwinId, String commandName)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: commandName
      type: java.lang.String
      description: The command to be invoked.
    return:
      type: rx.Observable<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse>
      description: A <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse" data-throw-if-not-resolved="false">DigitalTwinCommandResponse</xref> which contains the application/json command invocation response.
  exceptions:
  - type: java.io.IOException
    description: can be thrown if the provided payload cannot be deserialized to an Object.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(java.lang.String,java.lang.String,java.lang.String)
  id: invokeCommand(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: invokeCommand(String digitalTwinId, String commandName, String payload)
  nameWithType: DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName, String payload)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand(String digitalTwinId, String commandName, String payload)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Invoke a command on a digital twin.
  syntax:
    content: public Observable<DigitalTwinCommandResponse> invokeCommand(String digitalTwinId, String commandName, String payload)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: commandName
      type: java.lang.String
      description: The command to be invoked.
    - id: payload
      type: java.lang.String
      description: The command payload.
    return:
      type: rx.Observable<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse>
      description: A <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse" data-throw-if-not-resolved="false">DigitalTwinCommandResponse</xref> which contains the application/json command invocation response.
  exceptions:
  - type: java.io.IOException
    description: can be thrown if the provided payload cannot be deserialized into a valid Json object.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)
  id: invokeCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  nameWithType: DigitalTwinAsyncClient.invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Invoke a command on a digital twin.
  syntax:
    content: public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse,DigitalTwinInvokeCommandHeaders>> invokeCommandWithResponse(String digitalTwinId, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: commandName
      type: java.lang.String
      description: The command to be invoked.
    - id: payload
      type: java.lang.String
      description: The command payload.
    - id: options
      type: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions
      description: The optional settings for this request.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders>>
      description: A <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> with <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders" data-throw-if-not-resolved="false">DigitalTwinInvokeRootLevelCommandHeaders</xref> and <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse" data-throw-if-not-resolved="false">DigitalTwinCommandResponse</xref> which contains the application/json command invocation response.
  exceptions:
  - type: java.io.IOException
    description: can be thrown if the provided payload cannot be deserialized into a valid Json object.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String)
  id: invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: invokeComponentCommand(String digitalTwinId, String componentName, String commandName)
  nameWithType: DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Invoke a command on a digital twin component.
  syntax:
    content: public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: componentName
      type: java.lang.String
      description: The component name under which the command is defined.
    - id: commandName
      type: java.lang.String
      description: The command to be invoked.
    return:
      type: rx.Observable<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse>
      description: A <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse" data-throw-if-not-resolved="false">DigitalTwinCommandResponse</xref> which contains the application/json command invocation response.
  exceptions:
  - type: java.io.IOException
    description: can be thrown if the provided payload cannot be deserialized into a valid Json object.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  id: invokeComponentCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)
  nameWithType: DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Invoke a command on a digital twin component.
  syntax:
    content: public Observable<DigitalTwinCommandResponse> invokeComponentCommand(String digitalTwinId, String componentName, String commandName, String payload)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: componentName
      type: java.lang.String
      description: The component name under which the command is defined.
    - id: commandName
      type: java.lang.String
      description: The command to be invoked.
    - id: payload
      type: java.lang.String
      description: The command payload.
    return:
      type: rx.Observable<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse>
      description: A <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse" data-throw-if-not-resolved="false">DigitalTwinCommandResponse</xref> which contains the application/json command invocation response.
  exceptions:
  - type: java.io.IOException
    description: can be thrown if the provided payload cannot be deserialized into a valid Json object.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)
  id: invokeComponentCommandWithResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  nameWithType: DigitalTwinAsyncClient.invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Invoke a command on a digital twin component.
  syntax:
    content: public Observable<ServiceResponseWithHeaders<DigitalTwinCommandResponse,DigitalTwinInvokeCommandHeaders>> invokeComponentCommandWithResponse(String digitalTwinId, String componentName, String commandName, String payload, DigitalTwinInvokeCommandRequestOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: componentName
      type: java.lang.String
      description: The component name under which the command is defined.
    - id: commandName
      type: java.lang.String
      description: The command to be invoked.
    - id: payload
      type: java.lang.String
      description: The command payload.
    - id: options
      type: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions
      description: The optional settings for this request.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders>>
      description: A <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> with <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.generated.models.DigitalTwinInvokeRootLevelCommandHeaders" data-throw-if-not-resolved="false">DigitalTwinInvokeRootLevelCommandHeaders</xref> and <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse" data-throw-if-not-resolved="false">DigitalTwinCommandResponse</xref> which contains the application/json command invocation response.
  exceptions:
  - type: java.io.IOException
    description: can be thrown if the provided payload cannot be deserialized into a valid Json object.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin(java.lang.String,java.util.List<java.lang.Object>)
  id: updateDigitalTwin(java.lang.String,java.util.List<java.lang.Object>)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
  nameWithType: DigitalTwinAsyncClient.updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Updates a digital twin.
  syntax:
    content: public Observable<Void> updateDigitalTwin(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: digitalTwinUpdateOperations
      type: java.util.List<java.lang.Object>
      description: The JSON patch to apply to the specified digital twin. This argument can be created using <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.UpdateOperationUtility" data-throw-if-not-resolved="false">UpdateOperationUtility</xref>.
    return:
      type: rx.Observable<java.lang.Void>
      description: void.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>)
  id: updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
  nameWithType: DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Updates a digital twin.
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void,DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: digitalTwinUpdateOperations
      type: java.util.List<java.lang.Object>
      description: The JSON patch to apply to the specified digital twin. This argument can be created using <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.UpdateOperationUtility" data-throw-if-not-resolved="false">UpdateOperationUtility</xref>.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders>>
      description: A <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> with <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders" data-throw-if-not-resolved="false">DigitalTwinUpdateHeaders</xref>.
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions)
  id: updateDigitalTwinWithResponse(java.lang.String,java.util.List<java.lang.Object>,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions)
  artifact: com.microsoft.azure.sdk.iot:iot-service-client-preview:1.2.0
  parent: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient
  langs:
  - java
  name: updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)
  nameWithType: DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)
  overload: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse*
  type: Method
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
  summary: Updates a digital twin.
  syntax:
    content: public Observable<ServiceResponseWithHeaders<Void,DigitalTwinUpdateHeaders>> updateDigitalTwinWithResponse(String digitalTwinId, List<Object> digitalTwinUpdateOperations, DigitalTwinUpdateRequestOptions options)
    parameters:
    - id: digitalTwinId
      type: java.lang.String
      description: The Id of the digital twin.
    - id: digitalTwinUpdateOperations
      type: java.util.List<java.lang.Object>
      description: The JSON patch to apply to the specified digital twin. This argument can be created using <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.UpdateOperationUtility" data-throw-if-not-resolved="false">UpdateOperationUtility</xref>.
    - id: options
      type: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
      description: The optional settings for this request.
    return:
      type: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders>>
      description: A <xref uid="com.microsoft.rest.ServiceResponseWithHeaders" data-throw-if-not-resolved="false">ServiceResponseWithHeaders</xref> with <xref uid="com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders" data-throw-if-not-resolved="false">DigitalTwinUpdateHeaders</xref>.
references:
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.DigitalTwinAsyncClient*
  name: DigitalTwinAsyncClient
  nameWithType: DigitalTwinAsyncClient.DigitalTwinAsyncClient
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.DigitalTwinAsyncClient
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString*
  name: createFromConnectionString
  nameWithType: DigitalTwinAsyncClient.createFromConnectionString
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.createFromConnectionString
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: java.lang.Class<T>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: rx.Observable<T>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.getDigitalTwin*
  name: <T>getDigitalTwin
  nameWithType: DigitalTwinAsyncClient.<T>getDigitalTwin
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwin
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<T,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders
    name: DigitalTwinGetHeaders
    fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.getDigitalTwinWithResponse*
  name: <T>getDigitalTwinWithResponse
  nameWithType: DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.<T>getDigitalTwinWithResponse
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: java.util.List<java.lang.Object>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
  - name: '>'
    fullName: '>'
- uid: rx.Observable<java.lang.Void>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin*
  name: updateDigitalTwin
  nameWithType: DigitalTwinAsyncClient.updateDigitalTwin
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwin
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<java.lang.Void,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: java.lang.Void
    name: Void
    fullName: java.lang.Void
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders
    name: DigitalTwinUpdateHeaders
    fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse*
  name: updateDigitalTwinWithResponse
  nameWithType: DigitalTwinAsyncClient.updateDigitalTwinWithResponse
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.updateDigitalTwinWithResponse
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
  name: DigitalTwinUpdateRequestOptions
  nameWithType: DigitalTwinUpdateRequestOptions
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinUpdateRequestOptions
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: rx.Observable<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse
    name: DigitalTwinCommandResponse
    fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand*
  name: invokeCommand
  nameWithType: DigitalTwinAsyncClient.invokeCommand
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommand
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions
  name: DigitalTwinInvokeCommandRequestOptions
  nameWithType: DigitalTwinInvokeCommandRequestOptions
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandRequestOptions
- uid: rx.Observable<com.microsoft.rest.ServiceResponseWithHeaders<com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders>>
  spec.java:
  - uid: rx.Observable
    name: Observable
    fullName: rx.Observable
  - name: <
    fullName: <
  - uid: com.microsoft.rest.ServiceResponseWithHeaders
    name: ServiceResponseWithHeaders
    fullName: com.microsoft.rest.ServiceResponseWithHeaders
  - name: <
    fullName: <
  - uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse
    name: DigitalTwinCommandResponse
    fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse
  - name: ','
    fullName: ','
  - uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders
    name: DigitalTwinInvokeCommandHeaders
    fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse*
  name: invokeCommandWithResponse
  nameWithType: DigitalTwinAsyncClient.invokeCommandWithResponse
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeCommandWithResponse
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand*
  name: invokeComponentCommand
  nameWithType: DigitalTwinAsyncClient.invokeComponentCommand
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommand
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse*
  name: invokeComponentCommandWithResponse
  nameWithType: DigitalTwinAsyncClient.invokeComponentCommandWithResponse
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.DigitalTwinAsyncClient.invokeComponentCommandWithResponse
  package: com.microsoft.azure.sdk.iot.service.digitaltwin
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: rx.Observable
  name: Observable
  nameWithType: Observable
  fullName: rx.Observable
- uid: T,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders
  name: T,DigitalTwinGetHeaders
  nameWithType: T,DigitalTwinGetHeaders
  fullName: T,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinGetHeaders
- uid: com.microsoft.rest.ServiceResponseWithHeaders
  name: ServiceResponseWithHeaders
  nameWithType: ServiceResponseWithHeaders
  fullName: com.microsoft.rest.ServiceResponseWithHeaders
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: java.lang.Object
  name: Object
  nameWithType: Object
  fullName: java.lang.Object
- uid: java.lang.Void
  name: Void
  nameWithType: Void
  fullName: java.lang.Void
- uid: java.lang.Void,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders
  name: Void,DigitalTwinUpdateHeaders
  nameWithType: Void,DigitalTwinUpdateHeaders
  fullName: java.lang.Void,com.microsoft.azure.sdk.iot.service.digitaltwin.customized.DigitalTwinUpdateHeaders
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse
  name: DigitalTwinCommandResponse
  nameWithType: DigitalTwinCommandResponse
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse
- uid: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders
  name: DigitalTwinCommandResponse,DigitalTwinInvokeCommandHeaders
  nameWithType: DigitalTwinCommandResponse,DigitalTwinInvokeCommandHeaders
  fullName: com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinCommandResponse,com.microsoft.azure.sdk.iot.service.digitaltwin.models.DigitalTwinInvokeCommandHeaders
