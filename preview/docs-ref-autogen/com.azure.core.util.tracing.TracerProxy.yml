### YamlMime:ManagedReference
items:
- uid: "com.azure.core.util.tracing.TracerProxy"
  id: "TracerProxy"
  parent: "com.azure.core.util.tracing"
  children:
  - "com.azure.core.util.tracing.TracerProxy.end(int,java.lang.Throwable,com.azure.core.util.Context)"
  - "com.azure.core.util.tracing.TracerProxy.setAttribute(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  - "com.azure.core.util.tracing.TracerProxy.setSpanName(java.lang.String,com.azure.core.util.Context)"
  - "com.azure.core.util.tracing.TracerProxy.start(java.lang.String,com.azure.core.util.Context)"
  langs:
  - "java"
  name: "TracerProxy"
  nameWithType: "TracerProxy"
  fullName: "com.azure.core.util.tracing.TracerProxy"
  type: "Class"
  package: "com.azure.core.util.tracing"
  summary: "This class provides a means for all client libraries to augment the context information they have received from an end user with additional distributed tracing information, that may then be passed on to a backend for analysis."
  syntax:
    content: "public final class TracerProxy"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.core.util.tracing.TracerProxy.TracerProxy()"
  id: "TracerProxy()"
  parent: "com.azure.core.util.tracing.TracerProxy"
  langs:
  - "java"
  name: "TracerProxy()"
  nameWithType: "TracerProxy.TracerProxy()"
  fullName: "com.azure.core.util.tracing.TracerProxy.TracerProxy()"
  overload: "com.azure.core.util.tracing.TracerProxy.TracerProxy*"
  type: "Constructor"
  package: "com.azure.core.util.tracing"
  syntax:
    content: "private TracerProxy()"
- uid: "com.azure.core.util.tracing.TracerProxy.end(int,java.lang.Throwable,com.azure.core.util.Context)"
  id: "end(int,java.lang.Throwable,com.azure.core.util.Context)"
  parent: "com.azure.core.util.tracing.TracerProxy"
  langs:
  - "java"
  name: "end(int responseCode, Throwable error, Context context)"
  nameWithType: "TracerProxy.end(int responseCode, Throwable error, Context context)"
  fullName: "com.azure.core.util.tracing.TracerProxy.end(int responseCode, Throwable error, Context context)"
  overload: "com.azure.core.util.tracing.TracerProxy.end*"
  type: "Method"
  package: "com.azure.core.util.tracing"
  summary: "For each <xref uid=\"com.azure.core.util.tracing.Tracer\" data-throw-if-not-resolved=\"false\">tracer</xref> plugged into the SDK, its current tracing span is marked as completed."
  syntax:
    content: "public static void end(int responseCode, Throwable error, Context context)"
    parameters:
    - id: "responseCode"
      type: "int"
      description: "Response status code if the span is in a HTTP call context."
    - id: "error"
      type: "java.lang.Throwable"
      description: "<xref uid=\"\" data-throw-if-not-resolved=\"false\">Throwable</xref> that happened during the span or <code>null</code> if no exception occurred."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
- uid: "com.azure.core.util.tracing.TracerProxy.setAttribute(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  id: "setAttribute(java.lang.String,java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.core.util.tracing.TracerProxy"
  langs:
  - "java"
  name: "setAttribute(String key, String value, Context context)"
  nameWithType: "TracerProxy.setAttribute(String key, String value, Context context)"
  fullName: "com.azure.core.util.tracing.TracerProxy.setAttribute(String key, String value, Context context)"
  overload: "com.azure.core.util.tracing.TracerProxy.setAttribute*"
  type: "Method"
  package: "com.azure.core.util.tracing"
  summary: "For each <xref uid=\"com.azure.core.util.tracing.Tracer\" data-throw-if-not-resolved=\"false\">tracer</xref> plugged into the SDK, the key-value pair metadata is added to its current span. If the `context` does not contain a span, then no metadata is added."
  syntax:
    content: "public static void setAttribute(String key, String value, Context context)"
    parameters:
    - id: "key"
      type: "java.lang.String"
      description: "Name of the metadata."
    - id: "value"
      type: "java.lang.String"
      description: "Value of the metadata."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
- uid: "com.azure.core.util.tracing.TracerProxy.setSpanName(java.lang.String,com.azure.core.util.Context)"
  id: "setSpanName(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.core.util.tracing.TracerProxy"
  langs:
  - "java"
  name: "setSpanName(String spanName, Context context)"
  nameWithType: "TracerProxy.setSpanName(String spanName, Context context)"
  fullName: "com.azure.core.util.tracing.TracerProxy.setSpanName(String spanName, Context context)"
  overload: "com.azure.core.util.tracing.TracerProxy.setSpanName*"
  type: "Method"
  package: "com.azure.core.util.tracing"
  summary: "Sets the span name for each <xref uid=\"com.azure.core.util.tracing.Tracer\" data-throw-if-not-resolved=\"false\">tracer</xref> plugged into the SDK."
  syntax:
    content: "public static Context setSpanName(String spanName, Context context)"
    parameters:
    - id: "spanName"
      type: "java.lang.String"
      description: "Name of the span."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
    return:
      type: "com.azure.core.util.Context"
      description: "An updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> object."
- uid: "com.azure.core.util.tracing.TracerProxy.start(java.lang.String,com.azure.core.util.Context)"
  id: "start(java.lang.String,com.azure.core.util.Context)"
  parent: "com.azure.core.util.tracing.TracerProxy"
  langs:
  - "java"
  name: "start(String methodName, Context context)"
  nameWithType: "TracerProxy.start(String methodName, Context context)"
  fullName: "com.azure.core.util.tracing.TracerProxy.start(String methodName, Context context)"
  overload: "com.azure.core.util.tracing.TracerProxy.start*"
  type: "Method"
  package: "com.azure.core.util.tracing"
  summary: "A new tracing span is created for each <xref uid=\"com.azure.core.util.tracing.Tracer\" data-throw-if-not-resolved=\"false\">tracer</xref> plugged into the SDK. The `context` will be checked for information about a parent span. If a parent span is found, the new span will be added as a child. Otherwise, the parent span will be created and added to the `context` and any downstream `start()` calls will use the created span as the parent."
  syntax:
    content: "public static Context start(String methodName, Context context)"
    parameters:
    - id: "methodName"
      type: "java.lang.String"
      description: "Name of the method triggering the span creation."
    - id: "context"
      type: "com.azure.core.util.Context"
      description: "Additional metadata that is passed through the call stack."
    return:
      type: "com.azure.core.util.Context"
      description: "An updated <xref uid=\"com.azure.core.util.Context\" data-throw-if-not-resolved=\"false\">Context</xref> object."
references:
- uid: "com.azure.core.util.tracing.TracerProxy.TracerProxy*"
  name: "TracerProxy"
  nameWithType: "TracerProxy.TracerProxy"
  fullName: "com.azure.core.util.tracing.TracerProxy.TracerProxy"
  package: "com.azure.core.util.tracing"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "com.azure.core.util.Context"
  name: "Context"
  nameWithType: "Context"
  fullName: "com.azure.core.util.Context"
- uid: "com.azure.core.util.tracing.TracerProxy.start*"
  name: "start"
  nameWithType: "TracerProxy.start"
  fullName: "com.azure.core.util.tracing.TracerProxy.start"
  package: "com.azure.core.util.tracing"
- uid: "com.azure.core.util.tracing.TracerProxy.setAttribute*"
  name: "setAttribute"
  nameWithType: "TracerProxy.setAttribute"
  fullName: "com.azure.core.util.tracing.TracerProxy.setAttribute"
  package: "com.azure.core.util.tracing"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.Throwable"
  spec.java:
  - uid: "java.lang.Throwable"
    name: "Throwable"
    fullName: "java.lang.Throwable"
- uid: "com.azure.core.util.tracing.TracerProxy.end*"
  name: "end"
  nameWithType: "TracerProxy.end"
  fullName: "com.azure.core.util.tracing.TracerProxy.end"
  package: "com.azure.core.util.tracing"
- uid: "com.azure.core.util.tracing.TracerProxy.setSpanName*"
  name: "setSpanName"
  nameWithType: "TracerProxy.setSpanName"
  fullName: "com.azure.core.util.tracing.TracerProxy.setSpanName"
  package: "com.azure.core.util.tracing"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
