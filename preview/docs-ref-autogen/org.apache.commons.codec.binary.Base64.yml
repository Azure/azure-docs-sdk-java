### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.binary.Base64
  id: Base64
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary
  children:
  - org.apache.commons.codec.binary.Base64.Base64()
  - org.apache.commons.codec.binary.Base64.Base64(boolean)
  - org.apache.commons.codec.binary.Base64.Base64(int)
  - org.apache.commons.codec.binary.Base64.Base64(int,byte[])
  - org.apache.commons.codec.binary.Base64.Base64(int,byte[],boolean)
  - org.apache.commons.codec.binary.Base64.decodeBase64(byte[])
  - org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)
  - org.apache.commons.codec.binary.Base64.decodeInteger(byte[])
  - org.apache.commons.codec.binary.Base64.encodeBase64(byte[])
  - org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)
  - org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)
  - org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)
  - org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])
  - org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])
  - org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[])
  - org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[])
  - org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)
  - org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[])
  - org.apache.commons.codec.binary.Base64.isBase64(byte)
  - org.apache.commons.codec.binary.Base64.isBase64(byte[])
  - org.apache.commons.codec.binary.Base64.isBase64(java.lang.String)
  - org.apache.commons.codec.binary.Base64.isInAlphabet(byte)
  - org.apache.commons.codec.binary.Base64.isUrlSafe()
  langs:
  - java
  name: Base64
  nameWithType: Base64
  fullName: org.apache.commons.codec.binary.Base64
  type: Class
  package: org.apache.commons.codec.binary
  summary: >-
    Provides Base64 encoding and decoding as defined by [RFC 2045][].


    This class implements section 6.8. Base64 Content-Transfer-Encoding from RFC 2045 Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies by Freed and Borenstein.


    The class can be parameterized in the following manner with various constructors:

     *  URL-safe mode: Default off.
     *  Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.
     *  Line separator: Default is CRLF ("\\r\\n")

    The URL-safe parameter is only applied to encode operations. Decoding seamlessly handles both modes.


    Since this class operates directly on byte streams, and not character streams, it is hard-coded to only encode/decode character encodings which are compatible with the lower 127 ASCII chart (ISO-8859-1, Windows-1252, UTF-8, etc).


    This class is thread-safe.



    [RFC 2045]: http://www.ietf.org/rfc/rfc2045.txt
  syntax:
    content: public class Base64 extends BaseNCodec
  inheritance:
  - java.lang.Object
  - org.apache.commons.codec.binary.BaseNCodec
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
  - org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
  - org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
  - org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
  - org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
  - org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  - org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  - org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
  - org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
  - org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
- uid: org.apache.commons.codec.binary.Base64.Base64()
  id: Base64()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: Base64()
  nameWithType: Base64.Base64()
  fullName: org.apache.commons.codec.binary.Base64.Base64()
  overload: org.apache.commons.codec.binary.Base64.Base64*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.


    When encoding the line length is 0 (no chunking), and the encoding table is STANDARD\_ENCODE\_TABLE.


    When decoding all variants are supported.
  syntax:
    content: public Base64()
- uid: org.apache.commons.codec.binary.Base64.Base64(boolean)
  id: Base64(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: Base64(boolean urlSafe)
  nameWithType: Base64.Base64(boolean urlSafe)
  fullName: org.apache.commons.codec.binary.Base64.Base64(boolean urlSafe)
  overload: org.apache.commons.codec.binary.Base64.Base64*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base64 codec used for decoding (all modes) and encoding in the given URL-safe mode.


    When encoding the line length is 76, the line separator is CRLF, and the encoding table is STANDARD\_ENCODE\_TABLE.


    When decoding all variants are supported.
  syntax:
    content: public Base64(boolean urlSafe)
    parameters:
    - id: urlSafe
      type: boolean
      description: >-
        if <code>true</code>, URL-safe encoding is used. In most cases this should be set to
                    <code>false</code>.
- uid: org.apache.commons.codec.binary.Base64.Base64(int)
  id: Base64(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: Base64(int lineLength)
  nameWithType: Base64.Base64(int lineLength)
  fullName: org.apache.commons.codec.binary.Base64.Base64(int lineLength)
  overload: org.apache.commons.codec.binary.Base64.Base64*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.


    When encoding the line length is given in the constructor, the line separator is CRLF, and the encoding table is STANDARD\_ENCODE\_TABLE.


    Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.


    When decoding all variants are supported.
  syntax:
    content: public Base64(int lineLength)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
- uid: org.apache.commons.codec.binary.Base64.Base64(int,byte[])
  id: Base64(int,byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: Base64(int lineLength, byte[] lineSeparator)
  nameWithType: Base64.Base64(int lineLength, byte[] lineSeparator)
  fullName: org.apache.commons.codec.binary.Base64.Base64(int lineLength, byte[] lineSeparator)
  overload: org.apache.commons.codec.binary.Base64.Base64*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.


    When encoding the line length and line separator are given in the constructor, and the encoding table is STANDARD\_ENCODE\_TABLE.


    Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.


    When decoding all variants are supported.
  syntax:
    content: public Base64(int lineLength, byte[] lineSeparator)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
    - id: lineSeparator
      type: byte[]
      description: Each line of encoded data will end with this sequence of bytes.
- uid: org.apache.commons.codec.binary.Base64.Base64(int,byte[],boolean)
  id: Base64(int,byte[],boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)
  nameWithType: Base64.Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)
  fullName: org.apache.commons.codec.binary.Base64.Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)
  overload: org.apache.commons.codec.binary.Base64.Base64*
  type: Constructor
  package: org.apache.commons.codec.binary
  summary: >-
    Creates a Base64 codec used for decoding (all modes) and encoding in URL-unsafe mode.


    When encoding the line length and line separator are given in the constructor, and the encoding table is STANDARD\_ENCODE\_TABLE.


    Line lengths that aren't multiples of 4 will still essentially end up being multiples of 4 in the encoded data.


    When decoding all variants are supported.
  syntax:
    content: public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe)
    parameters:
    - id: lineLength
      type: int
      description: >-
        Each line of encoded data will be at most of the given length (rounded down to nearest multiple of
                    4). If lineLength &lt;= 0, then the output will not be divided into lines (chunks). Ignored when
                    decoding.
    - id: lineSeparator
      type: byte[]
      description: Each line of encoded data will end with this sequence of bytes.
    - id: urlSafe
      type: boolean
      description: >-
        Instead of emitting '+' and '/' we emit '-' and '_' respectively. urlSafe is only applied to encode
                    operations. Decoding seamlessly handles both modes.
                    <b>Note: no padding is added when using the URL-safe alphabet.</b>
- uid: org.apache.commons.codec.binary.Base64.decodeBase64(byte[])
  id: decodeBase64(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: decodeBase64(byte[] base64Data)
  nameWithType: Base64.decodeBase64(byte[] base64Data)
  fullName: org.apache.commons.codec.binary.Base64.decodeBase64(byte[] base64Data)
  overload: org.apache.commons.codec.binary.Base64.decodeBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: >-
    Decodes Base64 data into octets.


    **Note:** this method seamlessly handles data encoded in URL-safe or normal mode.
  syntax:
    content: public static byte[] decodeBase64(byte[] base64Data)
    parameters:
    - id: base64Data
      type: byte[]
      description: Byte array containing Base64 data
    return:
      type: byte[]
      description: Array containing decoded data.
- uid: org.apache.commons.codec.binary.Base64.decodeBase64(java.lang.String)
  id: decodeBase64(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: decodeBase64(String base64String)
  nameWithType: Base64.decodeBase64(String base64String)
  fullName: org.apache.commons.codec.binary.Base64.decodeBase64(String base64String)
  overload: org.apache.commons.codec.binary.Base64.decodeBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: >-
    Decodes a Base64 String into octets.


    **Note:** this method seamlessly handles data encoded in URL-safe or normal mode.
  syntax:
    content: public static byte[] decodeBase64(String base64String)
    parameters:
    - id: base64String
      type: java.lang.String
      description: String containing Base64 data
    return:
      type: byte[]
      description: Array containing decoded data.
- uid: org.apache.commons.codec.binary.Base64.decodeInteger(byte[])
  id: decodeInteger(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: decodeInteger(byte[] pArray)
  nameWithType: Base64.decodeInteger(byte[] pArray)
  fullName: org.apache.commons.codec.binary.Base64.decodeInteger(byte[] pArray)
  overload: org.apache.commons.codec.binary.Base64.decodeInteger*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Decodes a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.
  syntax:
    content: public static BigInteger decodeInteger(byte[] pArray)
    parameters:
    - id: pArray
      type: byte[]
      description: a byte array containing base64 character data
    return:
      type: java.math.BigInteger
      description: A BigInteger
- uid: org.apache.commons.codec.binary.Base64.encodeBase64(byte[])
  id: encodeBase64(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64(byte[] binaryData)
  nameWithType: Base64.encodeBase64(byte[] binaryData)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64(byte[] binaryData)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes binary data using the base64 algorithm but does not chunk the output.
  syntax:
    content: public static byte[] encodeBase64(byte[] binaryData)
    parameters:
    - id: binaryData
      type: byte[]
      description: binary data to encode
    return:
      type: byte[]
      description: byte[] containing Base64 characters in their UTF-8 representation.
- uid: org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean)
  id: encodeBase64(byte[],boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64(byte[] binaryData, boolean isChunked)
  nameWithType: Base64.encodeBase64(byte[] binaryData, boolean isChunked)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64(byte[] binaryData, boolean isChunked)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
  syntax:
    content: public static byte[] encodeBase64(byte[] binaryData, boolean isChunked)
    parameters:
    - id: binaryData
      type: byte[]
      description: Array containing binary data to encode.
    - id: isChunked
      type: boolean
      description: if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
    return:
      type: byte[]
      description: Base64-encoded data.
- uid: org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean)
  id: encodeBase64(byte[],boolean,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)
  nameWithType: Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
  syntax:
    content: public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe)
    parameters:
    - id: binaryData
      type: byte[]
      description: Array containing binary data to encode.
    - id: isChunked
      type: boolean
      description: if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
    - id: urlSafe
      type: boolean
      description: >-
        if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
                    <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>
    return:
      type: byte[]
      description: Base64-encoded data.
- uid: org.apache.commons.codec.binary.Base64.encodeBase64(byte[],boolean,boolean,int)
  id: encodeBase64(byte[],boolean,boolean,int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)
  nameWithType: Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes binary data using the base64 algorithm, optionally chunking the output into 76 character blocks.
  syntax:
    content: public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe, int maxResultSize)
    parameters:
    - id: binaryData
      type: byte[]
      description: Array containing binary data to encode.
    - id: isChunked
      type: boolean
      description: if <code>true</code> this encoder will chunk the base64 output into 76 character blocks
    - id: urlSafe
      type: boolean
      description: >-
        if <code>true</code> this encoder will emit - and _ instead of the usual + and / characters.
                    <b>Note: no padding is added when encoding using the URL-safe alphabet.</b>
    - id: maxResultSize
      type: int
      description: The maximum result size to accept.
    return:
      type: byte[]
      description: Base64-encoded data.
- uid: org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[])
  id: encodeBase64Chunked(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64Chunked(byte[] binaryData)
  nameWithType: Base64.encodeBase64Chunked(byte[] binaryData)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64Chunked(byte[] binaryData)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64Chunked*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes binary data using the base64 algorithm and chunks the encoded output into 76 character blocks
  syntax:
    content: public static byte[] encodeBase64Chunked(byte[] binaryData)
    parameters:
    - id: binaryData
      type: byte[]
      description: binary data to encode
    return:
      type: byte[]
      description: Base64 characters chunked in 76 character blocks
- uid: org.apache.commons.codec.binary.Base64.encodeBase64String(byte[])
  id: encodeBase64String(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64String(byte[] binaryData)
  nameWithType: Base64.encodeBase64String(byte[] binaryData)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64String(byte[] binaryData)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64String*
  type: Method
  package: org.apache.commons.codec.binary
  summary: 'Encodes binary data using the base64 algorithm but does not chunk the output. NOTE: We changed the behaviour of this method from multi-line chunking (commons-codec-1.4) to single-line non-chunking (commons-codec-1.5).'
  syntax:
    content: public static String encodeBase64String(byte[] binaryData)
    parameters:
    - id: binaryData
      type: byte[]
      description: binary data to encode
    return:
      type: java.lang.String
      description: String containing Base64 characters.
- uid: org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[])
  id: encodeBase64URLSafe(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64URLSafe(byte[] binaryData)
  nameWithType: Base64.encodeBase64URLSafe(byte[] binaryData)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64URLSafe(byte[] binaryData)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64URLSafe*
  type: Method
  package: org.apache.commons.codec.binary
  summary: 'Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The url-safe variation emits - and \_ instead of + and / characters. **Note: no padding is added.**'
  syntax:
    content: public static byte[] encodeBase64URLSafe(byte[] binaryData)
    parameters:
    - id: binaryData
      type: byte[]
      description: binary data to encode
    return:
      type: byte[]
      description: byte[] containing Base64 characters in their UTF-8 representation.
- uid: org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[])
  id: encodeBase64URLSafeString(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeBase64URLSafeString(byte[] binaryData)
  nameWithType: Base64.encodeBase64URLSafeString(byte[] binaryData)
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString(byte[] binaryData)
  overload: org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString*
  type: Method
  package: org.apache.commons.codec.binary
  summary: 'Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the output. The url-safe variation emits - and \_ instead of + and / characters. **Note: no padding is added.**'
  syntax:
    content: public static String encodeBase64URLSafeString(byte[] binaryData)
    parameters:
    - id: binaryData
      type: byte[]
      description: binary data to encode
    return:
      type: java.lang.String
      description: String containing Base64 characters
- uid: org.apache.commons.codec.binary.Base64.encodeInteger(java.math.BigInteger)
  id: encodeInteger(java.math.BigInteger)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: encodeInteger(BigInteger bigInt)
  nameWithType: Base64.encodeInteger(BigInteger bigInt)
  fullName: org.apache.commons.codec.binary.Base64.encodeInteger(BigInteger bigInt)
  overload: org.apache.commons.codec.binary.Base64.encodeInteger*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Encodes to a byte64-encoded integer according to crypto standards such as W3C's XML-Signature.
  syntax:
    content: public static byte[] encodeInteger(BigInteger bigInt)
    parameters:
    - id: bigInt
      type: java.math.BigInteger
      description: a BigInteger
    return:
      type: byte[]
      description: A byte array containing base64 character data
- uid: org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[])
  id: isArrayByteBase64(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: isArrayByteBase64(byte[] arrayOctet)
  nameWithType: Base64.isArrayByteBase64(byte[] arrayOctet)
  fullName: org.apache.commons.codec.binary.Base64.isArrayByteBase64(byte[] arrayOctet)
  overload: org.apache.commons.codec.binary.Base64.isArrayByteBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the method treats whitespace as valid.
  syntax:
    content: public static boolean isArrayByteBase64(byte[] arrayOctet)
    parameters:
    - id: arrayOctet
      type: byte[]
      description: byte array to test
    return:
      type: boolean
      description: >-
        <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;
                 <code>false</code>, otherwise
- uid: org.apache.commons.codec.binary.Base64.isBase64(byte)
  id: isBase64(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: isBase64(byte octet)
  nameWithType: Base64.isBase64(byte octet)
  fullName: org.apache.commons.codec.binary.Base64.isBase64(byte octet)
  overload: org.apache.commons.codec.binary.Base64.isBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Returns whether or not the `octet` is in the base 64 alphabet.
  syntax:
    content: public static boolean isBase64(byte octet)
    parameters:
    - id: octet
      type: byte
      description: The value to test
    return:
      type: boolean
      description: <code>true</code> if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.
- uid: org.apache.commons.codec.binary.Base64.isBase64(byte[])
  id: isBase64(byte[])
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: isBase64(byte[] arrayOctet)
  nameWithType: Base64.isBase64(byte[] arrayOctet)
  fullName: org.apache.commons.codec.binary.Base64.isBase64(byte[] arrayOctet)
  overload: org.apache.commons.codec.binary.Base64.isBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the method treats whitespace as valid.
  syntax:
    content: public static boolean isBase64(byte[] arrayOctet)
    parameters:
    - id: arrayOctet
      type: byte[]
      description: byte array to test
    return:
      type: boolean
      description: >-
        <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is empty;
                 <code>false</code>, otherwise
- uid: org.apache.commons.codec.binary.Base64.isBase64(java.lang.String)
  id: isBase64(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: isBase64(String base64)
  nameWithType: Base64.isBase64(String base64)
  fullName: org.apache.commons.codec.binary.Base64.isBase64(String base64)
  overload: org.apache.commons.codec.binary.Base64.isBase64*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Tests a given String to see if it contains only valid characters within the Base64 alphabet. Currently the method treats whitespace as valid.
  syntax:
    content: public static boolean isBase64(String base64)
    parameters:
    - id: base64
      type: java.lang.String
      description: String to test
    return:
      type: boolean
      description: >-
        <code>true</code> if all characters in the String are valid characters in the Base64 alphabet or if
                 the String is empty; <code>false</code>, otherwise
- uid: org.apache.commons.codec.binary.Base64.isInAlphabet(byte)
  id: isInAlphabet(byte)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: isInAlphabet(byte octet)
  nameWithType: Base64.isInAlphabet(byte octet)
  fullName: org.apache.commons.codec.binary.Base64.isInAlphabet(byte octet)
  overload: org.apache.commons.codec.binary.Base64.isInAlphabet*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Returns whether or not the `octet` is in the Base64 alphabet.
  syntax:
    content: protected boolean isInAlphabet(byte octet)
    parameters:
    - id: octet
      type: byte
      description: The value to test
    return:
      type: boolean
      description: <code>true</code> if the value is defined in the the Base64 alphabet <code>false</code> otherwise.
- uid: org.apache.commons.codec.binary.Base64.isUrlSafe()
  id: isUrlSafe()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.binary.Base64
  langs:
  - java
  name: isUrlSafe()
  nameWithType: Base64.isUrlSafe()
  fullName: org.apache.commons.codec.binary.Base64.isUrlSafe()
  overload: org.apache.commons.codec.binary.Base64.isUrlSafe*
  type: Method
  package: org.apache.commons.codec.binary
  summary: Returns our current encode mode. True if we're URL-SAFE, false otherwise.
  syntax:
    content: public boolean isUrlSafe()
    return:
      type: boolean
      description: true if we're in URL-SAFE mode, false otherwise.
references:
- uid: org.apache.commons.codec.binary.Base64.Base64*
  name: Base64
  nameWithType: Base64.Base64
  fullName: org.apache.commons.codec.binary.Base64.Base64
  package: org.apache.commons.codec.binary
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: org.apache.commons.codec.binary.Base64.isUrlSafe*
  name: isUrlSafe
  nameWithType: Base64.isUrlSafe
  fullName: org.apache.commons.codec.binary.Base64.isUrlSafe
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.isArrayByteBase64*
  name: isArrayByteBase64
  nameWithType: Base64.isArrayByteBase64
  fullName: org.apache.commons.codec.binary.Base64.isArrayByteBase64
  package: org.apache.commons.codec.binary
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: org.apache.commons.codec.binary.Base64.isBase64*
  name: isBase64
  nameWithType: Base64.isBase64
  fullName: org.apache.commons.codec.binary.Base64.isBase64
  package: org.apache.commons.codec.binary
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.binary.Base64.encodeBase64*
  name: encodeBase64
  nameWithType: Base64.encodeBase64
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.encodeBase64String*
  name: encodeBase64String
  nameWithType: Base64.encodeBase64String
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64String
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.encodeBase64URLSafe*
  name: encodeBase64URLSafe
  nameWithType: Base64.encodeBase64URLSafe
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64URLSafe
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString*
  name: encodeBase64URLSafeString
  nameWithType: Base64.encodeBase64URLSafeString
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64URLSafeString
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.encodeBase64Chunked*
  name: encodeBase64Chunked
  nameWithType: Base64.encodeBase64Chunked
  fullName: org.apache.commons.codec.binary.Base64.encodeBase64Chunked
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.decodeBase64*
  name: decodeBase64
  nameWithType: Base64.decodeBase64
  fullName: org.apache.commons.codec.binary.Base64.decodeBase64
  package: org.apache.commons.codec.binary
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: org.apache.commons.codec.binary.Base64.decodeInteger*
  name: decodeInteger
  nameWithType: Base64.decodeInteger
  fullName: org.apache.commons.codec.binary.Base64.decodeInteger
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.encodeInteger*
  name: encodeInteger
  nameWithType: Base64.encodeInteger
  fullName: org.apache.commons.codec.binary.Base64.encodeInteger
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.Base64.isInAlphabet*
  name: isInAlphabet
  nameWithType: Base64.isInAlphabet
  fullName: org.apache.commons.codec.binary.Base64.isInAlphabet
  package: org.apache.commons.codec.binary
- uid: org.apache.commons.codec.binary.BaseNCodec
  name: BaseNCodec
  nameWithType: BaseNCodec
  fullName: org.apache.commons.codec.binary.BaseNCodec
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
  name: BaseNCodec.encode(Object)
  nameWithType: BaseNCodec.encode(Object)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(java.lang.Object)
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
  name: BaseNCodec.decode(String)
  nameWithType: BaseNCodec.decode(String)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.String)
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
  name: BaseNCodec.encodeAsString(byte[])
  nameWithType: BaseNCodec.encodeAsString(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeAsString(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
  name: BaseNCodec.getDefaultBufferSize()
  nameWithType: BaseNCodec.getDefaultBufferSize()
  fullName: org.apache.commons.codec.binary.BaseNCodec.getDefaultBufferSize()
- uid: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
  name: BaseNCodec.isWhiteSpace(byte)
  nameWithType: BaseNCodec.isWhiteSpace(byte)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isWhiteSpace(byte)
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
  name: BaseNCodec.decode(Object)
  nameWithType: BaseNCodec.decode(Object)
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(java.lang.Object)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
  name: BaseNCodec.encode(byte[])
  nameWithType: BaseNCodec.encode(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(byte[])
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
  name: BaseNCodec.isInAlphabet(byte[],boolean)
  nameWithType: BaseNCodec.isInAlphabet(byte[],boolean)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte[],boolean)
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
  name: BaseNCodec.isInAlphabet(byte)
  nameWithType: BaseNCodec.isInAlphabet(byte)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(byte)
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
  name: BaseNCodec.ensureBufferSize(int,BaseNCodec.Context)
  nameWithType: BaseNCodec.ensureBufferSize(int,BaseNCodec.Context)
  fullName: org.apache.commons.codec.binary.BaseNCodec.ensureBufferSize(int,org.apache.commons.codec.binary.BaseNCodec.Context)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
  name: BaseNCodec.encode(byte[],int,int)
  nameWithType: BaseNCodec.encode(byte[],int,int)
  fullName: org.apache.commons.codec.binary.BaseNCodec.encode(byte[],int,int)
- uid: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
  name: BaseNCodec.containsAlphabetOrPad(byte[])
  nameWithType: BaseNCodec.containsAlphabetOrPad(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.containsAlphabetOrPad(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
  name: BaseNCodec.isInAlphabet(String)
  nameWithType: BaseNCodec.isInAlphabet(String)
  fullName: org.apache.commons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)
- uid: org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
  name: BaseNCodec.encodeToString(byte[])
  nameWithType: BaseNCodec.encodeToString(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.encodeToString(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
  name: BaseNCodec.getEncodedLength(byte[])
  nameWithType: BaseNCodec.getEncodedLength(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.getEncodedLength(byte[])
- uid: org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
  name: BaseNCodec.decode(byte[])
  nameWithType: BaseNCodec.decode(byte[])
  fullName: org.apache.commons.codec.binary.BaseNCodec.decode(byte[])
