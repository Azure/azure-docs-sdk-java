### YamlMime:ManagedReference
items:
- uid: com.azure.cosmos.implementation.guava25.collect.Lists
  id: Lists
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect
  children:
  - com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct(java.util.List<? extends B>...)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct(java.util.List<? extends java.util.List<? extends B>>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList(E,E,E[])
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList(E,E[])
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList()
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(E...)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(java.util.Iterator<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithCapacity(int)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithExpectedSize(int)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList()
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList()
  - com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList(java.lang.Iterable<? extends E>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<F,T>transform(java.util.List<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<T>partition(java.util.List<T>,int)
  - com.azure.cosmos.implementation.guava25.collect.Lists.<T>reverse(java.util.List<T>)
  - com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf(java.lang.CharSequence)
  - com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf(java.lang.String)
  langs:
  - java
  name: Lists
  nameWithType: Lists
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists
  type: Class
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Static utility methods pertaining to <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref> instances. Also see this class's counterparts <xref uid="com.azure.cosmos.implementation.guava25.collect.Sets" data-throw-if-not-resolved="false">Sets</xref>, <xref uid="com.azure.cosmos.implementation.guava25.collect.Maps" data-throw-if-not-resolved="false">Maps</xref> and <xref uid="" data-throw-if-not-resolved="false">Queues</xref>.


    See the Guava User Guide article on [ `Lists`][_Lists].



    [_Lists]: https://github.com/google/guava/wiki/CollectionUtilitiesExplained#lists
  syntax:
    content: public final class Lists
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct(java.util.List<? extends B>...)
  id: <B>cartesianProduct(java.util.List<? extends B>...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <B>cartesianProduct(List<? extends B>[] lists)
  nameWithType: Lists.<B>cartesianProduct(List<? extends B>[] lists)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct(List<? extends B>[] lists)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.cartesianProduct*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns every possible list that can be formed by choosing one element from each of the given lists in order; the "n-ary [Cartesian product][]" of the lists. For example:


    ```java

    Lists.cartesianProduct(ImmutableList.of(
         ImmutableList.of(1, 2),
         ImmutableList.of("A", "B", "C")))
    ```


    returns a list containing six lists in the following order:

     *  `ImmutableList.of(1, "A")`
     *  `ImmutableList.of(1, "B")`
     *  `ImmutableList.of(1, "C")`
     *  `ImmutableList.of(2, "A")`
     *  `ImmutableList.of(2, "B")`
     *  `ImmutableList.of(2, "C")`

    The result is guaranteed to be in the "traditional", lexicographical order for Cartesian products that you would get from nesting for loops:


    ```java

    for (B b0 : lists.get(0)) {
       for (B b1 : lists.get(1)) {
         ...
         ImmutableList tuple = ImmutableList.of(b0, b1, ...);
         // operate on tuple
       }
     }
    ```


    Note that if any input list is empty, the Cartesian product will also be empty. If no lists at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent).


    *Performance notes:* while the cartesian product of lists of size `m, n, p` is a list of size `m x n x p`, its actual memory consumption is much smaller. When the cartesian product is constructed, the input lists are merely copied. Only as the resulting list is iterated are the individual lists created, and these are not retained after iteration.



    [Cartesian product]: http://en.wikipedia.org/wiki/Cartesian_product
  syntax:
    content: public static List<List<B>> <B>cartesianProduct(List<? extends B>[] lists)
    parameters:
    - id: lists
      type: java.util.List<? extends B>[]
      description: >-
        the lists to choose elements from, in the order that the elements chosen from
             those lists should appear in the resulting lists
    return:
      type: java.util.List<java.util.List<B>>
      description: the Cartesian product, as an immutable list containing immutable lists
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct(java.util.List<? extends java.util.List<? extends B>>)
  id: <B>cartesianProduct(java.util.List<? extends java.util.List<? extends B>>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <B>cartesianProduct(List<? extends List<? extends B>> lists)
  nameWithType: Lists.<B>cartesianProduct(List<? extends List<? extends B>> lists)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct(List<? extends List<? extends B>> lists)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.cartesianProduct*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns every possible list that can be formed by choosing one element from each of the given lists in order; the "n-ary [Cartesian product][]" of the lists. For example:


    ```java

    Lists.cartesianProduct(ImmutableList.of(
         ImmutableList.of(1, 2),
         ImmutableList.of("A", "B", "C")))
    ```


    returns a list containing six lists in the following order:

     *  `ImmutableList.of(1, "A")`
     *  `ImmutableList.of(1, "B")`
     *  `ImmutableList.of(1, "C")`
     *  `ImmutableList.of(2, "A")`
     *  `ImmutableList.of(2, "B")`
     *  `ImmutableList.of(2, "C")`

    The result is guaranteed to be in the "traditional", lexicographical order for Cartesian products that you would get from nesting for loops:


    ```java

    for (B b0 : lists.get(0)) {
       for (B b1 : lists.get(1)) {
         ...
         ImmutableList tuple = ImmutableList.of(b0, b1, ...);
         // operate on tuple
       }
     }
    ```


    Note that if any input list is empty, the Cartesian product will also be empty. If no lists at all are provided (an empty list), the resulting Cartesian product has one element, an empty list (counter-intuitive, but mathematically consistent).


    *Performance notes:* while the cartesian product of lists of size `m, n, p` is a list of size `m x n x p`, its actual memory consumption is much smaller. When the cartesian product is constructed, the input lists are merely copied. Only as the resulting list is iterated are the individual lists created, and these are not retained after iteration.



    [Cartesian product]: http://en.wikipedia.org/wiki/Cartesian_product
  syntax:
    content: public static List<List<B>> <B>cartesianProduct(List<? extends List<? extends B>> lists)
    parameters:
    - id: lists
      type: java.util.List<? extends java.util.List<? extends B>>
      description: >-
        the lists to choose elements from, in the order that the elements chosen from
             those lists should appear in the resulting lists
    return:
      type: java.util.List<java.util.List<B>>
      description: the Cartesian product, as an immutable list containing immutable lists
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList(E,E,E[])
  id: <E>asList(E,E,E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>asList(E first, E second, E[] rest)
  nameWithType: Lists.<E>asList(E first, E second, E[] rest)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList(E first, E second, E[] rest)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable list containing the specified first and second element, and backed by the specified array of additional elements. Changes to the `rest` array will be reflected in the returned list. Unlike <xref uid="" data-throw-if-not-resolved="false">Arrays#asList</xref>, the returned list is unmodifiable.


    This is useful when a varargs method needs to use a signature such as `(Foo firstFoo, Foo secondFoo, Foo... moreFoos)`, in order to avoid overload ambiguity or to enforce a minimum argument count.


    The returned list is serializable and implements <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">RandomAccess</xref>.
  syntax:
    content: public static List<E> <E>asList(E first, E second, E[] rest)
    parameters:
    - id: first
      type: E
      description: the first element
    - id: second
      type: E
      description: the second element
    - id: rest
      type: E[]
      description: an array of additional elements, possibly empty
    return:
      type: java.util.List<E>
      description: an unmodifiable list containing the specified elements
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList(E,E[])
  id: <E>asList(E,E[])
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>asList(E first, E[] rest)
  nameWithType: Lists.<E>asList(E first, E[] rest)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList(E first, E[] rest)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.asList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns an unmodifiable list containing the specified first element and backed by the specified array of additional elements. Changes to the `rest` array will be reflected in the returned list. Unlike <xref uid="" data-throw-if-not-resolved="false">Arrays#asList</xref>, the returned list is unmodifiable.


    This is useful when a varargs method needs to use a signature such as `(Foo firstFoo, Foo... moreFoos)`, in order to avoid overload ambiguity or to enforce a minimum argument count.


    The returned list is serializable and implements <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">RandomAccess</xref>.
  syntax:
    content: public static List<E> <E>asList(E first, E[] rest)
    parameters:
    - id: first
      type: E
      description: the first element
    - id: rest
      type: E[]
      description: an array of additional elements, possibly empty
    return:
      type: java.util.List<E>
      description: an unmodifiable list containing the specified elements
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList()
  id: <E>newArrayList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newArrayList()
  nameWithType: Lists.<E>newArrayList()
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList()
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a *mutable*, empty `ArrayList` instance (for Java 6 and earlier).


    **Note:** if mutability is not required, use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;of()" data-throw-if-not-resolved="false">ImmutableList#of()</xref> instead.


    **Note for Java 7 and later:** this method is now unnecessary and should be treated as deprecated. Instead, use the `ArrayList` <xref uid="java.util.ArrayList.ArrayList*" data-throw-if-not-resolved="false">constructor</xref> directly, taking advantage of the new ["diamond" syntax][diamond_ syntax].



    [diamond_ syntax]: http://goo.gl/iz2Wi
  syntax:
    content: public static ArrayList<E> <E>newArrayList()
    return:
      type: java.util.ArrayList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(E...)
  id: <E>newArrayList(E...)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newArrayList(E[] elements)
  nameWithType: Lists.<E>newArrayList(E[] elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(E[] elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a *mutable* `ArrayList` instance containing the given elements.


    **Note:** essentially the only reason to use this method is when you will need to add or remove elements later. Otherwise, for non-null elements use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;of()" data-throw-if-not-resolved="false">ImmutableList#of()</xref> (for varargs) or <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.copyOf*" data-throw-if-not-resolved="false">ImmutableList#copyOf(Object[])</xref> (for an array) instead. If any elements might be null, or you need support for <xref uid="java.util.List.set*" data-throw-if-not-resolved="false">List#set(int, Object)</xref>, use <xref uid="" data-throw-if-not-resolved="false">Arrays#asList</xref>.


    Note that even when you do need the ability to add or remove, this method provides only a tiny bit of syntactic sugar for `newArrayList(`<xref uid="" data-throw-if-not-resolved="false">asList</xref>`(...))`, or for creating an empty list then calling <xref uid="" data-throw-if-not-resolved="false">Collections#addAll</xref>. This method is not actually very useful and will likely be deprecated in the future.
  syntax:
    content: public static ArrayList<E> <E>newArrayList(E[] elements)
    parameters:
    - id: elements
      type: E[]
    return:
      type: java.util.ArrayList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(java.lang.Iterable<? extends E>)
  id: <E>newArrayList(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newArrayList(Iterable<? extends E> elements)
  nameWithType: Lists.<E>newArrayList(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a *mutable* `ArrayList` instance containing the given elements; a very thin shortcut for creating an empty list then calling <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.addAll" data-throw-if-not-resolved="false">Iterables#addAll</xref>.


    **Note:** if mutability is not required and the elements are non-null, use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;copyOf(java.lang.Iterable&lt;? extends E&gt;)" data-throw-if-not-resolved="false">ImmutableList#copyOf(Iterable)</xref> instead. (Or, change `elements` to be a <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable" data-throw-if-not-resolved="false">FluentIterable</xref> and call `elements.toList()`.)


    **Note for Java 7 and later:** if `elements` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, you don't need this method. Use the `ArrayList` <xref uid="java.util.ArrayList.ArrayList*" data-throw-if-not-resolved="false">constructor</xref> directly, taking advantage of the new ["diamond" syntax][diamond_ syntax].



    [diamond_ syntax]: http://goo.gl/iz2Wi
  syntax:
    content: public static ArrayList<E> <E>newArrayList(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: java.util.ArrayList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(java.util.Iterator<? extends E>)
  id: <E>newArrayList(java.util.Iterator<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newArrayList(Iterator<? extends E> elements)
  nameWithType: Lists.<E>newArrayList(Iterator<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(Iterator<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a *mutable* `ArrayList` instance containing the given elements; a very thin shortcut for creating an empty list and then calling <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterators.addAll" data-throw-if-not-resolved="false">Iterators#addAll</xref>.


    **Note:** if mutability is not required and the elements are non-null, use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;copyOf(java.util.Iterator&lt;? extends E&gt;)" data-throw-if-not-resolved="false">ImmutableList#copyOf(Iterator)</xref> instead.
  syntax:
    content: public static ArrayList<E> <E>newArrayList(Iterator<? extends E> elements)
    parameters:
    - id: elements
      type: java.util.Iterator<? extends E>
    return:
      type: java.util.ArrayList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithCapacity(int)
  id: <E>newArrayListWithCapacity(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newArrayListWithCapacity(int initialArraySize)
  nameWithType: Lists.<E>newArrayListWithCapacity(int initialArraySize)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithCapacity(int initialArraySize)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayListWithCapacity*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates an `ArrayList` instance backed by an array with the specified initial size; simply delegates to <xref uid="java.util.ArrayList.ArrayList*" data-throw-if-not-resolved="false">ArrayList#ArrayList(int)</xref>.


    **Note for Java 7 and later:** this method is now unnecessary and should be treated as deprecated. Instead, use `new`<xref uid="java.util.ArrayList.ArrayList*" data-throw-if-not-resolved="false">ArrayList</xref>`<>(int)` directly, taking advantage of the new ["diamond" syntax][diamond_ syntax]. (Unlike here, there is no risk of overload ambiguity, since the `ArrayList` constructors very wisely did not accept varargs.)



    [diamond_ syntax]: http://goo.gl/iz2Wi
  syntax:
    content: public static ArrayList<E> <E>newArrayListWithCapacity(int initialArraySize)
    parameters:
    - id: initialArraySize
      type: int
      description: >-
        the exact size of the initial backing array for the returned array list
             (<code>ArrayList</code> documentation calls this value the "capacity")
    return:
      type: java.util.ArrayList<E>
      description: >-
        a new, empty <code>ArrayList</code> which is guaranteed not to resize itself unless its size
             reaches <code>initialArraySize + 1</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithExpectedSize(int)
  id: <E>newArrayListWithExpectedSize(int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newArrayListWithExpectedSize(int estimatedSize)
  nameWithType: Lists.<E>newArrayListWithExpectedSize(int estimatedSize)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithExpectedSize(int estimatedSize)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayListWithExpectedSize*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates an `ArrayList` instance to hold `estimatedSize` elements, *plus* an unspecified amount of padding; you almost certainly mean to call <xref uid="com.azure.cosmos.implementation.guava25.collect.Lists.newArrayListWithCapacity" data-throw-if-not-resolved="false">#newArrayListWithCapacity</xref> (see that method for further advice on usage).


    **Note:** This method will soon be deprecated. Even in the rare case that you do want some amount of padding, it's best if you choose your desired amount explicitly.
  syntax:
    content: public static ArrayList<E> <E>newArrayListWithExpectedSize(int estimatedSize)
    parameters:
    - id: estimatedSize
      type: int
      description: an estimate of the eventual <xref uid="java.util.List.size*" data-throw-if-not-resolved="false">List#size()</xref> of the new list
    return:
      type: java.util.ArrayList<E>
      description: >-
        a new, empty <code>ArrayList</code>, sized appropriately to hold the estimated number of
             elements
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList()
  id: <E>newCopyOnWriteArrayList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newCopyOnWriteArrayList()
  nameWithType: Lists.<E>newCopyOnWriteArrayList()
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList()
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newCopyOnWriteArrayList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates an empty `CopyOnWriteArrayList` instance.


    **Note:** if you need an immutable empty <xref uid="java.util.List" data-throw-if-not-resolved="false">List</xref>, use <xref uid="" data-throw-if-not-resolved="false">Collections#emptyList</xref> instead.
  syntax:
    content: public static CopyOnWriteArrayList<E> <E>newCopyOnWriteArrayList()
    return:
      type: java.util.concurrent.CopyOnWriteArrayList<E>
      description: a new, empty <code>CopyOnWriteArrayList</code>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)
  id: <E>newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newCopyOnWriteArrayList(Iterable<? extends E> elements)
  nameWithType: Lists.<E>newCopyOnWriteArrayList(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newCopyOnWriteArrayList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Creates a `CopyOnWriteArrayList` instance containing the given elements.
  syntax:
    content: public static CopyOnWriteArrayList<E> <E>newCopyOnWriteArrayList(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
      description: the elements that the list should contain, in order
    return:
      type: java.util.concurrent.CopyOnWriteArrayList<E>
      description: a new <code>CopyOnWriteArrayList</code> containing those elements
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList()
  id: <E>newLinkedList()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newLinkedList()
  nameWithType: Lists.<E>newLinkedList()
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList()
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newLinkedList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a *mutable*, empty `LinkedList` instance (for Java 6 and earlier).


    **Note:** if you won't be adding any elements to the list, use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;of()" data-throw-if-not-resolved="false">ImmutableList#of()</xref> instead.


    **Performance note:** <xref uid="java.util.ArrayList" data-throw-if-not-resolved="false">ArrayList</xref> and <xref uid="" data-throw-if-not-resolved="false">java.util.ArrayDeque</xref> consistently outperform `LinkedList` except in certain rare and specific situations. Unless you have spent a lot of time benchmarking your specific needs, use one of those instead.


    **Note for Java 7 and later:** this method is now unnecessary and should be treated as deprecated. Instead, use the `LinkedList` <xref uid="java.util.LinkedList.LinkedList*" data-throw-if-not-resolved="false">constructor</xref> directly, taking advantage of the new ["diamond" syntax][diamond_ syntax].



    [diamond_ syntax]: http://goo.gl/iz2Wi
  syntax:
    content: public static LinkedList<E> <E>newLinkedList()
    return:
      type: java.util.LinkedList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList(java.lang.Iterable<? extends E>)
  id: <E>newLinkedList(java.lang.Iterable<? extends E>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <E>newLinkedList(Iterable<? extends E> elements)
  nameWithType: Lists.<E>newLinkedList(Iterable<? extends E> elements)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList(Iterable<? extends E> elements)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.newLinkedList*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Creates a *mutable* `LinkedList` instance containing the given elements; a very thin shortcut for creating an empty list then calling <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.addAll" data-throw-if-not-resolved="false">Iterables#addAll</xref>.


    **Note:** if mutability is not required and the elements are non-null, use <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;copyOf(java.lang.Iterable&lt;? extends E&gt;)" data-throw-if-not-resolved="false">ImmutableList#copyOf(Iterable)</xref> instead. (Or, change `elements` to be a <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable" data-throw-if-not-resolved="false">FluentIterable</xref> and call `elements.toList()`.)


    **Performance note:** <xref uid="java.util.ArrayList" data-throw-if-not-resolved="false">ArrayList</xref> and <xref uid="" data-throw-if-not-resolved="false">java.util.ArrayDeque</xref> consistently outperform `LinkedList` except in certain rare and specific situations. Unless you have spent a lot of time benchmarking your specific needs, use one of those instead.


    **Note for Java 7 and later:** if `elements` is a <xref uid="java.util.Collection" data-throw-if-not-resolved="false">Collection</xref>, you don't need this method. Use the `LinkedList` <xref uid="java.util.LinkedList.LinkedList*" data-throw-if-not-resolved="false">constructor</xref> directly, taking advantage of the new ["diamond" syntax][diamond_ syntax].



    [diamond_ syntax]: http://goo.gl/iz2Wi
  syntax:
    content: public static LinkedList<E> <E>newLinkedList(Iterable<? extends E> elements)
    parameters:
    - id: elements
      type: java.lang.Iterable<? extends E>
    return:
      type: java.util.LinkedList<E>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<F,T>transform(java.util.List<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  id: <F,T>transform(java.util.List<F>,com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <F,T>transform(List<F> fromList, Function<? super F,? extends T> function)
  nameWithType: Lists.<F,T>transform(List<F> fromList, Function<? super F,? extends T> function)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<F,T>transform(List<F> fromList, Function<? super F,? extends T> function)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.transform*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a list that applies `function` to each element of `fromList`. The returned list is a transformed view of `fromList`; changes to `fromList` will be reflected in the returned list and vice versa.


    Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The `add`, `addAll` and `set` methods are unsupported in the returned list.


    The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like <xref uid="java.util.List.contains" data-throw-if-not-resolved="false">List#contains</xref> and <xref uid="java.util.List.hashCode" data-throw-if-not-resolved="false">List#hashCode</xref>. For this to perform well, `function` should be fast. To avoid lazy evaluation when the returned list doesn't need to be a view, copy the returned list into a new list of your choosing.


    If `fromList` implements <xref uid="java.util.RandomAccess" data-throw-if-not-resolved="false">RandomAccess</xref>, so will the returned list. The returned list is threadsafe if the supplied list and function are.


    If only a `Collection` or `Iterable` input is available, use <xref uid="com.azure.cosmos.implementation.guava25.collect.Collections2.transform" data-throw-if-not-resolved="false">Collections2#transform</xref> or <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables.transform" data-throw-if-not-resolved="false">Iterables#transform</xref>.


    **Note:** serializing the returned list is implemented by serializing `fromList`, its contents, and `function` \-- *not* by serializing the transformed values. This can lead to surprising behavior, so serializing the returned list is **not recommended**. Instead, copy the list using <xref uid="com.azure.cosmos.implementation.guava25.collect.ImmutableList.&lt;E&gt;copyOf(java.util.Collection&lt;? extends E&gt;)" data-throw-if-not-resolved="false">ImmutableList#copyOf(Collection)</xref> (for example), then serialize the copy. Other methods similar to this do not implement serialization at all for this reason.


    **Java 8 users:** many use cases for this method are better addressed by <xref uid="java.util.stream.Stream.map" data-throw-if-not-resolved="false">java.util.stream.Stream#map</xref>. This method is not being deprecated, but we gently encourage you to migrate to streams.
  syntax:
    content: public static List<T> <F,T>transform(List<F> fromList, Function<? super F,? extends T> function)
    parameters:
    - id: fromList
      type: java.util.List<F>
    - id: function
      type: com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>
    return:
      type: java.util.List<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<T>partition(java.util.List<T>,int)
  id: <T>partition(java.util.List<T>,int)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <T>partition(List<T> list, int size)
  nameWithType: Lists.<T>partition(List<T> list, int size)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<T>partition(List<T> list, int size)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.partition*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns consecutive <xref uid="java.util.List.subList*" data-throw-if-not-resolved="false">sublists</xref> of a list, each of the same size (the final list may be smaller). For example, partitioning a list containing `[a, b, c, d, e]` with a partition size of 3 yields `[[a, b, c], [d, e]]` \-- an outer list containing two inner lists of three and two elements, all in the original order.


    The outer list is unmodifiable, but reflects the latest state of the source list. The inner lists are sublist views of the original list, produced on demand using <xref uid="List#subList(int,
     int)" data-throw-if-not-resolved="false">List#subList(int,
     int)</xref>, and are subject to all the usual caveats about modification as explained in that API.
  syntax:
    content: public static List<List<T>> <T>partition(List<T> list, int size)
    parameters:
    - id: list
      type: java.util.List<T>
      description: the list to return consecutive sublists of
    - id: size
      type: int
      description: the desired size of each sublist (the last may be smaller)
    return:
      type: java.util.List<java.util.List<T>>
      description: a list of consecutive sublists
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<T>reverse(java.util.List<T>)
  id: <T>reverse(java.util.List<T>)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: <T>reverse(List<T> list)
  nameWithType: Lists.<T>reverse(List<T> list)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<T>reverse(List<T> list)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.reverse*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: >-
    Returns a reversed view of the specified list. For example, `Lists.reverse(Arrays.asList(1, 2, 3))` returns a list containing `3, 2, 1`. The returned list is backed by this list, so changes in the returned list are reflected in this list, and vice-versa. The returned list supports all of the optional list operations supported by this list.


    The returned list is random-access if the specified list is random access.
  syntax:
    content: public static List<T> <T>reverse(List<T> list)
    parameters:
    - id: list
      type: java.util.List<T>
    return:
      type: java.util.List<T>
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.Lists()
  id: Lists()
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: Lists()
  nameWithType: Lists.Lists()
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.Lists()
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.Lists*
  type: Constructor
  package: com.azure.cosmos.implementation.guava25.collect
  syntax:
    content: private Lists()
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf(java.lang.CharSequence)
  id: charactersOf(java.lang.CharSequence)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: charactersOf(CharSequence sequence)
  nameWithType: Lists.charactersOf(CharSequence sequence)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf(CharSequence sequence)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of the specified `CharSequence` as a `List`, viewing `sequence` as a sequence of Unicode code units. The view does not support any modification operations, but reflects any changes to the underlying character sequence.
  syntax:
    content: public static List<Character> charactersOf(CharSequence sequence)
    parameters:
    - id: sequence
      type: java.lang.CharSequence
      description: the character sequence to view as a <code>List</code> of characters
    return:
      type: java.util.List<java.lang.Character>
      description: an <code>List<Character></code> view of the character sequence
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf(java.lang.String)
  id: charactersOf(java.lang.String)
  artifact: com.azure:azure-cosmos:4.3.2-beta.2
  parent: com.azure.cosmos.implementation.guava25.collect.Lists
  langs:
  - java
  name: charactersOf(String string)
  nameWithType: Lists.charactersOf(String string)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf(String string)
  overload: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf*
  type: Method
  package: com.azure.cosmos.implementation.guava25.collect
  summary: Returns a view of the specified string as an immutable list of `Character` values.
  syntax:
    content: public static ImmutableList<Character> charactersOf(String string)
    parameters:
    - id: string
      type: java.lang.String
    return:
      type: com.azure.cosmos.implementation.guava25.collect.ImmutableList<java.lang.Character>
references:
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.Lists*
  name: Lists
  nameWithType: Lists.Lists
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.Lists
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.ArrayList<E>
  spec.java:
  - uid: java.util.ArrayList
    name: ArrayList
    fullName: java.util.ArrayList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayList*
  name: <E>newArrayList
  nameWithType: Lists.<E>newArrayList
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E[]
  spec.java:
  - uid: E
    name: E
    fullName: E
  - name: '[]'
    fullName: '[]'
- uid: java.lang.Iterable<? extends E>
  spec.java:
  - uid: java.lang.Iterable
    name: Iterable
    fullName: java.lang.Iterable
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: java.util.Iterator<? extends E>
  spec.java:
  - uid: java.util.Iterator
    name: Iterator
    fullName: java.util.Iterator
  - name: <
    fullName: <
  - uid: '? extends E'
    name: '? extends E'
    fullName: '? extends E'
  - name: '>'
    fullName: '>'
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayListWithCapacity*
  name: <E>newArrayListWithCapacity
  nameWithType: Lists.<E>newArrayListWithCapacity
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithCapacity
  package: com.azure.cosmos.implementation.guava25.collect
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayListWithExpectedSize*
  name: <E>newArrayListWithExpectedSize
  nameWithType: Lists.<E>newArrayListWithExpectedSize
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayListWithExpectedSize
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.LinkedList<E>
  spec.java:
  - uid: java.util.LinkedList
    name: LinkedList
    fullName: java.util.LinkedList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.newLinkedList*
  name: <E>newLinkedList
  nameWithType: Lists.<E>newLinkedList
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newLinkedList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.concurrent.CopyOnWriteArrayList<E>
  spec.java:
  - uid: java.util.concurrent.CopyOnWriteArrayList
    name: CopyOnWriteArrayList
    fullName: java.util.concurrent.CopyOnWriteArrayList
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.newCopyOnWriteArrayList*
  name: <E>newCopyOnWriteArrayList
  nameWithType: Lists.<E>newCopyOnWriteArrayList
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newCopyOnWriteArrayList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: E
  spec.java:
  - uid: E
    name: E
    fullName: E
- uid: java.util.List<E>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: E
    name: E
    fullName: E
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.asList*
  name: <E>asList
  nameWithType: Lists.<E>asList
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>asList
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<? extends java.util.List<? extends B>>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: '? extends java.util.List'
    name: List
    fullName: '? extends java.util.List'
  - name: <
    fullName: <
  - uid: '? extends B'
    name: '? extends B'
    fullName: '? extends B'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: java.util.List<java.util.List<B>>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: B
    name: B
    fullName: B
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.cartesianProduct*
  name: <B>cartesianProduct
  nameWithType: Lists.<B>cartesianProduct
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<B>cartesianProduct
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<? extends B>[]
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: '? extends B'
    name: '? extends B'
    fullName: '? extends B'
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
- uid: java.util.List<F>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: F
    name: F
    fullName: F
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.base.Function<? super F,? extends T>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.base.Function
    name: Function
    fullName: com.azure.cosmos.implementation.guava25.base.Function
  - name: <
    fullName: <
  - uid: '? super F'
    name: '? super F'
    fullName: '? super F'
  - name: ','
    fullName: ','
  - uid: '? extends T'
    name: '? extends T'
    fullName: '? extends T'
  - name: '>'
    fullName: '>'
- uid: java.util.List<T>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.transform*
  name: <F,T>transform
  nameWithType: Lists.<F,T>transform
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<F,T>transform
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.util.List<java.util.List<T>>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: T
    name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.partition*
  name: <T>partition
  nameWithType: Lists.<T>partition
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<T>partition
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList<java.lang.Character>
  spec.java:
  - uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
    name: ImmutableList
    fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  - name: <
    fullName: <
  - uid: java.lang.Character
    name: Character
    fullName: java.lang.Character
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf*
  name: charactersOf
  nameWithType: Lists.charactersOf
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.charactersOf
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.CharSequence
  spec.java:
  - uid: java.lang.CharSequence
    name: CharSequence
    fullName: java.lang.CharSequence
- uid: java.util.List<java.lang.Character>
  spec.java:
  - uid: java.util.List
    name: List
    fullName: java.util.List
  - name: <
    fullName: <
  - uid: java.lang.Character
    name: Character
    fullName: java.lang.Character
  - name: '>'
    fullName: '>'
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.reverse*
  name: <T>reverse
  nameWithType: Lists.<T>reverse
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<T>reverse
  package: com.azure.cosmos.implementation.guava25.collect
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.util.ArrayList
  name: ArrayList
  nameWithType: ArrayList
  fullName: java.util.ArrayList
- uid: '? extends E'
  name: '? extends E'
  nameWithType: '? extends E'
  fullName: '? extends E'
- uid: java.lang.Iterable
  name: Iterable
  nameWithType: Iterable
  fullName: java.lang.Iterable
- uid: java.util.Iterator
  name: Iterator
  nameWithType: Iterator
  fullName: java.util.Iterator
- uid: java.util.LinkedList
  name: LinkedList
  nameWithType: LinkedList
  fullName: java.util.LinkedList
- uid: java.util.concurrent.CopyOnWriteArrayList
  name: CopyOnWriteArrayList
  nameWithType: CopyOnWriteArrayList
  fullName: java.util.concurrent.CopyOnWriteArrayList
- uid: java.util.List
  name: List
  nameWithType: List
  fullName: java.util.List
- uid: '? extends java.util.List'
  name: '? extends List'
  nameWithType: '? extends List'
  fullName: '? extends java.util.List'
- uid: '? extends B'
  name: '? extends B'
  nameWithType: '? extends B'
  fullName: '? extends B'
- uid: B
  name: B
  nameWithType: B
  fullName: B
- uid: '? extends B>[]'
  name: '? extends B>[]'
  nameWithType: '? extends B>[]'
  fullName: '? extends B>[]'
- uid: F
  name: F
  nameWithType: F
  fullName: F
- uid: com.azure.cosmos.implementation.guava25.base.Function
  name: Function
  nameWithType: Function
  fullName: com.azure.cosmos.implementation.guava25.base.Function
- uid: '? super F,? extends T'
  name: '? super F,? extends T'
  nameWithType: '? super F,? extends T'
  fullName: '? super F,? extends T'
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: com.azure.cosmos.implementation.guava25.collect.ImmutableList
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: com.azure.cosmos.implementation.guava25.collect.ImmutableList
- uid: java.lang.Character
  name: Character
  nameWithType: Character
  fullName: java.lang.Character
