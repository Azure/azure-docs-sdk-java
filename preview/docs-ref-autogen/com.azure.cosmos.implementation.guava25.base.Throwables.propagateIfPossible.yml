### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible*"
fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.<X1,X2>propagateIfPossible"
name: "<X1,X2>propagateIfPossible"
nameWithType: "Throwables.<X1,X2>propagateIfPossible"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Throwables.<X1,X2>propagateIfPossible(java.lang.Throwable,java.lang.Class<X1>,java.lang.Class<X2>)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.<X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)"
  name: "<X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)"
  nameWithType: "Throwables.<X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)"
  summary: "Propagates `throwable` exactly as-is, if and only if it is an instance of <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Error\"></xref>, `declaredType1`, or `declaredType2`. In the unlikely case that you have three or more declared checked exception types, you can handle them all by invoking these methods repeatedly. See usage example in <xref uid=\"com.azure.cosmos.implementation.guava25.base.Throwables.&lt;X&gt;propagateIfPossible(java.lang.Throwable,java.lang.Class&lt;X&gt;)\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#propagateIfPossible(Throwable, Class)\"></xref>."
  parameters:
  - description: "the Throwable to possibly propagate"
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  - description: "any checked exception type declared by the calling method"
    name: "declaredType1"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"X1?alt=X1&text=X1\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "any other checked exception type declared by the calling method"
    name: "declaredType2"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"X2?alt=X2&text=X2\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static void <X1,X2>propagateIfPossible(Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)"
  exceptions:
  - type: "<xref href=\"X1?alt=X1&text=X1\" data-throw-if-not-resolved=\"False\" />"
  - type: "<xref href=\"X2?alt=X2&text=X2\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfPossible(java.lang.Throwable,java.lang.Class<X>)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.<X>propagateIfPossible(Throwable throwable, Class<X> declaredType)"
  name: "<X>propagateIfPossible(Throwable throwable, Class<X> declaredType)"
  nameWithType: "Throwables.<X>propagateIfPossible(Throwable throwable, Class<X> declaredType)"
  summary: "Propagates `throwable` exactly as-is, if and only if it is an instance of <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref>, <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Error\"></xref>, or `declaredType`. Example usage:\n\n```java\ntry {\n   someMethodThatCouldThrowAnything();\n } catch (IKnowWhatToDoWithThisException e) {\n   handle(e);\n } catch (Throwable t) {\n   Throwables.propagateIfPossible(t, OtherException.class);\n   throw new RuntimeException(\"unexpected\", t);\n }\n```"
  parameters:
  - description: "the Throwable to possibly propagate"
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  - description: "the single checked exception type declared by the calling method"
    name: "declaredType"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"X?alt=X&text=X\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static void <X>propagateIfPossible(Throwable throwable, Class<X> declaredType)"
  exceptions:
  - type: "<xref href=\"X?alt=X&text=X\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible(java.lang.Throwable)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.propagateIfPossible(Throwable throwable)"
  name: "propagateIfPossible(Throwable throwable)"
  nameWithType: "Throwables.propagateIfPossible(Throwable throwable)"
  summary: "Propagates `throwable` exactly as-is, if and only if it is an instance of <xref uid=\"java.lang.RuntimeException\" data-throw-if-not-resolved=\"false\" data-raw-source=\"RuntimeException\"></xref> or <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Error\"></xref>. Example usage:\n\n```java\ntry {\n   someMethodThatCouldThrowAnything();\n } catch (IKnowWhatToDoWithThisException e) {\n   handle(e);\n } catch (Throwable t) {\n   Throwables.propagateIfPossible(t);\n   throw new RuntimeException(\"unexpected\", t);\n }\n```"
  parameters:
  - name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static void propagateIfPossible(Throwable throwable)"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
