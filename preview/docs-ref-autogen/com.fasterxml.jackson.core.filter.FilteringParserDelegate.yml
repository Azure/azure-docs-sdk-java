### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  id: FilteringParserDelegate
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter
  children:
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.filter.TokenFilter,boolean,boolean)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._allowMultipleMatches
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._currToken
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._exposedContext
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._headContext
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._includeImmediateParent
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._includePath
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._itemFilter
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._lastClearedToken
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._matchCount
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(com.fasterxml.jackson.core.filter.TokenFilterContext)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue()
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.rootFilter
  - com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren()
  langs:
  - java
  name: FilteringParserDelegate
  nameWithType: FilteringParserDelegate
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  type: Class
  package: com.fasterxml.jackson.core.filter
  summary: Specialized <xref uid="com.fasterxml.jackson.core.util.JsonParserDelegate" data-throw-if-not-resolved="false">JsonParserDelegate</xref> that allows use of <xref uid="com.fasterxml.jackson.core.filter.TokenFilter" data-throw-if-not-resolved="false">TokenFilter</xref> for outputting a subset of content that is visible to caller
  syntax:
    content: public class FilteringParserDelegate extends JsonParserDelegate
  inheritance:
  - java.lang.Object
  - com.fasterxml.jackson.core.JsonParser
  - com.fasterxml.jackson.core.util.JsonParserDelegate
  inheritedMembers:
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  - com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  - com.fasterxml.jackson.core.JsonParser._codec()
  - com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  - com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  - com.fasterxml.jackson.core.JsonParser.canParseAsync()
  - com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  - com.fasterxml.jackson.core.JsonParser.currentName()
  - com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  - com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  - com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  - com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  - com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName()
  - com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  - com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  - com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  - com.fasterxml.jackson.core.JsonParser.nextTextValue()
  - com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  - com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  - com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.close()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getText()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getText(java.io.Writer)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(java.lang.String)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(java.lang.Object)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  - com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()
  - com.fasterxml.jackson.core.util.JsonParserDelegate.version()
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.filter.TokenFilter,boolean,boolean)
  id: FilteringParserDelegate(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.core.filter.TokenFilter,boolean,boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
  nameWithType: FilteringParserDelegate.FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.FilteringParserDelegate*
  type: Constructor
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public FilteringParserDelegate(JsonParser p, TokenFilter f, boolean includePath, boolean allowMultipleMatches)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: f
      type: com.fasterxml.jackson.core.filter.TokenFilter
    - id: includePath
      type: boolean
    - id: allowMultipleMatches
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._allowMultipleMatches
  id: _allowMultipleMatches
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _allowMultipleMatches
  nameWithType: FilteringParserDelegate._allowMultipleMatches
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._allowMultipleMatches
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: 'Flag that determines whether filtering will continue after the first match is indicated or not: if \`false\`, output is based on just the first full match (returning <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">TokenFilter#INCLUDE_ALL</xref>) and no more checks are made; if \`true\` then filtering will be applied as necessary until end of content.'
  syntax:
    content: protected boolean _allowMultipleMatches
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._currToken
  id: _currToken
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _currToken
  nameWithType: FilteringParserDelegate._currToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._currToken
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Last token retrieved via <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, if any. Null before the first call to `nextToken()`, as well as if token has been explicitly cleared
  syntax:
    content: protected JsonToken _currToken
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._exposedContext
  id: _exposedContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _exposedContext
  nameWithType: FilteringParserDelegate._exposedContext
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._exposedContext
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: In cases where <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate._headContext" data-throw-if-not-resolved="false">#_headContext</xref> is "ahead" of context exposed to caller, this context points to what is currently exposed to caller. When the two are in sync, this context reference will be `null`.
  syntax:
    content: protected TokenFilterContext _exposedContext
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilterContext
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext()
  id: _filterContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _filterContext()
  nameWithType: FilteringParserDelegate._filterContext()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected JsonStreamContext _filterContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._headContext
  id: _headContext
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _headContext
  nameWithType: FilteringParserDelegate._headContext
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._headContext
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: During traversal this is the actual "open" parse tree, which sometimes is the same as <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate._exposedContext" data-throw-if-not-resolved="false">#_exposedContext</xref>, and at other times is ahead of it. Note that this context is never null.
  syntax:
    content: protected TokenFilterContext _headContext
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilterContext
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._includeImmediateParent
  id: _includeImmediateParent
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _includeImmediateParent
  nameWithType: FilteringParserDelegate._includeImmediateParent
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._includeImmediateParent
  type: Field
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: protected boolean _includeImmediateParent
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._includePath
  id: _includePath
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _includePath
  nameWithType: FilteringParserDelegate._includePath
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._includePath
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Flag that determines whether path leading up to included content should also be automatically included or not. If \`false\`, no path inclusion is done and only explicitly included entries are output; if \`true\` then path from main level down to match is also included as necessary.
  syntax:
    content: protected boolean _includePath
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._itemFilter
  id: _itemFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _itemFilter
  nameWithType: FilteringParserDelegate._itemFilter
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._itemFilter
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: State that applies to the item within container, used where applicable. Specifically used to pass inclusion state between property name and property, and also used for array elements.
  syntax:
    content: protected TokenFilter _itemFilter
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._lastClearedToken
  id: _lastClearedToken
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _lastClearedToken
  nameWithType: FilteringParserDelegate._lastClearedToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._lastClearedToken
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: 'Last cleared token, if any: that is, value that was in effect when <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken*" data-throw-if-not-resolved="false">#clearCurrentToken</xref> was called.'
  syntax:
    content: protected JsonToken _lastClearedToken
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._matchCount
  id: _matchCount
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _matchCount
  nameWithType: FilteringParserDelegate._matchCount
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._matchCount
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Number of tokens for which <xref uid="com.fasterxml.jackson.core.filter.TokenFilter.INCLUDE_ALL" data-throw-if-not-resolved="false">TokenFilter#INCLUDE_ALL</xref> has been returned.
  syntax:
    content: protected int _matchCount
    return:
      type: int
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2()
  id: _nextToken2()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _nextToken2()
  nameWithType: FilteringParserDelegate._nextToken2()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Offlined handling for cases where there was no buffered token to return, and the token read next could not be returned as-is, at least not yet, but where we have not yet established that buffering is needed.
  syntax:
    content: protected final JsonToken _nextToken2()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(com.fasterxml.jackson.core.filter.TokenFilterContext)
  id: _nextTokenWithBuffering(com.fasterxml.jackson.core.filter.TokenFilterContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: _nextTokenWithBuffering(TokenFilterContext buffRoot)
  nameWithType: FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext buffRoot)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering(TokenFilterContext buffRoot)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method called when a new potentially included context is found.
  syntax:
    content: protected final JsonToken _nextTokenWithBuffering(TokenFilterContext buffRoot)
    parameters:
    - id: buffRoot
      type: com.fasterxml.jackson.core.filter.TokenFilterContext
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken()
  id: clearCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: clearCurrentToken()
  nameWithType: FilteringParserDelegate.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method called to "consume" the current token by effectively removing it so that <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken*" data-throw-if-not-resolved="false">#hasCurrentToken</xref> returns false, and <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken*" data-throw-if-not-resolved="false">#getCurrentToken</xref> null). Cleared token value can still be accessed by calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken*" data-throw-if-not-resolved="false">#getLastClearedToken</xref> (if absolutely needed), but usually isn't.


    Method was added to be used by the optional data binder, since it has to be able to consume last token used for binding (so that it will not be used again).
  syntax:
    content: public void clearCurrentToken()
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken()
  id: currentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: currentToken()
  nameWithType: FilteringParserDelegate.currentToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Accessor to find which token parser currently points to, if any; null will be returned if none. If return value is non-null, data associated with the token is available via other accessor methods.
  syntax:
    content: public JsonToken currentToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId()
  id: currentTokenId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: currentTokenId()
  nameWithType: FilteringParserDelegate.currentTokenId()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken()" data-throw-if-not-resolved="false">#getCurrentToken()</xref> but that returns an `int` instead of <xref uid="com.fasterxml.jackson.core.JsonToken" data-throw-if-not-resolved="false">JsonToken</xref> (enum value).


    Use of int directly is typically more efficient on switch statements, so this method may be useful when building low-overhead codecs. Note, however, that effect may not be big enough to matter: make sure to profile performance before deciding to use this method.
  syntax:
    content: public final int currentTokenId()
    return:
      type: int
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue()
  id: getBigIntegerValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getBigIntegerValue()
  nameWithType: FilteringParserDelegate.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can not be used as a Java long primitive type due to its magnitude. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue*" data-throw-if-not-resolved="false">#getDecimalValue</xref> and then constructing a <xref uid="java.math.BigInteger" data-throw-if-not-resolved="false">BigInteger</xref> from that value.
  syntax:
    content: public BigInteger getBigIntegerValue()
    return:
      type: java.math.BigInteger
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  id: getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getBinaryValue(Base64Variant b64variant)
  nameWithType: FilteringParserDelegate.getBinaryValue(Base64Variant b64variant)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue(Base64Variant b64variant)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that can be used to read (and consume -- results may not be accessible using other methods after the call) base64-encoded binary data included in the current textual JSON value. It works similar to getting String value via <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref> and decoding result (except for decoding part), but should be significantly more performant.


    Note that non-decoded textual contents of the current token are not guaranteed to be accessible after this method is called. Current implementation, for example, clears up textual content during decoding. Decoded binary content, however, will be retained until parser is advanced to the next event.
  syntax:
    content: public byte[] getBinaryValue(Base64Variant b64variant)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    return:
      type: byte[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue()
  id: getBooleanValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getBooleanValue()
  nameWithType: FilteringParserDelegate.getBooleanValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Convenience accessor that can be called when the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_TRUE" data-throw-if-not-resolved="false">JsonToken#VALUE_TRUE</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_FALSE" data-throw-if-not-resolved="false">JsonToken#VALUE_FALSE</xref>.


    Note: if the token is not of above-mentioned boolean types, an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public boolean getBooleanValue()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue()
  id: getByteValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getByteValue()
  nameWithType: FilteringParserDelegate.getByteValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java byte primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java byte, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public byte getByteValue()
    return:
      type: byte
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation()
  id: getCurrentLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getCurrentLocation()
  nameWithType: FilteringParserDelegate.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that returns location of the last processed character; usually for error reporting purposes.
  syntax:
    content: public JsonLocation getCurrentLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName()
  id: getCurrentName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getCurrentName()
  nameWithType: FilteringParserDelegate.getCurrentName()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: 'Method that can be called to get the name associated with the current token: for <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref>s it will be the same as what <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref> returns; for field values it will be preceding field name; and for others (array values, root-level values) null.'
  syntax:
    content: public String getCurrentName()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken()
  id: getCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getCurrentToken()
  nameWithType: FilteringParserDelegate.getCurrentToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Alias for <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken()" data-throw-if-not-resolved="false">#currentToken()</xref>, will be deprecated in Jackson 2.9
  syntax:
    content: public JsonToken getCurrentToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId()
  id: getCurrentTokenId()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getCurrentTokenId()
  nameWithType: FilteringParserDelegate.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Alias for <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId()" data-throw-if-not-resolved="false">#currentTokenId()</xref>, will be deprecated in Jackson 2.9
  syntax:
    content: public final int getCurrentTokenId()
    return:
      type: int
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue()
  id: getDecimalValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getDecimalValue()
  nameWithType: FilteringParserDelegate.getDecimalValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>. No under/overflow exceptions are ever thrown.
  syntax:
    content: public BigDecimal getDecimalValue()
    return:
      type: java.math.BigDecimal
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue()
  id: getDoubleValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getDoubleValue()
  nameWithType: FilteringParserDelegate.getDoubleValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java double primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java double, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public double getDoubleValue()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject()
  id: getEmbeddedObject()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getEmbeddedObject()
  nameWithType: FilteringParserDelegate.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Accessor that can be called if (and only if) the current token is <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_EMBEDDED_OBJECT" data-throw-if-not-resolved="false">JsonToken#VALUE_EMBEDDED_OBJECT</xref>. For other token types, null is returned.


    Note: only some specialized parser implementations support embedding of objects (usually ones that are facades on top of non-streaming sources, such as object trees). One exception is access to binary content (whether via base64 encoding or not) which typically is accessible using this method, as well as <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue*" data-throw-if-not-resolved="false">#getBinaryValue()</xref>.
  syntax:
    content: public Object getEmbeddedObject()
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter()
  id: getFilter()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getFilter()
  nameWithType: FilteringParserDelegate.getFilter()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter*
  type: Method
  package: com.fasterxml.jackson.core.filter
  syntax:
    content: public TokenFilter getFilter()
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue()
  id: getFloatValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getFloatValue()
  nameWithType: FilteringParserDelegate.getFloatValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref> and it can be expressed as a Java float primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue*" data-throw-if-not-resolved="false">#getLongValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the value falls outside of range of Java float, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public float getFloatValue()
    return:
      type: float
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue()
  id: getIntValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getIntValue()
  nameWithType: FilteringParserDelegate.getIntValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java int primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java int, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public int getIntValue()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken()
  id: getLastClearedToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getLastClearedToken()
  nameWithType: FilteringParserDelegate.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that can be called to get the last token that was cleared using <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken*" data-throw-if-not-resolved="false">#clearCurrentToken</xref>. This is not necessarily the latest token read. Will return null if no tokens have been cleared, or if parser has been closed.
  syntax:
    content: public JsonToken getLastClearedToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue()
  id: getLongValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getLongValue()
  nameWithType: FilteringParserDelegate.getLongValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a Java long primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting to int; except for possible overflow/underflow exception.


    Note: if the token is an integer, but its value falls outside of range of Java long, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> may be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public long getLongValue()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount()
  id: getMatchCount()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getMatchCount()
  nameWithType: FilteringParserDelegate.getMatchCount()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Accessor for finding number of matches, where specific token and sub-tree starting (if structured type) are passed.
  syntax:
    content: public int getMatchCount()
    return:
      type: int
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType()
  id: getNumberType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getNumberType()
  nameWithType: FilteringParserDelegate.getNumberType()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: If current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> or <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>, returns one of <xref uid="" data-throw-if-not-resolved="false">NumberType</xref> constants; otherwise returns null.
  syntax:
    content: public JsonParser.NumberType getNumberType()
    return:
      type: com.fasterxml.jackson.core.JsonParser.NumberType
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue()
  id: getNumberValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getNumberValue()
  nameWithType: FilteringParserDelegate.getNumberValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Generic number value accessor method that will work for all kinds of numeric values. It will return the optimal (simplest/smallest possible) wrapper object that can express the numeric value just parsed.
  syntax:
    content: public Number getNumberValue()
    return:
      type: java.lang.Number
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext()
  id: getParsingContext()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getParsingContext()
  nameWithType: FilteringParserDelegate.getParsingContext()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: 'Method that can be used to access current parsing context reader is in. There are 3 different types: root, array and object contexts, with slightly different available information. Contexts are hierarchically nested, and can be used for example for figuring out part of the input document that correspond to specific array or object (for highlighting purposes, or error reporting). Contexts can also be used for simple xpath-like matching of input, if so desired.'
  syntax:
    content: public JsonStreamContext getParsingContext()
    return:
      type: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue()
  id: getShortValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getShortValue()
  nameWithType: FilteringParserDelegate.getShortValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Numeric accessor that can be called when the current token is of type <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_INT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_INT</xref> and it can be expressed as a value of Java short primitive type. It can also be called for <xref uid="com.fasterxml.jackson.core.JsonToken.VALUE_NUMBER_FLOAT" data-throw-if-not-resolved="false">JsonToken#VALUE_NUMBER_FLOAT</xref>; if so, it is equivalent to calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue*" data-throw-if-not-resolved="false">#getDoubleValue</xref> and then casting; except for possible overflow/underflow exception.


    Note: if the resulting integer value falls outside range of Java short, a <xref uid="com.fasterxml.jackson.core.JsonParseException" data-throw-if-not-resolved="false">JsonParseException</xref> will be thrown to indicate numeric overflow/underflow.
  syntax:
    content: public short getShortValue()
    return:
      type: short
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText()
  id: getText()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getText()
  nameWithType: FilteringParserDelegate.getText()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for accessing textual representation of the current token; if no current token (before first call to <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken*" data-throw-if-not-resolved="false">#nextToken</xref>, or after encountering end-of-input), returns null. Method can be called for any token type.
  syntax:
    content: public String getText()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters()
  id: getTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getTextCharacters()
  nameWithType: FilteringParserDelegate.getTextCharacters()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref>, but that will return underlying (unmodifiable) character array that contains textual value, instead of constructing a String object to contain this information. Note, however, that:

     *  Textual contents are not guaranteed to start at index 0 (rather, call <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset*" data-throw-if-not-resolved="false">#getTextOffset</xref>) to know the actual offset
     *  Length of textual contents may be less than the length of returned buffer: call <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength*" data-throw-if-not-resolved="false">#getTextLength</xref> for actual length of returned content.

    Note that caller **MUST NOT** modify the returned character array in any way -- doing so may corrupt current parser state and render parser instance useless.


    The only reason to call this method (over <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText*" data-throw-if-not-resolved="false">#getText</xref>) is to avoid construction of a String object (which will make a copy of contents).
  syntax:
    content: public char[] getTextCharacters()
    return:
      type: char[]
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength()
  id: getTextLength()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getTextLength()
  nameWithType: FilteringParserDelegate.getTextLength()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know length of String stored in returned buffer.
  syntax:
    content: public int getTextLength()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset()
  id: getTextOffset()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getTextOffset()
  nameWithType: FilteringParserDelegate.getTextOffset()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Accessor used with <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref>, to know offset of the first text content character within buffer.
  syntax:
    content: public int getTextOffset()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation()
  id: getTokenLocation()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getTokenLocation()
  nameWithType: FilteringParserDelegate.getTokenLocation()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that return the **starting** location of the current token; that is, position of the first character from input that starts the current token.
  syntax:
    content: public JsonLocation getTokenLocation()
    return:
      type: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean()
  id: getValueAsBoolean()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsBoolean()
  nameWithType: FilteringParserDelegate.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation can not be converted to a boolean value (including structured types like Objects and Arrays), default value of **false** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean getValueAsBoolean()
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean)
  id: getValueAsBoolean(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsBoolean(boolean defaultValue)
  nameWithType: FilteringParserDelegate.getValueAsBoolean(boolean defaultValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean(boolean defaultValue)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a **boolean**. JSON booleans map naturally; integer numbers other than 0 map to true, and 0 maps to false and Strings 'true' and 'false' map to corresponding values.


    If representation can not be converted to a boolean value (including structured types like Objects and Arrays), specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public boolean getValueAsBoolean(boolean defaultValue)
    parameters:
    - id: defaultValue
      type: boolean
    return:
      type: boolean
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble()
  id: getValueAsDouble()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsDouble()
  nameWithType: FilteringParserDelegate.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language floating point parsing rules.


    If representation can not be converted to a double (including structured types like Objects and Arrays), default value of **0.0** will be returned; no exceptions are thrown.
  syntax:
    content: public double getValueAsDouble()
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double)
  id: getValueAsDouble(double)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsDouble(double defaultValue)
  nameWithType: FilteringParserDelegate.getValueAsDouble(double defaultValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble(double defaultValue)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a Java **double**. Numbers are coerced using default Java rules; booleans convert to 0.0 (false) and 1.0 (true), and Strings are parsed using default Java language floating point parsing rules.


    If representation can not be converted to a double (including structured types like Objects and Arrays), specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public double getValueAsDouble(double defaultValue)
    parameters:
    - id: defaultValue
      type: double
    return:
      type: double
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt()
  id: getValueAsInt()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsInt()
  nameWithType: FilteringParserDelegate.getValueAsInt()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) default value of **0** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt()
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int)
  id: getValueAsInt(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsInt(int defaultValue)
  nameWithType: FilteringParserDelegate.getValueAsInt(int defaultValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt(int defaultValue)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a **int**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to an int (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public int getValueAsInt(int defaultValue)
    parameters:
    - id: defaultValue
      type: int
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong()
  id: getValueAsLong()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsLong()
  nameWithType: FilteringParserDelegate.getValueAsLong()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to a long (including structured type markers like start/end Object/Array) default value of **0L** will be returned; no exceptions are thrown.
  syntax:
    content: public long getValueAsLong()
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long)
  id: getValueAsLong(long)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsLong(long defaultValue)
  nameWithType: FilteringParserDelegate.getValueAsLong(long defaultValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong(long defaultValue)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that will try to convert value of current token to a **long**. Numbers are coerced using default Java rules; booleans convert to 0 (false) and 1 (true), and Strings are parsed using default Java language integer parsing rules.


    If representation can not be converted to a long (including structured type markers like start/end Object/Array) specified **def** will be returned; no exceptions are thrown.
  syntax:
    content: public long getValueAsLong(long defaultValue)
    parameters:
    - id: defaultValue
      type: long
    return:
      type: long
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString()
  id: getValueAsString()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsString()
  nameWithType: FilteringParserDelegate.getValueAsString()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), default value of **null** will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString()
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(java.lang.String)
  id: getValueAsString(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: getValueAsString(String defaultValue)
  nameWithType: FilteringParserDelegate.getValueAsString(String defaultValue)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString(String defaultValue)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method that will try to convert value of current token to a <xref uid="java.lang.String" data-throw-if-not-resolved="false">java.lang.String</xref>. JSON Strings map naturally; scalar values get converted to their textual representation. If representation can not be converted to a String value (including structured types like Objects and Arrays and null token), specified default value will be returned; no exceptions are thrown.
  syntax:
    content: public String getValueAsString(String defaultValue)
    parameters:
    - id: defaultValue
      type: java.lang.String
    return:
      type: java.lang.String
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken()
  id: hasCurrentToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: hasCurrentToken()
  nameWithType: FilteringParserDelegate.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Method for checking whether parser currently points to a token (and data for that token is available). Equivalent to check for `parser.getCurrentToken() != null`.
  syntax:
    content: public boolean hasCurrentToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters()
  id: hasTextCharacters()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: hasTextCharacters()
  nameWithType: FilteringParserDelegate.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that can be used to determine whether calling of <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters*" data-throw-if-not-resolved="false">#getTextCharacters</xref> would be the most efficient way to access textual content for the event parser currently points to.


    Default implementation simply returns false since only actual implementation class has knowledge of its internal buffering state. Implementations are strongly encouraged to properly override this method, to allow efficient copying of content by other code.
  syntax:
    content: public boolean hasTextCharacters()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
  id: hasToken(com.fasterxml.jackson.core.JsonToken)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: hasToken(JsonToken t)
  nameWithType: FilteringParserDelegate.hasToken(JsonToken t)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken(JsonToken t)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that is functionally equivalent to: `return currentToken() == t` but may be more efficiently implemented.


    Note that no traversal or conversion is performed; so in some cases calling method like <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref> is necessary instead.
  syntax:
    content: public final boolean hasToken(JsonToken t)
    parameters:
    - id: t
      type: com.fasterxml.jackson.core.JsonToken
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int)
  id: hasTokenId(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: hasTokenId(int id)
  nameWithType: FilteringParserDelegate.hasTokenId(int id)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId(int id)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that is functionally equivalent to: `return currentTokenId() == id` but may be more efficiently implemented.


    Note that no traversal or conversion is performed; so in some cases calling method like <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref> is necessary instead.
  syntax:
    content: public boolean hasTokenId(int id)
    parameters:
    - id: id
      type: int
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()
  id: isExpectedStartArrayToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: isExpectedStartArrayToken()
  nameWithType: FilteringParserDelegate.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Specialized accessor that can be used to verify that the current token indicates start array (usually meaning that current token is <xref uid="com.fasterxml.jackson.core.JsonToken.START_ARRAY" data-throw-if-not-resolved="false">JsonToken#START_ARRAY</xref>) when start array is expected. For some specialized parsers this can return true for other cases as well; this is usually done to emulate arrays in cases underlying format is ambiguous (XML, for example, has no format-level difference between Objects and Arrays; it just has elements).


    Default implementation is equivalent to:


    ```java

    currentToken() == JsonToken.START_ARRAY

    ```


    but may be overridden by custom parser implementations.
  syntax:
    content: public boolean isExpectedStartArrayToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken()
  id: isExpectedStartObjectToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: isExpectedStartObjectToken()
  nameWithType: FilteringParserDelegate.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken()" data-throw-if-not-resolved="false">#isExpectedStartArrayToken()</xref>, but checks whether stream currently points to <xref uid="com.fasterxml.jackson.core.JsonToken.START_OBJECT" data-throw-if-not-resolved="false">JsonToken#START_OBJECT</xref>.
  syntax:
    content: public boolean isExpectedStartObjectToken()
    return:
      type: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()
  id: nextToken()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: nextToken()
  nameWithType: FilteringParserDelegate.nextToken()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Main iteration method, which will advance stream enough to determine type of the next token, if any. If none remaining (stream has no content other than possible white space before ending), null will be returned.
  syntax:
    content: public JsonToken nextToken()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue()
  id: nextValue()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: nextValue()
  nameWithType: FilteringParserDelegate.nextValue()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Iteration method that will advance stream enough to determine type of the next token that is a value type (including JSON Array and Object start/end markers). Or put another way, nextToken() will be called once, and if <xref uid="com.fasterxml.jackson.core.JsonToken.FIELD_NAME" data-throw-if-not-resolved="false">JsonToken#FIELD_NAME</xref> is returned, another time to get the value for the field. Method is most useful for iterating over value entries of JSON objects; field name will still be available by calling <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName*" data-throw-if-not-resolved="false">#getCurrentName</xref> when parser points to the value.
  syntax:
    content: public JsonToken nextValue()
    return:
      type: com.fasterxml.jackson.core.JsonToken
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(java.lang.String)
  id: overrideCurrentName(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: overrideCurrentName(String name)
  nameWithType: FilteringParserDelegate.overrideCurrentName(String name)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName(String name)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: >-
    Method that can be used to change what is considered to be the current (field) name. May be needed to support non-JSON data formats or unusual binding conventions; not needed for typical processing.


    Note that use of this method should only be done as sort of last resort, as it is a work-around for regular operation.
  syntax:
    content: public void overrideCurrentName(String name)
    parameters:
    - id: name
      type: java.lang.String
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  id: readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: readBinaryValue(Base64Variant b64variant, OutputStream out)
  nameWithType: FilteringParserDelegate.readBinaryValue(Base64Variant b64variant, OutputStream out)
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue(Base64Variant b64variant, OutputStream out)
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Similar to <xref uid="com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue*" data-throw-if-not-resolved="false">#readBinaryValue(OutputStream)</xref> but allows explicitly specifying base64 variant to use.
  syntax:
    content: public int readBinaryValue(Base64Variant b64variant, OutputStream out)
    parameters:
    - id: b64variant
      type: com.fasterxml.jackson.core.Base64Variant
    - id: out
      type: java.io.OutputStream
    return:
      type: int
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.rootFilter
  id: rootFilter
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: rootFilter
  nameWithType: FilteringParserDelegate.rootFilter
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.rootFilter
  type: Field
  package: com.fasterxml.jackson.core.filter
  summary: Object consulted to determine whether to write parts of content generator is asked to write or not.
  syntax:
    content: protected TokenFilter rootFilter
    return:
      type: com.fasterxml.jackson.core.filter.TokenFilter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren()
  id: skipChildren()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.core.filter.FilteringParserDelegate
  langs:
  - java
  name: skipChildren()
  nameWithType: FilteringParserDelegate.skipChildren()
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren()
  overload: com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren*
  type: Method
  package: com.fasterxml.jackson.core.filter
  summary: Need to override, re-implement similar to how method defined in <xref uid="com.fasterxml.jackson.core.base.ParserMinimalBase" data-throw-if-not-resolved="false">com.fasterxml.jackson.core.base.ParserMinimalBase</xref>, to keep state correct here.
  syntax:
    content: public JsonParser skipChildren()
    return:
      type: com.fasterxml.jackson.core.JsonParser
  exceptions:
  - type: java.io.IOException
references:
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.core.filter.TokenFilter
  name: TokenFilter
  nameWithType: TokenFilter
  fullName: com.fasterxml.jackson.core.filter.TokenFilter
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.FilteringParserDelegate*
  name: FilteringParserDelegate
  nameWithType: FilteringParserDelegate.FilteringParserDelegate
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.FilteringParserDelegate
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter*
  name: getFilter
  nameWithType: FilteringParserDelegate.getFilter
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFilter
  package: com.fasterxml.jackson.core.filter
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount*
  name: getMatchCount
  nameWithType: FilteringParserDelegate.getMatchCount
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getMatchCount
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.JsonToken
  name: JsonToken
  nameWithType: JsonToken
  fullName: com.fasterxml.jackson.core.JsonToken
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken*
  name: getCurrentToken
  nameWithType: FilteringParserDelegate.getCurrentToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken*
  name: currentToken
  nameWithType: FilteringParserDelegate.currentToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId*
  name: getCurrentTokenId
  nameWithType: FilteringParserDelegate.getCurrentTokenId
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentTokenId
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId*
  name: currentTokenId
  nameWithType: FilteringParserDelegate.currentTokenId
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.currentTokenId
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken*
  name: hasCurrentToken
  nameWithType: FilteringParserDelegate.hasCurrentToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasCurrentToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId*
  name: hasTokenId
  nameWithType: FilteringParserDelegate.hasTokenId
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTokenId
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken*
  name: hasToken
  nameWithType: FilteringParserDelegate.hasToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken*
  name: isExpectedStartArrayToken
  nameWithType: FilteringParserDelegate.isExpectedStartArrayToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartArrayToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken*
  name: isExpectedStartObjectToken
  nameWithType: FilteringParserDelegate.isExpectedStartObjectToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.isExpectedStartObjectToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.JsonLocation
  name: JsonLocation
  nameWithType: JsonLocation
  fullName: com.fasterxml.jackson.core.JsonLocation
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation*
  name: getCurrentLocation
  nameWithType: FilteringParserDelegate.getCurrentLocation
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentLocation
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.JsonStreamContext
  name: JsonStreamContext
  nameWithType: JsonStreamContext
  fullName: com.fasterxml.jackson.core.JsonStreamContext
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext*
  name: getParsingContext
  nameWithType: FilteringParserDelegate.getParsingContext
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getParsingContext
  package: com.fasterxml.jackson.core.filter
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName*
  name: getCurrentName
  nameWithType: FilteringParserDelegate.getCurrentName
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getCurrentName
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken*
  name: clearCurrentToken
  nameWithType: FilteringParserDelegate.clearCurrentToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.clearCurrentToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken*
  name: getLastClearedToken
  nameWithType: FilteringParserDelegate.getLastClearedToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLastClearedToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName*
  name: overrideCurrentName
  nameWithType: FilteringParserDelegate.overrideCurrentName
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.overrideCurrentName
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken*
  name: nextToken
  nameWithType: FilteringParserDelegate.nextToken
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextToken
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2*
  name: _nextToken2
  nameWithType: FilteringParserDelegate._nextToken2
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextToken2
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.TokenFilterContext
  name: TokenFilterContext
  nameWithType: TokenFilterContext
  fullName: com.fasterxml.jackson.core.filter.TokenFilterContext
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering*
  name: _nextTokenWithBuffering
  nameWithType: FilteringParserDelegate._nextTokenWithBuffering
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._nextTokenWithBuffering
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue*
  name: nextValue
  nameWithType: FilteringParserDelegate.nextValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.nextValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren*
  name: skipChildren
  nameWithType: FilteringParserDelegate.skipChildren
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.skipChildren
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText*
  name: getText
  nameWithType: FilteringParserDelegate.getText
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getText
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters*
  name: hasTextCharacters
  nameWithType: FilteringParserDelegate.hasTextCharacters
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.hasTextCharacters
  package: com.fasterxml.jackson.core.filter
- uid: char[]
  spec.java:
  - uid: char
    name: char
    fullName: char
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters*
  name: getTextCharacters
  nameWithType: FilteringParserDelegate.getTextCharacters
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextCharacters
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength*
  name: getTextLength
  nameWithType: FilteringParserDelegate.getTextLength
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextLength
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset*
  name: getTextOffset
  nameWithType: FilteringParserDelegate.getTextOffset
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTextOffset
  package: com.fasterxml.jackson.core.filter
- uid: java.math.BigInteger
  spec.java:
  - uid: java.math.BigInteger
    name: BigInteger
    fullName: java.math.BigInteger
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue*
  name: getBigIntegerValue
  nameWithType: FilteringParserDelegate.getBigIntegerValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBigIntegerValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue*
  name: getBooleanValue
  nameWithType: FilteringParserDelegate.getBooleanValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBooleanValue
  package: com.fasterxml.jackson.core.filter
- uid: byte
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue*
  name: getByteValue
  nameWithType: FilteringParserDelegate.getByteValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getByteValue
  package: com.fasterxml.jackson.core.filter
- uid: short
  spec.java:
  - uid: short
    name: short
    fullName: short
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue*
  name: getShortValue
  nameWithType: FilteringParserDelegate.getShortValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getShortValue
  package: com.fasterxml.jackson.core.filter
- uid: java.math.BigDecimal
  spec.java:
  - uid: java.math.BigDecimal
    name: BigDecimal
    fullName: java.math.BigDecimal
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue*
  name: getDecimalValue
  nameWithType: FilteringParserDelegate.getDecimalValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDecimalValue
  package: com.fasterxml.jackson.core.filter
- uid: double
  spec.java:
  - uid: double
    name: double
    fullName: double
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue*
  name: getDoubleValue
  nameWithType: FilteringParserDelegate.getDoubleValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getDoubleValue
  package: com.fasterxml.jackson.core.filter
- uid: float
  spec.java:
  - uid: float
    name: float
    fullName: float
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue*
  name: getFloatValue
  nameWithType: FilteringParserDelegate.getFloatValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getFloatValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue*
  name: getIntValue
  nameWithType: FilteringParserDelegate.getIntValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getIntValue
  package: com.fasterxml.jackson.core.filter
- uid: long
  spec.java:
  - uid: long
    name: long
    fullName: long
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue*
  name: getLongValue
  nameWithType: FilteringParserDelegate.getLongValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getLongValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.JsonParser.NumberType
  name: JsonParser.NumberType
  nameWithType: JsonParser.NumberType
  fullName: com.fasterxml.jackson.core.JsonParser.NumberType
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType*
  name: getNumberType
  nameWithType: FilteringParserDelegate.getNumberType
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberType
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.Number
  spec.java:
  - uid: java.lang.Number
    name: Number
    fullName: java.lang.Number
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue*
  name: getNumberValue
  nameWithType: FilteringParserDelegate.getNumberValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getNumberValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt*
  name: getValueAsInt
  nameWithType: FilteringParserDelegate.getValueAsInt
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsInt
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong*
  name: getValueAsLong
  nameWithType: FilteringParserDelegate.getValueAsLong
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsLong
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble*
  name: getValueAsDouble
  nameWithType: FilteringParserDelegate.getValueAsDouble
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsDouble
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean*
  name: getValueAsBoolean
  nameWithType: FilteringParserDelegate.getValueAsBoolean
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsBoolean
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString*
  name: getValueAsString
  nameWithType: FilteringParserDelegate.getValueAsString
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getValueAsString
  package: com.fasterxml.jackson.core.filter
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject*
  name: getEmbeddedObject
  nameWithType: FilteringParserDelegate.getEmbeddedObject
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getEmbeddedObject
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.Base64Variant
  name: Base64Variant
  nameWithType: Base64Variant
  fullName: com.fasterxml.jackson.core.Base64Variant
- uid: byte[]
  spec.java:
  - uid: byte
    name: byte
    fullName: byte
  - name: '[]'
    fullName: '[]'
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue*
  name: getBinaryValue
  nameWithType: FilteringParserDelegate.getBinaryValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getBinaryValue
  package: com.fasterxml.jackson.core.filter
- uid: java.io.OutputStream
  spec.java:
  - uid: java.io.OutputStream
    name: OutputStream
    fullName: java.io.OutputStream
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue*
  name: readBinaryValue
  nameWithType: FilteringParserDelegate.readBinaryValue
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.readBinaryValue
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation*
  name: getTokenLocation
  nameWithType: FilteringParserDelegate.getTokenLocation
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate.getTokenLocation
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext*
  name: _filterContext
  nameWithType: FilteringParserDelegate._filterContext
  fullName: com.fasterxml.jackson.core.filter.FilteringParserDelegate._filterContext
  package: com.fasterxml.jackson.core.filter
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate
  name: JsonParserDelegate
  nameWithType: JsonParserDelegate
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()
  name: JsonParserDelegate.getParsingContext()
  nameWithType: JsonParserDelegate.getParsingContext()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getParsingContext()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()
  name: JsonParserDelegate.getCurrentName()
  nameWithType: JsonParserDelegate.getCurrentName()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentName()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()
  name: JsonParserDelegate.getValueAsLong()
  nameWithType: JsonParserDelegate.getValueAsLong()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)
  name: JsonParserDelegate.hasTokenId(int)
  nameWithType: JsonParserDelegate.hasTokenId(int)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTokenId(int)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(java.lang.Object)
  name: JsonParserDelegate.setCurrentValue(Object)
  nameWithType: JsonParserDelegate.setCurrentValue(Object)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setCurrentValue(java.lang.Object)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()
  name: JsonParserDelegate.getDoubleValue()
  nameWithType: JsonParserDelegate.getDoubleValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getDoubleValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()
  name: JsonParserDelegate.canReadTypeId()
  nameWithType: JsonParserDelegate.canReadTypeId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadTypeId()
- uid: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
  name: JsonParser.readBinaryValue(OutputStream)
  nameWithType: JsonParser.readBinaryValue(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.readBinaryValue(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.canParseAsync()
  name: JsonParser.canParseAsync()
  nameWithType: JsonParser.canParseAsync()
  fullName: com.fasterxml.jackson.core.JsonParser.canParseAsync()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()
  name: JsonParserDelegate.getNumberType()
  nameWithType: JsonParserDelegate.getNumberType()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberType()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()
  name: JsonParserDelegate.requiresCustomCodec()
  nameWithType: JsonParserDelegate.requiresCustomCodec()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.requiresCustomCodec()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParserDelegate.canUseSchema(FormatSchema)
  nameWithType: JsonParserDelegate.canUseSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canUseSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()
  name: JsonParserDelegate.getValueAsString()
  nameWithType: JsonParserDelegate.getValueAsString()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()
  name: JsonParserDelegate.getValueAsBoolean()
  nameWithType: JsonParserDelegate.getValueAsBoolean()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean()
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()
  name: JsonParserDelegate.getTextLength()
  nameWithType: JsonParserDelegate.getTextLength()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextLength()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
  name: JsonParser.getBinaryValue()
  nameWithType: JsonParser.getBinaryValue()
  fullName: com.fasterxml.jackson.core.JsonParser.getBinaryValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()
  name: JsonParserDelegate.nextToken()
  nameWithType: JsonParserDelegate.nextToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.nextToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()
  name: JsonParserDelegate.getObjectId()
  nameWithType: JsonParserDelegate.getObjectId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getObjectId()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)
  name: JsonParserDelegate.getValueAsDouble(double)
  nameWithType: JsonParserDelegate.getValueAsDouble(double)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble(double)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()
  name: JsonParserDelegate.getTypeId()
  nameWithType: JsonParserDelegate.getTypeId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTypeId()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()
  name: JsonParserDelegate.getBigIntegerValue()
  nameWithType: JsonParserDelegate.getBigIntegerValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBigIntegerValue()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
  name: JsonParser.setRequestPayloadOnError(String)
  nameWithType: JsonParser.setRequestPayloadOnError(String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(java.lang.String)
- uid: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
  name: JsonParser.isEnabled(StreamReadFeature)
  nameWithType: JsonParser.isEnabled(StreamReadFeature)
  fullName: com.fasterxml.jackson.core.JsonParser.isEnabled(com.fasterxml.jackson.core.StreamReadFeature)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()
  name: JsonParserDelegate.isNaN()
  nameWithType: JsonParserDelegate.isNaN()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isNaN()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
  name: JsonParser.<T>readValueAs(TypeReference<?>)
  nameWithType: JsonParser.<T>readValueAs(TypeReference<?>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(com.fasterxml.jackson.core.type.TypeReference<?>)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
  name: JsonParserDelegate.getBinaryValue(Base64Variant)
  nameWithType: JsonParserDelegate.getBinaryValue(Base64Variant)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBinaryValue(com.fasterxml.jackson.core.Base64Variant)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()
  name: JsonParserDelegate.canReadObjectId()
  nameWithType: JsonParserDelegate.canReadObjectId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.canReadObjectId()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(java.lang.String)
  name: JsonParserDelegate.getValueAsString(String)
  nameWithType: JsonParserDelegate.getValueAsString(String)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsString(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()
  name: JsonParserDelegate.getBooleanValue()
  nameWithType: JsonParserDelegate.getBooleanValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
  name: JsonParser.<T>readValuesAs(Class<T>)
  nameWithType: JsonParser.<T>readValuesAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getText(java.io.Writer)
  name: JsonParserDelegate.getText(Writer)
  nameWithType: JsonParserDelegate.getText(Writer)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getText(java.io.Writer)
- uid: com.fasterxml.jackson.core.JsonParser.currentName()
  name: JsonParser.currentName()
  nameWithType: JsonParser.currentName()
  fullName: com.fasterxml.jackson.core.JsonParser.currentName()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.disable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParserDelegate.disable(JsonParser.Feature)
  nameWithType: JsonParserDelegate.disable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.disable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()
  name: JsonParserDelegate.getValueAsDouble()
  nameWithType: JsonParserDelegate.getValueAsDouble()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsDouble()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()
  name: JsonParserDelegate.getFloatValue()
  nameWithType: JsonParserDelegate.getFloatValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getFloatValue()
- uid: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
  name: JsonParser._reportUnsupportedOperation()
  nameWithType: JsonParser._reportUnsupportedOperation()
  fullName: com.fasterxml.jackson.core.JsonParser._reportUnsupportedOperation()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(java.lang.String)
  name: JsonParserDelegate.overrideCurrentName(String)
  nameWithType: JsonParserDelegate.overrideCurrentName(String)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideCurrentName(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()
  name: JsonParserDelegate.getCurrentLocation()
  nameWithType: JsonParserDelegate.getCurrentLocation()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentLocation()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)
  name: JsonParserDelegate.getValueAsInt(int)
  nameWithType: JsonParserDelegate.getValueAsInt(int)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt(int)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()
  name: JsonParserDelegate.getSchema()
  nameWithType: JsonParserDelegate.getSchema()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getSchema()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
  name: JsonParserDelegate.setCodec(ObjectCodec)
  nameWithType: JsonParserDelegate.setCodec(ObjectCodec)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setCodec(com.fasterxml.jackson.core.ObjectCodec)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParserDelegate.isEnabled(JsonParser.Feature)
  nameWithType: JsonParserDelegate.isEnabled(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isEnabled(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
  name: JsonParser.nextBooleanValue()
  nameWithType: JsonParser.nextBooleanValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextBooleanValue()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
  name: JsonParser.<T>readValueAsTree()
  nameWithType: JsonParser.<T>readValueAsTree()
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAsTree()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.close()
  name: JsonParserDelegate.close()
  nameWithType: JsonParserDelegate.close()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.close()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()
  name: JsonParserDelegate.getLastClearedToken()
  nameWithType: JsonParserDelegate.getLastClearedToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getLastClearedToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()
  name: JsonParserDelegate.getCurrentToken()
  nameWithType: JsonParserDelegate.getCurrentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()
  name: JsonParserDelegate.clearCurrentToken()
  nameWithType: JsonParserDelegate.clearCurrentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.clearCurrentToken()
- uid: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
  name: JsonParser.nextIntValue(int)
  nameWithType: JsonParser.nextIntValue(int)
  fullName: com.fasterxml.jackson.core.JsonParser.nextIntValue(int)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()
  name: JsonParserDelegate.currentToken()
  nameWithType: JsonParserDelegate.currentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.currentToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()
  name: JsonParserDelegate.delegate()
  nameWithType: JsonParserDelegate.delegate()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.delegate()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()
  name: JsonParserDelegate.getCurrentTokenId()
  nameWithType: JsonParserDelegate.getCurrentTokenId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentTokenId()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
  name: JsonParser.<T>readValueAs(Class<T>)
  nameWithType: JsonParser.<T>readValueAs(Class<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValueAs(java.lang.Class<T>)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()
  name: JsonParserDelegate.getValueAsInt()
  nameWithType: JsonParserDelegate.getValueAsInt()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsInt()
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
  name: JsonParser.setRequestPayloadOnError(RequestPayload)
  nameWithType: JsonParser.setRequestPayloadOnError(RequestPayload)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(com.fasterxml.jackson.core.util.RequestPayload)
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
  name: JsonParser.releaseBuffered(OutputStream)
  nameWithType: JsonParser.releaseBuffered(OutputStream)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.OutputStream)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
  name: JsonParserDelegate.setSchema(FormatSchema)
  nameWithType: JsonParserDelegate.setSchema(FormatSchema)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setSchema(com.fasterxml.jackson.core.FormatSchema)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)
  name: JsonParserDelegate.setFeatureMask(int)
  nameWithType: JsonParserDelegate.setFeatureMask(int)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.setFeatureMask(int)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()
  name: JsonParserDelegate.getFeatureMask()
  nameWithType: JsonParserDelegate.getFeatureMask()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getFeatureMask()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName()
  name: JsonParser.nextFieldName()
  nameWithType: JsonParser.nextFieldName()
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()
  name: JsonParserDelegate.isExpectedStartArrayToken()
  nameWithType: JsonParserDelegate.isExpectedStartArrayToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartArrayToken()
- uid: com.fasterxml.jackson.core.JsonParser._codec()
  name: JsonParser._codec()
  nameWithType: JsonParser._codec()
  fullName: com.fasterxml.jackson.core.JsonParser._codec()
- uid: com.fasterxml.jackson.core.JsonParser.nextTextValue()
  name: JsonParser.nextTextValue()
  nameWithType: JsonParser.nextTextValue()
  fullName: com.fasterxml.jackson.core.JsonParser.nextTextValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)
  name: JsonParserDelegate.overrideStdFeatures(int,int)
  nameWithType: JsonParserDelegate.overrideStdFeatures(int,int)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideStdFeatures(int,int)
- uid: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
  name: JsonParser.nextLongValue(long)
  nameWithType: JsonParser.nextLongValue(long)
  fullName: com.fasterxml.jackson.core.JsonParser.nextLongValue(long)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()
  name: JsonParserDelegate.nextValue()
  nameWithType: JsonParserDelegate.nextValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.nextValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)
  name: JsonParserDelegate.overrideFormatFeatures(int,int)
  nameWithType: JsonParserDelegate.overrideFormatFeatures(int,int)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.overrideFormatFeatures(int,int)
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
  name: JsonParser.getNonBlockingInputFeeder()
  nameWithType: JsonParser.getNonBlockingInputFeeder()
  fullName: com.fasterxml.jackson.core.JsonParser.getNonBlockingInputFeeder()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()
  name: JsonParserDelegate.finishToken()
  nameWithType: JsonParserDelegate.finishToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.finishToken()
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()
  name: JsonParserDelegate.hasCurrentToken()
  nameWithType: JsonParserDelegate.hasCurrentToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasCurrentToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()
  name: JsonParserDelegate.isExpectedStartObjectToken()
  nameWithType: JsonParserDelegate.isExpectedStartObjectToken()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isExpectedStartObjectToken()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()
  name: JsonParserDelegate.getByteValue()
  nameWithType: JsonParserDelegate.getByteValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getByteValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()
  name: JsonParserDelegate.getShortValue()
  nameWithType: JsonParserDelegate.getShortValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getShortValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()
  name: JsonParserDelegate.getCodec()
  nameWithType: JsonParserDelegate.getCodec()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCodec()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()
  name: JsonParserDelegate.skipChildren()
  nameWithType: JsonParserDelegate.skipChildren()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.skipChildren()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()
  name: JsonParserDelegate.currentTokenId()
  nameWithType: JsonParserDelegate.currentTokenId()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.currentTokenId()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()
  name: JsonParserDelegate.getEmbeddedObject()
  nameWithType: JsonParserDelegate.getEmbeddedObject()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getEmbeddedObject()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)
  name: JsonParserDelegate.getValueAsLong(long)
  nameWithType: JsonParserDelegate.getValueAsLong(long)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsLong(long)
- uid: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
  name: JsonParser.configure(JsonParser.Feature,boolean)
  nameWithType: JsonParser.configure(JsonParser.Feature,boolean)
  fullName: com.fasterxml.jackson.core.JsonParser.configure(com.fasterxml.jackson.core.JsonParser.Feature,boolean)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getText()
  name: JsonParserDelegate.getText()
  nameWithType: JsonParserDelegate.getText()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getText()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()
  name: JsonParserDelegate.getCurrentValue()
  nameWithType: JsonParserDelegate.getCurrentValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getCurrentValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()
  name: JsonParserDelegate.getTextOffset()
  nameWithType: JsonParserDelegate.getTextOffset()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextOffset()
- uid: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
  name: JsonParser.<T>readValuesAs(TypeReference<T>)
  nameWithType: JsonParser.<T>readValuesAs(TypeReference<T>)
  fullName: com.fasterxml.jackson.core.JsonParser.<T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference<T>)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()
  name: JsonParserDelegate.hasTextCharacters()
  nameWithType: JsonParserDelegate.hasTextCharacters()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasTextCharacters()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()
  name: JsonParserDelegate.getDecimalValue()
  nameWithType: JsonParserDelegate.getDecimalValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getDecimalValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()
  name: JsonParserDelegate.getTextCharacters()
  nameWithType: JsonParserDelegate.getTextCharacters()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTextCharacters()
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()
  name: JsonParserDelegate.getIntValue()
  nameWithType: JsonParserDelegate.getIntValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getIntValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)
  name: JsonParserDelegate.getValueAsBoolean(boolean)
  nameWithType: JsonParserDelegate.getValueAsBoolean(boolean)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getValueAsBoolean(boolean)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()
  name: JsonParserDelegate.getTokenLocation()
  nameWithType: JsonParserDelegate.getTokenLocation()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getTokenLocation()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()
  name: JsonParserDelegate.getNumberValue()
  nameWithType: JsonParserDelegate.getNumberValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getNumberValue()
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.version()
  name: JsonParserDelegate.version()
  nameWithType: JsonParserDelegate.version()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.version()
- uid: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
  name: JsonParser.nextFieldName(SerializableString)
  nameWithType: JsonParser.nextFieldName(SerializableString)
  fullName: com.fasterxml.jackson.core.JsonParser.nextFieldName(com.fasterxml.jackson.core.SerializableString)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.enable(com.fasterxml.jackson.core.JsonParser.Feature)
  name: JsonParserDelegate.enable(JsonParser.Feature)
  nameWithType: JsonParserDelegate.enable(JsonParser.Feature)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.enable(com.fasterxml.jackson.core.JsonParser.Feature)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
  name: JsonParserDelegate.hasToken(JsonToken)
  nameWithType: JsonParserDelegate.hasToken(JsonToken)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.hasToken(com.fasterxml.jackson.core.JsonToken)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
  name: JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream)
  nameWithType: JsonParserDelegate.readBinaryValue(Base64Variant,OutputStream)
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.readBinaryValue(com.fasterxml.jackson.core.Base64Variant,java.io.OutputStream)
- uid: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
  name: JsonParser.setRequestPayloadOnError(byte[],String)
  nameWithType: JsonParser.setRequestPayloadOnError(byte[],String)
  fullName: com.fasterxml.jackson.core.JsonParser.setRequestPayloadOnError(byte[],java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()
  name: JsonParserDelegate.isClosed()
  nameWithType: JsonParserDelegate.isClosed()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.isClosed()
- uid: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
  name: JsonParser.releaseBuffered(Writer)
  nameWithType: JsonParser.releaseBuffered(Writer)
  fullName: com.fasterxml.jackson.core.JsonParser.releaseBuffered(java.io.Writer)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()
  name: JsonParserDelegate.getLongValue()
  nameWithType: JsonParserDelegate.getLongValue()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getLongValue()
- uid: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
  name: JsonParser._constructError(String)
  nameWithType: JsonParser._constructError(String)
  fullName: com.fasterxml.jackson.core.JsonParser._constructError(java.lang.String)
- uid: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()
  name: JsonParserDelegate.getInputSource()
  nameWithType: JsonParserDelegate.getInputSource()
  fullName: com.fasterxml.jackson.core.util.JsonParserDelegate.getInputSource()
- uid: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
  name: JsonParser.getFormatFeatures()
  nameWithType: JsonParser.getFormatFeatures()
  fullName: com.fasterxml.jackson.core.JsonParser.getFormatFeatures()
- uid: com.fasterxml.jackson.core.JsonParser.
  name: JsonParser.
  nameWithType: JsonParser.
  fullName: com.fasterxml.jackson.core.JsonParser.
- uid: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValueAs(TypeReference
  nameWithType: T>readValueAs(TypeReference
  fullName: T>readValueAs(com.fasterxml.jackson.core.type.TypeReference
- uid: ?>)
  name: ?>)
  nameWithType: ?>)
  fullName: ?>)
- uid: T>readValuesAs(java.lang.Class
  name: T>readValuesAs(Class
  nameWithType: T>readValuesAs(Class
  fullName: T>readValuesAs(java.lang.Class
- uid: T>)
  name: T>)
  nameWithType: T>)
  fullName: T>)
- uid: T>readValueAsTree()
  name: T>readValueAsTree()
  nameWithType: T>readValueAsTree()
  fullName: T>readValueAsTree()
- uid: T>readValueAs(java.lang.Class
  name: T>readValueAs(Class
  nameWithType: T>readValueAs(Class
  fullName: T>readValueAs(java.lang.Class
- uid: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
  name: T>readValuesAs(TypeReference
  nameWithType: T>readValuesAs(TypeReference
  fullName: T>readValuesAs(com.fasterxml.jackson.core.type.TypeReference
