### YamlMime:ManagedReference
items:
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  id: "Ecdsa"
  parent: "com.azure.security.keyvault.keys.cryptography"
  children:
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.Ecdsa()"
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.createSignatureTransform(java.security.KeyPair,java.security.Provider)"
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.getCoordLength()"
  - "com.azure.security.keyvault.keys.cryptography.Ecdsa.getDigestLength()"
  langs:
  - "java"
  name: "Ecdsa"
  nameWithType: "Ecdsa"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  type: "Class"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "abstract class Ecdsa extends AsymmetricSignatureAlgorithm"
  inheritance:
  - "java.lang.Object"
  - "com.azure.security.keyvault.keys.cryptography.Algorithm"
  - "com.azure.security.keyvault.keys.cryptography.LocalSignatureAlgorithm"
  - "com.azure.security.keyvault.keys.cryptography.AsymmetricSignatureAlgorithm"
  inheritedMembers:
  - "com.azure.security.keyvault.keys.cryptography.Algorithm.getName()"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.Ecdsa()"
  id: "Ecdsa()"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  langs:
  - "java"
  name: "Ecdsa()"
  nameWithType: "Ecdsa.Ecdsa()"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.Ecdsa()"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.Ecdsa*"
  type: "Constructor"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "protected Ecdsa()"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.createSignatureTransform(java.security.KeyPair,java.security.Provider)"
  id: "createSignatureTransform(java.security.KeyPair,java.security.Provider)"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  langs:
  - "java"
  name: "createSignatureTransform(KeyPair key, Provider provider)"
  nameWithType: "Ecdsa.createSignatureTransform(KeyPair key, Provider provider)"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.createSignatureTransform(KeyPair key, Provider provider)"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.createSignatureTransform*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "public ISignatureTransform createSignatureTransform(KeyPair key, Provider provider)"
    parameters:
    - id: "key"
      type: "java.security.KeyPair"
    - id: "provider"
      type: "java.security.Provider"
    return:
      type: "com.azure.security.keyvault.keys.cryptography.ISignatureTransform"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getCoordLength()"
  id: "getCoordLength()"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  langs:
  - "java"
  name: "getCoordLength()"
  nameWithType: "Ecdsa.getCoordLength()"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getCoordLength()"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getCoordLength*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "public abstract int getCoordLength()"
    return:
      type: "int"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getDigestLength()"
  id: "getDigestLength()"
  parent: "com.azure.security.keyvault.keys.cryptography.Ecdsa"
  langs:
  - "java"
  name: "getDigestLength()"
  nameWithType: "Ecdsa.getDigestLength()"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getDigestLength()"
  overload: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getDigestLength*"
  type: "Method"
  package: "com.azure.security.keyvault.keys.cryptography"
  syntax:
    content: "public abstract int getDigestLength()"
    return:
      type: "int"
references:
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.Ecdsa*"
  name: "Ecdsa"
  nameWithType: "Ecdsa.Ecdsa"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.Ecdsa"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "java.security.KeyPair"
  spec.java:
  - uid: "java.security.KeyPair"
    name: "KeyPair"
    fullName: "java.security.KeyPair"
- uid: "java.security.Provider"
  spec.java:
  - uid: "java.security.Provider"
    name: "Provider"
    fullName: "java.security.Provider"
- uid: "com.azure.security.keyvault.keys.cryptography.ISignatureTransform"
  name: "ISignatureTransform"
  nameWithType: "ISignatureTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.ISignatureTransform"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.createSignatureTransform*"
  name: "createSignatureTransform"
  nameWithType: "Ecdsa.createSignatureTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.createSignatureTransform"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getDigestLength*"
  name: "getDigestLength"
  nameWithType: "Ecdsa.getDigestLength"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getDigestLength"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getCoordLength*"
  name: "getCoordLength"
  nameWithType: "Ecdsa.getCoordLength"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.getCoordLength"
  package: "com.azure.security.keyvault.keys.cryptography"
- uid: "com.azure.security.keyvault.keys.cryptography.AsymmetricSignatureAlgorithm"
  name: "AsymmetricSignatureAlgorithm"
  nameWithType: "AsymmetricSignatureAlgorithm"
  fullName: "com.azure.security.keyvault.keys.cryptography.AsymmetricSignatureAlgorithm"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "com.azure.security.keyvault.keys.cryptography.Algorithm.getName()"
  name: "Algorithm.getName()"
  nameWithType: "Algorithm.getName()"
  fullName: "com.azure.security.keyvault.keys.cryptography.Algorithm.getName()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
  name: "Ecdsa.EcdsaSignatureTransform"
  nameWithType: "Ecdsa.EcdsaSignatureTransform"
  fullName: "com.azure.security.keyvault.keys.cryptography.Ecdsa.EcdsaSignatureTransform"
