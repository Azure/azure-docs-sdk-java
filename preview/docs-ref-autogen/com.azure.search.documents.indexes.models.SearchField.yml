### YamlMime:JavaType
uid: "com.azure.search.documents.indexes.models.SearchField"
fullName: "com.azure.search.documents.indexes.models.SearchField"
name: "SearchField"
nameWithType: "SearchField"
summary: "Represents a field in an index definition, which describes the name, data type, and search behavior of a field."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedClassMethods:
- classRef: "java.lang.<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html\">Object</a>"
  methodsRef:
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone--\">clone</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-\">equals</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#finalize--\">finalize</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#getClass--\">getClass</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--\">hashCode</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notify--\">notify</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#notifyAll--\">notifyAll</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--\">toString</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait--\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-\">wait</a>"
  - "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#wait-long-int-\">wait</a>"
syntax: "public final class **SearchField**</br> implements <xref href=\"com.azure.json.JsonSerializable?alt=com.azure.json.JsonSerializable&text=JsonSerializable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />&gt;"
constructors:
- uid: "com.azure.search.documents.indexes.models.SearchField.SearchField(java.lang.String,com.azure.search.documents.indexes.models.SearchFieldDataType)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.SearchField(String name, SearchFieldDataType type)"
  name: "SearchField(String name, SearchFieldDataType type)"
  nameWithType: "SearchField.SearchField(String name, SearchFieldDataType type)"
  summary: "Creates an instance of Search<wbr>Field class."
  parameters:
  - description: "the name value to set."
    name: "name"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  - description: "the type value to set."
    name: "type"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchFieldDataType?alt=com.azure.search.documents.indexes.models.SearchFieldDataType&text=SearchFieldDataType\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchField(String name, SearchFieldDataType type)"
  desc: "Creates an instance of SearchField class."
methods:
- uid: "com.azure.search.documents.indexes.models.SearchField.fromJson(com.azure.json.JsonReader)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.fromJson(JsonReader jsonReader)"
  name: "fromJson(JsonReader jsonReader)"
  nameWithType: "SearchField.fromJson(JsonReader jsonReader)"
  summary: "Reads an instance of Search<wbr>Field from the Json<wbr>Reader."
  modifiers:
  - "static"
  parameters:
  - description: "The JsonReader being read."
    name: "jsonReader"
    type: "<xref href=\"com.azure.json.JsonReader?alt=com.azure.json.JsonReader&text=JsonReader\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static SearchField fromJson(JsonReader jsonReader)"
  exceptions:
  - description: "If the deserialized JSON object was missing any required properties."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  desc: "Reads an instance of SearchField from the JsonReader."
  returns:
    description: "An instance of SearchField if the JsonReader was pointing to an instance of it, or null if it was\n pointing to JSON null."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getAnalyzerName()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getAnalyzerName()"
  name: "getAnalyzerName()"
  nameWithType: "SearchField.getAnalyzerName()"
  summary: "Get the analyzer<wbr>Name property: The name of the analyzer to use for the field."
  syntax: "public LexicalAnalyzerName getAnalyzerName()"
  desc: "Get the analyzerName property: The name of the analyzer to use for the field. This option can be used only with searchable fields and it can't be set together with either searchAnalyzer or indexAnalyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
  returns:
    description: "the analyzerName value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getFields()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getFields()"
  name: "getFields()"
  nameWithType: "SearchField.getFields()"
  summary: "Get the fields property: A list of sub-fields if this is a field of type Edm.<wbr>Complex<wbr>Type or Collection(Edm.<wbr>Complex<wbr>Type)."
  syntax: "public List<SearchField> getFields()"
  desc: "Get the fields property: A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields."
  returns:
    description: "the fields value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.search.documents.indexes.models.SearchField.getIndexAnalyzerName()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getIndexAnalyzerName()"
  name: "getIndexAnalyzerName()"
  nameWithType: "SearchField.getIndexAnalyzerName()"
  summary: "Get the index<wbr>Analyzer<wbr>Name property: The name of the analyzer used at indexing time for the field."
  syntax: "public LexicalAnalyzerName getIndexAnalyzerName()"
  desc: "Get the indexAnalyzerName property: The name of the analyzer used at indexing time for the field. This option can be used only with searchable fields. It must be set together with searchAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
  returns:
    description: "the indexAnalyzerName value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getName()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getName()"
  name: "getName()"
  nameWithType: "SearchField.getName()"
  summary: "Get the name property: The name of the field, which must be unique within the fields collection of the index or parent field."
  syntax: "public String getName()"
  desc: "Get the name property: The name of the field, which must be unique within the fields collection of the index or parent field."
  returns:
    description: "the name value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.getNormalizer()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getNormalizer()"
  name: "getNormalizer()"
  nameWithType: "SearchField.getNormalizer()"
  summary: "Get the normalizer property: The name of the normalizer to use for the field."
  syntax: "public LexicalNormalizerName getNormalizer()"
  desc: "Get the normalizer property: The name of the normalizer to use for the field. This option can be used only with fields with filterable, sortable, or facetable enabled. Once the normalizer is chosen, it cannot be changed for the field. Must be null for complex fields."
  returns:
    description: "the normalizer value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalNormalizerName?alt=com.azure.search.documents.indexes.models.LexicalNormalizerName&text=LexicalNormalizerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getSearchAnalyzerName()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getSearchAnalyzerName()"
  name: "getSearchAnalyzerName()"
  nameWithType: "SearchField.getSearchAnalyzerName()"
  summary: "Get the search<wbr>Analyzer<wbr>Name property: The name of the analyzer used at search time for the field."
  syntax: "public LexicalAnalyzerName getSearchAnalyzerName()"
  desc: "Get the searchAnalyzerName property: The name of the analyzer used at search time for the field. This option can be used only with searchable fields. It must be set together with indexAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. This analyzer can be updated on an existing field. Must be null for complex fields."
  returns:
    description: "the searchAnalyzerName value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getSynonymMapNames()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getSynonymMapNames()"
  name: "getSynonymMapNames()"
  nameWithType: "SearchField.getSynonymMapNames()"
  summary: "Get the synonym<wbr>Map<wbr>Names property: A list of the names of synonym maps to associate with this field."
  syntax: "public List<String> getSynonymMapNames()"
  desc: "Get the synonymMapNames property: A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields."
  returns:
    description: "the synonymMapNames value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
- uid: "com.azure.search.documents.indexes.models.SearchField.getType()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getType()"
  name: "getType()"
  nameWithType: "SearchField.getType()"
  summary: "Get the type property: The data type of the field."
  syntax: "public SearchFieldDataType getType()"
  desc: "Get the type property: The data type of the field."
  returns:
    description: "the type value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchFieldDataType?alt=com.azure.search.documents.indexes.models.SearchFieldDataType&text=SearchFieldDataType\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getVectorEncodingFormat()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getVectorEncodingFormat()"
  name: "getVectorEncodingFormat()"
  nameWithType: "SearchField.getVectorEncodingFormat()"
  summary: "Get the vector<wbr>Encoding<wbr>Format property: The encoding format to interpret the field contents."
  syntax: "public VectorEncodingFormat getVectorEncodingFormat()"
  desc: "Get the vectorEncodingFormat property: The encoding format to interpret the field contents."
  returns:
    description: "the vectorEncodingFormat value."
    type: "<xref href=\"com.azure.search.documents.indexes.models.VectorEncodingFormat?alt=com.azure.search.documents.indexes.models.VectorEncodingFormat&text=VectorEncodingFormat\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.getVectorSearchDimensions()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getVectorSearchDimensions()"
  name: "getVectorSearchDimensions()"
  nameWithType: "SearchField.getVectorSearchDimensions()"
  summary: "Get the vector<wbr>Search<wbr>Dimensions property: The dimensionality of the vector field."
  syntax: "public Integer getVectorSearchDimensions()"
  desc: "Get the vectorSearchDimensions property: The dimensionality of the vector field."
  returns:
    description: "the vectorSearchDimensions value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.getVectorSearchProfileName()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.getVectorSearchProfileName()"
  name: "getVectorSearchProfileName()"
  nameWithType: "SearchField.getVectorSearchProfileName()"
  summary: "Get the vector<wbr>Search<wbr>Profile<wbr>Name property: The name of the vector search profile that specifies the algorithm and vectorizer to use when searching the vector field."
  syntax: "public String getVectorSearchProfileName()"
  desc: "Get the vectorSearchProfileName property: The name of the vector search profile that specifies the algorithm and vectorizer to use when searching the vector field."
  returns:
    description: "the vectorSearchProfileName value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isFacetable()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isFacetable()"
  name: "isFacetable()"
  nameWithType: "SearchField.isFacetable()"
  summary: "Get the facetable property: A value indicating whether to enable the field to be referenced in facet queries."
  syntax: "public Boolean isFacetable()"
  desc: "Get the facetable property: A value indicating whether to enable the field to be referenced in facet queries. Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, and so on). This property must be null for complex fields. Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other simple fields."
  returns:
    description: "the facetable value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isFilterable()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isFilterable()"
  name: "isFilterable()"
  nameWithType: "SearchField.isFilterable()"
  summary: "Get the filterable property: A value indicating whether to enable the field to be referenced in $filter queries."
  syntax: "public Boolean isFilterable()"
  desc: "Get the filterable property: A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields."
  returns:
    description: "the filterable value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isHidden()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isHidden()"
  name: "isHidden()"
  nameWithType: "SearchField.isHidden()"
  summary: "Get the hidden property: A value indicating whether the field will be returned in a search result."
  syntax: "public Boolean isHidden()"
  desc: "Get the hidden property: A value indicating whether the field will be returned in a search result. This property must be false for key fields, and must be null for complex fields. You can hide a field from search results if you want to use it only as a filter, for sorting, or for scoring. This property can also be changed on existing fields and enabling it does not cause an increase in index storage requirements."
  returns:
    description: "the hidden value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isKey()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isKey()"
  name: "isKey()"
  nameWithType: "SearchField.isKey()"
  summary: "Get the key property: A value indicating whether the field uniquely identifies documents in the index."
  syntax: "public Boolean isKey()"
  desc: "Get the key property: A value indicating whether the field uniquely identifies documents in the index. Exactly one top-level field in each index must be chosen as the key field and it must be of type Edm.String. Key fields can be used to look up documents directly and update or delete specific documents. Default is false for simple fields and null for complex fields."
  returns:
    description: "the key value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isSearchable()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isSearchable()"
  name: "isSearchable()"
  nameWithType: "SearchField.isSearchable()"
  summary: "Get the searchable property: A value indicating whether the field is full-text searchable."
  syntax: "public Boolean isSearchable()"
  desc: "Get the searchable property: A value indicating whether the field is full-text searchable. This means it will undergo analysis such as word-breaking during indexing. If you set a searchable field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This enables full-text searches for these terms. Fields of type Edm.String or Collection(Edm.String) are searchable by default. This property must be false for simple fields of other non-string data types, and it must be null for complex fields. Note: searchable fields consume extra space in your index to accommodate additional tokenized versions of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set searchable to false."
  returns:
    description: "the searchable value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isSortable()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isSortable()"
  name: "isSortable()"
  nameWithType: "SearchField.isSortable()"
  summary: "Get the sortable property: A value indicating whether to enable the field to be referenced in $orderby expressions."
  syntax: "public Boolean isSortable()"
  desc: "Get the sortable property: A value indicating whether to enable the field to be referenced in $orderby expressions. By default, the search engine sorts results by score, but in many experiences users will want to sort by fields in the documents. A simple field can be sortable only if it is single-valued (it has a single value in the scope of the parent document). Simple collection fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex collections are also multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent field, or an ancestor field, that's the complex collection. Complex fields cannot be sortable and the sortable property must be null for such fields. The default for sortable is true for single-valued simple fields, false for multi-valued simple fields, and null for complex fields."
  returns:
    description: "the sortable value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.isStored()"
  fullName: "com.azure.search.documents.indexes.models.SearchField.isStored()"
  name: "isStored()"
  nameWithType: "SearchField.isStored()"
  summary: "Get the stored property: An immutable value indicating whether the field will be persisted separately on disk to be returned in a search result."
  syntax: "public Boolean isStored()"
  desc: "Get the stored property: An immutable value indicating whether the field will be persisted separately on disk to be returned in a search result. You can disable this option if you don't plan to return the field contents in a search response to save on storage overhead. This can only be set during index creation and only for vector fields. This property cannot be changed for existing fields or set as false for new fields. If this property is set as false, the property 'retrievable' must also be set to false. This property must be true or unset for key fields, for new fields, and for non-vector fields, and it must be null for complex fields. Disabling this property will reduce index storage requirements. The default is true for vector fields."
  returns:
    description: "the stored value."
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
- uid: "com.azure.search.documents.indexes.models.SearchField.setAnalyzerName(com.azure.search.documents.indexes.models.LexicalAnalyzerName)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setAnalyzerName(LexicalAnalyzerName analyzerName)"
  name: "setAnalyzerName(LexicalAnalyzerName analyzerName)"
  nameWithType: "SearchField.setAnalyzerName(LexicalAnalyzerName analyzerName)"
  summary: "Set the analyzer<wbr>Name property: The name of the analyzer to use for the field."
  parameters:
  - description: "the analyzerName value to set."
    name: "analyzerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchField setAnalyzerName(LexicalAnalyzerName analyzerName)"
  desc: "Set the analyzerName property: The name of the analyzer to use for the field. This option can be used only with searchable fields and it can't be set together with either searchAnalyzer or indexAnalyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setFacetable(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setFacetable(Boolean facetable)"
  name: "setFacetable(Boolean facetable)"
  nameWithType: "SearchField.setFacetable(Boolean facetable)"
  summary: "Set the facetable property: A value indicating whether to enable the field to be referenced in facet queries."
  parameters:
  - description: "the facetable value to set."
    name: "facetable"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setFacetable(Boolean facetable)"
  desc: "Set the facetable property: A value indicating whether to enable the field to be referenced in facet queries. Typically used in a presentation of search results that includes hit count by category (for example, search for digital cameras and see hits by brand, by megapixels, by price, and so on). This property must be null for complex fields. Fields of type Edm.GeographyPoint or Collection(Edm.GeographyPoint) cannot be facetable. Default is true for all other simple fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setFields(com.azure.search.documents.indexes.models.SearchField...)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setFields(SearchField[] fields)"
  name: "setFields(SearchField[] fields)"
  nameWithType: "SearchField.setFields(SearchField[] fields)"
  summary: "Set the fields property: A list of sub-fields if this is a field of type Edm.<wbr>Complex<wbr>Type or Collection(Edm.<wbr>Complex<wbr>Type)."
  parameters:
  - description: "the fields value to set."
    name: "fields"
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public SearchField setFields(SearchField[] fields)"
  desc: "Set the fields property: A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setFields(java.util.List<com.azure.search.documents.indexes.models.SearchField>)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setFields(List<SearchField> fields)"
  name: "setFields(List<SearchField> fields)"
  nameWithType: "SearchField.setFields(List<SearchField> fields)"
  summary: "Set the fields property: A list of sub-fields if this is a field of type Edm.<wbr>Complex<wbr>Type or Collection(Edm.<wbr>Complex<wbr>Type)."
  parameters:
  - description: "the fields value to set."
    name: "fields"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public SearchField setFields(List<SearchField> fields)"
  desc: "Set the fields property: A list of sub-fields if this is a field of type Edm.ComplexType or Collection(Edm.ComplexType). Must be null or empty for simple fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setFilterable(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setFilterable(Boolean filterable)"
  name: "setFilterable(Boolean filterable)"
  nameWithType: "SearchField.setFilterable(Boolean filterable)"
  summary: "Set the filterable property: A value indicating whether to enable the field to be referenced in $filter queries."
  parameters:
  - description: "the filterable value to set."
    name: "filterable"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setFilterable(Boolean filterable)"
  desc: "Set the filterable property: A value indicating whether to enable the field to be referenced in $filter queries. filterable differs from searchable in how strings are handled. Fields of type Edm.String or Collection(Edm.String) that are filterable do not undergo word-breaking, so comparisons are for exact matches only. For example, if you set such a field f to \"sunny day\", $filter=f eq 'sunny' will find no matches, but $filter=f eq 'sunny day' will. This property must be null for complex fields. Default is true for simple fields and null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setHidden(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setHidden(Boolean hidden)"
  name: "setHidden(Boolean hidden)"
  nameWithType: "SearchField.setHidden(Boolean hidden)"
  summary: "Set the hidden property: A value indicating whether the field will be returned in a search result."
  parameters:
  - description: "the hidden value to set."
    name: "hidden"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setHidden(Boolean hidden)"
  desc: "Set the hidden property: A value indicating whether the field will be returned in a search result. This property must be false for key fields, and must be null for complex fields. You can hide a field from search results if you want to use it only as a filter, for sorting, or for scoring. This property can also be changed on existing fields and enabling it does not cause an increase in index storage requirements."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setIndexAnalyzerName(com.azure.search.documents.indexes.models.LexicalAnalyzerName)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setIndexAnalyzerName(LexicalAnalyzerName indexAnalyzerName)"
  name: "setIndexAnalyzerName(LexicalAnalyzerName indexAnalyzerName)"
  nameWithType: "SearchField.setIndexAnalyzerName(LexicalAnalyzerName indexAnalyzerName)"
  summary: "Set the index<wbr>Analyzer<wbr>Name property: The name of the analyzer used at indexing time for the field."
  parameters:
  - description: "the indexAnalyzerName value to set."
    name: "indexAnalyzerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchField setIndexAnalyzerName(LexicalAnalyzerName indexAnalyzerName)"
  desc: "Set the indexAnalyzerName property: The name of the analyzer used at indexing time for the field. This option can be used only with searchable fields. It must be set together with searchAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. Once the analyzer is chosen, it cannot be changed for the field. Must be null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setKey(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setKey(Boolean key)"
  name: "setKey(Boolean key)"
  nameWithType: "SearchField.setKey(Boolean key)"
  summary: "Set the key property: A value indicating whether the field uniquely identifies documents in the index."
  parameters:
  - description: "the key value to set."
    name: "key"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setKey(Boolean key)"
  desc: "Set the key property: A value indicating whether the field uniquely identifies documents in the index. Exactly one top-level field in each index must be chosen as the key field and it must be of type Edm.String. Key fields can be used to look up documents directly and update or delete specific documents. Default is false for simple fields and null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setNormalizer(com.azure.search.documents.indexes.models.LexicalNormalizerName)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setNormalizer(LexicalNormalizerName normalizer)"
  name: "setNormalizer(LexicalNormalizerName normalizer)"
  nameWithType: "SearchField.setNormalizer(LexicalNormalizerName normalizer)"
  summary: "Set the normalizer property: The name of the normalizer to use for the field."
  parameters:
  - description: "the normalizer value to set."
    name: "normalizer"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalNormalizerName?alt=com.azure.search.documents.indexes.models.LexicalNormalizerName&text=LexicalNormalizerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchField setNormalizer(LexicalNormalizerName normalizer)"
  desc: "Set the normalizer property: The name of the normalizer to use for the field. This option can be used only with fields with filterable, sortable, or facetable enabled. Once the normalizer is chosen, it cannot be changed for the field. Must be null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setSearchAnalyzerName(com.azure.search.documents.indexes.models.LexicalAnalyzerName)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setSearchAnalyzerName(LexicalAnalyzerName searchAnalyzerName)"
  name: "setSearchAnalyzerName(LexicalAnalyzerName searchAnalyzerName)"
  nameWithType: "SearchField.setSearchAnalyzerName(LexicalAnalyzerName searchAnalyzerName)"
  summary: "Set the search<wbr>Analyzer<wbr>Name property: The name of the analyzer used at search time for the field."
  parameters:
  - description: "the searchAnalyzerName value to set."
    name: "searchAnalyzerName"
    type: "<xref href=\"com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchField setSearchAnalyzerName(LexicalAnalyzerName searchAnalyzerName)"
  desc: "Set the searchAnalyzerName property: The name of the analyzer used at search time for the field. This option can be used only with searchable fields. It must be set together with indexAnalyzer and it cannot be set together with the analyzer option. This property cannot be set to the name of a language analyzer; use the analyzer property instead if you need a language analyzer. This analyzer can be updated on an existing field. Must be null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setSearchable(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setSearchable(Boolean searchable)"
  name: "setSearchable(Boolean searchable)"
  nameWithType: "SearchField.setSearchable(Boolean searchable)"
  summary: "Set the searchable property: A value indicating whether the field is full-text searchable."
  parameters:
  - description: "the searchable value to set."
    name: "searchable"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setSearchable(Boolean searchable)"
  desc: "Set the searchable property: A value indicating whether the field is full-text searchable. This means it will undergo analysis such as word-breaking during indexing. If you set a searchable field to a value like \"sunny day\", internally it will be split into the individual tokens \"sunny\" and \"day\". This enables full-text searches for these terms. Fields of type Edm.String or Collection(Edm.String) are searchable by default. This property must be false for simple fields of other non-string data types, and it must be null for complex fields. Note: searchable fields consume extra space in your index to accommodate additional tokenized versions of the field value for full-text searches. If you want to save space in your index and you don't need a field to be included in searches, set searchable to false."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setSortable(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setSortable(Boolean sortable)"
  name: "setSortable(Boolean sortable)"
  nameWithType: "SearchField.setSortable(Boolean sortable)"
  summary: "Set the sortable property: A value indicating whether to enable the field to be referenced in $orderby expressions."
  parameters:
  - description: "the sortable value to set."
    name: "sortable"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setSortable(Boolean sortable)"
  desc: "Set the sortable property: A value indicating whether to enable the field to be referenced in $orderby expressions. By default, the search engine sorts results by score, but in many experiences users will want to sort by fields in the documents. A simple field can be sortable only if it is single-valued (it has a single value in the scope of the parent document). Simple collection fields cannot be sortable, since they are multi-valued. Simple sub-fields of complex collections are also multi-valued, and therefore cannot be sortable. This is true whether it's an immediate parent field, or an ancestor field, that's the complex collection. Complex fields cannot be sortable and the sortable property must be null for such fields. The default for sortable is true for single-valued simple fields, false for multi-valued simple fields, and null for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setStored(java.lang.Boolean)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setStored(Boolean stored)"
  name: "setStored(Boolean stored)"
  nameWithType: "SearchField.setStored(Boolean stored)"
  summary: "Set the stored property: An immutable value indicating whether the field will be persisted separately on disk to be returned in a search result."
  parameters:
  - description: "the stored value to set."
    name: "stored"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Boolean.html\">Boolean</a>"
  syntax: "public SearchField setStored(Boolean stored)"
  desc: "Set the stored property: An immutable value indicating whether the field will be persisted separately on disk to be returned in a search result. You can disable this option if you don't plan to return the field contents in a search response to save on storage overhead. This can only be set during index creation and only for vector fields. This property cannot be changed for existing fields or set as false for new fields. If this property is set as false, the property 'retrievable' must also be set to false. This property must be true or unset for key fields, for new fields, and for non-vector fields, and it must be null for complex fields. Disabling this property will reduce index storage requirements. The default is true for vector fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setSynonymMapNames(java.lang.String...)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setSynonymMapNames(String[] synonymMapNames)"
  name: "setSynonymMapNames(String[] synonymMapNames)"
  nameWithType: "SearchField.setSynonymMapNames(String[] synonymMapNames)"
  summary: "Set the synonym<wbr>Map<wbr>Names property: A list of the names of synonym maps to associate with this field."
  parameters:
  - description: "the synonymMapNames value to set."
    name: "synonymMapNames"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>[]"
  syntax: "public SearchField setSynonymMapNames(String[] synonymMapNames)"
  desc: "Set the synonymMapNames property: A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setSynonymMapNames(java.util.List<java.lang.String>)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setSynonymMapNames(List<String> synonymMapNames)"
  name: "setSynonymMapNames(List<String> synonymMapNames)"
  nameWithType: "SearchField.setSynonymMapNames(List<String> synonymMapNames)"
  summary: "Set the synonym<wbr>Map<wbr>Names property: A list of the names of synonym maps to associate with this field."
  parameters:
  - description: "the synonymMapNames value to set."
    name: "synonymMapNames"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a>&lt;<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>&gt;"
  syntax: "public SearchField setSynonymMapNames(List<String> synonymMapNames)"
  desc: "Set the synonymMapNames property: A list of the names of synonym maps to associate with this field. This option can be used only with searchable fields. Currently only one synonym map per field is supported. Assigning a synonym map to a field ensures that query terms targeting that field are expanded at query-time using the rules in the synonym map. This attribute can be changed on existing fields. Must be null or an empty collection for complex fields."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setVectorEncodingFormat(com.azure.search.documents.indexes.models.VectorEncodingFormat)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setVectorEncodingFormat(VectorEncodingFormat vectorEncodingFormat)"
  name: "setVectorEncodingFormat(VectorEncodingFormat vectorEncodingFormat)"
  nameWithType: "SearchField.setVectorEncodingFormat(VectorEncodingFormat vectorEncodingFormat)"
  summary: "Set the vector<wbr>Encoding<wbr>Format property: The encoding format to interpret the field contents."
  parameters:
  - description: "the vectorEncodingFormat value to set."
    name: "vectorEncodingFormat"
    type: "<xref href=\"com.azure.search.documents.indexes.models.VectorEncodingFormat?alt=com.azure.search.documents.indexes.models.VectorEncodingFormat&text=VectorEncodingFormat\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SearchField setVectorEncodingFormat(VectorEncodingFormat vectorEncodingFormat)"
  desc: "Set the vectorEncodingFormat property: The encoding format to interpret the field contents."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setVectorSearchDimensions(java.lang.Integer)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setVectorSearchDimensions(Integer vectorSearchDimensions)"
  name: "setVectorSearchDimensions(Integer vectorSearchDimensions)"
  nameWithType: "SearchField.setVectorSearchDimensions(Integer vectorSearchDimensions)"
  summary: "Set the vector<wbr>Search<wbr>Dimensions property: The dimensionality of the vector field."
  parameters:
  - description: "the vectorSearchDimensions value to set."
    name: "vectorSearchDimensions"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html\">Integer</a>"
  syntax: "public SearchField setVectorSearchDimensions(Integer vectorSearchDimensions)"
  desc: "Set the vectorSearchDimensions property: The dimensionality of the vector field."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.setVectorSearchProfileName(java.lang.String)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.setVectorSearchProfileName(String vectorSearchProfileName)"
  name: "setVectorSearchProfileName(String vectorSearchProfileName)"
  nameWithType: "SearchField.setVectorSearchProfileName(String vectorSearchProfileName)"
  summary: "Set the vector<wbr>Search<wbr>Profile<wbr>Name property: The name of the vector search profile that specifies the algorithm and vectorizer to use when searching the vector field."
  parameters:
  - description: "the vectorSearchProfileName value to set."
    name: "vectorSearchProfileName"
    type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html\">String</a>"
  syntax: "public SearchField setVectorSearchProfileName(String vectorSearchProfileName)"
  desc: "Set the vectorSearchProfileName property: The name of the vector search profile that specifies the algorithm and vectorizer to use when searching the vector field."
  returns:
    description: "the SearchField object itself."
    type: "<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.search.documents.indexes.models.SearchField.toJson(com.azure.json.JsonWriter)"
  fullName: "com.azure.search.documents.indexes.models.SearchField.toJson(JsonWriter jsonWriter)"
  name: "toJson(JsonWriter jsonWriter)"
  nameWithType: "SearchField.toJson(JsonWriter jsonWriter)"
  parameters:
  - name: "jsonWriter"
    type: "<xref href=\"com.azure.json.JsonWriter?alt=com.azure.json.JsonWriter&text=JsonWriter\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public JsonWriter toJson(JsonWriter jsonWriter)"
  exceptions:
  - type: "<a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/IOException.html\">IOException</a>"
  returns:
    type: "<xref href=\"com.azure.json.JsonWriter?alt=com.azure.json.JsonWriter&text=JsonWriter\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Represents a field in an index definition, which describes the name, data type, and search behavior of a field."
implements:
- "<xref href=\"com.azure.json.JsonSerializable?alt=com.azure.json.JsonSerializable&text=JsonSerializable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.search.documents.indexes.models.SearchField?alt=com.azure.search.documents.indexes.models.SearchField&text=SearchField\" data-throw-if-not-resolved=\"False\" />&gt;"
metadata: {}
package: "com.azure.search.documents.indexes.models"
artifact: com.azure:azure-search-documents:11.8.0-beta.1
