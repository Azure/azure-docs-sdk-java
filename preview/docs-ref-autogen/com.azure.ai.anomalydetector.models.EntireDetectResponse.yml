### YamlMime:JavaType
uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse"
fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse"
name: "EntireDetectResponse"
nameWithType: "EntireDetectResponse"
summary: "The response of entire anomaly detection."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class EntireDetectResponse"
constructors:
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.EntireDetectResponse()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.EntireDetectResponse()"
  name: "EntireDetectResponse()"
  nameWithType: "EntireDetectResponse.EntireDetectResponse()"
  syntax: "public EntireDetectResponse()"
methods:
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getExpectedValues()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getExpectedValues()"
  name: "getExpectedValues()"
  nameWithType: "EntireDetectResponse.getExpectedValues()"
  summary: "Get the expected<wbr>Values property: Expected<wbr>Values contain expected value for each input point."
  syntax: "public List<Float> getExpectedValues()"
  desc: "Get the expectedValues property: ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series."
  returns:
    description: "the expectedValues value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getIsAnomaly()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getIsAnomaly()"
  name: "getIsAnomaly()"
  nameWithType: "EntireDetectResponse.getIsAnomaly()"
  summary: "Get the is<wbr>Anomaly property: Is<wbr>Anomaly contains anomaly properties for each input point."
  syntax: "public List<Boolean> getIsAnomaly()"
  desc: "Get the isAnomaly property: IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series."
  returns:
    description: "the isAnomaly value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getIsNegativeAnomaly()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getIsNegativeAnomaly()"
  name: "getIsNegativeAnomaly()"
  nameWithType: "EntireDetectResponse.getIsNegativeAnomaly()"
  summary: "Get the is<wbr>Negative<wbr>Anomaly property: Is<wbr>Negative<wbr>Anomaly contains anomaly status in negative direction for each input point."
  syntax: "public List<Boolean> getIsNegativeAnomaly()"
  desc: "Get the isNegativeAnomaly property: IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series."
  returns:
    description: "the isNegativeAnomaly value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getIsPositiveAnomaly()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getIsPositiveAnomaly()"
  name: "getIsPositiveAnomaly()"
  nameWithType: "EntireDetectResponse.getIsPositiveAnomaly()"
  summary: "Get the is<wbr>Positive<wbr>Anomaly property: Is<wbr>Positive<wbr>Anomaly contain anomaly status in positive direction for each input point."
  syntax: "public List<Boolean> getIsPositiveAnomaly()"
  desc: "Get the isPositiveAnomaly property: IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series."
  returns:
    description: "the isPositiveAnomaly value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getLowerMargins()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getLowerMargins()"
  name: "getLowerMargins()"
  nameWithType: "EntireDetectResponse.getLowerMargins()"
  summary: "Get the lower<wbr>Margins property: Lower<wbr>Margins contain lower margin of each input point."
  syntax: "public List<Float> getLowerMargins()"
  desc: "Get the lowerMargins property: LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)\\*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series."
  returns:
    description: "the lowerMargins value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getPeriod()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getPeriod()"
  name: "getPeriod()"
  nameWithType: "EntireDetectResponse.getPeriod()"
  summary: "Get the period property: Frequency extracted from the series, zero means no recurrent pattern has been found."
  syntax: "public int getPeriod()"
  desc: "Get the period property: Frequency extracted from the series, zero means no recurrent pattern has been found."
  returns:
    description: "the period value."
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getSeverity()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getSeverity()"
  name: "getSeverity()"
  nameWithType: "EntireDetectResponse.getSeverity()"
  summary: "Get the severity property: The severity score for each input point."
  syntax: "public List<Float> getSeverity()"
  desc: "Get the severity property: The severity score for each input point. The larger the value is, the more sever the anomaly is. For normal points, the \"severity\" is always 0."
  returns:
    description: "the severity value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getUpperMargins()"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.getUpperMargins()"
  name: "getUpperMargins()"
  nameWithType: "EntireDetectResponse.getUpperMargins()"
  summary: "Get the upper<wbr>Margins property: Upper<wbr>Margins contain upper margin of each input point."
  syntax: "public List<Float> getUpperMargins()"
  desc: "Get the upperMargins property: UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)\\*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series."
  returns:
    description: "the upperMargins value."
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setExpectedValues(java.util.List<java.lang.Float>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setExpectedValues(List<Float> expectedValues)"
  name: "setExpectedValues(List<Float> expectedValues)"
  nameWithType: "EntireDetectResponse.setExpectedValues(List<Float> expectedValues)"
  summary: "Set the expected<wbr>Values property: Expected<wbr>Values contain expected value for each input point."
  parameters:
  - description: "the expectedValues value to set."
    name: "expectedValues"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setExpectedValues(List<Float> expectedValues)"
  desc: "Set the expectedValues property: ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setIsAnomaly(java.util.List<java.lang.Boolean>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setIsAnomaly(List<Boolean> isAnomaly)"
  name: "setIsAnomaly(List<Boolean> isAnomaly)"
  nameWithType: "EntireDetectResponse.setIsAnomaly(List<Boolean> isAnomaly)"
  summary: "Set the is<wbr>Anomaly property: Is<wbr>Anomaly contains anomaly properties for each input point."
  parameters:
  - description: "the isAnomaly value to set."
    name: "isAnomaly"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setIsAnomaly(List<Boolean> isAnomaly)"
  desc: "Set the isAnomaly property: IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setIsNegativeAnomaly(java.util.List<java.lang.Boolean>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setIsNegativeAnomaly(List<Boolean> isNegativeAnomaly)"
  name: "setIsNegativeAnomaly(List<Boolean> isNegativeAnomaly)"
  nameWithType: "EntireDetectResponse.setIsNegativeAnomaly(List<Boolean> isNegativeAnomaly)"
  summary: "Set the is<wbr>Negative<wbr>Anomaly property: Is<wbr>Negative<wbr>Anomaly contains anomaly status in negative direction for each input point."
  parameters:
  - description: "the isNegativeAnomaly value to set."
    name: "isNegativeAnomaly"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setIsNegativeAnomaly(List<Boolean> isNegativeAnomaly)"
  desc: "Set the isNegativeAnomaly property: IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setIsPositiveAnomaly(java.util.List<java.lang.Boolean>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setIsPositiveAnomaly(List<Boolean> isPositiveAnomaly)"
  name: "setIsPositiveAnomaly(List<Boolean> isPositiveAnomaly)"
  nameWithType: "EntireDetectResponse.setIsPositiveAnomaly(List<Boolean> isPositiveAnomaly)"
  summary: "Set the is<wbr>Positive<wbr>Anomaly property: Is<wbr>Positive<wbr>Anomaly contain anomaly status in positive direction for each input point."
  parameters:
  - description: "the isPositiveAnomaly value to set."
    name: "isPositiveAnomaly"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Boolean?alt=java.lang.Boolean&text=Boolean\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setIsPositiveAnomaly(List<Boolean> isPositiveAnomaly)"
  desc: "Set the isPositiveAnomaly property: IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setLowerMargins(java.util.List<java.lang.Float>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setLowerMargins(List<Float> lowerMargins)"
  name: "setLowerMargins(List<Float> lowerMargins)"
  nameWithType: "EntireDetectResponse.setLowerMargins(List<Float> lowerMargins)"
  summary: "Set the lower<wbr>Margins property: Lower<wbr>Margins contain lower margin of each input point."
  parameters:
  - description: "the lowerMargins value to set."
    name: "lowerMargins"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setLowerMargins(List<Float> lowerMargins)"
  desc: "Set the lowerMargins property: LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)\\*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setPeriod(int)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setPeriod(int period)"
  name: "setPeriod(int period)"
  nameWithType: "EntireDetectResponse.setPeriod(int period)"
  summary: "Set the period property: Frequency extracted from the series, zero means no recurrent pattern has been found."
  parameters:
  - description: "the period value to set."
    name: "period"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public EntireDetectResponse setPeriod(int period)"
  desc: "Set the period property: Frequency extracted from the series, zero means no recurrent pattern has been found."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setSeverity(java.util.List<java.lang.Float>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setSeverity(List<Float> severity)"
  name: "setSeverity(List<Float> severity)"
  nameWithType: "EntireDetectResponse.setSeverity(List<Float> severity)"
  summary: "Set the severity property: The severity score for each input point."
  parameters:
  - description: "the severity value to set."
    name: "severity"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setSeverity(List<Float> severity)"
  desc: "Set the severity property: The severity score for each input point. The larger the value is, the more sever the anomaly is. For normal points, the \"severity\" is always 0."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setUpperMargins(java.util.List<java.lang.Float>)"
  fullName: "com.azure.ai.anomalydetector.models.EntireDetectResponse.setUpperMargins(List<Float> upperMargins)"
  name: "setUpperMargins(List<Float> upperMargins)"
  nameWithType: "EntireDetectResponse.setUpperMargins(List<Float> upperMargins)"
  summary: "Set the upper<wbr>Margins property: Upper<wbr>Margins contain upper margin of each input point."
  parameters:
  - description: "the upperMargins value to set."
    name: "upperMargins"
    type: "<xref href=\"java.util.List?alt=java.util.List&text=List\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.Float?alt=java.lang.Float&text=Float\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public EntireDetectResponse setUpperMargins(List<Float> upperMargins)"
  desc: "Set the upperMargins property: UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)\\*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series."
  returns:
    description: "the EntireDetectResponse object itself."
    type: "<xref href=\"com.azure.ai.anomalydetector.models.EntireDetectResponse?alt=com.azure.ai.anomalydetector.models.EntireDetectResponse&text=EntireDetectResponse\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "The response of entire anomaly detection."
metadata: {}
package: "com.azure.ai.anomalydetector.models"
artifact: com.azure:azure-ai-anomalydetector:3.0.0-beta.4
