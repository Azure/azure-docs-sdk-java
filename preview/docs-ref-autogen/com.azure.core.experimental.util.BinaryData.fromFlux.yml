### YamlMime:JavaMember
uid: "com.azure.core.experimental.util.BinaryData.fromFlux*"
fullName: "com.azure.core.experimental.util.BinaryData.fromFlux"
name: "fromFlux"
nameWithType: "BinaryData.fromFlux"
members:
- uid: "com.azure.core.experimental.util.BinaryData.fromFlux(reactor.core.publisher.Flux<java.nio.ByteBuffer>)"
  fullName: "com.azure.core.experimental.util.BinaryData.fromFlux(Flux<ByteBuffer> data)"
  name: "fromFlux(Flux<ByteBuffer> data)"
  nameWithType: "BinaryData.fromFlux(Flux<ByteBuffer> data)"
  summary: "Create <xref uid=\"com.azure.core.experimental.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> instance with given <xref uid=\"reactor.core.publisher.Flux\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Flux\"></xref> of <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> as source of data. It will collect all the bytes from <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ByteBuffer\"></xref> into <xref uid=\"com.azure.core.experimental.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref>.\n\n**Create an instance from String**\n\n```java\nfinal byte[] data = \"Some Data\".getBytes(StandardCharsets.UTF_8);\n final Flux<ByteBuffer> dataFlux = Flux.just(ByteBuffer.wrap(data));\n \n Mono<BinaryData> binaryDataMono = BinaryData.fromFlux(dataFlux);\n \n // Lets print the value of BinaryData\n Disposable subscriber = binaryDataMono\n     .map(binaryData -> {\n         System.out.println(binaryData.toString());\n         return true;\n     })\n     .subscribe();\n \n // So that your program wait for above subscribe to complete.\n TimeUnit.SECONDS.sleep(5);\n subscriber.dispose();\n```"
  parameters:
  - description: "to use."
    name: "data"
    type: "<xref href=\"reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Mono<BinaryData> fromFlux(Flux<ByteBuffer> data)"
  returns:
    description: "<xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Mono\"></xref> of <xref uid=\"com.azure.core.experimental.util.BinaryData\" data-throw-if-not-resolved=\"false\" data-raw-source=\"BinaryData\"></xref> representing binary data."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.experimental.util.BinaryData?alt=com.azure.core.experimental.util.BinaryData&text=BinaryData\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.core.experimental.util"
artifact: com.azure:azure-core-experimental:1.0.0-beta.7
