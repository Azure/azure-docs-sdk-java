### YamlMime:JavaType
uid: "com.azure.cosmos.implementation.guava25.collect.MapMaker"
fullName: "com.azure.cosmos.implementation.guava25.collect.MapMaker"
name: "MapMaker"
nameWithType: "MapMaker"
summary: "A builder of <xref uid=\"java.util.concurrent.ConcurrentMap\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConcurrentMap\"></xref> instances that can have keys or values automatically wrapped in <xref uid=\"java.lang.ref.WeakReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"weak\"></xref> references.\n\nUsage example:\n\n```java\nConcurrentMap timers = new MapMaker()\n     .concurrencyLevel(4)\n     .weakKeys()\n     .makeMap();\n```\n\nThese features are all optional; `new MapMaker().makeMap()` returns a valid concurrent map that behaves similarly to a <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConcurrentHashMap\"></xref>.\n\nThe returned map is implemented as a hash table with similar performance characteristics to <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConcurrentHashMap\"></xref>. It supports all optional operations of the `ConcurrentMap` interface. It does not permit null keys or values.\n\n**Note:** by default, the returned map uses equality comparisons (the <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"equals\"></xref> method) to determine equality for keys or values. However, if <xref uid=\"com.azure.cosmos.implementation.guava25.collect.MapMaker.weakKeys*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#weakKeys\"></xref> was specified, the map uses identity (`==`) comparisons instead for keys. Likewise, if <xref uid=\"com.azure.cosmos.implementation.guava25.collect.MapMaker.weakValues*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#weakValues\"></xref> was specified, the map uses identity comparisons for values.\n\nThe view collections of the returned map have *weakly consistent iterators*. This means that they are safe for concurrent use, but if other threads modify the map after the iterator is created, it is undefined which of these changes, if any, are reflected in that iterator. These iterators never throw <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"ConcurrentModificationException\"></xref>.\n\nIf <xref uid=\"com.azure.cosmos.implementation.guava25.collect.MapMaker.weakKeys*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#weakKeys\"></xref> or <xref uid=\"com.azure.cosmos.implementation.guava25.collect.MapMaker.weakValues*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#weakValues\"></xref> are requested, it is possible for a key or value present in the map to be reclaimed by the garbage collector. Entries with reclaimed keys or values may be removed from the map on each map modification or on occasional map accesses; such entries may be counted by <xref uid=\"java.util.Map.size\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map#size\"></xref>, but will never be visible to read or write operations. A partially-reclaimed entry is never exposed to the user. Any <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Entry\"></xref> instance retrieved from the map's <xref uid=\"java.util.Map.entrySet\" data-throw-if-not-resolved=\"false\" data-raw-source=\"entry set\"></xref> is a snapshot of that entry's state at the time of retrieval; such entries do, however, support <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.Entry#setValue\"></xref>, which simply calls <xref uid=\"java.util.Map.put\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Map#put\"></xref> on the entry's key.\n\nThe maps produced by `MapMaker` are serializable, and the deserialized maps retain all the configuration properties of the original map. During deserialization, if the original map had used weak references, the entries are reconstructed as they were, but it's not unlikely they'll be quickly garbage-collected before they are ever accessed.\n\n`new MapMaker().weakKeys().makeMap()` is a recommended replacement for <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"java.util.WeakHashMap\"></xref>, but note that it compares keys using object identity whereas `WeakHashMap` uses <xref uid=\"java.lang.Object.equals\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Object#equals\"></xref>."
inheritances:
- "<xref href=\"java.lang.Object\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public final class MapMaker"
constructors:
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.MapMaker()"
methods:
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.<K,V>makeMap()"
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.concurrencyLevel(int)"
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.initialCapacity(int)"
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.toString()"
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.weakKeys()"
- "com.azure.cosmos.implementation.guava25.collect.MapMaker.weakValues()"
type: "class"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
