### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.ser.ResolvableSerializer
  id: ResolvableSerializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser
  children:
  - com.fasterxml.jackson.databind.ser.ResolvableSerializer.resolve(com.fasterxml.jackson.databind.SerializerProvider)
  langs:
  - java
  name: ResolvableSerializer
  nameWithType: ResolvableSerializer
  fullName: com.fasterxml.jackson.databind.ser.ResolvableSerializer
  type: Interface
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Interface used to indicate serializers that want to do post-processing after construction and being added to <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref>, but before being used. This is typically used to resolve references to other contained types; for example, bean serializers use this to eagerly find serializers for contained field types.


    Note that in cases where serializer needs both contextualization and resolution -- that is, implements both this interface and <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">ContextualSerializer</xref> \-- resolution via this interface occurs first, and contextual resolution (using <xref uid="com.fasterxml.jackson.databind.ser.ContextualSerializer" data-throw-if-not-resolved="false">ContextualSerializer</xref>) later on.
  syntax:
    content: public interface ResolvableSerializer
- uid: com.fasterxml.jackson.databind.ser.ResolvableSerializer.resolve(com.fasterxml.jackson.databind.SerializerProvider)
  id: resolve(com.fasterxml.jackson.databind.SerializerProvider)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.ser.ResolvableSerializer
  langs:
  - java
  name: resolve(SerializerProvider provider)
  nameWithType: ResolvableSerializer.resolve(SerializerProvider provider)
  fullName: com.fasterxml.jackson.databind.ser.ResolvableSerializer.resolve(SerializerProvider provider)
  overload: com.fasterxml.jackson.databind.ser.ResolvableSerializer.resolve*
  type: Method
  package: com.fasterxml.jackson.databind.ser
  summary: >-
    Method called after <xref uid="com.fasterxml.jackson.databind.SerializerProvider" data-throw-if-not-resolved="false">SerializerProvider</xref> has registered the serializer, but before it has returned it to the caller. Called object can then resolve its dependencies to other types, including self-references (direct or indirect).


    Note that this method does NOT return serializer, since resolution is not allowed to change actual serializer to use.
  syntax:
    content: public abstract void resolve(SerializerProvider provider)
    parameters:
    - id: provider
      type: com.fasterxml.jackson.databind.SerializerProvider
      description: >-
        Provider that has constructed serializer this method
           is called on.
  exceptions:
  - type: com.fasterxml.jackson.databind.JsonMappingException
references:
- uid: com.fasterxml.jackson.databind.JsonMappingException
  name: JsonMappingException
  nameWithType: JsonMappingException
  fullName: com.fasterxml.jackson.databind.JsonMappingException
- uid: com.fasterxml.jackson.databind.SerializerProvider
  name: SerializerProvider
  nameWithType: SerializerProvider
  fullName: com.fasterxml.jackson.databind.SerializerProvider
- uid: com.fasterxml.jackson.databind.ser.ResolvableSerializer.resolve*
  name: resolve
  nameWithType: ResolvableSerializer.resolve
  fullName: com.fasterxml.jackson.databind.ser.ResolvableSerializer.resolve
  package: com.fasterxml.jackson.databind.ser
