### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Splitter.limit*"
fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.limit"
name: "limit"
nameWithType: "Splitter.limit"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Splitter.limit(int)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Splitter.limit(int limit)"
  name: "limit(int limit)"
  nameWithType: "Splitter.limit(int limit)"
  summary: "Returns a splitter that behaves equivalently to `this` splitter but stops splitting after it reaches the limit. The limit defines the maximum number of items returned by the iterator, or the maximum size of the list returned by <xref uid=\"com.azure.cosmos.implementation.guava25.base.Splitter.splitToList*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"#splitToList\"></xref>.\n\nFor example, `Splitter.on(',').limit(3).split(\"a,b,c,d\")` returns an iterable containing `[\"a\", \"b\", \"c,d\"]`. When omitting empty strings, the omitted strings do not count. Hence, `Splitter.on(',').limit(3).omitEmptyStrings().split(\"a,,,b,,,c,d\")` returns an iterable containing `[\"a\", \"b\", \"c,d\"`. When trim is requested, all entries are trimmed, including the last. Hence `Splitter.on(',').limit(3).trimResults().split(\" a , b , c , d \")` results in `[\"a\", \"b\", \"c , d\"]`."
  parameters:
  - description: "the maximum number of items returned"
    name: "limit"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Splitter limit(int limit)"
  returns:
    description: "a splitter with the desired configuration"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
