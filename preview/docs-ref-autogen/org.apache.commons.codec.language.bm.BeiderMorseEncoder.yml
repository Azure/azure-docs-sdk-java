### YamlMime:ManagedReference
items:
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  id: BeiderMorseEncoder
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm
  children:
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.BeiderMorseEncoder()
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType()
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType()
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat()
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)
  - org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)
  langs:
  - java
  name: BeiderMorseEncoder
  nameWithType: BeiderMorseEncoder
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  type: Class
  package: org.apache.commons.codec.language.bm
  summary: >-
    Encodes strings into their Beider-Morse phonetic encoding.


    Beider-Morse phonetic encodings are optimised for family names. However, they may be useful for a wide range of words.


    This encoder is intentionally mutable to allow dynamic configuration through bean properties. As such, it is mutable, and may not be thread-safe. If you require a guaranteed thread-safe encoding then use <xref uid="org.apache.commons.codec.language.bm.PhoneticEngine" data-throw-if-not-resolved="false">PhoneticEngine</xref> directly.


    **Encoding overview**


    Beider-Morse phonetic encodings is a multi-step process. Firstly, a table of rules is consulted to guess what language the word comes from. For example, if it ends in "`ault`" then it infers that the word is French. Next, the word is translated into a phonetic representation using a language-specific phonetics table. Some runs of letters can be pronounced in multiple ways, and a single run of letters may be potentially broken up into phonemes at different places, so this stage results in a set of possible language-specific phonetic representations. Lastly, this language-specific phonetic representation is processed by a table of rules that re-writes it phonetically taking into account systematic pronunciation differences between languages, to move it towards a pan-indo-european phonetic representation. Again, sometimes there are multiple ways this could be done and sometimes things that can be pronounced in several ways in the source language have only one way to represent them in this average phonetic language, so the result is again a set of phonetic spellings.


    Some names are treated as having multiple parts. This can be due to two things. Firstly, they may be hyphenated. In this case, each individual hyphenated word is encoded, and then these are combined end-to-end for the final encoding. Secondly, some names have standard prefixes, for example, "`Mac/Mc`" in Scottish (English) names. As sometimes it is ambiguous whether the prefix is intended or is an accident of the spelling, the word is encoded once with the prefix and once without it. The resulting encoding contains one and then the other result.


    **Encoding format**


    Individual phonetic spellings of an input word are represented in upper- and lower-case roman characters. Where there are multiple possible phonetic representations, these are joined with a pipe (`|`) character. If multiple hyphenated words where found, or if the word may contain a name prefix, each encoded word is placed in elipses and these blocks are then joined with hyphens. For example, "`d'ortley`" has a possible prefix. The form without prefix encodes to "`ortlaj|ortlej`", while the form with prefix encodes to " `dortlaj|dortlej`". Thus, the full, combined encoding is "`(ortlaj|ortlej)-(dortlaj|dortlej)`".


    The encoded forms are often quite a bit longer than the input strings. This is because a single input may have many potential phonetic interpretations. For example, "`Renault`" encodes to " `rYnDlt|rYnalt|rYnult|rinDlt|rinalt|rinult`". The `APPROX` rules will tend to produce larger encodings as they consider a wider range of possible, approximate phonetic interpretations of the original word. Down-stream applications may wish to further process the encoding for indexing or lookup purposes, for example, by splitting on pipe (`|`) and indexing under each of these alternatives.


    **Note**: this version of the Beider-Morse encoding is equivalent with v3.4 of the reference implementation.
  syntax:
    content: public class BeiderMorseEncoder implements StringEncoder
  inheritance:
  - java.lang.Object
  implements:
  - org.apache.commons.codec.StringEncoder
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.BeiderMorseEncoder()
  id: BeiderMorseEncoder()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: BeiderMorseEncoder()
  nameWithType: BeiderMorseEncoder.BeiderMorseEncoder()
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.BeiderMorseEncoder()
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.BeiderMorseEncoder*
  type: Constructor
  package: org.apache.commons.codec.language.bm
  syntax:
    content: public BeiderMorseEncoder()
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)
  id: encode(java.lang.Object)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: encode(Object source)
  nameWithType: BeiderMorseEncoder.encode(Object source)
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(Object source)
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Encodes an "Object" and returns the encoded content as an Object. The Objects here may just be `byte[]` or `String`s depending on the implementation used.
  syntax:
    content: public Object encode(Object source)
    parameters:
    - id: source
      type: java.lang.Object
    return:
      type: java.lang.Object
  exceptions:
  - type: org.apache.commons.codec.EncoderException
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)
  id: encode(java.lang.String)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: encode(String source)
  nameWithType: BeiderMorseEncoder.encode(String source)
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode(String source)
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Encodes a String and returns a String.
  syntax:
    content: public String encode(String source)
    parameters:
    - id: source
      type: java.lang.String
    return:
      type: java.lang.String
  exceptions:
  - type: org.apache.commons.codec.EncoderException
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType()
  id: getNameType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: getNameType()
  nameWithType: BeiderMorseEncoder.getNameType()
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType()
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets the name type currently in operation.
  syntax:
    content: public NameType getNameType()
    return:
      type: org.apache.commons.codec.language.bm.NameType
      description: the NameType currently being used
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType()
  id: getRuleType()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: getRuleType()
  nameWithType: BeiderMorseEncoder.getRuleType()
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType()
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Gets the rule type currently in operation.
  syntax:
    content: public RuleType getRuleType()
    return:
      type: org.apache.commons.codec.language.bm.RuleType
      description: the RuleType currently being used
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat()
  id: isConcat()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: isConcat()
  nameWithType: BeiderMorseEncoder.isConcat()
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat()
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Discovers if multiple possible encodings are concatenated.
  syntax:
    content: public boolean isConcat()
    return:
      type: boolean
      description: true if multiple encodings are concatenated, false if just the first one is returned
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)
  id: setConcat(boolean)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: setConcat(boolean concat)
  nameWithType: BeiderMorseEncoder.setConcat(boolean concat)
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean concat)
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Sets how multiple possible phonetic encodings are combined.
  syntax:
    content: public void setConcat(boolean concat)
    parameters:
    - id: concat
      type: boolean
      description: >-
        true if multiple encodings are to be combined with a '|', false if just the first one is
                    to be considered
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)
  id: setMaxPhonemes(int)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: setMaxPhonemes(int maxPhonemes)
  nameWithType: BeiderMorseEncoder.setMaxPhonemes(int maxPhonemes)
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int maxPhonemes)
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Sets the number of maximum of phonemes that shall be considered by the engine.
  syntax:
    content: public void setMaxPhonemes(int maxPhonemes)
    parameters:
    - id: maxPhonemes
      type: int
      description: the maximum number of phonemes returned by the engine
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(org.apache.commons.codec.language.bm.NameType)
  id: setNameType(org.apache.commons.codec.language.bm.NameType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: setNameType(NameType nameType)
  nameWithType: BeiderMorseEncoder.setNameType(NameType nameType)
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType(NameType nameType)
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Sets the type of name. Use <xref uid="org.apache.commons.codec.language.bm.NameType.GENERIC" data-throw-if-not-resolved="false">NameType#GENERIC</xref> unless you specifically want phonetic encodings optimized for Ashkenazi or Sephardic Jewish family names.
  syntax:
    content: public void setNameType(NameType nameType)
    parameters:
    - id: nameType
      type: org.apache.commons.codec.language.bm.NameType
      description: the NameType in use
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.apache.commons.codec.language.bm.RuleType)
  id: setRuleType(org.apache.commons.codec.language.bm.RuleType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: org.apache.commons.codec.language.bm.BeiderMorseEncoder
  langs:
  - java
  name: setRuleType(RuleType ruleType)
  nameWithType: BeiderMorseEncoder.setRuleType(RuleType ruleType)
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType(RuleType ruleType)
  overload: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType*
  type: Method
  package: org.apache.commons.codec.language.bm
  summary: Sets the rule type to apply. This will widen or narrow the range of phonetic encodings considered.
  syntax:
    content: public void setRuleType(RuleType ruleType)
    parameters:
    - id: ruleType
      type: org.apache.commons.codec.language.bm.RuleType
      description: <xref uid="org.apache.commons.codec.language.bm.RuleType.APPROX" data-throw-if-not-resolved="false">RuleType#APPROX</xref> or <xref uid="org.apache.commons.codec.language.bm.RuleType.EXACT" data-throw-if-not-resolved="false">RuleType#EXACT</xref> for approximate or exact phonetic matches
references:
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.BeiderMorseEncoder*
  name: BeiderMorseEncoder
  nameWithType: BeiderMorseEncoder.BeiderMorseEncoder
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.BeiderMorseEncoder
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.EncoderException
  name: EncoderException
  nameWithType: EncoderException
  fullName: org.apache.commons.codec.EncoderException
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode*
  name: encode
  nameWithType: BeiderMorseEncoder.encode
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.encode
  package: org.apache.commons.codec.language.bm
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: org.apache.commons.codec.language.bm.NameType
  name: NameType
  nameWithType: NameType
  fullName: org.apache.commons.codec.language.bm.NameType
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType*
  name: getNameType
  nameWithType: BeiderMorseEncoder.getNameType
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getNameType
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.RuleType
  name: RuleType
  nameWithType: RuleType
  fullName: org.apache.commons.codec.language.bm.RuleType
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType*
  name: getRuleType
  nameWithType: BeiderMorseEncoder.getRuleType
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.getRuleType
  package: org.apache.commons.codec.language.bm
- uid: boolean
  spec.java:
  - uid: boolean
    name: boolean
    fullName: boolean
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat*
  name: isConcat
  nameWithType: BeiderMorseEncoder.isConcat
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.isConcat
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat*
  name: setConcat
  nameWithType: BeiderMorseEncoder.setConcat
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setConcat
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType*
  name: setNameType
  nameWithType: BeiderMorseEncoder.setNameType
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setNameType
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType*
  name: setRuleType
  nameWithType: BeiderMorseEncoder.setRuleType
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setRuleType
  package: org.apache.commons.codec.language.bm
- uid: int
  spec.java:
  - uid: int
    name: int
    fullName: int
- uid: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes*
  name: setMaxPhonemes
  nameWithType: BeiderMorseEncoder.setMaxPhonemes
  fullName: org.apache.commons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes
  package: org.apache.commons.codec.language.bm
- uid: org.apache.commons.codec.StringEncoder
  name: StringEncoder
  nameWithType: StringEncoder
  fullName: org.apache.commons.codec.StringEncoder
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
