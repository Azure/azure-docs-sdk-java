### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.union*"
fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.union"
name: "union"
nameWithType: "ImmutableRangeSet<C>.union"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet.union(com.azure.cosmos.implementation.guava25.collect.RangeSet<C>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet<C>.union(RangeSet<C> other)"
  name: "union(RangeSet<C> other)"
  nameWithType: "ImmutableRangeSet<C>.union(RangeSet<C> other)"
  summary: "Returns a new range set consisting of the union of this range set and `other`.\n\nThis is essentially the same as `TreeRangeSet.create(this).addAll(other)` except it returns an `ImmutableRangeSet`."
  parameters:
  - name: "other"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.RangeSet?alt=com.azure.cosmos.implementation.guava25.collect.RangeSet&text=RangeSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public ImmutableRangeSet<C> union(RangeSet<C> other)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet?alt=com.azure.cosmos.implementation.guava25.collect.ImmutableRangeSet&text=ImmutableRangeSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.4.0-beta.1
