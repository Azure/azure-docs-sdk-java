### YamlMime:JavaMember
uid: "com.azure.core.util.logging.ClientLogger.log*"
fullName: "com.azure.core.util.logging.ClientLogger.log"
name: "log"
nameWithType: "ClientLogger.log"
members:
- uid: "com.azure.core.util.logging.ClientLogger.log(com.azure.core.util.logging.LogLevel,java.util.function.Supplier<java.lang.String>)"
  fullName: "com.azure.core.util.logging.ClientLogger.log(LogLevel logLevel, Supplier<String> message)"
  name: "log(LogLevel logLevel, Supplier<String> message)"
  nameWithType: "ClientLogger.log(LogLevel logLevel, Supplier<String> message)"
  summary: "Logs a format-able message that uses `{}` as the placeholder at the given `logLevel`.\n\n**Code samples**\n\nLogging with a specific log level\n\n```java\nlogger.log(LogLevel.VERBOSE,\n     () -> String.format(\"Param 1: %s, Param 2: %s, Param 3: %s\", \"param1\", \"param2\", \"param3\"));\n```"
  parameters:
  - description: "Logging level for the log message."
    name: "logLevel"
    type: "<xref href=\"com.azure.core.util.logging.LogLevel?alt=com.azure.core.util.logging.LogLevel&text=LogLevel\" data-throw-if-not-resolved=\"False\" />"
  - description: "The format-able message to log."
    name: "message"
    type: "<xref href=\"java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public void log(LogLevel logLevel, Supplier<String> message)"
- uid: "com.azure.core.util.logging.ClientLogger.log(com.azure.core.util.logging.LogLevel,java.util.function.Supplier<java.lang.String>,java.lang.Throwable)"
  fullName: "com.azure.core.util.logging.ClientLogger.log(LogLevel logLevel, Supplier<String> message, Throwable throwable)"
  name: "log(LogLevel logLevel, Supplier<String> message, Throwable throwable)"
  nameWithType: "ClientLogger.log(LogLevel logLevel, Supplier<String> message, Throwable throwable)"
  summary: "Logs a format-able message that uses `{}` as the placeholder at `verbose` log level.\n\n**Code samples**\n\nLogging with a specific log level and exception\n\n```java\nThrowable illegalArgumentException = new IllegalArgumentException(\"An invalid argument was encountered.\");\n logger.log(LogLevel.VERBOSE,\n     () -> String.format(\"Param 1: %s, Param 2: %s, Param 3: %s\", \"param1\", \"param2\", \"param3\"),\n     illegalArgumentException);\n```"
  parameters:
  - description: "Logging level for the log message."
    name: "logLevel"
    type: "<xref href=\"com.azure.core.util.logging.LogLevel?alt=com.azure.core.util.logging.LogLevel&text=LogLevel\" data-throw-if-not-resolved=\"False\" />"
  - description: "The format-able message to log."
    name: "message"
    type: "<xref href=\"java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />&gt;"
  - description: "Throwable for the message. <xref uid=\"java.lang.Throwable\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Throwable\"></xref>."
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void log(LogLevel logLevel, Supplier<String> message, Throwable throwable)"
type: "method"
metadata: {}
package: "com.azure.core.util.logging"
artifact: com.azure:azure-core:1.22.0-beta.1
