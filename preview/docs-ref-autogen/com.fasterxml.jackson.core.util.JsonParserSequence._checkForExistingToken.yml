### YamlMime:JavaMember
uid: "com.fasterxml.jackson.core.util.JsonParserSequence._checkForExistingToken*"
fullName: "com.fasterxml.jackson.core.util.JsonParserSequence._checkForExistingToken"
name: "_checkForExistingToken"
nameWithType: "JsonParserSequence._checkForExistingToken"
members:
- uid: "com.fasterxml.jackson.core.util.JsonParserSequence._checkForExistingToken"
  fullName: "com.fasterxml.jackson.core.util.JsonParserSequence._checkForExistingToken"
  name: "_checkForExistingToken"
  nameWithType: "JsonParserSequence._checkForExistingToken"
  summary: "Configuration that determines whether state of parsers is first verified to see if parser already points to a token (that is, <xref uid=\"com.fasterxml.jackson.core.JsonParser.hasCurrentToken()\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#hasCurrentToken()\"></xref> returns `true`), and if so that token is first return before <xref uid=\"com.fasterxml.jackson.core.JsonParser.nextToken*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#nextToken\"></xref> is called. If enabled, this check is made; if disabled, no check is made and <xref uid=\"com.fasterxml.jackson.core.JsonParser.nextToken*\" data-throw-if-not-resolved=\"false\" data-raw-source=\"JsonParser#nextToken\"></xref> is always called for all parsers.\n\nDefault setting is `false` (for backwards-compatibility) so that possible existing token is not considered for parsers."
  syntax: "protected final boolean _checkForExistingToken"
type: "field"
metadata: {}
package: "com.fasterxml.jackson.core.util"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
