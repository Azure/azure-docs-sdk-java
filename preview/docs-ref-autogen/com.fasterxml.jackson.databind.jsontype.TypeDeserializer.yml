### YamlMime:ManagedReference
items:
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  id: TypeDeserializer
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype
  children:
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.TypeDeserializer()
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl()
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName()
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver()
  - com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion()
  langs:
  - java
  name: TypeDeserializer
  nameWithType: TypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  type: Class
  package: com.fasterxml.jackson.databind.jsontype
  summary: >-
    Interface for deserializing type information from JSON content, to type-safely deserialize data into correct polymorphic instance (when type inclusion has been enabled for type handled).


    Separate deserialization methods are needed because serialized form for inclusion mechanism <xref uid="" data-throw-if-not-resolved="false">As#PROPERTY</xref> is slighty different if value is not expressed as JSON Object: and as such both type deserializer and serializer need to JSON Object form (array, object or other (== scalar)) being used.
  syntax:
    content: public abstract class TypeDeserializer
  inheritance:
  - java.lang.Object
  inheritedMembers:
  - java.lang.Object.clone()
  - java.lang.Object.equals(java.lang.Object)
  - java.lang.Object.finalize()
  - java.lang.Object.getClass()
  - java.lang.Object.hashCode()
  - java.lang.Object.notify()
  - java.lang.Object.notifyAll()
  - java.lang.Object.toString()
  - java.lang.Object.wait()
  - java.lang.Object.wait(long)
  - java.lang.Object.wait(long,int)
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.TypeDeserializer()
  id: TypeDeserializer()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: TypeDeserializer()
  nameWithType: TypeDeserializer.TypeDeserializer()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.TypeDeserializer()
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.TypeDeserializer*
  type: Constructor
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public TypeDeserializer()
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  id: deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: deserializeIfNatural(JsonParser p, DeserializationContext ctxt, JavaType baseType)
  nameWithType: TypeDeserializer.deserializeIfNatural(JsonParser p, DeserializationContext ctxt, JavaType baseType)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(JsonParser p, DeserializationContext ctxt, JavaType baseType)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Helper method used to check if given parser might be pointing to a "natural" value, and one that would be acceptable as the result value (compatible with declared base type)
  syntax:
    content: public static Object deserializeIfNatural(JsonParser p, DeserializationContext ctxt, JavaType baseType)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: baseType
      type: com.fasterxml.jackson.databind.JavaType
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>)
  id: deserializeIfNatural(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext,java.lang.Class<?>)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: deserializeIfNatural(JsonParser p, DeserializationContext ctxt, Class<?> base)
  nameWithType: TypeDeserializer.deserializeIfNatural(JsonParser p, DeserializationContext ctxt, Class<?> base)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(JsonParser p, DeserializationContext ctxt, Class<?> base)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  syntax:
    content: public static Object deserializeIfNatural(JsonParser p, DeserializationContext ctxt, Class<?> base)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    - id: base
      type: java.lang.Class<?>
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt)
  nameWithType: TypeDeserializer.deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to let this type deserializer handle deserialization of "typed" object, when value itself may have been serialized using any kind of JSON value (Array, Object, scalar). Should only be called if JSON serialization is polymorphic (not Java type); for example when using JSON node representation, or "untyped" Java object (which may be Map, Collection, wrapper/primitive etc).
  syntax:
    content: public abstract Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserializeTypedFromArray(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: deserializeTypedFromArray(JsonParser p, DeserializationContext ctxt)
  nameWithType: TypeDeserializer.deserializeTypedFromArray(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to let this type deserializer handle deserialization of "typed" object, when value itself is serialized as JSON Array (regardless of Java type). Method needs to figure out intended polymorphic type, locate <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref> to use, and call it with JSON data to deserializer (which does not contain type information).
  syntax:
    content: public abstract Object deserializeTypedFromArray(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserializeTypedFromObject(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt)
  nameWithType: TypeDeserializer.deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to let this type deserializer handle deserialization of "typed" object, when value itself is serialized as JSON Object (regardless of Java type). Method needs to figure out intended polymorphic type, locate <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref> to use, and call it with JSON data to deserializer (which does not contain type information).
  syntax:
    content: public abstract Object deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  id: deserializeTypedFromScalar(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: deserializeTypedFromScalar(JsonParser p, DeserializationContext ctxt)
  nameWithType: TypeDeserializer.deserializeTypedFromScalar(JsonParser p, DeserializationContext ctxt)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar(JsonParser p, DeserializationContext ctxt)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to let this type deserializer handle deserialization of "typed" object, when value itself is serialized as a scalar JSON value (something other than Array or Object), regardless of Java type. Method needs to figure out intended polymorphic type, locate <xref uid="com.fasterxml.jackson.databind.JsonDeserializer" data-throw-if-not-resolved="false">JsonDeserializer</xref> to use, and call it with JSON data to deserializer (which does not contain type information).
  syntax:
    content: public abstract Object deserializeTypedFromScalar(JsonParser p, DeserializationContext ctxt)
    parameters:
    - id: p
      type: com.fasterxml.jackson.core.JsonParser
    - id: ctxt
      type: com.fasterxml.jackson.databind.DeserializationContext
    return:
      type: java.lang.Object
  exceptions:
  - type: java.io.IOException
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)
  id: forProperty(com.fasterxml.jackson.databind.BeanProperty)
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: forProperty(BeanProperty prop)
  nameWithType: TypeDeserializer.forProperty(BeanProperty prop)
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty(BeanProperty prop)
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Method called to create contextual version, to be used for values of given property. This may be the type itself (as is the case for bean properties), or values contained (for <xref uid="java.util.Collection" data-throw-if-not-resolved="false">java.util.Collection</xref> or <xref uid="java.util.Map" data-throw-if-not-resolved="false">java.util.Map</xref> valued properties).
  syntax:
    content: public abstract TypeDeserializer forProperty(BeanProperty prop)
    parameters:
    - id: prop
      type: com.fasterxml.jackson.databind.BeanProperty
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl()
  id: getDefaultImpl()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: getDefaultImpl()
  nameWithType: TypeDeserializer.getDefaultImpl()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl()
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for "default implementation" type; optionally defined class to use in cases where type id is not accessible for some reason (either missing, or cannot be resolved)
  syntax:
    content: public abstract Class<?> getDefaultImpl()
    return:
      type: java.lang.Class<?>
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName()
  id: getPropertyName()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: getPropertyName()
  nameWithType: TypeDeserializer.getPropertyName()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName()
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Name of property that contains type information, if property-based inclusion is used.
  syntax:
    content: public abstract String getPropertyName()
    return:
      type: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver()
  id: getTypeIdResolver()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: getTypeIdResolver()
  nameWithType: TypeDeserializer.getTypeIdResolver()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver()
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for object that handles conversions between types and matching type ids.
  syntax:
    content: public abstract TypeIdResolver getTypeIdResolver()
    return:
      type: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion()
  id: getTypeInclusion()
  artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
  parent: com.fasterxml.jackson.databind.jsontype.TypeDeserializer
  langs:
  - java
  name: getTypeInclusion()
  nameWithType: TypeDeserializer.getTypeInclusion()
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion()
  overload: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion*
  type: Method
  package: com.fasterxml.jackson.databind.jsontype
  summary: Accessor for type information inclusion method that deserializer uses; indicates how type information is (expected to be) embedded in JSON input.
  syntax:
    content: public abstract JsonTypeInfo.As getTypeInclusion()
    return:
      type: com.fasterxml.jackson.annotation.JsonTypeInfo.As
references:
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.TypeDeserializer*
  name: TypeDeserializer
  nameWithType: TypeDeserializer.TypeDeserializer
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.TypeDeserializer
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.BeanProperty
  name: BeanProperty
  nameWithType: BeanProperty
  fullName: com.fasterxml.jackson.databind.BeanProperty
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty*
  name: forProperty
  nameWithType: TypeDeserializer.forProperty
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.annotation.JsonTypeInfo.As
  name: JsonTypeInfo.As
  nameWithType: JsonTypeInfo.As
  fullName: com.fasterxml.jackson.annotation.JsonTypeInfo.As
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion*
  name: getTypeInclusion
  nameWithType: TypeDeserializer.getTypeInclusion
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.String
  spec.java:
  - uid: java.lang.String
    name: String
    fullName: java.lang.String
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName*
  name: getPropertyName
  nameWithType: TypeDeserializer.getPropertyName
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
  name: TypeIdResolver
  nameWithType: TypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeIdResolver
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver*
  name: getTypeIdResolver
  nameWithType: TypeDeserializer.getTypeIdResolver
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Class<?>
  spec.java:
  - uid: java.lang.Class
    name: Class
    fullName: java.lang.Class
  - name: <
    fullName: <
  - uid: '?'
    name: '?'
    fullName: '?'
  - name: '>'
    fullName: '>'
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl*
  name: getDefaultImpl
  nameWithType: TypeDeserializer.getDefaultImpl
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.io.IOException
  spec.java:
  - uid: java.io.IOException
    name: IOException
    fullName: java.io.IOException
- uid: com.fasterxml.jackson.core.JsonParser
  name: JsonParser
  nameWithType: JsonParser
  fullName: com.fasterxml.jackson.core.JsonParser
- uid: com.fasterxml.jackson.databind.DeserializationContext
  name: DeserializationContext
  nameWithType: DeserializationContext
  fullName: com.fasterxml.jackson.databind.DeserializationContext
- uid: java.lang.Object
  spec.java:
  - uid: java.lang.Object
    name: Object
    fullName: java.lang.Object
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject*
  name: deserializeTypedFromObject
  nameWithType: TypeDeserializer.deserializeTypedFromObject
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray*
  name: deserializeTypedFromArray
  nameWithType: TypeDeserializer.deserializeTypedFromArray
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar*
  name: deserializeTypedFromScalar
  nameWithType: TypeDeserializer.deserializeTypedFromScalar
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny*
  name: deserializeTypedFromAny
  nameWithType: TypeDeserializer.deserializeTypedFromAny
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny
  package: com.fasterxml.jackson.databind.jsontype
- uid: com.fasterxml.jackson.databind.JavaType
  name: JavaType
  nameWithType: JavaType
  fullName: com.fasterxml.jackson.databind.JavaType
- uid: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural*
  name: deserializeIfNatural
  nameWithType: TypeDeserializer.deserializeIfNatural
  fullName: com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural
  package: com.fasterxml.jackson.databind.jsontype
- uid: java.lang.Object.notify()
  name: Object.notify()
  nameWithType: Object.notify()
  fullName: java.lang.Object.notify()
- uid: java.lang.Object.wait()
  name: Object.wait()
  nameWithType: Object.wait()
  fullName: java.lang.Object.wait()
- uid: java.lang.Object.finalize()
  name: Object.finalize()
  nameWithType: Object.finalize()
  fullName: java.lang.Object.finalize()
- uid: java.lang.Object.clone()
  name: Object.clone()
  nameWithType: Object.clone()
  fullName: java.lang.Object.clone()
- uid: java.lang.Object.notifyAll()
  name: Object.notifyAll()
  nameWithType: Object.notifyAll()
  fullName: java.lang.Object.notifyAll()
- uid: java.lang.Object.equals(java.lang.Object)
  name: Object.equals(Object)
  nameWithType: Object.equals(Object)
  fullName: java.lang.Object.equals(java.lang.Object)
- uid: java.lang.Object.getClass()
  name: Object.getClass()
  nameWithType: Object.getClass()
  fullName: java.lang.Object.getClass()
- uid: java.lang.Object.wait(long)
  name: Object.wait(long)
  nameWithType: Object.wait(long)
  fullName: java.lang.Object.wait(long)
- uid: java.lang.Object.hashCode()
  name: Object.hashCode()
  nameWithType: Object.hashCode()
  fullName: java.lang.Object.hashCode()
- uid: java.lang.Object.wait(long,int)
  name: Object.wait(long,int)
  nameWithType: Object.wait(long,int)
  fullName: java.lang.Object.wait(long,int)
- uid: java.lang.Object.toString()
  name: Object.toString()
  nameWithType: Object.toString()
  fullName: java.lang.Object.toString()
- uid: java.lang.Class
  name: Class
  nameWithType: Class
  fullName: java.lang.Class
- uid: '?'
  name: '?'
  nameWithType: '?'
  fullName: '?'
