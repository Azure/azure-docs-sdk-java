### YamlMime:JavaType
uid: "com.azure.core.util.serializer.TypeReference"
fullName: "com.azure.core.util.serializer.TypeReference<T>"
name: "TypeReference<T>"
nameWithType: "TypeReference<T>"
summary: "This class represents a generic Java type, retaining information about generics."
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public abstract class TypeReference<T>"
constructors:
- uid: "com.azure.core.util.serializer.TypeReference.TypeReference()"
  fullName: "com.azure.core.util.serializer.TypeReference<T>.TypeReference()"
  name: "TypeReference()"
  nameWithType: "TypeReference<T>.TypeReference()"
  summary: "Constructs a new <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> which maintains generic information."
  syntax: "public TypeReference()"
  desc: "Constructs a new <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> which maintains generic information."
methods:
- uid: "com.azure.core.util.serializer.TypeReference.<T>createInstance(java.lang.Class<T>)"
  fullName: "com.azure.core.util.serializer.TypeReference<T>.<T>createInstance(Class<T> clazz)"
  name: "<T>createInstance(Class<T> clazz)"
  nameWithType: "TypeReference<T>.<T>createInstance(Class<T> clazz)"
  summary: "Creates and instance of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> which maintains the generic `T` of the passed <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>."
  modifiers:
  - "static"
  parameters:
  - description: "<xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> that contains generic information used to create the <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>."
    name: "clazz"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static TypeReference<T> <T>createInstance(Class<T> clazz)"
  desc: "Creates and instance of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> which maintains the generic `T` of the passed <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref>.\n\nThis method will cache the instance of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref> using the passed <xref uid=\"java.lang.Class\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Class\"></xref> as the key. This is meant to be used with non-generic types such as primitive object types and POJOs, not `Map` or `List` parameterized types."
  returns:
    description: "Either the cached or new instance of <xref uid=\"com.azure.core.util.serializer.TypeReference\" data-throw-if-not-resolved=\"false\" data-raw-source=\"TypeReference\"></xref>."
    type: "<xref href=\"com.azure.core.util.serializer.TypeReference?alt=com.azure.core.util.serializer.TypeReference&text=TypeReference\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.core.util.serializer.TypeReference.getJavaType()"
  fullName: "com.azure.core.util.serializer.TypeReference<T>.getJavaType()"
  name: "getJavaType()"
  nameWithType: "TypeReference<T>.getJavaType()"
  summary: "Returns the <xref uid=\"java.lang.reflect.Type\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Type\"></xref> representing `T`."
  syntax: "public Type getJavaType()"
  desc: "Returns the <xref uid=\"java.lang.reflect.Type\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Type\"></xref> representing `T`."
  returns:
    description: "The <xref uid=\"java.lang.reflect.Type\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Type\"></xref> representing <code>T</code>."
    type: "<xref href=\"java.lang.reflect.Type?alt=java.lang.reflect.Type&text=Type\" data-throw-if-not-resolved=\"False\" />"
type: "class"
typeParameters:
- description: "The type being represented."
  name: "T"
desc: "This class represents a generic Java type, retaining information about generics.\n\n**Code sample**\n\n```java\n// Construct a TypeReference<T> for a Java generic type.\n // This pattern should only be used for generic types, for classes use the createInstance factory method.\n TypeReference<Map<String, Object>> typeReference = new TypeReference<Map<String, Object>>() { };\n```\n\n```java\n// Construct a TypeReference<T> for a Java class.\n // This pattern should only be used for non-generic classes when possible, use the constructor for generic\n // class when possible.\n TypeReference<Integer> typeReference = TypeReference.createInstance(int.class);\n```"
metadata: {}
package: "com.azure.core.util.serializer"
artifact: com.azure:azure-core:1.22.0-beta.1
