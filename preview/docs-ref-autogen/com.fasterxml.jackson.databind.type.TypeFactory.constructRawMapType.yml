### YamlMime:JavaMember
uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType*"
fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType"
name: "constructRawMapType"
nameWithType: "TypeFactory.constructRawMapType"
members:
- uid: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(java.lang.Class<? extends java.util.Map>)"
  fullName: "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(Class<? extends Map> mapClass)"
  name: "constructRawMapType(Class<? extends Map> mapClass)"
  nameWithType: "TypeFactory.constructRawMapType(Class<? extends Map> mapClass)"
  summary: "Method that can be used to construct \"raw\" Map type; meaning that its parameterization is unknown. This is similar to using `Object.class` parameterization, and is equivalent to calling:\n\n```java\ntypeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());\n```\n\nThis method should only be used if parameterization is completely unavailable."
  parameters:
  - name: "mapClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? extends java.util.Map?alt=? extends java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public MapType constructRawMapType(Class<? extends Map> mapClass)"
  returns:
    type: "<xref href=\"com.fasterxml.jackson.databind.type.MapType?alt=com.fasterxml.jackson.databind.type.MapType&text=MapType\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.fasterxml.jackson.databind.type"
artifact: com.azure:azure-security-keyvault-jca:1.0.0-beta.2
